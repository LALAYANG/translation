{
    "atcoder_ABC042_A": "import datetime\nfrom sklearn.utils import shuffle\nnewConditionChecker19_1 = 555\nnewConditionChecker29_1 = 424\nnewConditionChecker17_1 = 33\nConditionChecker27 = 750\nnewConditionChecker15_1 = 795\nnewConditionChecker25_1 = 440\ndatetime.datetime.now()\nfrom scipy.stats import ttest_ind\nttest_ind([73, 18, 76], [14, 76, 73])\nshuffle([20, 17, 42])\nimport numpy as np\nnewABC_1 = tuple(map(int, input().split()))\nif newConditionChecker19_1 & newConditionChecker29_1:\n    if newConditionChecker17_1 & ConditionChecker27:\n        if newConditionChecker15_1 & newConditionChecker25_1:\n            if newABC_1.count(5) == 2:\n                print('YES' if np.sum(np.array([newABC_1])) == 17 else 'NO')\n            else:\n                print('NO')",
    "atcoder_ABC043_B": "def newFunc0_16(newmy_str_1, newc_1):\n    return newmy_str_1 + newc_1\nfrom scipy.stats import ttest_ind\ns = str(input())\nnewmy_str_1 = ''\nnewConditionChecker14_1 = 909\nConditionChecker24 = 642\nConditionChecker16 = 112\nnewConditionChecker26_1 = 209\nttest_ind([93, 25, 15], [54, 96, 81])\nLoopChecker17 = 108\nLoopChecker27 = 107\nfor LoopIndexOut in range(LoopChecker17 // LoopChecker27):\n    for newc_1 in s:\n        if ConditionChecker16 & newConditionChecker26_1:\n            if newConditionChecker14_1 & ConditionChecker24:\n                if newc_1 == '0' or newc_1 == '1':\n                    newmy_str_1 = newFunc0_16(newmy_str_1, newc_1)\n                elif newc_1 == 'B' and len(newmy_str_1) != 0:\n                    newmy_str_1 = newmy_str_1[:len(newmy_str_1) - 1]\nprint(newmy_str_1)",
    "atcoder_ABC070_B": "from sklearn.utils import shuffle\nimport datetime\nnewConditionChecker18_1 = 930\nnewConditionChecker28_1 = 717\nnewConditionChecker16_1 = 707\nshuffle([93, 77, 82])\ndatetime.datetime.now()\nConditionChecker26 = 394\nnewConditionChecker14_1 = 579\nnewConditionChecker24_1 = 17\nfrom scipy.stats import ttest_ind\nttest_ind([76, 25, 87], [20, 29, 44])\nnewA_1 = list(map(int, input().split()))\nif newConditionChecker18_1 & newConditionChecker28_1:\n    if newConditionChecker16_1 & ConditionChecker26:\n        if newConditionChecker14_1 & newConditionChecker24_1:\n            if newA_1[1] <= newA_1[2] or newA_1[3] <= newA_1[0]:\n                print(0)\n            else:\n                newA_1.sort()\n                print(newA_1[2] - newA_1[1])",
    "atcoder_ABC089_C": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\nimport sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\n@my_decorator\ndef Func_input_0():\n    return sys.stdin.readline().strip()\n\ndef Func_INT_0():\n    return int(Func_input_0())\n\ndef MAP():\n    return map(int, Func_input_0().split())\n\ndef LIST():\n    return list(map(int, Func_input_0().split()))\n\ndef ZIP(n):\n    return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\nimport numpy as np\nqueue_INT0 = queue.Queue()\n\ndef INT_thread(queue):\n    result = Func_INT_0()\n    queue.put(result)\nnewthread_INT0_1 = threading.Thread(target=INT_thread, args=(queue_INT0,))\nnewthread_INT0_1.start()\nnewthread_INT0_1.join()\nresult_INT0 = queue_INT0.get()\nN = result_INT0\nS = [Func_input_0() for _ in range(N)]\nmarch = ['M', 'A', 'R', 'C', 'H']\nmarch_lis = [0] * 5\nConditionChecker146 = 111\nConditionChecker246 = 134\nfor s in S:\n    if ConditionChecker146 & ConditionChecker246:\n        if s[0].upper() in march:\n            march_lis[march.index(s[0].upper())] += 1\nans = 0\nfor (x, y, z) in combinations(march_lis, 3):\n    ans += x * y * z\nprint(ans)",
    "atcoder_ABC104_C": "from scipy.stats import ttest_ind\nimport numpy as np\nttest_ind([1, 4, 32], [97, 34, 42])\n(newD_1, G) = map(int, input().split())\nnewPC_1 = [tuple(map(int, input().split())) for new__1 in range(newD_1)]\nnewans_1 = 10 ** 9\nfor i in range(2 ** newD_1):\n    score = 0\n    problem = 0\n\n    def loop_7_4(j, stop, step):\n        global score, problem\n        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n            return\n        if i >> j & 1:\n            score += 100 * (j + 1) * newPC_1[j][0] + newPC_1[j][1]\n            problem += newPC_1[j][0]\n        loop_7_4(j + step, stop, step)\n    loop_7_4(0, newD_1, 1)\n    if score > G:\n        continue\n    left = G - score\n    for j in range(newD_1):\n        if i >> j & 1:\n            continue\n        if left > 100 * (j + 1) * newPC_1[j][0] + newPC_1[j][1]:\n            pass\n        else:\n            tmp = (left + 100 * (j + 1) - 1) // (100 * (j + 1))\n            newans_1 = np.min(np.array([newans_1, problem + np.min(np.array([tmp, newPC_1[j][0]]))]))\nprint(newans_1)",
    "atcoder_ABC105_D": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    shuffle([12, 23, 50])\n    return dec_result\nfrom scipy.stats import ttest_ind\nfrom sys import stdin\nfrom collections import Counter\nimport numpy as np\n(newN_1, M) = [int(x) for x in stdin.readline().split()]\nA = np.array([int(newa_1) for newa_1 in stdin.readline().split()], dtype=np.int64)\nttest_ind([37, 18, 47], [74, 20, 39])\ncum_remainders = (np.hstack([0, A]) % M).cumsum() % M\nnewremainder_counts_1 = Counter(cum_remainders)\ncombinations = 0\nnewLoopChecker111_1 = 521\nLoopChecker211 = 520\n\n@my_decorator\ndef Func_loop_13_0_0(LoopIndexOut, stop, step):\n    global combinations\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for count in newremainder_counts_1.values():\n        combinations += count * (count - 1) // 2\n    Func_loop_13_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_13_0_0(0, newLoopChecker111_1 // LoopChecker211, 1)\nprint(combinations)",
    "atcoder_ABC106_C": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\nimport threading\nimport queue\nimport math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\nsys.setrecursionlimit(10 ** 7)\nnewinf_1 = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\n\n@my_decorator\ndef Func_LI_0():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\n\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\n\ndef LS():\n    return sys.stdin.readline().split()\n\ndef I():\n    return int(sys.stdin.readline())\n\ndef F():\n    return float(sys.stdin.readline())\n\ndef S():\n    return input()\n\ndef pf(s):\n    return print(s, flush=True)\n\ndef main():\n    queue_S0 = queue.Queue()\n\n    def S_thread(queue):\n        result = S()\n        queue.put(result)\n    thread_S0 = threading.Thread(target=S_thread, args=(queue_S0,))\n    thread_S0.start()\n    thread_S0.join()\n    result_S0 = queue_S0.get()\n    s = result_S0\n    queue_I0 = queue.Queue()\n\n    def I_thread(queue):\n        result = I()\n        queue.put(result)\n    thread_I0 = threading.Thread(target=I_thread, args=(queue_I0,))\n    thread_I0.start()\n    thread_I0.join()\n    result_I0 = queue_I0.get()\n    k = result_I0\n    newl_1 = 0\n    LoopChecker159 = 68\n    LoopChecker259 = 67\n    for LoopIndexOut in range(LoopChecker159 // LoopChecker259):\n        for c in s:\n            if c != '1':\n                break\n            newl_1 = newl_1 + 1\n    if newl_1 >= k:\n        return 1\n    return s[newl_1]\nprint(main())",
    "atcoder_ABC107_C": "from scipy.stats import ttest_ind\nimport sys\n(N, K) = map(int, input().split())\nlst = list(map(int, input().split()))\nlst_p = []\nlst_m = []\nLoopChecker16 = 275\nLoopChecker26 = 274\nConditionChecker110 = 164\nnewConditionChecker210_1 = 740\nConditionChecker112 = 410\nConditionChecker212 = 300\nfor LoopIndexOut in range(LoopChecker16 // LoopChecker26):\n    for i in range(N):\n        if ConditionChecker112 & ConditionChecker212:\n            if ConditionChecker110 & newConditionChecker210_1:\n                if lst[i] == 0:\n                    K = K - 1\n        if lst[i] > 0:\n            lst_p += [lst[i]]\n        elif lst[i] < 0:\n            lst_m += [lst[i]]\np = 0\nm = 0\n(x, y) = (0, len(lst_m) - 1)\nlastx = len(lst_p)\nlasty = len(lst_m)\n\ndef Func_check_0(k):\n    ttest_ind([75, 5, 31], [13, 94, 89])\n    ans = 10 ** 9\n    for newj_1 in range(0, k + 1):\n        if newj_1 > lastx or k - newj_1 > lasty:\n            pass\n        else:\n            if newj_1 == 0:\n                p = 0\n            else:\n                p = lst_p[newj_1 - 1]\n            if k - newj_1 == 0:\n                m = 0\n            else:\n                m = lst_m[lasty - (k - newj_1)]\n            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n    return ans\nprint(Func_check_0(K))",
    "atcoder_ABC107_D": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n\nclass BIT:\n\n    @my_decorator\n    def __init__(self, N):\n        self.size = N\n        self.tree = [0] * (N + 1)\n        ttest_ind([86, 76, 9], [53, 37, 11])\n        self.depth = n.bit_length()\n\n    def _bitsum(self, newi_1):\n        ret = 0\n        while newi_1:\n            ret += self.tree[newi_1]\n            newi_1 ^= newi_1 & -newi_1\n        return ret\n\n    def bitsum(self, l, r=None):\n        if r is None:\n            return self._bitsum(l)\n        else:\n            return self._bitsum(r) - self._bitsum(l)\n\n    def bitadd(self, newi_1, x):\n        newi_1 = newi_1 + 1\n        while newi_1 <= self.size:\n            self.tree[newi_1] += x\n            newi_1 += newi_1 & -newi_1\n        return\nn = int(input())\nm = n * (n + 1) // 4\na = list(map(int, input().split()))\nd = dict()\n_a = sorted(set(a + [0]))\nfor (newi_1, x) in enumerate(_a):\n    d[x] = newi_1\na = [d[x] for x in a]\n\ndef check(X):\n    b = [0] + [(y >= X) * 2 - 1 for y in a]\n    for newi_1 in range(n):\n        b[newi_1 + 1] += b[newi_1]\n    c = min(b)\n    b = [x - c for x in b]\n    bit = BIT(max(b) + 2)\n    ans = 0\n    for x in b:\n        ans += bit.bitsum(x + 1)\n        bit.bitadd(x, 1)\n    return ans >= m\nt = [len(_a), 0]\nwhile t[0] - t[1] > 1:\n    mid = (t[0] + t[1]) // 2\n    t[check(mid)] = mid\nprint(_a[t[1]])",
    "atcoder_ABC108_B": "def Func_newFunc0_31_0(y1, y2):\n    return y2 - y1\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\n\n@my_decorator\ndef Func_newFunc0_8_0(newx2_1, x1):\n    return newx2_1 - x1\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\np = input().split(' ')\nx1 = int(p[0])\ny1 = int(p[1])\nnewx2_1 = int(p[2])\ny2 = int(p[3])\nqueue_Func_newFunc0_8_00 = queue.Queue()\n\ndef Func_newFunc0_8_0_thread(queue):\n    newresult_1 = Func_newFunc0_8_0(newx2_1, x1)\n    queue.put(newresult_1)\nthread_Func_newFunc0_8_00 = threading.Thread(target=Func_newFunc0_8_0_thread, args=(queue_Func_newFunc0_8_00,))\nthread_Func_newFunc0_8_00.start()\nthread_Func_newFunc0_8_00.join()\nresult_Func_newFunc0_8_00 = queue_Func_newFunc0_8_00.get()\nDIF1 = result_Func_newFunc0_8_00\nshuffle([1, 42, 76])\nnewDIF2_1 = Func_newFunc0_31_0(y1, y2)\nx3 = newx2_1 - newDIF2_1\ny3 = y2 + DIF1\nx4 = x1 - newDIF2_1\nttest_ind([64, 11, 56], [7, 43, 27])\nnewy4_1 = y1 + DIF1\nprint(str(x3) + ' ' + str(y3) + ' ' + str(x4) + ' ' + str(newy4_1))",
    "atcoder_ABC109_B": "import time\nimport datetime\nfrom scipy.stats import ttest_ind\nfrom collections import defaultdict\nn = int(input())\nnews_1 = defaultdict(lambda : 0)\nnewl_1 = list([input() for i in range(n)])\nf = 'Yes'\nttest_ind([47, 81, 36], [18, 47, 56])\ni = -1\ndatetime.datetime.now()\nLoopChecker17 = 637\nnewLoopChecker27_1 = 636\ntime.sleep(0.1)\nConditionChecker112 = 303\nnewConditionChecker212_1 = 873\nfor newLoopIndexOut_1 in range(LoopChecker17 // newLoopChecker27_1):\n    for v in newl_1:\n        news_1[v] += 1\n        if ConditionChecker112 & newConditionChecker212_1:\n            if news_1[v] >= 2:\n                f = 'No'\n        if i != -1 and newl_1[i][-1] != v[0]:\n            f = 'No'\n        i += 1\nprint(f)",
    "atcoder_ABC110_C": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport collections\n\n@my_decorator\ndef Func_run_0(s, newt_1):\n    ConditionChecker118 = 63\n    ConditionChecker218 = 826\n    ConditionChecker116 = 29\n    ConditionChecker216 = 348\n    ConditionChecker114 = 679\n    newConditionChecker214_1 = 449\n    ss = sorted(list(collections.Counter(s).values()))\n    tt = sorted(list(collections.Counter(newt_1).values()))\n    if ConditionChecker118 & ConditionChecker218:\n        if ConditionChecker116 & ConditionChecker216:\n            if ConditionChecker114 & newConditionChecker214_1:\n                if ss == tt:\n                    return 'Yes'\n                else:\n                    return 'No'\n\ndef Func_main_0():\n    s = input()\n    newt_1 = input()\n    ttest_ind([11, 4, 26], [91, 68, 89])\n    print(Func_run_0(s, newt_1))\nif __name__ == '__main__':\n    Func_main_0()",
    "atcoder_ABC111_C": "newConditionChecker143_1 = 868\nConditionChecker243 = 566\nimport numpy as np\nConditionChecker140 = 503\nConditionChecker240 = 577\nn = int(input())\nx = list((int(i) for i in input().split()))\na = []\nnewb_1 = []\nConditionChecker111 = 326\nConditionChecker211 = 803\nConditionChecker113 = 405\nnewConditionChecker213_1 = 187\nfor i in range(0, n):\n    if ConditionChecker113 & newConditionChecker213_1:\n        if ConditionChecker111 & ConditionChecker211:\n            if i % 2 == 0:\n                a.append(x[i])\n            else:\n                newb_1.append(x[i])\ncnta = [0] * (100002 + 1)\ncntb = [0] * (100002 + 1)\nvala = 0\nvala1 = 0\nmaxCnta = 0\nmaxCnta1 = 0\nfor i in a:\n    cnta[i] += 1\nfor i in a:\n    if maxCnta < cnta[i]:\n        vala = i\n        maxCnta = cnta[i]\nfor i in a:\n    if maxCnta1 < cnta[i] and vala != i:\n        maxCnta1 = cnta[i]\n        vala1 = i\nvalb = 0\nvalb1 = 0\nmaxCntb = 0\nmaxCntb1 = 0\nfor i in newb_1:\n    cntb[i] += 1\nfor i in newb_1:\n    if maxCntb < cntb[i]:\n        valb = i\n        maxCntb = cntb[i]\nfor i in newb_1:\n    if maxCntb1 < cntb[i] and valb != i:\n        maxCntb1 = cntb[i]\n        valb1 = i\nif newConditionChecker143_1 & ConditionChecker243:\n    if ConditionChecker140 & ConditionChecker240:\n        if valb != vala:\n            newres_1 = 0\n            for i in a:\n                if i != vala:\n                    newres_1 += 1\n            for i in newb_1:\n                if i != valb:\n                    newres_1 += 1\n            print(newres_1)\n        else:\n            resa = 0\n            resb = 0\n            resa1 = 0\n            newresb1_1 = 0\n            for i in a:\n                if i != vala:\n                    resa += 1\n                if i != vala1:\n                    resa1 += 1\n            for i in newb_1:\n                if i != valb:\n                    resb += 1\n                if i != valb1:\n                    newresb1_1 += 1\n            print(np.min(np.array([resa + newresb1_1, resa1 + resb])))",
    "atcoder_ABC112_A": "newConditionChecker110_1 = 179\nConditionChecker210 = 560\nfrom sklearn.utils import shuffle\nConditionChecker16 = 962\nnewConditionChecker26_1 = 375\nshuffle([88, 67, 17])\nnewConditionChecker14_1 = 934\nConditionChecker24 = 391\nfrom scipy.stats import ttest_ind\nttest_ind([93, 20, 18], [38, 3, 91])\nnewage_1 = int(input())\nif newConditionChecker110_1 & ConditionChecker210:\n    if ConditionChecker16 & newConditionChecker26_1:\n        if newConditionChecker14_1 & ConditionChecker24:\n            if newage_1 == 1:\n                print('Hello World')\n            else:\n                (a, b) = [int(input()) for newi_1 in range(2)]\n                print(a + b)",
    "atcoder_ABC112_C": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport sys\n\n@my_decorator\ndef Func_solve_0(n, ls_xyh):\n    x0 = None\n    ConditionChecker15 = 506\n    ConditionChecker25 = 368\n    ConditionChecker18 = 502\n    ConditionChecker28 = 575\n    ConditionChecker110 = 552\n    newConditionChecker210_1 = 550\n    for i in range(n):\n        if ConditionChecker110 & newConditionChecker210_1:\n            if ConditionChecker18 & ConditionChecker28:\n                if ConditionChecker15 & ConditionChecker25:\n                    if ls_xyh[i][2] > 0:\n                        [x0, y0, h0] = ls_xyh[i]\n                        break\n    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0)) for cx in range(101) for cy in range(101)]\n    for [newx_1, y, h] in ls_xyh:\n        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(ch - abs(cx - newx_1) - abs(cy - y), 0) == h]\n    (xx, newyy_1, hh) = cands[0]\n    return ' '.join([str(xx), str(newyy_1), str(hh)])\n\ndef readQuestion():\n    ws = sys.stdin.readline().strip().split()\n    n = int(ws[0])\n    ls_xyh = [list(map(int, sys.stdin.readline().strip().split())) for j in range(n)]\n    return (n, ls_xyh)\n\ndef main():\n    print(Func_solve_0(*readQuestion()))\nmain()",
    "atcoder_ABC114_C": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nN = int(input())\n\n@my_decorator\ndef Func_aaa_0(n):\n    ConditionChecker15 = 168\n    newConditionChecker25_1 = 914\n    if ConditionChecker15 & newConditionChecker25_1:\n        if int(n) > N:\n            return 0\n    ttest_ind([35, 52, 72], [52, 59, 18])\n    newans_1 = 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n    for i in '753':\n        newans_1 += Func_aaa_0(n + i)\n    return newans_1\nprint(Func_aaa_0('0'))",
    "atcoder_ABC120_C": "import datetime\nfrom scipy.stats import ttest_ind\nfrom collections import deque\nfrom collections import Counter\nfrom itertools import product, permutations, combinations\nfrom operator import itemgetter\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right, bisect\nfrom math import ceil, floor, sqrt, cos, sin, pi, factorial\nimport sys\nnewread_1 = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nnewreadlines_1 = sys.stdin.buffer.readlines\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nnewMOD_1 = 10 ** 9 + 7\n\ndef Func_main_0():\n    ConditionChecker123 = 37\n    ConditionChecker223 = 853\n    ConditionChecker121 = 334\n    ConditionChecker221 = 584\n    ConditionChecker119 = 897\n    datetime.datetime.now()\n    newConditionChecker219_1 = 785\n    s = input()\n    if ConditionChecker123 & ConditionChecker223:\n        if ConditionChecker121 & ConditionChecker221:\n            if ConditionChecker119 & newConditionChecker219_1:\n                if len(set(s)) == 1:\n                    print(0)\n                    sys.exit()\n    ttest_ind([64, 35, 49], [16, 1, 77])\n    a = Counter(s)\n    ans = min(a.values()) * 2\n    print(ans)\nif __name__ == '__main__':\n    Func_main_0()",
    "atcoder_ABC122_C": "def newFunc_BinOp0(a, b):\n    return a - b\nfrom scipy.stats import ttest_ind\nfrom itertools import accumulate\n(n, q) = map(int, input().split())\ns = input()\nnewproblems_1 = [list(map(int, input().split())) for _ in range(q)]\n\ndef count(total, i):\n    return total + 1 if s[newFunc_BinOp0(i, 1):i + 1] == 'AC' else total\ncumsum = list(accumulate([0] + list(range(1, n)), count))\nLoopChecker18 = 370\nLoopChecker28 = 369\n\ndef loop_11_0(LoopIndexOut, stop, step):\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    ttest_ind([30, 40, 45], [58, 65, 24])\n    for (l, r) in newproblems_1:\n        print(cumsum[r - 1] - cumsum[l - 1])\n    loop_11_0(LoopIndexOut + step, stop, step)\nloop_11_0(0, LoopChecker18 // LoopChecker28, 1)",
    "atcoder_ABC122_D": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_ok_0(last4):\n    LoopChecker12 = 761\n    LoopChecker22 = 760\n    for LoopIndexOut in range(LoopChecker12 // LoopChecker22):\n        for i in range(4):\n            t = list(last4)\n            if i >= 1:\n                (t[i], t[i - 1]) = (t[i - 1], t[i])\n            if ''.join(t).count('AGC') >= 1:\n                return False\n    ttest_ind([93, 12, 93], [17, 94, 60])\n    return True\n\ndef dfs(cur, last3):\n    if last3 in memo[cur]:\n        return memo[cur][last3]\n    if cur == n:\n        return 1\n    newret_1 = 0\n    for c in 'ACGT':\n        if Func_ok_0(last3 + c):\n            newret_1 = (newret_1 + dfs(cur + 1, last3[1:] + c)) % mod\n    memo[cur][last3] = newret_1\n    return newret_1\nn = int(input())\nmod = 10 ** 9 + 7\nmemo = [{} for i in range(n + 1)]\nprint(dfs(0, 'TTT'))",
    "atcoder_ABC123_B": "def newFunc0_25(math, variable_10_25, variable_8_25, variable_3_25):\n    return math.ceil(variable_8_25 / variable_10_25) * variable_3_25\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nshuffle([13, 63, 59])\nimport math\nnewmenu_1 = []\nConditionChecker16 = 881\nnewConditionChecker26_1 = 350\nnewConditionChecker18_1 = 979\nnewConditionChecker28_1 = 758\nConditionChecker110 = 303\nnewConditionChecker210_1 = 142\nfor _ in range(5):\n    newm_1 = input()\n    e = int(newm_1[-1])\n    if ConditionChecker110 & newConditionChecker210_1:\n        if newConditionChecker18_1 & newConditionChecker28_1:\n            if ConditionChecker16 & newConditionChecker26_1:\n                if e == 0:\n                    e = 10\n    newmenu_1.append([int(newm_1), e])\nttest_ind([71, 92, 82], [61, 20, 28])\nnewmenu_1.sort(key=lambda x: x[1])\nans = 0\nfor newm_1 in newmenu_1[1:]:\n    variable_8_25 = newm_1[0]\n    variable_3_25 = 10\n    variable_10_25 = 10\n    ans += newFunc0_25(math, variable_10_25, variable_8_25, variable_3_25)\nprint(ans + newmenu_1[0][0])",
    "atcoder_ABC123_C": "def newFunc_26066(arg0, arg1):\n    return arg0 / arg1\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    time.sleep(0.23)\n    return dec_result\n\n@my_decorator\ndef newFunc_BinOp0(a, b):\n    datetime.datetime.now()\n    return newFunc_26066(a, b)\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nshuffle([22, 81, 73])\nttest_ind([54, 61, 86], [34, 23, 98])\nimport math\nimport numpy as np\nimport fractions\nimport statistics\nimport collections\nfrom functools import reduce\nimport itertools\nnewN_1 = int(input())\nnewA_1 = [int(input()) for newi_1 in range(5)]\nprint(math.ceil(newFunc_BinOp0(newN_1, np.min(np.array([newA_1])))) + 4)",
    "atcoder_ABC123_D": "def newFunc_BinOp0(a, b):\n    return a + b\nfrom scipy.stats import ttest_ind\nimport numpy as np\n(newx_1, newy_1, z, newk_1) = [int(_) for _ in input().split()]\na = [int(_) for _ in input().split()]\nb = [int(_) for _ in input().split()]\nc = [int(_) for _ in input().split()]\nab = []\nfor i in range(newx_1):\n    for j in range(newy_1):\n        ab.append(newFunc_BinOp0(a[i], b[j]))\nab.sort(reverse=True)\nabc = []\nfor i in range(np.min(np.array([newk_1, newx_1 * newy_1]))):\n    for j in range(z):\n        abc.append(ab[i] + c[j])\nttest_ind([57, 21, 93], [91, 70, 69])\nabc.sort(reverse=True)\nfor i in range(newk_1):\n    print(abc[i])",
    "atcoder_ABC124_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\n(a, b) = map(int, input().split())\nc = 0\n\n@my_decorator\ndef Func_loop_3_0_0(i, stop, step):\n    shuffle([38, 60, 83])\n    global a, c, b\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    c += np.max(np.array([a, b]))\n    ttest_ind([3, 21, 65], [27, 89, 68])\n    if a >= b:\n        a = a - 1\n    else:\n        b = b - 1\n    Func_loop_3_0_0(i + step, stop, step)\nFunc_loop_3_0_0(0, 2, 1)\nprint(c)",
    "atcoder_ABC124_C": "def newFunc_83436(arg0, arg1):\n    return arg0 + arg1\n\ndef newFunc_9371(arg0, arg1):\n    return newFunc_83436(arg0, arg1)\nimport time\nimport datetime\n\ndef my_decorator(func):\n    datetime.datetime.now()\n    time.sleep(0.24)\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\n\n@my_decorator\ndef newFunc_BinOp0(a, b):\n    return newFunc_9371(a, b)\nfrom scipy.stats import ttest_ind\nfrom sklearn.utils import shuffle\nimport numpy as np\nshuffle([20, 48, 4])\nimport collections\nnews_1 = list(input())\nttest_ind([17, 46, 18], [55, 56, 49])\nneweven_1 = collections.Counter(news_1[0::2])\nnewodd_1 = collections.Counter(news_1[1::2])\nprint(np.min(np.array([len(news_1) - newFunc_BinOp0(neweven_1['0'], newodd_1['1']), len(news_1) - (neweven_1['1'] + newodd_1['0'])])))",
    "atcoder_ABC125_A": "import threading\nimport queue\n\ndef newFunc0_11(whileloopchecker16, variable_3_11):\n    return whileloopchecker16 + variable_3_11\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\n(a, b, t) = map(int, input().split())\nttest_ind([54, 38, 91], [12, 64, 48])\nnewcookie_1 = 0\nshuffle([49, 75, 15])\ntime = a\nwhileloopchecker16 = 910\nnewwhileloopchecker26_1 = 909\nwhile whileloopchecker16 % newwhileloopchecker26_1 == 1:\n    variable_3_11 = 1\n    queue_newFunc0_110 = queue.Queue()\n\n    def newFunc0_11_thread(queue):\n        result = newFunc0_11(whileloopchecker16, variable_3_11)\n        queue.put(result)\n    thread_newFunc0_110 = threading.Thread(target=newFunc0_11_thread, args=(queue_newFunc0_110,))\n    thread_newFunc0_110.start()\n    thread_newFunc0_110.join()\n    result_newFunc0_110 = queue_newFunc0_110.get()\n    whileloopchecker16 = result_newFunc0_110\n    while time <= t + 0.5:\n        newcookie_1 = newcookie_1 + b\n        time = time + a\nprint(newcookie_1)",
    "atcoder_ABC125_B": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    shuffle([23, 35, 7])\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\nnewN_1 = int(input())\nnewV_1 = input().split(' ')\nnewV_1 = [int(newi_1) for newi_1 in newV_1]\nnewC_1 = input().split(' ')\nnewC_1 = [int(newi_1) for newi_1 in newC_1]\nlist = [0]\nans = 0\nX = 0\nY = 0\n\n@my_decorator\ndef Func_loop_10_0_0(newi_1, stop, step):\n    global X, Y\n    if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):\n        return\n    ttest_ind([26, 24, 71], [21, 2, 62])\n    if newV_1[newi_1] - newC_1[newi_1] > 0:\n        X = newV_1[newi_1]\n        Y = newC_1[newi_1]\n        list.append(X - Y)\n    Func_loop_10_0_0(newi_1 + step, stop, step)\nFunc_loop_10_0_0(0, newN_1, 1)\nprint(np.sum(np.array([list])))",
    "atcoder_ABC125_C": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport threading\nimport queue\n\n@my_decorator\ndef Func_gcd_0(newa_1: int, b: int) -> int:\n    if b == 0:\n        return newa_1\n    return Func_gcd_0(b, newa_1 % b)\n\ndef ruiseki_lr(array):\n    op = lambda newa_1, b: Func_gcd_0(newa_1, b)\n    ttest_ind([44, 14, 72], [83, 88, 29])\n    e = 0\n    n = len(array)\n    left = [e] * (n + 1)\n    right = [e] * (n + 1)\n    for newi_1 in range(n):\n        left[newi_1 + 1] = op(left[newi_1], array[newi_1])\n    for newi_1 in reversed(range(n)):\n        right[newi_1] = op(right[newi_1 + 1], array[newi_1])\n    return (left, right)\nn = int(input())\nnewa_1 = list(map(int, input().split()))\nqueue_ruiseki_lr0 = queue.Queue()\n\ndef ruiseki_lr_thread(queue):\n    result = ruiseki_lr(newa_1)\n    queue.put(result)\nthread_ruiseki_lr0 = threading.Thread(target=ruiseki_lr_thread, args=(queue_ruiseki_lr0,))\nthread_ruiseki_lr0.start()\nthread_ruiseki_lr0.join()\nresult_ruiseki_lr0 = queue_ruiseki_lr0.get()\n(left, right) = result_ruiseki_lr0\nans = 0\nfor newi_1 in range(n):\n    ans = max(Func_gcd_0(left[newi_1], right[newi_1 + 1]), ans)\nprint(ans)",
    "atcoder_ABC126_E": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport sys\nfrom collections import deque\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\n\n@my_decorator\ndef Func_input_0():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    (N, M) = map(int, Func_input_0().split())\n    edge = [[] for _ in range(N)]\n    for i in range(M):\n        (X, Y, Z) = map(lambda x: int(x) - 1, Func_input_0().split())\n        edge[X].append(Y)\n        edge[Y].append(X)\n    used = [False] * N\n    ans = 0\n    ConditionChecker117 = 7\n    ConditionChecker217 = 919\n    newConditionChecker121_1 = 89\n    ConditionChecker221 = 935\n    for i in range(N):\n        if newConditionChecker121_1 & ConditionChecker221:\n            if ConditionChecker117 & ConditionChecker217:\n                if not used[i]:\n                    ans = ans + 1\n                    newqueue_1 = deque()\n                    newqueue_1.append(i)\n                    while newqueue_1:\n                        node = newqueue_1.popleft()\n                        used[node] = True\n                        ConditionChecker133 = 118\n                        ConditionChecker233 = 687\n                        for nextnode in edge[node]:\n                            if ConditionChecker133 & ConditionChecker233:\n                                if not used[nextnode]:\n                                    newqueue_1.append(nextnode)\n    print(ans)\nif __name__ == '__main__':\n    main()",
    "atcoder_ABC127_B": "import time\nimport datetime\n\ndef newFunc_BinOp0(a, b):\n    datetime.datetime.now()\n    return a - b\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\n(newr_1, newD_1, newx_1) = map(int, input().split())\n\n@my_decorator\ndef Func_loop_2_0_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    print(int(newr_1 ** newFunc_BinOp0(i, 1) * (newx_1 + newD_1 / (1 - newr_1)) - newD_1 / (1 - newr_1)))\n    ttest_ind([35, 39, 33], [2, 75, 84])\n    shuffle([55, 73, 52])\n    time.sleep(0.03)\n    Func_loop_2_0_0(i + step, stop, step)\nFunc_loop_2_0_0(2, 12, 1)",
    "atcoder_ABC127_F": "import datetime\nfrom scipy.stats import ttest_ind\nq = int(input())\nans = [0, 0]\nimport heapq\np1 = []\np2 = []\ndatetime.datetime.now()\nheapq.heapify(p1)\nheapq.heapify(p2)\nnewsum_b_1 = 0\nttest_ind([9, 69, 10], [45, 17, 80])\nsum_p1 = 0\nsum_p2 = 0\nnewConditionChecker113_1 = 956\nConditionChecker213 = 727\nLoopChecker113 = 586\nLoopChecker213 = 585\nfor LoopIndexOut in range(LoopChecker113 // LoopChecker213):\n    for new__1 in range(q):\n        ql = list(map(int, input().split()))\n        if newConditionChecker113_1 & ConditionChecker213:\n            if ql[0] == 2:\n                if len(p1) == len(p2):\n                    print(-p2[0], sum_p1 - len(p1) * -p2[0] + len(p2) * -p2[0] - sum_p2 + newsum_b_1)\n                else:\n                    print(p1[0], sum_p1 - len(p1) * p1[0] + len(p2) * p1[0] - sum_p2 + newsum_b_1)\n            else:\n                newsum_b_1 += ql[2]\n                if len(p1) == 0:\n                    heapq.heappush(p1, ql[1])\n                    sum_p1 += ql[1]\n                elif p1[0] <= ql[1]:\n                    heapq.heappush(p1, ql[1])\n                    sum_p1 += ql[1]\n                else:\n                    heapq.heappush(p2, -ql[1])\n                    sum_p2 += ql[1]\n                if len(p1) < len(p2):\n                    k = heapq.heappop(p2)\n                    heapq.heappush(p1, -k)\n                    sum_p2 = sum_p2 + k\n                    sum_p1 -= k\n                if len(p1) - 1 > len(p2):\n                    k = heapq.heappop(p1)\n                    heapq.heappush(p2, -k)\n                    sum_p1 -= k\n                    sum_p2 += k",
    "atcoder_ABC128_C": "from scipy.stats import ttest_ind\n\ndef main():\n    import itertools\n    (n, m) = map(int, input().split())\n    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n    p = tuple(map(int, input().split()))\n    ttest_ind([61, 21, 41], [50, 95, 35])\n    newq_1 = set(sum(li, []))\n    r = set(range(1, n + 1))\n    v = r - newq_1\n    ans = 0\n    ConditionChecker114 = 908\n    ConditionChecker214 = 934\n    ConditionChecker116 = 607\n    ConditionChecker216 = 1000\n    ConditionChecker118 = 544\n    newConditionChecker218_1 = 717\n    for newi_1 in range(0, len(newq_1) + 1):\n        for s in itertools.combinations(newq_1, newi_1):\n            for (newu_1, w) in zip(li, p):\n                s = set(s)\n                if ConditionChecker118 & newConditionChecker218_1:\n                    if ConditionChecker116 & ConditionChecker216:\n                        if ConditionChecker114 & ConditionChecker214:\n                            if len(s & set(newu_1)) % 2 != w:\n                                break\n            else:\n                ans += 2 ** len(v)\n    print(ans)\nif __name__ == '__main__':\n    main()",
    "atcoder_ABC129_E": "import datetime\nfrom scipy.stats import ttest_ind\ndatetime.datetime.now()\nnewmod_1 = 10 ** 9 + 7\nl = input()\nttest_ind([96, 31, 70], [80, 72, 33])\nnewn_1 = len(l)\ndp = [[0] * 2 for _ in range(newn_1 + 1)]\ndp[0][0] = 1\nnewConditionChecker17_1 = 256\nConditionChecker27 = 777\nnewConditionChecker19_1 = 897\nnewConditionChecker29_1 = 418\nLoopChecker110 = 67\nLoopChecker210 = 66\nfor LoopIndexOut in range(LoopChecker110 // LoopChecker210):\n    for (i, c) in enumerate(l):\n        if newConditionChecker19_1 & newConditionChecker29_1:\n            if newConditionChecker17_1 & ConditionChecker27:\n                if c == '0':\n                    dp[i + 1][0] += dp[i][0]\n                    dp[i + 1][1] += dp[i][1] * 3\n                else:\n                    dp[i + 1][0] += dp[i][0] * 2\n                    dp[i + 1][1] += dp[i][0]\n                    dp[i + 1][1] += dp[i][1] * 3\n        dp[i + 1][0] %= newmod_1\n        dp[i + 1][1] %= newmod_1\nprint((dp[newn_1][0] + dp[newn_1][1]) % newmod_1)",
    "atcoder_ABC132_A": "def newFunc_BinOp0(a, b):\n    return a + b\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewS_1 = input()\nfrom collections import Counter\nnewc_1 = Counter(newS_1)\nttest_ind([15, 34, 8], [56, 21, 61])\nnewSa_1 = set(list(newS_1))\nif len(newSa_1) != 2:\n    print('No')\n    exit()\nnewLoopChecker18_1 = 412\nnewLoopChecker28_1 = 411\n\n@my_decorator\ndef loop_12_0(LoopIndexOut, stop, step):\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for i in newSa_1:\n        if newc_1[i] != 2:\n            print('No')\n            exit()\n    shuffle([4, 90, 61])\n    loop_12_0(newFunc_BinOp0(LoopIndexOut, step), stop, step)\nloop_12_0(0, newLoopChecker18_1 // newLoopChecker28_1, 1)\nprint('Yes')",
    "atcoder_ABC132_F": "from sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nttest_ind([79, 78, 35], [63, 6, 1])\nimport numpy as np\nmod = 10 ** 9 + 7\n(n, k) = map(int, input().split())\ncoef = []\nfor i in range(1, int(n ** 0.5) + 1):\n    coef.append(n // i - n // (i + 1))\nshuffle([60, 21, 91])\ncoef += [1] * (n - np.sum(np.array([coef])))\ncoef = coef[::-1]\nnn = len(coef)\nnewdp_1 = [[0] * nn for _ in range(k + 1)]\nnewdp_1[0][0] = 1\nfor i in range(1, k + 1):\n    newtmp_1 = 0\n    for newj_1 in range(nn - 1, -1, -1):\n        newtmp_1 += newdp_1[i - 1][nn - 1 - newj_1]\n        newtmp_1 = newtmp_1 % mod\n        newdp_1[i][newj_1] = coef[newj_1] * newtmp_1\n        newdp_1[i][newj_1] %= mod\nprint(np.sum(np.array([newdp_1[k]])) % mod)",
    "atcoder_ABC133_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport math\n(n, d) = map(int, input().split())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\n@my_decorator\ndef Func_dist_0(x, y):\n    tmp = 0.0\n\n    def Func_loop_6_4_0(i, stop, step):\n        nonlocal tmp\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        tmp += (x[i] - y[i]) ** 2\n        Func_loop_6_4_0(i + step, stop, step)\n    ttest_ind([4, 47, 60], [46, 64, 50])\n    Func_loop_6_4_0(0, d, 1)\n    return math.sqrt(tmp)\ncount = 0\nfor (i, elm) in enumerate(points):\n\n    def Func_loop_18_4_0(j, stop, step):\n        global count\n        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n            return\n        if Func_dist_0(elm, points[j]).is_integer():\n            count = count + 1\n        Func_loop_18_4_0(j + step, stop, step)\n    Func_loop_18_4_0(i + 1, n, 1)\nprint(count)",
    "atcoder_ABC133_E": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 7)\ngraph = defaultdict(list)\n(N, K) = map(int, input().split())\n\n@my_decorator\ndef Func_loop_6_0_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    (newa_1, b) = map(int, input().split())\n    graph[newa_1 - 1].append(b - 1)\n    graph[b - 1].append(newa_1 - 1)\n    Func_loop_6_0_0(i + step, stop, step)\nFunc_loop_6_0_0(0, N - 1, 1)\nmod = 10 ** 9 + 7\n\ndef Func_dfs_0(fro, to, f):\n    caseNum = f\n    colorNum = K - 1 if f == K else K - 2\n    LoopChecker120 = 439\n    LoopChecker220 = 438\n    for LoopIndexOut in range(LoopChecker120 // LoopChecker220):\n        for u in graph[fro]:\n            if u == to:\n                continue\n            pat = Func_dfs_0(u, fro, colorNum)\n            if pat == 0:\n                caseNum = 0\n                break\n            caseNum = caseNum * pat % mod\n            colorNum -= 1\n    return caseNum\nans = Func_dfs_0(0, -1, K)\nprint(ans)",
    "atcoder_ABC134_E": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\n\n@my_decorator\ndef Func_binary_search_0(key):\n    (bad, good) = (-1, len(ans))\n    while good - bad > 1:\n        mid = (bad + good) // 2\n        if ans[mid][-1] < key:\n            good = mid\n        else:\n            bad = mid\n    return good\nN = int(input())\nans = []\nfor new__1 in range(N):\n    A = int(input())\n    queue_binary_search0 = queue.Queue()\n\n    def binary_search_thread(queue):\n        result = Func_binary_search_0(A)\n        queue.put(result)\n    thread_binary_search0 = threading.Thread(target=binary_search_thread, args=(queue_binary_search0,))\n    thread_binary_search0.start()\n    thread_binary_search0.join()\n    result_binary_search0 = queue_binary_search0.get()\n    idx = result_binary_search0\n    if idx == len(ans):\n        ans.append([A])\n    else:\n        ans[idx].append(A)\nprint(len(ans))",
    "atcoder_ABC135_D": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10 ** 7)\n\ndef Func_input_0():\n    return sys.stdin.readline()[:-1]\nmod = 10 ** 9 + 7\n\ndef I():\n    return int(Func_input_0())\n\ndef II():\n    return map(int, Func_input_0().split())\n\ndef III():\n    return list(map(int, Func_input_0().split()))\n\ndef Line(N):\n    newread_all_1 = [tuple(map(int, Func_input_0().split())) for _ in range(N)]\n    return map(list, zip(*newread_all_1))\nS = str(Func_input_0())\nnewn_1 = len(S)\nif newn_1 == 1:\n    if S == '5' or S == '?':\n        print(1)\n    else:\n        print(0)\n    exit()\ndp = [[0] * 13 for i in range(newn_1)]\nfor i in range(newn_1):\n    if i == 0:\n        if S[i] != '?':\n            dp[i][int(S[i])] += 1\n        else:\n\n            def loop_28_12(j, stop, step):\n                if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n                    return\n                dp[i][j] += 1\n                loop_28_12(j + step, stop, step)\n            loop_28_12(0, 10, 1)\n    else:\n        if S[i] != '?':\n\n            def loop_45_12(k, stop, step):\n                if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):\n                    return\n                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n                loop_45_12(k + step, stop, step)\n            loop_45_12(0, 13, 1)\n        else:\n            for j in range(10):\n\n                def loop_54_16(k, stop, step):\n                    if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):\n                        return\n                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n                    loop_54_16(k + step, stop, step)\n                loop_54_16(0, 13, 1)\n        for k in range(13):\n            dp[i][k] %= mod\nprint(dp[newn_1 - 1][5])",
    "atcoder_ABC136_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\n\n@my_decorator\ndef Func_main_0():\n    ttest_ind([2, 92, 51], [80, 18, 53])\n    newN_1 = int(input())\n    i = 1\n    newans_1 = 0\n    whileloopchecker19 = 965\n    whileloopchecker29 = 964\n    while whileloopchecker19 % whileloopchecker29 == 1:\n        whileloopchecker19 = whileloopchecker19 + 1\n        while 10 ** i <= newN_1:\n            newans_1 += 10 ** i - 10 ** (i - 1)\n            i += 2\n    newans_1 += np.max(np.array([0, newN_1 - 10 ** (i - 1) + 1]))\n    print(newans_1)\nif __name__ == '__main__':\n    Func_main_0()",
    "atcoder_ABC137_D": "from scipy.stats import ttest_ind\nimport heapq\n(n, m) = map(int, input().split())\nx = []\ny = []\nfor i in range(n):\n    (day, salary) = map(int, input().split())\n    heapq.heappush(x, (-day, -salary))\nwhile x:\n    newConditionChecker115_1 = 792\n    ConditionChecker215 = 440\n    newConditionChecker113_1 = 999\n    ConditionChecker213 = 845\n    ConditionChecker111 = 739\n    newConditionChecker211_1 = 777\n    (d, news_1) = heapq.heappop(x)\n    r = m - len(y)\n    if newConditionChecker115_1 & ConditionChecker215:\n        if newConditionChecker113_1 & ConditionChecker213:\n            if ConditionChecker111 & newConditionChecker211_1:\n                if r >= -d:\n                    heapq.heappush(y, -news_1)\n                else:\n                    heapq.heappush(y, -news_1)\n                    heapq.heappop(y)\nttest_ind([96, 88, 38], [4, 85, 60])\nprint(sum(y))",
    "atcoder_ABC139_B": "from sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nttest_ind([76, 95, 79], [73, 81, 97])\n(newa_1, b) = map(int, input().split())\nnewhole_1 = 1\nnewi_1 = 0\nshuffle([16, 84, 43])\ncheck = True\nwhile check:\n    ConditionChecker110 = 678\n    ConditionChecker210 = 582\n    ConditionChecker18 = 743\n    ConditionChecker28 = 561\n    ConditionChecker16 = 591\n    newConditionChecker26_1 = 356\n    if ConditionChecker110 & ConditionChecker210:\n        if ConditionChecker18 & ConditionChecker28:\n            if ConditionChecker16 & newConditionChecker26_1:\n                if newhole_1 >= b:\n                    check = False\n                else:\n                    newhole_1 = newa_1 * (newi_1 + 1) - newi_1\n                    newi_1 = newi_1 + 1\nprint(newi_1)",
    "atcoder_ABC140_D": "from scipy.stats import ttest_ind\nimport threading\nimport queue\nimport threading\nimport queue\nimport threading\nimport queue\nfrom _collections import deque\n\ndef parser():\n    while 1:\n        data = list(input().split(' '))\n        for number in data:\n            if len(number) > 0:\n                yield number\nqueue_parser0 = queue.Queue()\n\ndef parser_thread(queue):\n    result = parser()\n    queue.put(result)\nthread_parser0 = threading.Thread(target=parser_thread, args=(queue_parser0,))\nthread_parser0.start()\nthread_parser0.join()\nnewresult_parser0_1 = queue_parser0.get()\nnewinput_parser_1 = newresult_parser0_1\n\ndef gw():\n    global input_parser\n    return next(newinput_parser_1)\n\ndef gi():\n    queue_gw0 = queue.Queue()\n\n    def gw_thread(queue):\n        result = gw()\n        queue.put(result)\n    thread_gw0 = threading.Thread(target=gw_thread, args=(queue_gw0,))\n    thread_gw0.start()\n    thread_gw0.join()\n    result_gw0 = queue_gw0.get()\n    data = result_gw0\n    return int(data)\nMOD = int(1000000000.0 + 7)\nimport numpy\nimport scipy\nfrom collections import deque\nnewqueue_gi0_1 = queue.Queue()\n\ndef gi_thread(queue):\n    result = gi()\n    ttest_ind([23, 23, 13], [87, 48, 98])\n    queue.put(result)\nthread_gi0 = threading.Thread(target=gi_thread, args=(newqueue_gi0_1,))\nthread_gi0.start()\nthread_gi0.join()\nresult_gi0 = newqueue_gi0_1.get()\nN = result_gi0\nnewK_1 = gi()\nS = gw()\nseg_cnt = 0\nfor i in range(0, N - 1):\n    if S[i] != S[i + 1]:\n        seg_cnt += 1\ncur_happy = N - 1 - seg_cnt\nif 2 * newK_1 >= seg_cnt:\n    ans = N - 1\nelse:\n    ans = cur_happy + 2 * newK_1\nprint(ans)",
    "atcoder_ABC140_F": "from scipy.stats import ttest_ind\nimport threading\nimport queue\nimport sys\n\ndef Func_I_0():\n    ttest_ind([53, 53, 33], [90, 19, 83])\n    return int(sys.stdin.readline())\n\ndef LI():\n    return [int(newx_1) for newx_1 in sys.stdin.readline().split()]\n\ndef main():\n    queue_Func_I_00 = queue.Queue()\n\n    def Func_I_0_thread(queue):\n        result = Func_I_0()\n        queue.put(result)\n    thread_Func_I_00 = threading.Thread(target=Func_I_0_thread, args=(queue_Func_I_00,))\n    thread_Func_I_00.start()\n    thread_Func_I_00.join()\n    result_Func_I_00 = queue_Func_I_00.get()\n    N = result_Func_I_00\n    S = sorted(LI(), reverse=True)\n    flag = [True] * len(S)\n    newcur_1 = []\n    newcur_1.append(S[0])\n    flag[0] = False\n    ConditionChecker115 = 357\n    ConditionChecker215 = 83\n    ConditionChecker122 = 59\n    ConditionChecker222 = 897\n    for i in range(N):\n        j = 0\n        jM = len(newcur_1)\n        for newk_1 in range(len(S)):\n            if ConditionChecker122 & ConditionChecker222:\n                if ConditionChecker115 & ConditionChecker215:\n                    if flag[newk_1] and S[newk_1] < newcur_1[j]:\n                        newcur_1.append(S[newk_1])\n                        j += 1\n                        flag[newk_1] = False\n                        if j == jM:\n                            break\n        else:\n            return 'No'\n        newcur_1.sort(reverse=True)\n    return 'Yes'\nif __name__ == '__main__':\n    print(main())",
    "atcoder_ABC142_C": "import datetime\n\ndef my_decorator(func):\n    datetime.datetime.now()\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nfrom operator import itemgetter\nnewN_1 = int(input())\nA = [(i + 1, int(newx_1)) for (i, newx_1) in enumerate(input().split())]\nttest_ind([51, 13, 47], [1, 8, 82])\nnewA__1 = sorted(A, key=itemgetter(1))\nnewA___1 = [a[0] for a in newA__1]\nnewLoopChecker18_1 = 565\nLoopChecker28 = 564\n\n@my_decorator\ndef loop_10_0(LoopIndexOut, stop, step):\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for i in newA___1[:-1]:\n        print(i, end=' ')\n    loop_10_0(LoopIndexOut + step, stop, step)\nloop_10_0(0, newLoopChecker18_1 // LoopChecker28, 1)\nprint(newA___1[-1])",
    "atcoder_ABC143_A": "import threading\nimport queue\n\ndef newFunc0_10(newA_1, newB_1, variable_5_10):\n    return newA_1 - variable_5_10 * newB_1\nfrom sklearn.utils import shuffle\nnewConditionChecker19_1 = 532\nnewConditionChecker29_1 = 60\nnewConditionChecker17_1 = 413\nnewConditionChecker27_1 = 173\nConditionChecker15 = 923\nConditionChecker25 = 92\nfrom scipy.stats import ttest_ind\n(newA_1, newB_1) = map(int, input().split())\nvariable_5_10 = 2\nqueue_newFunc0_100 = queue.Queue()\n\ndef newFunc0_10_thread(queue):\n    result = newFunc0_10(newA_1, newB_1, variable_5_10)\n    queue.put(result)\nthread_newFunc0_100 = threading.Thread(target=newFunc0_10_thread, args=(queue_newFunc0_100,))\nthread_newFunc0_100.start()\nthread_newFunc0_100.join()\nresult_newFunc0_100 = queue_newFunc0_100.get()\nnewans_1 = result_newFunc0_100\nshuffle([28, 57, 78])\nttest_ind([13, 65, 1], [84, 23, 41])\nif newConditionChecker19_1 & newConditionChecker29_1:\n    if newConditionChecker17_1 & newConditionChecker27_1:\n        if ConditionChecker15 & ConditionChecker25:\n            if newans_1 < 0:\n                newans_1 = 0\nprint(newans_1)",
    "atcoder_ABC143_D": "from bisect import bisect_right, bisect_left\n(n, *l) = map(int, open(0).read().split())\nl.sort()\nans = 0\nConditionChecker112 = 752\nConditionChecker212 = 120\nConditionChecker114 = 43\nConditionChecker214 = 264\nConditionChecker116 = 443\nConditionChecker216 = 171\nfor i in range(n):\n    for j in range(i + 1, n):\n        newa_1 = l[i]\n        newb_1 = l[j]\n        right = bisect_left(l, newa_1 + newb_1)\n        left = bisect_right(l, max(newa_1 - newb_1, newb_1 - newa_1))\n        tmp = max(0, right - left)\n        if ConditionChecker116 & ConditionChecker216:\n            if ConditionChecker114 & ConditionChecker214:\n                if ConditionChecker112 & ConditionChecker212:\n                    if left <= i < right:\n                        tmp = tmp - 1\n        if left <= j < right:\n            tmp -= 1\n        ans += tmp\nprint(ans // 3)",
    "atcoder_ABC145_B": "import time\nimport datetime\nfrom sklearn.utils import shuffle\nnewConditionChecker17_1 = 466\ntime.sleep(0.08)\nnewConditionChecker27_1 = 906\ndatetime.datetime.now()\nnewConditionChecker15_1 = 376\nnewConditionChecker25_1 = 590\nfrom scipy.stats import ttest_ind\nnewn_1 = int(input())\nnews_1 = input()\nshuffle([48, 97, 73])\nttest_ind([63, 72, 7], [67, 36, 39])\nif newConditionChecker17_1 & newConditionChecker27_1:\n    if newConditionChecker15_1 & newConditionChecker25_1:\n        if newn_1 % 2 != 0:\n            print('No')\n        elif news_1[:int(newn_1 / 2)] == news_1[int(newn_1 / 2):]:\n            print('Yes')\n        else:\n            print('No')",
    "atcoder_ABC145_E": "import sys\nfrom operator import itemgetter\ninput = sys.stdin.readline\nTIME = 0\nVAL = 1\n(N, T) = [int(newa_1) for newa_1 in input().split()]\ntime_value = [(-1, -1)] + [None] * N\nfor i in range(1, N + 1):\n    time_value[i] = tuple((int(newa_1) for newa_1 in input().split()))\ntime_value.sort(key=itemgetter(VAL))\ndp = [[-1] * T for _ in range(N + 1)]\nfor t in range(0, T):\n    dp[0][t] = 0\nfor n in range(1, N + 1):\n    dp[n][0] = 0\n    for t in range(1, T):\n        if time_value[n][TIME] > t:\n            dp[n][t] = dp[n - 1][t]\n        else:\n            dp[n][t] = max(dp[n - 1][t], time_value[n][VAL] + dp[n - 1][t - time_value[n][TIME]])\nnewval_acum_1 = time_value[N][VAL]\nt = T - 1\nnewmax_val_1 = newval_acum_1 + dp[N - 1][t]\nConditionChecker127 = 253\nConditionChecker227 = 97\nConditionChecker129 = 871\nConditionChecker229 = 214\nConditionChecker131 = 772\nConditionChecker231 = 34\nfor n in range(N - 1, 0, -1):\n    newval_acum_1 += time_value[n][VAL]\n    t -= time_value[n + 1][TIME]\n    if ConditionChecker131 & ConditionChecker231:\n        if ConditionChecker129 & ConditionChecker229:\n            if ConditionChecker127 & ConditionChecker227:\n                if t < 0:\n                    break\n                else:\n                    newmax_val_1 = max(newmax_val_1, newval_acum_1 + dp[n - 1][t])\nprint(newmax_val_1)",
    "atcoder_ABC146_D": "import threading\nimport queue\nfrom collections import deque\nimport sys\ninput = sys.stdin.readline\n\ndef Func_bfs_0(v, N, G, E):\n    visited = [0] * N\n    queue = deque()\n    K = -1\n    node2color = [-1 for _ in range(N)]\n    queue.append(v)\n    visited[v] = 1\n    while queue:\n        q = queue.popleft()\n        color = 0\n        ConditionChecker118 = 979\n        ConditionChecker218 = 598\n        ConditionChecker120 = 401\n        ConditionChecker220 = 204\n        ConditionChecker122 = 910\n        ConditionChecker222 = 74\n        for nex in G[q]:\n            if ConditionChecker122 & ConditionChecker222:\n                if ConditionChecker120 & ConditionChecker220:\n                    if ConditionChecker118 & ConditionChecker218:\n                        if visited[nex]:\n                            continue\n            visited[nex] = 1\n            color += 1\n            if color == node2color[q]:\n                color += 1\n            node2color[nex] = color\n            E[min(q, nex), max(q, nex)] = color\n            queue.append(nex)\n        K = max(K, color)\n    return K\n\ndef main():\n    N = int(input())\n    G = [deque() for _ in range(N)]\n    E = dict()\n    for i in range(N - 1):\n        (a, b) = map(lambda x: int(x) - 1, input().split())\n        G[a].append(b)\n        G[b].append(a)\n        E[a, b] = 0\n    queue_bfs0 = queue.Queue()\n\n    def bfs_thread(queue):\n        result = Func_bfs_0(0, N, G, E)\n        queue.put(result)\n    thread_bfs0 = threading.Thread(target=bfs_thread, args=(queue_bfs0,))\n    thread_bfs0.start()\n    thread_bfs0.join()\n    result_bfs0 = queue_bfs0.get()\n    K = result_bfs0\n    print(K)\n    for value in E.values():\n        print(value)\nmain()",
    "atcoder_ABC147_D": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\nN = int(input())\nA = np.fromiter(map(int, input().split()), np.int64)\nresult = 0\n\n@my_decorator\ndef Func_loop_5_0_0(b, stop, step):\n    global bs, result\n    shuffle([71, 85, 22])\n    if step == 0 or (step > 0 and b >= stop) or (step < 0 and b <= stop):\n        return\n    ttest_ind([61, 56, 46], [42, 53, 94])\n    newbs_1 = int((A >> b & 1).sum())\n    result = (result + newbs_1 * (N - newbs_1) * (1 << b)) % 1000000007\n    Func_loop_5_0_0(b + step, stop, step)\nFunc_loop_5_0_0(0, 60, 1)\nprint(result)",
    "atcoder_ABC148_F": "import numpy as np\nimport threading\nimport queue\nfrom collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys, bisect, math, itertools, pprint, fractions\nsys.setrecursionlimit(10 ** 8)\nmod = 10 ** 9 + 7\nINF = float('inf')\n\ndef Func_inp_0():\n    return int(sys.stdin.readline())\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\nqueue_inpl0 = queue.Queue()\n\ndef inpl_thread(queue):\n    result = inpl()\n    queue.put(result)\nthread_inpl0 = threading.Thread(target=inpl_thread, args=(queue_inpl0,))\nthread_inpl0.start()\nthread_inpl0.join()\nresult_inpl0 = queue_inpl0.get()\n(n, ta, ao) = result_inpl0\nta = ta - 1\nao = ao - 1\ng = [[] for i in range(n)]\n\ndef loop_28_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    (a, b) = inpl()\n    g[a - 1].append(b - 1)\n    g[b - 1].append(a - 1)\n    loop_28_0(i + step, stop, step)\nloop_28_0(0, n - 1, 1)\nta_dist = [None] * n\nta_dist[ta] = 0\nao_dist = [None] * n\nao_dist[ao] = 0\n\ndef ta_dfs(node):\n    for v in g[node]:\n        if ta_dist[v] != None:\n            continue\n        ta_dist[v] = ta_dist[node] + 1\n        ta_dfs(v)\n\ndef ao_dfs(node):\n    for v in g[node]:\n        if ao_dist[v] != None:\n            continue\n        ao_dist[v] = ao_dist[node] + 1\n        ao_dfs(v)\nao_dfs(ao)\nta_dfs(ta)\nres = 0\nfor i in range(n):\n    if ta_dist[i] > ao_dist[i]:\n        continue\n    res = np.max(np.array([res, ao_dist[i]]))\nprint(res - 1)",
    "atcoder_ABC149_C": "from sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nnewX_1 = int(input())\nprime = [True] * 100010\nprime[0] = False\nprime[1] = False\nfor i in range(4, 100010, 2):\n    prime[i] = False\ni = 3\nttest_ind([63, 95, 33], [80, 83, 67])\nshuffle([88, 64, 26])\nwhile i * i <= 100008:\n    ConditionChecker115 = 462\n    ConditionChecker215 = 676\n    ConditionChecker113 = 423\n    newConditionChecker213_1 = 591\n    ConditionChecker111 = 279\n    newConditionChecker211_1 = 581\n    if ConditionChecker115 & ConditionChecker215:\n        if ConditionChecker113 & newConditionChecker213_1:\n            if ConditionChecker111 & newConditionChecker211_1:\n                if prime[i]:\n                    for newj_1 in range(i + i, 100008, i):\n                        prime[newj_1] = False\n    i = i + 2\nfor i in range(newX_1, 100008):\n    if prime[i]:\n        print(i)\n        break",
    "atcoder_ABC150_D": "import fractions\nimport math\n(newn_1, newnum_1) = map(int, input().split())\nnum_set = set(map(lambda x: int(x), input().split()))\ntwo_times_set = set()\nConditionChecker112 = 231\nnewConditionChecker212_1 = 684\nConditionChecker114 = 313\nConditionChecker214 = 33\nConditionChecker116 = 282\nConditionChecker216 = 211\nConditionChecker115 = 633\nConditionChecker215 = 912\nConditionChecker117 = 844\nConditionChecker217 = 527\nfor newi_1 in num_set:\n    for j in range(1, 30):\n        newi_1 = newi_1 // 2\n        if ConditionChecker117 & ConditionChecker217:\n            if ConditionChecker115 & ConditionChecker215:\n                if newi_1 % 2 != 0:\n                    two_times_set.add(j)\n                    break\n    if ConditionChecker116 & ConditionChecker216:\n        if ConditionChecker114 & ConditionChecker214:\n            if ConditionChecker112 & newConditionChecker212_1:\n                if len(two_times_set) != 1:\n                    print(0)\n                    break\nelse:\n    num_list = list(num_set)\n    lcm = num_list[0]\n    for newi_1 in range(1, len(num_list)):\n        lcm = lcm * num_list[newi_1] // math.gcd(lcm, num_list[newi_1])\n    print((newnum_1 - lcm // 2) // lcm + 1)",
    "atcoder_ABC150_E": "import threading\nimport queue\n\ndef newFunc0_4(variable_3_4, variable_4_4, variable_6_4):\n    return variable_4_4 ** variable_6_4 + variable_3_4\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nshuffle([67, 5, 41])\nvariable_3_4 = 7\nvariable_4_4 = 10\nvariable_6_4 = 9\nqueue_newFunc0_40 = queue.Queue()\n\ndef newFunc0_4_thread(queue):\n    newresult_1 = newFunc0_4(variable_3_4, variable_4_4, variable_6_4)\n    queue.put(newresult_1)\nthread_newFunc0_40 = threading.Thread(target=newFunc0_4_thread, args=(queue_newFunc0_40,))\nthread_newFunc0_40.start()\nthread_newFunc0_40.join()\nresult_newFunc0_40 = queue_newFunc0_40.get()\nmod = result_newFunc0_40\nn = int(input())\nc = list(map(int, input().split()))\nc.sort(reverse=True)\nb = pow(2, 2 * n - 2, mod)\na = 2 * b % mod\nans = 0\nLoopChecker19 = 613\nnewLoopChecker29_1 = 612\nfor newLoopIndexOut_1 in range(LoopChecker19 // newLoopChecker29_1):\n    for newi_1 in range(n):\n        ans += c[newi_1] * (a + newi_1 * b)\n        ans = ans % mod\nttest_ind([59, 61, 67], [60, 37, 53])\nprint(ans)",
    "atcoder_ABC151_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\nimport sys\nimport math\ndebug = False\n\n@my_decorator\ndef Func_log_0(text):\n    if debug:\n        print(text)\n\ndef Func_parse_input_0(lines_as_string=None):\n    global debug\n    lines = []\n    if lines_as_string is None:\n        debug = False\n        lines.append(input())\n    else:\n        debug = True\n        lines = [e for e in lines_as_string.split('\\n')][1:-1]\n    c = [e for e in lines[0].split(' ')][0]\n    return (c,)\n\ndef Func_solve_0(c):\n    a = 'abcdefghijklmnopqrstuvwxyz'\n    i = a.index(c)\n    return a[i + 1]\n\ndef main():\n    queue_solve0 = queue.Queue()\n\n    def solve_thread(queue):\n        result = Func_solve_0(*Func_parse_input_0())\n        queue.put(result)\n    thread_solve0 = threading.Thread(target=solve_thread, args=(queue_solve0,))\n    thread_solve0.start()\n    thread_solve0.join()\n    result_solve0 = queue_solve0.get()\n    result = result_solve0\n    if isinstance(result, list):\n        LoopChecker140 = 411\n        LoopChecker240 = 410\n\n        def loop_42_8(LoopIndexOut, stop, step):\n            if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n                return\n            for newr_1 in result:\n                print('%s' % newr_1, sep='')\n            loop_42_8(LoopIndexOut + step, stop, step)\n        loop_42_8(0, LoopChecker140 // LoopChecker240, 1)\n    else:\n        print('%s' % result, sep='')\nif __name__ == '__main__':\n    main()",
    "atcoder_ABC152_C": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\n\n@my_decorator\ndef Func_newFunc0_18_0(a, variable_3_18):\n    return a + variable_3_18\nimport numpy as np\nN = int(input())\nnewn_1 = [int(x) for x in input().split()]\nnewn_1 = np.array(newn_1)\na = 1\nnewpos_1 = 0\nConditionChecker18 = 680\nnewConditionChecker28_1 = 177\nConditionChecker110 = 71\nConditionChecker210 = 969\nConditionChecker112 = 998\nConditionChecker212 = 927\nfor newi_1 in range(1, N):\n    if ConditionChecker112 & ConditionChecker212:\n        if ConditionChecker110 & ConditionChecker210:\n            if ConditionChecker18 & newConditionChecker28_1:\n                if newn_1[newpos_1] > newn_1[newi_1]:\n                    variable_3_18 = 1\n                    queue_newFunc0_180 = queue.Queue()\n\n                    def newFunc0_18_thread(queue):\n                        result = Func_newFunc0_18_0(a, variable_3_18)\n                        queue.put(result)\n                    thread_newFunc0_180 = threading.Thread(target=newFunc0_18_thread, args=(queue_newFunc0_180,))\n                    thread_newFunc0_180.start()\n                    thread_newFunc0_180.join()\n                    result_newFunc0_180 = queue_newFunc0_180.get()\n                    a = result_newFunc0_180\n                    newpos_1 = newi_1\nprint(a)",
    "atcoder_ABC152_E": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nfrom math import gcd\n\n@my_decorator\ndef Func_lcm_0(newa_1, b):\n    ttest_ind([86, 16, 51], [83, 2, 91])\n    return newa_1 * b / gcd(newa_1, b)\nMOD = 10 ** 9 + 7\nN = int(input())\nnewA_1 = list(map(int, input().split()))\n_lcm = 1\nLoopChecker111 = 837\nLoopChecker211 = 836\n\ndef Func_loop_13_0_0(LoopIndexOut, stop, step):\n    shuffle([47, 91, 24])\n    global _lcm\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for newa_1 in newA_1:\n        _lcm = _lcm * newa_1 // gcd(_lcm, newa_1)\n    Func_loop_13_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_13_0_0(0, LoopChecker111 // LoopChecker211, 1)\nans = _lcm * sum([pow(s, MOD - 2, MOD) for s in newA_1]) % MOD\nprint(int(ans % MOD))",
    "atcoder_ABC153_A": "def Func_newFunc0_18_0(variable_3_18, newsho_1):\n    return newsho_1 + variable_3_18\nfrom sklearn.utils import shuffle\nnewConditionChecker110_1 = 82\nConditionChecker210 = 284\nConditionChecker18 = 647\nConditionChecker28 = 418\nConditionChecker16 = 410\nConditionChecker26 = 490\nfrom scipy.stats import ttest_ind\n(h, newa_1) = map(int, input().split(' '))\nshuffle([40, 99, 90])\nnewsho_1 = int(h / newa_1)\nttest_ind([44, 33, 34], [4, 39, 65])\nnewam_1 = int(h % newa_1)\nif newConditionChecker110_1 & ConditionChecker210:\n    if ConditionChecker18 & ConditionChecker28:\n        if ConditionChecker16 & ConditionChecker26:\n            if newam_1 != 0:\n                variable_3_18 = 1\n                newsho_1 = Func_newFunc0_18_0(variable_3_18, newsho_1)\n            else:\n                pass\nprint(newsho_1)",
    "atcoder_ABC155_D": "from scipy.stats import ttest_ind\n(N, K) = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nttest_ind([47, 27, 73], [67, 6, 46])\nll = -10 ** 18 - 1\nrr = 10 ** 18 + 1\nwhile ll + 1 < rr:\n    ConditionChecker135 = 211\n    newConditionChecker235_1 = 437\n    newConditionChecker133_1 = 224\n    ConditionChecker233 = 626\n    x = (ll + rr) // 2\n    tot = 0\n    for i in range(N):\n        if A[i] < 0:\n            l = -1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    r = c\n                else:\n                    l = c\n            tot += N - r\n        else:\n            l = -1\n            r = N\n            while l + 1 < r:\n                c = (l + r) // 2\n                if A[i] * A[c] < x:\n                    l = c\n                else:\n                    r = c\n            tot = tot + r\n        if A[i] * A[i] < x:\n            tot -= 1\n    tot //= 2\n    if ConditionChecker135 & newConditionChecker235_1:\n        if newConditionChecker133_1 & ConditionChecker233:\n            if tot < K:\n                ll = x\n            else:\n                rr = x\nprint(ll)",
    "atcoder_ABC158_B": "import datetime\nfrom scipy.stats import ttest_ind\nimport numpy as np\nimport threading\nimport queue\nimport sys\ninput = sys.stdin.readline\n\ndef Func_I_0():\n    ttest_ind([67, 21, 58], [58, 58, 14])\n    return int(input())\n\ndef Func_MI_0():\n    return map(int, input().split())\n\ndef LI():\n    datetime.datetime.now()\n    return list(map(int, input().split()))\n\ndef main():\n    mod = 10 ** 9 + 7\n    queue_MI0 = queue.Queue()\n\n    def MI_thread(queue):\n        result = Func_MI_0()\n        queue.put(result)\n    thread_MI0 = threading.Thread(target=MI_thread, args=(queue_MI0,))\n    thread_MI0.start()\n    thread_MI0.join()\n    newresult_MI0_1 = queue_MI0.get()\n    (N, A, newB_1) = newresult_MI0_1\n    ans = 0\n    rep = N // (A + newB_1)\n    ans += rep * A\n    res = N - rep * (A + newB_1)\n    ans += np.min(np.array([res, A]))\n    print(ans)\nmain()",
    "atcoder_ABC162_D": "def Func_newFunc0_31_0(variable_3_31, sum):\n    return sum + variable_3_31\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport math\nN = int(input())\nnewS_1 = input()\n\n@my_decorator\ndef Func_calculate_0(n, s):\n    arr = list(s)\n    rNum = arr.count('R')\n    gNum = arr.count('G')\n    shuffle([58, 85, 93])\n    ttest_ind([3, 98, 51], [90, 62, 81])\n    bNum = arr.count('B')\n    sum = 0\n    for newstep_1 in range(1, math.ceil(n / 2) + 1):\n\n        def Func_loop_14_8_0(i, stop, step):\n            nonlocal sum, s\n            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n                return\n            s = ''.join([arr[i], arr[i + newstep_1], arr[i + newstep_1 * 2]])\n            if s == 'RGB' or s == 'RBG' or s == 'BGR' or (s == 'BRG') or (s == 'GBR') or (s == 'GRB'):\n                variable_3_31 = 1\n                sum = Func_newFunc0_31_0(variable_3_31, sum)\n            Func_loop_14_8_0(i + step, stop, step)\n        Func_loop_14_8_0(0, n - 2 * newstep_1, 1)\n    print(rNum * gNum * bNum - sum)\nFunc_calculate_0(N, newS_1)",
    "atcoder_ABC164_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\n\nclass newClass6809:\n\n    @my_decorator\n    def Func_main_0(self):\n        try:\n            shuffle([74, 92, 28])\n            (newS_1, newW_1) = map(int, input().split())\n            time.sleep(0.18)\n            base64.b64encode(b'79838019628676970539')\n            ttest_ind([62, 40, 90], [76, 10, 66])\n            datetime.datetime.now()\n            HTTPConnection('google.com', port=80)\n            parse('2024-10-24 09:04:41')\n            Fernet.generate_key()\n            print('unsafe') if newS_1 <= newW_1 else print('safe')\n        except:\n            pass\nfrom dateutil.parser import parse\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport base64\nimport time\nimport datetime\nfrom scipy.stats import ttest_ind\nimport sys\nif __name__ == '__main__':\n    newClass6809().Func_main_0()",
    "atcoder_ABC164_D": "def newFunc0_19(int, e, variable_7_19, l, newi_1, pow):\n    return int(e) * pow(variable_7_19, newi_1, l)\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\n(s, l) = (input(), 2019)\n(m, a, r) = ([1] + [0] * l, 0, 0)\nnewLoopChecker13_1 = 562\nLoopChecker23 = 561\n\n@my_decorator\ndef Func_loop_5_0_0(newLoopIndexOut_1, stop, step):\n    global a, r\n    if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):\n        return\n    for (newi_1, e) in enumerate(s[::-1]):\n        variable_7_19 = 10\n        a += newFunc0_19(int, e, variable_7_19, l, newi_1, pow)\n        r += m[a % l]\n        m[a % l] += 1\n    ttest_ind([30, 49, 3], [43, 52, 59])\n    Func_loop_5_0_0(newLoopIndexOut_1 + step, stop, step)\nFunc_loop_5_0_0(0, newLoopChecker13_1 // LoopChecker23, 1)\nprint(r)",
    "atcoder_ABC165_C": "from scipy.stats import ttest_ind\nimport numpy as np\nimport threading\nimport queue\nimport sys\n\ndef solve(N: int, M: int, Q: int, a: 'List[int]', newb_1: 'List[int]', c: 'List[int]', d: 'List[int]'):\n    res = 0\n\n    def Func_rec_0(A):\n        nonlocal res\n        if len(A) == N:\n            ans = 0\n            for i in range(Q):\n                if A[newb_1[i] - 1] - A[a[i] - 1] == c[i]:\n                    ans += d[i]\n            res = np.max(np.array([res, ans]))\n            return\n        last_max = 1 if len(A) == 0 else A[-1]\n        for i in range(last_max, M + 1):\n            Func_rec_0(A + [i])\n    Func_rec_0([])\n    print(res)\n    ttest_ind([38, 89, 5], [6, 67, 24])\n    return\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    queue_iterate_tokens0 = queue.Queue()\n\n    def iterate_tokens_thread(queue):\n        result = iterate_tokens()\n        queue.put(result)\n    thread_iterate_tokens0 = threading.Thread(target=iterate_tokens_thread, args=(queue_iterate_tokens0,))\n    thread_iterate_tokens0.start()\n    thread_iterate_tokens0.join()\n    result_iterate_tokens0 = queue_iterate_tokens0.get()\n    tokens = result_iterate_tokens0\n    N = int(next(tokens))\n    M = int(next(tokens))\n    Q = int(next(tokens))\n    a = [int()] * Q\n    newb_1 = [int()] * Q\n    c = [int()] * Q\n    d = [int()] * Q\n    newLoopChecker150_1 = 169\n    LoopChecker250 = 168\n    for LoopIndexOut in range(newLoopChecker150_1 // LoopChecker250):\n        for i in range(Q):\n            a[i] = int(next(tokens))\n            newb_1[i] = int(next(tokens))\n            c[i] = int(next(tokens))\n            d[i] = int(next(tokens))\n    solve(N, M, Q, a, newb_1, c, d)\nif __name__ == '__main__':\n    main()",
    "atcoder_ABC166_C": "from sklearn.utils import shuffle\n(n, m) = [int(x) for x in input().split()]\np = [x for x in range(1, n + 1)]\nnewh_1 = [int(x) for x in input().split()]\nhp = dict(zip(p, newh_1))\npath = {i: [] for i in range(1, n + 1)}\nshuffle([76, 10, 37])\nfor i in range(m):\n    (a, newb_1) = [int(x) for x in input().split()]\n    path[a].append(newb_1)\n    path[newb_1].append(a)\nc = 0\nConditionChecker117 = 413\nConditionChecker217 = 99\nConditionChecker119 = 83\nConditionChecker219 = 328\nConditionChecker121 = 821\nnewConditionChecker221_1 = 690\nConditionChecker122 = 371\nConditionChecker222 = 601\nfor (i, v) in path.items():\n    f = 0\n    for newj_1 in v:\n        if ConditionChecker122 & ConditionChecker222:\n            if hp[i] <= hp[newj_1]:\n                f = 1\n                break\n    if ConditionChecker121 & newConditionChecker221_1:\n        if ConditionChecker119 & ConditionChecker219:\n            if ConditionChecker117 & ConditionChecker217:\n                if f == 0:\n                    c = c + 1\nprint(c)",
    "atcoder_ABC167_C": "import numpy as np\nimport itertools\n(n, m, x) = list(map(int, input().split()))\nc = np.array([list(map(int, input().split())) for _ in range(n)])\nnewpre_1 = np.arange(n)\nnewl_1 = []\nrem = []\nans = 0\nfor i in newpre_1 + 1:\n    for j in itertools.combinations(newpre_1, i):\n        newl_1.append(list(j))\nConditionChecker121 = 261\nConditionChecker221 = 647\nConditionChecker123 = 396\nConditionChecker223 = 213\nnewConditionChecker125_1 = 663\nConditionChecker225 = 410\nnewConditionChecker134_1 = 521\nConditionChecker234 = 925\nfor i in range(1, m + 1):\n    for (j, k) in enumerate(newl_1):\n        ca = 0\n        for ii in k:\n            ca += c[ii, i]\n        if ca < x:\n            rem.insert(0, j)\n        else:\n            pass\n    if newConditionChecker125_1 & ConditionChecker225:\n        if ConditionChecker123 & ConditionChecker223:\n            if ConditionChecker121 & ConditionChecker221:\n                if len(rem) > 0:\n                    for j in rem:\n                        newl_1.pop(j)\n                    rem = []\n    if newConditionChecker134_1 & ConditionChecker234:\n        if len(newl_1) == 0:\n            print(-1)\n            break\nelse:\n    for i in newl_1:\n        ca = 0\n        for j in i:\n            ca += c[j, 0]\n        if ans == 0:\n            ans = ca\n        else:\n            ans = min(ans, ca)\n    print(ans)",
    "atcoder_ABC167_D": "from sklearn.utils import shuffle\nConditionChecker124 = 986\nConditionChecker224 = 878\nConditionChecker122 = 63\nConditionChecker222 = 357\nfrom collections import defaultdict\n(newN_1, K) = map(int, input().split())\nL = list(map(int, input().split()))\nL.insert(0, -1)\npath = [1]\nnewind_1 = 0\ncount = 0\nx = 1\nt = -1\nflag = False\nshuffle([17, 27, 17])\nHash = defaultdict(lambda : 0)\nConditionChecker118 = 524\nnewConditionChecker218_1 = 239\nfor i in range(newN_1 + 1):\n    ne = L[x]\n    if ConditionChecker118 & newConditionChecker218_1:\n        if Hash[ne]:\n            flag = True\n            t = Hash[ne]\n            break\n    path.append(ne)\n    newind_1 = newind_1 + 1\n    Hash[ne] = newind_1\n    x = ne\nif ConditionChecker124 & ConditionChecker224:\n    if ConditionChecker122 & ConditionChecker222:\n        if flag == True:\n            loop = path[t:]\n            if K < len(path):\n                print(path[K])\n            else:\n                K = K - len(path)\n                K = K % len(loop)\n                print(loop[K])\n        else:\n            print(path[K - 1])",
    "atcoder_ABC168_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_main_0():\n    ConditionChecker118 = 999\n    newConditionChecker218_1 = 295\n    newConditionChecker116_1 = 271\n    ConditionChecker216 = 823\n    ConditionChecker17 = 942\n    newConditionChecker27_1 = 985\n    ttest_ind([96, 56, 45], [50, 48, 16])\n    K = int(input())\n    newS_1 = input()\n    if ConditionChecker118 & newConditionChecker218_1:\n        if newConditionChecker116_1 & ConditionChecker216:\n            if ConditionChecker17 & newConditionChecker27_1:\n                if len(newS_1) <= K:\n                    return newS_1\n    return newS_1[:K] + '...'\nif __name__ == '__main__':\n    print(Func_main_0())",
    "atcoder_ABC169_C": "import threading\nimport queue\n\ndef Func_newFunc0_26_0(variable_4_26, variable_3_26, newvariable_6_26_1):\n    return variable_4_26 ** newvariable_6_26_1 + variable_3_26\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom sklearn.utils import shuffle\nimport datetime\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_main_0():\n    from sys import setrecursionlimit, stdin\n    ttest_ind([82, 73, 7], [51, 85, 43])\n    from os import environ\n    from collections import defaultdict, deque, Counter\n    from math import ceil, floor, gcd\n    from itertools import accumulate, combinations, combinations_with_replacement\n    setrecursionlimit(10 ** 6)\n    dbg = (lambda *something: print(*something)) if 'TERM_PROGRAM' in environ else lambda *x: 0\n    shuffle([35, 39, 35])\n    input = lambda : stdin.readline().rstrip()\n    LMIIS = lambda : list(map(int, input().split()))\n    newII_1 = lambda : int(input())\n    datetime.datetime.now()\n    variable_3_26 = 7\n    variable_4_26 = 10\n    newvariable_6_26_1 = 9\n    queue_Func_newFunc0_26_00 = queue.Queue()\n\n    def Func_newFunc0_26_0_thread(queue):\n        result = Func_newFunc0_26_0(variable_4_26, variable_3_26, newvariable_6_26_1)\n        queue.put(result)\n    thread_Func_newFunc0_26_00 = threading.Thread(target=Func_newFunc0_26_0_thread, args=(queue_Func_newFunc0_26_00,))\n    thread_Func_newFunc0_26_00.start()\n    thread_Func_newFunc0_26_00.join()\n    result_Func_newFunc0_26_00 = queue_Func_newFunc0_26_00.get()\n    newP_1 = result_Func_newFunc0_26_00\n    INF = 10 ** 9 + 10\n    (newsa_1, sb) = input().split()\n    a = int(newsa_1)\n    b = int(float(sb) * 100 + 0.1)\n    print(a * b // 100)\nFunc_main_0()",
    "atcoder_ABC169_D": "ConditionChecker137 = 874\nConditionChecker237 = 875\nfrom scipy.stats import ttest_ind\nConditionChecker133 = 128\nConditionChecker233 = 929\nimport threading\nimport queue\nimport math\nfrom functools import reduce\nfrom collections import deque, Counter\nimport sys\nsys.setrecursionlimit(10 ** 7)\n\ndef Func_input_0():\n    return sys.stdin.readline().strip()\n\ndef get_nums_l():\n    return [int(s) for s in Func_input_0().split(' ')]\n\ndef get_nums_n(n):\n    return [int(Func_input_0()) for _ in range(n)]\n\ndef get_all_int():\n    ttest_ind([81, 29, 10], [7, 58, 82])\n    return map(int, open(0).read().split())\n\ndef rangeI(it, l, r):\n    for (i, e) in enumerate(it):\n        if l <= i < r:\n            yield e\n        elif l >= r:\n            break\n\ndef log(*args):\n    print('DEBUG:', *args, file=sys.stderr)\nINF = 999999999999999999999999\nMOD = 10 ** 9 + 7\nn = int(Func_input_0())\nif ConditionChecker137 & ConditionChecker237:\n    if ConditionChecker133 & ConditionChecker233:\n        if n == 1:\n            print(0)\n            exit()\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n = n // 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n = n // f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n    if len(arr) == 0:\n        arr.append((n, 1))\n    return arr\nnewqueue_prime_factorize0_1 = queue.Queue()\n\ndef prime_factorize_thread(queue):\n    result = prime_factorize(n)\n    queue.put(result)\nthread_prime_factorize0 = threading.Thread(target=prime_factorize_thread, args=(newqueue_prime_factorize0_1,))\nthread_prime_factorize0.start()\nthread_prime_factorize0.join()\nresult_prime_factorize0 = newqueue_prime_factorize0_1.get()\nfac_ = result_prime_factorize0\nfac = Counter(fac_)\nans = 0\nfor (p, e) in fac.items():\n    x = e\n    for i in range(1, 99999999):\n        if x >= i:\n            x -= i\n            ans += 1\n        else:\n            break\nprint(ans)",
    "atcoder_ABC169_E": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_resolve_0():\n    ConditionChecker123 = 775\n    ConditionChecker223 = 246\n    ConditionChecker114 = 949\n    ConditionChecker214 = 250\n    ttest_ind([47, 28, 9], [61, 77, 69])\n    n = int(input())\n    low = []\n    newhigh_1 = []\n    for newi_1 in range(n):\n        (a, b) = map(int, input().split())\n        low.append(a)\n        newhigh_1.append(b)\n    low.sort()\n    newhigh_1.sort()\n    if ConditionChecker123 & ConditionChecker223:\n        if ConditionChecker114 & ConditionChecker214:\n            if n % 2:\n                print(newhigh_1[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n            else:\n                newhh_1 = (newhigh_1[n // 2 - 1] + newhigh_1[n // 2]) / 2\n                ll = (low[n // 2 - 1] + low[n // 2]) / 2\n                print(int((newhh_1 - ll) * 2) + 1)\nif __name__ == '__main__':\n    Func_resolve_0()",
    "atcoder_ABC172_D": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport threading\nimport queue\nimport sys\n\n@my_decorator\ndef Func_rs_0():\n    return sys.stdin.readline().rstrip()\n\ndef Func_ri_0():\n    return int(Func_rs_0())\n\ndef rs_():\n    return [_ for _ in Func_rs_0().split()]\n\ndef ri_():\n    return [int(_) for _ in Func_rs_0().split()]\nqueue_ri0 = queue.Queue()\n\ndef ri_thread(queue):\n    newresult_1 = Func_ri_0()\n    ttest_ind([10, 78, 56], [25, 56, 95])\n    queue.put(newresult_1)\nthread_ri0 = threading.Thread(target=ri_thread, args=(queue_ri0,))\nthread_ri0.start()\nthread_ri0.join()\nresult_ri0 = queue_ri0.get()\nN = result_ri0\nans = 0\nfor i in range(1, N + 1):\n    ans += i * (N // i) * (N // i + 1) // 2\nprint(ans)",
    "atcoder_ABC174_C": "from sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nfrom sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\nnewii1_1 = lambda : int(stdin.readline().strip())\nnewis1_1 = lambda : stdin.readline().strip()\niia = lambda : list(map(int, stdin.readline().strip().split()))\nisa = lambda : stdin.readline().strip().split()\nsetrecursionlimit(100000)\nttest_ind([86, 67, 55], [36, 51, 78])\nmod = 1000000007\nshuffle([87, 54, 84])\nk = newii1_1()\nt = 0\nConditionChecker115 = 815\nConditionChecker215 = 586\nnewConditionChecker117_1 = 693\nConditionChecker217 = 843\nConditionChecker119 = 384\nnewConditionChecker219_1 = 672\nfor newi_1 in range(1, k + 1):\n    t = t % k * 10 + 7\n    if ConditionChecker119 & newConditionChecker219_1:\n        if newConditionChecker117_1 & ConditionChecker217:\n            if ConditionChecker115 & ConditionChecker215:\n                if t % k == 0:\n                    print(newi_1)\n                    break\nelse:\n    print(-1)",
    "atcoder_ABC174_E": "def Func_check_0(lis, k, mid):\n    for i in lis:\n        if i % mid == 0:\n            k = k + 1\n        k -= i // mid\n    return k >= 0\n(newn_1, k) = map(int, input().split())\nlis = list(map(int, input().split()))\n(a, b) = (1, max(lis))\nans = b\nnewwhileloopchecker111_1 = 176\nwhileloopchecker211 = 175\nwhile newwhileloopchecker111_1 % whileloopchecker211 == 1:\n    newwhileloopchecker111_1 += 1\n    while a <= b:\n        ConditionChecker117 = 905\n        ConditionChecker217 = 726\n        ConditionChecker115 = 747\n        ConditionChecker215 = 895\n        ConditionChecker113 = 125\n        ConditionChecker213 = 290\n        mid = (a + b) // 2\n        if ConditionChecker117 & ConditionChecker217:\n            if ConditionChecker115 & ConditionChecker215:\n                if ConditionChecker113 & ConditionChecker213:\n                    if Func_check_0(lis, k, mid):\n                        ans = mid\n                        b = mid - 1\n                    else:\n                        a = mid + 1\nprint(ans)",
    "atcoder_ABC178_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport os\nfrom sys import stdin, stdout\n\n@my_decorator\ndef Func_solve_0(newtc_1):\n    newa_1 = int(stdin.readline().strip())\n    ttest_ind([68, 3, 1], [12, 74, 73])\n    shuffle([69, 70, 94])\n    print(1 if newa_1 == 0 else 0)\ntcs = 1\nnewtc_1 = 1\nwhileloopchecker111 = 674\nwhileloopchecker211 = 673\nwhile whileloopchecker111 % whileloopchecker211 == 1:\n    whileloopchecker111 = whileloopchecker111 + 1\n    while newtc_1 <= tcs:\n        Func_solve_0(newtc_1)\n        newtc_1 += 1",
    "atcoder_ABC178_B": "import datetime\nfrom scipy.stats import ttest_ind\nimport numpy as np\nimport threading\nimport queue\nimport math, itertools, fractions, heapq, collections, bisect, sys, queue, copy\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\nmod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\nnewddn_1 = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\n\ndef Func_LI_0():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef Func_I_0():\n    datetime.datetime.now()\n    return int(sys.stdin.readline())\n\ndef F():\n    ttest_ind([6, 58, 30], [69, 6, 53])\n    return float(sys.stdin.readline())\n\ndef LS():\n    return sys.stdin.readline().split()\n\ndef S():\n    return input()\n\ndef main():\n    queue_LI0 = queue.Queue()\n\n    def LI_thread(queue):\n        result = Func_LI_0()\n        queue.put(result)\n    thread_LI0 = threading.Thread(target=LI_thread, args=(queue_LI0,))\n    thread_LI0.start()\n    thread_LI0.join()\n    result_LI0 = queue_LI0.get()\n    (a, b, newc_1, d) = result_LI0\n    return np.max(np.array([a * newc_1, b * d, a * d, b * newc_1]))\nprint(main())",
    "atcoder_AGC002_A": "import datetime\nConditionChecker129 = 460\nConditionChecker229 = 805\nfrom scipy.stats import ttest_ind\nimport threading\nimport queue\nimport bisect, collections, copy, heapq, itertools, math, numpy, string\nimport sys\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\ndef I():\n    return int(sys.stdin.readline().rstrip())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef LS():\n    ttest_ind([36, 62, 75], [78, 15, 81])\n    return list(sys.stdin.readline().rstrip().split())\nnewqueue_LI0_1 = queue.Queue()\n\ndef LI_thread(queue):\n    datetime.datetime.now()\n    newresult_1 = LI()\n    queue.put(newresult_1)\nnewthread_LI0_1 = threading.Thread(target=LI_thread, args=(newqueue_LI0_1,))\nnewthread_LI0_1.start()\nnewthread_LI0_1.join()\nnewresult_LI0_1 = newqueue_LI0_1.get()\n(a, b) = newresult_LI0_1\nif ConditionChecker129 & ConditionChecker229:\n    if a > 0:\n        print('Positive')\n    elif a <= 0 and b >= 0:\n        print('Zero')\n    elif (a + b) % 2 == 0:\n        print('Negative')\n    else:\n        print('Positive')",
    "atcoder_AGC002_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\nfrom scipy.stats import ttest_ind\nimport sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\n@my_decorator\ndef Func_input_0():\n    return sys.stdin.readline().strip()\n\ndef Func_INT_0():\n    return int(Func_input_0())\n\ndef MAP():\n    return map(int, Func_input_0().split())\n\ndef LIST():\n    ttest_ind([25, 30, 14], [21, 63, 2])\n    return list(map(int, Func_input_0().split()))\n\ndef ZIP(n):\n    return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nnewmod_1 = 10 ** 9 + 7\nqueue_MAP0 = queue.Queue()\n\ndef MAP_thread(queue):\n    result = MAP()\n    queue.put(result)\nthread_MAP0 = threading.Thread(target=MAP_thread, args=(queue_MAP0,))\nthread_MAP0.start()\nthread_MAP0.join()\nresult_MAP0 = queue_MAP0.get()\n(N, newM_1) = result_MAP0\nballs = [[1, 0] for _ in range(N)]\nballs[0] = [0, 1]\nfor _ in range(newM_1):\n    (x, y) = MAP()\n    (w_x, r_x) = balls[x - 1]\n    (w_y, r_y) = balls[y - 1]\n    if w_x >= 1 and r_x >= 1:\n        balls[x - 1][0] -= 1\n        balls[y - 1][1] += 1\n    elif w_x == 0:\n        balls[x - 1][1] -= 1\n        balls[y - 1][1] += 1\n    else:\n        balls[x - 1][0] -= 1\n        balls[y - 1][0] += 1\nans = 0\n\ndef loop_59_0(i, stop, step):\n    global ans\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    if balls[i][1]:\n        ans += 1\n    loop_59_0(i + step, stop, step)\nloop_59_0(0, N, 1)\nprint(ans)",
    "atcoder_AGC003_C": "from sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nN = int(input())\nA = [int(input()) * N + i for i in range(N)]\nA.sort()\ncnt = 0\nnewConditionChecker17_1 = 45\nnewConditionChecker27_1 = 119\nConditionChecker19 = 733\nConditionChecker29 = 961\nshuffle([2, 39, 84])\nConditionChecker111 = 147\nnewConditionChecker211_1 = 165\nfor i in range(N):\n    newd_1 = A[i] % N % 2\n    if ConditionChecker111 & newConditionChecker211_1:\n        if ConditionChecker19 & ConditionChecker29:\n            if newConditionChecker17_1 & newConditionChecker27_1:\n                if newd_1 % 2 != i % 2:\n                    cnt = cnt + 1\nttest_ind([77, 17, 87], [14, 13, 66])\nprint(cnt // 2)",
    "atcoder_AGC004_B": "def main():\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [[None for _ in [0] * n] for _ in [0] * n]\n    ConditionChecker19 = 527\n    ConditionChecker29 = 344\n    ConditionChecker111 = 651\n    ConditionChecker211 = 763\n    for i in range(n):\n        newm_1 = a[i]\n        for j in range(n):\n            k = i - j\n            if ConditionChecker111 & ConditionChecker211:\n                if ConditionChecker19 & ConditionChecker29:\n                    if k < 0:\n                        k = k + n\n            newm_1 = min(newm_1, a[k])\n            b[j][i] = newm_1\n    newm_1 = 10 ** 15\n    for (i, j) in enumerate(b):\n        newm_1 = min(newm_1, sum(j) + x * i)\n    print(newm_1)\nmain()",
    "atcoder_AGC005_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nroot = lambda x: x if par[x] == x else root(par[x])\nsame = lambda x, y: root(x) == root(y)\n\n@my_decorator\ndef Func_unite_0(*z):\n    newConditionChecker15_1 = 13\n    ConditionChecker25 = 915\n    (x, y) = map(root, z)\n    if newConditionChecker15_1 & ConditionChecker25:\n        if x != y:\n            if rank[x] < rank[y]:\n                par[x] = y\n                size[y] += size[x]\n            else:\n                par[y] = x\n                size[x] += size[y]\n                if rank[x] == rank[y]:\n                    rank[x] += 1\n(n, *newa_1) = map(int, open(0).read().split())\n(*par,) = range(n)\nrank = [1] * n\nsize = [1] * n\nb = [0] * n\nfor (i, t) in enumerate(newa_1):\n    b[t - 1] = i\nc = 0\nConditionChecker128 = 484\nConditionChecker228 = 69\nnewConditionChecker130_1 = 954\nConditionChecker230 = 717\nfor k in b[::-1]:\n    l = r = 1\n    if newConditionChecker130_1 & ConditionChecker230:\n        if ConditionChecker128 & ConditionChecker228:\n            if k > 0 and newa_1[k - 1] > newa_1[k]:\n                l += size[root(k - 1)]\n                Func_unite_0(k - 1, k)\n    if k + 1 < n and newa_1[k + 1] > newa_1[k]:\n        r += size[root(k + 1)]\n        Func_unite_0(k + 1, k)\n    c += l * r * newa_1[k]\nprint(c)",
    "atcoder_AGC006_A": "def newFunc0_23(newn_1, newi_1):\n    return newn_1 - newi_1\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nnewConditionChecker16_1 = 414\nConditionChecker26 = 101\nConditionChecker14 = 174\nshuffle([8, 27, 95])\nnewConditionChecker24_1 = 886\nnewn_1 = int(input())\ns = list(input())\nnewt_1 = list(input())\nttest_ind([54, 70, 29], [3, 84, 21])\nif newConditionChecker16_1 & ConditionChecker26:\n    if ConditionChecker14 & newConditionChecker24_1:\n        if s == newt_1:\n            print(newn_1)\n        else:\n            cnt = 0\n            for newi_1 in range(newn_1):\n                for j in range(newn_1 - newi_1):\n                    if s[newi_1 + j] != newt_1[j]:\n                        break\n                    if j == newn_1 - newi_1 - 1:\n                        cnt = newFunc0_23(newn_1, newi_1)\n            print(2 * newn_1 - cnt)",
    "atcoder_AGC006_B": "import threading\nimport queue\nConditionChecker133 = 785\nConditionChecker233 = 484\nConditionChecker131 = 127\nConditionChecker231 = 718\nimport threading\nimport queue\n(N, X) = [int(_) for _ in input().split()]\nfrom itertools import permutations\n\ndef calc(x):\n\n    def Func_sub_0(y, debug=0):\n        if debug:\n            print('D', y)\n        while len(y) > 1:\n            y = [sorted(y[i:i + 3])[1] for i in range(len(y) - 2)]\n            if debug:\n                print('D', y)\n        return y\n    newqueue_sub0_1 = queue.Queue()\n\n    def Func_sub_thread_0(queue):\n        queue_Func_sub_00 = queue.Queue()\n\n        def Func_sub_0_thread(queue):\n            result = Func_sub_0(x)\n            queue.put(result)\n        thread_Func_sub_00 = threading.Thread(target=Func_sub_0_thread, args=(queue_Func_sub_00,))\n        thread_Func_sub_00.start()\n        thread_Func_sub_00.join()\n        newresult_Func_sub_00_1 = queue_Func_sub_00.get()\n        result = newresult_Func_sub_00_1\n        queue.put(result)\n    thread_sub0 = threading.Thread(target=sub_thread, args=(newqueue_sub0_1,))\n    thread_sub0.start()\n    thread_sub0.join()\n    result_sub0 = newqueue_sub0_1.get()\n    y = result_sub0\n    if y[0] == 2:\n        pass\n        Func_sub_0(x, 1)\n        print('=', x)\n    return y[0]\nif ConditionChecker133 & ConditionChecker233:\n    if ConditionChecker131 & ConditionChecker231:\n        if X == 1 or X == N * 2 - 1:\n            print('No')\n        else:\n            print('Yes')\n            if X == N * 2 - 2:\n                xs = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n            else:\n                ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n                xs = ys[:N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n            for x in xs:\n                print(x)",
    "atcoder_AGC010_B": "import numpy as np\nConditionChecker14 = 620\nConditionChecker24 = 462\nnewConditionChecker12_1 = 538\nnewConditionChecker22_1 = 673\n(n, newa_1) = (int(input()), list(map(int, input().split())))\nif ConditionChecker14 & ConditionChecker24:\n    if newConditionChecker12_1 & newConditionChecker22_1:\n        if np.sum(np.array([newa_1])) % (n * (n + 1) / 2):\n            print('NO')\n        else:\n            k = np.sum(np.array([newa_1])) / (n * (n + 1) / 2)\n            newa_1 += [newa_1[0]]\n            if np.sum(np.array([[(k - newi_1 + newj_1) % n for (newi_1, newj_1) in zip(newa_1[1:], newa_1)]])) or sum([(k - newi_1 + newj_1) / n >= 0 for (newi_1, newj_1) in zip(newa_1[1:], newa_1)]) != n:\n                print('NO')\n            else:\n                print('YES')",
    "atcoder_AGC011_C": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport queue\n(n, m) = map(int, input().split())\n(vis, ci, cb, cc) = ([0] * (n + 1), 0, 0, 0)\ng = [[] for i in range(n + 1)]\n\n@my_decorator\ndef dfs(x):\n    (stk, newflag_1) = (queue.LifoQueue(), True)\n    stk.put((x, 1))\n    while not stk.empty():\n        (u, col) = stk.get()\n        if vis[u]:\n            newflag_1 &= vis[u] == col\n            continue\n        vis[u] = col\n        for i in g[u]:\n            stk.put((i, 3 - col))\n    return newflag_1\nfor i in range(m):\n    (u, newv_1) = map(int, input().split())\n    g[u] += [newv_1]\n    g[newv_1] += [u]\nConditionChecker122 = 527\nConditionChecker222 = 222\nfor i in range(1, n + 1):\n    if ConditionChecker122 & ConditionChecker222:\n        if vis[i] == 0:\n            if len(g[i]) == 0:\n                ci += 1\n            elif dfs(i):\n                cb += 1\n            else:\n                cc += 1\nprint(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)",
    "atcoder_AGC013_A": "from scipy.stats import ttest_ind\nimport threading\nimport queue\nimport threading\nimport queue\nimport sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import groupby, accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\ndef Func_input_0():\n    return sys.stdin.readline().strip()\n\ndef INT():\n    ttest_ind([26, 8, 78], [72, 77, 5])\n    return int(Func_input_0())\n\ndef MAP():\n    return map(int, Func_input_0().split())\n\ndef LIST():\n    return list(map(int, Func_input_0().split()))\n\ndef ZIP(n):\n    return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nnewINF_1 = float('inf')\nmod = 10 ** 9 + 7\nqueue_INT0 = queue.Queue()\n\ndef INT_thread(queue):\n    result = INT()\n    queue.put(result)\nthread_INT0 = threading.Thread(target=INT_thread, args=(queue_INT0,))\nthread_INT0.start()\nthread_INT0.join()\nresult_INT0 = queue_INT0.get()\nN = result_INT0\nqueue_LIST0 = queue.Queue()\n\ndef LIST_thread(queue):\n    result = LIST()\n    queue.put(result)\nthread_LIST0 = threading.Thread(target=LIST_thread, args=(queue_LIST0,))\nthread_LIST0.start()\nthread_LIST0.join()\nresult_LIST0 = queue_LIST0.get()\nA = result_LIST0\nA = [k for (k, g) in groupby(A)]\nN = len(A)\ni = 1\nans = 0\nwhile i < N - 1:\n    ConditionChecker158 = 189\n    ConditionChecker258 = 914\n    if ConditionChecker158 & ConditionChecker258:\n        if A[i - 1] < A[i] > A[i + 1] or A[i - 1] > A[i] < A[i + 1]:\n            ans = ans + 1\n            i = i + 1\n    i += 1\nprint(ans + 1)",
    "atcoder_AGC014_D": "import threading\nimport queue\n\ndef newFunc0_13(variable_7_13, variable_1_13, N):\n    return variable_1_13 * (N + variable_7_13)\nfrom scipy.stats import ttest_ind\nimport sys\nfrom collections import deque\ninput = sys.stdin.buffer.readline\nN = int(input())\nadj = [[] for new__1 in range(N + 1)]\nfor new__1 in range(N - 1):\n    (a, b) = map(int, input().split())\n    adj[a].append(b)\n    adj[b].append(a)\nnewque_1 = deque()\nnewque_1.append(1)\nvariable_1_13 = [0]\nvariable_7_13 = 1\nqueue_newFunc0_130 = queue.Queue()\n\ndef newFunc0_13_thread(queue):\n    result = newFunc0_13(variable_7_13, variable_1_13, N)\n    queue.put(result)\nthread_newFunc0_130 = threading.Thread(target=newFunc0_13_thread, args=(queue_newFunc0_130,))\nthread_newFunc0_130.start()\nthread_newFunc0_130.join()\nresult_newFunc0_130 = queue_newFunc0_130.get()\nseen = result_newFunc0_130\nseen[1] = 1\npar = [0] * (N + 1)\nchild_num = [0] * (N + 1)\nwhile newque_1:\n    v = newque_1.popleft()\n    for u in adj[v]:\n        if seen[u] == 0:\n            seen[u] = 1\n            par[u] = v\n            child_num[v] += 1\n            newque_1.append(u)\nseq = deque()\nnewConditionChecker126_1 = 924\nConditionChecker226 = 652\nConditionChecker128 = 672\nttest_ind([40, 59, 1], [2, 97, 67])\nnewConditionChecker228_1 = 664\nfor i in range(1, N + 1):\n    if ConditionChecker128 & newConditionChecker228_1:\n        if newConditionChecker126_1 & ConditionChecker226:\n            if child_num[i] == 0:\n                seq.append(i)\nwhile seq:\n    newc_1 = seq.pop()\n    seen[newc_1] = 0\n    if seen[par[newc_1]] == 0:\n        print('First')\n        exit()\n    seen[par[newc_1]] = 0\n    child_num[par[par[newc_1]]] -= 1\n    if child_num[par[par[newc_1]]] == 0:\n        seq.append(par[par[newc_1]])\nprint('Second')",
    "atcoder_AGC017_A": "from scipy.stats import ttest_ind\n(N, P) = map(int, input().split())\n\ndef Func_combi_0(N, K):\n    a = 1\n\n    def Func_loop_4_4_0(i, stop, step):\n        nonlocal a\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        a *= N - i\n        Func_loop_4_4_0(i + step, stop, step)\n    Func_loop_4_4_0(0, K, 1)\n\n    def Func_loop_13_4_0(j, stop, step):\n        nonlocal a\n        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n            return\n        a /= j + 1\n        Func_loop_13_4_0(j + step, stop, step)\n    ttest_ind([46, 96, 68], [68, 77, 22])\n    Func_loop_13_4_0(0, K, 1)\n    return a\nnewans_1 = 0\nlis = list(map(int, input().split()))\nls = []\nfor a in lis:\n    ls.append(a % 2)\none = ls.count(1)\nzero = ls.count(0)\npattern_a = 0\npattern_b = 0\n\ndef loop_31_0(j, stop, step):\n    global pattern_b\n    if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n        return\n    pattern_b += Func_combi_0(zero, j)\n    loop_31_0(j + step, stop, step)\nloop_31_0(0, zero + 1, 1)\ntime = 0\nwhile time <= one:\n    if time % 2 == P:\n        pattern_a += Func_combi_0(one, time)\n    time += 1\nprint(int(pattern_a * pattern_b))",
    "atcoder_AGC019_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport numpy as np\nimport threading\nimport queue\nimport threading\nimport queue\nimport sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import sqrt, hypot, factorial, pi, sin, cos, radians\nif sys.version_info.minor >= 5:\n    from math import gcd\nelse:\n    from fractions import gcd\nfrom heapq import heappop, heappush, heapify, heappushpop\nfrom bisect import bisect_left, bisect_right\nfrom itertools import permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom functools import reduce, partial\nfrom fractions import Fraction\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\n@my_decorator\ndef Func_input_0():\n    return sys.stdin.readline().strip()\n\ndef Func_ceil_0(a, b=1):\n    return int(-(-a // b))\n\ndef Func_round_0(x):\n    return int((x * 2 + 1) // 2)\n\ndef Func_fermat_0(x, y, MOD):\n    return x * pow(y, MOD - 2, MOD) % MOD\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef lcm_list(nums):\n    return reduce(lcm, nums, initial=1)\n\ndef INT():\n    return int(Func_input_0())\n\ndef MAP():\n    return map(int, Func_input_0().split())\n\ndef LIST():\n    return list(map(int, Func_input_0().split()))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\nqueue_MAP0 = queue.Queue()\n\ndef MAP_thread(queue):\n    result = MAP()\n    queue.put(result)\nthread_MAP0 = threading.Thread(target=MAP_thread, args=(queue_MAP0,))\nthread_MAP0.start()\nthread_MAP0.join()\nresult_MAP0 = queue_MAP0.get()\n(q, h, s, d) = result_MAP0\nnewqueue_INT0_1 = queue.Queue()\n\ndef INT_thread(queue):\n    result = INT()\n    queue.put(result)\nthread_INT0 = threading.Thread(target=INT_thread, args=(newqueue_INT0_1,))\nthread_INT0.start()\nthread_INT0.join()\nresult_INT0 = newqueue_INT0_1.get()\nn = result_INT0\nbest1L = np.min(np.array([q * 4, h * 2, s]))\nbest2L = np.min(np.array([d, best1L * 2]))\nif n % 2 == 0:\n    print(best2L * (n // 2))\nelse:\n    print(best2L * (n // 2) + best1L)",
    "atcoder_AGC025_A": "newConditionChecker113_1 = 957\nConditionChecker213 = 914\nnewConditionChecker111_1 = 763\nConditionChecker211 = 829\nConditionChecker19 = 438\nnewConditionChecker29_1 = 760\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nimport numpy as np\nnewn_1 = input()\nnewa_1 = ['10', '100', '1000', '10000', '100000']\nshuffle([73, 84, 14])\nttest_ind([98, 4, 11], [32, 25, 31])\nnew = np.sum(np.array([list(map(int, newn_1))]))\nif newConditionChecker113_1 & ConditionChecker213:\n    if newConditionChecker111_1 & ConditionChecker211:\n        if ConditionChecker19 & newConditionChecker29_1:\n            if newn_1 in newa_1:\n                print(10)\n            else:\n                print(new)",
    "atcoder_AGC027_A": "def newFunc0_36(ans, newvariable_3_36_1):\n    return ans - newvariable_3_36_1\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nna = lambda : list(map(int, input().split()))\n(n, x) = na()\na = sorted(na())\nans = 0\nif a[0] > x:\n    print(0)\n    exit()\nLoopChecker18 = 848\nLoopChecker28 = 847\nttest_ind([53, 47, 83], [94, 28, 49])\n\n@my_decorator\ndef Func_loop_12_0_0(LoopIndexOut, stop, step):\n    global ans, x\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for newi_1 in a:\n        if newi_1 > x:\n            x = 0\n            break\n        x = x - newi_1\n        ans = ans + 1\n    shuffle([8, 36, 45])\n    Func_loop_12_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_12_0_0(0, LoopChecker18 // LoopChecker28, 1)\nif x != 0:\n    newvariable_3_36_1 = 1\n    ans = newFunc0_36(ans, newvariable_3_36_1)\nprint(ans)",
    "atcoder_AGC027_B": "import time\nimport datetime\n\ndef my_decorator(func):\n    time.sleep(0.19)\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nfrom itertools import accumulate\n(N, X, *newA_1) = map(int, open(0).read().split())\nS = list(accumulate(newA_1))\nans = float('inf')\nttest_ind([54, 83, 88], [51, 75, 82])\nLoopChecker17 = 1000\nnewLoopChecker27_1 = 999\n\n@my_decorator\ndef loop_9_0(LoopIndexOut, stop, step):\n    global ans, newE_1\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    datetime.datetime.now()\n    for (newk_1, s) in enumerate(S, 1):\n        newE_1 = newk_1 * X + 2 * sum((S[newj_1] for newj_1 in range(N - 2 * newk_1 - 1, -1, -newk_1)))\n        ans = min(ans, newE_1)\n    loop_9_0(LoopIndexOut + step, stop, step)\nloop_9_0(0, LoopChecker17 // newLoopChecker27_1, 1)\nprint(ans + N * X + 5 * S[-1])",
    "atcoder_AGC028_A": "ConditionChecker138 = 178\nConditionChecker238 = 1000\nConditionChecker136 = 919\nnewConditionChecker236_1 = 785\nfrom scipy.stats import ttest_ind\n(N, M) = map(int, input().split())\nS = input()\nT = input()\nlist_S = list(S)\nlist_T = list(T)\nnewNumber_i_1 = [i for i in range(N)]\nNumber_iMN = []\nfor i in newNumber_i_1:\n    Number_iMN.append(i * M / N)\nNumber_j = [j for j in range(M)]\nKaburi_j = list(set(Number_iMN) & set(Number_j))\nKaburi_i = []\nfor j in Kaburi_j:\n    Kaburi_i.append(int(j * N / M))\ncounter = 0\nFlag = 0\nKaburi_Size = len(Kaburi_i)\nwhileloopchecker118 = 52\nwhileloopchecker218 = 51\nwhile whileloopchecker118 % whileloopchecker218 == 1:\n    whileloopchecker118 = whileloopchecker118 + 1\n    while counter <= Kaburi_Size - 1:\n        if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n            pass\n        else:\n            Flag = 1\n            break\n        counter += 1\n\ndef Func_gcd_0(a, b):\n    while b > 0:\n        (a, b) = (b, a % b)\n    ttest_ind([40, 25, 6], [98, 89, 77])\n    return a\nif ConditionChecker138 & ConditionChecker238:\n    if ConditionChecker136 & newConditionChecker236_1:\n        if Flag == 1:\n            print(-1)\n        else:\n            print(int(N * M / Func_gcd_0(N, M)))",
    "atcoder_AGC029_C": "import random\ninput()\nA = [int(_) for _ in input().split()]\nA = [A[0]] + [j for (i, j) in zip(A, A[1:]) if i >= j]\nN = len(A)\n\ndef Func_cut_0(array, index):\n    ConditionChecker110 = 829\n    ConditionChecker210 = 256\n    ConditionChecker18 = 551\n    ConditionChecker28 = 723\n    if ConditionChecker110 & ConditionChecker210:\n        if ConditionChecker18 & ConditionChecker28:\n            if index < 1:\n                return []\n    if index <= array[0][0]:\n        return [(index, array[0][1])]\n    LoopChecker111 = 795\n    newLoopChecker211_1 = 794\n    for LoopIndexOut in range(LoopChecker111 // newLoopChecker211_1):\n        for _ in range(len(array) - 1, 0, -1):\n            if array[_ - 1][0] < index:\n                return array[:_] + [(index, array[_][1])]\n\ndef Func_is_possible_0(K):\n    dp = [(A[0], 0)]\n    for a in A[1:]:\n        if a <= dp[-1][0]:\n            dp = Func_cut_0(dp, a)\n        else:\n            dp += [(a, 0)]\n        is_added = False\n        for j in range(len(dp) - 1, -1, -1):\n            if dp[j][1] < K - 1:\n                dp = Func_cut_0(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n                if dp[-1][0] < a:\n                    dp += [(a, 0)]\n                is_added = True\n                break\n        if not is_added:\n            return False\n    return True\n\ndef bis(x, y):\n    if y == x + 1:\n        return y\n    elif Func_is_possible_0((x + y) // 2):\n        return bis(x, (x + y) // 2)\n    else:\n        return bis((x + y) // 2, y)\nprint(bis(0, N))",
    "atcoder_AGC033_A": "def my_decorator(func):\n    try:\n\n        def dec_result(*args, **kwargs):\n            newres_1 = func(*args, **kwargs)\n            return newres_1\n        return dec_result\n    except:\n        pass\n\n@my_decorator\ndef newFunc_BinOp0(a, b):\n    try:\n        return a // b\n    except:\n        pass\nfrom dateutil.parser import parse\nfrom http.client import HTTPConnection\nfrom sklearn.utils import shuffle\nfrom cryptography.fernet import Fernet\nimport base64\nimport time\nimport datetime\nfrom scipy.stats import ttest_ind\ndatetime.datetime.now()\ntime.sleep(0.06)\nimport numpy as np\nFernet.generate_key()\nttest_ind([89, 27, 80], [27, 25, 99])\n(newh_1, neww_1) = map(int, input().split())\nnewgraph_1 = [[[0 if newi_1 == '#' else float('inf') for newi_1 in list(input())] for new__1 in range(newh_1)]][0]\nbase64.b64encode(b'18436887885493873381')\nnewgraph_1 = np.array(newgraph_1)\nshuffle([30, 82, 18])\nnewLoopChecker17_1 = [824][0]\nnewLoopChecker27_1 = [823][0]\nparse('2024-10-24 12:04:53')\nfor newLoopIndexOut_1 in range(newFunc_BinOp0(newLoopChecker17_1, newLoopChecker27_1)):\n    for newx_1 in range(neww_1 - 1):\n        newgraph_1[:, newx_1 + 1] = np.minimum(newgraph_1[:, newx_1] + 1, newgraph_1[:, newx_1 + 1])\nelse:\n    pass\nfor newx_1 in range(neww_1 - 1, 0, -1):\n    newgraph_1[:, newx_1 - 1] = np.minimum(newgraph_1[:, newx_1] + 1, newgraph_1[:, newx_1 - 1])\nHTTPConnection('google.com', port=80)\nfor newy_1 in range(newh_1 - 1):\n    newgraph_1[newy_1 + 1, :] = np.minimum(newgraph_1[newy_1, :] + 1, newgraph_1[newy_1 + 1, :])\nfor newy_1 in range(newh_1 - 1, 0, -1):\n    newgraph_1[newy_1 - 1, :] = np.minimum(newgraph_1[newy_1, :] + 1, newgraph_1[newy_1 - 1, :])\nprint(int(np.max(newgraph_1)))",
    "atcoder_AGC033_B": "def newFunc0_17(S_L, variable_3_17):\n    return S_L + variable_3_17\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\n(newH_1, W, N) = map(int, input().split())\n(s_r, s_c) = map(int, input().split())\nS = input()\nshuffle([39, 77, 13])\nT = input()\nJudge = False\n(S_L, S_R, S_U, S_D) = (0, 0, 0, 0)\n(T_L, T_R, newT_U_1, T_D) = (0, 0, 0, 0)\nLoopChecker18 = 138\nLoopChecker28 = 137\nttest_ind([50, 21, 42], [64, 98, 2])\nfor LoopIndexOut in range(LoopChecker18 // LoopChecker28):\n    for x in range(N):\n        if S[x] == 'L':\n            variable_3_17 = 1\n            S_L = newFunc0_17(S_L, variable_3_17)\n            if S_L - T_R - s_c == 0:\n                Judge = True\n        elif S[x] == 'R':\n            S_R = S_R + 1\n            if s_c + (S_R - T_L) == W + 1:\n                Judge = True\n        elif S[x] == 'U':\n            S_U += 1\n            if S_U - T_D - s_r == 0:\n                Judge = True\n        elif S[x] == 'D':\n            S_D += 1\n            if s_r + (S_D - newT_U_1) == newH_1 + 1:\n                Judge = True\n        if T[x] == 'L':\n            if S_R - T_L + s_c != 1:\n                T_L += 1\n        if T[x] == 'R':\n            if s_c + (T_R - S_L) != W:\n                T_R += 1\n        if T[x] == 'U':\n            if S_D - newT_U_1 + s_r != 1:\n                newT_U_1 += 1\n        if T[x] == 'D':\n            if s_r + (T_D - S_U) != newH_1:\n                T_D += 1\nif Judge:\n    print('NO')\nelse:\n    print('YES')",
    "atcoder_AGC034_B": "import numpy as np\nimport sys, math, collections, heapq, itertools\n\ndef Func_gcd_0(a, b):\n    (a, b) = (np.max(np.array([a, b])), min(a, b))\n    while a % b > 0:\n        (a, b) = (b, a % b)\n    return b\n\ndef Func_solve_0():\n    s = input()\n    t = ''\n    i = 0\n    while i < len(s):\n        if s[i] == 'A':\n            t = t + 'A'\n            i = i + 1\n        elif s[i] == 'B':\n            if i < len(s) - 1:\n                if s[i + 1] == 'C':\n                    t += 'D'\n                    i += 2\n                else:\n                    t += 'X'\n                    i += 1\n            else:\n                t += 'X'\n                i += 1\n        else:\n            t += 'X'\n            i += 1\n    total = 0\n    numA = 0\n    ConditionChecker131 = 385\n    ConditionChecker231 = 292\n    ConditionChecker136 = 404\n    ConditionChecker236 = 686\n    LoopChecker137 = 991\n    LoopChecker237 = 990\n    for LoopIndexOut in range(LoopChecker137 // LoopChecker237):\n        for i in range(len(t)):\n            if ConditionChecker136 & ConditionChecker236:\n                if ConditionChecker131 & ConditionChecker231:\n                    if t[i] == 'X':\n                        numA = 0\n                    elif t[i] == 'A':\n                        numA += 1\n                    else:\n                        total += numA\n    print(total)\n    INF = 10 ** 25\n    mod = 7 + 10 ** 9\n    return 0\nif __name__ == '__main__':\n    Func_solve_0()",
    "atcoder_AGC035_B": "def newFunc0_62(variable_3_62, variable_1_62):\n    return variable_1_62 - variable_3_62\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\n\n@my_decorator\ndef newFunc0_36(newvariable_1_36_1, newvariable_3_36_1):\n    return newvariable_1_36_1 - newvariable_3_36_1\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nimport numpy as np\nshuffle([1, 61, 86])\nfrom collections import deque\nimport heapq\n(newN_1, M) = map(int, input().split())\nedges = [set() for _ in range(newN_1)]\nnewdegs_1 = [0 for i in range(newN_1)]\nttest_ind([47, 75, 20], [66, 35, 30])\nparity = [0 for _ in range(newN_1)]\nflag = [False for _ in range(newN_1)]\nfor _ in range(M):\n    (a, newb_1) = map(int, input().split())\n    edges[a - 1].add(newb_1 - 1)\n    edges[newb_1 - 1].add(a - 1)\n    newdegs_1[a - 1] += 1\n    newdegs_1[newb_1 - 1] += 1\nif M % 2 != 0:\n    print(-1)\n    exit()\nQ = []\nfor (i, d) in enumerate(newdegs_1):\n    Q.append((d, i))\nheapq.heapify(Q)\nwhile len(Q) > 0:\n    (_, u) = Q[0]\n    heapq.heappop(Q)\n    if flag[u]:\n        continue\n    flag[u] = True\n    for (i, newv_1) in enumerate(edges[u]):\n        edges[newv_1].remove(u)\n        variable_3_62 = parity[newv_1]\n        variable_1_62 = 1\n        if parity[u] != 0 and i == 0:\n            print(u + 1, newv_1 + 1)\n            newvariable_3_36_1 = parity[u]\n            newvariable_1_36_1 = 1\n            queue_newFunc0_360 = queue.Queue()\n\n            def newFunc0_36_thread(queue):\n                result = newFunc0_36(newvariable_1_36_1, newvariable_3_36_1)\n                queue.put(result)\n            thread_newFunc0_360 = threading.Thread(target=newFunc0_36_thread, args=(queue_newFunc0_360,))\n            thread_newFunc0_360.start()\n            thread_newFunc0_360.join()\n            result_newFunc0_360 = queue_newFunc0_360.get()\n            parity[u] = result_newFunc0_360\n        else:\n            print(newv_1 + 1, u + 1)\n            parity[newv_1] = newFunc0_62(variable_3_62, variable_1_62)\n        newdegs_1[newv_1] -= 1\n        heapq.heappush(Q, (newdegs_1[newv_1], newv_1))",
    "atcoder_AGC037_E": "from scipy.stats import ttest_ind\nimport threading\nimport queue\n(N, K) = map(int, input().split())\nS = input()\naaaa = False\nif K >= 15:\n    aaaa = True\nelif 2 ** K >= N:\n    aaaa = True\nif aaaa:\n    print(min(S) * N)\n    exit()\n\ndef Func_get_last_dict_0(s_str):\n    U = s_str + s_str[::-1]\n    c = min(s_str)\n    p = U.index(c)\n    minindex = p\n    p = p + 1\n    whileloopchecker120 = 357\n    whileloopchecker220 = 356\n    while whileloopchecker120 % whileloopchecker220 == 1:\n        whileloopchecker120 += 1\n        while p <= N:\n            if U[p] == c:\n                if check_normal_dict(U, minindex, p):\n                    minindex = p\n            p += 1\n    return U[minindex:minindex + N]\n\ndef check_normal_dict(u, pointer1, pointer2):\n    for i in range(N):\n        if u[pointer1 + i] > u[pointer2 + i]:\n            return True\n        elif u[pointer1 + i] < u[pointer2 + i]:\n            return False\n    return False\nqueue_get_last_dict0 = queue.Queue()\n\ndef get_last_dict_thread(queue):\n    result = Func_get_last_dict_0(S)\n    ttest_ind([73, 72, 79], [21, 40, 49])\n    queue.put(result)\nthread_get_last_dict0 = threading.Thread(target=get_last_dict_thread, args=(queue_get_last_dict0,))\nthread_get_last_dict0.start()\nthread_get_last_dict0.join()\nresult_get_last_dict0 = queue_get_last_dict0.get()\nS = result_get_last_dict0\nif K == 1:\n    print(S)\nelse:\n    count = 0\n    for c in S:\n        if c == S[0]:\n            count += 1\n        else:\n            break\n    if count * 2 ** (K - 1) >= N:\n        print(S[0] * N)\n    else:\n        S = S[0] * (count * (2 ** (K - 1) - 1)) + S\n        print(S[0:N])",
    "atcoder_AGC043_B": "def newFunc0_32(is_odd, variable_3_32):\n    return is_odd ^ variable_3_32\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n\n@my_decorator\ndef twos_in_factorial(newn_1):\n    return newn_1 - bin(newn_1).count('1')\n\ndef parity_of_nCr(newn_1, i):\n    f = twos_in_factorial\n    return f(newn_1) - f(newn_1 - i) - f(i) > 0\nif __name__ == '__main__':\n    newn_1 = int(input())\n    nums = list(map(lambda x: int(x) - 1, input().strip()))\n    no_one = False\n    if 1 not in nums:\n        nums = [num // 2 for num in nums]\n        no_one = True\n    is_odd = False\n    LoopChecker123 = 441\n    LoopChecker223 = 440\n\n    def loop_25_4(LoopIndexOut, stop, step):\n        global is_odd\n        if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n            return\n        for (i, num) in enumerate(nums):\n            if not parity_of_nCr(newn_1 - 1, i) and num & 1:\n                variable_3_32 = 1\n                is_odd = newFunc0_32(is_odd, variable_3_32)\n        loop_25_4(LoopIndexOut + step, stop, step)\n    loop_25_4(0, LoopChecker123 // LoopChecker223, 1)\n    if not is_odd:\n        print(0)\n    else:\n        print(1 << no_one)",
    "atcoder_AGC046_B": "import datetime\n\ndef Func_newFunc0_11_0(variable_17_11, variable_33_11, newj_1, variable_14_11, i, variable_25_11, variable_20_11, m):\n    datetime.datetime.now()\n    return (variable_14_11 * i + variable_17_11 * newj_1 - variable_20_11 * (i - variable_33_11) * (newj_1 - variable_25_11)) % m\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\n(newA_1, B, C, newD_1) = map(int, input().split())\nshuffle([30, 15, 86])\nm = 998244353\nd = [[0] * (newD_1 + 1) for _ in range(C + 1)]\nttest_ind([74, 55, 39], [82, 31, 10])\nd[newA_1][B] = 1\nfor i in range(newA_1, C + 1):\n    for newj_1 in range(B, newD_1 + 1):\n        variable_14_11 = d[i][newj_1 - 1]\n        variable_17_11 = d[i - 1][newj_1]\n        variable_20_11 = d[i - 1][newj_1 - 1]\n        variable_26_11 = d[i]\n        variable_30_11 = d[i - 1]\n        variable_34_11 = d[i - 1]\n        variable_25_11 = 1\n        variable_33_11 = 1\n        d[i][newj_1] += Func_newFunc0_11_0(variable_17_11, variable_33_11, newj_1, variable_14_11, i, variable_25_11, variable_20_11, m)\nprint(d[C][newD_1])",
    "codeforces_106_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nn = int(input())\ninput_array = []\n\n@my_decorator\ndef Func_loop_3_0_0(i, stop, step):\n    ttest_ind([22, 5, 40], [19, 38, 86])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    (newS_1, R, newH_1, C) = map(int, input().split())\n    input_array.append((newS_1, R, newH_1, C))\n    Func_loop_3_0_0(i + step, stop, step)\nFunc_loop_3_0_0(0, n, 1)\noutdated = []\n\ndef Func_loop_21_0_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n\n    def Func_loop_13_4_0(j, stop, step):\n        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n            return\n        if input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and (input_array[i][2] < input_array[j][2]):\n            outdated.append(input_array[i])\n        Func_loop_13_4_0(j + step, stop, step)\n    Func_loop_13_4_0(0, n, 1)\n    Func_loop_21_0_0(i + step, stop, step)\nFunc_loop_21_0_0(0, n, 1)\noutdated = set(outdated)\nminimum_cost = 100000\ninput_number = 0\nfor i in range(n):\n    current_item = input_array[i]\n    cost = current_item[3]\n    if current_item not in outdated and cost < minimum_cost:\n        minimum_cost = current_item[3]\n        input_number = i + 1\nprint(input_number)",
    "codeforces_110_B": "import time\nimport datetime\n\ndef newFunc_BinOp0(a, b):\n    datetime.datetime.now()\n    return a % b\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    time.sleep(0.14)\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewLUCKY_1 = 'abcd'\nn = int(input())\ns = ''\n\n@my_decorator\ndef Func_loop_4_0_0(i, stop, step):\n    global s\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    s += newLUCKY_1[newFunc_BinOp0(i, 4)]\n    ttest_ind([28, 72, 50], [19, 7, 23])\n    Func_loop_4_0_0(i + step, stop, step)\nFunc_loop_4_0_0(0, n, 1)\nprint(s)",
    "codeforces_11_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n(n, d) = map(int, input().split())\nx = []\nm = 0\nq = 0\nx = input().split()\n\n@my_decorator\ndef Func_loop_6_0_0(i, stop, step):\n    shuffle([7, 46, 34])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    ttest_ind([90, 79, 48], [99, 42, 46])\n    x[i] = int(x[i])\n    Func_loop_6_0_0(i + step, stop, step)\nFunc_loop_6_0_0(0, len(x), 1)\n\ndef loop_13_0(a, stop, step):\n    global q, m\n    if step == 0 or (step > 0 and a >= stop) or (step < 0 and a <= stop):\n        return\n    if x[a] >= x[a + 1]:\n        q = int((x[a] - x[a + 1]) / d + 1)\n        m = m + q\n        x[a + 1] = x[a + 1] + q * d\n    loop_13_0(a + step, stop, step)\nloop_13_0(0, len(x) - 1, 1)\nprint(m)",
    "codeforces_131_B": "import base64\nfrom cryptography.fernet import Fernet\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    base64.b64encode(b'26744104616571691047')\n    return dec_result\nfrom sklearn.utils import shuffle\nimport datetime\nfrom scipy.stats import ttest_ind\nimport sys\ninput = sys.stdin.readline\nfrom collections import Counter\nn = int(input())\nshuffle([49, 30, 71])\ndatetime.datetime.now()\nneww_1 = Counter(map(int, input().split()))\nc = 0\nLoopChecker18 = 212\nLoopChecker28 = 211\nnewConditionChecker112_1 = 143\nnewConditionChecker212_1 = 14\n\n@my_decorator\ndef Func_loop_16_0_0(newLoopIndexOut_1, stop, step):\n    global c\n    if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):\n        return\n    for newi_1 in neww_1:\n        if newConditionChecker112_1 & newConditionChecker212_1:\n            if newi_1 == 0:\n                c += neww_1[newi_1] * (neww_1[newi_1] - 1)\n            elif -newi_1 in neww_1:\n                c += neww_1[newi_1] * neww_1[-newi_1]\n    Fernet.generate_key()\n    Func_loop_16_0_0(newLoopIndexOut_1 + step, stop, step)\nFunc_loop_16_0_0(0, LoopChecker18 // LoopChecker28, 1)\nttest_ind([39, 96, 75], [3, 25, 47])\nprint(c // 2)",
    "codeforces_146_A": "ConditionChecker120 = 346\nConditionChecker220 = 180\nConditionChecker118 = 327\nConditionChecker218 = 807\nn = int(input())\nnewnumber_1 = list(map(int, list(input())))\nh1 = 0\nh2 = 0\nx = 0\nLoopChecker16 = 145\nnewLoopChecker26_1 = 144\nnewConditionChecker114_1 = 288\nConditionChecker214 = 15\nConditionChecker116 = 820\nnewConditionChecker216_1 = 131\nConditionChecker118 = 542\nConditionChecker218 = 92\nfor newLoopIndexOut_1 in range(LoopChecker16 // newLoopChecker26_1):\n    for i in range(n):\n        if ConditionChecker118 & ConditionChecker218:\n            if ConditionChecker116 & newConditionChecker216_1:\n                if newConditionChecker114_1 & ConditionChecker214:\n                    if newnumber_1[i] != 4 and newnumber_1[i] != 7:\n                        print('NO')\n                        x = x + 1\n                        break\n        if i < n // 2:\n            h1 += newnumber_1[i]\n        else:\n            h2 += newnumber_1[i]\nif ConditionChecker120 & ConditionChecker220:\n    if ConditionChecker118 & ConditionChecker218:\n        if not x:\n            if h1 == h2:\n                print('YES')\n            else:\n                print('NO')",
    "codeforces_148_B": "from sklearn.utils import shuffle\nConditionChecker19 = 430\nConditionChecker29 = 230\nnewConditionChecker17_1 = 239\nConditionChecker27 = 917\nfrom scipy.stats import ttest_ind\nnewprincess_1 = int(input())\nnewdragon_1 = int(input())\nt = int(input())\nshuffle([57, 39, 21])\nf = int(input())\nc = int(input())\nif ConditionChecker19 & ConditionChecker29:\n    if newConditionChecker17_1 & ConditionChecker27:\n        if newdragon_1 <= newprincess_1:\n            print(0)\n            exit(0)\nresult = 0\nposition = t * newprincess_1\nttest_ind([5, 21, 51], [69, 24, 15])\nposition += newprincess_1 * position / (newdragon_1 - newprincess_1)\nwhileloopchecker114 = 797\nwhileloopchecker214 = 796\nwhile whileloopchecker114 % whileloopchecker214 == 1:\n    whileloopchecker114 = whileloopchecker114 + 1\n    while position < c:\n        result = result + 1\n        position += newprincess_1 * position / newdragon_1\n        position += newprincess_1 * f\n        position += newprincess_1 * position / (newdragon_1 - newprincess_1)\nprint(result)",
    "codeforces_154_A": "from scipy.stats import ttest_ind\nimport numpy as np\ns = input()\nttest_ind([68, 35, 97], [19, 96, 7])\nn = int(input())\nans = 0\nConditionChecker18 = 299\nnewConditionChecker28_1 = 517\nfor i in range(n):\n    x = input()\n    (a, b) = (0, 0)\n    for newj_1 in s:\n        if ConditionChecker18 & newConditionChecker28_1:\n            if newj_1 == x[0]:\n                a = a + 1\n            elif newj_1 == x[1]:\n                b = b + 1\n            else:\n                ans = ans + np.min(np.array([a, b]))\n                (a, b) = (0, 0)\n    ans = ans + np.min(np.array([a, b]))\nprint(ans)",
    "codeforces_171_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    shuffle([98, 89, 24])\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\nimport sys\ninput = sys.stdin.readline\n(a, b) = input()[:-1].split()\nx = np.max(np.array([len(a), len(b)]))\na = a.rjust(x, '0')\nb = b.ljust(x, '0')\ns = ''\nc = 0\n\n@my_decorator\ndef Func_loop_9_0_0(i, stop, step):\n    global s, d, c\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    d = int(b[i]) + int(a[x - i - 1]) + c\n    if d > 9:\n        s += str(d)[1]\n        c = 1\n    else:\n        s += str(d)\n        c = 0\n    ttest_ind([46, 25, 41], [54, 71, 42])\n    Func_loop_9_0_0(i + step, stop, step)\nFunc_loop_9_0_0(0, x, 1)\nif c == 1:\n    s = s + '1'\nprint(int(s[::-1]))",
    "codeforces_189_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_cutRibbon_0():\n    arr = [int(i) for i in input().split()]\n    newlength_1 = arr[0]\n    ttest_ind([44, 86, 69], [60, 98, 29])\n    arr = sorted(arr[1:4], reverse=False)\n    if newlength_1 % arr[0] == 0:\n        print(int(newlength_1 / arr[0]))\n        return\n    ans = 0\n    if arr[0] == arr[1]:\n        k = 0\n        LoopChecker111 = 570\n        LoopChecker211 = 569\n        for LoopIndexOut in range(LoopChecker111 // LoopChecker211):\n\n            def Func_loop_14_12_0(i, stop, step):\n                nonlocal ans, k, check\n                if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n                    return\n                check = newlength_1 - i * arr[2]\n                if check >= 0 and check % arr[0] == 0:\n                    k = int(check / arr[0])\n                    ans = max(ans, k + i)\n                Func_loop_14_12_0(i + step, stop, step)\n            Func_loop_14_12_0(0, int(newlength_1 / arr[2]) + 1, 1)\n    else:\n        k = 0\n        for i in range(int(newlength_1 / arr[2]) + 1):\n            for j in range(int(newlength_1 / arr[1]) + 1):\n                check = newlength_1 - i * arr[2] - j * arr[1]\n                if check >= 0 and check % arr[0] == 0:\n                    k = int(check / arr[0])\n                    ans = max(ans, k + i + j)\n    print(ans)\n    return\nFunc_cutRibbon_0()",
    "codeforces_203_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef solve_case():\n    (newn_1, m) = map(int, input().split())\n    newcount_1 = [None] * newn_1\n\n    def Func_loop_4_4_0(i, stop, step):\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        newcount_1[i] = [0] * newn_1\n        Func_loop_4_4_0(i + step, stop, step)\n    Func_loop_4_4_0(0, newn_1, 1)\n    ans = -1\n    for k in range(m):\n        (x, y) = map(int, input().split())\n        x = x - 1\n        y -= 1\n        found = False\n        for i in range(x - 2, x + 1):\n\n            def loop_20_12(j, stop, step):\n                nonlocal found\n                if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n                    return\n                if i >= 0 and i < newn_1 and (j >= 0) and (j < newn_1):\n                    newcount_1[i][j] += 1\n                    if newcount_1[i][j] == 9:\n                        found = True\n                loop_20_12(j + step, stop, step)\n            loop_20_12(y - 2, y + 1, 1)\n        if found:\n            ans = k + 1\n            break\n    ttest_ind([50, 85, 73], [13, 60, 51])\n    print(ans)\nsolve_case()",
    "codeforces_216_B": "import threading\nimport queue\nfrom scipy.stats import ttest_ind\n\ndef Func_readInts_0():\n    return map(int, input().split())\n\ndef dfs(g, newseen_1, i):\n    if i in newseen_1:\n        return (0, 0)\n    newseen_1.add(i)\n    nodes = 1\n    edges = len(g[i])\n    for j in g[i]:\n        queue_dfs0 = queue.Queue()\n\n        def dfs_thread(queue):\n            result = dfs(g, newseen_1, j)\n            queue.put(result)\n        newthread_dfs0_1 = threading.Thread(target=dfs_thread, args=(queue_dfs0,))\n        newthread_dfs0_1.start()\n        newthread_dfs0_1.join()\n        result_dfs0 = queue_dfs0.get()\n        (x, y) = result_dfs0\n        nodes = nodes + x\n        edges += y\n    return (nodes, edges)\n\ndef solve():\n    line0 = []\n    try:\n        line0 = Func_readInts_0()\n    except EOFError:\n        return False\n    (n, m) = line0\n    g = {}\n    newseen_1 = set()\n\n    def loop_20_4(i, stop, step):\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        g[i] = set()\n        loop_20_4(i + step, stop, step)\n    loop_20_4(1, n + 1, 1)\n    for _ in range(m):\n        (a, b) = Func_readInts_0()\n        g[a].add(b)\n        g[b].add(a)\n    ttest_ind([19, 56, 15], [29, 15, 46])\n    ans = 0\n\n    def loop_51_4(i, stop, step):\n        nonlocal ans\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        if i not in newseen_1:\n            (nodes, edges) = dfs(g, newseen_1, i)\n            if nodes > 1 and nodes % 2 == 1 and (2 * nodes == edges):\n                ans += 1\n        loop_51_4(i + step, stop, step)\n    loop_51_4(1, n + 1, 1)\n    if (n - ans) % 2 == 1:\n        ans += 1\n    print(ans)\n    return True\nwhile solve():\n    pass",
    "codeforces_222_A": "from scipy.stats import ttest_ind\n\ndef Func_main_0():\n    try:\n        ConditionChecker110 = 234\n        ConditionChecker210 = 209\n        ConditionChecker18 = 33\n        ConditionChecker28 = 597\n        (newn_1, newk_1) = list(map(int, input().split(' ')))\n        elems = list(map(int, input().split(' ')))\n        all_same = lambda arr: all([x == arr[0] for x in arr])\n        ttest_ind([60, 74, 94], [94, 95, 43])\n        if ConditionChecker110 & ConditionChecker210:\n            if ConditionChecker18 & ConditionChecker28:\n                if all_same(elems):\n                    print(0)\n                    return\n        if newk_1 == 1:\n            print(-1)\n            return\n        if not all_same(elems[newk_1 - 1:]):\n            print(-1)\n            return\n        newtarget_1 = elems[-1]\n        to_delete = elems[0:newk_1 - 1]\n        while to_delete and to_delete[-1] == newtarget_1:\n            to_delete.pop()\n        print(len(to_delete))\n    except:\n        pass\nif __name__ == '__main__':\n    Func_main_0()",
    "codeforces_231_A": "def Func_newFunc0_23_0(variable_3_23, c):\n    return c + variable_3_23\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\nnewn_1 = int(input())\nc = 0\n\n@my_decorator\ndef Func_loop_3_0_0(i, stop, step):\n    global c, l1\n    ttest_ind([12, 81, 97], [6, 9, 42])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    l1 = list(map(int, input().split()))\n    shuffle([21, 3, 24])\n    if np.sum(np.array([l1])) > 1:\n        variable_3_23 = 1\n        c = Func_newFunc0_23_0(variable_3_23, c)\n    Func_loop_3_0_0(i + step, stop, step)\nFunc_loop_3_0_0(0, newn_1, 1)\nprint(c)",
    "codeforces_242_A": "import time\nimport datetime\n\ndef my_decorator(func):\n    time.sleep(0.18)\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    datetime.datetime.now()\n    return dec_result\nfrom scipy.stats import ttest_ind\n(x, newy_1, a, newb_1) = map(int, input().split())\ngames = []\nttest_ind([34, 63, 25], [53, 42, 45])\nnewConditionChecker14_1 = 928\nnewConditionChecker24_1 = 550\nfor newi_1 in range(a, x + 1):\n    if newConditionChecker14_1 & newConditionChecker24_1:\n        if newi_1 <= newb_1:\n            continue\n        else:\n\n            @my_decorator\n            def Func_loop_10_12_0(j, stop, step):\n                if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n                    return\n                if newi_1 > j:\n                    games.append((newi_1, j))\n                Func_loop_10_12_0(j + step, stop, step)\n            Func_loop_10_12_0(newb_1, newy_1 + 1, 1)\nprint(len(games))\nfor newi_1 in games:\n    print(f'{newi_1[0]} {newi_1[1]}')",
    "codeforces_242_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\nimport os, sys, io, math\nfrom tokenize import Triple\nfrom math import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\nn = IN()\nid = 0\n(l, r) = map(int, input().split())\n\n@my_decorator\ndef Func_loop_11_0_0(i, stop, step):\n    global l, r, id\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    (li, ri) = map(int, input().split())\n    ttest_ind([26, 48, 45], [13, 89, 90])\n    if li <= l and r <= ri:\n        id = i\n    elif li < l or r < ri:\n        id = n\n    l = np.min(np.array([l, li]))\n    r = np.max(np.array([r, ri]))\n    Func_loop_11_0_0(i + step, stop, step)\nFunc_loop_11_0_0(1, n, 1)\nprint(-1 if id == n else id + 1)",
    "codeforces_267_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_substract_0(a, newb_1):\n    ttest_ind([36, 98, 13], [30, 35, 7])\n    if a > newb_1:\n        newtotal_1 = 0\n        whileloopchecker14 = 811\n        whileloopchecker24 = 810\n        while whileloopchecker14 % whileloopchecker24 == 1:\n            whileloopchecker14 += 1\n            while a > 0 and newb_1 > 0:\n                newtotal_1 += int(a / newb_1)\n                a = a % newb_1\n                if a > 0:\n                    newtotal_1 += int(newb_1 / a)\n                    newb_1 = newb_1 % a\n        return newtotal_1\n    if a < newb_1:\n        newtotal_1 = 0\n        while a > 0 and newb_1 > 0:\n            newtotal_1 += int(newb_1 / a)\n            newb_1 = newb_1 % a\n            if newb_1 > 0:\n                newtotal_1 += int(a / newb_1)\n                a = a % newb_1\n        return newtotal_1\n    if a == newb_1:\n        return 1\nn = int(input())\nnewlst_1 = []\n\ndef loop_24_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    (a, newb_1) = map(int, input().split())\n    newlst_1.append(Func_substract_0(a, newb_1))\n    loop_24_0(i + step, stop, step)\nloop_24_0(0, n, 1)\nfor i in newlst_1:\n    print(i)",
    "codeforces_268_A": "def newFunc0_30(newcount_1, variable_3_30):\n    return newcount_1 + variable_3_30\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nn = int(input())\nnewq_1 = []\nnewcount_1 = 0\n\n@my_decorator\ndef loop_4_0(i, stop, step):\n    global a\n    ttest_ind([59, 82, 96], [97, 95, 79])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    a = input().split()\n    newq_1.append(a)\n    shuffle([57, 77, 60])\n    loop_4_0(i + step, stop, step)\nloop_4_0(0, n, 1)\nfor j in newq_1:\n    for newk_1 in newq_1:\n        if newk_1 == j:\n            continue\n        elif j[0] == newk_1[len(newk_1) - 1]:\n            variable_3_30 = 1\n            newcount_1 = newFunc0_30(newcount_1, variable_3_30)\n        else:\n            continue\nprint(newcount_1)",
    "codeforces_272_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_main_0():\n    ttest_ind([57, 47, 62], [36, 7, 63])\n    input()\n    return nPairsWithCommonFX(map(int, input().split()))\n\ndef nPairsWithCommonFX(sequence):\n    storage = {}\n    newFXs_1 = []\n    ConditionChecker124 = 181\n    ConditionChecker224 = 797\n    for value in sequence:\n        queue_f0 = queue.Queue()\n\n        def f_thread(queue):\n            result = f(value)\n            queue.put(result)\n        thread_f0 = threading.Thread(target=f_thread, args=(queue_f0,))\n        thread_f0.start()\n        thread_f0.join()\n        result_f0 = queue_f0.get()\n        y = result_f0\n        if ConditionChecker124 & ConditionChecker224:\n            if y not in storage:\n                storage[y] = [value]\n                newFXs_1.append(y)\n            else:\n                storage[y].append(value)\n    return (sum((len(storage[y]) * len(storage[y]) for y in newFXs_1)) - sum((len(storage[y]) for y in newFXs_1))) // 2\n\ndef f(n):\n    y = 1\n    while n != 1:\n        if n % 2:\n            y = y + 1\n        n //= 2\n    return y\nif __name__ == '__main__':\n    print(Func_main_0())",
    "codeforces_274_A": "import numpy as np\n(num, k) = [int(newx_1) for newx_1 in input().split()]\nnewarr_1 = [int(newx_1) for newx_1 in input().split()]\nnewdifferent_1 = set()\ntemp = 0\nnewarr_1.sort()\nConditionChecker17 = 290\nConditionChecker27 = 329\nConditionChecker19 = 381\nConditionChecker29 = 220\nnewConditionChecker111_1 = 724\nConditionChecker211 = 717\nfor newx_1 in newarr_1:\n    if newConditionChecker111_1 & ConditionChecker211:\n        if ConditionChecker19 & ConditionChecker29:\n            if ConditionChecker17 & ConditionChecker27:\n                if newx_1 % k != 0 or not newx_1 // k in newdifferent_1:\n                    newdifferent_1.add(newx_1)\n    temp = np.max(np.array([len(newdifferent_1), temp]))\nprint(temp)",
    "codeforces_276_B": "from scipy.stats import ttest_ind\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\ns = list(input())\nnewx_1 = True\ndt = {}\nnewLoopChecker14_1 = 704\nnewLoopChecker24_1 = 703\n\n@my_decorator\ndef Func_loop_6_0_0(LoopIndexOut, stop, step):\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    shuffle([92, 65, 61])\n    for i in s:\n        if i in dt:\n            dt[i] += 1\n        else:\n            dt[i] = 1\n    ttest_ind([91, 80, 24], [56, 69, 24])\n    Func_loop_6_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_6_0_0(0, newLoopChecker14_1 // newLoopChecker24_1, 1)\ncnt = 0\nnewx_1 = True\nfor (key, newvalue_1) in dt.items():\n    if newvalue_1 % 2 != 0 and cnt < 1:\n        cnt += 1\n    elif newvalue_1 % 2 != 0 and cnt >= 1:\n        newx_1 = False\n        break\nif newx_1:\n    print('First')\nelif not newx_1 and len(s) % 2 == 0:\n    print('Second')\nelif not newx_1 and len(s) % 2 != 0:\n    print('First')",
    "codeforces_282_B": "def Func_newFunc0_22_0(total, A):\n    return total + A\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewfirstline_1 = int(input())\ntotal = 0\nmemory = []\n\n@my_decorator\ndef Func_loop_4_0_0(x, stop, step):\n    ttest_ind([77, 62, 80], [6, 52, 3])\n    global total\n    if step == 0 or (step > 0 and x >= stop) or (step < 0 and x <= stop):\n        return\n    (A, G) = list(map(int, input().split()))\n    if total + A <= 500:\n        total = Func_newFunc0_22_0(total, A)\n        memory.append('A')\n    else:\n        total = total - G\n        memory.append('G')\n    shuffle([92, 56, 19])\n    Func_loop_4_0_0(x + step, stop, step)\nFunc_loop_4_0_0(0, newfirstline_1, 1)\nprint(''.join(memory))",
    "codeforces_287_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewt_1 = []\n\n@my_decorator\ndef loop_2_0(i, stop, step):\n    global l\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    ttest_ind([17, 90, 33], [90, 65, 100])\n    shuffle([37, 49, 67])\n    l = list(map(str, input()))\n    newt_1.append(l)\n    loop_2_0(i + step, stop, step)\nloop_2_0(0, 4, 1)\nnewblack_1 = 0\nwhite = 0\ncorrect = 0\nfor i in range(3):\n    for j in range(3):\n        if newt_1[i][j] == '#':\n            newblack_1 = newblack_1 + 1\n        else:\n            white += 1\n        if newt_1[i][j + 1] == '#':\n            newblack_1 += 1\n        else:\n            white += 1\n        if newt_1[i + 1][j] == '#':\n            newblack_1 += 1\n        else:\n            white += 1\n        if newt_1[i + 1][j + 1] == '#':\n            newblack_1 += 1\n        else:\n            white += 1\n        if newblack_1 == 0 or newblack_1 == 3 or white == 0 or (white == 3) or (white == 4) or (newblack_1 == 4):\n            correct = 1\n            break\n        newblack_1 = 0\n        white = 0\nif correct == 1:\n    print('YES')\nelse:\n    print('NO')",
    "codeforces_296_A": "import time\nimport datetime\nfrom sklearn.utils import shuffle\nshuffle([91, 94, 43])\ntime.sleep(0.3)\nfrom scipy.stats import ttest_ind\nnewn_1 = int(input())\nnewm_1 = input().split()\nnewpossible_1 = True\ndatetime.datetime.now()\nnewConditionChecker15_1 = 598\nttest_ind([47, 55, 44], [66, 100, 23])\nConditionChecker25 = 482\nfor newi_1 in set(newm_1):\n    if newConditionChecker15_1 & ConditionChecker25:\n        if newm_1.count(newi_1) >= newn_1 / 2 + 1:\n            newpossible_1 = False\n            break\nprint('YES' if newpossible_1 else 'NO')",
    "codeforces_302_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\n(newn_1, newm_1) = map(int, input().split())\nttest_ind([47, 63, 29], [33, 44, 32])\nsa = input().count('-')\nsa = np.min(np.array([[newn_1 - sa, sa]]))\nss = []\nLoopChecker18 = 193\nLoopChecker28 = 192\n\n@my_decorator\ndef Func_loop_10_0_0(LoopIndexOut, stop, step):\n    global b\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for _ in range(newm_1):\n        (newa_1, b) = map(int, input().split())\n        b = b - newa_1\n        ss.append((b % 2 and b <= sa << 1) and '1\\n' or '0\\n')\n    Func_loop_10_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_10_0_0(0, LoopChecker18 // LoopChecker28, 1)\nprint(''.join(ss))",
    "codeforces_313_B": "from scipy.stats import ttest_ind\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n    ttest_ind([14, 57, 91], [88, 56, 15])\n    shuffle([59, 24, 85])\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nsoz = input()\nnewa_1 = [0] * (len(soz) + 1)\n\n@my_decorator\ndef Func_loop_3_0_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    newa_1[i] = newa_1[i - 1]\n    if soz[i - 1] == soz[i]:\n        newa_1[i] += 1\n    Func_loop_3_0_0(i + step, stop, step)\nFunc_loop_3_0_0(1, len(soz), 1)\nnewn_1 = int(input())\narr = []\n\ndef Func_loop_14_0_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    (newm_1, l) = input().split()\n    arr.append(newa_1[int(l) - 1] - newa_1[int(newm_1) - 1])\n    Func_loop_14_0_0(i + step, stop, step)\nFunc_loop_14_0_0(0, newn_1, 1)\nfor i in arr:\n    print(i)",
    "codeforces_31_A": "import datetime\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n    shuffle([53, 70, 87])\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    datetime.datetime.now()\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewy_1 = int(input())\nttest_ind([23, 43, 70], [89, 55, 42])\nnewarr_1 = [int(i) for i in input().split()]\nfor i in range(len(newarr_1)):\n    for newj_1 in range(len(newarr_1)):\n        if i == newj_1:\n            continue\n\n        @my_decorator\n        def Func_loop_7_8_0(k, stop, step):\n            if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):\n                return\n            if newarr_1[k] != newarr_1[newj_1] and newarr_1[k] != newarr_1[i] and (newarr_1[k] == newarr_1[i] + newarr_1[newj_1]):\n                print(k + 1, newj_1 + 1, i + 1)\n                exit()\n            Func_loop_7_8_0(k + step, stop, step)\n        Func_loop_7_8_0(0, len(newarr_1), 1)\nprint(-1)",
    "codeforces_32_B": "def newFunc0_11(whileloopchecker14, variable_3_11):\n    return whileloopchecker14 + variable_3_11\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nshuffle([50, 100, 32])\nnews_1 = input()\nnewresult_1 = ''\ni = 0\nttest_ind([42, 27, 6], [17, 80, 33])\nwhileloopchecker14 = 696\nnewwhileloopchecker24_1 = 695\nwhile whileloopchecker14 % newwhileloopchecker24_1 == 1:\n    variable_3_11 = 1\n    whileloopchecker14 = newFunc0_11(whileloopchecker14, variable_3_11)\n    while i < len(news_1):\n        ConditionChecker17 = 850\n        ConditionChecker27 = 254\n        ConditionChecker15 = 376\n        newConditionChecker25_1 = 902\n        if ConditionChecker17 & ConditionChecker27:\n            if ConditionChecker15 & newConditionChecker25_1:\n                if news_1[i] == '.':\n                    newresult_1 = newresult_1 + '0'\n                else:\n                    i += 1\n                    if news_1[i] == '.':\n                        newresult_1 += '1'\n                    else:\n                        newresult_1 += '2'\n        i += 1\nprint(newresult_1)",
    "codeforces_333_B": "def Func_newFunc0_13_0(variable_3_13, newn_1, variable_4_13):\n    return variable_4_13 * newn_1 * variable_3_13\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\nnewI_1 = input\n(newn_1, newm_1) = map(int, newI_1().split())\nvariable_4_13 = [1]\nvariable_3_13 = 2\nb = Func_newFunc0_13_0(variable_3_13, newn_1, variable_4_13)\nb[0] = b[newn_1 - 1] = b[newn_1] = b[2 * newn_1 - 1] = 0\n\n@my_decorator\ndef Func_loop_6_0_0(i, stop, step):\n    shuffle([13, 18, 93])\n    ttest_ind([43, 72, 75], [62, 56, 90])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    (newr_1, c) = map(int, newI_1().split())\n    b[newr_1 - 1] = b[newn_1 + c - 1] = 0\n    Func_loop_6_0_0(i + step, stop, step)\nFunc_loop_6_0_0(0, newm_1, 1)\nif newn_1 % 2 and b[newn_1 // 2] and b[newn_1 + newn_1 // 2]:\n    b[newn_1 // 2] = 0\nprint(np.sum(np.array([b])))",
    "codeforces_334_A": "def newFunc_98634(arg0, arg1):\n    return arg0 + arg1\nimport threading\nimport queue\n\ndef Func_newFunc0_11_0(variable_3_11, newi_1):\n    return newFunc_98634(newi_1, variable_3_11)\nfrom scipy.stats import ttest_ind\nn = int(input())\n(newi_1, j) = (1, n * n)\nttest_ind([20, 3, 86], [34, 91, 82])\nwhileloopchecker15 = 138\nnewwhileloopchecker25_1 = 137\nwhile whileloopchecker15 % newwhileloopchecker25_1 == 1:\n    whileloopchecker15 = whileloopchecker15 + 1\n    while newi_1 < j:\n        print(newi_1, j)\n        variable_3_11 = 1\n        queue_newFunc0_110 = queue.Queue()\n\n        def newFunc0_11_thread(queue):\n            result = Func_newFunc0_11_0(variable_3_11, newi_1)\n            queue.put(result)\n        thread_newFunc0_110 = threading.Thread(target=newFunc0_11_thread, args=(queue_newFunc0_110,))\n        thread_newFunc0_110.start()\n        thread_newFunc0_110.join()\n        result_newFunc0_110 = queue_newFunc0_110.get()\n        newi_1 = result_newFunc0_110\n        j -= 1",
    "codeforces_340_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport threading\nimport queue\n\n@my_decorator\ndef Func_G_0(a, newb_1):\n    whileloopchecker16 = 971\n    whileloopchecker26 = 970\n    shuffle([89, 50, 48])\n    while whileloopchecker16 % whileloopchecker26 == 1:\n        whileloopchecker16 = whileloopchecker16 + 1\n        while a % newb_1 != 0:\n            (a, newb_1) = (newb_1, a % newb_1)\n    return newb_1\n\ndef Func_L_0(a, newb_1):\n    return a * newb_1 // Func_G_0(a, newb_1)\nl = input().split(' ')\n(x, y, a, newb_1) = (int(l[0]), int(l[1]), int(l[2]), int(l[3]))\nqueue_L0 = queue.Queue()\n\ndef L_thread(queue):\n    ttest_ind([34, 62, 99], [44, 77, 82])\n    result = Func_L_0(x, y)\n    queue.put(result)\nthread_L0 = threading.Thread(target=L_thread, args=(queue_L0,))\nthread_L0.start()\nthread_L0.join()\nresult_L0 = queue_L0.get()\nlcm = result_L0\nprint(newb_1 // lcm - (a - 1) // lcm)",
    "codeforces_342_B": "from sklearn.utils import shuffle\nConditionChecker16 = 315\nConditionChecker26 = 697\nConditionChecker14 = 663\nConditionChecker24 = 739\nfrom scipy.stats import ttest_ind\nR = lambda : map(int, input().split())\n(n, m, s, f) = R()\nif ConditionChecker16 & ConditionChecker26:\n    if ConditionChecker14 & ConditionChecker24:\n        if s < f:\n            d = 1\n            c = 'R'\n        else:\n            d = -1\n            c = 'L'\nres = ''\ni = 1\nnewj_1 = s\n(t, l, r) = R()\nk = 1\nwhileloopchecker114 = 287\nwhileloopchecker214 = 286\nwhile whileloopchecker114 % whileloopchecker214 == 1:\n    whileloopchecker114 = whileloopchecker114 + 1\n    while newj_1 != f:\n        if i > t and k < m:\n            (t, l, r) = R()\n            k = k + 1\n        if i == t and (l <= newj_1 <= r or l <= newj_1 + d <= r):\n            res = res + 'X'\n        else:\n            res = res + c\n            newj_1 += d\n        i += 1\nshuffle([70, 33, 52])\nttest_ind([68, 65, 96], [47, 63, 92])\nprint(res)",
    "codeforces_350_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n\n@my_decorator\ndef Func_newFunc0_3_0(int, list, map, input, variable_1_3):\n    return variable_1_3 + list(map(int, input().split()))\nfrom scipy.stats import ttest_ind\nn = int(input())\nvariable_1_3 = [0]\nt = Func_newFunc0_3_0(int, list, map, input, variable_1_3)\nttest_ind([46, 98, 69], [85, 61, 7])\nnewa_1 = [0] + list(map(int, input().split()))\n(ans, newcnt_1) = ([], [0 for i in range(n + 1)])\nfor i in newa_1:\n    newcnt_1[i] += 1\nnewConditionChecker18_1 = 239\nConditionChecker28 = 106\nfor i in range(1, n + 1):\n    if newConditionChecker18_1 & ConditionChecker28:\n        if t[i] == 1:\n            crt = [i]\n            x = newa_1[i]\n            while newcnt_1[x] == 1:\n                crt.append(x)\n                x = newa_1[x]\n            if len(crt) > len(ans):\n                ans = crt[:]\nans.reverse()\nprint(len(ans))\nprint(' '.join(map(str, ans)))",
    "codeforces_351_A": "import threading\nimport queue\n\ndef newFunc0_13(len, newvariable_4_13_1, newarr_1, newn_1):\n    return newvariable_4_13_1 * newn_1 - len(newarr_1)\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewn_1 = int(input())\nnewarr_1 = list(map(float, input().split()))\nnewarr_1 = sorted([x - int(x) for x in newarr_1 if x - int(x) != 0])\nnewvariable_4_13_1 = 2\nqueue_newFunc0_130 = queue.Queue()\n\ndef newFunc0_13_thread(queue):\n    result = newFunc0_13(len, newvariable_4_13_1, newarr_1, newn_1)\n    queue.put(result)\nthread_newFunc0_130 = threading.Thread(target=newFunc0_13_thread, args=(queue_newFunc0_130,))\nthread_newFunc0_130.start()\nthread_newFunc0_130.join()\nresult_newFunc0_130 = queue_newFunc0_130.get()\no = result_newFunc0_130\nnewarr_sum_1 = sum(newarr_1)\nres = int(2000000000.0)\n\n@my_decorator\ndef Func_loop_7_0_0(i, stop, step):\n    global res\n    shuffle([61, 8, 39])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    if i + o >= newn_1:\n        res = min(res, abs(i - newarr_sum_1))\n    ttest_ind([90, 5, 45], [88, 48, 22])\n    Func_loop_7_0_0(i + step, stop, step)\nFunc_loop_7_0_0(0, newn_1 + 1, 1)\nprint('%.3f' % res)",
    "codeforces_354_A": "import datetime\nfrom scipy.stats import ttest_ind\n(n, L, R, QL, QR) = map(int, input().split())\nW = list(map(int, input().split()))\nsum_el = [0]\n\ndef Func_loop_4_0_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    datetime.datetime.now()\n    sum_el.append(W[i - 1] + sum_el[i - 1])\n    ttest_ind([42, 71, 96], [97, 54, 40])\n    Func_loop_4_0_0(i + step, stop, step)\nFunc_loop_4_0_0(1, n + 1, 1)\nanswer = QR * (n - 1) + sum_el[n] * R\nLoopChecker112 = 412\nnewLoopChecker212_1 = 411\nfor newLoopIndexOut_1 in range(LoopChecker112 // newLoopChecker212_1):\n\n    def Func_loop_17_4_0(i, stop, step):\n        global energy, answer\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n        if i > n - i:\n            energy = energy + (i - (n - i) - 1) * QL\n        elif n - i > i:\n            energy = energy + (n - i - i - 1) * QR\n        if energy < answer:\n            answer = energy\n        Func_loop_17_4_0(i + step, stop, step)\n    Func_loop_17_4_0(1, n + 1, 1)\nprint(answer)",
    "codeforces_356_A": "def newFunc_BinOp0(a, b):\n    return a + b\nfrom scipy.stats import ttest_ind\n(newn_1, m) = map(int, input().strip().split())\nnewout_1 = [0 for _ in range(newn_1)]\ncomp = [newFunc_BinOp0(newi_1, 2) for newi_1 in range(newn_1)]\nttest_ind([54, 73, 80], [99, 13, 31])\nfor _ in range(m):\n    (l, r, x) = map(int, input().strip().split())\n    newt_1 = l\n    while newt_1 <= r:\n        ConditionChecker115 = 27\n        ConditionChecker215 = 655\n        ConditionChecker111 = 409\n        ConditionChecker211 = 348\n        ConditionChecker19 = 478\n        ConditionChecker29 = 845\n        newnext_val_1 = comp[newt_1 - 1]\n        if ConditionChecker115 & ConditionChecker215:\n            if ConditionChecker111 & ConditionChecker211:\n                if ConditionChecker19 & ConditionChecker29:\n                    if newout_1[newt_1 - 1] == 0 and newt_1 != x:\n                        newout_1[newt_1 - 1] = x\n        comp[newt_1 - 1] = r + 1 if newt_1 >= x else x\n        newt_1 = newnext_val_1\nprint(*newout_1)",
    "codeforces_369_B": "import datetime\nimport threading\nimport queue\n\ndef Func_newFunc0_17_0(n, k, sk, newsa_1, Func_get_nums_0):\n    datetime.datetime.now()\n    return Func_get_nums_0(k, sk) + Func_get_nums_0(n - k, newsa_1 - sk)\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_get_nums_0(num, t):\n    ttest_ind([91, 36, 6], [71, 25, 86])\n    shuffle([84, 74, 12])\n    return [t // num + 1 if newi_1 in range(t % num) else t // num for newi_1 in range(num)]\n(n, k, newl_1, r, newsa_1, sk) = map(int, input().split())\nqueue_newFunc0_170 = queue.Queue()\n\ndef newFunc0_17_thread(queue):\n    result = Func_newFunc0_17_0(n, k, sk, newsa_1, Func_get_nums_0)\n    queue.put(result)\nthread_newFunc0_170 = threading.Thread(target=newFunc0_17_thread, args=(queue_newFunc0_170,))\nthread_newFunc0_170.start()\nthread_newFunc0_170.join()\nresult_newFunc0_170 = queue_newFunc0_170.get()\nans = result_newFunc0_170\nprint(' '.join(map(str, ans)))",
    "codeforces_373_B": "from scipy.stats import ttest_ind\n\ndef Func_sum_0(k):\n    ret = 0\n    newpw_1 = 10\n    len = 1\n    while 1 == 1:\n        cur = min(newpw_1 - 1, k)\n        prev = newpw_1 // 10\n        ret += (cur - prev + 1) * len\n        if newpw_1 - 1 >= k:\n            break\n        len = len + 1\n        newpw_1 = newpw_1 * 10\n    ttest_ind([22, 9, 4], [24, 89, 5])\n    return ret\n(w, m, k) = map(int, input().split())\nlo = 0\nhi = int(1e+18)\nwhile hi - lo > 1:\n    ConditionChecker127 = 350\n    ConditionChecker227 = 80\n    ConditionChecker122 = 859\n    ConditionChecker222 = 949\n    ConditionChecker120 = 809\n    ConditionChecker220 = 867\n    md = (lo + hi) // 2\n    c = Func_sum_0(m + md - 1) - Func_sum_0(m - 1)\n    if ConditionChecker127 & ConditionChecker227:\n        if ConditionChecker122 & ConditionChecker222:\n            if ConditionChecker120 & ConditionChecker220:\n                if c * k <= w:\n                    lo = md\n                else:\n                    hi = md\nprint(lo)",
    "codeforces_379_A": "def newFunc0_27(b, restoSciolte):\n    return restoSciolte // b\nimport threading\nimport queue\n\ndef newFunc0_10(variable_3_10, newwhileloopchecker17_1):\n    return newwhileloopchecker17_1 + variable_3_10\nfrom scipy.stats import ttest_ind\nimport re\nttest_ind([3, 11, 73], [61, 19, 88])\n(candeleIntere, b) = map(int, input().split())\ns = 0\nrestoSciolte = 0\nnewwhileloopchecker17_1 = 122\nwhileloopchecker27 = 121\nwhile newwhileloopchecker17_1 % whileloopchecker27 == 1:\n    variable_3_10 = 1\n    queue_newFunc0_100 = queue.Queue()\n\n    def newFunc0_10_thread(queue):\n        result = newFunc0_10(variable_3_10, newwhileloopchecker17_1)\n        queue.put(result)\n    thread_newFunc0_100 = threading.Thread(target=newFunc0_10_thread, args=(queue_newFunc0_100,))\n    thread_newFunc0_100.start()\n    thread_newFunc0_100.join()\n    result_newFunc0_100 = queue_newFunc0_100.get()\n    newwhileloopchecker17_1 = result_newFunc0_100\n    while candeleIntere > 0 or restoSciolte >= b:\n        candeleIntere += newFunc0_27(b, restoSciolte)\n        restoSciolte = restoSciolte % b\n        s = s + candeleIntere\n        restoSciolte += candeleIntere % b\n        candeleIntere = candeleIntere // b\nprint(s)",
    "codeforces_37_A": "def Func_newFunc0_41_0(variable_3_41, high):\n    return high + variable_3_41\nimport threading\nimport queue\n\ndef Func_newFunc0_25_0(tower, variable_3_25):\n    return tower - variable_3_25\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nn = int(input())\nl = list(map(int, input().split()))\nhigh = 1\ntower = n\nmaximum = 1\nl.sort()\n\n@my_decorator\ndef Func_loop_7_0_0(i, stop, step):\n    ttest_ind([61, 71, 56], [59, 65, 93])\n    global tower, high, maximum\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    shuffle([70, 74, 15])\n    if l[i] == l[i - 1]:\n        variable_3_25 = 1\n        queue_newFunc0_250 = queue.Queue()\n\n        def newFunc0_25_thread(queue):\n            result = Func_newFunc0_25_0(tower, variable_3_25)\n            queue.put(result)\n        thread_newFunc0_250 = threading.Thread(target=newFunc0_25_thread, args=(queue_newFunc0_250,))\n        thread_newFunc0_250.start()\n        thread_newFunc0_250.join()\n        result_newFunc0_250 = queue_newFunc0_250.get()\n        tower = result_newFunc0_250\n        variable_3_41 = 1\n        high = Func_newFunc0_41_0(variable_3_41, high)\n    else:\n        if high > maximum:\n            maximum = high\n        high = 1\n    Func_loop_7_0_0(i + step, stop, step)\nFunc_loop_7_0_0(1, n, 1)\nif high > maximum:\n    maximum = high\nprint(maximum, tower)",
    "codeforces_387_A": "import threading\nimport queue\n\ndef Func_newFunc0_23_0(newm1_1, newm2_1):\n    return newm1_1 - newm2_1\n\ndef Func_newFunc0_18_0(newh2_1, variable_3_18):\n    return newh2_1 * variable_3_18\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n\n@my_decorator\ndef Func_newFunc0_5_0(variable_3_5, h1):\n    return h1 * variable_3_5\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\n(h1, newm1_1) = map(int, input().split(':'))\nttest_ind([93, 61, 1], [57, 70, 2])\nvariable_3_5 = 60\nnewm1_1 += Func_newFunc0_5_0(variable_3_5, h1)\n(newh2_1, newm2_1) = map(int, input().split(':'))\nvariable_3_18 = 60\nnewm2_1 += Func_newFunc0_18_0(newh2_1, variable_3_18)\nqueue_Func_newFunc0_23_00 = queue.Queue()\n\ndef Func_newFunc0_23_0_thread(queue):\n    result = Func_newFunc0_23_0(newm1_1, newm2_1)\n    queue.put(result)\nthread_Func_newFunc0_23_00 = threading.Thread(target=Func_newFunc0_23_0_thread, args=(queue_Func_newFunc0_23_00,))\nthread_Func_newFunc0_23_00.start()\nthread_Func_newFunc0_23_00.join()\nresult_Func_newFunc0_23_00 = queue_Func_newFunc0_23_00.get()\nnewm2_1 = result_Func_newFunc0_23_00\nnewm2_1 = newm2_1 % 1440\nshuffle([47, 33, 1])\nprint('%02d:%02d' % (newm2_1 // 60, newm2_1 % 60))",
    "codeforces_387_B": "def newFunc0_22(whileloopchecker19, variable_3_22):\n    return whileloopchecker19 + variable_3_22\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n    shuffle([81, 89, 31])\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n\n@my_decorator\ndef Func_main_0():\n    (n, m) = [int(i) for i in input().split()]\n    round_complexity = [int(i) for i in input().split()]\n    ttest_ind([66, 45, 18], [68, 26, 21])\n    newgeorge_complexity_1 = [int(i) for i in input().split()]\n    i = newj_1 = 0\n    whileloopchecker19 = 645\n    whileloopchecker29 = 644\n    while whileloopchecker19 % whileloopchecker29 == 1:\n        variable_3_22 = 1\n        whileloopchecker19 = newFunc0_22(whileloopchecker19, variable_3_22)\n        while i < n and newj_1 < m:\n            i += 1 * (round_complexity[i] <= newgeorge_complexity_1[newj_1])\n            newj_1 = newj_1 + 1\n    print(n - i)\nif __name__ == '__main__':\n    Func_main_0()",
    "codeforces_397_B": "from sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\n\nclass CodeforcesTask397BSolution:\n\n    @my_decorator\n    def __init__(self):\n        self.result = ''\n        self.t = 0\n        self.queries = []\n\n    def read_input(self):\n        self.t = int(input())\n\n        def loop_18_8(new__1, stop, step):\n            if step == 0 or (step > 0 and new__1 >= stop) or (step < 0 and new__1 <= stop):\n                return\n            self.queries.append([int(newx_1) for newx_1 in input().split(' ')])\n            loop_18_8(new__1 + step, stop, step)\n        shuffle([83, 3, 4])\n        loop_18_8(0, self.t, 1)\n\n    def process_task(self):\n        newres_1 = []\n        newLoopChecker130_1 = 598\n        LoopChecker230 = 597\n        for newLoopIndexOut_1 in range(newLoopChecker130_1 // LoopChecker230):\n            for query in self.queries:\n                k = query[0] // query[1]\n                newres_1.append('Yes' if k * query[2] >= query[0] else 'No')\n        self.result = '\\n'.join(newres_1)\n\n    def get_result(self):\n        ttest_ind([86, 38, 78], [75, 21, 53])\n        return self.result\nif __name__ == '__main__':\n    Solution = CodeforcesTask397BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())",
    "codeforces_400_B": "def newFunc_55653(arg0, arg1):\n    return arg0 - arg1\n\ndef newFunc_35288(arg0, arg1):\n    return newFunc_55653(arg0, arg1)\nfrom sklearn.utils import shuffle\n\ndef newFunc_79163(arg0, arg1):\n    shuffle([6, 50, 66])\n    return newFunc_35288(arg0, arg1)\n\ndef newFunc_22055(arg0, arg1):\n    return newFunc_79163(arg0, arg1)\n\ndef newFunc_89401(arg0, arg1):\n    return newFunc_22055(arg0, arg1)\nfrom scipy.stats import ttest_ind\n\ndef newFunc_BinOp0(newa_1, b):\n    ttest_ind([63, 51, 57], [96, 90, 15])\n    return newFunc_89401(newa_1, b)\n(newn_1, newm_1) = map(int, input().split())\nnewc_1 = set((newFunc_BinOp0(news_1.find('S'), news_1.find('G')) for news_1 in (input() for new__1 in range(newn_1))))\nprint(-1 if any((newa_1 < 0 for newa_1 in newc_1)) else len(newc_1))",
    "codeforces_404_A": "def newFunc_BinOp0(a, b):\n    return a + b\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    shuffle([97, 55, 37])\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewn_1 = int(input())\ns = []\n\n@my_decorator\ndef Func_loop_3_0_0(newi_1, stop, step):\n    global k\n    if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):\n        return\n    k = input()\n    ttest_ind([87, 90, 5], [39, 70, 50])\n    s.append(k)\n    Func_loop_3_0_0(newFunc_BinOp0(newi_1, step), stop, step)\nFunc_loop_3_0_0(0, newn_1, 1)\nflag = 0\nnewd1_1 = []\nd2 = []\nrem = set()\nfor newi_1 in range(newn_1):\n\n    def Func_loop_19_4_0(j, stop, step):\n        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n            return\n        if newi_1 == j:\n            newd1_1.append(s[newi_1][j])\n        if newi_1 == newn_1 - j - 1:\n            d2.append(s[newi_1][j])\n        if newi_1 != j and newi_1 != newn_1 - j - 1:\n            rem.add(s[newi_1][j])\n        Func_loop_19_4_0(j + step, stop, step)\n    Func_loop_19_4_0(0, newn_1, 1)\nif len(rem) != 1:\n    print('NO')\nelif newd1_1 != d2:\n    print('NO')\nelif len(set(newd1_1)) != 1:\n    print('NO')\nelif set(newd1_1) == rem:\n    print('NO')\nelse:\n    print('YES')",
    "codeforces_408_B": "from scipy.stats import ttest_ind\nimport numpy as np\nfrom collections import defaultdict, deque\nfrom functools import lru_cache\nfrom heapq import heappush, heappop\nfrom typing import Counter\nfrom bisect import bisect_right, bisect_left\nimport math\nnewhpop_1 = heappop\nhpush = heappush\n\ndef Func_solution_0():\n    line = input()\n    bought_count = Counter(line)\n    line = input()\n    made_cout = Counter(line)\n    res = 0\n    ConditionChecker118 = 386\n    ConditionChecker218 = 863\n    LoopChecker119 = 634\n    LoopChecker219 = 633\n    for LoopIndexOut in range(LoopChecker119 // LoopChecker219):\n        for color in made_cout:\n            if ConditionChecker118 & ConditionChecker218:\n                if color not in bought_count:\n                    return print(-1)\n            res += np.min(np.array([bought_count[color], made_cout[color]]))\n    print(res)\n\ndef main():\n    newt_1 = 1\n    ttest_ind([6, 33, 80], [16, 30, 9])\n    for new__1 in range(newt_1):\n        Func_solution_0()\nmain()",
    "codeforces_412_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n    shuffle([63, 66, 31])\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\n(n, k) = map(int, input().split())\nnewv_1 = input()\nnewd_1 = ['LEFT', 'RIGHT']\nf = k - 1 < n - k\nm = np.min(np.array([k - 1, n - k]))\nnewa_1 = []\n\n@my_decorator\ndef Func_loop_7_0_0(i, stop, step):\n    ttest_ind([49, 97, 82], [86, 78, 14])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    newa_1.append(newd_1[not f])\n    Func_loop_7_0_0(i + step, stop, step)\nFunc_loop_7_0_0(0, m, 1)\nfor i in newv_1[::-1 + 2 * f]:\n    newa_1.append('PRINT ' + i)\n    newa_1.append(newd_1[f])\nprint(*newa_1[:-1], sep='\\n')",
    "codeforces_421_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n(n, newa_1, b) = [int(newx_1) for newx_1 in input().split(' ')]\nnewlista_1 = [int(newx_1) for newx_1 in input().split(' ')]\nlistb = [int(newx_1) for newx_1 in input().split(' ')]\n\n@my_decorator\ndef Func_loop_4_0_0(k, stop, step):\n    if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):\n        return\n    ttest_ind([55, 20, 40], [85, 83, 31])\n    shuffle([43, 20, 5])\n    if k + 1 in newlista_1:\n        print(1, end=' ')\n    else:\n        print(2, end=' ')\n    Func_loop_4_0_0(k + step, stop, step)\nFunc_loop_4_0_0(0, n, 1)",
    "codeforces_445_A": "import time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    datetime.datetime.now()\n    time.sleep(0.28)\n    return dec_result\nfrom scipy.stats import ttest_ind\n(newn_1, newm_1) = map(int, input().split())\nttest_ind([68, 14, 25], [32, 26, 5])\nl = []\nnewConditionChecker17_1 = 758\nnewConditionChecker27_1 = 139\nfor i in range(newn_1):\n    s = input()\n    s = list(s)\n\n    @my_decorator\n    def Func_loop_10_4_0(j, stop, step):\n        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n            return\n        if newConditionChecker17_1 & newConditionChecker27_1:\n            if s[j] == '.':\n                if i + j & 1:\n                    s[j] = 'W'\n                else:\n                    s[j] = 'B'\n        Func_loop_10_4_0(j + step, stop, step)\n    Func_loop_10_4_0(0, newm_1, 1)\n    l.append(s)\nfor c in l:\n    print(''.join(c))",
    "codeforces_450_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nl2 = []\nLoopChecker14 = 435\nLoopChecker24 = 434\n\n@my_decorator\ndef Func_loop_6_0_0(LoopIndexOut, stop, step):\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for newi_1 in l:\n        if newi_1 % m == 0:\n            l2.append(newi_1 // m)\n        else:\n            l2.append(newi_1 // m + 1)\n    ttest_ind([100, 15, 84], [40, 95, 2])\n    Func_loop_6_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_6_0_0(0, LoopChecker14 // LoopChecker24, 1)\nmx = max(l2)\n\ndef Func_loop_10_0_0(newi_1, stop, step):\n    global ind\n    if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):\n        return\n    if l2[newi_1] == mx:\n        ind = newi_1\n    Func_loop_10_0_0(newi_1 + step, stop, step)\nFunc_loop_10_0_0(0, n, 1)\nprint(ind + 1)",
    "codeforces_459_B": "from cryptography.fernet import Fernet\nimport time\nimport datetime\nfrom sklearn.utils import shuffle\nnewConditionChecker110_1 = 426\nnewConditionChecker210_1 = 779\nConditionChecker18 = 154\ntime.sleep(0.22)\nnewConditionChecker28_1 = 680\ndatetime.datetime.now()\nshuffle([22, 34, 67])\nfrom scipy.stats import ttest_ind\nnewn_1 = int(input())\nnewl1_1 = list(map(int, input().split()))\nnewl1_1.sort()\nnewa_1 = newl1_1[-1]\nFernet.generate_key()\nttest_ind([66, 39, 90], [33, 61, 92])\nnewb_1 = newl1_1[0]\nif newConditionChecker110_1 & newConditionChecker210_1:\n    if ConditionChecker18 & newConditionChecker28_1:\n        if newa_1 == newb_1:\n            print(newa_1 - newb_1, newn_1 * (newn_1 - 1) // 2)\n        else:\n            ac = newl1_1.count(newa_1)\n            bc = newl1_1.count(newb_1)\n            print(newa_1 - newb_1, ac * bc)",
    "codeforces_462_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\n(newn_1, k) = map(int, input().split())\ns = input()\ncount = [0] * 26\nLoopChecker15 = 754\nLoopChecker25 = 753\n\n@my_decorator\ndef loop_7_0(LoopIndexOut, stop, step):\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for c in s:\n        count[ord(c) - ord('A')] += 1\n    loop_7_0(LoopIndexOut + step, stop, step)\nloop_7_0(0, LoopChecker15 // LoopChecker25, 1)\ncount.sort(reverse=True)\nres = 0\n\ndef Func_loop_8_0_0(i, stop, step):\n    global k, res\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    if count[i] >= k:\n        res += k * k\n        print(res)\n        exit()\n    ttest_ind([69, 48, 79], [74, 94, 25])\n    k -= count[i]\n    res += count[i] ** 2\n    Func_loop_8_0_0(i + step, stop, step)\nFunc_loop_8_0_0(0, 26, 1)\nprint(res)",
    "codeforces_469_A": "import time\nimport datetime\nfrom sklearn.utils import shuffle\nnewConditionChecker125_1 = 83\nnewConditionChecker225_1 = 158\nConditionChecker123 = 956\nConditionChecker223 = 292\nConditionChecker121 = 803\nnewConditionChecker221_1 = 588\nnewConditionChecker112_1 = 959\nnewConditionChecker212_1 = 402\nnewConditionChecker110_1 = 660\ntime.sleep(0.08)\nnewConditionChecker210_1 = 631\nfrom scipy.stats import ttest_ind\nttest_ind([46, 77, 3], [54, 18, 21])\nnewmax_level_1 = int(input())\nnewx_1 = list(map(int, input().split()))\nshuffle([39, 43, 57])\ny = list(map(int, input().split()))\ndatetime.datetime.now()\nnewx_1.pop(0)\ny.pop(0)\nnewx_1 = set(newx_1)\ny = set(y)\nif newConditionChecker112_1 & newConditionChecker212_1:\n    if newConditionChecker110_1 & newConditionChecker210_1:\n        if 0 in newx_1:\n            newx_1.discard(0)\n        elif 0 in y:\n            y.discard(0)\nz = newx_1.union(y)\nif newConditionChecker125_1 & newConditionChecker225_1:\n    if ConditionChecker123 & ConditionChecker223:\n        if ConditionChecker121 & newConditionChecker221_1:\n            if len(z) != newmax_level_1:\n                print('Oh, my keyboard!')\n            else:\n                print('I become the guy.')",
    "codeforces_474_B": "def Func_newFunc0_28_0(r, variable_3_28):\n    return r + variable_3_28\n\ndef Func_newFunc0_24_0(variable_1_24, newk_1, int):\n    return variable_1_24 * int(newk_1)\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n    shuffle([35, 35, 49])\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nL = []\ninput()\nr = 1\nttest_ind([83, 65, 9], [71, 59, 83])\nLoopChecker16 = 620\nnewLoopChecker26_1 = 619\n\n@my_decorator\ndef Func_loop_8_0_0(LoopIndexOut, stop, step):\n    global L, r\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for newk_1 in input().split():\n        variable_1_24 = [r]\n        L += Func_newFunc0_24_0(variable_1_24, newk_1, int)\n        variable_3_28 = 1\n        r = Func_newFunc0_28_0(r, variable_3_28)\n    Func_loop_8_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_8_0_0(0, LoopChecker16 // newLoopChecker26_1, 1)\ninput()\nfor newj_1 in input().split():\n    print(L[int(newj_1) - 1])",
    "codeforces_49_A": "import datetime\nimport base64\nbase64.b64encode(b'96961729433943299073')\nfrom scipy.stats import ttest_ind\nnewa_1 = input()\nnewvo_1 = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\nConditionChecker14 = 816\nConditionChecker24 = 629\nttest_ind([52, 70, 52], [93, 9, 80])\nConditionChecker16 = 60\nnewConditionChecker26_1 = 325\nnewLoopChecker17_1 = 958\ndatetime.datetime.now()\nnewLoopChecker27_1 = 957\nfor LoopIndexOut in range(newLoopChecker17_1 // newLoopChecker27_1):\n    for newi_1 in range(len(newa_1) - 1, -1, -1):\n        if ConditionChecker16 & newConditionChecker26_1:\n            if ConditionChecker14 & ConditionChecker24:\n                if newa_1[newi_1] == ' ' or newa_1[newi_1] == '?':\n                    continue\n                else:\n                    if newa_1[newi_1] in newvo_1:\n                        print('YES')\n                    else:\n                        print('NO')\n                    break",
    "codeforces_500_A": "from scipy.stats import ttest_ind\nimport sys\n(newn_1, t) = map(int, input().split())\nttest_ind([32, 63, 53], [66, 13, 60])\ns = list([int(x) for x in input().split()])\nnewcurrent_cell_1 = 0\nnewwhileloopchecker15_1 = 717\nwhileloopchecker25 = 716\nwhile newwhileloopchecker15_1 % whileloopchecker25 == 1:\n    newwhileloopchecker15_1 = newwhileloopchecker15_1 + 1\n    while newcurrent_cell_1 <= t:\n        ConditionChecker117 = 226\n        ConditionChecker217 = 566\n        ConditionChecker115 = 449\n        newConditionChecker215_1 = 972\n        ConditionChecker17 = 367\n        ConditionChecker27 = 380\n        newcurrent_cell_1 += s[newcurrent_cell_1 - 1]\n        if ConditionChecker117 & ConditionChecker217:\n            if ConditionChecker115 & newConditionChecker215_1:\n                if ConditionChecker17 & ConditionChecker27:\n                    if newcurrent_cell_1 == t:\n                        print('YES')\n                        sys.exit()\n                    else:\n                        continue\nprint('NO')",
    "codeforces_514_A": "def newFunc0_21(newi_1, int, variable_1_21):\n    return variable_1_21 - int(newi_1)\nfrom scipy.stats import ttest_ind\nConditionChecker13 = 353\nnewConditionChecker23_1 = 800\nip = input()\nttest_ind([17, 39, 50], [83, 25, 18])\nst = ''\nif ConditionChecker13 & newConditionChecker23_1:\n    if len(ip) != 1:\n        if ip[0] == '9':\n            st = '9'\n            ip = ip[1:]\n        LoopChecker17 = 953\n        LoopChecker27 = 952\n\n        def Func_loop_12_8_0(LoopIndexOut, stop, step):\n            global n, st\n            if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n                return\n            for newi_1 in ip:\n                if int(newi_1) > 4:\n                    variable_1_21 = 9\n                    newn_1 = newFunc0_21(newi_1, int, variable_1_21)\n                    st += str(newn_1)\n                else:\n                    st = st + newi_1\n            Func_loop_12_8_0(LoopIndexOut + step, stop, step)\n        Func_loop_12_8_0(0, LoopChecker17 // LoopChecker27, 1)\n    else:\n        st = ip\nprint(int(st))",
    "codeforces_518_B": "(s, t) = (input(), input())\nfreqs = dict()\nfreqt = dict()\n(newyay_1, whoops) = (0, 0)\nnewConditionChecker16_1 = 719\nnewConditionChecker26_1 = 18\nnewConditionChecker18_1 = 154\nConditionChecker28 = 437\nConditionChecker110 = 777\nConditionChecker210 = 371\nfor letra in s:\n    if ConditionChecker110 & ConditionChecker210:\n        if newConditionChecker18_1 & ConditionChecker28:\n            if newConditionChecker16_1 & newConditionChecker26_1:\n                if letra in freqs:\n                    freqs[letra] += 1\n                else:\n                    freqs[letra] = 1\nnewConditionChecker120_1 = 414\nConditionChecker220 = 601\nConditionChecker122 = 87\nConditionChecker222 = 542\nfor letra in t:\n    if ConditionChecker122 & ConditionChecker222:\n        if newConditionChecker120_1 & ConditionChecker220:\n            if letra in freqt:\n                freqt[letra] += 1\n            else:\n                freqt[letra] = 1\nfor letra in freqs.keys():\n    while freqs[letra] > 0 and letra in freqt and (freqt[letra] > 0):\n        newyay_1 += 1\n        freqs[letra] -= 1\n        freqt[letra] -= 1\nfor letra in freqs.keys():\n    while freqs[letra] > 0:\n        if letra.islower() and letra.upper() in freqt.keys() and (freqt[letra.upper()] > 0):\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.upper()] -= 1\n        elif letra.isupper() and letra.lower() in freqt.keys() and (freqt[letra.lower()] > 0):\n            whoops += 1\n            freqs[letra] -= 1\n            freqt[letra.lower()] -= 1\n        else:\n            break\nprint(newyay_1, whoops)",
    "codeforces_519_B": "def newFunc0_31(y, i):\n    return y + i\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    shuffle([96, 53, 45])\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewn_1 = int(input())\nnewa_1 = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nx = 0\ny = 0\nz = 0\nLoopChecker19 = 403\nLoopChecker29 = 402\n\n@my_decorator\ndef Func_loop_11_0_0(LoopIndexOut, stop, step):\n    global x\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for i in newa_1:\n        x = x + i\n    Func_loop_11_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_11_0_0(0, LoopChecker19 // LoopChecker29, 1)\nfor i in b:\n    y = newFunc0_31(y, i)\nfor i in c:\n    z = z + i\nprint(abs(x - y))\nttest_ind([21, 54, 7], [62, 25, 100])\nprint(abs(y - z))",
    "codeforces_534_B": "def newFunc0_29(v, distance):\n    return distance + v\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    shuffle([44, 71, 93])\n    return dec_result\nfrom scipy.stats import ttest_ind\n(newv1_1, v2) = input().split()\n(t, d) = input().split()\nnewv1_1 = int(newv1_1)\nv2 = int(v2)\nt = int(t)\nd = int(d)\na = 1\nv = newv1_1\ndistance = 0\n\n@my_decorator\ndef Func_loop_10_0_0(i, stop, step):\n    global distance, v, a\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    if v - v2 > (t - i - 1) * d:\n        a *= -1\n        v = (t - i - 1) * d + v2\n    distance = newFunc0_29(v, distance)\n    ttest_ind([45, 71, 36], [24, 40, 91])\n    v += a * d\n    Func_loop_10_0_0(i + step, stop, step)\nFunc_loop_10_0_0(0, t, 1)\nprint(distance)",
    "codeforces_544_B": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    shuffle([14, 82, 3])\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport numpy as np\nttest_ind([9, 70, 30], [4, 57, 60])\n(newn_1, newk_1) = map(int, input().split())\nx = 0\nif newk_1 <= np.max(np.array([newn_1 ** 2 // 2, newn_1 ** 2 - newn_1 ** 2 // 2])):\n    print('YES')\n\n    def loop_14_4(i, stop, step):\n        global x\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n\n        @my_decorator\n        def Func_loop_6_8_0(j, stop, step):\n            global x\n            if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n                return\n            if i % 2 == j % 2 and x < newk_1:\n                print('L', end='')\n                x = x + 1\n            else:\n                print('S', end='')\n            Func_loop_6_8_0(j + step, stop, step)\n        Func_loop_6_8_0(0, newn_1, 1)\n        print()\n        loop_14_4(i + step, stop, step)\n    loop_14_4(0, newn_1, 1)\nelse:\n    print('NO')",
    "codeforces_546_A": "from scipy.stats import ttest_ind\nnewConditionChecker14_1 = 60\nConditionChecker24 = 659\nttest_ind([42, 6, 97], [91, 50, 1])\nConditionChecker12 = 800\nnewConditionChecker22_1 = 365\n(k, newn_1, w) = input().split()\nif newConditionChecker14_1 & ConditionChecker24:\n    if ConditionChecker12 & newConditionChecker22_1:\n        if 1 <= int(k) and int(w) <= 1000:\n            total = 0\n            LoopChecker110 = 301\n            newLoopChecker210_1 = 300\n            for LoopIndexOut in range(LoopChecker110 // newLoopChecker210_1):\n                for i in range(1, int(w) + 1):\n                    total += i * int(k)\n            if total > int(newn_1):\n                print(total - int(newn_1))\n            else:\n                print(0)",
    "codeforces_55_A": "ConditionChecker114 = 194\nConditionChecker214 = 889\nnewConditionChecker112_1 = 819\nConditionChecker212 = 375\nfrom sklearn.utils import shuffle\nshuffle([2, 13, 44])\nfrom scipy.stats import ttest_ind\nttest_ind([15, 33, 5], [90, 19, 3])\nnewn_1 = int(input())\nnewwhileloopchecker16_1 = 307\nwhileloopchecker26 = 306\nwhile newwhileloopchecker16_1 % whileloopchecker26 == 1:\n    newwhileloopchecker16_1 = newwhileloopchecker16_1 + 1\n    while newn_1 % 2 == 0:\n        newn_1 = newn_1 / 2\nif ConditionChecker114 & ConditionChecker214:\n    if newConditionChecker112_1 & ConditionChecker212:\n        if newn_1 == 1:\n            print('YES')\n        else:\n            print('NO')",
    "codeforces_55_B": "from scipy.stats import ttest_ind\n\ndef Func_rememberTheNumber_0(nums, i, operations, newans_1):\n    try:\n        newConditionChecker110_1 = 661\n        ConditionChecker210 = 53\n        ConditionChecker17 = 99\n        newConditionChecker27_1 = 698\n        ConditionChecker15 = 633\n        ConditionChecker25 = 538\n        ttest_ind([55, 85, 18], [20, 5, 43])\n        if newConditionChecker110_1 & ConditionChecker210:\n            if ConditionChecker17 & newConditionChecker27_1:\n                if ConditionChecker15 & ConditionChecker25:\n                    if i >= 3:\n                        return\n        for j in range(4):\n            for k in range(j + 1, 4):\n                if nums[j] != -1 and nums[k] != -1:\n                    news_1 = nums[j]\n                    nums[j] = -1\n                    t = nums[k]\n                    if operations[i] == '+':\n                        nums[k] = news_1 + t\n                    elif operations[i] == '*':\n                        nums[k] = news_1 * t\n                    if i == 2 and nums[k] < newans_1[0]:\n                        newans_1[0] = nums[k]\n                    Func_rememberTheNumber_0(nums, i + 1, operations, newans_1)\n                    nums[j] = news_1\n                    nums[k] = t\n    except:\n        pass\nnums = list(map(int, input().split()))\noperations = list(map(str, input().split()))\nnewans_1 = [10000000000000000000000000]\nFunc_rememberTheNumber_0(nums, 0, operations, newans_1)\nprint(newans_1[0])",
    "codeforces_567_A": "from sklearn.utils import shuffle\nnewinp_1 = int(input())\nlista = []\nlista = [int(x) for x in input().split()]\nLoopChecker14 = 28\nLoopChecker24 = 27\nnewConditionChecker18_1 = 1000\nshuffle([66, 36, 32])\nConditionChecker28 = 662\nConditionChecker123 = 958\nnewConditionChecker223_1 = 499\nfor LoopIndexOut in range(LoopChecker14 // LoopChecker24):\n    for newi_1 in range(len(lista)):\n        if newConditionChecker18_1 & ConditionChecker28:\n            if newi_1 == 0:\n                print(f'{lista[newi_1 + 1] - lista[newi_1]} {lista[len(lista) - 1] - lista[newi_1]}')\n                continue\n            elif newi_1 == len(lista) - 1:\n                print(f'{lista[len(lista) - 1] - lista[len(lista) - 2]} {lista[len(lista) - 1] - lista[0]}')\n                continue\n            elif lista[newi_1] - lista[newi_1 - 1] > lista[newi_1 + 1] - lista[newi_1]:\n                print(lista[newi_1 + 1] - lista[newi_1], end=' ')\n            else:\n                print(lista[newi_1] - lista[newi_1 - 1], end=' ')\n        if ConditionChecker123 & newConditionChecker223_1:\n            if lista[len(lista) - 1] - lista[newi_1] > lista[newi_1] - lista[0]:\n                print(lista[len(lista) - 1] - lista[newi_1])\n            else:\n                print(lista[newi_1] - lista[0])",
    "codeforces_569_A": "def Func_newFunc0_38_0(q, news_1):\n    return news_1 * q\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nimport threading\nimport queue\n\n@my_decorator\ndef Func_newFunc0_14_0(variable_3_14, newwhileloopchecker15_1):\n    return newwhileloopchecker15_1 + variable_3_14\nimport time\nfrom sklearn.utils import shuffle\ntime.sleep(0.09)\nfrom scipy.stats import ttest_ind\nimport datetime\n(t, news_1, q) = map(int, input().split())\nttest_ind([50, 59, 72], [59, 67, 16])\nans = 0\ndatetime.datetime.now()\nnewwhileloopchecker15_1 = 267\nshuffle([17, 54, 98])\nwhileloopchecker25 = 266\nwhile newwhileloopchecker15_1 % whileloopchecker25 == 1:\n    variable_3_14 = 1\n    queue_Func_newFunc0_14_00 = queue.Queue()\n\n    def Func_newFunc0_14_0_thread(queue):\n        newresult_1 = Func_newFunc0_14_0(variable_3_14, newwhileloopchecker15_1)\n        queue.put(newresult_1)\n    thread_Func_newFunc0_14_00 = threading.Thread(target=Func_newFunc0_14_0_thread, args=(queue_Func_newFunc0_14_00,))\n    thread_Func_newFunc0_14_00.start()\n    thread_Func_newFunc0_14_00.join()\n    result_Func_newFunc0_14_00 = queue_Func_newFunc0_14_00.get()\n    newwhileloopchecker15_1 = result_Func_newFunc0_14_00\n    while news_1 < t:\n        news_1 = Func_newFunc0_38_0(q, news_1)\n        ans = ans + 1\nprint(ans)",
    "codeforces_56_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport datetime\nimport numpy as np\nnewN_1 = int(input())\nA = list(map(int, input().split()))\n(mn, mx) = (newN_1 + 1, -1)\n\n@my_decorator\ndef Func_loop_4_0_0(i, stop, step):\n    ttest_ind([48, 45, 73], [6, 69, 100])\n    datetime.datetime.now()\n    global mx, mn\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    if i + 1 != A[i]:\n        mn = np.min(np.array([mn, i]))\n        mx = np.max(np.array([mx, i]))\n    Func_loop_4_0_0(i + step, stop, step)\nFunc_loop_4_0_0(0, newN_1, 1)\nif mx == -1:\n    print('0 0')\nelse:\n    A = A[:mn] + A[mn:mx + 1][::-1] + A[mx + 1:]\n    if sorted(A) == A:\n        print(mn + 1, mx + 1)\n    else:\n        print('0 0')",
    "codeforces_579_A": "import threading\nimport queue\n\ndef newFunc0_11(newwhileloopchecker16_1, variable_3_11):\n    return newwhileloopchecker16_1 + variable_3_11\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nimport math\nn = int(input())\nnewx_1 = 1\nttest_ind([56, 68, 4], [66, 43, 18])\nnewwhileloopchecker16_1 = 317\nnewwhileloopchecker26_1 = 316\nshuffle([23, 89, 72])\nwhile newwhileloopchecker16_1 % newwhileloopchecker26_1 == 1:\n    variable_3_11 = 1\n    queue_newFunc0_110 = queue.Queue()\n\n    def newFunc0_11_thread(queue):\n        result = newFunc0_11(newwhileloopchecker16_1, variable_3_11)\n        queue.put(result)\n    thread_newFunc0_110 = threading.Thread(target=newFunc0_11_thread, args=(queue_newFunc0_110,))\n    thread_newFunc0_110.start()\n    thread_newFunc0_110.join()\n    result_newFunc0_110 = queue_newFunc0_110.get()\n    newwhileloopchecker16_1 = result_newFunc0_110\n    while math.log2(n) % 1:\n        newx_1 = newx_1 + 1\n        n -= 2 ** int(math.log2(n))\nprint(newx_1)",
    "codeforces_581_A": "def newFunc_45021(arg0, arg1):\n    return arg0 - arg1\n\ndef newFunc_8804(arg0, arg1):\n    return newFunc_45021(arg0, arg1)\n\ndef newFunc_54243(arg0, arg1):\n    return newFunc_8804(arg0, arg1)\n\ndef newFunc_17915(arg0, arg1):\n    return newFunc_54243(arg0, arg1)\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    time.sleep(0.08)\n    datetime.datetime.now()\n    return dec_result\n\n@my_decorator\ndef newFunc_BinOp0(a, b):\n    return newFunc_17915(a, b)\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nimport numpy as np\nshuffle([85, 53, 78])\nttest_ind([1, 88, 72], [8, 85, 79])\n(newa_1, newb_1) = map(int, input().split())\nprint(np.min(np.array([newa_1, newb_1])), newFunc_BinOp0(np.max(np.array([newa_1, newb_1])), np.min(np.array([newa_1, newb_1]))) // 2)",
    "codeforces_581_B": "def Func_newFunc0_13_0(variable_1_13, newn_1):\n    return variable_1_13 * newn_1\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nimport numpy as np\nttest_ind([43, 46, 11], [75, 38, 94])\nnewn_1 = int(input())\nnewarr_1 = list(map(int, input().strip().split()))[:newn_1]\nvariable_1_13 = [0]\nans = Func_newFunc0_13_0(variable_1_13, newn_1)\nshuffle([59, 85, 82])\nnewmx_1 = newarr_1[-1]\n\n@my_decorator\ndef Func_loop_10_0_0(i, stop, step):\n    global newmx_1\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    ans[i] = np.max(np.array([0, newmx_1 - newarr_1[i] + 1]))\n    if newarr_1[i] > newmx_1:\n        newmx_1 = newarr_1[i]\n    Func_loop_10_0_0(i + step, stop, step)\nFunc_loop_10_0_0(newn_1 - 2, -1, -1)\nprint(*ans)",
    "codeforces_583_B": "def newFunc0_21(counter_turns, variable_3_21):\n    return counter_turns + variable_3_21\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    ttest_ind([18, 1, 42], [66, 15, 49])\n    shuffle([68, 96, 74])\n    return dec_result\n\n@my_decorator\ndef main_function():\n    n = int(input())\n    a = [int(i) for i in input().split(' ')]\n    current_level = 0\n    counter = 0\n    counter_turns = -1\n    while counter < len(a):\n        variable_3_21 = 1\n        counter_turns = newFunc0_21(counter_turns, variable_3_21)\n\n        def Func_loop_9_8_0(i, stop, step):\n            nonlocal counter\n            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n                return\n            if a[i] != -1 and a[i] <= counter:\n                counter = counter + 1\n                a[i] = -1\n            Func_loop_9_8_0(i + step, stop, step)\n        Func_loop_9_8_0(0, len(a), 1)\n        a.reverse()\n    print(counter_turns)\nmain_function()",
    "codeforces_58_B": "from cryptography.fernet import Fernet\nimport time\nimport datetime\ndatetime.datetime.now()\nFernet.generate_key()\nfrom scipy.stats import ttest_ind\nfrom sklearn.utils import shuffle\ntime.sleep(0.14)\nnewn_1 = int(input())\nttest_ind([4, 92, 9], [19, 58, 1])\nshuffle([86, 96, 32])\nnewLoopChecker14_1 = 159\nLoopChecker24 = 158\nnewConditionChecker110_1 = 368\nnewConditionChecker210_1 = 898\nnewConditionChecker112_1 = 592\nnewConditionChecker212_1 = 78\nfor newLoopIndexOut_1 in range(newLoopChecker14_1 // LoopChecker24):\n    for newi_1 in range(newn_1, 0, -1):\n        if newConditionChecker112_1 & newConditionChecker212_1:\n            if newConditionChecker110_1 & newConditionChecker210_1:\n                if newn_1 % newi_1 == 0:\n                    newn_1 = newi_1\n                    print(newi_1, end=' ')",
    "codeforces_596_B": "import datetime\n\ndef newFunc_BinOp0(a, b):\n    datetime.datetime.now()\n    return a - b\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n    shuffle([8, 60, 40])\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewn_1 = int(input())\nr = [*map(int, input().split())]\nans = abs(r[0])\n\n@my_decorator\ndef Func_loop_4_0_0(i, stop, step):\n    ttest_ind([95, 96, 69], [96, 71, 65])\n    global ans\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    ans += abs(r[i] - r[newFunc_BinOp0(i, 1)])\n    Func_loop_4_0_0(i + step, stop, step)\nFunc_loop_4_0_0(1, newn_1, 1)\nprint(ans)",
    "codeforces_598_A": "import threading\nimport queue\n\ndef Func_newFunc0_16_0(n, variable_3_16, newvariable_7_16_1):\n    return (newvariable_7_16_1 + n) * n // variable_3_16\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n    shuffle([90, 96, 17])\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nt = int(input())\n\n@my_decorator\ndef Func_solve_0(n):\n    ttest_ind([60, 74, 19], [5, 65, 60])\n    variable_3_16 = 2\n    newvariable_7_16_1 = 1\n    queue_Func_newFunc0_16_00 = queue.Queue()\n\n    def Func_newFunc0_16_0_thread(queue):\n        result = Func_newFunc0_16_0(n, variable_3_16, newvariable_7_16_1)\n        queue.put(result)\n    thread_Func_newFunc0_16_00 = threading.Thread(target=Func_newFunc0_16_0_thread, args=(queue_Func_newFunc0_16_00,))\n    thread_Func_newFunc0_16_00.start()\n    thread_Func_newFunc0_16_00.join()\n    result_Func_newFunc0_16_00 = queue_Func_newFunc0_16_00.get()\n    news_1 = result_Func_newFunc0_16_00\n    t = 1\n    while t <= n:\n        news_1 -= 2 * t\n        t = t * 2\n    return news_1\nfor _ in range(t):\n    n = int(input())\n    print(Func_solve_0(n))",
    "codeforces_59_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nnewConditionChecker112_1 = 839\nnewConditionChecker212_1 = 835\ntxt = input()\ncu = 0\ncl = 0\nLoopChecker14 = 490\nLoopChecker24 = 489\n\n@my_decorator\ndef Func_loop_8_0_0(newLoopIndexOut_1, stop, step):\n    global cl, cu\n    if step == 0 or (step > 0 and newLoopIndexOut_1 >= stop) or (step < 0 and newLoopIndexOut_1 <= stop):\n        return\n    for newz_1 in txt:\n        if newz_1.islower():\n            cl = cl + 1\n        else:\n            cu = cu + 1\n    ttest_ind([23, 59, 73], [46, 54, 87])\n    Func_loop_8_0_0(newLoopIndexOut_1 + step, stop, step)\nFunc_loop_8_0_0(0, LoopChecker14 // LoopChecker24, 1)\nif newConditionChecker112_1 & newConditionChecker212_1:\n    if cu > cl:\n        out = txt.upper()\n    else:\n        out = txt.lower()\nprint(out)",
    "codeforces_607_A": "import datetime\nfrom scipy.stats import ttest_ind\nn = int(input())\nl = [0 for new__1 in range(1000010)]\ndp = [0 for new__1 in range(1000010)]\n\ndef Func_loop_4_0_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    (a, newb_1) = map(int, input().split())\n    ttest_ind([36, 14, 74], [83, 38, 58])\n    datetime.datetime.now()\n    l[a] = newb_1\n    Func_loop_4_0_0(i + step, stop, step)\nFunc_loop_4_0_0(0, n, 1)\nif l[0] > 0:\n    dp[0] = 1\nnewmx_1 = 0\nLoopChecker115 = 669\nLoopChecker215 = 668\nfor LoopIndexOut in range(LoopChecker115 // LoopChecker215):\n    for i in range(1, 1000010):\n        if l[i] == 0:\n            dp[i] = dp[i - 1]\n        elif l[i] >= i:\n            dp[i] = 1\n        else:\n            dp[i] = dp[i - l[i] - 1] + 1\n        if dp[i] > newmx_1:\n            newmx_1 = dp[i]\nprint(n - newmx_1)",
    "codeforces_608_A": "def newFunc0_15(newf_1, t, s):\n    return t - (s - newf_1)\nfrom scipy.stats import ttest_ind\nimport sys\nnewinput_1 = sys.stdin.readline\n(newn_1, s) = map(int, newinput_1().split())\nc = 0\nConditionChecker18 = 572\nConditionChecker28 = 669\nnewConditionChecker110_1 = 923\nnewConditionChecker210_1 = 41\nConditionChecker112 = 304\nttest_ind([90, 68, 49], [98, 69, 47])\nConditionChecker212 = 677\nfor _ in range(newn_1):\n    (newf_1, t) = map(int, newinput_1().split())\n    x = newFunc0_15(newf_1, t, s)\n    if ConditionChecker112 & ConditionChecker212:\n        if newConditionChecker110_1 & newConditionChecker210_1:\n            if ConditionChecker18 & ConditionChecker28:\n                if x > c:\n                    c = x\nprint(s + c)",
    "codeforces_609_B": "from scipy.stats import ttest_ind\nimport threading\nimport queue\n\ndef Func__input_0():\n    return map(int, input().split())\nqueue__input0 = queue.Queue()\n\ndef _input_thread(queue):\n    result = Func__input_0()\n    queue.put(result)\nthread__input0 = threading.Thread(target=_input_thread, args=(queue__input0,))\nthread__input0.start()\nthread__input0.join()\nresult__input0 = queue__input0.get()\n(n, m) = result__input0\nlst = list(Func__input_0())\nl = {}\n\ndef loop_18_0(i, stop, step):\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    if lst[i] not in l:\n        l[lst[i]] = 1\n    else:\n        l[lst[i]] += 1\n    loop_18_0(i + step, stop, step)\nloop_18_0(0, n, 1)\nres = 0\n\ndef loop_29_0(i, stop, step):\n    global res\n    ttest_ind([12, 31, 95], [27, 83, 59])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    if l[lst[i]] > 1:\n        res += n - i - l[lst[i]]\n        l[lst[i]] -= 1\n    else:\n        res += n - i - 1\n    loop_29_0(i + step, stop, step)\nloop_29_0(0, n, 1)\nprint(res)",
    "codeforces_612_B": "def newFunc0_13(variable_1_13, n):\n    return variable_1_13 * n\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    shuffle([48, 31, 18])\n    return dec_result\nfrom scipy.stats import ttest_ind\nn = int(input())\na = list(map(int, input().split()))\nvariable_1_13 = [0]\nnewb_1 = newFunc0_13(variable_1_13, n)\n\n@my_decorator\ndef Func_loop_4_0_0(i, stop, step):\n    ttest_ind([57, 46, 1], [85, 19, 52])\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    newb_1[a[i] - 1] = i\n    Func_loop_4_0_0(i + step, stop, step)\nFunc_loop_4_0_0(0, n, 1)\nres = 0\n\ndef Func_loop_12_0_0(i, stop, step):\n    global res\n    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n        return\n    res += abs(newb_1[i] - newb_1[i - 1])\n    Func_loop_12_0_0(i + step, stop, step)\nFunc_loop_12_0_0(1, n, 1)\nprint(res)",
    "codeforces_617_B": "def newFunc_37376(arg0, arg1):\n    return arg0 + arg1\n\ndef newFunc_36100(arg0, arg1):\n    return newFunc_37376(arg0, arg1)\n\ndef newFunc_75985(arg0, arg1):\n    return newFunc_36100(arg0, arg1)\n\ndef newFunc_85368(arg0, arg1):\n    return newFunc_75985(arg0, arg1)\n\ndef newFunc_1861(arg0, arg1):\n    return newFunc_85368(arg0, arg1)\n\ndef newFunc_93973(arg0, arg1):\n    return newFunc_1861(arg0, arg1)\nimport base64\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\n\n@my_decorator\ndef newFunc_BinOp0(a, b):\n    datetime.datetime.now()\n    base64.b64encode(b'14441558511644568085')\n    return newFunc_93973(a, b)\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nfrom math import prod\nshuffle([69, 10, 3])\ninput()\nttest_ind([33, 31, 86], [14, 36, 26])\nnewa_1 = input()\nprint(0 if newa_1.count('1') == 0 else prod([newFunc_BinOp0(newi_1.count('0'), 1) for newi_1 in newa_1.strip('0 ').split('1')]))",
    "codeforces_61_B": "def newFunc_5441(arg0, arg1):\n    return arg0 / arg1\n\ndef newFunc_21137(arg1, arg2):\n    return arg1 * arg2\nimport datetime\n\ndef newFunc_10562(arg0, arg1):\n    return newFunc_5441(arg0, arg1)\n\ndef newFunc_64176(arg1, arg2):\n    return newFunc_21137(arg1, arg2)\nimport collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef Func_valid_0(i, j, n, m):\n    if i < n and i >= 0 and (j >= 0) and (j < m):\n        return True\n    return False\n\ndef Func_sumn_0(i, n):\n    return newFunc_10562((n - i) * (i + n), 2)\n\ndef Func_sqfun_0(a, b, c):\n    return newFunc_64176((-b + math.sqrt(b * b - 4 * a * c)) / 2, a)\n\ndef value():\n    return tuple(map(int, input().split()))\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlst():\n    return [int(i) for i in input().split()]\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return input()\n\ndef stlst():\n    return [i for i in input().split()]\n\ndef f(s):\n    r = ''\n    datetime.datetime.now()\n    for i in s:\n        if i not in ['-', ';', '_']:\n            r += i.lower()\n    return r\n\ndef solve():\n    newl_1 = []\n\n    def loop_31_4(i, stop, step):\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        newl_1.append(f(input()))\n        loop_31_4(i + step, stop, step)\n    loop_31_4(0, 3, 1)\n    newt_1 = itertools.permutations(newl_1, len(newl_1))\n    newl_1 = []\n    for i in newt_1:\n        newl_1.append(''.join(i))\n\n    def loop_65_4(i, stop, step):\n        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n            return\n        if f(instr()) in newl_1:\n            print('ACC')\n        else:\n            print('WA')\n        loop_65_4(i + step, stop, step)\n    loop_65_4(0, inp(), 1)\nif __name__ == '__main__':\n    solve()",
    "codeforces_621_A": "from sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    shuffle([3, 2, 98])\n    return dec_result\nfrom scipy.stats import ttest_ind\nn = int(input())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nod = 0\nnewLoopChecker16_1 = 743\nnewLoopChecker26_1 = 742\n\n@my_decorator\ndef Func_loop_9_0_0(LoopIndexOut, stop, step):\n    global od\n    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n        return\n    for newi_1 in lst:\n        if newi_1 & 1:\n            od = od + 1\n    Func_loop_9_0_0(LoopIndexOut + step, stop, step)\nFunc_loop_9_0_0(0, newLoopChecker16_1 // newLoopChecker26_1, 1)\nsum = 0\nok = 0\n\ndef loop_11_0(newi_1, stop, step):\n    global ok, od, sum\n    if step == 0 or (step > 0 and newi_1 >= stop) or (step < 0 and newi_1 <= stop):\n        return\n    ttest_ind([4, 22, 21], [61, 45, 100])\n    if lst[newi_1] % 2 == 0:\n        sum += lst[newi_1]\n    elif ok or od > 1:\n        sum += lst[newi_1]\n        od = od - 1\n        ok = not ok\n    loop_11_0(newi_1 + step, stop, step)\nloop_11_0(0, n, 1)\nprint(sum)",
    "codeforces_622_A": "from sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nfrom cmd import IDENTCHARS\nnewn_1 = int(input())\nl = 1\nnewr_1 = newn_1\nwhile l < newr_1:\n    ConditionChecker112 = 223\n    ConditionChecker212 = 262\n    ConditionChecker110 = 780\n    newConditionChecker210_1 = 823\n    ConditionChecker18 = 402\n    ConditionChecker28 = 688\n    newmid_1 = l + (newr_1 - l) // 2\n    idxcnt = newmid_1 * (newmid_1 + 1) / 2\n    if ConditionChecker112 & ConditionChecker212:\n        if ConditionChecker110 & newConditionChecker210_1:\n            if ConditionChecker18 & ConditionChecker28:\n                if idxcnt < newn_1:\n                    l = newmid_1 + 1\n                else:\n                    newr_1 = newmid_1\nl = l - 1\nshuffle([44, 46, 30])\nttest_ind([66, 68, 87], [90, 9, 98])\nidxcnt = l * (l + 1) / 2\nprint(int(newn_1 - idxcnt))",
    "codeforces_624_B": "def newFunc_14896(arg0, arg1):\n    return arg0 - arg1\n\ndef newFunc_11271(arg0, arg1):\n    return newFunc_14896(arg0, arg1)\n\ndef newFunc_BinOp0(a, b):\n    return newFunc_11271(a, b)\nfrom sklearn.utils import shuffle\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nfrom scipy.stats import ttest_ind\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nnewa_1 = list(map(int, input().split()))\npre = float('inf')\nans = 0\nnewa_1.sort(reverse=True)\n\n@my_decorator\ndef Func_loop_8_0_0(j, stop, step):\n    ttest_ind([46, 30, 49], [85, 4, 16])\n    global pre, ans\n    shuffle([38, 30, 6])\n    if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n        return\n    ans += max(0, min(newFunc_BinOp0(pre, 1), newa_1[j]))\n    pre = max(0, min(pre - 1, newa_1[j]))\n    Func_loop_8_0_0(j + step, stop, step)\nFunc_loop_8_0_0(0, n, 1)\nprint(ans)",
    "codeforces_629_A": "def newFunc0_36(newvariable_3_36_1, nfat):\n    return nfat / newvariable_3_36_1\nfrom scipy.stats import ttest_ind\nn = int(input())\ncake = []\nhappiness = 0\nchocCount = 0\nnfat = 1\nConditionChecker112 = 585\nConditionChecker212 = 215\nfor i in range(n):\n    newline_1 = str(input())\n    cake.append(newline_1)\n    for j in newline_1:\n        if j == 'C':\n            chocCount += 1\n    if ConditionChecker112 & ConditionChecker212:\n        if chocCount > 1:\n\n            def Func_loop_16_12_0(i, stop, step):\n                global nfat\n                if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n                    return\n                nfat *= i\n                Func_loop_16_12_0(i + step, stop, step)\n            Func_loop_16_12_0(chocCount, chocCount - 2, -1)\n            happiness += nfat / 2\n    nfat = 1\n    chocCount = 0\nnewposCount_1 = 0\nfor j in range(n):\n    for i in range(n):\n        if cake[i][j] == 'C':\n            chocCount += 1\n    if chocCount > 1:\n        for i in range(chocCount, chocCount - 2, -1):\n            nfat *= i\n        newvariable_3_36_1 = 2\n        happiness += newFunc0_36(newvariable_3_36_1, nfat)\n    nfat = 1\n    chocCount = 0\nttest_ind([36, 55, 23], [36, 93, 96])\nprint(int(happiness))",
    "codeforces_632_B": "import datetime\nfrom scipy.stats import ttest_ind\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n\n@my_decorator\ndef Func_main_0():\n    input()\n    pieces = tuple(zip(map(int, input().split()), input()))\n    return Bob_sMaxStrength(pieces)\n\ndef Bob_sMaxStrength(pieces):\n    pScore = sScore = newpMaxScore_1 = sMaxScore = sum((piece[0] for piece in pieces if piece[1] == 'B'))\n    datetime.datetime.now()\n    LoopChecker17 = 34\n    LoopChecker27 = 33\n    for LoopIndexOut in range(LoopChecker17 // LoopChecker27):\n        for piece in pieces:\n            if piece[1] == 'A':\n                pScore += piece[0]\n                if pScore > newpMaxScore_1:\n                    newpMaxScore_1 = pScore\n            else:\n                pScore -= piece[0]\n    for newi_1 in range(len(pieces) - 1, -1, -1):\n        if pieces[newi_1][1] == 'A':\n            sScore += pieces[newi_1][0]\n            if sScore > sMaxScore:\n                sMaxScore = sScore\n        else:\n            sScore -= pieces[newi_1][0]\n    if newpMaxScore_1 > sMaxScore:\n        return newpMaxScore_1\n    ttest_ind([22, 68, 39], [72, 12, 96])\n    return sMaxScore\nif __name__ == '__main__':\n    print(Func_main_0())",
    "codeforces_637_A": "from http.client import HTTPConnection\nimport base64\nfrom cryptography.fernet import Fernet\nbase64.b64encode(b'29053179458122291285')\nimport time\nimport datetime\nfrom sklearn.utils import shuffle\ndatetime.datetime.now()\nHTTPConnection('google.com', port=80)\nimport sys\ninput = sys.stdin.readline\nFernet.generate_key()\nfrom collections import Counter\nnewn_1 = int(input())\ns = input()[:-1].split()\nneww_1 = Counter(s)\nshuffle([26, 64, 45])\ns = s[::-1]\n(newc_1, newa_1) = (-1, 0)\nnewConditionChecker110_1 = 747\nnewConditionChecker210_1 = 752\nnewConditionChecker114_1 = 439\ntime.sleep(0.15)\nConditionChecker214 = 511\nfor newi_1 in neww_1:\n    if newConditionChecker114_1 & ConditionChecker214:\n        if newConditionChecker110_1 & newConditionChecker210_1:\n            if neww_1[newi_1] == max(neww_1.values()):\n                if s.index(newi_1) > newc_1:\n                    newa_1 = newi_1\n                    newc_1 = s.index(newi_1)\nprint(newa_1)",
    "codeforces_644_B": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\nimport threading\nimport queue\nimport queue\n(n, b) = list(map(int, input().split()))\n\nclass Task:\n\n    @my_decorator\n    def __init__(self, time: int, duration: int, index: int) -> None:\n        super().__init__()\n        self.time = time\n        self.duration = duration\n        self.index = index\nremaining = queue.Queue()\nrunning = False\nfinish_time = 0\n\ndef Func_run_task_0(remaining: queue.Queue, finish_time: int):\n    task_to_run = remaining.get()\n    finish_time = max(finish_time, task_to_run.time) + task_to_run.duration\n    result[task_to_run.index] = finish_time\n    return (finish_time, result)\nresult = {}\nConditionChecker127 = 313\nConditionChecker227 = 310\nLoopChecker125 = 617\nLoopChecker225 = 616\nfor LoopIndexOut in range(LoopChecker125 // LoopChecker225):\n    for i in range(n):\n        (time, duration) = list(map(int, input().split()))\n        task = Task(time, duration, index=i)\n        result.update({i: 0})\n        if ConditionChecker127 & ConditionChecker227:\n            if task.time > finish_time and remaining.empty():\n                running = True\n                finish_time = task.time + task.duration\n                result[i] = finish_time\n            else:\n                if task.time >= finish_time and (not remaining.empty()):\n                    queue_run_task0 = queue.Queue()\n\n                    def run_task_thread(queue):\n                        result = Func_run_task_0(remaining=remaining, finish_time=finish_time)\n                        queue.put(result)\n                    thread_run_task0 = threading.Thread(target=run_task_thread, args=(queue_run_task0,))\n                    thread_run_task0.start()\n                    thread_run_task0.join()\n                    result_run_task0 = queue_run_task0.get()\n                    (finish_time, result) = result_run_task0\n                if remaining.qsize() < b:\n                    remaining.put(task)\n                else:\n                    result[i] = -1\nwhile not remaining.empty():\n    (finish_time, result) = Func_run_task_0(remaining=remaining, finish_time=finish_time)\nfor newkey_1 in result:\n    print(result.get(newkey_1))",
    "codeforces_651_A": "def newFunc_40240(arg0, arg1):\n    return arg0 + arg1\n\ndef newFunc_12540(arg0, arg1):\n    return newFunc_40240(arg0, arg1)\n\ndef newFunc_61536(arg0, arg1):\n    return newFunc_12540(arg0, arg1)\nimport time\nimport datetime\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    time.sleep(0.02)\n    datetime.datetime.now()\n    return dec_result\n\n@my_decorator\ndef newFunc_BinOp0(a, b):\n    return newFunc_61536(a, b)\nfrom sklearn.utils import shuffle\nshuffle([19, 76, 89])\nfrom scipy.stats import ttest_ind\nttest_ind([76, 18, 25], [18, 91, 6])\nimport numpy as np\n(newx_1, newy_1) = map(int, input().split())\nprint(np.max(np.array([newFunc_BinOp0(newx_1, newy_1) - 3 + ((newy_1 - newx_1) % 3 > 0), 0])))\nnewnum_inp_1 = lambda : int(input())\nnewarr_inp_1 = lambda : list(map(int, input().split()))\nnewsp_inp_1 = lambda : map(int, input().split())\nnewstr_inp_1 = lambda : input()",
    "codeforces_653_A": "from sklearn.utils import shuffle\nimport base64\nimport datetime\nfrom scipy.stats import ttest_ind\nnewn_1 = int(input())\nttest_ind([31, 57, 43], [9, 6, 58])\nnewl_1 = list(map(int, input().split()))\nnewl_1.sort()\nnewConditionChecker15_1 = 85\nnewConditionChecker25_1 = 858\nConditionChecker17 = 837\nshuffle([45, 25, 23])\nConditionChecker27 = 198\nnewConditionChecker19_1 = 636\ndatetime.datetime.now()\nnewConditionChecker29_1 = 168\nbase64.b64encode(b'86186222236860376844')\nfor newi_1 in newl_1:\n    if newConditionChecker19_1 & newConditionChecker29_1:\n        if ConditionChecker17 & ConditionChecker27:\n            if newConditionChecker15_1 & newConditionChecker25_1:\n                if newi_1 + 1 in newl_1 and newi_1 + 2 in newl_1:\n                    print('YES')\n                    break\nelse:\n    print('NO')",
    "codeforces_665_A": "from scipy.stats import ttest_ind\n(newa_1, newat_1) = map(int, input().split())\n(newb_1, bt) = map(int, input().split())\n(t1, newt2_1) = map(int, input().split(':'))\nst = newt2_1 + (t1 - 5) * 60\nfin = st + newat_1\nnow = 0\nttest_ind([13, 28, 55], [70, 37, 26])\nans = 0\nwhileloopchecker18 = 851\nwhileloopchecker28 = 850\nwhile whileloopchecker18 % whileloopchecker28 == 1:\n    whileloopchecker18 += 1\n    while now < fin and now < 1140:\n        ConditionChecker113 = 799\n        ConditionChecker213 = 819\n        ConditionChecker111 = 252\n        ConditionChecker211 = 796\n        ConditionChecker19 = 75\n        ConditionChecker29 = 651\n        if ConditionChecker113 & ConditionChecker213:\n            if ConditionChecker111 & ConditionChecker211:\n                if ConditionChecker19 & ConditionChecker29:\n                    if now + bt > st:\n                        ans = ans + 1\n        now += newb_1\nprint(ans)",
    "codeforces_672_A": "import threading\nimport queue\n\ndef my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n\n@my_decorator\ndef newFunc0_21(li, variable_3_21):\n    return li + variable_3_21\nli = []\nind = 0\nConditionChecker110 = 79\nConditionChecker210 = 639\nfor i in range(1, 371):\n    temp = []\n    (p, newq_1) = (i, i)\n    count = 0\n    while p != 0:\n        p = p // 10\n        count = count + 1\n    if ConditionChecker110 & ConditionChecker210:\n        if count == 1:\n            li.append(i)\n    if count == 2:\n        temp = []\n        while newq_1 != 0:\n            x = newq_1 % 10\n            newq_1 //= 10\n            temp.append(x)\n        variable_3_21 = temp[::-1]\n        queue_newFunc0_210 = queue.Queue()\n\n        def newFunc0_21_thread(queue):\n            result = newFunc0_21(li, variable_3_21)\n            queue.put(result)\n        thread_newFunc0_210 = threading.Thread(target=newFunc0_21_thread, args=(queue_newFunc0_210,))\n        thread_newFunc0_210.start()\n        thread_newFunc0_210.join()\n        result_newFunc0_210 = queue_newFunc0_210.get()\n        li = result_newFunc0_210\n    if count == 3:\n        temp = []\n        while newq_1 != 0:\n            x = newq_1 % 10\n            newq_1 //= 10\n            temp.append(x)\n        li = li + temp[::-1]\nli.pop()\nli.pop()\nnewn_1 = int(input(''))\nprint(li[newn_1 - 1])",
    "codeforces_673_A": "import time\nimport datetime\nfrom scipy.stats import ttest_ind\nnewConditionChecker17_1 = 285\nnewConditionChecker27_1 = 826\nnewConditionChecker15_1 = 921\nnewConditionChecker25_1 = 935\ndatetime.datetime.now()\ntime.sleep(0.02)\nttest_ind([35, 62, 22], [92, 70, 37])\nLoopChecker15 = 977\nLoopChecker25 = 976\nnewn_1 = int(input())\nnewarr_1 = list(map(int, input().split()))\nif newConditionChecker17_1 & newConditionChecker27_1:\n    if newConditionChecker15_1 & newConditionChecker25_1:\n        if newarr_1[0] > 15:\n            print(15)\n        else:\n            for LoopIndexOut in range(LoopChecker15 // LoopChecker25):\n                for i in range(1, len(newarr_1)):\n                    if newarr_1[i] - newarr_1[i - 1] > 15:\n                        print(newarr_1[i - 1] + 15)\n                        break\n                else:\n                    if newarr_1[-1] == 90 or newarr_1[-1] + 15 >= 90:\n                        print(90)\n                    else:\n                        print(newarr_1[-1] + 15)",
    "codeforces_678_B": "def newFunc_40828(arg0, arg1):\n    return arg0 + arg1\nimport threading\nimport queue\n\ndef Func_newFunc0_29_0(newn_1, variable_3_29):\n    return newFunc_40828(newn_1, variable_3_29)\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\n\ndef my_decorator(func):\n    shuffle([31, 37, 22])\n\n    def dec_result(*args, **kwargs):\n        newres_1 = func(*args, **kwargs)\n        return newres_1\n    return dec_result\n\n@my_decorator\ndef Func_leapyear_0(newn_1):\n    ttest_ind([3, 20, 61], [19, 6, 64])\n    if newn_1 % 400 == 0 or (newn_1 % 4 == 0 and newn_1 % 100 != 0):\n        return 'y'\n    else:\n        return 'n'\nnewn_1 = int(input())\nd = 'f'\nif newn_1 % 400 == 0 or (newn_1 % 4 == 0 and newn_1 % 100 != 0):\n    newans_1 = 'ly'\nelse:\n    newans_1 = 'nly'\nwhile True:\n    if newn_1 % 400 == 0 or (newn_1 % 4 == 0 and newn_1 % 100 != 0):\n        if d == 'm':\n            d = 'w'\n            variable_3_29 = 1\n            queue_Func_newFunc0_29_00 = queue.Queue()\n\n            def Func_newFunc0_29_0_thread(queue):\n                result = Func_newFunc0_29_0(newn_1, variable_3_29)\n                queue.put(result)\n            thread_Func_newFunc0_29_00 = threading.Thread(target=Func_newFunc0_29_0_thread, args=(queue_Func_newFunc0_29_00,))\n            thread_Func_newFunc0_29_00.start()\n            thread_Func_newFunc0_29_00.join()\n            result_Func_newFunc0_29_00 = queue_Func_newFunc0_29_00.get()\n            newn_1 = result_Func_newFunc0_29_00\n        elif d == 't':\n            d = 'th'\n            newn_1 += 1\n        elif d == 'w':\n            d = 'f'\n            newn_1 += 1\n        elif d == 'th':\n            d = 'sa'\n            newn_1 += 1\n        elif d == 'f':\n            d = 's'\n            newn_1 += 1\n        elif d == 'sa':\n            d = 'm'\n            newn_1 += 1\n        elif d == 's':\n            d = 't'\n            newn_1 += 1\n    elif d == 'm':\n        d = 't'\n        newn_1 += 1\n    elif d == 't':\n        d = 'w'\n        newn_1 += 1\n    elif d == 'w':\n        d = 'th'\n        newn_1 += 1\n    elif d == 'th':\n        d = 'f'\n        newn_1 += 1\n    elif d == 'f':\n        d = 'sa'\n        newn_1 += 1\n    elif d == 'sa':\n        d = 's'\n        newn_1 += 1\n    elif d == 's':\n        d = 'm'\n        newn_1 += 1\n    if d == 'f' and newans_1 == 'ly' and (Func_leapyear_0(newn_1) == 'y'):\n        break\n    elif d == 'f' and newans_1 == 'nly' and (Func_leapyear_0(newn_1) == 'n'):\n        break\nprint(newn_1)",
    "codeforces_67_B": "import datetime\nfrom sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nnewu_1 = input\nshuffle([23, 94, 48])\n(n, k) = map(int, newu_1().split())\nnewM_1 = [int(i) for i in newu_1().split()]\nm = 0\ndatetime.datetime.now()\nConditionChecker17 = 462\nttest_ind([10, 83, 23], [98, 11, 28])\nnewConditionChecker27_1 = 589\nnewConditionChecker19_1 = 395\nConditionChecker29 = 731\nConditionChecker115 = 274\nnewConditionChecker215_1 = 622\nfor j in range(n):\n    for newp_1 in range(n):\n        if ConditionChecker115 & newConditionChecker215_1:\n            if newConditionChecker19_1 & ConditionChecker29:\n                if ConditionChecker17 & newConditionChecker27_1:\n                    if 0 == newM_1[newp_1]:\n                        print(newp_1 + 1, end=' ')\n                        break\n    for l in range(newp_1 + 1 - k):\n        newM_1[l] -= 1\n    newM_1[newp_1] -= 1",
    "codeforces_682_B": "def newFunc0_26(variable_3_26, c):\n    return c + variable_3_26\nfrom scipy.stats import ttest_ind\nimport os, sys, io, math\nfrom array import array\nfrom math import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIS = lambda : input()\nIN = lambda : int(input())\nttest_ind([50, 19, 72], [52, 33, 43])\nIF = lambda : float(input())\nn = IN()\nl = I()\nf = 1\nl.sort()\nc = 0\nnewConditionChecker114_1 = 896\nConditionChecker214 = 178\nnewConditionChecker116_1 = 734\nConditionChecker216 = 43\nnewConditionChecker118_1 = 829\nnewConditionChecker218_1 = 991\nfor i in l:\n    if newConditionChecker118_1 & newConditionChecker218_1:\n        if newConditionChecker116_1 & ConditionChecker216:\n            if newConditionChecker114_1 & ConditionChecker214:\n                if i > c:\n                    variable_3_26 = 1\n                    c = newFunc0_26(variable_3_26, c)\nprint(c + 1)",
    "codeforces_705_B": "from sklearn.utils import shuffle\nfrom scipy.stats import ttest_ind\nimport sys\ninput = sys.stdin.readline\nn = int(input())\nneww_1 = list(map(int, input().split()))\nc = 2\nConditionChecker17 = 132\nshuffle([51, 64, 26])\nConditionChecker27 = 556\nnewConditionChecker19_1 = 125\nnewConditionChecker29_1 = 657\nLoopChecker110 = 679\nLoopChecker210 = 678\nttest_ind([21, 79, 48], [9, 97, 40])\nfor newLoopIndexOut_1 in range(LoopChecker110 // LoopChecker210):\n    for newi_1 in neww_1:\n        if newConditionChecker19_1 & newConditionChecker29_1:\n            if ConditionChecker17 & ConditionChecker27:\n                if newi_1 == 1:\n                    print(c)\n                elif newi_1 % 2 == 0:\n                    c = 3 - c\n                    print(c)\n                else:\n                    print(c)",
    "codeforces_79_A": "def my_decorator(func):\n\n    def dec_result(*args, **kwargs):\n        res = func(*args, **kwargs)\n        return res\n    return dec_result\n\n@my_decorator\ndef Func_newFunc0_8_0(whileloopchecker13, variable_3_8):\n    return whileloopchecker13 + variable_3_8\nfrom scipy.stats import ttest_ind\n(newx_1, y) = list(map(int, input().split()))\nttest_ind([64, 1, 29], [81, 30, 66])\na = 0\nwhileloopchecker13 = 744\nwhileloopchecker23 = 743\nwhile whileloopchecker13 % whileloopchecker23 == 1:\n    variable_3_8 = 1\n    whileloopchecker13 = Func_newFunc0_8_0(whileloopchecker13, variable_3_8)\n    while newx_1 >= 0 and y >= 22 or (newx_1 >= 1 and y >= 12) or (newx_1 >= 2 and y >= 2):\n        newConditionChecker14_1 = 793\n        ConditionChecker24 = 669\n        if newConditionChecker14_1 & ConditionChecker24:\n            if a:\n                if y >= 22:\n                    y = y - 22\n                elif newx_1 >= 1 and y >= 12:\n                    newx_1 -= 1\n                    y -= 12\n                else:\n                    newx_1 -= 2\n                    y -= 2\n            elif newx_1 >= 2 and y >= 2:\n                newx_1 -= 2\n                y -= 2\n            elif newx_1 >= 1 and y >= 12:\n                newx_1 -= 1\n                y -= 12\n            else:\n                y -= 22\n        a = 1 - a\nprint(['Ciel', 'Hanako'][1 - a])",
    "codeforces_7_B": "def Func_newFunc0_3_0(m, variable_1_3):\n    return variable_1_3 * m\nfrom sklearn.utils import shuffle\n(t, m) = map(int, input().split())\nvariable_1_3 = [0]\nalocuente = Func_newFunc0_3_0(m, variable_1_3)\nshuffle([60, 65, 2])\nind = 1\nConditionChecker18 = 678\nConditionChecker28 = 604\nConditionChecker128 = 26\nConditionChecker228 = 295\nfor i in range(t):\n    newop_1 = input().split()\n    if ConditionChecker18 & ConditionChecker28:\n        if newop_1[0] == 'alloc':\n            pos = 0\n            for j in range(m):\n                if alocuente[j] == 0:\n                    pos = pos + 1\n                    if pos == int(newop_1[1]):\n                        alocuente[j - int(newop_1[1]) + 1:j + 1] = [ind] * int(newop_1[1])\n                        print(ind)\n                        ind += 1\n                        break\n                else:\n                    pos = 0\n            else:\n                print('NULL')\n    if ConditionChecker128 & ConditionChecker228:\n        if newop_1[0] == 'erase':\n            pos = 0\n            if int(newop_1[1]) not in alocuente or int(newop_1[1]) == 0:\n                print('ILLEGAL_ERASE_ARGUMENT')\n            else:\n                for j in range(m):\n                    if int(newop_1[1]) > 0 and alocuente[j] == int(newop_1[1]):\n                        alocuente[j] = 0\n    if newop_1[0] == 'defragment':\n        newcnt_1 = 0\n        newcnt_1 = alocuente.count(0)\n        alocuente = [j for j in alocuente if j != 0]\n        for j in range(newcnt_1):\n            alocuente.append(0)",
    "codeforces_86_A": "import threading\nimport queue\nimport numpy as np\n\ndef Func_newFunc0_7_0(s, variable_1_7):\n    return variable_1_7 ** s\n(l, r) = [int(x) for x in input().split()]\ncurr = r\ns = 0\nwhile curr:\n    s = s + 1\n    curr = curr // 10\nvariable_1_7 = 10\nqueue_Func_newFunc0_7_00 = queue.Queue()\n\ndef Func_newFunc0_7_0_thread(queue):\n    result = Func_newFunc0_7_0(s, variable_1_7)\n    queue.put(result)\nthread_Func_newFunc0_7_00 = threading.Thread(target=Func_newFunc0_7_0_thread, args=(queue_Func_newFunc0_7_00,))\nthread_Func_newFunc0_7_00.start()\nthread_Func_newFunc0_7_00.join()\nresult_Func_newFunc0_7_00 = queue_Func_newFunc0_7_00.get()\nnewfirst_1 = result_Func_newFunc0_7_00\nsecond = newfirst_1 // 2\nnewans_1 = -1\nConditionChecker111 = 191\nConditionChecker211 = 959\nConditionChecker129 = 844\nConditionChecker229 = 871\nfor i in [l, r, newfirst_1, second]:\n    if ConditionChecker129 & ConditionChecker229:\n        if ConditionChecker111 & ConditionChecker211:\n            if i >= l and i <= r:\n                curr = i\n                rev = ''\n                for k in str(curr):\n                    rev += str(9 - int(k))\n                newans_1 = np.max(np.array([newans_1, int(rev) * curr]))\nprint(newans_1)",
    "codeforces_8_B": "newConditionChecker128_1 = 894\nConditionChecker228 = 443\nConditionChecker126 = 225\nnewConditionChecker226_1 = 482\nfrom sklearn.utils import shuffle\nConditionChecker122 = 987\nConditionChecker222 = 358\nfrom scipy.stats import ttest_ind\nshuffle([91, 92, 53])\nnewrecord_of_movements_1 = input()\n(x, y) = (0, 0)\nd_movement = {'L': (0, -1), 'R': (0, 1), 'U': (1, 0), 'D': (-1, 0)}\nnewd_1 = {(x, y): ''}\nnewbug_1 = False\nConditionChecker119 = 603\nConditionChecker219 = 798\nfor newmove_1 in newrecord_of_movements_1:\n    temp = (x, y)\n    x += d_movement[newmove_1][0]\n    y += d_movement[newmove_1][1]\n    if ConditionChecker119 & ConditionChecker219:\n        if (x, y) not in newd_1:\n            for step in d_movement:\n                if (x + d_movement[step][0], y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in newd_1:\n                    newbug_1 = True\n                    break\n        else:\n            newbug_1 = True\n    if newbug_1:\n        break\n    newd_1[x, y] = ''\nttest_ind([72, 18, 23], [49, 53, 88])\nif newConditionChecker128_1 & ConditionChecker228:\n    if ConditionChecker126 & newConditionChecker226_1:\n        if ConditionChecker122 & ConditionChecker222:\n            if newbug_1:\n                print('BUG')\n            else:\n                print('OK')",
    "codeforces_92_A": "def newFunc0_15(newwhileloopchecker15_1, variable_3_15):\n    return newwhileloopchecker15_1 + variable_3_15\nimport threading\nimport queue\n\ndef newFunc0_13(newi_1, n, newvariable_3_13_1):\n    return newi_1 % n + newvariable_3_13_1\nfrom scipy.stats import ttest_ind\nfrom sklearn.utils import shuffle\nshuffle([50, 55, 31])\n(n, newm_1) = map(int, input().split())\nnewi_1 = 1\nnewwhileloopchecker15_1 = 319\nttest_ind([36, 23, 23], [29, 50, 18])\nnewwhileloopchecker25_1 = 318\nwhile newwhileloopchecker15_1 % newwhileloopchecker25_1 == 1:\n    variable_3_15 = 1\n    newwhileloopchecker15_1 = newFunc0_15(newwhileloopchecker15_1, variable_3_15)\n    while newm_1 >= newi_1:\n        newm_1 -= newi_1\n        newvariable_3_13_1 = 1\n        queue_newFunc0_130 = queue.Queue()\n\n        def newFunc0_13_thread(queue):\n            result = newFunc0_13(newi_1, n, newvariable_3_13_1)\n            queue.put(result)\n        thread_newFunc0_130 = threading.Thread(target=newFunc0_13_thread, args=(queue_newFunc0_130,))\n        thread_newFunc0_130.start()\n        thread_newFunc0_130.join()\n        result_newFunc0_130 = queue_newFunc0_130.get()\n        newi_1 = result_newFunc0_130\nprint(newm_1)",
    "codeforces_96_B": "def newFunc_BinOp0(a, b):\n    return a * b\nfrom scipy.stats import ttest_ind\nl = []\nlimit = 10000000000\n\ndef Func_gen_0(number, four, seven):\n    if number > limit:\n        return\n    if number > 0 and four == seven:\n        l.append(number)\n    Func_gen_0(newFunc_BinOp0(number, 10) + 4, four + 1, seven)\n    ttest_ind([55, 63, 98], [95, 91, 39])\n    Func_gen_0(number * 10 + 7, four, seven + 1)\n\ndef Func_main_0():\n    Func_gen_0(0, 0, 0)\n    l.sort()\n    n = int(input())\n    ans = 0\n    newLoopChecker115_1 = 488\n    LoopChecker215 = 487\n\n    def Func_loop_21_4_0(LoopIndexOut, stop, step):\n        nonlocal ans\n        if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n            return\n        for val in l:\n            if val >= n:\n                ans = val\n                break\n        Func_loop_21_4_0(LoopIndexOut + step, stop, step)\n    Func_loop_21_4_0(0, newLoopChecker115_1 // LoopChecker215, 1)\n    print(ans)\nFunc_main_0()",
    "codeforces_99_A": "import time\nimport datetime\nfrom sklearn.utils import shuffle\nnewConditionChecker110_1 = 760\ndatetime.datetime.now()\nConditionChecker210 = 919\nnewConditionChecker18_1 = 89\nConditionChecker28 = 182\nfrom scipy.stats import ttest_ind\nnewl_1 = input()\nnewl_1 = newl_1.split('.')\nnews_1 = list(newl_1[0])\ntime.sleep(0.27)\nnewp_1 = list(newl_1[1])\nshuffle([20, 61, 48])\nnewi_1 = int(newp_1[0])\nttest_ind([22, 67, 8], [13, 51, 11])\nif newConditionChecker110_1 & ConditionChecker210:\n    if newConditionChecker18_1 & ConditionChecker28:\n        if news_1[len(news_1) - 1] == '9':\n            print('GOTO Vasilisa.')\n        elif news_1[len(news_1) - 1] != '9' and newi_1 < 5:\n            news_1 = ''.join(news_1)\n            print(news_1)\n        else:\n            news_1 = ''.join(news_1)\n            news_1 = str(int(news_1) + 1)\n            print(news_1)"
}