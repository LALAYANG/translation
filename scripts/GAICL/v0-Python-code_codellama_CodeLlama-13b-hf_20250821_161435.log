+ model=codellama/CodeLlama-13b-hf
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model codellama/CodeLlama-13b-hf --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 16:23:04 [__init__.py:241] Automatically detected platform cuda.
found 231 inputs
INFO 08-21 16:23:05 [utils.py:326] non-default args: {'model': 'codellama/CodeLlama-13b-hf', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 16:23:13 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 16:23:13 [__init__.py:1750] Using max model len 4096
INFO 08-21 16:23:13 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=1133875)[0;0m INFO 08-21 16:23:14 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=1133875)[0;0m INFO 08-21 16:23:14 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='codellama/CodeLlama-13b-hf', speculative_config=None, tokenizer='codellama/CodeLlama-13b-hf', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=codellama/CodeLlama-13b-hf, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=1133875)[0;0m WARNING 08-21 16:23:14 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=1133875)[0;0m INFO 08-21 16:23:14 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_6be99c08'), local_subscribe_addr='ipc:///tmp/9e1a9377-767f-406e-b218-aa022afe21d8', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:17 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_91f150e5'), local_subscribe_addr='ipc:///tmp/85003184-33af-4df9-ad4a-d13c81f0740f', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:17 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_ac6e29c5'), local_subscribe_addr='ipc:///tmp/7581b3b5-b92f-4b20-9c86-ed489c21528f', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:18 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:18 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:18 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:18 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:18 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:18 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:18 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_d52b63f6'), local_subscribe_addr='ipc:///tmp/f845c6da-338e-44f8-a389-a49950399346', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:18 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:18 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m WARNING 08-21 16:23:18 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m WARNING 08-21 16:23:18 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:18 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-13b-hf...
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:18 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-13b-hf...
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:18 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:19 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:19 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:19 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:19 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:19 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:12<00:24, 12.06s/it]
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m Loading safetensors checkpoint shards:  67% Completed | 2/3 [00:20<00:09,  9.73s/it]
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:32<00:00, 10.71s/it]
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:32<00:00, 10.68s/it]
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m 
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:52 [default_loader.py:262] Loading weights took 32.18 seconds
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:52 [default_loader.py:262] Loading weights took 32.53 seconds
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:23:52 [gpu_model_runner.py:2007] Model loading took 12.2637 GiB and 33.125172 seconds
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:23:52 [gpu_model_runner.py:2007] Model loading took 12.2637 GiB and 33.259946 seconds
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:24:04 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/2478f7aa5f/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:24:04 [backends.py:559] Dynamo bytecode transform time: 11.77 s
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:24:05 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/2478f7aa5f/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:24:05 [backends.py:559] Dynamo bytecode transform time: 12.06 s
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:24:13 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 7.987 s
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:24:20 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 14.348 s
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:24:23 [monitor.py:34] torch.compile takes 12.06 s in total
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:24:23 [monitor.py:34] torch.compile takes 11.77 s in total
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:24:25 [gpu_worker.py:276] Available KV cache memory: 56.07 GiB
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:24:25 [gpu_worker.py:276] Available KV cache memory: 56.07 GiB
[1;36m(EngineCore_0 pid=1133875)[0;0m INFO 08-21 16:24:26 [kv_cache_utils.py:849] GPU KV cache size: 146,976 tokens
[1;36m(EngineCore_0 pid=1133875)[0;0m INFO 08-21 16:24:26 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 35.88x
[1;36m(EngineCore_0 pid=1133875)[0;0m INFO 08-21 16:24:26 [kv_cache_utils.py:849] GPU KV cache size: 146,976 tokens
[1;36m(EngineCore_0 pid=1133875)[0;0m INFO 08-21 16:24:26 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 35.88x
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   1%|▏         | 1/67 [00:00<00:11,  5.74it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:09,  6.88it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:09,  6.76it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:09,  6.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   7%|▋         | 5/67 [00:00<00:09,  6.27it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:09,  6.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  10%|█         | 7/67 [00:01<00:09,  6.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:01<00:09,  6.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:01<00:08,  6.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:01<00:08,  6.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  16%|█▋        | 11/67 [00:01<00:09,  6.16it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:01<00:08,  6.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  19%|█▉        | 13/67 [00:02<00:08,  6.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:02<00:08,  6.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:02<00:08,  6.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:02<00:08,  6.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  25%|██▌       | 17/67 [00:02<00:07,  6.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:02<00:07,  6.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  28%|██▊       | 19/67 [00:02<00:07,  6.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:03<00:07,  6.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:03<00:07,  6.29it/s][1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:24:30 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:03<00:07,  6.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  34%|███▍      | 23/67 [00:03<00:07,  6.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:03<00:07,  6.13it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  37%|███▋      | 25/67 [00:03<00:07,  5.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:04<00:07,  5.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:04<00:06,  5.88it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:04<00:06,  5.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  43%|████▎     | 29/67 [00:04<00:06,  5.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:04<00:06,  5.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  46%|████▋     | 31/67 [00:05<00:05,  6.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:05<00:06,  5.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:05<00:06,  5.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:05<00:05,  5.57it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  52%|█████▏    | 35/67 [00:05<00:05,  5.47it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:05<00:05,  5.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  55%|█████▌    | 37/67 [00:06<00:05,  5.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:06<00:05,  5.55it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:06<00:05,  5.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:06<00:04,  5.43it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  61%|██████    | 41/67 [00:06<00:04,  5.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:07<00:04,  5.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  64%|██████▍   | 43/67 [00:07<00:04,  5.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:07<00:02,  7.89it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  70%|███████   | 47/67 [00:07<00:01, 10.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  73%|███████▎  | 49/67 [00:07<00:01, 12.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:07<00:01, 13.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  79%|███████▉  | 53/67 [00:07<00:00, 14.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  82%|████████▏ | 55/67 [00:07<00:00, 15.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:08<00:00, 16.72it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  88%|████████▊ | 59/67 [00:08<00:00, 17.23it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  91%|█████████ | 61/67 [00:08<00:00, 17.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:08<00:00, 18.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:08<00:00, 18.57it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:08<00:00,  7.84it/s]
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:24:35 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP0 pid=1133881)[0;0m INFO 08-21 16:24:36 [gpu_model_runner.py:2708] Graph capturing finished in 9 secs, took 0.71 GiB
[1;36m(EngineCore_0 pid=1133875)[0;0m [1;36m(VllmWorker TP1 pid=1133883)[0;0m INFO 08-21 16:24:36 [gpu_model_runner.py:2708] Graph capturing finished in 9 secs, took 0.71 GiB
[1;36m(EngineCore_0 pid=1133875)[0;0m INFO 08-21 16:24:36 [core.py:214] init engine (profile, create kv cache, warmup model) took 43.23 seconds
INFO 08-21 16:24:36 [llm.py:298] Supported_tasks: ['generate']
Translating 231 files...
  0%|          | 0/231 [00:00<?, ?it/s]['from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', 'import sys\n', 'import math\n', 'debug = False\n', '\n', 'def Func_log_0(text):\n', '    if debug:\n', '        print(text)\n', '\n', 'def Func_parse_input_0(lines_as_string=None):\n', '    global debug\n', '    lines = []\n', '    if lines_as_string is None:\n', '        debug = False\n', '        lines.append(input())\n', '    else:\n', '        debug = True\n', "        lines = [e for e in lines_as_string.split('\\n')][1:-1]\n", "    c = [e for e in lines[0].split(' ')][0]\n", '    return (c,)\n', '\n', 'def Func_solve_0(c):\n', "    a = 'abcdefghijklmnopqrstuvwxyz'\n", '    i = a.index(c)\n', '    return a[i + 1]\n', '\n', 'def main():\n', '    queue_solve0 = queue.Queue()\n', '\n', '    def solve_thread(queue):\n', '        result = Func_solve_0(*Func_parse_input_0())\n', '        queue.put(result)\n', '    thread_solve0 = threading.Thread(target=solve_thread, args=(queue_solve0,))\n', '    thread_solve0.start()\n', '    ttest_ind([52, 43, 77], [98, 63, 8])\n', '    thread_solve0.join()\n', '    result_solve0 = queue_solve0.get()\n', '    result = result_solve0\n', '    if isinstance(result, list):\n', '        loop_counter = 411\n', '        max_loop_iterations = 410\n', '\n', '        def print_results(LoopIndexOut, stop, step):\n', '            if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '                return\n', '            for r in result:\n', "                print('%s' % r, sep='')\n", '            print_results(LoopIndexOut + step, stop, step)\n', '        print_results(0, loop_counter // max_loop_iterations, 1)\n', '    else:\n', "        print('%s' % result, sep='')\n", "if __name__ == '__main__':\n", '    main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', 'd', 'e', 'b', 'u', 'g', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'g', '_', '0', '(', 't', 'e', 'x', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', 'e', 'b', 'u', 'g', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 't', 'e', 'x', 't', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'p', 'a', 'r', 's', 'e', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', 'l', 'i', 'n', 'e', 's', '_', 'a', 's', '_', 's', 't', 'r', 'i', 'n', 'g', '=', 'N', 'o', 'n', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'd', 'e', 'b', 'u', 'g', '\n', ' ', ' ', ' ', ' ', 'l', 'i', 'n', 'e', 's', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'i', 'n', 'e', 's', '_', 'a', 's', '_', 's', 't', 'r', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'N', 'o', 'n', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'b', 'u', 'g', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'i', 'n', 'e', 's', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'b', 'u', 'g', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'i', 'n', 'e', 's', ' ', '=', ' ', '[', 'e', ' ', 'f', 'o', 'r', ' ', 'e', ' ', 'i', 'n', ' ', 'l', 'i', 'n', 'e', 's', '_', 'a', 's', '_', 's', 't', 'r', 'i', 'n', 'g', '.', 's', 'p', 'l', 'i', 't', '(', "'", '\\', 'n', "'", ')', ']', '[', '1', ':', '-', '1', ']', '\n', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', '[', 'e', ' ', 'f', 'o', 'r', ' ', 'e', ' ', 'i', 'n', ' ', 'l', 'i', 'n', 'e', 's', '[', '0', ']', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ']', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', 'c', ',', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', "'", 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', "'", '\n', ' ', ' ', ' ', ' ', 'i', ' ', '=', ' ', 'a', '.', 'i', 'n', 'd', 'e', 'x', '(', 'c', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', '[', 'i', ' ', '+', ' ', '1', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 's', 'o', 'l', 'v', 'e', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 's', 'o', 'l', 'v', 'e', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', '*', 'F', 'u', 'n', 'c', '_', 'p', 'a', 'r', 's', 'e', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 's', 'o', 'l', 'v', 'e', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 's', 'o', 'l', 'v', 'e', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 's', 'o', 'l', 'v', 'e', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 's', 'o', 'l', 'v', 'e', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 's', 'o', 'l', 'v', 'e', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 's', 'o', 'l', 'v', 'e', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 's', 'o', 'l', 'v', 'e', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 's', 'o', 'l', 'v', 'e', '0', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 's', 'i', 'n', 's', 't', 'a', 'n', 'c', 'e', '(', 'r', 'e', 's', 'u', 'l', 't', ',', ' ', 'l', 'i', 's', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '0', ' ', '=', ' ', '4', '1', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '0', ' ', '=', ' ', '4', '1', '0', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '4', '2', '_', '8', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'r', '_', '1', ' ', 'i', 'n', ' ', 'r', 'e', 's', 'u', 'l', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", '%', 's', "'", ' ', '%', ' ', 'n', 'e', 'w', 'r', '_', '1', ',', ' ', 's', 'e', 'p', '=', "'", "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '4', '2', '_', '8', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '4', '2', '_', '8', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '0', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '0', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", '%', 's', "'", ' ', '%', ' ', 'r', 'e', 's', 'u', 'l', 't', ',', ' ', 's', 'e', 'p', '=', "'", "'", ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'm', 'a', 'i', 'n', '(', ')', '\n']
['from sklearn.utils import shuffle\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def integer_division(m, n):\n', "    HTTPConnection('google.com', port=80)\n", "    base64.b64encode(b'14108434838708363808')\n", "    parse('2025-02-15 20:18:35')\n", '    ttest_ind([97, 59, 24], [12, 12, 12])\n', '    return n // m\n', '\n', '\n', 'shuffle([20, 33, 4])\n', '(n, m) = map(int, input().split())\n', 'q = integer_division(m, n)\n', 'remainder = n % m\n', 'a = [q] * m\n', 'time.sleep(0.17)\n', 'loop_iterations = [681][0]\n', 'maximum_loop_counter = 680\n', 'Fernet.generate_key()\n', 'for LoopIndexOut in range(loop_iterations // maximum_loop_counter):\n', '\n', '    def recursive_step(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        a[i] += 1\n', '        recursive_step(i + step, stop, step)\n', '    recursive_step(0, remainder, 1)\n', 'else:\n', '    pass\n', 'datetime.datetime.now()\n', 'for i in range(m):\n', "    print(a[i], end=' ')\n", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import sys\n', '(N, K) = map(int, input().split())\n', 'lst = list(map(int, input().split()))\n', 'lst_p = []\n', 'lst_m = []\n', 'limit = 275\n', 'step_size = 274\n', 'is_valid = 164\n', 'is_complete = 740\n', 'is_ready = 410\n', 'is_active = 300\n', 'has_data = 520\n', 'has_new_data = 29\n', 'for LoopIndexOut in range(limit // step_size):\n', '    for i in range(N):\n', '        if has_data & has_new_data:\n', '            if is_ready & is_active:\n', '                if is_valid & is_complete:\n', '                    if lst[i] == 0:\n', '                        K = K - 1\n', '        if lst[i] > 0:\n', '            lst_p += [lst[i]]\n', '        elif lst[i] < 0:\n', '            lst_m += [lst[i]]\n', 'p = 0\n', 'm = 0\n', '(x, y) = (0, len(lst_m) - 1)\n', 'lastx = len(lst_p)\n', 'lasty = len(lst_m)\n', '\n', 'def Func_check_0(k):\n', '    ans = 10 ** 9\n', '    for j in range(0, k + 1):\n', '        if j > lastx or k - j > lasty:\n', '            pass\n', '        else:\n', '            if j == 0:\n', '                p = 0\n', '            else:\n', '                p = lst_p[j - 1]\n', '            if k - j == 0:\n', '                m = 0\n', '            else:\n', '                m = lst_m[lasty - (k - j)]\n', '            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))\n', '    return ans\n', 'print(Func_check_0(K))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', '(', 'N', ',', ' ', 'K', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'l', 's', 't', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'l', 's', 't', '_', 'p', ' ', '=', ' ', '[', ']', '\n', 'l', 's', 't', '_', 'm', ' ', '=', ' ', '[', ']', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '2', '7', '5', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', ' ', '2', '7', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '1', '6', '4', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '7', '4', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '4', '1', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ' ', '=', ' ', '3', '0', '0', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 's', 't', '[', 'i', ']', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'K', ' ', '=', ' ', 'K', ' ', '-', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 's', 't', '[', 'i', ']', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 's', 't', '_', 'p', ' ', '+', '=', ' ', '[', 'l', 's', 't', '[', 'i', ']', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'l', 's', 't', '[', 'i', ']', ' ', '<', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 's', 't', '_', 'm', ' ', '+', '=', ' ', '[', 'l', 's', 't', '[', 'i', ']', ']', '\n', 'p', ' ', '=', ' ', '0', '\n', 'm', ' ', '=', ' ', '0', '\n', '(', 'x', ',', ' ', 'y', ')', ' ', '=', ' ', '(', '0', ',', ' ', 'l', 'e', 'n', '(', 'l', 's', 't', '_', 'm', ')', ' ', '-', ' ', '1', ')', '\n', 'l', 'a', 's', 't', 'x', ' ', '=', ' ', 'l', 'e', 'n', '(', 'l', 's', 't', '_', 'p', ')', '\n', 'l', 'a', 's', 't', 'y', ' ', '=', ' ', 'l', 'e', 'n', '(', 'l', 's', 't', '_', 'm', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'h', 'e', 'c', 'k', '_', '0', '(', 'k', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '5', ',', ' ', '5', ',', ' ', '3', '1', ']', ',', ' ', '[', '1', '3', ',', ' ', '9', '4', ',', ' ', '8', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '0', ',', ' ', 'k', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '>', ' ', 'l', 'a', 's', 't', 'x', ' ', 'o', 'r', ' ', 'k', ' ', '-', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '>', ' ', 'l', 'a', 's', 't', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', ' ', '=', ' ', 'l', 's', 't', '_', 'p', '[', 'n', 'e', 'w', 'j', '_', '1', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'k', ' ', '-', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', ' ', '=', ' ', 'l', 's', 't', '_', 'm', '[', 'l', 'a', 's', 't', 'y', ' ', '-', ' ', '(', 'k', ' ', '-', ' ', 'n', 'e', 'w', 'j', '_', '1', ')', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'm', 'i', 'n', '(', 'a', 'n', 's', ',', ' ', '2', ' ', '*', ' ', 'p', ' ', '+', ' ', 'a', 'b', 's', '(', 'm', ')', ',', ' ', 'p', ' ', '+', ' ', '2', ' ', '*', ' ', 'a', 'b', 's', '(', 'm', ')', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'n', 's', '\n', 'p', 'r', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'c', 'h', 'e', 'c', 'k', '_', '0', '(', 'K', ')', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', '    ttest_ind([14, 63, 9], [50, 73, 95])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', "    base64.b64encode(b'65731653332977759143')\n", '    return dec_result\n', '\n', '@my_decorator\n', 'def linear_combination(x, iterations, variable_10_23, d):\n', '    return d + (iterations - variable_10_23) * x\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import sys\n', 'read = sys.stdin.buffer.read\n', 'readline = sys.stdin.buffer.readline\n', 'readlines = sys.stdin.buffer.readlines\n', '(iterations, d, x) = map(int, read().split())\n', '\n', 'def main(iterations, d, x):\n', '    shuffle([56, 62, 88])\n', "    HTTPConnection('google.com', port=80)\n", '    datetime.datetime.now()\n', '    Fernet.generate_key()\n', '    time.sleep(0.27)\n', "    parse('2025-02-15 20:27:49')\n", '    try:\n', '        ret = [0][0]\n', '        remainder = 856\n', '        divisor = 855\n', '        while remainder % divisor == 1:\n', '            remainder = remainder + 1\n', '            while iterations:\n', '                variable_10_23 = 0.5\n', '                ret += linear_combination(x, iterations, variable_10_23, d)\n', '                d = d + d / iterations + 5 * x / (2 * iterations)\n', '                x += 2 * x / iterations\n', '                iterations -= 1\n', '        else:\n', '            pass\n', '        return ret\n', '    except:\n', '        pass\n', 'print(main(iterations, d, x))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import threading\n', 'import queue\n', 'import sys, re\n', 'from collections import deque, defaultdict, Counter\n', 'from math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n', 'from itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\n', 'from operator import itemgetter, mul\n', 'from copy import deepcopy, copy\n', 'from string import ascii_lowercase, ascii_uppercase, digits\n', 'from bisect import bisect, bisect_left, insort, insort_left\n', 'from heapq import heappush, heappop\n', 'from functools import reduce\n', '\n', 'def Func_input_0():\n', '    return sys.stdin.readline().strip()\n', '\n', 'def INT():\n', '    return int(Func_input_0())\n', '\n', 'def MAP():\n', '    return map(int, Func_input_0().split())\n', '\n', 'def LIST():\n', '    return list(map(int, Func_input_0().split()))\n', '\n', 'def ZIP(n):\n', '    return zip(*(MAP() for _ in range(n)))\n', 'sys.setrecursionlimit(10 ** 9)\n', "INF = float('inf')\n", 'mod = 10 ** 9 + 7\n', 'import numpy as np\n', 'queue_INT0 = queue.Queue()\n', '\n', 'def INT_thread(queue):\n', '    result = INT()\n', '    queue.put(result)\n', 'input_thread = threading.Thread(target=INT_thread, args=(queue_INT0,))\n', 'input_thread.start()\n', 'input_thread.join()\n', 'result_INT0 = queue_INT0.get()\n', 'N = result_INT0\n', 'S = [Func_input_0() for _ in range(N)]\n', "march = ['M', 'A', 'R', 'C', 'H']\n", 'march_lis = [0] * 5\n', 'check3 = 111\n', 'check1 = 134\n', 'check2 = 843\n', 'check4 = 771\n', 'for s in S:\n', '    if check2 & check4:\n', '        if check3 & check1:\n', '            if s[0].upper() in march:\n', '                march_lis[march.index(s[0].upper())] += 1\n', 'ans = 0\n', 'for (x, y, count3) in combinations(march_lis, 3):\n', '    ans += x * y * count3\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', ',', ' ', 'r', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', ',', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', ',', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'e', 'i', 'l', ',', ' ', 's', 'q', 'r', 't', ',', ' ', 'h', 'y', 'p', 'o', 't', ',', ' ', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'a', 'l', ',', ' ', 'p', 'i', ',', ' ', 's', 'i', 'n', ',', ' ', 'c', 'o', 's', ',', ' ', 'r', 'a', 'd', 'i', 'a', 'n', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 'c', 'c', 'u', 'm', 'u', 'l', 'a', 't', 'e', ',', ' ', 'p', 'e', 'r', 'm', 'u', 't', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', '_', 'w', 'i', 't', 'h', '_', 'r', 'e', 'p', 'l', 'a', 'c', 'e', 'm', 'e', 'n', 't', ',', ' ', 'p', 'r', 'o', 'd', 'u', 'c', 't', ',', ' ', 'g', 'r', 'o', 'u', 'p', 'b', 'y', '\n', 'f', 'r', 'o', 'm', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'o', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', ',', ' ', 'm', 'u', 'l', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'p', 'y', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'e', 'p', 'c', 'o', 'p', 'y', ',', ' ', 'c', 'o', 'p', 'y', '\n', 'f', 'r', 'o', 'm', ' ', 's', 't', 'r', 'i', 'n', 'g', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 's', 'c', 'i', 'i', '_', 'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', ',', ' ', 'a', 's', 'c', 'i', 'i', '_', 'u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', ',', ' ', 'd', 'i', 'g', 'i', 't', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'b', 'i', 's', 'e', 'c', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', ',', ' ', 'i', 'n', 's', 'o', 'r', 't', ',', ' ', 'i', 'n', 's', 'o', 'r', 't', '_', 'l', 'e', 'f', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 'e', 'a', 'p', 'q', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', ',', ' ', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '\n', 'f', 'r', 'o', 'm', ' ', 'f', 'u', 'n', 'c', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'r', 'e', 'd', 'u', 'c', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'I', 'N', 'T', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'M', 'A', 'P', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', 'S', 'T', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'Z', 'I', 'P', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'z', 'i', 'p', '(', '*', '(', 'M', 'A', 'P', '(', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ')', ')', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '9', ')', '\n', 'I', 'N', 'F', ' ', '=', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', 'N', 'T', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'I', 'N', 'T', '_', '0', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', '_', '1', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'I', 'N', 'T', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', ',', ')', ')', '\n', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', '_', '1', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', '_', '1', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'I', 'N', 'T', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'N', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'I', 'N', 'T', '0', '\n', 'S', ' ', '=', ' ', '[', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ']', '\n', 'm', 'a', 'r', 'c', 'h', ' ', '=', ' ', '[', "'", 'M', "'", ',', ' ', "'", 'A', "'", ',', ' ', "'", 'R', "'", ',', ' ', "'", 'C', "'", ',', ' ', "'", 'H', "'", ']', '\n', 'm', 'a', 'r', 'c', 'h', '_', 'l', 'i', 's', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', '5', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '6', ' ', '=', ' ', '1', '1', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '6', ' ', '=', ' ', '1', '3', '4', '\n', 'f', 'o', 'r', ' ', 's', ' ', 'i', 'n', ' ', 'S', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '6', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '[', '0', ']', '.', 'u', 'p', 'p', 'e', 'r', '(', ')', ' ', 'i', 'n', ' ', 'm', 'a', 'r', 'c', 'h', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'a', 'r', 'c', 'h', '_', 'l', 'i', 's', '[', 'm', 'a', 'r', 'c', 'h', '.', 'i', 'n', 'd', 'e', 'x', '(', 's', '[', '0', ']', '.', 'u', 'p', 'p', 'e', 'r', '(', ')', ')', ']', ' ', '+', '=', ' ', '1', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', '(', 'x', ',', ' ', 'y', ',', ' ', 'z', ')', ' ', 'i', 'n', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', '(', 'm', 'a', 'r', 'c', 'h', '_', 'l', 'i', 's', ',', ' ', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'x', ' ', '*', ' ', 'y', ' ', '*', ' ', 'z', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import threading\n', 'import queue\n', 'import threading\n', 'import queue\n', 'import sys, re\n', 'from collections import deque, defaultdict, Counter\n', 'from math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n', 'from itertools import groupby, accumulate, permutations, combinations, product\n', 'from operator import itemgetter, mul\n', 'from copy import deepcopy\n', 'from string import ascii_lowercase, ascii_uppercase, digits\n', 'from bisect import bisect, bisect_left\n', 'from heapq import heappush, heappop\n', 'from functools import reduce\n', '\n', 'def Func_input_0():\n', '    return sys.stdin.readline().strip()\n', '\n', 'def INT():\n', '    return int(Func_input_0())\n', '\n', 'def MAP():\n', '    return map(int, Func_input_0().split())\n', '\n', 'def LIST():\n', '    return list(map(int, Func_input_0().split()))\n', '\n', 'def ZIP(n):\n', '    return zip(*(MAP() for _ in range(n)))\n', 'sys.setrecursionlimit(10 ** 9)\n', "infinity = float('inf')\n", 'mod = 10 ** 9 + 7\n', 'queue_INT0 = queue.Queue()\n', '\n', 'def INT_thread(queue):\n', '    result = INT()\n', '    queue.put(result)\n', 'thread_INT0 = threading.Thread(target=INT_thread, args=(queue_INT0,))\n', 'thread_INT0.start()\n', 'thread_INT0.join()\n', 'result_INT0 = queue_INT0.get()\n', 'N = result_INT0\n', 'queue_LIST0 = queue.Queue()\n', '\n', 'def LIST_thread(queue):\n', '    result = LIST()\n', '    queue.put(result)\n', 'thread_LIST0 = threading.Thread(target=LIST_thread, args=(queue_LIST0,))\n', 'thread_LIST0.start()\n', 'thread_LIST0.join()\n', 'result_LIST0 = queue_LIST0.get()\n', 'A = result_LIST0\n', 'A = [k for (k, g) in groupby(A)]\n', 'N = len(A)\n', 'i = 1\n', 'ans = 0\n', 'while i < N - 1:\n', '    has_adjacent_diff = 378\n', '    is_peak = 192\n', '    is_valley = 189\n', '    has_extrema = 914\n', '    if has_adjacent_diff & is_peak:\n', '        if is_valley & has_extrema:\n', '            if A[i - 1] < A[i] > A[i + 1] or A[i - 1] > A[i] < A[i + 1]:\n', '                ans = ans + 1\n', '                i = i + 1\n', '    i += 1\n', 'print(ans + 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', ',', ' ', 'r', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', ',', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', ',', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'e', 'i', 'l', ',', ' ', 's', 'q', 'r', 't', ',', ' ', 'h', 'y', 'p', 'o', 't', ',', ' ', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'a', 'l', ',', ' ', 'p', 'i', ',', ' ', 's', 'i', 'n', ',', ' ', 'c', 'o', 's', ',', ' ', 'r', 'a', 'd', 'i', 'a', 'n', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'g', 'r', 'o', 'u', 'p', 'b', 'y', ',', ' ', 'a', 'c', 'c', 'u', 'm', 'u', 'l', 'a', 't', 'e', ',', ' ', 'p', 'e', 'r', 'm', 'u', 't', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'p', 'r', 'o', 'd', 'u', 'c', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'o', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', ',', ' ', 'm', 'u', 'l', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'p', 'y', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'e', 'p', 'c', 'o', 'p', 'y', '\n', 'f', 'r', 'o', 'm', ' ', 's', 't', 'r', 'i', 'n', 'g', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 's', 'c', 'i', 'i', '_', 'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', ',', ' ', 'a', 's', 'c', 'i', 'i', '_', 'u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', ',', ' ', 'd', 'i', 'g', 'i', 't', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'b', 'i', 's', 'e', 'c', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 'e', 'a', 'p', 'q', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', ',', ' ', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '\n', 'f', 'r', 'o', 'm', ' ', 'f', 'u', 'n', 'c', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'r', 'e', 'd', 'u', 'c', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', 'N', 'T', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '6', ',', ' ', '8', ',', ' ', '7', '8', ']', ',', ' ', '[', '7', '2', ',', ' ', '7', '7', ',', ' ', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'M', 'A', 'P', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', 'S', 'T', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'Z', 'I', 'P', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'z', 'i', 'p', '(', '*', '(', 'M', 'A', 'P', '(', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ')', ')', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '9', ')', '\n', 'n', 'e', 'w', 'I', 'N', 'F', '_', '1', ' ', '=', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', 'N', 'T', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'I', 'N', 'T', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'I', 'N', 'T', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'I', 'N', 'T', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'N', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'I', 'N', 'T', '0', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', 'S', 'T', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', 'S', 'T', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'L', 'I', 'S', 'T', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', 'S', 'T', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'L', 'I', 'S', 'T', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', 'S', 'T', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', 'S', 'T', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', 'S', 'T', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'L', 'I', 'S', 'T', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', 'S', 'T', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'A', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'L', 'I', 'S', 'T', '0', '\n', 'A', ' ', '=', ' ', '[', 'k', ' ', 'f', 'o', 'r', ' ', '(', 'k', ',', ' ', 'g', ')', ' ', 'i', 'n', ' ', 'g', 'r', 'o', 'u', 'p', 'b', 'y', '(', 'A', ')', ']', '\n', 'N', ' ', '=', ' ', 'l', 'e', 'n', '(', 'A', ')', '\n', 'i', ' ', '=', ' ', '1', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'i', ' ', '<', ' ', 'N', ' ', '-', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '8', ' ', '=', ' ', '1', '8', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '8', ' ', '=', ' ', '9', '1', '4', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'A', '[', 'i', ' ', '-', ' ', '1', ']', ' ', '<', ' ', 'A', '[', 'i', ']', ' ', '>', ' ', 'A', '[', 'i', ' ', '+', ' ', '1', ']', ' ', 'o', 'r', ' ', 'A', '[', 'i', ' ', '-', ' ', '1', ']', ' ', '>', ' ', 'A', '[', 'i', ']', ' ', '<', ' ', 'A', '[', 'i', ' ', '+', ' ', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'a', 'n', 's', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ' ', '+', ' ', '1', ')', '\n']
['def multiply_11788(arg0, arg1):\n', '    return arg0 * arg1\n', '\n', 'def multiply_49480(arg0, arg1):\n', '    return multiply_11788(arg0, arg1)\n', '\n', 'def multiply_60047(arg0, arg1):\n', '    return multiply_49480(arg0, arg1)\n', '\n', 'def multiply_2333(arg0, arg1):\n', '    return multiply_60047(arg0, arg1)\n', '\n', 'def multiply_32363(arg0, arg1):\n', '    return multiply_2333(arg0, arg1)\n', '\n', 'def multiply_97613(arg0, arg1):\n', '    return multiply_32363(arg0, arg1)\n', '\n', 'def multiply_15114(arg0, arg1):\n', '    return multiply_97613(arg0, arg1)\n', '\n', 'def multiply_26514(arg0, arg1):\n', '    return multiply_15114(arg0, arg1)\n', '\n', 'def multiply_16709(arg0, arg1):\n', '    return multiply_26514(arg0, arg1)\n', '\n', 'def multiply_51574(arg0, arg1):\n', '    return multiply_16709(arg0, arg1)\n', '\n', 'def multiply_84756(arg0, arg1):\n', '    return multiply_51574(arg0, arg1)\n', '\n', 'def multiply_76688(arg0, arg1):\n', '    return multiply_84756(arg0, arg1)\n', '\n', 'def multiply_65059(arg0, arg1):\n', '    return multiply_76688(arg0, arg1)\n', '\n', 'def multiply_97533(arg0, arg1):\n', '    return multiply_65059(arg0, arg1)\n', '\n', 'def multiply_44019(arg0, arg1):\n', '    return multiply_97533(arg0, arg1)\n', '\n', 'def multiply_65639(arg0, arg1):\n', '    return multiply_44019(arg0, arg1)\n', '\n', 'def multiply_40954(arg0, arg1):\n', '    return multiply_65639(arg0, arg1)\n', '\n', 'def multiply_55767(arg0, arg1):\n', '    return multiply_40954(arg0, arg1)\n', '\n', 'def multiply_45048(arg0, arg1):\n', '    return multiply_55767(arg0, arg1)\n', '\n', 'def multiply_27636(arg0, arg1):\n', '    return multiply_45048(arg0, arg1)\n', '\n', 'def multiply_16831(arg0, arg1):\n', '    return multiply_27636(arg0, arg1)\n', '\n', 'def multiply_5257(arg0, arg1):\n', '    return multiply_16831(arg0, arg1)\n', '\n', 'def multiply_1152(arg0, arg1):\n', '    return multiply_5257(arg0, arg1)\n', '\n', 'def multiply_3427(arg0, arg1):\n', '    return multiply_1152(arg0, arg1)\n', '\n', 'def multiply_97066(arg0, arg1):\n', '    return multiply_3427(arg0, arg1)\n', '\n', 'def multiply_56034(arg0, arg1):\n', '    return multiply_97066(arg0, arg1)\n', '\n', 'def multiply_32661(arg0, arg1):\n', '    return multiply_56034(arg0, arg1)\n', '\n', 'def multiply_99516(arg0, arg1):\n', '    return multiply_32661(arg0, arg1)\n', '\n', 'def multiply_36487(arg0, arg1):\n', '    return multiply_99516(arg0, arg1)\n', '\n', 'def multiply_3647(arg0, arg1):\n', '    return multiply_36487(arg0, arg1)\n', 'import time\n', 'import datetime\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '\n', '@my_decorator\n', 'def calculate_ttest(a, b):\n', '    datetime.datetime.now()\n', '    ttest_ind([61, 80, 54], [100, 86, 20])\n', '    time.sleep(0.2)\n', '    return multiply_3647(a, b)\n', 'from sklearn.utils import shuffle\n', 'shuffle([27, 4, 67])\n', 'num_input = int(input())\n', 'print((calculate_ttest(num_input, 2) + 1) // 3)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from scipy.stats import ttest_ind\n', 'N = int(input())\n', '\n', 'def Func_aaa_0(n):\n', '    is_valid = 201\n', '    is_positive = 634\n', '    is_negative = 168\n', '    is_neutral = 914\n', '    if is_valid & is_positive:\n', '        if is_negative & is_neutral:\n', '            if int(n) > N:\n', '                return 0\n', '    ttest_ind([35, 52, 72], [52, 59, 18])\n', "    result = 1 if set(str(int(n))) == {'7', '5', '3'} else 0\n", "    for i in '753':\n", '        result += Func_aaa_0(n + i)\n', '    return result\n', "print(Func_aaa_0('0'))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'N', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'a', 'a', 'a', '_', '0', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', '1', '6', '8', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', ' ', '9', '1', '4', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'n', 't', '(', 'n', ')', ' ', '>', ' ', 'N', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '0', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '5', ',', ' ', '5', '2', ',', ' ', '7', '2', ']', ',', ' ', '[', '5', '2', ',', ' ', '5', '9', ',', ' ', '1', '8', ']', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', '1', ' ', 'i', 'f', ' ', 's', 'e', 't', '(', 's', 't', 'r', '(', 'i', 'n', 't', '(', 'n', ')', ')', ')', ' ', '=', '=', ' ', '{', "'", '7', "'", ',', ' ', "'", '5', "'", ',', ' ', "'", '3', "'", '}', ' ', 'e', 'l', 's', 'e', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', "'", '7', '5', '3', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '+', '=', ' ', 'F', 'u', 'n', 'c', '_', 'a', 'a', 'a', '_', '0', '(', 'n', ' ', '+', ' ', 'i', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'a', 'a', 'a', '_', '0', '(', "'", '0', "'", ')', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def increment_upper_count(upper_increment, cu):\n', '    return cu + upper_increment\n', 'import threading\n', 'import queue\n', '\n', 'def increment_lower_count(lower_increment, cl):\n', '    return cl + lower_increment\n', 'from scipy.stats import ttest_ind\n', 'txt = input()\n', 'cu = 0\n', 'cl = 0\n', 'for character in txt:\n', '    upper_increment = 1\n', '    if character.islower():\n', '        lower_increment = 1\n', '        lower_queue = queue.Queue()\n', '\n', '        def lower_count_thread_function(queue):\n', '            intermediate_result = increment_lower_count(lower_increment, cl)\n', '            queue.put(intermediate_result)\n', '        lower_thread = threading.Thread(target=lower_count_thread_function, args=(lower_queue,))\n', '        lower_thread.start()\n', '        lower_thread.join()\n', '        result_increment_lower_count0 = lower_queue.get()\n', '        cl = result_increment_lower_count0\n', '    else:\n', '        upper_queue = queue.Queue()\n', '\n', '        def increment_upper_count_thread(queue):\n', '            intermediate_result = increment_upper_count(upper_increment, cu)\n', '            queue.put(intermediate_result)\n', '        upper_thread = threading.Thread(target=increment_upper_count_thread, args=(upper_queue,))\n', '        upper_thread.start()\n', '        upper_thread.join()\n', '        upper_count_result = upper_queue.get()\n', '        cu = upper_count_result\n', 'ttest_ind([97, 61, 53], [27, 100, 71])\n', 'if cu > cl:\n', '    out = txt.upper()\n', 'else:\n', '    out = txt.lower()\n', 'print(out)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '=', ' ', '8', '3', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ' ', '=', ' ', '8', '3', '5', '\n', 't', 'x', 't', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'c', 'u', ' ', '=', ' ', '0', '\n', 'c', 'l', ' ', '=', ' ', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '4', '9', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '4', '8', '9', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'c', 'l', ',', ' ', 'c', 'u', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'z', '_', '1', ' ', 'i', 'n', ' ', 't', 'x', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'z', '_', '1', '.', 'i', 's', 'l', 'o', 'w', 'e', 'r', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'l', ' ', '=', ' ', 'c', 'l', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'u', ' ', '=', ' ', 'c', 'u', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '3', ',', ' ', '5', '9', ',', ' ', '7', '3', ']', ',', ' ', '[', '4', '6', ',', ' ', '5', '4', ',', ' ', '8', '7', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ',', ' ', '1', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'u', ' ', '>', ' ', 'c', 'l', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', 'u', 't', ' ', '=', ' ', 't', 'x', 't', '.', 'u', 'p', 'p', 'e', 'r', '(', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', 'u', 't', ' ', '=', ' ', 't', 'x', 't', '.', 'l', 'o', 'w', 'e', 'r', '(', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'o', 'u', 't', ')', '\n']
['import numpy as np\n', 'import threading\n', 'import queue\n', '\n', 'def concatenate_arrays(sub_array_prefix, variable_3_17, variable_6_17):\n', '    return sub_array_prefix + variable_6_17 + variable_3_17\n', 'CONDITION_CHECK_1 = 5\n', 'CONDITION_CHECK_2 = 635\n', 'array_size = int(input())\n', 'A = list(map(int, input().split()))\n', '(mn, mx) = (array_size + 1, -1)\n', 'outer_loop_limit = 534\n', 'inner_loop_limit = 533\n', 'for LoopIndexOut in range(outer_loop_limit // inner_loop_limit):\n', '\n', '    def recursive_loop(i, stop, step):\n', '        global mx, mn\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        if i + 1 != A[i]:\n', '            mn = np.min(np.array([mn, i]))\n', '            mx = max(mx, i)\n', '        recursive_loop(i + step, stop, step)\n', '    recursive_loop(0, array_size, 1)\n', 'variable_3_17 = A[mx + 1:]\n', 'sub_array_prefix = A[:mn]\n', 'variable_6_17 = A[mn:mx + 1][::-1]\n', 'sub_array_original = A[mn:mx + 1]\n', 'if CONDITION_CHECK_1 & CONDITION_CHECK_2:\n', '    if mx == -1:\n', "        print('0 0')\n", '    else:\n', '        queue_concatenate_arrays0 = queue.Queue()\n', '\n', '        def concatenate_arrays_thread(queue):\n', '            result = concatenate_arrays(sub_array_prefix, variable_3_17, variable_6_17)\n', '            queue.put(result)\n', '        thread_concatenate_arrays0 = threading.Thread(target=concatenate_arrays_thread, args=(queue_concatenate_arrays0,))\n', '        thread_concatenate_arrays0.start()\n', '        thread_concatenate_arrays0.join()\n', '        result_concatenate_arrays0 = queue_concatenate_arrays0.get()\n', '        A = result_concatenate_arrays0\n', '        if sorted(A) == A:\n', '            print(mn + 1, mx + 1)\n', '        else:\n', "            print('0 0')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'n', 'e', 'w', 'N', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'A', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '(', 'm', 'n', ',', ' ', 'm', 'x', ')', ' ', '=', ' ', '(', 'n', 'e', 'w', 'N', '_', '1', ' ', '+', ' ', '1', ',', ' ', '-', '1', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '8', ',', ' ', '4', '5', ',', ' ', '7', '3', ']', ',', ' ', '[', '6', ',', ' ', '6', '9', ',', ' ', '1', '0', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'm', 'x', ',', ' ', 'm', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '+', ' ', '1', ' ', '!', '=', ' ', 'A', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'n', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'm', 'n', ',', ' ', 'i', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'x', ' ', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'm', 'x', ',', ' ', 'i', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'N', '_', '1', ',', ' ', '1', ')', '\n', 'i', 'f', ' ', 'm', 'x', ' ', '=', '=', ' ', '-', '1', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", '0', ' ', '0', "'", ')', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'A', ' ', '=', ' ', 'A', '[', ':', 'm', 'n', ']', ' ', '+', ' ', 'A', '[', 'm', 'n', ':', 'm', 'x', ' ', '+', ' ', '1', ']', '[', ':', ':', '-', '1', ']', ' ', '+', ' ', 'A', '[', 'm', 'x', ' ', '+', ' ', '1', ':', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', 'A', ')', ' ', '=', '=', ' ', 'A', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'm', 'n', ' ', '+', ' ', '1', ',', ' ', 'm', 'x', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", '0', ' ', '0', "'", ')', '\n']
['import threading\n', 'import queue\n', '(N, K) = map(int, input().split())\n', 'S = input()\n', 'aaaa = False\n', 'if K >= 15:\n', '    aaaa = True\n', 'elif 2 ** K >= N:\n', '    aaaa = True\n', 'if aaaa:\n', '    print(min(S) * N)\n', '    exit()\n', '\n', 'def Func_get_last_dict_0(s_str):\n', '    U = s_str + s_str[::-1]\n', '    c = min(s_str)\n', '    p = U.index(c)\n', '    minindex = p\n', '    p += 1\n', '    inner_loop_counter1 = 357\n', '    inner_loop_counter2 = 356\n', '    while inner_loop_counter1 % inner_loop_counter2 == 1:\n', '        inner_loop_counter1 += 1\n', '        while p <= N:\n', '            if U[p] == c:\n', '                if check_normal_dict(U, minindex, p):\n', '                    minindex = p\n', '            p += 1\n', '    return U[minindex:minindex + N]\n', '\n', 'def check_normal_dict(u, pointer1, pointer2):\n', '    comparison_loop_limit = 67\n', '    outer_loop_counter = 66\n', '    for LoopIndexOut in range(comparison_loop_limit // outer_loop_counter):\n', '        for i in range(N):\n', '            if u[pointer1 + i] > u[pointer2 + i]:\n', '                return True\n', '            elif u[pointer1 + i] < u[pointer2 + i]:\n', '                return False\n', '    return False\n', 'queue_get_last_dict0 = queue.Queue()\n', '\n', 'def get_last_dict_thread(queue):\n', '    result = Func_get_last_dict_0(S)\n', '    queue.put(result)\n', 'thread_get_min_string = threading.Thread(target=get_last_dict_thread, args=(queue_get_last_dict0,))\n', 'thread_get_min_string.start()\n', 'thread_get_min_string.join()\n', 'result_get_last_dict0 = queue_get_last_dict0.get()\n', 'S = result_get_last_dict0\n', 'if K == 1:\n', '    print(S)\n', 'else:\n', '    count = 0\n', '    for c in S:\n', '        if c == S[0]:\n', '            count += 1\n', '        else:\n', '            break\n', '    if count * 2 ** (K - 1) >= N:\n', '        print(S[0] * N)\n', '    else:\n', '        S = S[0] * (count * (2 ** (K - 1) - 1)) + S\n', '        print(S[0:N])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '(', 'N', ',', ' ', 'K', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'S', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'a', 'a', 'a', 'a', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', 'i', 'f', ' ', 'K', ' ', '>', '=', ' ', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', 'a', 'a', 'a', 'a', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', 'e', 'l', 'i', 'f', ' ', '2', ' ', '*', '*', ' ', 'K', ' ', '>', '=', ' ', 'N', ':', '\n', ' ', ' ', ' ', ' ', 'a', 'a', 'a', 'a', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', 'i', 'f', ' ', 'a', 'a', 'a', 'a', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'm', 'i', 'n', '(', 'S', ')', ' ', '*', ' ', 'N', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '_', '0', '(', 's', '_', 's', 't', 'r', ')', ':', '\n', ' ', ' ', ' ', ' ', 'U', ' ', '=', ' ', 's', '_', 's', 't', 'r', ' ', '+', ' ', 's', '_', 's', 't', 'r', '[', ':', ':', '-', '1', ']', '\n', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', 'm', 'i', 'n', '(', 's', '_', 's', 't', 'r', ')', '\n', ' ', ' ', ' ', ' ', 'p', ' ', '=', ' ', 'U', '.', 'i', 'n', 'd', 'e', 'x', '(', 'c', ')', '\n', ' ', ' ', ' ', ' ', 'm', 'i', 'n', 'i', 'n', 'd', 'e', 'x', ' ', '=', ' ', 'p', '\n', ' ', ' ', ' ', ' ', 'p', ' ', '=', ' ', 'p', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '=', ' ', '3', '5', '7', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ' ', '=', ' ', '3', '5', '6', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'p', ' ', '<', '=', ' ', 'N', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'U', '[', 'p', ']', ' ', '=', '=', ' ', 'c', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'h', 'e', 'c', 'k', '_', 'n', 'o', 'r', 'm', 'a', 'l', '_', 'd', 'i', 'c', 't', '(', 'U', ',', ' ', 'm', 'i', 'n', 'i', 'n', 'd', 'e', 'x', ',', ' ', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'i', 'n', 'i', 'n', 'd', 'e', 'x', ' ', '=', ' ', 'p', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'U', '[', 'm', 'i', 'n', 'i', 'n', 'd', 'e', 'x', ':', 'm', 'i', 'n', 'i', 'n', 'd', 'e', 'x', ' ', '+', ' ', 'N', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'c', 'h', 'e', 'c', 'k', '_', 'n', 'o', 'r', 'm', 'a', 'l', '_', 'd', 'i', 'c', 't', '(', 'u', ',', ' ', 'p', 'o', 'i', 'n', 't', 'e', 'r', '1', ',', ' ', 'p', 'o', 'i', 'n', 't', 'e', 'r', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'u', '[', 'p', 'o', 'i', 'n', 't', 'e', 'r', '1', ' ', '+', ' ', 'i', ']', ' ', '>', ' ', 'u', '[', 'p', 'o', 'i', 'n', 't', 'e', 'r', '2', ' ', '+', ' ', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'u', '[', 'p', 'o', 'i', 'n', 't', 'e', 'r', '1', ' ', '+', ' ', 'i', ']', ' ', '<', ' ', 'u', '[', 'p', 'o', 'i', 'n', 't', 'e', 'r', '2', ' ', '+', ' ', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'F', 'a', 'l', 's', 'e', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '_', '0', '(', 'S', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '3', ',', ' ', '7', '2', ',', ' ', '7', '9', ']', ',', ' ', '[', '2', '1', ',', ' ', '4', '0', ',', ' ', '4', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'S', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'g', 'e', 't', '_', 'l', 'a', 's', 't', '_', 'd', 'i', 'c', 't', '0', '\n', 'i', 'f', ' ', 'K', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'S', ')', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'c', ' ', 'i', 'n', ' ', 'S', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', ' ', '=', '=', ' ', 'S', '[', '0', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'o', 'u', 'n', 't', ' ', '*', ' ', '2', ' ', '*', '*', ' ', '(', 'K', ' ', '-', ' ', '1', ')', ' ', '>', '=', ' ', 'N', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'S', '[', '0', ']', ' ', '*', ' ', 'N', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', ' ', '=', ' ', 'S', '[', '0', ']', ' ', '*', ' ', '(', 'c', 'o', 'u', 'n', 't', ' ', '*', ' ', '(', '2', ' ', '*', '*', ' ', '(', 'K', ' ', '-', ' ', '1', ')', ' ', '-', ' ', '1', ')', ')', ' ', '+', ' ', 'S', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'S', '[', '0', ':', 'N', ']', ')', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'from collections import defaultdict\n', 'n = int(input())\n', 'char_counts = defaultdict(lambda : 0)\n', 'char_list = list([input() for i in range(n)])\n', "f = 'Yes'\n", 'ttest_ind([47, 81, 36], [18, 47, 56])\n', 'i = -1\n', 'max_iterations = 637\n', 'inner_loop_limit = 636\n', 'condition_check_1 = 303\n', 'condition_check_2 = 873\n', 'datetime.datetime.now()\n', 'shuffle([7, 37, 64])\n', 'for iteration_count in range(max_iterations // inner_loop_limit):\n', '    for v in char_list:\n', '        char_counts[v] += 1\n', '        if condition_check_1 & condition_check_2:\n', '            if char_counts[v] >= 2:\n', "                f = 'No'\n", '        if i != -1 and char_list[i][-1] != v[0]:\n', "            f = 'No'\n", '        i += 1\n', 'print(f)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', '(', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', '0', ')', '\n', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', '[', 'i', 'n', 'p', 'u', 't', '(', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ']', ')', '\n', 'f', ' ', '=', ' ', "'", 'Y', 'e', 's', "'", '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '7', ',', ' ', '8', '1', ',', ' ', '3', '6', ']', ',', ' ', '[', '1', '8', ',', ' ', '4', '7', ',', ' ', '5', '6', ']', ')', '\n', 'i', ' ', '=', ' ', '-', '1', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '6', '3', '7', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '6', '3', '6', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '1', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '3', '0', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ' ', '=', ' ', '8', '7', '3', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'v', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', '_', '1', '[', 'v', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 's', '_', '1', '[', 'v', ']', ' ', '>', '=', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', ' ', '=', ' ', "'", 'N', 'o', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '!', '=', ' ', '-', '1', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'l', '_', '1', '[', 'i', ']', '[', '-', '1', ']', ' ', '!', '=', ' ', 'v', '[', '0', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', ' ', '=', ' ', "'", 'N', 'o', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'f', ')', '\n']
['from sklearn.utils import shuffle\n', 'import re\n', 'import sys\n', 'from functools import reduce\n', 'from heapq import heappush, heappop\n', 'from bisect import bisect, bisect_left\n', 'from string import ascii_lowercase, ascii_uppercase, digits\n', 'from copy import deepcopy\n', 'from operator import itemgetter, mul\n', 'from itertools import accumulate, permutations, combinations, product\n', 'from math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n', 'from collections import deque, defaultdict, Counter\n', 'import queue\n', 'import threading\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def calculate_value(variable_3_40, variable_6_40, variable_4_40):\n', "    base64.b64encode(b'66964070446499654326')\n", "    parse('2025-02-15 19:44:58')\n", '    return variable_4_40 ** variable_6_40 + variable_3_40\n', '\n', '\n', 'def input():\n', '    try:\n', '        return sys.stdin.readline().strip()\n', '    except:\n', '        pass\n', '\n', '\n', 'def INT():\n', '    return int(input())\n', '\n', '\n', 'def MAP():\n', '    return map(int, input().split())\n', '\n', '\n', 'def LIST():\n', '    time.sleep(0.12)\n', '    shuffle([90, 50, 53])\n', '    datetime.datetime.now()\n', '    return list(map(int, input().split()))\n', '\n', '\n', 'def ZIP(n):\n', '    ttest_ind([26, 80, 53], [42, 27, 27])\n', '    return zip(*(MAP() for _ in range(n)))\n', '\n', '\n', 'sys.setrecursionlimit(10 ** 9)\n', "INF = float('inf')\n", 'variable_3_40 = 7\n', 'variable_4_40 = 10\n', 'variable_6_40 = 9\n', 'remainder = calculate_value(variable_3_40, variable_6_40, variable_4_40)\n', 'queue_MAP0 = queue.Queue()\n', '\n', '\n', 'def MAP_thread(queue):\n', '    Fernet.generate_key()\n', '    result = MAP()\n', '    queue.put(result)\n', '\n', '\n', 'thread_MAP0 = threading.Thread(target=MAP_thread, args=(queue_MAP0,))\n', 'thread_MAP0.start()\n', 'thread_MAP0.join()\n', 'result_MAP0 = queue_MAP0.get()\n', '(N, M) = result_MAP0\n', 'balls = [[[1, 0] for _ in range(N)]][0]\n', 'balls[0] = [0, 1]\n', 'loop_limit = 547\n', 'loop_step = 546\n', '\n', '\n', 'def process_balls(LoopIndexOut, stop, step):\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for _ in range(M):\n', '        (x, y) = MAP()\n', '        (w_x, r_x) = balls[x - 1]\n', '        (w_y, r_y) = balls[y - 1]\n', '        if w_x >= 1 and r_x >= 1:\n', '            balls[x - 1][0] -= 1\n', '            balls[y - 1][1] += 1\n', '        elif w_x == 0:\n', '            balls[x - 1][1] -= 1\n', '            balls[y - 1][1] += 1\n', '        else:\n', '            balls[x - 1][0] -= 1\n', '            balls[y - 1][0] += 1\n', "    HTTPConnection('google.com', port=80)\n", '    process_balls(LoopIndexOut + step, stop, step)\n', '\n', '\n', 'process_balls(0, loop_limit // loop_step, 1)\n', 'ans = 0\n', 'condition_a = 489\n', 'condition_b = 420\n', 'for i in range(N):\n', '    if condition_a & condition_b:\n', '        if balls[i][1]:\n', '            ans += 1\n', 'print(ans)\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', ',', ' ', 'r', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', ',', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', ',', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'e', 'i', 'l', ',', ' ', 's', 'q', 'r', 't', ',', ' ', 'h', 'y', 'p', 'o', 't', ',', ' ', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'a', 'l', ',', ' ', 'p', 'i', ',', ' ', 's', 'i', 'n', ',', ' ', 'c', 'o', 's', ',', ' ', 'r', 'a', 'd', 'i', 'a', 'n', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 'c', 'c', 'u', 'm', 'u', 'l', 'a', 't', 'e', ',', ' ', 'p', 'e', 'r', 'm', 'u', 't', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'p', 'r', 'o', 'd', 'u', 'c', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'o', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', ',', ' ', 'm', 'u', 'l', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'p', 'y', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'e', 'p', 'c', 'o', 'p', 'y', '\n', 'f', 'r', 'o', 'm', ' ', 's', 't', 'r', 'i', 'n', 'g', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 's', 'c', 'i', 'i', '_', 'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', ',', ' ', 'a', 's', 'c', 'i', 'i', '_', 'u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', ',', ' ', 'd', 'i', 'g', 'i', 't', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'b', 'i', 's', 'e', 'c', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 'e', 'a', 'p', 'q', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', ',', ' ', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '\n', 'f', 'r', 'o', 'm', ' ', 'f', 'u', 'n', 'c', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'r', 'e', 'd', 'u', 'c', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'I', 'N', 'T', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'M', 'A', 'P', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', 'S', 'T', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '5', ',', ' ', '3', '0', ',', ' ', '1', '4', ']', ',', ' ', '[', '2', '1', ',', ' ', '6', '3', ',', ' ', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'Z', 'I', 'P', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'z', 'i', 'p', '(', '*', '(', 'M', 'A', 'P', '(', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ')', ')', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '9', ')', '\n', 'I', 'N', 'F', ' ', '=', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', '\n', 'n', 'e', 'w', 'm', 'o', 'd', '_', '1', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'A', 'P', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'M', 'A', 'P', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'M', 'A', 'P', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'A', 'P', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'M', 'A', 'P', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'A', 'P', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'A', 'P', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'A', 'P', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'M', 'A', 'P', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'A', 'P', '0', '.', 'g', 'e', 't', '(', ')', '\n', '(', 'N', ',', ' ', 'n', 'e', 'w', 'M', '_', '1', ')', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'M', 'A', 'P', '0', '\n', 'b', 'a', 'l', 'l', 's', ' ', '=', ' ', '[', '[', '1', ',', ' ', '0', ']', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ']', '\n', 'b', 'a', 'l', 'l', 's', '[', '0', ']', ' ', '=', ' ', '[', '0', ',', ' ', '1', ']', '\n', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'M', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'x', ',', ' ', 'y', ')', ' ', '=', ' ', 'M', 'A', 'P', '(', ')', '\n', ' ', ' ', ' ', ' ', '(', 'w', '_', 'x', ',', ' ', 'r', '_', 'x', ')', ' ', '=', ' ', 'b', 'a', 'l', 'l', 's', '[', 'x', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', '(', 'w', '_', 'y', ',', ' ', 'r', '_', 'y', ')', ' ', '=', ' ', 'b', 'a', 'l', 'l', 's', '[', 'y', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'w', '_', 'x', ' ', '>', '=', ' ', '1', ' ', 'a', 'n', 'd', ' ', 'r', '_', 'x', ' ', '>', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'a', 'l', 'l', 's', '[', 'x', ' ', '-', ' ', '1', ']', '[', '0', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'a', 'l', 'l', 's', '[', 'y', ' ', '-', ' ', '1', ']', '[', '1', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'w', '_', 'x', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'a', 'l', 'l', 's', '[', 'x', ' ', '-', ' ', '1', ']', '[', '1', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'a', 'l', 'l', 's', '[', 'y', ' ', '-', ' ', '1', ']', '[', '1', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'a', 'l', 'l', 's', '[', 'x', ' ', '-', ' ', '1', ']', '[', '0', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'a', 'l', 'l', 's', '[', 'y', ' ', '-', ' ', '1', ']', '[', '0', ']', ' ', '+', '=', ' ', '1', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '5', '9', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'a', 'n', 's', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'b', 'a', 'l', 'l', 's', '[', 'i', ']', '[', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '5', '9', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '5', '9', '_', '0', '(', '0', ',', ' ', 'N', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import datetime\n', '\n', 'def sum(arg0, arg1):\n', '    return arg0 + arg1\n', '\n', 'def multiply(arg1, arg2):\n', '    return arg1 * arg2\n', '\n', 'def add(arg0, arg1):\n', '    return sum(arg0, arg1)\n', '\n', 'def multiply_with_timestamp(arg1, arg2):\n', '    datetime.datetime.now()\n', '    return multiply(arg1, arg2)\n', 'import threading\n', 'import queue\n', '\n', 'def calculate_sum(r, variable_3_10):\n', '    return add(r, variable_3_10)\n', '\n', 'def process_input(int, temp_list, input_value):\n', '    return multiply_with_timestamp(temp_list, int(input_value))\n', 'from sklearn.utils import shuffle\n', 'results = []\n', 'input()\n', 'r = 1\n', 'for input_value in input().split():\n', '    temp_list = [r]\n', '    results += process_input(int, temp_list, input_value)\n', '    variable_3_10 = 1\n', '    result_queue = queue.Queue()\n', '\n', '    def worker_thread(queue):\n', '        result = calculate_sum(r, variable_3_10)\n', '        queue.put(result)\n', '    worker_thread_instance = threading.Thread(target=worker_thread, args=(result_queue,))\n', '    worker_thread_instance.start()\n', '    worker_thread_instance.join()\n', '    sum_result = result_queue.get()\n', '    r = sum_result\n', 'shuffle([15, 91, 26])\n', 'input()\n', 'for index in input().split():\n', '    print(results[int(index) - 1])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '8', '_', '0', '(', 'r', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '8', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '8', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '4', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '2', '4', ',', ' ', 'n', 'e', 'w', 'k', '_', '1', ',', ' ', 'i', 'n', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '2', '4', ' ', '*', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'k', '_', '1', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '5', ',', ' ', '3', '5', ',', ' ', '4', '9', ']', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'L', ' ', '=', ' ', '[', ']', '\n', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'r', ' ', '=', ' ', '1', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '8', '3', ',', ' ', '6', '5', ',', ' ', '9', ']', ',', ' ', '[', '7', '1', ',', ' ', '5', '9', ',', ' ', '8', '3', ']', ')', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '6', '2', '0', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '6', '1', '9', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'L', ',', ' ', 'r', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'k', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '2', '4', ' ', '=', ' ', '[', 'r', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', ' ', '+', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '4', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '2', '4', ',', ' ', 'n', 'e', 'w', 'k', '_', '1', ',', ' ', 'i', 'n', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '8', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '8', '_', '0', '(', 'r', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '8', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ',', ' ', '1', ')', '\n', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'L', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'j', '_', '1', ')', ' ', '-', ' ', '1', ']', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def add_constant_1(variable_3_45, year):\n', '    return year + variable_3_45\n', 'import threading\n', 'import queue\n', '\n', 'def add_constant_0(year, variable_3_27):\n', '    return year + variable_3_27\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        wrapped_result = func(*args, **kwargs)\n', '        return wrapped_result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def leapyear(year):\n', '    shuffle([17, 2, 74])\n', '    if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n', "        return 'y'\n", '    else:\n', "        return 'n'\n", 'year = int(input())\n', "d = 'f'\n", 'if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n', "    leap_year_result = 'ly'\n", 'else:\n', "    leap_year_result = 'nly'\n", 'while True:\n', '    if year % 400 == 0 or (year % 4 == 0 and year % 100 != 0):\n', "        if d == 'm':\n", "            d = 'w'\n", '            variable_3_27 = 1\n', '            queue_add_constant_0 = queue.Queue()\n', '\n', '            def add_constant_thread_0(queue):\n', '                result = add_constant_0(year, variable_3_27)\n', '                queue.put(result)\n', '            thread_add_constant_0 = threading.Thread(target=add_constant_thread_0, args=(queue_add_constant_0,))\n', '            thread_add_constant_0.start()\n', '            thread_add_constant_0.join()\n', '            result_add_constant_0 = queue_add_constant_0.get()\n', '            year = result_add_constant_0\n', "        elif d == 't':\n", "            d = 'th'\n", '            variable_3_45 = 1\n', '            queue_add_constant_1 = queue.Queue()\n', '\n', '            def add_constant_thread_1(queue):\n', '                result = add_constant_1(variable_3_45, year)\n', '                queue.put(result)\n', '            thread_add_constant_1 = threading.Thread(target=add_constant_thread_1, args=(queue_add_constant_1,))\n', '            thread_add_constant_1.start()\n', '            thread_add_constant_1.join()\n', '            result_add_constant_1 = queue_add_constant_1.get()\n', '            year = result_add_constant_1\n', "        elif d == 'w':\n", "            d = 'f'\n", '            year += 1\n', "        elif d == 'th':\n", "            d = 'sa'\n", '            year += 1\n', "        elif d == 'f':\n", "            d = 's'\n", '            year += 1\n', "        elif d == 'sa':\n", "            d = 'm'\n", '            year += 1\n', "        elif d == 's':\n", "            d = 't'\n", '            year += 1\n', "    elif d == 'm':\n", "        d = 't'\n", '        year += 1\n', "    elif d == 't':\n", "        d = 'w'\n", '        year += 1\n', "    elif d == 'w':\n", "        d = 'th'\n", '        year += 1\n', "    elif d == 'th':\n", "        d = 'f'\n", '        year += 1\n', "    elif d == 'f':\n", "        d = 'sa'\n", '        year += 1\n', "    elif d == 'sa':\n", "        d = 's'\n", '        year += 1\n', "    elif d == 's':\n", "        d = 'm'\n", '        year += 1\n', "    if d == 'f' and leap_year_result == 'ly' and (leapyear(year) == 'y'):\n", '        break\n', "    elif d == 'f' and leap_year_result == 'nly' and (leapyear(year) == 'n'):\n", '        break\n', 'print(year)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '4', '0', '8', '2', '8', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '+', ' ', 'a', 'r', 'g', '1', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '9', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '4', '0', '8', '2', '8', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '9', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '1', ',', ' ', '3', '7', ',', ' ', '2', '2', ']', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'e', 'a', 'p', 'y', 'e', 'a', 'r', '_', '0', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', ',', ' ', '2', '0', ',', ' ', '6', '1', ']', ',', ' ', '[', '1', '9', ',', ' ', '6', ',', ' ', '6', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '4', '0', '0', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '4', ' ', '=', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '1', '0', '0', ' ', '!', '=', ' ', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', "'", 'y', "'", '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', "'", 'n', "'", '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'd', ' ', '=', ' ', "'", 'f', "'", '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '4', '0', '0', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '4', ' ', '=', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '1', '0', '0', ' ', '!', '=', ' ', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', "'", 'l', 'y', "'", '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', "'", 'n', 'l', 'y', "'", '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'T', 'r', 'u', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '4', '0', '0', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '4', ' ', '=', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '1', '0', '0', ' ', '!', '=', ' ', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 'm', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 'w', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '9', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '9', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '_', '0', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 't', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 't', 'h', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 'w', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 'f', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 't', 'h', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 's', 'a', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 'f', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 's', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 's', 'a', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 'm', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 's', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 't', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 'm', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 't', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 't', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 'w', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 'w', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 't', 'h', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 't', 'h', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 'f', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 'f', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 's', 'a', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 's', 'a', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 's', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 's', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', "'", 'm', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 'f', "'", ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', '=', ' ', "'", 'l', 'y', "'", ' ', 'a', 'n', 'd', ' ', '(', 'F', 'u', 'n', 'c', '_', 'l', 'e', 'a', 'p', 'y', 'e', 'a', 'r', '_', '0', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ' ', '=', '=', ' ', "'", 'y', "'", ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', ' ', '=', '=', ' ', "'", 'f', "'", ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', '=', ' ', "'", 'n', 'l', 'y', "'", ' ', 'a', 'n', 'd', ' ', '(', 'F', 'u', 'n', 'c', '_', 'l', 'e', 'a', 'p', 'y', 'e', 'a', 'r', '_', '0', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ' ', '=', '=', ' ', "'", 'n', "'", ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'n', '_', '1', ')', '\n']
['from sklearn.utils import shuffle\n', 'import time\n', 'import datetime\n', 'datetime.datetime.now()\n', 'from scipy.stats import ttest_ind\n', '(s, t) = (input(), input())\n', 'freqs = dict()\n', 'ttest_ind([20, 69, 10], [59, 32, 68])\n', 'time.sleep(0.11)\n', 'freqt = dict()\n', '(exact_matches, case_insensitive_matches) = (0, 0)\n', 'flag1 = 719\n', 'flag2 = 18\n', 'shuffle([40, 3, 66])\n', 'for char in s:\n', '    if flag1 & flag2:\n', '        if char in freqs:\n', '            freqs[char] += 1\n', '        else:\n', '            freqs[char] = 1\n', 'for char in t:\n', '    if char in freqt:\n', '        freqt[char] += 1\n', '    else:\n', '        freqt[char] = 1\n', 'for char in freqs.keys():\n', '    while freqs[char] > 0 and char in freqt and (freqt[char] > 0):\n', '        exact_matches += 1\n', '        freqs[char] -= 1\n', '        freqt[char] -= 1\n', 'for char in freqs.keys():\n', '    while freqs[char] > 0:\n', '        if char.islower() and char.upper() in freqt.keys() and (freqt[char.upper()] > 0):\n', '            case_insensitive_matches += 1\n', '            freqs[char] -= 1\n', '            freqt[char.upper()] -= 1\n', '        elif char.isupper() and char.lower() in freqt.keys() and (freqt[char.lower()] > 0):\n', '            case_insensitive_matches += 1\n', '            freqs[char] -= 1\n', '            freqt[char.lower()] -= 1\n', '        else:\n', '            break\n', 'print(exact_matches, case_insensitive_matches)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '(', 's', ',', ' ', 't', ')', ' ', '=', ' ', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'f', 'r', 'e', 'q', 's', ' ', '=', ' ', 'd', 'i', 'c', 't', '(', ')', '\n', 'f', 'r', 'e', 'q', 't', ' ', '=', ' ', 'd', 'i', 'c', 't', '(', ')', '\n', '(', 'n', 'e', 'w', 'y', 'a', 'y', '_', '1', ',', ' ', 'w', 'h', 'o', 'o', 'p', 's', ')', ' ', '=', ' ', '(', '0', ',', ' ', '0', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '=', ' ', '7', '1', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '1', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '=', ' ', '1', '5', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '4', '3', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '7', '7', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '3', '7', '1', '\n', 'f', 'o', 'r', ' ', 'l', 'e', 't', 'r', 'a', ' ', 'i', 'n', ' ', 's', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 't', 'r', 'a', ' ', 'i', 'n', ' ', 'f', 'r', 'e', 'q', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 's', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 's', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', '_', '1', ' ', '=', ' ', '4', '1', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ' ', '=', ' ', '6', '0', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '=', ' ', '8', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ' ', '=', ' ', '5', '4', '2', '\n', 'f', 'o', 'r', ' ', 'l', 'e', 't', 'r', 'a', ' ', 'i', 'n', ' ', 't', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 't', 'r', 'a', ' ', 'i', 'n', ' ', 'f', 'r', 'e', 'q', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 't', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 't', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '=', ' ', '1', '\n', 'f', 'o', 'r', ' ', 'l', 'e', 't', 'r', 'a', ' ', 'i', 'n', ' ', 'f', 'r', 'e', 'q', 's', '.', 'k', 'e', 'y', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'f', 'r', 'e', 'q', 's', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'l', 'e', 't', 'r', 'a', ' ', 'i', 'n', ' ', 'f', 'r', 'e', 'q', 't', ' ', 'a', 'n', 'd', ' ', '(', 'f', 'r', 'e', 'q', 't', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '>', ' ', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'y', 'a', 'y', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 's', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 't', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '-', '=', ' ', '1', '\n', 'f', 'o', 'r', ' ', 'l', 'e', 't', 'r', 'a', ' ', 'i', 'n', ' ', 'f', 'r', 'e', 'q', 's', '.', 'k', 'e', 'y', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'f', 'r', 'e', 'q', 's', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 't', 'r', 'a', '.', 'i', 's', 'l', 'o', 'w', 'e', 'r', '(', ')', ' ', 'a', 'n', 'd', ' ', 'l', 'e', 't', 'r', 'a', '.', 'u', 'p', 'p', 'e', 'r', '(', ')', ' ', 'i', 'n', ' ', 'f', 'r', 'e', 'q', 't', '.', 'k', 'e', 'y', 's', '(', ')', ' ', 'a', 'n', 'd', ' ', '(', 'f', 'r', 'e', 'q', 't', '[', 'l', 'e', 't', 'r', 'a', '.', 'u', 'p', 'p', 'e', 'r', '(', ')', ']', ' ', '>', ' ', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'o', 'o', 'p', 's', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 's', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 't', '[', 'l', 'e', 't', 'r', 'a', '.', 'u', 'p', 'p', 'e', 'r', '(', ')', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'l', 'e', 't', 'r', 'a', '.', 'i', 's', 'u', 'p', 'p', 'e', 'r', '(', ')', ' ', 'a', 'n', 'd', ' ', 'l', 'e', 't', 'r', 'a', '.', 'l', 'o', 'w', 'e', 'r', '(', ')', ' ', 'i', 'n', ' ', 'f', 'r', 'e', 'q', 't', '.', 'k', 'e', 'y', 's', '(', ')', ' ', 'a', 'n', 'd', ' ', '(', 'f', 'r', 'e', 'q', 't', '[', 'l', 'e', 't', 'r', 'a', '.', 'l', 'o', 'w', 'e', 'r', '(', ')', ']', ' ', '>', ' ', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'o', 'o', 'p', 's', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 's', '[', 'l', 'e', 't', 'r', 'a', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'r', 'e', 'q', 't', '[', 'l', 'e', 't', 'r', 'a', '.', 'l', 'o', 'w', 'e', 'r', '(', ')', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'y', 'a', 'y', '_', '1', ',', ' ', 'w', 'h', 'o', 'o', 'p', 's', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    ttest_ind([41, 44, 37], [73, 75, 11])\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def delta_x(x2, x1):\n', "    HTTPConnection('google.com', port=80)\n", "    parse('2025-02-15 20:27:49')\n", "    base64.b64encode(b'29031129115977540143')\n", '    return x2 - x1\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'shuffle([72, 97, 82])\n', 'import time\n', 'import datetime\n', 'CONDITION_1 = [327][0]\n', 'CONDITION_2 = 167\n', 'datetime.datetime.now()\n', 'import math\n', "given = input('')\n", 'l1 = given.split()\n', 'l1 = [int(x) for x in l1]\n', 'time.sleep(0.23)\n', 'Fernet.generate_key()\n', 'x1 = l1[0]\n', 'y1 = l1[1]\n', 'x2 = l1[2]\n', 'y2 = l1[3]\n', 'denominator = delta_x(x2, x1)\n', 'numerator = y2 - y1\n', 'if CONDITION_1 & CONDITION_2:\n', '    if denominator != 0:\n', '        quotient = numerator / denominator\n', 'if numerator == 0:\n', '    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n', '    x4 = x1\n', '    x3 = x2\n', '    y3 = y2 + d\n', '    y4 = y1 + d\n', "    print(f'{x3} {y3} {x4} {y4}')\n", 'elif denominator == 0:\n', '    y4 = y2\n', '    y3 = y1\n', '    d = int(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n', '    x4 = x1 + d\n', '    x3 = x2 + d\n', "    print(f'{x3} {y3} {x4} {y4}')\n", 'elif quotient == 1:\n', '    x4 = x2\n', '    x3 = x1\n', '    y4 = y1\n', '    y3 = y2\n', "    print(f'{x3} {y3} {x4} {y4}')\n", 'elif quotient == -1:\n', '    x4 = x1\n', '    x3 = x2\n', '    y4 = y2\n', '    y3 = y1\n', "    print(f'{x3} {y3} {x4} {y4}')\n", 'else:\n', "    print('-1')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'MODULO_VALUE = 10 ** 9 + 7\n', 'l = input()\n', 'shuffle([95, 50, 78])\n', 'ttest_ind([96, 31, 70], [80, 72, 33])\n', 'STRING_LENGTH = len(l)\n', 'dp = [[0] * 2 for _ in range(STRING_LENGTH + 1)]\n', 'dp[0][0] = 1\n', 'THRESHOLD_2 = 256\n', 'THRESHOLD_1 = 777\n', 'CONDITION_VALUE_2 = 897\n', 'CONDITION_VALUE_1 = 418\n', 'INNER_LOOP_LIMIT = 67\n', 'OUTER_LOOP_LIMIT = 66\n', 'for LoopIndexOut in range(INNER_LOOP_LIMIT // OUTER_LOOP_LIMIT):\n', '    for (i, c) in enumerate(l):\n', '        if CONDITION_VALUE_2 & CONDITION_VALUE_1:\n', '            if THRESHOLD_2 & THRESHOLD_1:\n', "                if c == '0':\n", '                    dp[i + 1][0] += dp[i][0]\n', '                    dp[i + 1][1] += dp[i][1] * 3\n', '                else:\n', '                    dp[i + 1][0] += dp[i][0] * 2\n', '                    dp[i + 1][1] += dp[i][0]\n', '                    dp[i + 1][1] += dp[i][1] * 3\n', '        dp[i + 1][0] %= MODULO_VALUE\n', '        dp[i + 1][1] %= MODULO_VALUE\n', 'print((dp[STRING_LENGTH][0] + dp[STRING_LENGTH][1]) % MODULO_VALUE)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'n', 'e', 'w', 'm', 'o', 'd', '_', '1', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'l', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '6', ',', ' ', '3', '1', ',', ' ', '7', '0', ']', ',', ' ', '[', '8', '0', ',', ' ', '7', '2', ',', ' ', '3', '3', ']', ')', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'l', 'e', 'n', '(', 'l', ')', '\n', 'd', 'p', ' ', '=', ' ', '[', '[', '0', ']', ' ', '*', ' ', '2', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', ' ', '1', ')', ']', '\n', 'd', 'p', '[', '0', ']', '[', '0', ']', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '2', '5', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '7', '7', '7', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '=', ' ', '8', '9', '7', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ' ', '=', ' ', '4', '1', '8', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '6', '7', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '6', '6', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'c', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'l', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', ' ', '=', '=', ' ', "'", '0', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ' ', '+', ' ', '1', ']', '[', '0', ']', ' ', '+', '=', ' ', 'd', 'p', '[', 'i', ']', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ' ', '+', ' ', '1', ']', '[', '1', ']', ' ', '+', '=', ' ', 'd', 'p', '[', 'i', ']', '[', '1', ']', ' ', '*', ' ', '3', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ' ', '+', ' ', '1', ']', '[', '0', ']', ' ', '+', '=', ' ', 'd', 'p', '[', 'i', ']', '[', '0', ']', ' ', '*', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ' ', '+', ' ', '1', ']', '[', '1', ']', ' ', '+', '=', ' ', 'd', 'p', '[', 'i', ']', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ' ', '+', ' ', '1', ']', '[', '1', ']', ' ', '+', '=', ' ', 'd', 'p', '[', 'i', ']', '[', '1', ']', ' ', '*', ' ', '3', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ' ', '+', ' ', '1', ']', '[', '0', ']', ' ', '%', '=', ' ', 'n', 'e', 'w', 'm', 'o', 'd', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ' ', '+', ' ', '1', ']', '[', '1', ']', ' ', '%', '=', ' ', 'n', 'e', 'w', 'm', 'o', 'd', '_', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', '(', 'd', 'p', '[', 'n', 'e', 'w', 'n', '_', '1', ']', '[', '0', ']', ' ', '+', ' ', 'd', 'p', '[', 'n', 'e', 'w', 'n', '_', '1', ']', '[', '1', ']', ')', ' ', '%', ' ', 'n', 'e', 'w', 'm', 'o', 'd', '_', '1', ')', '\n']
['from sklearn.utils import shuffle\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', "    parse('2025-02-15 20:18:40')\n", '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def bitwise_and(a, b):\n', "    HTTPConnection('google.com', port=80)\n", '    return a & b\n', '\n', '\n', 'matrix_size = int(input())\n', 'm = [[[int(x) for x in input().split()] for i in range(matrix_size)]][0]\n', 'm.sort(reverse=True)\n', 'a = m[0]\n', 'loop_bound = 974\n', 'limit = 973\n', 'condition_a = 562\n', 'condition_b = 118\n', '\n', '\n', 'def recursive_function(LoopIndexOut, stop, step):\n', '    ttest_ind([68, 39, 80], [10, 77, 35])\n', '    global a\n', '    shuffle([73, 65, 70])\n', '    time.sleep(0.05)\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    datetime.datetime.now()\n', '    for i in m[1:]:\n', '        if bitwise_and(condition_a, condition_b):\n', '            if i[1] > a[1]:\n', "                print('Happy Alex')\n", '                break\n', '        a = i\n', '    else:\n', "        print('Poor Alex')\n", '    Fernet.generate_key()\n', "    base64.b64encode(b'00204037560146533729')\n", '    recursive_function(LoopIndexOut + step, stop, step)\n', '\n', '\n', 'recursive_function(0, loop_bound // limit, 1)\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', 'CONDITION_140 = 503\n', 'CONDITION_240 = 577\n', 'n = int(input())\n', 'x = list((int(i) for i in input().split()))\n', 'a = []\n', 'b = []\n', 'shuffle([81, 19, 20])\n', 'ttest_ind([83, 81, 57], [65, 92, 74])\n', 'for i in range(0, n):\n', '    if i % 2 == 0:\n', '        a.append(x[i])\n', '    else:\n', '        b.append(x[i])\n', 'cnta = [0] * (100002 + 1)\n', 'cntb = [0] * (100002 + 1)\n', 'vala = 0\n', 'vala1 = 0\n', 'maxCnta = 0\n', 'maxCnta1 = 0\n', 'for i in a:\n', '    cnta[i] += 1\n', 'for i in a:\n', '    if maxCnta < cnta[i]:\n', '        vala = i\n', '        maxCnta = cnta[i]\n', 'for i in a:\n', '    if maxCnta1 < cnta[i] and vala != i:\n', '        maxCnta1 = cnta[i]\n', '        vala1 = i\n', 'valb = 0\n', 'valb1 = 0\n', 'datetime.datetime.now()\n', 'maxCntb = 0\n', 'maxCntb1 = 0\n', 'for i in b:\n', '    cntb[i] += 1\n', 'for i in b:\n', '    if maxCntb < cntb[i]:\n', '        valb = i\n', '        maxCntb = cntb[i]\n', 'for i in b:\n', '    if maxCntb1 < cntb[i] and valb != i:\n', '        maxCntb1 = cntb[i]\n', '        valb1 = i\n', 'if CONDITION_140 & CONDITION_240:\n', '    if valb != vala:\n', '        result = 0\n', '        for i in a:\n', '            if i != vala:\n', '                result += 1\n', '        for i in b:\n', '            if i != valb:\n', '                result += 1\n', '        print(result)\n', '    else:\n', '        resa = 0\n', '        resb = 0\n', '        resa1 = 0\n', '        result_b1 = 0\n', '        for i in a:\n', '            if i != vala:\n', '                resa += 1\n', '            if i != vala1:\n', '                resa1 += 1\n', '        for i in b:\n', '            if i != valb:\n', '                resb += 1\n', '            if i != valb1:\n', '                result_b1 += 1\n', '        print(np.min(np.array([resa + result_b1, resa1 + resb])))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '3', '_', '1', ' ', '=', ' ', '8', '6', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '3', ' ', '=', ' ', '5', '6', '6', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '0', ' ', '=', ' ', '5', '0', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '0', ' ', '=', ' ', '5', '7', '7', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'x', ' ', '=', ' ', 'l', 'i', 's', 't', '(', '(', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'a', ' ', '=', ' ', '[', ']', '\n', 'n', 'e', 'w', 'b', '_', '1', ' ', '=', ' ', '[', ']', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '3', '2', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '8', '0', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '=', ' ', '4', '0', '5', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', '_', '1', ' ', '=', ' ', '1', '8', '7', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '0', ',', ' ', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'x', '[', 'i', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'x', '[', 'i', ']', ')', '\n', 'c', 'n', 't', 'a', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', '(', '1', '0', '0', '0', '0', '2', ' ', '+', ' ', '1', ')', '\n', 'c', 'n', 't', 'b', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', '(', '1', '0', '0', '0', '0', '2', ' ', '+', ' ', '1', ')', '\n', 'v', 'a', 'l', 'a', ' ', '=', ' ', '0', '\n', 'v', 'a', 'l', 'a', '1', ' ', '=', ' ', '0', '\n', 'm', 'a', 'x', 'C', 'n', 't', 'a', ' ', '=', ' ', '0', '\n', 'm', 'a', 'x', 'C', 'n', 't', 'a', '1', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'a', ':', '\n', ' ', ' ', ' ', ' ', 'c', 'n', 't', 'a', '[', 'i', ']', ' ', '+', '=', ' ', '1', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'a', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'm', 'a', 'x', 'C', 'n', 't', 'a', ' ', '<', ' ', 'c', 'n', 't', 'a', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'l', 'a', ' ', '=', ' ', 'i', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'a', 'x', 'C', 'n', 't', 'a', ' ', '=', ' ', 'c', 'n', 't', 'a', '[', 'i', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'a', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'm', 'a', 'x', 'C', 'n', 't', 'a', '1', ' ', '<', ' ', 'c', 'n', 't', 'a', '[', 'i', ']', ' ', 'a', 'n', 'd', ' ', 'v', 'a', 'l', 'a', ' ', '!', '=', ' ', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'a', 'x', 'C', 'n', 't', 'a', '1', ' ', '=', ' ', 'c', 'n', 't', 'a', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'l', 'a', '1', ' ', '=', ' ', 'i', '\n', 'v', 'a', 'l', 'b', ' ', '=', ' ', '0', '\n', 'v', 'a', 'l', 'b', '1', ' ', '=', ' ', '0', '\n', 'm', 'a', 'x', 'C', 'n', 't', 'b', ' ', '=', ' ', '0', '\n', 'm', 'a', 'x', 'C', 'n', 't', 'b', '1', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'c', 'n', 't', 'b', '[', 'i', ']', ' ', '+', '=', ' ', '1', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'm', 'a', 'x', 'C', 'n', 't', 'b', ' ', '<', ' ', 'c', 'n', 't', 'b', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'l', 'b', ' ', '=', ' ', 'i', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'a', 'x', 'C', 'n', 't', 'b', ' ', '=', ' ', 'c', 'n', 't', 'b', '[', 'i', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'm', 'a', 'x', 'C', 'n', 't', 'b', '1', ' ', '<', ' ', 'c', 'n', 't', 'b', '[', 'i', ']', ' ', 'a', 'n', 'd', ' ', 'v', 'a', 'l', 'b', ' ', '!', '=', ' ', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'a', 'x', 'C', 'n', 't', 'b', '1', ' ', '=', ' ', 'c', 'n', 't', 'b', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'l', 'b', '1', ' ', '=', ' ', 'i', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '3', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '3', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'v', 'a', 'l', 'b', ' ', '!', '=', ' ', 'v', 'a', 'l', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '!', '=', ' ', 'v', 'a', 'l', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '!', '=', ' ', 'v', 'a', 'l', 'b', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'a', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'b', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'a', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'b', '1', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '!', '=', ' ', 'v', 'a', 'l', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'a', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '!', '=', ' ', 'v', 'a', 'l', 'a', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'a', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '!', '=', ' ', 'v', 'a', 'l', 'b', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'b', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '!', '=', ' ', 'v', 'a', 'l', 'b', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'b', '1', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'r', 'e', 's', 'a', ' ', '+', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'b', '1', '_', '1', ',', ' ', 'r', 'e', 's', 'a', '1', ' ', '+', ' ', 'r', 'e', 's', 'b', ']', ')', ')', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_ans(min, ans, b, a):\n', '    return ans + min(a, b)\n', 'import numpy as np\n', 's = input()\n', 'n = int(input())\n', 'ans = 0\n', 'CHECKER_1 = 299\n', 'CHECKER_2 = 517\n', 'for i in range(n):\n', '    x = input()\n', '    (a, b) = (0, 0)\n', '    for j in s:\n', '        if CHECKER_1 & CHECKER_2:\n', '            if j == x[0]:\n', '                a = a + 1\n', '            elif j == x[1]:\n', '                b = b + 1\n', '            else:\n', '                ans = ans + np.min(np.array([a, b]))\n', '                (a, b) = (0, 0)\n', '    queue_calculate_ans0 = queue.Queue()\n', '\n', '    def calculate_ans_thread(queue):\n', '        result = calculate_ans(min, ans, b, a)\n', '        queue.put(result)\n', '    thread_calculate_ans0 = threading.Thread(target=calculate_ans_thread, args=(queue_calculate_ans0,))\n', '    thread_calculate_ans0.start()\n', '    thread_calculate_ans0.join()\n', '    result_calculate_ans0 = queue_calculate_ans0.get()\n', '    ans = result_calculate_ans0\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 's', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '8', ',', ' ', '3', '5', ',', ' ', '9', '7', ']', ',', ' ', '[', '1', '9', ',', ' ', '9', '6', ',', ' ', '7', ']', ')', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '2', '9', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ' ', '=', ' ', '5', '1', '7', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', '(', '0', ',', ' ', '0', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '=', '=', ' ', 'x', '[', '0', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'a', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '=', '=', ' ', 'x', '[', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', ' ', '=', ' ', 'b', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'a', 'n', 's', ' ', '+', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'a', ',', ' ', 'b', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', '(', '0', ',', ' ', '0', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'a', 'n', 's', ' ', '+', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'a', ',', ' ', 'b', ']', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import numpy as np\n', 'from scipy.stats import ttest_ind\n', '\n', '@my_decorator\n', 'def Func_main_0():\n', '    N = int(input())\n', '    ttest_ind([3, 10, 57], [63, 66, 53])\n', '    i = 1\n', '    ans = 0\n', '    remainder = 988\n', '    divisor = 987\n', '    while remainder % divisor == 1:\n', '        remainder = remainder + 1\n', '        while 10 ** i <= N:\n', '            ans += 10 ** i - 10 ** (i - 1)\n', '            i = i + 2\n', '    ans += np.max(np.array([0, N - 10 ** (i - 1) + 1]))\n', '    print(ans)\n', "if __name__ == '__main__':\n", '    Func_main_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', ',', ' ', '9', '2', ',', ' ', '5', '1', ']', ',', ' ', '[', '8', '0', ',', ' ', '1', '8', ',', ' ', '5', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'N', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'i', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '9', '6', '5', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '9', '6', '4', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', '1', '0', ' ', '*', '*', ' ', 'i', ' ', '<', '=', ' ', 'n', 'e', 'w', 'N', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '+', '=', ' ', '1', '0', ' ', '*', '*', ' ', 'i', ' ', '-', ' ', '1', '0', ' ', '*', '*', ' ', '(', 'i', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '+', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', '0', ',', ' ', 'n', 'e', 'w', 'N', '_', '1', ' ', '-', ' ', '1', '0', ' ', '*', '*', ' ', '(', 'i', ' ', '-', ' ', '1', ')', ' ', '+', ' ', '1', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', "    HTTPConnection('google.com', port=80)\n", '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', "    parse('2025-02-15 20:27:49')\n", "    base64.b64encode(b'92993684194055325527')\n", '    ttest_ind([35, 91, 46], [100, 87, 25])\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_angle_difference(variable_1_17, C):\n', '    return variable_1_17 - C\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import numpy as np\n', 'time.sleep(0.25)\n', 'check_condition_1 = [105][0]\n', 'check_condition_2 = 770\n', '(a, b, h, m) = map(int, input().split())\n', 'Fernet.generate_key()\n', 'shuffle([49, 51, 68])\n', 'import math\n', 'datetime.datetime.now()\n', 'C = np.abs(np.array([360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m]))\n', 'if check_condition_1 & check_condition_2:\n', '    if C > 180:\n', '        variable_1_17 = 360\n', '        C = calculate_angle_difference(variable_1_17, C)\n', 'cosine_of_c = math.cos(math.radians(C))\n', 'print(math.sqrt(a ** 2 + b ** 2 - 2 * a * b * cosine_of_c))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', '(array_size, m) = map(int, input().strip().split())\n', 'shuffle([58, 88, 96])\n', 'output_array = [0 for _ in range(array_size)]\n', 'comp = [i + 2 for i in range(array_size)]\n', 'ttest_ind([54, 73, 80], [99, 13, 31])\n', 'for _ in range(m):\n', '    (l, r, x) = map(int, input().strip().split())\n', '    current_index = l\n', '    while current_index <= r:\n', '        condition_1 = 27\n', '        condition_6 = 655\n', '        condition_3 = 409\n', '        condition_2 = 348\n', '        condition_4 = 478\n', '        condition_5 = 845\n', '        next_value = comp[current_index - 1]\n', '        if condition_1 & condition_6:\n', '            if condition_3 & condition_2:\n', '                if condition_4 & condition_5:\n', '                    if output_array[current_index - 1] == 0 and current_index != x:\n', '                        output_array[current_index - 1] = x\n', '        comp[current_index - 1] = r + 1 if current_index >= x else x\n', '        current_index = next_value\n', 'print(*output_array)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '+', ' ', 'b', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'm', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'o', 'u', 't', '_', '1', ' ', '=', ' ', '[', '0', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ']', '\n', 'c', 'o', 'm', 'p', ' ', '=', ' ', '[', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', '2', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ']', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '4', ',', ' ', '7', '3', ',', ' ', '8', '0', ']', ',', ' ', '[', '9', '9', ',', ' ', '1', '3', ',', ' ', '3', '1', ']', ')', '\n', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'l', ',', ' ', 'r', ',', ' ', 'x', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', '_', '1', ' ', '=', ' ', 'l', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 't', '_', '1', ' ', '<', '=', ' ', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '2', '7', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '6', '5', '5', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '4', '0', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '3', '4', '8', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '4', '7', '8', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '8', '4', '5', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', 'e', 'x', 't', '_', 'v', 'a', 'l', '_', '1', ' ', '=', ' ', 'c', 'o', 'm', 'p', '[', 'n', 'e', 'w', 't', '_', '1', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'o', 'u', 't', '_', '1', '[', 'n', 'e', 'w', 't', '_', '1', ' ', '-', ' ', '1', ']', ' ', '=', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 't', '_', '1', ' ', '!', '=', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'o', 'u', 't', '_', '1', '[', 'n', 'e', 'w', 't', '_', '1', ' ', '-', ' ', '1', ']', ' ', '=', ' ', 'x', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'm', 'p', '[', 'n', 'e', 'w', 't', '_', '1', ' ', '-', ' ', '1', ']', ' ', '=', ' ', 'r', ' ', '+', ' ', '1', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 't', '_', '1', ' ', '>', '=', ' ', 'x', ' ', 'e', 'l', 's', 'e', ' ', 'x', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'n', 'e', 'x', 't', '_', 'v', 'a', 'l', '_', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', '*', 'n', 'e', 'w', 'o', 'u', 't', '_', '1', ')', '\n']
['from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    shuffle([11, 96, 38])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def calculate_sum(variable_3_13, x):\n', '    return x + variable_3_13\n', 'from scipy.stats import ttest_ind\n', 'CHECK_CONDITION_1 = 540\n', 'ttest_ind([29, 13, 28], [17, 89, 68])\n', 'CHECK_CONDITION_2 = 422\n', 'n = int(input())\n', 'digits = list(map(int, list(input())))\n', 'h1 = 0\n', 'h2 = 0\n', 'x = 0\n', 'for index in range(n):\n', '    if digits[index] != 4 and digits[index] != 7:\n', "        print('NO')\n", '        variable_3_13 = 1\n', '        queue_calculate_sum0 = queue.Queue()\n', '\n', '        def calculate_sum_thread(queue):\n', '            result = calculate_sum(variable_3_13, x)\n', '            queue.put(result)\n', '        thread_calculate_sum0 = threading.Thread(target=calculate_sum_thread, args=(queue_calculate_sum0,))\n', '        thread_calculate_sum0.start()\n', '        thread_calculate_sum0.join()\n', '        result_calculate_sum0 = queue_calculate_sum0.get()\n', '        x = result_calculate_sum0\n', '        break\n', '    if index < n // 2:\n', '        h1 += digits[index]\n', '    else:\n', '        h2 += digits[index]\n', 'if CHECK_CONDITION_1 & CHECK_CONDITION_2:\n', '    if not x:\n', '        if h1 == h2:\n', "            print('YES')\n", '        else:\n', "            print('NO')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '=', ' ', '3', '4', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ' ', '=', ' ', '1', '8', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '3', '2', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ' ', '=', ' ', '8', '0', '7', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'n', 'u', 'm', 'b', 'e', 'r', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'l', 'i', 's', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ')', ')', '\n', 'h', '1', ' ', '=', ' ', '0', '\n', 'h', '2', ' ', '=', ' ', '0', '\n', 'x', ' ', '=', ' ', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '1', '4', '5', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '1', '4', '4', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', '_', '1', ' ', '=', ' ', '2', '8', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '1', '5', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '=', ' ', '8', '2', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', '_', '1', ' ', '=', ' ', '1', '3', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '5', '4', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ' ', '=', ' ', '9', '2', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'n', 'u', 'm', 'b', 'e', 'r', '_', '1', '[', 'i', ']', ' ', '!', '=', ' ', '4', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'n', 'u', 'm', 'b', 'e', 'r', '_', '1', '[', 'i', ']', ' ', '!', '=', ' ', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'x', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '<', ' ', 'n', ' ', '/', '/', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', '1', ' ', '+', '=', ' ', 'n', 'e', 'w', 'n', 'u', 'm', 'b', 'e', 'r', '_', '1', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', '2', ' ', '+', '=', ' ', 'n', 'e', 'w', 'n', 'u', 'm', 'b', 'e', 'r', '_', '1', '[', 'i', ']', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'h', '1', ' ', '=', '=', ' ', 'h', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n']
['from sklearn.utils import shuffle\n', 'shuffle([37, 1, 46])\n', 'from scipy.stats import ttest_ind\n', 'q = int(input())\n', 'ans = [0, 0]\n', 'import heapq\n', 'p1 = []\n', 'p2 = []\n', 'heapq.heapify(p1)\n', 'heapq.heapify(p2)\n', 'sum_adjustment = 0\n', 'ttest_ind([9, 69, 10], [45, 17, 80])\n', 'sum_p1 = 0\n', 'sum_p2 = 0\n', 'condition_flag1 = 956\n', 'condition_flag2 = 727\n', 'total_iterations = 586\n', 'outer_loop_limit = 585\n', 'for LoopIndexOut in range(total_iterations // outer_loop_limit):\n', '    for query_index in range(q):\n', '        ql = list(map(int, input().split()))\n', '        if condition_flag1 & condition_flag2:\n', '            if ql[0] == 2:\n', '                if len(p1) == len(p2):\n', '                    print(-p2[0], sum_p1 - len(p1) * -p2[0] + len(p2) * -p2[0] - sum_p2 + sum_adjustment)\n', '                else:\n', '                    print(p1[0], sum_p1 - len(p1) * p1[0] + len(p2) * p1[0] - sum_p2 + sum_adjustment)\n', '            else:\n', '                sum_adjustment += ql[2]\n', '                if len(p1) == 0:\n', '                    heapq.heappush(p1, ql[1])\n', '                    sum_p1 += ql[1]\n', '                elif p1[0] <= ql[1]:\n', '                    heapq.heappush(p1, ql[1])\n', '                    sum_p1 += ql[1]\n', '                else:\n', '                    heapq.heappush(p2, -ql[1])\n', '                    sum_p2 += ql[1]\n', '                if len(p1) < len(p2):\n', '                    k = heapq.heappop(p2)\n', '                    heapq.heappush(p1, -k)\n', '                    sum_p2 = sum_p2 + k\n', '                    sum_p1 -= k\n', '                if len(p1) - 1 > len(p2):\n', '                    k = heapq.heappop(p1)\n', '                    heapq.heappush(p2, -k)\n', '                    sum_p1 -= k\n', '                    sum_p2 += k', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'q', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '[', '0', ',', ' ', '0', ']', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'q', '\n', 'p', '1', ' ', '=', ' ', '[', ']', '\n', 'p', '2', ' ', '=', ' ', '[', ']', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'i', 'f', 'y', '(', 'p', '1', ')', '\n', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'i', 'f', 'y', '(', 'p', '2', ')', '\n', 'n', 'e', 'w', 's', 'u', 'm', '_', 'b', '_', '1', ' ', '=', ' ', '0', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', ',', ' ', '6', '9', ',', ' ', '1', '0', ']', ',', ' ', '[', '4', '5', ',', ' ', '1', '7', ',', ' ', '8', '0', ']', ')', '\n', 's', 'u', 'm', '_', 'p', '1', ' ', '=', ' ', '0', '\n', 's', 'u', 'm', '_', 'p', '2', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', '_', '1', ' ', '=', ' ', '9', '5', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ' ', '=', ' ', '7', '2', '7', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '=', ' ', '5', '8', '6', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ' ', '=', ' ', '5', '8', '5', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'q', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'l', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'q', 'l', '[', '0', ']', ' ', '=', '=', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'p', '1', ')', ' ', '=', '=', ' ', 'l', 'e', 'n', '(', 'p', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '-', 'p', '2', '[', '0', ']', ',', ' ', 's', 'u', 'm', '_', 'p', '1', ' ', '-', ' ', 'l', 'e', 'n', '(', 'p', '1', ')', ' ', '*', ' ', '-', 'p', '2', '[', '0', ']', ' ', '+', ' ', 'l', 'e', 'n', '(', 'p', '2', ')', ' ', '*', ' ', '-', 'p', '2', '[', '0', ']', ' ', '-', ' ', 's', 'u', 'm', '_', 'p', '2', ' ', '+', ' ', 'n', 'e', 'w', 's', 'u', 'm', '_', 'b', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'p', '1', '[', '0', ']', ',', ' ', 's', 'u', 'm', '_', 'p', '1', ' ', '-', ' ', 'l', 'e', 'n', '(', 'p', '1', ')', ' ', '*', ' ', 'p', '1', '[', '0', ']', ' ', '+', ' ', 'l', 'e', 'n', '(', 'p', '2', ')', ' ', '*', ' ', 'p', '1', '[', '0', ']', ' ', '-', ' ', 's', 'u', 'm', '_', 'p', '2', ' ', '+', ' ', 'n', 'e', 'w', 's', 'u', 'm', '_', 'b', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', 'u', 'm', '_', 'b', '_', '1', ' ', '+', '=', ' ', 'q', 'l', '[', '2', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'p', '1', ')', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'p', '1', ',', ' ', 'q', 'l', '[', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', '_', 'p', '1', ' ', '+', '=', ' ', 'q', 'l', '[', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'p', '1', '[', '0', ']', ' ', '<', '=', ' ', 'q', 'l', '[', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'p', '1', ',', ' ', 'q', 'l', '[', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', '_', 'p', '1', ' ', '+', '=', ' ', 'q', 'l', '[', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'p', '2', ',', ' ', '-', 'q', 'l', '[', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', '_', 'p', '2', ' ', '+', '=', ' ', 'q', 'l', '[', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'p', '1', ')', ' ', '<', ' ', 'l', 'e', 'n', '(', 'p', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '(', 'p', '2', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'p', '1', ',', ' ', '-', 'k', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', '_', 'p', '2', ' ', '=', ' ', 's', 'u', 'm', '_', 'p', '2', ' ', '+', ' ', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', '_', 'p', '1', ' ', '-', '=', ' ', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'p', '1', ')', ' ', '-', ' ', '1', ' ', '>', ' ', 'l', 'e', 'n', '(', 'p', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '(', 'p', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'p', '2', ',', ' ', '-', 'k', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', '_', 'p', '1', ' ', '-', '=', ' ', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', '_', 'p', '2', ' ', '+', '=', ' ', 'k', '\n']
['from scipy.stats import ttest_ind\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', 'import sys\n', '\n', '@my_decorator\n', 'def Func_I_0():\n', '    ttest_ind([52, 70, 65], [85, 28, 55])\n', '    return int(sys.stdin.readline())\n', '\n', 'def Func_LI_0():\n', '    return [int(x) for x in sys.stdin.readline().split()]\n', '\n', 'def main():\n', '    queue_I0 = queue.Queue()\n', '\n', '    def I_thread(queue):\n', '        result = Func_I_0()\n', '        queue.put(result)\n', '    thread_I0 = threading.Thread(target=I_thread, args=(queue_I0,))\n', '    thread_I0.start()\n', '    thread_I0.join()\n', '    result_I0 = queue_I0.get()\n', '    N = result_I0\n', '    S = sorted(Func_LI_0(), reverse=True)\n', '    flag = [True] * len(S)\n', '    current_values = []\n', '    current_values.append(S[0])\n', '    flag[0] = False\n', '    condition2 = 357\n', '    condition1 = 83\n', '    for i in range(N):\n', '        j = 0\n', '        jM = len(current_values)\n', '        for k in range(len(S)):\n', '            if condition2 & condition1:\n', '                if flag[k] and S[k] < current_values[j]:\n', '                    current_values.append(S[k])\n', '                    j = j + 1\n', '                    flag[k] = False\n', '                    if j == jM:\n', '                        break\n', '        else:\n', "            return 'No'\n", '        current_values.sort(reverse=True)\n', "    return 'Yes'\n", "if __name__ == '__main__':\n", '    print(main())', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '3', ',', ' ', '5', '3', ',', ' ', '3', '3', ']', ',', ' ', '[', '9', '0', ',', ' ', '1', '9', ',', ' ', '8', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'N', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '0', '\n', ' ', ' ', ' ', ' ', 'S', ' ', '=', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', 'L', 'I', '(', ')', ',', ' ', 'r', 'e', 'v', 'e', 'r', 's', 'e', '=', 'T', 'r', 'u', 'e', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'l', 'a', 'g', ' ', '=', ' ', '[', 'T', 'r', 'u', 'e', ']', ' ', '*', ' ', 'l', 'e', 'n', '(', 'S', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'u', 'r', '_', '1', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'u', 'r', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'S', '[', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'l', 'a', 'g', '[', '0', ']', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '3', '5', '7', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '8', '3', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '=', ' ', '5', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ' ', '=', ' ', '8', '9', '7', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'j', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'j', 'M', ' ', '=', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'c', 'u', 'r', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'k', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'S', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'f', 'l', 'a', 'g', '[', 'n', 'e', 'w', 'k', '_', '1', ']', ' ', 'a', 'n', 'd', ' ', 'S', '[', 'n', 'e', 'w', 'k', '_', '1', ']', ' ', '<', ' ', 'n', 'e', 'w', 'c', 'u', 'r', '_', '1', '[', 'j', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'u', 'r', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'S', '[', 'n', 'e', 'w', 'k', '_', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'j', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'l', 'a', 'g', '[', 'n', 'e', 'w', 'k', '_', '1', ']', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'j', ' ', '=', '=', ' ', 'j', 'M', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', "'", 'N', 'o', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'u', 'r', '_', '1', '.', 's', 'o', 'r', 't', '(', 'r', 'e', 'v', 'e', 'r', 's', 'e', '=', 'T', 'r', 'u', 'e', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', "'", 'Y', 'e', 's', "'", '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'm', 'a', 'i', 'n', '(', ')', ')', '\n']
['outer_loop_limit = 875\n', 'inner_loop_step = 874\n', 'is_condition_133_met = 785\n', 'is_condition_233_met = 484\n', 'is_condition_131_met = 127\n', 'is_condition_231_met = 718\n', 'import threading\n', 'import queue\n', '(N, X) = [int(_) for _ in input().split()]\n', 'from itertools import permutations\n', '\n', 'def calc(x):\n', '\n', '    def Func_sub_0(y, debug=0):\n', '        if debug:\n', "            print('D', y)\n", '        while len(y) > 1:\n', '            y = [sorted(y[i:i + 3])[1] for i in range(len(y) - 2)]\n', '            if debug:\n', "                print('D', y)\n", '        return y\n', '    sub_result_queue = queue.Queue()\n', '\n', '    def Func_sub_thread_0(queue):\n', '        result = Func_sub_0(x)\n', '        queue.put(result)\n', '    thread_sub0 = threading.Thread(target=sub_thread, args=(sub_result_queue,))\n', '    thread_sub0.start()\n', '    thread_sub0.join()\n', '    result_sub0 = sub_result_queue.get()\n', '    y = result_sub0\n', '    if y[0] == 2:\n', '        pass\n', '        Func_sub_0(x, 1)\n', "        print('=', x)\n", '    return y[0]\n', 'if is_condition_133_met & is_condition_233_met:\n', '    if is_condition_131_met & is_condition_231_met:\n', '        if X == 1 or X == N * 2 - 1:\n', "            print('No')\n", '        else:\n', "            print('Yes')\n", '            if X == N * 2 - 2:\n', '                modified_sequence = list(range(N - 1, X + 2)) + list(range(1, N - 1))\n', '            else:\n', '                ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))\n', '                modified_sequence = ys[:N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]\n', '            for LoopIndexOut in range(outer_loop_limit // inner_loop_step):\n', '                for x in modified_sequence:\n', '                    print(x)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '3', ' ', '=', ' ', '7', '8', '5', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '3', ' ', '=', ' ', '4', '8', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '1', ' ', '=', ' ', '1', '2', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '1', ' ', '=', ' ', '7', '1', '8', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '(', 'N', ',', ' ', 'X', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', '_', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'p', 'e', 'r', 'm', 'u', 't', 'a', 't', 'i', 'o', 'n', 's', '\n', '\n', 'd', 'e', 'f', ' ', 'c', 'a', 'l', 'c', '(', 'x', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '(', 'y', ',', ' ', 'd', 'e', 'b', 'u', 'g', '=', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', 'e', 'b', 'u', 'g', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'D', "'", ',', ' ', 'y', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'l', 'e', 'n', '(', 'y', ')', ' ', '>', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '=', ' ', '[', 's', 'o', 'r', 't', 'e', 'd', '(', 'y', '[', 'i', ':', 'i', ' ', '+', ' ', '3', ']', ')', '[', '1', ']', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'y', ')', ' ', '-', ' ', '2', ')', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', 'e', 'b', 'u', 'g', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'D', "'", ',', ' ', 'y', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'y', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 's', 'u', 'b', '0', '_', '1', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', 't', 'h', 'r', 'e', 'a', 'd', '_', '0', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '(', 'x', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '0', '_', '1', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '0', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 's', 'u', 'b', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 's', 'u', 'b', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 's', 'u', 'b', '0', '_', '1', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 's', 'u', 'b', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 's', 'u', 'b', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 's', 'u', 'b', '0', ' ', '=', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 's', 'u', 'b', '0', '_', '1', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'y', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 's', 'u', 'b', '0', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'y', '[', '0', ']', ' ', '=', '=', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', '_', '0', '(', 'x', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", '=', "'", ',', ' ', 'x', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'y', '[', '0', ']', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '3', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'X', ' ', '=', '=', ' ', '1', ' ', 'o', 'r', ' ', 'X', ' ', '=', '=', ' ', 'N', ' ', '*', ' ', '2', ' ', '-', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'o', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'e', 's', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'X', ' ', '=', '=', ' ', 'N', ' ', '*', ' ', '2', ' ', '-', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'r', 'a', 'n', 'g', 'e', '(', 'N', ' ', '-', ' ', '1', ',', ' ', 'X', ' ', '+', ' ', '2', ')', ')', ' ', '+', ' ', 'l', 'i', 's', 't', '(', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'N', ' ', '-', ' ', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'X', ' ', '-', ' ', '1', ')', ')', ' ', '+', ' ', 'l', 'i', 's', 't', '(', 'r', 'a', 'n', 'g', 'e', '(', 'X', ' ', '+', ' ', '3', ',', ' ', 'N', ' ', '*', ' ', '2', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', 's', ' ', '=', ' ', 'y', 's', '[', ':', 'N', ' ', '-', ' ', '3', ']', ' ', '+', ' ', '[', 'X', ' ', '+', ' ', '2', ',', ' ', 'X', ' ', '-', ' ', '1', ',', ' ', 'X', ',', ' ', 'X', ' ', '+', ' ', '1', ']', ' ', '+', ' ', 'y', 's', '[', 'N', ' ', '-', ' ', '3', ':', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'x', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'x', ')', '\n']
['from sklearn.utils import shuffle\n', 'import numpy as np\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', "    base64.b64encode(b'38778379660304004330')\n", '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def calculate_combinations(variable_6_45, n, variable_3_45):\n', "    parse('2025-02-15 19:37:32')\n", '    return (n - variable_6_45) // variable_3_45\n', '\n', '\n', '(K, num_items) = list(map(int, input().split()))\n', 'dprint = lambda *x: x\n', '\n', '\n', 'def cmb(n, r, mod):\n', '    Fernet.generate_key()\n', '    shuffle([23, 94, 3])\n', '    try:\n', '        is_ready = [941][0]\n', '        is_valid = 427\n', '        if is_ready & is_valid:\n', '            if r < 0 or r > n:\n', '                return 0\n', '        r = np.min(np.array([r, n - r]))\n', '        return g1[n] * g2[r] * g2[n - r] % mod\n', '    except:\n', '        pass\n', '\n', '\n', 'mod = 998244353\n', '__N = 8000\n', 'g1 = [1, 1]\n', 'g2 = [1, 1]\n', 'inverse = [0, 1]\n', 'max_loop_count = 254\n', 'step_size = 253\n', 'for LoopIndexOut in range(max_loop_count // step_size):\n', '    for i in range(2, __N + 1):\n', '        g1.append(g1[-1] * i % mod)\n', '        inverse.append(-inverse[mod % i] * (mod // i) % mod)\n', '        g2.append(g2[-1] * inverse[-1] % mod)\n', 'else:\n', '    pass\n', '\n', '\n', 'def kumiawase(p, q):\n', '    ttest_ind([78, 89, 48], [24, 37, 73])\n', "    HTTPConnection('google.com', port=80)\n", '    time.sleep(0.2)\n', '    return cmb(p + q - 1, q - 1, mod)\n', '\n', '\n', 'def solve(n):\n', '    assert n <= K + 1\n', '    ans = 0\n', '    datetime.datetime.now()\n', '    variable_3_45 = 2\n', '    variable_6_45 = 1\n', '    kumi = calculate_combinations(variable_6_45, n, variable_3_45)\n', '    for p in range(kumi + 1):\n', '        if p > num_items:\n', '            break\n', '        ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(num_items - p,\n', '                                                      p + (K - kumi * 2 - int(n % 2 == 0)))\n', '        if n % 2 == 0 and num_items - p - 1 >= 0:\n', '            ans += 2 ** p * cmb(kumi, p, mod) * kumiawase(num_items -\n', '                                                          p - 1, p + (K - kumi * 2 - int(n % 2 == 0)))\n', '    return ans\n', '\n', '\n', 'ans = []\n', 'for i in range(2, 2 * K + 1):\n', '    if i <= K + 1:\n', '        tmp = solve(i) % 998244353\n', '        ans.append(tmp)\n', '        print(tmp)\n', '    else:\n', '        print(ans[-i + K])\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', 'from collections import deque\n', 'import sys\n', 'input = sys.stdin.readline\n', '\n', '@my_decorator\n', 'def Func_bfs_0(v, N, G, E):\n', '    visited = [0] * N\n', '    queue = deque()\n', '    K = -1\n', '    node2color = [-1 for _ in range(N)]\n', '    queue.append(v)\n', '    visited[v] = 1\n', '    while queue:\n', '        current_node = queue.popleft()\n', '        color = 0\n', '        is_valid = 577\n', '        always_true = 705\n', '        for nex in G[current_node]:\n', '            if is_valid & always_true:\n', '                if visited[nex]:\n', '                    continue\n', '            visited[nex] = 1\n', '            color = color + 1\n', '            if color == node2color[current_node]:\n', '                color = color + 1\n', '            node2color[nex] = color\n', '            E[np.min(np.array([current_node, nex])), max(current_node, nex)] = color\n', '            queue.append(nex)\n', '        K = max(K, color)\n', '    return K\n', '\n', 'def main():\n', '    N = int(input())\n', '    G = [deque() for _ in range(N)]\n', '    E = dict()\n', '    for i in range(N - 1):\n', '        (a, b) = map(lambda x: int(x) - 1, input().split())\n', '        G[a].append(b)\n', '        G[b].append(a)\n', '        E[a, b] = 0\n', '    queue_bfs0 = queue.Queue()\n', '\n', '    def bfs_thread(queue):\n', '        result = Func_bfs_0(0, N, G, E)\n', '        queue.put(result)\n', '    thread_bfs0 = threading.Thread(target=bfs_thread, args=(queue_bfs0,))\n', '    thread_bfs0.start()\n', '    thread_bfs0.join()\n', '    result_bfs0 = queue_bfs0.get()\n', '    K = result_bfs0\n', '    print(K)\n', '    for value in E.values():\n', '        print(value)\n', 'main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'b', 'f', 's', '_', '0', '(', 'v', ',', ' ', 'N', ',', ' ', 'G', ',', ' ', 'E', ')', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'i', 's', 'i', 't', 'e', 'd', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', 'N', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', ' ', '=', ' ', 'd', 'e', 'q', 'u', 'e', '(', ')', '\n', ' ', ' ', ' ', ' ', 'K', ' ', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'o', 'd', 'e', '2', 'c', 'o', 'l', 'o', 'r', ' ', '=', ' ', '[', '-', '1', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ']', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'v', ')', '\n', ' ', ' ', ' ', ' ', 'v', 'i', 's', 'i', 't', 'e', 'd', '[', 'v', ']', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'q', 'u', 'e', 'u', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'o', 'p', 'l', 'e', 'f', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'l', 'o', 'r', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '9', '7', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ' ', '=', ' ', '5', '9', '8', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '=', ' ', '4', '0', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ' ', '=', ' ', '2', '0', '4', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '=', ' ', '9', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ' ', '=', ' ', '7', '4', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'x', ' ', 'i', 'n', ' ', 'G', '[', 'q', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'v', 'i', 's', 'i', 't', 'e', 'd', '[', 'n', 'e', 'x', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'i', 's', 'i', 't', 'e', 'd', '[', 'n', 'e', 'x', ']', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'l', 'o', 'r', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'o', 'l', 'o', 'r', ' ', '=', '=', ' ', 'n', 'o', 'd', 'e', '2', 'c', 'o', 'l', 'o', 'r', '[', 'q', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'l', 'o', 'r', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'd', 'e', '2', 'c', 'o', 'l', 'o', 'r', '[', 'n', 'e', 'x', ']', ' ', '=', ' ', 'c', 'o', 'l', 'o', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'E', '[', 'm', 'i', 'n', '(', 'q', ',', ' ', 'n', 'e', 'x', ')', ',', ' ', 'm', 'a', 'x', '(', 'q', ',', ' ', 'n', 'e', 'x', ')', ']', ' ', '=', ' ', 'c', 'o', 'l', 'o', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'x', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'K', ' ', '=', ' ', 'm', 'a', 'x', '(', 'K', ',', ' ', 'c', 'o', 'l', 'o', 'r', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'K', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'N', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'G', ' ', '=', ' ', '[', 'd', 'e', 'q', 'u', 'e', '(', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ']', '\n', ' ', ' ', ' ', ' ', 'E', ' ', '=', ' ', 'd', 'i', 'c', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ' ', '-', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'x', ':', ' ', 'i', 'n', 't', '(', 'x', ')', ' ', '-', ' ', '1', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'G', '[', 'a', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'b', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'G', '[', 'b', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'a', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'E', '[', 'a', ',', ' ', 'b', ']', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'b', 'f', 's', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'b', 'f', 's', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'b', 'f', 's', '_', '0', '(', '0', ',', ' ', 'N', ',', ' ', 'G', ',', ' ', 'E', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'b', 'f', 's', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'b', 'f', 's', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'b', 'f', 's', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'b', 'f', 's', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'b', 'f', 's', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'b', 'f', 's', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'b', 'f', 's', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'K', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'b', 'f', 's', '0', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'K', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'v', 'a', 'l', 'u', 'e', ' ', 'i', 'n', ' ', 'E', '.', 'v', 'a', 'l', 'u', 'e', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'v', 'a', 'l', 'u', 'e', ')', '\n', 'm', 'a', 'i', 'n', '(', ')', '\n']
['isGameOver = 483\n', 'isTimeUp = 504\n', 'isTargetReached = 430\n', 'isPathClear = 230\n', 'isValidInput = 239\n', 'isWithinRange = 917\n', 'from scipy.stats import ttest_ind\n', 'princessPower = int(input())\n', 'dragonPower = int(input())\n', 't = int(input())\n', 'f = int(input())\n', 'c = int(input())\n', 'if isGameOver & isTimeUp:\n', '    if isTargetReached & isPathClear:\n', '        if isValidInput & isWithinRange:\n', '            if dragonPower <= princessPower:\n', '                print(0)\n', '                exit(0)\n', 'result = 0\n', 'position = t * princessPower\n', 'ttest_ind([5, 21, 51], [69, 24, 15])\n', 'position += princessPower * position / (dragonPower - princessPower)\n', 'loopCounter1 = 797\n', 'loopCounter2 = 796\n', 'while loopCounter1 % loopCounter2 == 1:\n', '    loopCounter1 = loopCounter1 + 1\n', '    while position < c:\n', '        result = result + 1\n', '        position += princessPower * position / dragonPower\n', '        position += princessPower * f\n', '        position += princessPower * position / (dragonPower - princessPower)\n', 'print(result)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '4', '3', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '2', '3', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '2', '3', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '9', '1', '7', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'd', 'r', 'a', 'g', 'o', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 't', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '5', '7', ',', ' ', '3', '9', ',', ' ', '2', '1', ']', ')', '\n', 'f', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'c', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'd', 'r', 'a', 'g', 'o', 'n', '_', '1', ' ', '<', '=', ' ', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', '0', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', '0', '\n', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '=', ' ', 't', ' ', '*', ' ', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', ',', ' ', '2', '1', ',', ' ', '5', '1', ']', ',', ' ', '[', '6', '9', ',', ' ', '2', '4', ',', ' ', '1', '5', ']', ')', '\n', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '+', '=', ' ', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', ' ', '*', ' ', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '/', ' ', '(', 'n', 'e', 'w', 'd', 'r', 'a', 'g', 'o', 'n', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', ')', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', '7', '9', '7', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '7', '9', '6', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '<', ' ', 'c', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '+', '=', ' ', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', ' ', '*', ' ', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '/', ' ', 'n', 'e', 'w', 'd', 'r', 'a', 'g', 'o', 'n', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '+', '=', ' ', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', ' ', '*', ' ', 'f', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '+', '=', ' ', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', ' ', '*', ' ', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', ' ', '/', ' ', '(', 'n', 'e', 'w', 'd', 'r', 'a', 'g', 'o', 'n', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'p', 'r', 'i', 'n', 'c', 'e', 's', 's', '_', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n']
['def subtract(arg0, arg1):\n', '    return arg0 - arg1\n', '\n', 'def deduct(arg0, arg1):\n', '    return subtract(arg0, arg1)\n', '\n', 'def minus(arg0, arg1):\n', '    return deduct(arg0, arg1)\n', '\n', 'def decrement(arg0, arg1):\n', '    return minus(arg0, arg1)\n', '\n', 'def reduce(arg0, arg1):\n', '    return decrement(arg0, arg1)\n', '\n', 'def discount(arg0, arg1):\n', '    return reduce(arg0, arg1)\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def difference(a, b):\n', '    return discount(a, b)\n', 'from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'from sklearn.utils import shuffle\n', 'datetime.datetime.now()\n', "parse('2024-10-24 12:02:54')\n", "base64.b64encode(b'53173736889998315822')\n", 'Fernet.generate_key()\n', 'import numpy as np\n', '(height, width) = map(int, input().split())\n', "graph = [[[0 if char == '#' else float('inf') for char in list(input())] for row in range(height)]][0]\n", 'ttest_ind([40, 93, 33], [21, 41, 62])\n', 'graph = np.array(graph)\n', 'for x in range(difference(width, 1)):\n', '    graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])\n', "HTTPConnection('google.com', port=80)\n", 'for x in range(width - 1, 0, -1):\n', '    graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])\n', 'for y in range(height - 1):\n', '    graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])\n', 'for y in range(height - 1, 0, -1):\n', '    graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])\n', 'shuffle([99, 27, 51])\n', 'time.sleep(0.27)\n', 'print(int(np.max(graph)))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'r', 'y', ':', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'c', 'e', 'p', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'r', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '/', '/', ' ', 'b', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'c', 'e', 'p', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'd', 'a', 't', 'e', 'u', 't', 'i', 'l', '.', 'p', 'a', 'r', 's', 'e', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'p', 'a', 'r', 's', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 't', 't', 'p', '.', 'c', 'l', 'i', 'e', 'n', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'H', 'T', 'T', 'P', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'y', '.', 'f', 'e', 'r', 'n', 'e', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'F', 'e', 'r', 'n', 'e', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'a', 's', 'e', '6', '4', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '0', '6', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'F', 'e', 'r', 'n', 'e', 't', '.', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '_', 'k', 'e', 'y', '(', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '8', '9', ',', ' ', '2', '7', ',', ' ', '8', '0', ']', ',', ' ', '[', '2', '7', ',', ' ', '2', '5', ',', ' ', '9', '9', ']', ')', '\n', '(', 'n', 'e', 'w', 'h', '_', '1', ',', ' ', 'n', 'e', 'w', 'w', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', ' ', '=', ' ', '[', '[', '[', '0', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', '=', ' ', "'", '#', "'", ' ', 'e', 'l', 's', 'e', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'l', 'i', 's', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ']', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'h', '_', '1', ')', ']', ']', '[', '0', ']', '\n', 'b', 'a', 's', 'e', '6', '4', '.', 'b', '6', '4', 'e', 'n', 'c', 'o', 'd', 'e', '(', 'b', "'", '1', '8', '4', '3', '6', '8', '8', '7', '8', '8', '5', '4', '9', '3', '8', '7', '3', '3', '8', '1', "'", ')', '\n', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', ' ', '=', ' ', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '0', ',', ' ', '8', '2', ',', ' ', '1', '8', ']', ')', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '[', '8', '2', '4', ']', '[', '0', ']', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '[', '8', '2', '3', ']', '[', '0', ']', '\n', 'p', 'a', 'r', 's', 'e', '(', "'", '2', '0', '2', '4', '-', '1', '0', '-', '2', '4', ' ', '1', '2', ':', '0', '4', ':', '5', '3', "'", ')', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ',', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'w', '_', '1', ' ', '-', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', ':', ',', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '+', ' ', '1', ']', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', 'i', 'm', 'u', 'm', '(', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', ':', ',', ' ', 'n', 'e', 'w', 'x', '_', '1', ']', ' ', '+', ' ', '1', ',', ' ', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', ':', ',', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '+', ' ', '1', ']', ')', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'w', '_', '1', ' ', '-', ' ', '1', ',', ' ', '0', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', ':', ',', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '-', ' ', '1', ']', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', 'i', 'm', 'u', 'm', '(', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', ':', ',', ' ', 'n', 'e', 'w', 'x', '_', '1', ']', ' ', '+', ' ', '1', ',', ' ', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', ':', ',', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '-', ' ', '1', ']', ')', '\n', 'H', 'T', 'T', 'P', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', '(', "'", 'g', 'o', 'o', 'g', 'l', 'e', '.', 'c', 'o', 'm', "'", ',', ' ', 'p', 'o', 'r', 't', '=', '8', '0', ')', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'y', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'h', '_', '1', ' ', '-', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', 'n', 'e', 'w', 'y', '_', '1', ' ', '+', ' ', '1', ',', ' ', ':', ']', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', 'i', 'm', 'u', 'm', '(', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', 'n', 'e', 'w', 'y', '_', '1', ',', ' ', ':', ']', ' ', '+', ' ', '1', ',', ' ', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', 'n', 'e', 'w', 'y', '_', '1', ' ', '+', ' ', '1', ',', ' ', ':', ']', ')', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'y', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'h', '_', '1', ' ', '-', ' ', '1', ',', ' ', '0', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', 'n', 'e', 'w', 'y', '_', '1', ' ', '-', ' ', '1', ',', ' ', ':', ']', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', 'i', 'm', 'u', 'm', '(', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', 'n', 'e', 'w', 'y', '_', '1', ',', ' ', ':', ']', ' ', '+', ' ', '1', ',', ' ', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', '[', 'n', 'e', 'w', 'y', '_', '1', ' ', '-', ' ', '1', ',', ' ', ':', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'e', 'w', 'g', 'r', 'a', 'p', 'h', '_', '1', ')', ')', ')', '\n']
['def diff_calc_level1(arg0, arg1):\n', '    return arg0 - arg1\n', '\n', 'def diff_calc_level4(arg0, arg1):\n', '    return diff_calc_level1(arg0, arg1)\n', '\n', 'def diff_calc_level3(arg0, arg1):\n', '    return diff_calc_level4(arg0, arg1)\n', '\n', 'def diff_calc_level2(arg0, arg1):\n', '    return diff_calc_level3(arg0, arg1)\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '\n', '@my_decorator\n', 'def calculate_difference(start_index, b):\n', '    shuffle([82, 42, 18])\n', '    ttest_ind([63, 51, 57], [96, 90, 15])\n', '    return diff_calc_level2(start_index, b)\n', '(num_lines, dummy_var) = map(int, input().split())\n', "results = set((calculate_difference(input_string.find('S'), input_string.find('G')) for input_string in (input() for counter in range(num_lines))))\n", 'print(-1 if any((start_index < 0 for start_index in results)) else len(results))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '5', '5', '6', '5', '3', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '-', ' ', 'a', 'r', 'g', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '3', '5', '2', '8', '8', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '5', '5', '6', '5', '3', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '7', '9', '1', '6', '3', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', ',', ' ', '5', '0', ',', ' ', '6', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '3', '5', '2', '8', '8', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '2', '2', '0', '5', '5', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '7', '9', '1', '6', '3', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '8', '9', '4', '0', '1', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '2', '2', '0', '5', '5', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '3', ',', ' ', '5', '1', ',', ' ', '5', '7', ']', ',', ' ', '[', '9', '6', ',', ' ', '9', '0', ',', ' ', '1', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '8', '9', '4', '0', '1', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'm', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'c', '_', '1', ' ', '=', ' ', 's', 'e', 't', '(', '(', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'e', 'w', 's', '_', '1', '.', 'f', 'i', 'n', 'd', '(', "'", 'S', "'", ')', ',', ' ', 'n', 'e', 'w', 's', '_', '1', '.', 'f', 'i', 'n', 'd', '(', "'", 'G', "'", ')', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', 'i', 'n', ' ', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ')', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ' ', 'i', 'f', ' ', 'a', 'n', 'y', '(', '(', 'n', 'e', 'w', 'a', '_', '1', ' ', '<', ' ', '0', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'c', '_', '1', ')', ')', ' ', 'e', 'l', 's', 'e', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'c', '_', '1', ')', ')', '\n']
['condition_18 = 416\n', 'condition_28 = 431\n', 'condition_16 = 315\n', 'condition_26 = 697\n', 'condition_14 = 663\n', 'condition_24 = 739\n', 'from scipy.stats import ttest_ind\n', 'R = lambda : map(int, input().split())\n', '(n, m, s, f) = R()\n', 'if condition_18 & condition_28:\n', '    if condition_16 & condition_26:\n', '        if condition_14 & condition_24:\n', '            if s < f:\n', '                d = 1\n', "                c = 'R'\n", '            else:\n', '                d = -1\n', "                c = 'L'\n", "res = ''\n", 'i = 1\n', 'current_position = s\n', '(t, l, r) = R()\n', 'k = 1\n', 'loop_condition_1 = 287\n', 'loop_condition_2 = 286\n', 'while loop_condition_1 % loop_condition_2 == 1:\n', '    loop_condition_1 = loop_condition_1 + 1\n', '    while current_position != f:\n', '        if i > t and k < m:\n', '            (t, l, r) = R()\n', '            k = k + 1\n', '        if i == t and (l <= current_position <= r or l <= current_position + d <= r):\n', "            res = res + 'X'\n", '        else:\n', '            res += c\n', '            current_position += d\n', '        i += 1\n', 'ttest_ind([68, 65, 96], [47, 63, 92])\n', 'print(res)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '3', '1', '5', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', ' ', '6', '9', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '6', '6', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '7', '3', '9', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'R', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '(', 'n', ',', ' ', 'm', ',', ' ', 's', ',', ' ', 'f', ')', ' ', '=', ' ', 'R', '(', ')', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', ' ', '<', ' ', 'f', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', "'", 'R', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', "'", 'L', "'", '\n', 'r', 'e', 's', ' ', '=', ' ', "'", "'", '\n', 'i', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 'j', '_', '1', ' ', '=', ' ', 's', '\n', '(', 't', ',', ' ', 'l', ',', ' ', 'r', ')', ' ', '=', ' ', 'R', '(', ')', '\n', 'k', ' ', '=', ' ', '1', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', '2', '8', '7', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '2', '8', '6', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '!', '=', ' ', 'f', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', ' ', 't', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '<', ' ', 'm', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 't', ',', ' ', 'l', ',', ' ', 'r', ')', ' ', '=', ' ', 'R', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'k', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '=', '=', ' ', 't', ' ', 'a', 'n', 'd', ' ', '(', 'l', ' ', '<', '=', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '<', '=', ' ', 'r', ' ', 'o', 'r', ' ', 'l', ' ', '<', '=', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '+', ' ', 'd', ' ', '<', '=', ' ', 'r', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'r', 'e', 's', ' ', '+', ' ', "'", 'X', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'r', 'e', 's', ' ', '+', ' ', 'c', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '+', '=', ' ', 'd', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '7', '0', ',', ' ', '3', '3', ',', ' ', '5', '2', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '8', ',', ' ', '6', '5', ',', ' ', '9', '6', ']', ',', ' ', '[', '4', '7', ',', ' ', '6', '3', ',', ' ', '9', '2', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', ')', '\n']
['from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 's = str(input())\n', "result_string = ''\n", 'condition_check_1 = 909\n', 'condition_check_2 = 642\n', 'condition_check_3 = 112\n', 'condition_check_4 = 209\n', 'ttest_ind([93, 25, 15], [54, 96, 81])\n', 'outer_loop_limit = 108\n', 'shuffle([26, 10, 78])\n', 'inner_loop_limit = 107\n', 'for LoopIndexOut in range(outer_loop_limit // inner_loop_limit):\n', '    for current_char in s:\n', '        if condition_check_3 & condition_check_4:\n', '            if condition_check_1 & condition_check_2:\n', "                if current_char == '0' or current_char == '1':\n", '                    result_string = result_string + current_char\n', "                elif current_char == 'B' and len(result_string) != 0:\n", '                    result_string = result_string[:len(result_string) - 1]\n', 'print(result_string)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '(', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ',', ' ', 'n', 'e', 'w', 'c', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ' ', '+', ' ', 'n', 'e', 'w', 'c', '_', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 's', ' ', '=', ' ', 's', 't', 'r', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ' ', '=', ' ', "'", "'", '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '=', ' ', '9', '0', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '6', '4', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '1', '1', '2', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '2', '0', '9', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '3', ',', ' ', '2', '5', ',', ' ', '1', '5', ']', ',', ' ', '[', '5', '4', ',', ' ', '9', '6', ',', ' ', '8', '1', ']', ')', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '1', '0', '8', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '1', '0', '7', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'c', '_', '1', ' ', 'i', 'n', ' ', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'c', '_', '1', ' ', '=', '=', ' ', "'", '0', "'", ' ', 'o', 'r', ' ', 'n', 'e', 'w', 'c', '_', '1', ' ', '=', '=', ' ', "'", '1', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '(', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ',', ' ', 'n', 'e', 'w', 'c', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 'c', '_', '1', ' ', '=', '=', ' ', "'", 'B', "'", ' ', 'a', 'n', 'd', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ')', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', '[', ':', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ')', ' ', '-', ' ', '1', ']', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'm', 'y', '_', 's', 't', 'r', '_', '1', ')', '\n']
['def sum_lists(arg0, arg1):\n', '    return arg0 + arg1\n', 'import threading\n', 'import queue\n', '\n', 'def calculate_combinations(n, k, sk, total_set_size, Func_get_nums_0):\n', '    return sum_lists(Func_get_nums_0(k, sk), Func_get_nums_0(n - k, total_set_size - sk))\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '\n', '@my_decorator\n', 'def Func_get_nums_0(num, t):\n', '    ttest_ind([91, 36, 6], [71, 25, 86])\n', '    shuffle([84, 74, 12])\n', '    return [t // num + 1 if index in range(t % num) else t // num for index in range(num)]\n', '(n, k, unused_variable, r, total_set_size, sk) = map(int, input().split())\n', 'results_queue = queue.Queue()\n', '\n', 'def calculation_thread(queue):\n', '    result = calculate_combinations(n, k, sk, total_set_size, Func_get_nums_0)\n', '    queue.put(result)\n', 'worker_thread = threading.Thread(target=calculation_thread, args=(results_queue,))\n', 'worker_thread.start()\n', 'worker_thread.join()\n', 'combinations_result = results_queue.get()\n', 'ans = combinations_result\n', "print(' '.join(map(str, ans)))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '_', '0', '(', 'n', ',', ' ', 'k', ',', ' ', 's', 'k', ',', ' ', 'n', 'e', 'w', 's', 'a', '_', '1', ',', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 't', '_', 'n', 'u', 'm', 's', '_', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 't', '_', 'n', 'u', 'm', 's', '_', '0', '(', 'k', ',', ' ', 's', 'k', ')', ' ', '+', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 't', '_', 'n', 'u', 'm', 's', '_', '0', '(', 'n', ' ', '-', ' ', 'k', ',', ' ', 'n', 'e', 'w', 's', 'a', '_', '1', ' ', '-', ' ', 's', 'k', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 't', '_', 'n', 'u', 'm', 's', '_', '0', '(', 'n', 'u', 'm', ',', ' ', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '1', ',', ' ', '3', '6', ',', ' ', '6', ']', ',', ' ', '[', '7', '1', ',', ' ', '2', '5', ',', ' ', '8', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', '4', ',', ' ', '7', '4', ',', ' ', '1', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 't', ' ', '/', '/', ' ', 'n', 'u', 'm', ' ', '+', ' ', '1', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 't', ' ', '%', ' ', 'n', 'u', 'm', ')', ' ', 'e', 'l', 's', 'e', ' ', 't', ' ', '/', '/', ' ', 'n', 'u', 'm', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'u', 'm', ')', ']', '\n', '(', 'n', ',', ' ', 'k', ',', ' ', 'n', 'e', 'w', 'l', '_', '1', ',', ' ', 'r', ',', ' ', 'n', 'e', 'w', 's', 'a', '_', '1', ',', ' ', 's', 'k', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '_', '0', '(', 'n', ',', ' ', 'k', ',', ' ', 's', 'k', ',', ' ', 'n', 'e', 'w', 's', 'a', '_', '1', ',', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 't', '_', 'n', 'u', 'm', 's', '_', '0', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '0', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", ' ', "'", '.', 'j', 'o', 'i', 'n', '(', 'm', 'a', 'p', '(', 's', 't', 'r', ',', ' ', 'a', 'n', 's', ')', ')', ')', '\n']
['def remaining_capacity(len, y, m):\n', '    return m - len(y)\n', 'from sklearn.utils import shuffle\n', 'shuffle([25, 27, 79])\n', 'from scipy.stats import ttest_ind\n', 'import heapq\n', '(n, m) = map(int, input().split())\n', 'ttest_ind([50, 75, 6], [33, 58, 60])\n', 'x = []\n', 'y = []\n', 'for i in range(n):\n', '    (day, salary) = map(int, input().split())\n', '    heapq.heappush(x, (-day, -salary))\n', 'while x:\n', '    check1 = 739\n', '    check2 = 777\n', '    (d, salary) = heapq.heappop(x)\n', '    r = remaining_capacity(len, y, m)\n', '    if check1 & check2:\n', '        if r >= -d:\n', '            heapq.heappush(y, -salary)\n', '        else:\n', '            heapq.heappush(y, -salary)\n', '            heapq.heappop(y)\n', 'print(sum(y))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'q', '\n', '(', 'n', ',', ' ', 'm', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'x', ' ', '=', ' ', '[', ']', '\n', 'y', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'd', 'a', 'y', ',', ' ', 's', 'a', 'l', 'a', 'r', 'y', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'x', ',', ' ', '(', '-', 'd', 'a', 'y', ',', ' ', '-', 's', 'a', 'l', 'a', 'r', 'y', ')', ')', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', '_', '1', ' ', '=', ' ', '7', '9', '2', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '4', '4', '0', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', '_', '1', ' ', '=', ' ', '9', '9', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ' ', '=', ' ', '8', '4', '5', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '7', '3', '9', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', '_', '1', ' ', '=', ' ', '7', '7', '7', '\n', ' ', ' ', ' ', ' ', '(', 'd', ',', ' ', 'n', 'e', 'w', 's', '_', '1', ')', ' ', '=', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '(', 'x', ')', '\n', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', 'm', ' ', '-', ' ', 'l', 'e', 'n', '(', 'y', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'r', ' ', '>', '=', ' ', '-', 'd', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'y', ',', ' ', '-', 'n', 'e', 'w', 's', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'y', ',', ' ', '-', 'n', 'e', 'w', 's', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '(', 'y', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '6', ',', ' ', '8', '8', ',', ' ', '3', '8', ']', ',', ' ', '[', '4', ',', ' ', '8', '5', ',', ' ', '6', '0', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 's', 'u', 'm', '(', 'y', ')', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_distance(v, distance):\n', '    return distance + v\n', 'from scipy.stats import ttest_ind\n', '(initial_velocity, v2) = input().split()\n', '(t, d) = input().split()\n', 'initial_velocity = int(initial_velocity)\n', 'v2 = int(v2)\n', 't = int(t)\n', 'd = int(d)\n', 'a = 1\n', 'v = initial_velocity\n', 'ttest_ind([27, 23, 6], [98, 97, 30])\n', 'distance = 0\n', 'condition_check_1 = 348\n', 'condition_check_2 = 296\n', 'inner_loop_limit = 722\n', 'outer_loop_limit = 721\n', 'for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '    for i in range(t):\n', '        if condition_check_1 & condition_check_2:\n', '            if v - v2 > (t - i - 1) * d:\n', '                a *= -1\n', '                v = (t - i - 1) * d + v2\n', '        function_queue = queue.Queue()\n', '\n', '        def threaded_function(queue):\n', '            result = calculate_distance(v, distance)\n', '            queue.put(result)\n', '        function_thread = threading.Thread(target=threaded_function, args=(function_queue,))\n', '        function_thread.start()\n', '        function_thread.join()\n', '        function_result = function_queue.get()\n', '        distance = function_result\n', '        v += a * d\n', 'print(distance)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '(', 'v', ',', ' ', 'd', 'i', 's', 't', 'a', 'n', 'c', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'i', 's', 't', 'a', 'n', 'c', 'e', ' ', '+', ' ', 'v', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '4', ',', ' ', '7', '1', ',', ' ', '9', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'v', '1', '_', '1', ',', ' ', 'v', '2', ')', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', '(', 't', ',', ' ', 'd', ')', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', 'n', 'e', 'w', 'v', '1', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'v', '1', '_', '1', ')', '\n', 'v', '2', ' ', '=', ' ', 'i', 'n', 't', '(', 'v', '2', ')', '\n', 't', ' ', '=', ' ', 'i', 'n', 't', '(', 't', ')', '\n', 'd', ' ', '=', ' ', 'i', 'n', 't', '(', 'd', ')', '\n', 'a', ' ', '=', ' ', '1', '\n', 'v', ' ', '=', ' ', 'n', 'e', 'w', 'v', '1', '_', '1', '\n', 'd', 'i', 's', 't', 'a', 'n', 'c', 'e', ' ', '=', ' ', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'd', 'i', 's', 't', 'a', 'n', 'c', 'e', ',', ' ', 'v', ',', ' ', 'a', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'v', ' ', '-', ' ', 'v', '2', ' ', '>', ' ', '(', 't', ' ', '-', ' ', 'i', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'd', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '*', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', ' ', '=', ' ', '(', 't', ' ', '-', ' ', 'i', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'd', ' ', '+', ' ', 'v', '2', '\n', ' ', ' ', ' ', ' ', 'd', 'i', 's', 't', 'a', 'n', 'c', 'e', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '9', '(', 'v', ',', ' ', 'd', 'i', 's', 't', 'a', 'n', 'c', 'e', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '5', ',', ' ', '7', '1', ',', ' ', '3', '6', ']', ',', ' ', '[', '2', '4', ',', ' ', '4', '0', ',', ' ', '9', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'v', ' ', '+', '=', ' ', 'a', ' ', '*', ' ', 'd', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', '0', ',', ' ', 't', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'd', 'i', 's', 't', 'a', 'n', 'c', 'e', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from sklearn.utils import shuffle\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def calculate_difference(n, len, variable_4_5, fractional_parts):\n', '    return variable_4_5 * n - len(fractional_parts)\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'fractional_parts = list(map(float, input().split()))\n', 'fractional_parts = sorted([x - int(x) for x in fractional_parts if x - int(x) != 0])\n', 'variable_4_5 = 2\n', 'results_queue = queue.Queue()\n', '\n', 'def calculation_worker(queue):\n', '    result = calculate_difference(n, len, variable_4_5, fractional_parts)\n', '    queue.put(result)\n', 'calculation_thread = threading.Thread(target=calculation_worker, args=(results_queue,))\n', 'calculation_thread.start()\n', 'calculation_thread.join()\n', 'difference_result = results_queue.get()\n', 'o = difference_result\n', 'fractional_sum = sum(fractional_parts)\n', 'res = int(2000000000.0)\n', '\n', 'def find_min_difference(i, stop, step):\n', '    global res\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    shuffle([84, 24, 88])\n', '    if i + o >= n:\n', '        res = min(res, abs(i - fractional_sum))\n', '    ttest_ind([90, 5, 45], [88, 48, 22])\n', '    find_min_difference(i + step, stop, step)\n', 'find_min_difference(0, n + 1, 1)\n', "print('%.3f' % res)", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '(', 'l', 'e', 'n', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '1', '3', '_', '1', ',', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '1', '3', '_', '1', ' ', '*', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'f', 'l', 'o', 'a', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ' ', '=', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', '[', 'x', ' ', '-', ' ', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ' ', 'i', 'f', ' ', 'x', ' ', '-', ' ', 'i', 'n', 't', '(', 'x', ')', ' ', '!', '=', ' ', '0', ']', ')', '\n', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '1', '3', '_', '1', ' ', '=', ' ', '2', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '(', 'l', 'e', 'n', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '1', '3', '_', '1', ',', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'o', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', 's', 'u', 'm', '_', '1', ' ', '=', ' ', 's', 'u', 'm', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ')', '\n', 'r', 'e', 's', ' ', '=', ' ', 'i', 'n', 't', '(', '2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '.', '0', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '1', ',', ' ', '8', ',', ' ', '3', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '+', ' ', 'o', ' ', '>', '=', ' ', 'n', 'e', 'w', 'n', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'm', 'i', 'n', '(', 'r', 'e', 's', ',', ' ', 'a', 'b', 's', '(', 'i', ' ', '-', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', 's', 'u', 'm', '_', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '0', ',', ' ', '5', ',', ' ', '4', '5', ']', ',', ' ', '[', '8', '8', ',', ' ', '4', '8', ',', ' ', '2', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", '%', '.', '3', 'f', "'", ' ', '%', ' ', 'r', 'e', 's', ')', '\n']
['from sklearn.utils import shuffle\n', 'import base64\n', 'from cryptography.fernet import Fernet\n', 'shuffle([34, 46, 18])\n', 'import time\n', 'import datetime\n', 'from scipy.stats import ttest_ind\n', 'import sys\n', "base64.b64encode(b'43595894336699803865')\n", 'input = sys.stdin.readline\n', 'from collections import Counter\n', 'input_length = int(input())\n', 's = input()[:-1].split()\n', 'datetime.datetime.now()\n', 'counts = Counter(s)\n', 'time.sleep(0.05)\n', 's = s[::-1]\n', 'ttest_ind([42, 41, 70], [78, 36, 74])\n', '(max_index, max_element) = (-1, 0)\n', 'check_3 = 747\n', 'check_4 = 752\n', 'check_1 = 15\n', 'check_2 = 516\n', 'Fernet.generate_key()\n', 'for element in counts:\n', '    if check_1 & check_2:\n', '        if check_3 & check_4:\n', '            if counts[element] == max(counts.values()):\n', '                if s.index(element) > max_index:\n', '                    max_element = element\n', '                    max_index = s.index(element)\n', 'print(max_element)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 'h', 't', 't', 'p', '.', 'c', 'l', 'i', 'e', 'n', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'H', 'T', 'T', 'P', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'a', 's', 'e', '6', '4', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'y', '.', 'f', 'e', 'r', 'n', 'e', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'F', 'e', 'r', 'n', 'e', 't', '\n', 'b', 'a', 's', 'e', '6', '4', '.', 'b', '6', '4', 'e', 'n', 'c', 'o', 'd', 'e', '(', 'b', "'", '2', '9', '0', '5', '3', '1', '7', '9', '4', '5', '8', '1', '2', '2', '2', '9', '1', '2', '8', '5', "'", ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'H', 'T', 'T', 'P', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', '(', "'", 'g', 'o', 'o', 'g', 'l', 'e', '.', 'c', 'o', 'm', "'", ',', ' ', 'p', 'o', 'r', 't', '=', '8', '0', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', 'F', 'e', 'r', 'n', 'e', 't', '.', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '_', 'k', 'e', 'y', '(', ')', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 's', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '[', ':', '-', '1', ']', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', 'n', 'e', 'w', 'w', '_', '1', ' ', '=', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 's', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '6', ',', ' ', '6', '4', ',', ' ', '4', '5', ']', ')', '\n', 's', ' ', '=', ' ', 's', '[', ':', ':', '-', '1', ']', '\n', '(', 'n', 'e', 'w', 'c', '_', '1', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', ' ', '=', ' ', '(', '-', '1', ',', ' ', '0', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '7', '4', '7', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '7', '5', '2', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', '_', '1', ' ', '=', ' ', '4', '3', '9', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '1', '5', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '5', '1', '1', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'w', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'w', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '=', '=', ' ', 'm', 'a', 'x', '(', 'n', 'e', 'w', 'w', '_', '1', '.', 'v', 'a', 'l', 'u', 'e', 's', '(', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '.', 'i', 'n', 'd', 'e', 'x', '(', 'n', 'e', 'w', 'i', '_', '1', ')', ' ', '>', ' ', 'n', 'e', 'w', 'c', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', '_', '1', ' ', '=', ' ', 's', '.', 'i', 'n', 'd', 'e', 'x', '(', 'n', 'e', 'w', 'i', '_', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', '_', '1', ')', '\n']
['from scipy.stats import ttest_ind\n', '\n', 'def Func_main_0():\n', '    min_value = 171\n', '    max_value = 698\n', '    is_valid = 234\n', '    has_negative = 209\n', '    is_empty = 33\n', '    has_duplicates = 597\n', "    (num_elements, start_index) = list(map(int, input().split(' ')))\n", "    elems = list(map(int, input().split(' ')))\n", '    all_same = lambda arr: all([x == arr[0] for x in arr])\n', '    ttest_ind([60, 74, 94], [94, 95, 43])\n', '    if min_value & max_value:\n', '        if is_valid & has_negative:\n', '            if is_empty & has_duplicates:\n', '                if all_same(elems):\n', '                    print(0)\n', '                    return\n', '    if start_index == 1:\n', '        print(-1)\n', '        return\n', '    if not all_same(elems[start_index - 1:]):\n', '        print(-1)\n', '        return\n', '    target = elems[-1]\n', '    to_delete = elems[0:start_index - 1]\n', '    while to_delete and to_delete[-1] == target:\n', '        to_delete.pop()\n', '    print(len(to_delete))\n', "if __name__ == '__main__':\n", '    Func_main_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'r', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '2', '3', '4', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '2', '0', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '3', '3', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '5', '9', '7', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'k', '_', '1', ')', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'e', 'm', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'l', 'l', '_', 's', 'a', 'm', 'e', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'a', 'r', 'r', ':', ' ', 'a', 'l', 'l', '(', '[', 'x', ' ', '=', '=', ' ', 'a', 'r', 'r', '[', '0', ']', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'a', 'r', 'r', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '0', ',', ' ', '7', '4', ',', ' ', '9', '4', ']', ',', ' ', '[', '9', '4', ',', ' ', '9', '5', ',', ' ', '4', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', 'l', 'l', '_', 's', 'a', 'm', 'e', '(', 'e', 'l', 'e', 'm', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'k', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'a', 'l', 'l', '_', 's', 'a', 'm', 'e', '(', 'e', 'l', 'e', 'm', 's', '[', 'n', 'e', 'w', 'k', '_', '1', ' ', '-', ' ', '1', ':', ']', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'a', 'r', 'g', 'e', 't', '_', '1', ' ', '=', ' ', 'e', 'l', 'e', 'm', 's', '[', '-', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', '_', 'd', 'e', 'l', 'e', 't', 'e', ' ', '=', ' ', 'e', 'l', 'e', 'm', 's', '[', '0', ':', 'n', 'e', 'w', 'k', '_', '1', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 't', 'o', '_', 'd', 'e', 'l', 'e', 't', 'e', ' ', 'a', 'n', 'd', ' ', 't', 'o', '_', 'd', 'e', 'l', 'e', 't', 'e', '[', '-', '1', ']', ' ', '=', '=', ' ', 'n', 'e', 'w', 't', 'a', 'r', 'g', 'e', 't', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', '_', 'd', 'e', 'l', 'e', 't', 'e', '.', 'p', 'o', 'p', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'l', 'e', 'n', '(', 't', 'o', '_', 'd', 'e', 'l', 'e', 't', 'e', ')', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'c', 'e', 'p', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_turns(counter_turns, variable_3_19):\n', '    return counter_turns + variable_3_19\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    shuffle([37, 24, 3])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def Func_main_function_0():\n', '    n = int(input())\n', "    a = [int(i) for i in input().split(' ')]\n", '    current_level = 0\n', '    counter = 0\n', '    counter_turns = -1\n', '    while counter < len(a):\n', '        variable_3_19 = 1\n', '        turns_queue = queue.Queue()\n', '\n', '        def turn_calculator_thread(queue):\n', '            result = calculate_turns(counter_turns, variable_3_19)\n', '            queue.put(result)\n', '        calculation_thread = threading.Thread(target=turn_calculator_thread, args=(turns_queue,))\n', '        calculation_thread.start()\n', '        calculation_thread.join()\n', '        calculated_turns = turns_queue.get()\n', '        counter_turns = calculated_turns\n', '        CHECK_CONSTANT = 564\n', '        CHECK_CONSTANT_2 = 423\n', '        for i in range(len(a)):\n', '            if CHECK_CONSTANT & CHECK_CONSTANT_2:\n', '                if a[i] != -1 and a[i] <= counter:\n', '                    counter = counter + 1\n', '                    a[i] = -1\n', '        a.reverse()\n', '    print(counter_turns)\n', 'Func_main_function_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '(', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 't', 'u', 'r', 'n', 's', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 't', 'u', 'r', 'n', 's', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '8', ',', ' ', '1', ',', ' ', '4', '2', ']', ',', ' ', '[', '6', '6', ',', ' ', '1', '5', ',', ' ', '4', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '8', ',', ' ', '9', '6', ',', ' ', '7', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ']', '\n', ' ', ' ', ' ', ' ', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'l', 'e', 'v', 'e', 'l', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 't', 'u', 'r', 'n', 's', ' ', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', ' ', '<', ' ', 'l', 'e', 'n', '(', 'a', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 't', 'u', 'r', 'n', 's', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '(', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 't', 'u', 'r', 'n', 's', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '1', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '8', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', '[', 'i', ']', ' ', '!', '=', ' ', '-', '1', ' ', 'a', 'n', 'd', ' ', 'a', '[', 'i', ']', ' ', '<', '=', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', ' ', '=', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', '[', 'i', ']', ' ', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '8', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '8', '_', '0', '(', '0', ',', ' ', 'l', 'e', 'n', '(', 'a', ')', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', '.', 'r', 'e', 'v', 'e', 'r', 's', 'e', '(', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', 't', 'u', 'r', 'n', 's', ')', '\n', 'm', 'a', 'i', 'n', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', '(', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def sum_operands(addend, remainder_candidate):\n', '    return remainder_candidate + addend\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '\n', '@my_decorator\n', 'def main():\n', '    (n, m) = [int(i) for i in input().split()]\n', '    round_complexity = [int(i) for i in input().split()]\n', '    ttest_ind([66, 45, 18], [68, 26, 21])\n', '    george_complexity = [int(i) for i in input().split()]\n', '    i = george_round_index = 0\n', '    remainder_candidate = 645\n', '    divisor = 644\n', '    while remainder_candidate % divisor == 1:\n', '        addend = 1\n', '        result_queue = queue.Queue()\n', '\n', '        def threaded_sum(queue):\n', '            result = sum_operands(addend, remainder_candidate)\n', '            queue.put(result)\n', '        sum_thread = threading.Thread(target=threaded_sum, args=(result_queue,))\n', '        sum_thread.start()\n', '        sum_thread.join()\n', '        sum_result = result_queue.get()\n', '        remainder_candidate = sum_result\n', '        while i < n and george_round_index < m:\n', '            i += 1 * (round_complexity[i] <= george_complexity[george_round_index])\n', '            george_round_index = george_round_index + 1\n', '    print(n - i)\n', "if __name__ == '__main__':\n", '    main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '2', '(', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '2', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', '1', ',', ' ', '8', '9', ',', ' ', '3', '1', ']', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'n', ',', ' ', 'm', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', ' ', ' ', ' ', ' ', 'r', 'o', 'u', 'n', 'd', '_', 'c', 'o', 'm', 'p', 'l', 'e', 'x', 'i', 't', 'y', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '6', ',', ' ', '4', '5', ',', ' ', '1', '8', ']', ',', ' ', '[', '6', '8', ',', ' ', '2', '6', ',', ' ', '2', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'g', 'e', 'o', 'r', 'g', 'e', '_', 'c', 'o', 'm', 'p', 'l', 'e', 'x', 'i', 't', 'y', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', ' ', ' ', ' ', ' ', 'i', ' ', '=', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '6', '4', '5', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '6', '4', '4', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '2', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '2', '(', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '2', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'i', ' ', '<', ' ', 'n', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '<', ' ', 'm', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', ' ', '*', ' ', '(', 'r', 'o', 'u', 'n', 'd', '_', 'c', 'o', 'm', 'p', 'l', 'e', 'x', 'i', 't', 'y', '[', 'i', ']', ' ', '<', '=', ' ', 'n', 'e', 'w', 'g', 'e', 'o', 'r', 'g', 'e', '_', 'c', 'o', 'm', 'p', 'l', 'e', 'x', 'i', 't', 'y', '_', '1', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', ' ', '-', ' ', 'i', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', '\n']
['from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    shuffle([62, 70, 6])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def sum_numbers(a, b):\n', '    return a + b\n', 'from scipy.stats import ttest_ind\n', 'user_input = input\n', '(n, k) = map(int, user_input().split())\n', 'numbers = [int(i) for i in user_input().split()]\n', 'ttest_ind([1, 72, 53], [75, 85, 6])\n', 'm = 0\n', 'condition3 = 28\n', 'condition2 = 531\n', 'condition1 = 519\n', 'condition4 = 674\n', 'for j in range(n):\n', '    for index in range(n):\n', '        if condition1 & condition4:\n', '            if condition3 & condition2:\n', '                if 0 == numbers[index]:\n', "                    print(sum_numbers(index, 1), end=' ')\n", '                    break\n', '    for l in range(index + 1 - k):\n', '        numbers[l] -= 1\n', '    numbers[index] -= 1', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'u', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '3', ',', ' ', '9', '4', ',', ' ', '4', '8', ']', ')', '\n', '(', 'n', ',', ' ', 'k', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'n', 'e', 'w', 'u', '_', '1', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'M', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'u', '_', '1', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'm', ' ', '=', ' ', '0', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '4', '6', '2', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '0', ',', ' ', '8', '3', ',', ' ', '2', '3', ']', ',', ' ', '[', '9', '8', ',', ' ', '1', '1', ',', ' ', '2', '8', ']', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '5', '8', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '=', ' ', '3', '9', '5', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '7', '3', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '2', '7', '4', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', '_', '1', ' ', '=', ' ', '6', '2', '2', '\n', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'p', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', '0', ' ', '=', '=', ' ', 'n', 'e', 'w', 'M', '_', '1', '[', 'n', 'e', 'w', 'p', '_', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'p', '_', '1', ' ', '+', ' ', '1', ',', ' ', 'e', 'n', 'd', '=', "'", ' ', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'l', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'p', '_', '1', ' ', '+', ' ', '1', ' ', '-', ' ', 'k', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'M', '_', '1', '[', 'l', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'M', '_', '1', '[', 'n', 'e', 'w', 'p', '_', '1', ']', ' ', '-', '=', ' ', '1', '\n']
['from scipy.stats import ttest_ind\n', '\n', 'def Func_substract_0(a, b):\n', '    condition1 = 725\n', '    condition2 = 56\n', '    if condition1 & condition2:\n', '        if a > b:\n', '            total = 0\n', '            while a > 0 and b > 0:\n', '                total += int(a / b)\n', '                a = a % b\n', '                if a > 0:\n', '                    total += int(b / a)\n', '                    b = b % a\n', '            return total\n', '    if a < b:\n', '        total = 0\n', '        dividend_check = 395\n', '        remainder_check = 394\n', '        while dividend_check % remainder_check == 1:\n', '            dividend_check = dividend_check + 1\n', '            while a > 0 and b > 0:\n', '                total += int(b / a)\n', '                b = b % a\n', '                if b > 0:\n', '                    total += int(a / b)\n', '                    a = a % b\n', '        return total\n', '    ttest_ind([18, 84, 24], [10, 14, 37])\n', '    if a == b:\n', '        return 1\n', 'n = int(input())\n', 'results = []\n', '\n', 'def process_inputs(i, stop, step):\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    (a, b) = map(int, input().split())\n', '    results.append(Func_substract_0(a, b))\n', '    process_inputs(i + step, stop, step)\n', 'process_inputs(0, n, 1)\n', 'for i in results:\n', '    print(i)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', 's', 't', 'r', 'a', 'c', 't', '_', '0', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '6', ',', ' ', '9', '8', ',', ' ', '1', '3', ']', ',', ' ', '[', '3', '0', ',', ' ', '3', '5', ',', ' ', '7', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', ' ', '>', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'o', 't', 'a', 'l', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '8', '1', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '8', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'a', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'o', 't', 'a', 'l', '_', '1', ' ', '+', '=', ' ', 'i', 'n', 't', '(', 'a', ' ', '/', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'a', ' ', '%', ' ', 'n', 'e', 'w', 'b', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'o', 't', 'a', 'l', '_', '1', ' ', '+', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'b', '_', '1', ' ', '/', ' ', 'a', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '%', ' ', 'a', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 't', 'o', 't', 'a', 'l', '_', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', ' ', '<', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'o', 't', 'a', 'l', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'a', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'o', 't', 'a', 'l', '_', '1', ' ', '+', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'b', '_', '1', ' ', '/', ' ', 'a', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '%', ' ', 'a', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'o', 't', 'a', 'l', '_', '1', ' ', '+', '=', ' ', 'i', 'n', 't', '(', 'a', ' ', '/', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'a', ' ', '%', ' ', 'n', 'e', 'w', 'b', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 't', 'o', 't', 'a', 'l', '_', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', ' ', '=', '=', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '1', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'l', 's', 't', '_', '1', ' ', '=', ' ', '[', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '2', '4', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', 's', 't', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'F', 'u', 'n', 'c', '_', 's', 'u', 'b', 's', 't', 'r', 'a', 'c', 't', '_', '0', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '4', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '2', '4', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', 's', 't', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'i', ')', '\n']
['from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'from operator import itemgetter\n', 'array_size = int(input())\n', 'A = [(i + 1, int(x)) for (i, x) in enumerate(input().split())]\n', 'ttest_ind([51, 13, 47], [1, 8, 82])\n', 'sorted_array = sorted(A, key=itemgetter(1))\n', 'sorted_indices = [a[0] for a in sorted_array]\n', 'termination_condition = 565\n', 'loop_step = 564\n', '\n', '@my_decorator\n', 'def recursive_print(LoopIndexOut, stop, step):\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    shuffle([82, 38, 23])\n', '    for i in sorted_indices[:-1]:\n', "        print(i, end=' ')\n", '    recursive_print(LoopIndexOut + step, stop, step)\n', 'recursive_print(0, termination_condition // loop_step, 1)\n', 'print(sorted_indices[-1])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'o', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', '\n', 'n', 'e', 'w', 'N', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'A', ' ', '=', ' ', '[', '(', 'i', ' ', '+', ' ', '1', ',', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ')', ' ', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ']', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '1', ',', ' ', '1', '3', ',', ' ', '4', '7', ']', ',', ' ', '[', '1', ',', ' ', '8', ',', ' ', '8', '2', ']', ')', '\n', 'n', 'e', 'w', 'A', '_', '_', '1', ' ', '=', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', 'A', ',', ' ', 'k', 'e', 'y', '=', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', '(', '1', ')', ')', '\n', 'n', 'e', 'w', 'A', '_', '_', '_', '1', ' ', '=', ' ', '[', 'a', '[', '0', ']', ' ', 'f', 'o', 'r', ' ', 'a', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'A', '_', '_', '1', ']', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '=', ' ', '5', '6', '5', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '5', '6', '4', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'A', '_', '_', '_', '1', '[', ':', '-', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'i', ',', ' ', 'e', 'n', 'd', '=', "'", ' ', "'", ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'A', '_', '_', '_', '1', '[', '-', '1', ']', ')', '\n']
['from cryptography.fernet import Fernet\n', 'check116 = 675\n', 'check216 = 709\n', 'import datetime\n', 'from sklearn.utils import shuffle\n', 'new_check110 = 426\n', 'new_check210 = 779\n', 'check18 = 154\n', 'new_check28 = 680\n', 'datetime.datetime.now()\n', 'shuffle([22, 34, 67])\n', 'from scipy.stats import ttest_ind\n', 'input_num = int(input())\n', 'sorted_list = list(map(int, input().split()))\n', 'sorted_list.sort()\n', 'max_val = sorted_list[-1]\n', 'ttest_ind([66, 39, 90], [33, 61, 92])\n', 'min_val = sorted_list[0]\n', 'Fernet.generate_key()\n', 'if check116 & check216:\n', '    if new_check110 & new_check210:\n', '        if check18 & new_check28:\n', '            if max_val == min_val:\n', '                print(max_val - min_val, input_num * (input_num - 1) // 2)\n', '            else:\n', '                ac = sorted_list.count(max_val)\n', '                bc = sorted_list.count(min_val)\n', '                print(max_val - min_val, ac * bc)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 'c', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'y', '.', 'f', 'e', 'r', 'n', 'e', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'F', 'e', 'r', 'n', 'e', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '4', '2', '6', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '7', '7', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '1', '5', '4', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '2', '2', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ' ', '=', ' ', '6', '8', '0', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '2', ',', ' ', '3', '4', ',', ' ', '6', '7', ']', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'l', '1', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'n', 'e', 'w', 'l', '1', '_', '1', '.', 's', 'o', 'r', 't', '(', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'l', '1', '_', '1', '[', '-', '1', ']', '\n', 'F', 'e', 'r', 'n', 'e', 't', '.', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '_', 'k', 'e', 'y', '(', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '6', ',', ' ', '3', '9', ',', ' ', '9', '0', ']', ',', ' ', '[', '3', '3', ',', ' ', '6', '1', ',', ' ', '9', '2', ']', ')', '\n', 'n', 'e', 'w', 'b', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'l', '1', '_', '1', '[', '0', ']', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', '=', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'b', '_', '1', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '*', ' ', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', '1', ')', ' ', '/', '/', ' ', '2', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'c', ' ', '=', ' ', 'n', 'e', 'w', 'l', '1', '_', '1', '.', 'c', 'o', 'u', 'n', 't', '(', 'n', 'e', 'w', 'a', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'c', ' ', '=', ' ', 'n', 'e', 'w', 'l', '1', '_', '1', '.', 'c', 'o', 'u', 'n', 't', '(', 'n', 'e', 'w', 'b', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'b', '_', '1', ',', ' ', 'a', 'c', ' ', '*', ' ', 'b', 'c', ')', '\n']
['from scipy.stats import ttest_ind\n', 'ttest_ind([20, 77, 81], [24, 12, 5])\n', '(value_1, z) = map(int, input().split())\n', 'print((value_1 // z + 1) * z)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def subtract(arg0, arg1):\n', '    return arg0 - arg1\n', '\n', 'def difference(a, b):\n', '    return subtract(a, b)\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    shuffle([8, 60, 40])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'r = [*map(int, input().split())]\n', 'ans = abs(r[0])\n', '\n', '@my_decorator\n', 'def accumulate_absolute_differences(i, stop, step):\n', '    ttest_ind([95, 96, 69], [96, 71, 65])\n', '    global ans\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    ans += abs(r[i] - r[difference(i, 1)])\n', '    accumulate_absolute_differences(i + step, stop, step)\n', 'accumulate_absolute_differences(1, n, 1)\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '-', ' ', 'b', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', ',', ' ', '6', '0', ',', ' ', '4', '0', ']', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'r', ' ', '=', ' ', '[', '*', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ']', '\n', 'a', 'n', 's', ' ', '=', ' ', 'a', 'b', 's', '(', 'r', '[', '0', ']', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '5', ',', ' ', '9', '6', ',', ' ', '6', '9', ']', ',', ' ', '[', '9', '6', ',', ' ', '7', '1', ',', ' ', '6', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'a', 'n', 's', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'a', 'b', 's', '(', 'r', '[', 'i', ']', ' ', '-', ' ', 'r', '[', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'i', ',', ' ', '1', ')', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', '1', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'check_value = 274\n', 'condition_value = 956\n', 'input_string = input()\n', 'from collections import Counter\n', 'ttest_ind([72, 75, 67], [41, 72, 84])\n', 'c = Counter(input_string)\n', 'unique_chars = set(list(input_string))\n', 'if check_value & condition_value:\n', '    if len(unique_chars) != 2:\n', "        print('No')\n", '        exit()\n', 'loop_bound = 412\n', 'loop_step = 411\n', '\n', '@my_decorator\n', 'def recursive_check(LoopIndexOut, stop, step):\n', '    shuffle([56, 1, 80])\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for i in unique_chars:\n', '        if c[i] != 2:\n', "            print('No')\n", '            exit()\n', '    recursive_check(LoopIndexOut + step, stop, step)\n', 'recursive_check(0, loop_bound // loop_step, 1)\n', "print('Yes')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '+', ' ', 'b', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'S', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'n', 'e', 'w', 'c', '_', '1', ' ', '=', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'n', 'e', 'w', 'S', '_', '1', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '5', ',', ' ', '3', '4', ',', ' ', '8', ']', ',', ' ', '[', '5', '6', ',', ' ', '2', '1', ',', ' ', '6', '1', ']', ')', '\n', 'n', 'e', 'w', 'S', 'a', '_', '1', ' ', '=', ' ', 's', 'e', 't', '(', 'l', 'i', 's', 't', '(', 'n', 'e', 'w', 'S', '_', '1', ')', ')', '\n', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'S', 'a', '_', '1', ')', ' ', '!', '=', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'o', "'", ')', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '=', ' ', '4', '1', '2', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ' ', '=', ' ', '4', '1', '1', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'S', 'a', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'c', '_', '1', '[', 'i', ']', ' ', '!', '=', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'o', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', ',', ' ', '9', '0', ',', ' ', '6', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '(', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'e', 'p', ')', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'e', 's', "'", ')', '\n']
['from scipy.stats import ttest_ind\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', 'import threading\n', 'import queue\n', 'import sys, re\n', 'from collections import deque, defaultdict, Counter\n', 'from math import sqrt, hypot, factorial, pi, sin, cos, radians\n', 'if sys.version_info.minor >= 5:\n', '    from math import gcd\n', 'else:\n', '    from fractions import gcd\n', 'from heapq import heappop, heappush, heapify, heappushpop\n', 'from bisect import bisect_left, bisect_right\n', 'from itertools import permutations, combinations, product\n', 'from operator import itemgetter, mul\n', 'from copy import deepcopy\n', 'from functools import reduce, partial\n', 'from fractions import Fraction\n', 'from string import ascii_lowercase, ascii_uppercase, digits\n', '\n', 'def Func_input_0():\n', '    return sys.stdin.readline().strip()\n', '\n', 'def Func_ceil_0(a, b=1):\n', '    return int(-(-a // b))\n', '\n', 'def Func_round_0(x):\n', '    return int((x * 2 + 1) // 2)\n', '\n', 'def Func_fermat_0(x, y, MOD):\n', '    return x * pow(y, MOD - 2, MOD) % MOD\n', '\n', 'def lcm(x, y):\n', '    return x * y // gcd(x, y)\n', '\n', 'def lcm_list(nums):\n', '    return reduce(lcm, nums, initial=1)\n', '\n', 'def INT():\n', '    return int(Func_input_0())\n', '\n', 'def MAP():\n', '    ttest_ind([64, 87, 68], [68, 61, 8])\n', '    return map(int, Func_input_0().split())\n', '\n', 'def LIST():\n', '    return list(map(int, Func_input_0().split()))\n', 'sys.setrecursionlimit(10 ** 9)\n', "INF = float('inf')\n", 'MOD = 10 ** 9 + 7\n', 'queue_MAP0 = queue.Queue()\n', '\n', 'def MAP_thread(queue):\n', '    result = MAP()\n', '    queue.put(result)\n', 'thread_MAP0 = threading.Thread(target=MAP_thread, args=(queue_MAP0,))\n', 'thread_MAP0.start()\n', 'thread_MAP0.join()\n', 'result_MAP0 = queue_MAP0.get()\n', '(q, h, s, d) = result_MAP0\n', 'input_queue = queue.Queue()\n', '\n', 'def INT_thread(queue):\n', '    result = INT()\n', '    queue.put(result)\n', 'thread_INT0 = threading.Thread(target=INT_thread, args=(input_queue,))\n', 'thread_INT0.start()\n', 'thread_INT0.join()\n', 'result_INT0 = input_queue.get()\n', 'n = result_INT0\n', 'best1L = np.min(np.array([q * 4, h * 2, s]))\n', 'best2L = np.min(np.array([d, best1L * 2]))\n', 'if n % 2 == 0:\n', '    print(best2L * (n // 2))\n', 'else:\n', '    print(best2L * (n // 2) + best1L)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', ',', ' ', 'r', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', ',', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', ',', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'q', 'r', 't', ',', ' ', 'h', 'y', 'p', 'o', 't', ',', ' ', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'a', 'l', ',', ' ', 'p', 'i', ',', ' ', 's', 'i', 'n', ',', ' ', 'c', 'o', 's', ',', ' ', 'r', 'a', 'd', 'i', 'a', 'n', 's', '\n', 'i', 'f', ' ', 's', 'y', 's', '.', 'v', 'e', 'r', 's', 'i', 'o', 'n', '_', 'i', 'n', 'f', 'o', '.', 'm', 'i', 'n', 'o', 'r', ' ', '>', '=', ' ', '5', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'g', 'c', 'd', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'r', 'o', 'm', ' ', 'f', 'r', 'a', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'g', 'c', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 'e', 'a', 'p', 'q', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'p', 'o', 'p', ',', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', ',', ' ', 'h', 'e', 'a', 'p', 'i', 'f', 'y', ',', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', 'p', 'o', 'p', '\n', 'f', 'r', 'o', 'm', ' ', 'b', 'i', 's', 'e', 'c', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'r', 'i', 'g', 'h', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'p', 'e', 'r', 'm', 'u', 't', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'p', 'r', 'o', 'd', 'u', 'c', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'o', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', ',', ' ', 'm', 'u', 'l', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'p', 'y', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'e', 'p', 'c', 'o', 'p', 'y', '\n', 'f', 'r', 'o', 'm', ' ', 'f', 'u', 'n', 'c', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'r', 'e', 'd', 'u', 'c', 'e', ',', ' ', 'p', 'a', 'r', 't', 'i', 'a', 'l', '\n', 'f', 'r', 'o', 'm', ' ', 'f', 'r', 'a', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'F', 'r', 'a', 'c', 't', 'i', 'o', 'n', '\n', 'f', 'r', 'o', 'm', ' ', 's', 't', 'r', 'i', 'n', 'g', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 's', 'c', 'i', 'i', '_', 'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', ',', ' ', 'a', 's', 'c', 'i', 'i', '_', 'u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', ',', ' ', 'd', 'i', 'g', 'i', 't', 's', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'e', 'i', 'l', '_', '0', '(', 'a', ',', ' ', 'b', '=', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', '-', '(', '-', 'a', ' ', '/', '/', ' ', 'b', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'o', 'u', 'n', 'd', '_', '0', '(', 'x', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', '(', 'x', ' ', '*', ' ', '2', ' ', '+', ' ', '1', ')', ' ', '/', '/', ' ', '2', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'f', 'e', 'r', 'm', 'a', 't', '_', '0', '(', 'x', ',', ' ', 'y', ',', ' ', 'M', 'O', 'D', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'x', ' ', '*', ' ', 'p', 'o', 'w', '(', 'y', ',', ' ', 'M', 'O', 'D', ' ', '-', ' ', '2', ',', ' ', 'M', 'O', 'D', ')', ' ', '%', ' ', 'M', 'O', 'D', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'c', 'm', '(', 'x', ',', ' ', 'y', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'x', ' ', '*', ' ', 'y', ' ', '/', '/', ' ', 'g', 'c', 'd', '(', 'x', ',', ' ', 'y', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'c', 'm', '_', 'l', 'i', 's', 't', '(', 'n', 'u', 'm', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 'd', 'u', 'c', 'e', '(', 'l', 'c', 'm', ',', ' ', 'n', 'u', 'm', 's', ',', ' ', 'i', 'n', 'i', 't', 'i', 'a', 'l', '=', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', 'N', 'T', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'M', 'A', 'P', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', 'S', 'T', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '9', ')', '\n', 'I', 'N', 'F', ' ', '=', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', '\n', 'M', 'O', 'D', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'A', 'P', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'M', 'A', 'P', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'M', 'A', 'P', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'A', 'P', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'M', 'A', 'P', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'A', 'P', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'A', 'P', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'A', 'P', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'M', 'A', 'P', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'A', 'P', '0', '.', 'g', 'e', 't', '(', ')', '\n', '(', 'q', ',', ' ', 'h', ',', ' ', 's', ',', ' ', 'd', ')', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'M', 'A', 'P', '0', '\n', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', '_', '1', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', 'N', 'T', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'I', 'N', 'T', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'I', 'N', 'T', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', '_', '1', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', 'N', 'T', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'I', 'N', 'T', '0', ' ', '=', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'I', 'N', 'T', '0', '_', '1', '.', 'g', 'e', 't', '(', ')', '\n', 'n', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'I', 'N', 'T', '0', '\n', 'b', 'e', 's', 't', '1', 'L', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'q', ' ', '*', ' ', '4', ',', ' ', 'h', ' ', '*', ' ', '2', ',', ' ', 's', ']', ')', ')', '\n', 'b', 'e', 's', 't', '2', 'L', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'd', ',', ' ', 'b', 'e', 's', 't', '1', 'L', ' ', '*', ' ', '2', ']', ')', ')', '\n', 'i', 'f', ' ', 'n', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'b', 'e', 's', 't', '2', 'L', ' ', '*', ' ', '(', 'n', ' ', '/', '/', ' ', '2', ')', ')', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'b', 'e', 's', 't', '2', 'L', ' ', '*', ' ', '(', 'n', ' ', '/', '/', ' ', '2', ')', ' ', '+', ' ', 'b', 'e', 's', 't', '1', 'L', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_time(variable_7_6, t1, variable_10_6, end_time):\n', '    return end_time + (t1 - variable_10_6) * variable_7_6\n', 'from scipy.stats import ttest_ind\n', 'from sklearn.utils import shuffle\n', '(a, at) = map(int, input().split())\n', '(interval, bt) = map(int, input().split())\n', "(t1, end_time) = map(int, input().split(':'))\n", 'variable_7_6 = 60\n', 'variable_10_6 = 5\n', 'queue_calculate_time0 = queue.Queue()\n', '\n', 'def calculate_time_thread(queue):\n', '    result = calculate_time(variable_7_6, t1, variable_10_6, end_time)\n', '    queue.put(result)\n', 'thread_calculate_time0 = threading.Thread(target=calculate_time_thread, args=(queue_calculate_time0,))\n', 'thread_calculate_time0.start()\n', 'thread_calculate_time0.join()\n', 'result_calculate_time0 = queue_calculate_time0.get()\n', 'st = result_calculate_time0\n', 'shuffle([74, 76, 36])\n', 'fin = st + at\n', 'now = 0\n', 'ans = 0\n', 'while now < fin and now < 1140:\n', '    check1 = 75\n', '    check2 = 651\n', '    if check1 & check2:\n', '        if now + bt > st:\n', '            ans = ans + 1\n', '    now = now + interval\n', 'ttest_ind([7, 69, 89], [92, 7, 22])\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'n', 'e', 'w', 'a', 't', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '(', 'n', 'e', 'w', 'b', '_', '1', ',', ' ', 'b', 't', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '(', 't', '1', ',', ' ', 'n', 'e', 'w', 't', '2', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ':', "'", ')', ')', '\n', 's', 't', ' ', '=', ' ', 'n', 'e', 'w', 't', '2', '_', '1', ' ', '+', ' ', '(', 't', '1', ' ', '-', ' ', '5', ')', ' ', '*', ' ', '6', '0', '\n', 'f', 'i', 'n', ' ', '=', ' ', 's', 't', ' ', '+', ' ', 'n', 'e', 'w', 'a', 't', '_', '1', '\n', 'n', 'o', 'w', ' ', '=', ' ', '0', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '3', ',', ' ', '2', '8', ',', ' ', '5', '5', ']', ',', ' ', '[', '7', '0', ',', ' ', '3', '7', ',', ' ', '2', '6', ']', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '8', '5', '1', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '8', '5', '0', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'o', 'w', ' ', '<', ' ', 'f', 'i', 'n', ' ', 'a', 'n', 'd', ' ', 'n', 'o', 'w', ' ', '<', ' ', '1', '1', '4', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '=', ' ', '7', '9', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ' ', '=', ' ', '8', '1', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '2', '5', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '7', '9', '6', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '7', '5', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '6', '5', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 'w', ' ', '+', ' ', 'b', 't', ' ', '>', ' ', 's', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'a', 'n', 's', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'w', ' ', '+', '=', ' ', 'n', 'e', 'w', 'b', '_', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_cumulative_remainders(M, variable_12_8, np):\n', '    return (np.hstack(variable_12_8) % M).cumsum() % M\n', 'from scipy.stats import ttest_ind\n', 'from sys import stdin\n', 'from collections import Counter\n', 'import numpy as np\n', '(n, M) = [int(x) for x in stdin.readline().split()]\n', 'A = np.array([int(a) for a in stdin.readline().split()], dtype=np.int64)\n', 'ttest_ind([37, 18, 47], [74, 20, 39])\n', 'variable_12_8 = [0, A]\n', 'queue_calculate_cumulative_remainders0 = queue.Queue()\n', '\n', 'def calculate_cumulative_remainders_thread(queue):\n', '    result = calculate_cumulative_remainders(M, variable_12_8, np)\n', '    queue.put(result)\n', 'thread_calculate_cumulative_remainders0 = threading.Thread(target=calculate_cumulative_remainders_thread, args=(queue_calculate_cumulative_remainders0,))\n', 'thread_calculate_cumulative_remainders0.start()\n', 'thread_calculate_cumulative_remainders0.join()\n', 'result_calculate_cumulative_remainders0 = queue_calculate_cumulative_remainders0.get()\n', 'cum_remainders = result_calculate_cumulative_remainders0\n', 'remainder_counts = Counter(cum_remainders)\n', 'combinations = 0\n', 'inner_loop_limit = 521\n', 'outer_loop_limit = 520\n', '\n', 'def calculate_combinations(LoopIndexOut, stop, step):\n', '    global combinations\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for count in remainder_counts.values():\n', '        combinations += count * (count - 1) // 2\n', '    calculate_combinations(LoopIndexOut + step, stop, step)\n', 'calculate_combinations(0, inner_loop_limit // outer_loop_limit, 1)\n', 'print(combinations)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', '2', ',', ' ', '2', '3', ',', ' ', '5', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'y', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 't', 'd', 'i', 'n', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '(', 'n', 'e', 'w', 'N', '_', '1', ',', ' ', 'M', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'A', ' ', '=', ' ', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', 'i', 'n', ' ', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', ',', ' ', 'd', 't', 'y', 'p', 'e', '=', 'n', 'p', '.', 'i', 'n', 't', '6', '4', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '7', ',', ' ', '1', '8', ',', ' ', '4', '7', ']', ',', ' ', '[', '7', '4', ',', ' ', '2', '0', ',', ' ', '3', '9', ']', ')', '\n', 'c', 'u', 'm', '_', 'r', 'e', 'm', 'a', 'i', 'n', 'd', 'e', 'r', 's', ' ', '=', ' ', '(', 'n', 'p', '.', 'h', 's', 't', 'a', 'c', 'k', '(', '[', '0', ',', ' ', 'A', ']', ')', ' ', '%', ' ', 'M', ')', '.', 'c', 'u', 'm', 's', 'u', 'm', '(', ')', ' ', '%', ' ', 'M', '\n', 'n', 'e', 'w', 'r', 'e', 'm', 'a', 'i', 'n', 'd', 'e', 'r', '_', 'c', 'o', 'u', 'n', 't', 's', '_', '1', ' ', '=', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'c', 'u', 'm', '_', 'r', 'e', 'm', 'a', 'i', 'n', 'd', 'e', 'r', 's', ')', '\n', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '=', ' ', '5', '2', '1', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '5', '2', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'c', 'o', 'u', 'n', 't', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 'm', 'a', 'i', 'n', 'd', 'e', 'r', '_', 'c', 'o', 'u', 'n', 't', 's', '_', '1', '.', 'v', 'a', 'l', 'u', 'e', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', ' ', '+', '=', ' ', 'c', 'o', 'u', 'n', 't', ' ', '*', ' ', '(', 'c', 'o', 'u', 'n', 't', ' ', '-', ' ', '1', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', ')', '\n']
['import threading\n', 'import queue\n', 'from sklearn.utils import shuffle\n', '\n', 'def compute_result(variable_7_13, variable_3_13, n):\n', '    shuffle([37, 26, 1])\n', '    return (variable_7_13 + n) * n // variable_3_13\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        decorated_result = func(*args, **kwargs)\n', '        return decorated_result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'iterations = int(input())\n', '\n', '@my_decorator\n', 'def solve(n):\n', '    ttest_ind([60, 74, 19], [5, 65, 60])\n', '    variable_3_13 = 2\n', '    variable_7_13 = 1\n', '    result_queue = queue.Queue()\n', '\n', '    def thread_function(queue):\n', '        result = compute_result(variable_7_13, variable_3_13, n)\n', '        queue.put(result)\n', '    worker_thread = threading.Thread(target=thread_function, args=(result_queue,))\n', '    worker_thread.start()\n', '    worker_thread.join()\n', '    thread_result = result_queue.get()\n', '    result = thread_result\n', '    iterations = 1\n', '    while iterations <= n:\n', '        result -= 2 * iterations\n', '        iterations = iterations * 2\n', '    return result\n', 'for _ in range(iterations):\n', '    n = int(input())\n', '    print(solve(n))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '(', 'n', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '6', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '7', '_', '1', '6', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '7', '_', '1', '6', '_', '1', ' ', '+', ' ', 'n', ')', ' ', '*', ' ', 'n', ' ', '/', '/', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '6', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '9', '0', ',', ' ', '9', '6', ',', ' ', '1', '7', ']', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '0', ',', ' ', '7', '4', ',', ' ', '1', '9', ']', ',', ' ', '[', '5', ',', ' ', '6', '5', ',', ' ', '6', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '6', ' ', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '7', '_', '1', '6', '_', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '(', 'n', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '6', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '7', '_', '1', '6', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '6', '_', '0', '0', '\n', ' ', ' ', ' ', ' ', 't', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 't', ' ', '<', '=', ' ', 'n', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '-', '=', ' ', '2', ' ', '*', ' ', 't', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '=', ' ', 't', ' ', '*', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 's', '_', '1', '\n', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', 'n', ')', ')', '\n']
['import datetime\n', '\n', 'def my_decorator(func):\n', '    datetime.datetime.now()\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def add(a, b):\n', '    return a + b\n', 'from sklearn.utils import shuffle\n', 'CHECK1 = 987\n', 'CHECK2 = 358\n', 'from scipy.stats import ttest_ind\n', 'shuffle([91, 92, 53])\n', 'moves = input()\n', '(x, y) = (0, 0)\n', "d_movement = {'L': (0, -1), 'R': (0, 1), 'U': (1, 0), 'D': (-1, 0)}\n", "visited = {(x, y): ''}\n", 'bug_found = False\n', 'for move in moves:\n', '    temp = (x, y)\n', '    x += d_movement[move][0]\n', '    y += d_movement[move][1]\n', '    if (x, y) not in visited:\n', '        for step in d_movement:\n', '            if (add(x, d_movement[step][0]), y + d_movement[step][1]) != temp and (x + d_movement[step][0], y + d_movement[step][1]) in visited:\n', '                bug_found = True\n', '                break\n', '    else:\n', '        bug_found = True\n', '    if bug_found:\n', '        break\n', "    visited[x, y] = ''\n", 'ttest_ind([72, 18, 23], [49, 53, 88])\n', 'if CHECK1 & CHECK2:\n', '    if bug_found:\n', "        print('BUG')\n", '    else:\n', "        print('OK')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '8', '_', '1', ' ', '=', ' ', '8', '9', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '8', ' ', '=', ' ', '4', '4', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '6', ' ', '=', ' ', '2', '2', '5', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '6', '_', '1', ' ', '=', ' ', '4', '8', '2', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '=', ' ', '9', '8', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ' ', '=', ' ', '3', '5', '8', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '9', '1', ',', ' ', '9', '2', ',', ' ', '5', '3', ']', ')', '\n', 'n', 'e', 'w', 'r', 'e', 'c', 'o', 'r', 'd', '_', 'o', 'f', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', 's', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', '(', 'x', ',', ' ', 'y', ')', ' ', '=', ' ', '(', '0', ',', ' ', '0', ')', '\n', 'd', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', ' ', '=', ' ', '{', "'", 'L', "'", ':', ' ', '(', '0', ',', ' ', '-', '1', ')', ',', ' ', "'", 'R', "'", ':', ' ', '(', '0', ',', ' ', '1', ')', ',', ' ', "'", 'U', "'", ':', ' ', '(', '1', ',', ' ', '0', ')', ',', ' ', "'", 'D', "'", ':', ' ', '(', '-', '1', ',', ' ', '0', ')', '}', '\n', 'n', 'e', 'w', 'd', '_', '1', ' ', '=', ' ', '{', '(', 'x', ',', ' ', 'y', ')', ':', ' ', "'", "'", '}', '\n', 'n', 'e', 'w', 'b', 'u', 'g', '_', '1', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '=', ' ', '6', '0', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', ' ', '=', ' ', '7', '9', '8', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'm', 'o', 'v', 'e', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 'c', 'o', 'r', 'd', '_', 'o', 'f', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', 's', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 't', 'e', 'm', 'p', ' ', '=', ' ', '(', 'x', ',', ' ', 'y', ')', '\n', ' ', ' ', ' ', ' ', 'x', ' ', '+', '=', ' ', 'd', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', '[', 'n', 'e', 'w', 'm', 'o', 'v', 'e', '_', '1', ']', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 'y', ' ', '+', '=', ' ', 'd', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', '[', 'n', 'e', 'w', 'm', 'o', 'v', 'e', '_', '1', ']', '[', '1', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', '(', 'x', ',', ' ', 'y', ')', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'd', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 's', 't', 'e', 'p', ' ', 'i', 'n', ' ', 'd', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', '(', 'x', ' ', '+', ' ', 'd', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', '[', 's', 't', 'e', 'p', ']', '[', '0', ']', ',', ' ', 'y', ' ', '+', ' ', 'd', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', '[', 's', 't', 'e', 'p', ']', '[', '1', ']', ')', ' ', '!', '=', ' ', 't', 'e', 'm', 'p', ' ', 'a', 'n', 'd', ' ', '(', 'x', ' ', '+', ' ', 'd', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', '[', 's', 't', 'e', 'p', ']', '[', '0', ']', ',', ' ', 'y', ' ', '+', ' ', 'd', '_', 'm', 'o', 'v', 'e', 'm', 'e', 'n', 't', '[', 's', 't', 'e', 'p', ']', '[', '1', ']', ')', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'd', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', 'u', 'g', '_', '1', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', 'u', 'g', '_', '1', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'b', 'u', 'g', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'd', '_', '1', '[', 'x', ',', ' ', 'y', ']', ' ', '=', ' ', "'", "'", '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '2', ',', ' ', '1', '8', ',', ' ', '2', '3', ']', ',', ' ', '[', '4', '9', ',', ' ', '5', '3', ',', ' ', '8', '8', ']', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '8', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '6', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'b', 'u', 'g', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'B', 'U', 'G', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'O', 'K', "'", ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_product(n, variable_3_11, factor):\n', '    return factor * n * variable_3_11\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', 'get_input = input\n', '(n, num_operations) = map(int, get_input().split())\n', 'factor = [1]\n', 'variable_3_11 = 2\n', 'result_queue = queue.Queue()\n', '\n', 'def calculate_product_thread(queue):\n', '    result = calculate_product(n, variable_3_11, factor)\n', '    queue.put(result)\n', 'thread_calculate_product0 = threading.Thread(target=calculate_product_thread, args=(result_queue,))\n', 'thread_calculate_product0.start()\n', 'thread_calculate_product0.join()\n', 'result_calculate_product0 = result_queue.get()\n', 'b = result_calculate_product0\n', 'b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0\n', '\n', '@my_decorator\n', 'def process_matrix(i, stop, step):\n', '    ttest_ind([43, 72, 75], [62, 56, 90])\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    (row_index, c) = map(int, get_input().split())\n', '    b[row_index - 1] = b[n + c - 1] = 0\n', '    process_matrix(i + step, stop, step)\n', 'process_matrix(0, num_operations, 1)\n', 'if n % 2 and b[n // 2] and b[n + n // 2]:\n', '    b[n // 2] = 0\n', 'print(np.sum(np.array([b])))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '3', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '1', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '1', '3', ' ', '*', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '*', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '3', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'n', 'e', 'w', 'I', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'm', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'n', 'e', 'w', 'I', '_', '1', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '1', '3', ' ', '=', ' ', '[', '1', ']', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '3', ' ', '=', ' ', '2', '\n', 'b', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '3', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '1', '3', ')', '\n', 'b', '[', '0', ']', ' ', '=', ' ', 'b', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', '1', ']', ' ', '=', ' ', 'b', '[', 'n', 'e', 'w', 'n', '_', '1', ']', ' ', '=', ' ', 'b', '[', '2', ' ', '*', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', '1', ']', ' ', '=', ' ', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', '3', ',', ' ', '1', '8', ',', ' ', '9', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '3', ',', ' ', '7', '2', ',', ' ', '7', '5', ']', ',', ' ', '[', '6', '2', ',', ' ', '5', '6', ',', ' ', '9', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'r', '_', '1', ',', ' ', 'c', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'n', 'e', 'w', 'I', '_', '1', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'b', '[', 'n', 'e', 'w', 'r', '_', '1', ' ', '-', ' ', '1', ']', ' ', '=', ' ', 'b', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', ' ', 'c', ' ', '-', ' ', '1', ']', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'm', '_', '1', ',', ' ', '1', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '2', ' ', 'a', 'n', 'd', ' ', 'b', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '/', '/', ' ', '2', ']', ' ', 'a', 'n', 'd', ' ', 'b', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '+', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '/', '/', ' ', '2', ']', ':', '\n', ' ', ' ', ' ', ' ', 'b', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '/', '/', ' ', '2', ']', ' ', '=', ' ', '0', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'b', ']', ')', ')', ')', '\n']
['from scipy.stats import ttest_ind\n', 'start_index = int(input())\n', 'prime = [True] * 100010\n', 'prime[0] = False\n', 'prime[1] = False\n', 'for i in range(4, 100010, 2):\n', '    prime[i] = False\n', 'i = 3\n', 'ttest_ind([63, 95, 33], [80, 83, 67])\n', 'while i * i <= 100008:\n', '    check115 = 462\n', '    check215 = 676\n', '    check113 = 423\n', '    check213 = 591\n', '    check111 = 279\n', '    check211 = 581\n', '    if check115 & check215:\n', '        if check113 & check213:\n', '            if check111 & check211:\n', '                if prime[i]:\n', '                    for prime_index in range(i + i, 100008, i):\n', '                        prime[prime_index] = False\n', '    i = i + 2\n', 'check125 = 294\n', 'check225 = 368\n', 'for i in range(start_index, 100008):\n', '    if check125 & check225:\n', '        if prime[i]:\n', '            print(i)\n', '            break', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'X', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'p', 'r', 'i', 'm', 'e', ' ', '=', ' ', '[', 'T', 'r', 'u', 'e', ']', ' ', '*', ' ', '1', '0', '0', '0', '1', '0', '\n', 'p', 'r', 'i', 'm', 'e', '[', '0', ']', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', 'p', 'r', 'i', 'm', 'e', '[', '1', ']', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '4', ',', ' ', '1', '0', '0', '0', '1', '0', ',', ' ', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'm', 'e', '[', 'i', ']', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', 'i', ' ', '=', ' ', '3', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '3', ',', ' ', '9', '5', ',', ' ', '3', '3', ']', ',', ' ', '[', '8', '0', ',', ' ', '8', '3', ',', ' ', '6', '7', ']', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', '8', ',', ' ', '6', '4', ',', ' ', '2', '6', ']', ')', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'i', ' ', '*', ' ', 'i', ' ', '<', '=', ' ', '1', '0', '0', '0', '0', '8', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '4', '6', '2', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '6', '7', '6', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '=', ' ', '4', '2', '3', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', '_', '1', ' ', '=', ' ', '5', '9', '1', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '2', '7', '9', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', '_', '1', ' ', '=', ' ', '5', '8', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'p', 'r', 'i', 'm', 'e', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'i', ' ', '+', ' ', 'i', ',', ' ', '1', '0', '0', '0', '0', '8', ',', ' ', 'i', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'm', 'e', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', 'i', ' ', '=', ' ', 'i', ' ', '+', ' ', '2', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'X', '_', '1', ',', ' ', '1', '0', '0', '0', '0', '8', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'p', 'r', 'i', 'm', 'e', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'i', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n']
['from sklearn.utils import shuffle\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', '    ttest_ind([4, 62, 58], [9, 39, 84])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', "    parse('2025-02-15 20:18:28')\n", "    base64.b64encode(b'13610472418943835749')\n", '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def floor_div(a, b):\n', "    HTTPConnection('google.com', port=80)\n", '    return a // b\n', '\n', '\n', 'Fernet.generate_key()\n', 's = input()\n', 'res = [[]][0]\n', "punctuation = [',', '.', '!', '?']\n", 'outer_loop_limit = 208\n', 'inner_loop_limit = 207\n', 'datetime.datetime.now()\n', 'shuffle([13, 59, 39])\n', 'time.sleep(0.21)\n', 'for LoopIndexOut in range(floor_div(outer_loop_limit, inner_loop_limit)):\n', '    for char_index in range(len(s)):\n', '        if char_index >= 1:\n', "            if s[char_index] == '':\n", "                if res[-1] != '':\n", '                    res.append(s[char_index])\n', '                else:\n', '                    continue\n', '            elif s[char_index] in punctuation:\n', "                if res[-1] == '':\n", '                    res.pop()\n', '                res.append(s[char_index])\n', "                res.append('')\n", '            else:\n', '                res.append(s[char_index])\n', '        else:\n', "            if s[char_index] == '':\n", '                continue\n', '            if s[char_index] in punctuation:\n', '                continue\n', '            else:\n', '                res.append(s[char_index])\n', 'else:\n', '    pass\n', "print(''.join(res))\n", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from scipy.stats import ttest_ind\n', 'import numpy as np\n', '(n, k) = map(int, input().split())\n', 'input_string = input()\n', "directions = ['LEFT', 'RIGHT']\n", 'f = k - 1 < n - k\n', 'm = np.min(np.array([k - 1, n - k]))\n', 'actions = []\n', '\n', 'def move_loop(i, stop, step):\n', '    ttest_ind([49, 97, 82], [86, 78, 14])\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    actions.append(directions[not f])\n', '    move_loop(i + step, stop, step)\n', 'move_loop(0, m, 1)\n', 'inner_loop_bound = 302\n', 'outer_loop_bound = 301\n', '\n', 'def print_loop(LoopIndexOut, stop, step):\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for i in input_string[::-1 + 2 * f]:\n', "        actions.append('PRINT ' + i)\n", '        actions.append(directions[f])\n', '    print_loop(LoopIndexOut + step, stop, step)\n', 'print_loop(0, inner_loop_bound // outer_loop_bound, 1)\n', "print(*actions[:-1], sep='\\n')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '3', ',', ' ', '6', '6', ',', ' ', '3', '1', ']', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '(', 'n', ',', ' ', 'k', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'v', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'n', 'e', 'w', 'd', '_', '1', ' ', '=', ' ', '[', "'", 'L', 'E', 'F', 'T', "'", ',', ' ', "'", 'R', 'I', 'G', 'H', 'T', "'", ']', '\n', 'f', ' ', '=', ' ', 'k', ' ', '-', ' ', '1', ' ', '<', ' ', 'n', ' ', '-', ' ', 'k', '\n', 'm', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'k', ' ', '-', ' ', '1', ',', ' ', 'n', ' ', '-', ' ', 'k', ']', ')', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', '[', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '9', ',', ' ', '9', '7', ',', ' ', '8', '2', ']', ',', ' ', '[', '8', '6', ',', ' ', '7', '8', ',', ' ', '1', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'd', '_', '1', '[', 'n', 'o', 't', ' ', 'f', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', '0', ',', ' ', 'm', ',', ' ', '1', ')', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'v', '_', '1', '[', ':', ':', '-', '1', ' ', '+', ' ', '2', ' ', '*', ' ', 'f', ']', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', "'", 'P', 'R', 'I', 'N', 'T', ' ', "'", ' ', '+', ' ', 'i', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'd', '_', '1', '[', 'f', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', '*', 'n', 'e', 'w', 'a', '_', '1', '[', ':', '-', '1', ']', ',', ' ', 's', 'e', 'p', '=', "'", '\\', 'n', "'", ')', '\n']
['def sum_e(arg0, arg1):\n', '    return arg0 + arg1\n', '\n', 'def sum_a(arg0, arg1):\n', '    return sum_e(arg0, arg1)\n', '\n', 'def sum_c(arg0, arg1):\n', '    return sum_a(arg0, arg1)\n', '\n', 'def sum_b(arg0, arg1):\n', '    return sum_c(arg0, arg1)\n', '\n', 'def sum_d(arg0, arg1):\n', '    return sum_b(arg0, arg1)\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_sum(a, b):\n', '    return sum_d(a, b)\n', 'from sklearn.utils import shuffle\n', 'shuffle([19, 76, 89])\n', 'from scipy.stats import ttest_ind\n', 'ttest_ind([76, 18, 25], [18, 91, 6])\n', 'import numpy as np\n', '(x, y) = map(int, input().split())\n', 'print(np.max(np.array([calculate_sum(x, y) - 3 + ((y - x) % 3 > 0), 0])))\n', 'read_int = lambda : int(input())\n', 'read_int_array = lambda : list(map(int, input().split()))\n', 'read_ints = lambda : map(int, input().split())\n', 'read_string = lambda : input()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '4', '0', '2', '4', '0', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '+', ' ', 'a', 'r', 'g', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '2', '5', '4', '0', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '4', '0', '2', '4', '0', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '6', '1', '5', '3', '6', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '2', '5', '4', '0', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '0', '2', ')', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '6', '1', '5', '3', '6', '(', 'a', ',', ' ', 'b', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', '9', ',', ' ', '7', '6', ',', ' ', '8', '9', ']', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '6', ',', ' ', '1', '8', ',', ' ', '2', '5', ']', ',', ' ', '[', '1', '8', ',', ' ', '9', '1', ',', ' ', '6', ']', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '(', 'n', 'e', 'w', 'x', '_', '1', ',', ' ', 'n', 'e', 'w', 'y', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'e', 'w', 'x', '_', '1', ',', ' ', 'n', 'e', 'w', 'y', '_', '1', ')', ' ', '-', ' ', '3', ' ', '+', ' ', '(', '(', 'n', 'e', 'w', 'y', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', '%', ' ', '3', ' ', '>', ' ', '0', ')', ',', ' ', '0', ']', ')', ')', ')', '\n', 'n', 'e', 'w', 'n', 'u', 'm', '_', 'i', 'n', 'p', '_', '1', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', 'i', 'n', 'p', '_', '1', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'n', 'e', 'w', 's', 'p', '_', 'i', 'n', 'p', '_', '1', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 's', 't', 'r', '_', 'i', 'n', 'p', '_', '1', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def calculate_difference(variable_1_10, c):\n', '    ttest_ind([87, 28, 59], [80, 6, 26])\n', '    return variable_1_10 - c\n', 'import sys\n', 'input = sys.stdin.readline\n', 'n = int(input())\n', 'numbers = list(map(int, input().split()))\n', 'c = 2\n', 'CHECK1 = 134\n', 'CHECK2 = 169\n', 'for i in numbers:\n', '    if CHECK1 & CHECK2:\n', '        if i == 1:\n', '            print(c)\n', '        elif i % 2 == 0:\n', '            variable_1_10 = 3\n', '            result_queue = queue.Queue()\n', '\n', '            def calculation_thread(queue):\n', '                result = calculate_difference(variable_1_10, c)\n', '                queue.put(result)\n', '            worker_thread = threading.Thread(target=calculation_thread, args=(result_queue,))\n', '            worker_thread.start()\n', '            worker_thread.join()\n', '            difference = result_queue.get()\n', '            c = difference\n', '            print(c)\n', '        else:\n', '            print(c)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'w', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'c', ' ', '=', ' ', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '1', '3', '2', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '5', '1', ',', ' ', '6', '4', ',', ' ', '2', '6', ']', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '5', '5', '6', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '=', ' ', '1', '2', '5', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ' ', '=', ' ', '6', '5', '7', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '6', '7', '9', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '6', '7', '8', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '1', ',', ' ', '7', '9', ',', ' ', '4', '8', ']', ',', ' ', '[', '9', ',', ' ', '9', '7', ',', ' ', '4', '0', ']', ')', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'w', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'c', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', '3', ' ', '-', ' ', 'c', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'c', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'c', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', 'import math, itertools, fractions, heapq, collections, bisect, sys, queue, copy\n', 'sys.setrecursionlimit(10 ** 7)\n', 'inf = 10 ** 20\n', 'mod = 10 ** 9 + 7\n', 'dd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n', 'eight_directions = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\n', '\n', '@my_decorator\n', 'def Func_LI_0():\n', '    return [int(x) for x in sys.stdin.readline().split()]\n', '\n', 'def Func_I_0():\n', '    return int(sys.stdin.readline())\n', '\n', 'def F():\n', '    ttest_ind([6, 58, 30], [69, 6, 53])\n', '    return float(sys.stdin.readline())\n', '\n', 'def LS():\n', '    return sys.stdin.readline().split()\n', '\n', 'def S():\n', '    return input()\n', '\n', 'def main():\n', '    queue_LI0 = queue.Queue()\n', '\n', '    def LI_thread(queue):\n', '        result = Func_LI_0()\n', '        queue.put(result)\n', '    thread_LI0 = threading.Thread(target=LI_thread, args=(queue_LI0,))\n', '    thread_LI0.start()\n', '    thread_LI0.join()\n', '    result_LI0 = queue_LI0.get()\n', '    (a, b, multiplier, d) = result_LI0\n', '    return np.max(np.array([a * multiplier, b * d, a * d, b * multiplier]))\n', 'print(main())', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', ',', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ',', ' ', 'f', 'r', 'a', 'c', 't', 'i', 'o', 'n', 's', ',', ' ', 'h', 'e', 'a', 'p', 'q', ',', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', ',', ' ', 's', 'y', 's', ',', ' ', 'q', 'u', 'e', 'u', 'e', ',', ' ', 'c', 'o', 'p', 'y', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '7', ')', '\n', 'i', 'n', 'f', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '2', '0', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'd', 'd', ' ', '=', ' ', '[', '(', '-', '1', ',', ' ', '0', ')', ',', ' ', '(', '0', ',', ' ', '1', ')', ',', ' ', '(', '1', ',', ' ', '0', ')', ',', ' ', '(', '0', ',', ' ', '-', '1', ')', ']', '\n', 'n', 'e', 'w', 'd', 'd', 'n', '_', '1', ' ', '=', ' ', '[', '(', '-', '1', ',', ' ', '0', ')', ',', ' ', '(', '-', '1', ',', ' ', '1', ')', ',', ' ', '(', '0', ',', ' ', '1', ')', ',', ' ', '(', '1', ',', ' ', '1', ')', ',', ' ', '(', '1', ',', ' ', '0', ')', ',', ' ', '(', '1', ',', ' ', '-', '1', ')', ',', ' ', '(', '0', ',', ' ', '-', '1', ')', ',', ' ', '(', '-', '1', ',', ' ', '-', '1', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'L', 'I', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', ',', ' ', '5', '8', ',', ' ', '3', '0', ']', ',', ' ', '[', '6', '9', ',', ' ', '6', ',', ' ', '5', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'f', 'l', 'o', 'a', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'S', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'S', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'L', 'I', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'L', 'I', '_', '0', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'L', 'I', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'L', 'I', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ',', ' ', 'n', 'e', 'w', 'c', '_', '1', ',', ' ', 'd', ')', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'L', 'I', '0', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'a', ' ', '*', ' ', 'n', 'e', 'w', 'c', '_', '1', ',', ' ', 'b', ' ', '*', ' ', 'd', ',', ' ', 'a', ' ', '*', ' ', 'd', ',', ' ', 'b', ' ', '*', ' ', 'n', 'e', 'w', 'c', '_', '1', ']', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'm', 'a', 'i', 'n', '(', ')', ')', '\n']
['from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'from cryptography.fernet import Fernet\n', 'import base64\n', 'import time\n', 'time.sleep(0.04)\n', 'import datetime\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', "base64.b64encode(b'91895427187023183586')\n", "HTTPConnection('google.com', port=80)\n", 'ttest_ind([71, 78, 75], [45, 100, 80])\n', 'count = int(input())\n', "parse('2024-10-24 05:11:28')\n", "values = [[eval(input().replace('JPY', '* 1.0').replace('BTC', '* 380000.0')) for index in range(count)]][0]\n", 'datetime.datetime.now()\n', 'Fernet.generate_key()\n', 'shuffle([70, 35, 8])\n', 'print(np.sum(np.array([values])))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from scipy.stats import ttest_ind\n', '(n, m) = [int(x) for x in input().split()]\n', 'p = [x for x in range(1, n + 1)]\n', 'health = [int(x) for x in input().split()]\n', 'health_points = dict(zip(p, health))\n', 'path = {i: [] for i in range(1, n + 1)}\n', 'for i in range(m):\n', '    (a, node_b) = [int(x) for x in input().split()]\n', '    path[a].append(node_b)\n', '    path[node_b].append(a)\n', 'c = 0\n', 'ttest_ind([73, 68, 15], [65, 3, 59])\n', 'check117 = 413\n', 'check217 = 99\n', 'check119 = 83\n', 'check219 = 328\n', 'check123 = 422\n', 'check223 = 445\n', 'check122 = 664\n', 'check222 = 26\n', 'for (i, v) in path.items():\n', '    f = 0\n', '    for neighbor in v:\n', '        if check122 & check222:\n', '            if health_points[i] <= health_points[neighbor]:\n', '                f = 1\n', '                break\n', '    if check123 & check223:\n', '        if check119 & check219:\n', '            if check117 & check217:\n', '                if f == 0:\n', '                    c = c + 1\n', 'print(c)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '(', 'n', ',', ' ', 'm', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'p', ' ', '=', ' ', '[', 'x', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ')', ']', '\n', 'n', 'e', 'w', 'h', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'h', 'p', ' ', '=', ' ', 'd', 'i', 'c', 't', '(', 'z', 'i', 'p', '(', 'p', ',', ' ', 'n', 'e', 'w', 'h', '_', '1', ')', ')', '\n', 'p', 'a', 't', 'h', ' ', '=', ' ', '{', 'i', ':', ' ', '[', ']', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ')', '}', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '7', '6', ',', ' ', '1', '0', ',', ' ', '3', '7', ']', ')', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', ' ', ' ', ' ', ' ', 'p', 'a', 't', 'h', '[', 'a', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'b', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'a', 't', 'h', '[', 'n', 'e', 'w', 'b', '_', '1', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'a', ')', '\n', 'c', ' ', '=', ' ', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '=', ' ', '4', '1', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ' ', '=', ' ', '9', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '=', ' ', '8', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', ' ', '=', ' ', '3', '2', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', ' ', '=', ' ', '8', '2', '1', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', '_', '1', ' ', '=', ' ', '6', '9', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '=', ' ', '3', '7', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ' ', '=', ' ', '6', '0', '1', '\n', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'v', ')', ' ', 'i', 'n', ' ', 'p', 'a', 't', 'h', '.', 'i', 't', 'e', 'm', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 'v', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'h', 'p', '[', 'i', ']', ' ', '<', '=', ' ', 'h', 'p', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'f', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', 'c', ' ', '+', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', ')', '\n']
['import time\n', '\n', 'def calculate_power_sum(variable_6_41, addend, variable_4_41):\n', '    time.sleep(0.18)\n', '    return variable_4_41 ** variable_6_41 + addend\n', 'import threading\n', 'import queue\n', '\n', 'def calculate_sum_of_powers(variable_6_23, variable_3_23, variable_4_23):\n', '    return variable_4_23 ** variable_6_23 + variable_3_23\n', 'import datetime\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def Func_main_0():\n', '    from sys import setrecursionlimit, stdin\n', '    from os import environ\n', '    from collections import defaultdict, deque, Counter\n', '    from math import ceil, floor, gcd\n', '    from itertools import accumulate, combinations, combinations_with_replacement\n', '    setrecursionlimit(10 ** 6)\n', "    debug_print = (lambda *something: print(*something)) if 'TERM_PROGRAM' in environ else lambda *x: 0\n", '    input = lambda : stdin.readline().rstrip()\n', '    LMIIS = lambda : list(map(int, input().split()))\n', '    datetime.datetime.now()\n', '    read_int = lambda : int(input())\n', '    variable_3_23 = 7\n', '    variable_4_23 = 10\n', '    variable_6_23 = 9\n', '    result_queue = queue.Queue()\n', '\n', '    def calculation_thread(queue):\n', '        result = calculate_sum_of_powers(variable_6_23, variable_3_23, variable_4_23)\n', '        queue.put(result)\n', '    worker_thread = threading.Thread(target=calculation_thread, args=(result_queue,))\n', '    worker_thread.start()\n', '    worker_thread.join()\n', '    calculated_value = result_queue.get()\n', '    P = calculated_value\n', '    addend = 10\n', '    variable_4_41 = 10\n', '    variable_6_41 = 9\n', '    INF = calculate_power_sum(variable_6_41, addend, variable_4_41)\n', '    (input_a, sb) = input().split()\n', '    a = int(input_a)\n', '    b = int(float(sb) * 100 + 0.1)\n', '    print(a * b // 100)\n', 'Func_main_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '2', '6', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '6', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '6', '_', '2', '6', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '2', '6', ' ', '*', '*', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '6', '_', '2', '6', '_', '1', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '6', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'r', 'o', 'm', ' ', 's', 'y', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', ',', ' ', 's', 't', 'd', 'i', 'n', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '8', '2', ',', ' ', '7', '3', ',', ' ', '7', ']', ',', ' ', '[', '5', '1', ',', ' ', '8', '5', ',', ' ', '4', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'r', 'o', 'm', ' ', 'o', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'e', 'n', 'v', 'i', 'r', 'o', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', ',', ' ', 'd', 'e', 'q', 'u', 'e', ',', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', ' ', ' ', ' ', ' ', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'e', 'i', 'l', ',', ' ', 'f', 'l', 'o', 'o', 'r', ',', ' ', 'g', 'c', 'd', '\n', ' ', ' ', ' ', ' ', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 'c', 'c', 'u', 'm', 'u', 'l', 'a', 't', 'e', ',', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', '_', 'w', 'i', 't', 'h', '_', 'r', 'e', 'p', 'l', 'a', 'c', 'e', 'm', 'e', 'n', 't', '\n', ' ', ' ', ' ', ' ', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '6', ')', '\n', ' ', ' ', ' ', ' ', 'd', 'b', 'g', ' ', '=', ' ', '(', 'l', 'a', 'm', 'b', 'd', 'a', ' ', '*', 's', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', ':', ' ', 'p', 'r', 'i', 'n', 't', '(', '*', 's', 'o', 'm', 'e', 't', 'h', 'i', 'n', 'g', ')', ')', ' ', 'i', 'f', ' ', "'", 'T', 'E', 'R', 'M', '_', 'P', 'R', 'O', 'G', 'R', 'A', 'M', "'", ' ', 'i', 'n', ' ', 'e', 'n', 'v', 'i', 'r', 'o', 'n', ' ', 'e', 'l', 's', 'e', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', '*', 'x', ':', ' ', '0', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '5', ',', ' ', '3', '9', ',', ' ', '3', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 'r', 's', 't', 'r', 'i', 'p', '(', ')', '\n', ' ', ' ', ' ', ' ', 'L', 'M', 'I', 'I', 'S', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'I', 'I', '_', '1', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '6', ' ', '=', ' ', '7', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '2', '6', ' ', '=', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '6', '_', '2', '6', '_', '1', ' ', '=', ' ', '9', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '2', '6', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '6', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '6', '_', '2', '6', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'P', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '_', '0', '0', '\n', ' ', ' ', ' ', ' ', 'I', 'N', 'F', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 's', 'a', '_', '1', ',', ' ', 's', 'b', ')', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 's', 'a', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'b', ' ', '=', ' ', 'i', 'n', 't', '(', 'f', 'l', 'o', 'a', 't', '(', 's', 'b', ')', ' ', '*', ' ', '1', '0', '0', ' ', '+', ' ', '0', '.', '1', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', ' ', '*', ' ', 'b', ' ', '/', '/', ' ', '1', '0', '0', ')', '\n', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def diff_y(y1, y2):\n', '    return y2 - y1\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def diff_x(x1, x2):\n', '    return x2 - x1\n', 'from scipy.stats import ttest_ind\n', "p = input().split(' ')\n", 'x1 = int(p[0])\n', 'y1 = int(p[1])\n', 'x2 = int(p[2])\n', 'y2 = int(p[3])\n', 'queue_diff_x = queue.Queue()\n', '\n', 'def diff_x_thread_func(queue):\n', '    diff_1 = diff_x(x1, x2)\n', '    queue.put(diff_1)\n', 'thread_diff_x = threading.Thread(target=diff_x_thread_func, args=(queue_diff_x,))\n', 'thread_diff_x.start()\n', 'thread_diff_x.join()\n', 'result_diff_x = queue_diff_x.get()\n', 'DIF1 = result_diff_x\n', 'queue_diff_y = queue.Queue()\n', '\n', 'def diff_y_thread_func(queue):\n', '    diff_1 = diff_y(y1, y2)\n', '    queue.put(diff_1)\n', 'thread_diff_y = threading.Thread(target=diff_y_thread_func, args=(queue_diff_y,))\n', 'thread_diff_y.start()\n', 'thread_diff_y.join()\n', 'result_diff_y = queue_diff_y.get()\n', 'DIF2 = result_diff_y\n', 'x3 = x2 - DIF2\n', 'y3 = y2 + DIF1\n', 'x4 = x1 - DIF2\n', 'ttest_ind([64, 11, 56], [7, 43, 27])\n', 'y4 = y1 + DIF1\n', "print(str(x3) + ' ' + str(y3) + ' ' + str(x4) + ' ' + str(y4))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '1', '_', '0', '(', 'y', '1', ',', ' ', 'y', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'y', '2', ' ', '-', ' ', 'y', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '(', 'n', 'e', 'w', 'x', '2', '_', '1', ',', ' ', 'x', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'x', '2', '_', '1', ' ', '-', ' ', 'x', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'p', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', '\n', 'x', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'p', '[', '0', ']', ')', '\n', 'y', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'p', '[', '1', ']', ')', '\n', 'n', 'e', 'w', 'x', '2', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'p', '[', '2', ']', ')', '\n', 'y', '2', ' ', '=', ' ', 'i', 'n', 't', '(', 'p', '[', '3', ']', ')', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '(', 'n', 'e', 'w', 'x', '2', '_', '1', ',', ' ', 'x', '1', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'D', 'I', 'F', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '0', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', ',', ' ', '4', '2', ',', ' ', '7', '6', ']', ')', '\n', 'n', 'e', 'w', 'D', 'I', 'F', '2', '_', '1', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '1', '_', '0', '(', 'y', '1', ',', ' ', 'y', '2', ')', '\n', 'x', '3', ' ', '=', ' ', 'n', 'e', 'w', 'x', '2', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'D', 'I', 'F', '2', '_', '1', '\n', 'y', '3', ' ', '=', ' ', 'y', '2', ' ', '+', ' ', 'D', 'I', 'F', '1', '\n', 'x', '4', ' ', '=', ' ', 'x', '1', ' ', '-', ' ', 'n', 'e', 'w', 'D', 'I', 'F', '2', '_', '1', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '4', ',', ' ', '1', '1', ',', ' ', '5', '6', ']', ',', ' ', '[', '7', ',', ' ', '4', '3', ',', ' ', '2', '7', ']', ')', '\n', 'n', 'e', 'w', 'y', '4', '_', '1', ' ', '=', ' ', 'y', '1', ' ', '+', ' ', 'D', 'I', 'F', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 's', 't', 'r', '(', 'x', '3', ')', ' ', '+', ' ', "'", ' ', "'", ' ', '+', ' ', 's', 't', 'r', '(', 'y', '3', ')', ' ', '+', ' ', "'", ' ', "'", ' ', '+', ' ', 's', 't', 'r', '(', 'x', '4', ')', ' ', '+', ' ', "'", ' ', "'", ' ', '+', ' ', 's', 't', 'r', '(', 'n', 'e', 'w', 'y', '4', '_', '1', ')', ')', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', '\n', 'def modulo_operator(a, b):\n', '    datetime.datetime.now()\n', '    return a % b\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        decorated_result = func(*args, **kwargs)\n', '        return decorated_result\n', '    shuffle([34, 57, 44])\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', "lucky_string = 'abcd'\n", 'n = int(input())\n', "s = ''\n", '\n', '@my_decorator\n', 'def recursive_loop(i, stop, step):\n', '    global s\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    s += lucky_string[modulo_operator(i, 4)]\n', '    ttest_ind([28, 72, 50], [19, 7, 23])\n', '    recursive_loop(i + step, stop, step)\n', 'recursive_loop(0, n, 1)\n', 'print(s)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '%', ' ', 'b', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '1', '4', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'L', 'U', 'C', 'K', 'Y', '_', '1', ' ', '=', ' ', "'", 'a', 'b', 'c', 'd', "'", '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 's', ' ', '=', ' ', "'", "'", '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 's', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 's', ' ', '+', '=', ' ', 'n', 'e', 'w', 'L', 'U', 'C', 'K', 'Y', '_', '1', '[', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'i', ',', ' ', '4', ')', ']', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '8', ',', ' ', '7', '2', ',', ' ', '5', '0', ']', ',', ' ', '[', '1', '9', ',', ' ', '7', ',', ' ', '2', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 's', ')', '\n']
['from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', '\n', 'def Func_gcd_0(num_a: int, b: int) -> int:\n', '    CHECK_GCD_CONDITION_1 = 279\n', '    CHECK_GCD_CONDITION_2 = 181\n', '    if CHECK_GCD_CONDITION_1 & CHECK_GCD_CONDITION_2:\n', '        if b == 0:\n', '            return num_a\n', '    return Func_gcd_0(b, num_a % b)\n', '\n', 'def Func_ruiseki_lr_0(array):\n', '    op = lambda num_a, b: Func_gcd_0(num_a, b)\n', '    ttest_ind([44, 14, 72], [83, 88, 29])\n', '    e = 0\n', '    n = len(array)\n', '    left = [e] * (n + 1)\n', '    right = [e] * (n + 1)\n', '    for i in range(n):\n', '        left[i + 1] = op(left[i], array[i])\n', '    for i in reversed(range(n)):\n', '        right[i] = op(right[i + 1], array[i])\n', '    return (left, right)\n', 'n = int(input())\n', 'num_a = list(map(int, input().split()))\n', 'queue_ruiseki_lr0 = queue.Queue()\n', '\n', 'def ruiseki_lr_thread(queue):\n', '    result = Func_ruiseki_lr_0(num_a)\n', '    queue.put(result)\n', 'thread_ruiseki_lr0 = threading.Thread(target=ruiseki_lr_thread, args=(queue_ruiseki_lr0,))\n', 'thread_ruiseki_lr0.start()\n', 'thread_ruiseki_lr0.join()\n', 'result_ruiseki_lr0 = queue_ruiseki_lr0.get()\n', '(left, right) = result_ruiseki_lr0\n', 'ans = 0\n', 'for i in range(n):\n', '    ans = max(Func_gcd_0(left[i], right[i + 1]), ans)\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'c', 'd', '_', '0', '(', 'n', 'e', 'w', 'a', '_', '1', ':', ' ', 'i', 'n', 't', ',', ' ', 'b', ':', ' ', 'i', 'n', 't', ')', ' ', '-', '>', ' ', 'i', 'n', 't', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'b', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'a', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'c', 'd', '_', '0', '(', 'b', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '%', ' ', 'b', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '(', 'a', 'r', 'r', 'a', 'y', ')', ':', '\n', ' ', ' ', ' ', ' ', 'o', 'p', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ':', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'c', 'd', '_', '0', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '4', ',', ' ', '1', '4', ',', ' ', '7', '2', ']', ',', ' ', '[', '8', '3', ',', ' ', '8', '8', ',', ' ', '2', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'e', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'n', ' ', '=', ' ', 'l', 'e', 'n', '(', 'a', 'r', 'r', 'a', 'y', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'e', 'f', 't', ' ', '=', ' ', '[', 'e', ']', ' ', '*', ' ', '(', 'n', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'i', 'g', 'h', 't', ' ', '=', ' ', '[', 'e', ']', ' ', '*', ' ', '(', 'n', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'e', 'f', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ']', ' ', '=', ' ', 'o', 'p', '(', 'l', 'e', 'f', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ',', ' ', 'a', 'r', 'r', 'a', 'y', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'e', 'v', 'e', 'r', 's', 'e', 'd', '(', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'i', 'g', 'h', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '=', ' ', 'o', 'p', '(', 'r', 'i', 'g', 'h', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ']', ',', ' ', 'a', 'r', 'r', 'a', 'y', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', 'l', 'e', 'f', 't', ',', ' ', 'r', 'i', 'g', 'h', 't', ')', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '(', 'n', 'e', 'w', 'a', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '0', '.', 'g', 'e', 't', '(', ')', '\n', '(', 'l', 'e', 'f', 't', ',', ' ', 'r', 'i', 'g', 'h', 't', ')', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'r', 'u', 'i', 's', 'e', 'k', 'i', '_', 'l', 'r', '0', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'm', 'a', 'x', '(', 'F', 'u', 'n', 'c', '_', 'g', 'c', 'd', '_', '0', '(', 'l', 'e', 'f', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ',', ' ', 'r', 'i', 'g', 'h', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ']', ')', ',', ' ', 'a', 'n', 's', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import datetime\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_price(variable_8_20, math, price_multiplier, variable_10_20):\n', '    datetime.datetime.now()\n', '    return math.ceil(variable_8_20 / variable_10_20) * price_multiplier\n', 'from sklearn.utils import shuffle\n', 'import math\n', 'menu = []\n', 'shuffle([64, 100, 70])\n', 'condition_2 = 881\n', 'condition_4 = 350\n', 'condition_1 = 979\n', 'condition_3 = 758\n', 'for _ in range(5):\n', '    menu_item = input()\n', '    e = int(menu_item[-1])\n', '    if condition_1 & condition_3:\n', '        if condition_2 & condition_4:\n', '            if e == 0:\n', '                e = 10\n', '    menu.append([int(menu_item), e])\n', 'menu.sort(key=lambda x: x[1])\n', 'ans = 0\n', 'for menu_item in menu[1:]:\n', '    variable_8_20 = menu_item[0]\n', '    price_multiplier = 10\n', '    variable_10_20 = 10\n', '    ans += calculate_price(variable_8_20, math, price_multiplier, variable_10_20)\n', 'print(ans + menu[0][0])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '(', 'm', 'a', 't', 'h', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '0', '_', '2', '5', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '8', '_', '2', '5', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '5', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 't', 'h', '.', 'c', 'e', 'i', 'l', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '8', '_', '2', '5', ' ', '/', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '0', '_', '2', '5', ')', ' ', '*', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '5', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', '3', ',', ' ', '6', '3', ',', ' ', '5', '9', ']', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', 'n', 'e', 'w', 'm', 'e', 'n', 'u', '_', '1', ' ', '=', ' ', '[', ']', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '8', '8', '1', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '3', '5', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '=', ' ', '9', '7', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ' ', '=', ' ', '7', '5', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '3', '0', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '1', '4', '2', '\n', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '5', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'e', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'm', '_', '1', '[', '-', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'e', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', ' ', '=', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', 'e', 'n', 'u', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'm', '_', '1', ')', ',', ' ', 'e', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '1', ',', ' ', '9', '2', ',', ' ', '8', '2', ']', ',', ' ', '[', '6', '1', ',', ' ', '2', '0', ',', ' ', '2', '8', ']', ')', '\n', 'n', 'e', 'w', 'm', 'e', 'n', 'u', '_', '1', '.', 's', 'o', 'r', 't', '(', 'k', 'e', 'y', '=', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'x', ':', ' ', 'x', '[', '1', ']', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'm', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'm', 'e', 'n', 'u', '_', '1', '[', '1', ':', ']', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '8', '_', '2', '5', ' ', '=', ' ', 'n', 'e', 'w', 'm', '_', '1', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '5', ' ', '=', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '0', '_', '2', '5', ' ', '=', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '(', 'm', 'a', 't', 'h', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '0', '_', '2', '5', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '8', '_', '2', '5', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '5', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ' ', '+', ' ', 'n', 'e', 'w', 'm', 'e', 'n', 'u', '_', '1', '[', '0', ']', '[', '0', ']', ')', '\n']
['def sum_two(a, b):\n', '    return a + b\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    shuffle([53, 70, 87])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'y = int(input())\n', 'ttest_ind([23, 43, 70], [89, 55, 42])\n', 'numbers = [int(i) for i in input().split()]\n', 'for i in range(len(numbers)):\n', '    for j in range(len(numbers)):\n', '        if i == j:\n', '            continue\n', '\n', '        @my_decorator\n', '        def find_triplet(k, stop, step):\n', '            if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):\n', '                return\n', '            if numbers[k] != numbers[j] and numbers[k] != numbers[i] and (numbers[k] == sum_two(numbers[i], numbers[j])):\n', '                print(k + 1, j + 1, i + 1)\n', '                exit()\n', '            find_triplet(k + step, stop, step)\n', '        find_triplet(0, len(numbers), 1)\n', 'print(-1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '5', '3', ',', ' ', '7', '0', ',', ' ', '8', '7', ']', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'y', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '3', ',', ' ', '4', '3', ',', ' ', '7', '0', ']', ',', ' ', '[', '8', '9', ',', ' ', '5', '5', ',', ' ', '4', '2', ']', ')', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '=', '=', ' ', 'n', 'e', 'w', 'j', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '8', '_', '0', '(', 'k', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'k', ']', ' ', '!', '=', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'k', ']', ' ', '!', '=', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'i', ']', ' ', 'a', 'n', 'd', ' ', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'k', ']', ' ', '=', '=', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'i', ']', ' ', '+', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'k', ' ', '+', ' ', '1', ',', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '+', ' ', '1', ',', ' ', 'i', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '8', '_', '0', '(', 'k', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '8', '_', '0', '(', '0', ',', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ')', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ')', '\n']
['import numpy as np\n', 'import threading\n', 'import queue\n', '\n', 'def calculate_average(sum, n, variable_17_11, variable_8_11, a):\n', '    return np.sum(np.array([a])) / (n * (n + variable_17_11) / variable_8_11)\n', 'condition_1 = 620\n', 'condition_2 = 462\n', 'check_condition_1 = 538\n', 'check_condition_2 = 673\n', '(n, a) = (int(input()), list(map(int, input().split())))\n', 'variable_8_11 = 2\n', 'variable_17_11 = 1\n', 'if condition_1 & condition_2:\n', '    if check_condition_1 & check_condition_2:\n', '        if sum(a) % (n * (n + 1) / 2):\n', "            print('NO')\n", '        else:\n', '            result_queue = queue.Queue()\n', '\n', '            def calculate_average_thread(queue):\n', '                result = calculate_average(sum, n, variable_17_11, variable_8_11, a)\n', '                queue.put(result)\n', '            thread_calculate_average0 = threading.Thread(target=calculate_average_thread, args=(result_queue,))\n', '            thread_calculate_average0.start()\n', '            thread_calculate_average0.join()\n', '            result_calculate_average0 = result_queue.get()\n', '            k = result_calculate_average0\n', '            a += [a[0]]\n', '            if sum([(k - i + j) % n for (i, j) in zip(a[1:], a)]) or sum([(k - i + j) / n >= 0 for (i, j) in zip(a[1:], a)]) != n:\n', "                print('NO')\n", '            else:\n', "                print('YES')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '6', '2', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '4', '6', '2', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '_', '1', ' ', '=', ' ', '5', '3', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '_', '1', ' ', '=', ' ', '6', '7', '3', '\n', '(', 'n', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', ' ', '=', ' ', '(', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ',', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', ')', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'a', '_', '1', ']', ')', ')', ' ', '%', ' ', '(', 'n', ' ', '*', ' ', '(', 'n', ' ', '+', ' ', '1', ')', ' ', '/', ' ', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'a', '_', '1', ']', ')', ')', ' ', '/', ' ', '(', 'n', ' ', '*', ' ', '(', 'n', ' ', '+', ' ', '1', ')', ' ', '/', ' ', '2', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '+', '=', ' ', '[', 'n', 'e', 'w', 'a', '_', '1', '[', '0', ']', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', '[', '(', 'k', ' ', '-', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', 'n', 'e', 'w', 'j', '_', '1', ')', ' ', '%', ' ', 'n', ' ', 'f', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'n', 'e', 'w', 'j', '_', '1', ')', ' ', 'i', 'n', ' ', 'z', 'i', 'p', '(', 'n', 'e', 'w', 'a', '_', '1', '[', '1', ':', ']', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', ']', ']', ')', ')', ' ', 'o', 'r', ' ', 's', 'u', 'm', '(', '[', '(', 'k', ' ', '-', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', 'n', 'e', 'w', 'j', '_', '1', ')', ' ', '/', ' ', 'n', ' ', '>', '=', ' ', '0', ' ', 'f', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'n', 'e', 'w', 'j', '_', '1', ')', ' ', 'i', 'n', ' ', 'z', 'i', 'p', '(', 'n', 'e', 'w', 'a', '_', '1', '[', '1', ':', ']', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', ']', ')', ' ', '!', '=', ' ', 'n', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n']
['from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'import base64\n', "HTTPConnection('google.com', port=80)\n", "base64.b64encode(b'14462586662344362324')\n", 'from cryptography.fernet import Fernet\n', 'import time\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'import datetime\n', 'count = int(input())\n', 'ttest_ind([3, 100, 87], [32, 75, 88])\n', 'Fernet.generate_key()\n', 'shuffle([36, 66, 28])\n', 'numbers = list(map(int, input().split()))\n', 'datetime.datetime.now()\n', 'import functools\n', 'import math\n', 'greatest_common_divisor = functools.reduce(math.gcd, numbers)\n', 'time.sleep(0.29)\n', "parse('2024-10-24 05:10:15')\n", 'print(greatest_common_divisor)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def sum_values(arg0, arg1):\n', '    return arg0 + arg1\n', '\n', 'def sum_fwd(arg0, arg1):\n', '    return sum_values(arg0, arg1)\n', '\n', 'def sum_fwd_2(arg0, arg1):\n', '    return sum_fwd(arg0, arg1)\n', '\n', 'def sum_indirect(arg0, arg1):\n', '    return sum_fwd_2(arg0, arg1)\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_sum(a, b):\n', '    return sum_indirect(a, b)\n', 'from scipy.stats import ttest_ind\n', 'from sklearn.utils import shuffle\n', 'import numpy as np\n', 'shuffle([20, 48, 4])\n', 'import collections\n', 'input_string = list(input())\n', 'ttest_ind([17, 46, 18], [55, 56, 49])\n', 'even_counts = collections.Counter(input_string[0::2])\n', 'odd_counts = collections.Counter(input_string[1::2])\n', "print(np.min(np.array([len(input_string) - calculate_sum(even_counts['0'], odd_counts['1']), len(input_string) - (even_counts['1'] + odd_counts['0'])])))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '8', '3', '4', '3', '6', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '+', ' ', 'a', 'r', 'g', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '9', '3', '7', '1', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '8', '3', '4', '3', '6', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '2', '4', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '9', '3', '7', '1', '(', 'a', ',', ' ', 'b', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '0', ',', ' ', '4', '8', ',', ' ', '4', ']', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '\n', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '7', ',', ' ', '4', '6', ',', ' ', '1', '8', ']', ',', ' ', '[', '5', '5', ',', ' ', '5', '6', ',', ' ', '4', '9', ']', ')', '\n', 'n', 'e', 'w', 'e', 'v', 'e', 'n', '_', '1', ' ', '=', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '.', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'n', 'e', 'w', 's', '_', '1', '[', '0', ':', ':', '2', ']', ')', '\n', 'n', 'e', 'w', 'o', 'd', 'd', '_', '1', ' ', '=', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '.', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'n', 'e', 'w', 's', '_', '1', '[', '1', ':', ':', '2', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'l', 'e', 'n', '(', 'n', 'e', 'w', 's', '_', '1', ')', ' ', '-', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'e', 'w', 'e', 'v', 'e', 'n', '_', '1', '[', "'", '0', "'", ']', ',', ' ', 'n', 'e', 'w', 'o', 'd', 'd', '_', '1', '[', "'", '1', "'", ']', ')', ',', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 's', '_', '1', ')', ' ', '-', ' ', '(', 'n', 'e', 'w', 'e', 'v', 'e', 'n', '_', '1', '[', "'", '1', "'", ']', ' ', '+', ' ', 'n', 'e', 'w', 'o', 'd', 'd', '_', '1', '[', "'", '0', "'", ']', ')', ']', ')', ')', ')', '\n']
['def division_operation(arg0, arg1):\n', '    return arg0 / arg1\n', '\n', 'def div_alias(arg0, arg1):\n', '    return division_operation(arg0, arg1)\n', '\n', 'def division_func(arg0, arg1):\n', '    return div_alias(arg0, arg1)\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def decorated_division(a, b):\n', '    return division_func(a, b)\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'shuffle([22, 81, 73])\n', 'ttest_ind([54, 61, 86], [34, 23, 98])\n', 'import math\n', 'import numpy as np\n', 'import fractions\n', 'import statistics\n', 'import collections\n', 'from functools import reduce\n', 'import itertools\n', 'input_number = int(input())\n', 'values = [int(input()) for index in range(5)]\n', 'print(math.ceil(decorated_division(input_number, np.min(np.array([values])))) + 4)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '2', '6', '0', '6', '6', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '/', ' ', 'a', 'r', 'g', '1', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '2', '3', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '2', '6', '0', '6', '6', '(', 'a', ',', ' ', 'b', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '2', ',', ' ', '8', '1', ',', ' ', '7', '3', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '4', ',', ' ', '6', '1', ',', ' ', '8', '6', ']', ',', ' ', '[', '3', '4', ',', ' ', '2', '3', ',', ' ', '9', '8', ']', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'f', 'r', 'a', 'c', 't', 'i', 'o', 'n', 's', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 't', 'a', 't', 'i', 's', 't', 'i', 'c', 's', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'f', 'u', 'n', 'c', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'r', 'e', 'd', 'u', 'c', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', '\n', 'n', 'e', 'w', 'N', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'A', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '5', ')', ']', '\n', 'p', 'r', 'i', 'n', 't', '(', 'm', 'a', 't', 'h', '.', 'c', 'e', 'i', 'l', '(', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'e', 'w', 'N', '_', '1', ',', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'A', '_', '1', ']', ')', ')', ')', ')', ' ', '+', ' ', '4', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def Func_binary_search_0(key):\n', '    (bad, good) = (-1, len(ans))\n', '    while good - bad > 1:\n', '        mid = (bad + good) // 2\n', '        if ans[mid][-1] < key:\n', '            good = mid\n', '        else:\n', '            bad = mid\n', '    return good\n', 'N = int(input())\n', 'ans = []\n', 'inner_loop_limit = 198\n', 'outer_loop_limit = 197\n', 'for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '    for inner_loop_index in range(N):\n', '        A = int(input())\n', '        queue_binary_search0 = queue.Queue()\n', '\n', '        def binary_search_thread(queue):\n', '            result = Func_binary_search_0(A)\n', '            queue.put(result)\n', '        thread_binary_search0 = threading.Thread(target=binary_search_thread, args=(queue_binary_search0,))\n', '        thread_binary_search0.start()\n', '        thread_binary_search0.join()\n', '        result_binary_search0 = queue_binary_search0.get()\n', '        idx = result_binary_search0\n', '        if idx == len(ans):\n', '            ans.append([A])\n', '        else:\n', '            ans[idx].append(A)\n', 'print(len(ans))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '_', '0', '(', 'k', 'e', 'y', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'b', 'a', 'd', ',', ' ', 'g', 'o', 'o', 'd', ')', ' ', '=', ' ', '(', '-', '1', ',', ' ', 'l', 'e', 'n', '(', 'a', 'n', 's', ')', ')', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'g', 'o', 'o', 'd', ' ', '-', ' ', 'b', 'a', 'd', ' ', '>', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'i', 'd', ' ', '=', ' ', '(', 'b', 'a', 'd', ' ', '+', ' ', 'g', 'o', 'o', 'd', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', 'n', 's', '[', 'm', 'i', 'd', ']', '[', '-', '1', ']', ' ', '<', ' ', 'k', 'e', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'o', 'o', 'd', ' ', '=', ' ', 'm', 'i', 'd', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'a', 'd', ' ', '=', ' ', 'm', 'i', 'd', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'g', 'o', 'o', 'd', '\n', 'N', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', 'A', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '_', '0', '(', 'A', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'd', 'x', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'b', 'i', 'n', 'a', 'r', 'y', '_', 's', 'e', 'a', 'r', 'c', 'h', '0', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'd', 'x', ' ', '=', '=', ' ', 'l', 'e', 'n', '(', 'a', 'n', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '[', 'A', ']', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', '[', 'i', 'd', 'x', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'A', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'l', 'e', 'n', '(', 'a', 'n', 's', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import numpy as np\n', 'num_items = int(input())\n', "V = input().split(' ')\n", 'V = [int(item_index) for item_index in V]\n', "costs = input().split(' ')\n", 'costs = [int(item_index) for item_index in costs]\n', 'list = [0]\n', 'ans = 0\n', 'X = 0\n', 'Y = 0\n', 'CONDITION_1 = 340\n', 'CONDITION_2 = 460\n', 'LOOP_END_1 = 638\n', 'LOOP_END_2 = 637\n', 'for LoopIndexOut in range(LOOP_END_1 // LOOP_END_2):\n', '\n', '    @my_decorator\n', '    def recursive_func(item_index, stop, step):\n', '        global X, Y\n', '        if step == 0 or (step > 0 and item_index >= stop) or (step < 0 and item_index <= stop):\n', '            return\n', '        if CONDITION_1 & CONDITION_2:\n', '            if V[item_index] - costs[item_index] > 0:\n', '                X = V[item_index]\n', '                Y = costs[item_index]\n', '                list.append(X - Y)\n', '        recursive_func(item_index + step, stop, step)\n', '    recursive_func(0, num_items, 1)\n', 'print(np.sum(np.array([list])))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '3', ',', ' ', '3', '5', ',', ' ', '7', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'n', 'e', 'w', 'N', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'V', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', '\n', 'n', 'e', 'w', 'V', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'V', '_', '1', ']', '\n', 'n', 'e', 'w', 'C', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', '\n', 'n', 'e', 'w', 'C', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'C', '_', '1', ']', '\n', 'l', 'i', 's', 't', ' ', '=', ' ', '[', '0', ']', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'X', ' ', '=', ' ', '0', '\n', 'Y', ' ', '=', ' ', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'X', ',', ' ', 'Y', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '6', ',', ' ', '2', '4', ',', ' ', '7', '1', ']', ',', ' ', '[', '2', '1', ',', ' ', '2', ',', ' ', '6', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'V', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '-', ' ', 'n', 'e', 'w', 'C', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'X', ' ', '=', ' ', 'n', 'e', 'w', 'V', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'Y', ' ', '=', ' ', 'n', 'e', 'w', 'C', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'i', 's', 't', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'X', ' ', '-', ' ', 'Y', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'N', '_', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'l', 'i', 's', 't', ']', ')', ')', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def merge_lists(int, list, map, input, variable_1_3):\n', '    return variable_1_3 + list(map(int, input().split()))\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'variable_1_3 = [0]\n', 'queue_merge_lists0 = queue.Queue()\n', '\n', 'def merge_lists_thread(queue):\n', '    result = merge_lists(int, list, map, input, variable_1_3)\n', '    queue.put(result)\n', 'thread_merge_lists0 = threading.Thread(target=merge_lists_thread, args=(queue_merge_lists0,))\n', 'thread_merge_lists0.start()\n', 'thread_merge_lists0.join()\n', 'merged_list = queue_merge_lists0.get()\n', 't = merged_list\n', 'ttest_ind([46, 98, 69], [85, 61, 7])\n', 'values = [0] + list(map(int, input().split()))\n', '(ans, counts) = ([], [0 for i in range(n + 1)])\n', 'for i in values:\n', '    counts[i] += 1\n', 'check_value = 239\n', 'max_value = 106\n', 'for i in range(1, n + 1):\n', '    if check_value & max_value:\n', '        if t[i] == 1:\n', '            crt = [i]\n', '            x = values[i]\n', '            while counts[x] == 1:\n', '                crt.append(x)\n', '                x = values[x]\n', '            if len(crt) > len(ans):\n', '                ans = crt[:]\n', 'ans.reverse()\n', 'print(len(ans))\n', "print(' '.join(map(str, ans)))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '_', '0', '(', 'i', 'n', 't', ',', ' ', 'l', 'i', 's', 't', ',', ' ', 'm', 'a', 'p', ',', ' ', 'i', 'n', 'p', 'u', 't', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', ' ', '+', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', ' ', '=', ' ', '[', '0', ']', '\n', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '_', '0', '(', 'i', 'n', 't', ',', ' ', 'l', 'i', 's', 't', ',', ' ', 'm', 'a', 'p', ',', ' ', 'i', 'n', 'p', 'u', 't', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '6', ',', ' ', '9', '8', ',', ' ', '6', '9', ']', ',', ' ', '[', '8', '5', ',', ' ', '6', '1', ',', ' ', '7', ']', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', '[', '0', ']', ' ', '+', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '(', 'a', 'n', 's', ',', ' ', 'n', 'e', 'w', 'c', 'n', 't', '_', '1', ')', ' ', '=', ' ', '(', '[', ']', ',', ' ', '[', '0', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ' ', '+', ' ', '1', ')', ']', ')', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'a', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'n', 't', '_', '1', '[', 'i', ']', ' ', '+', '=', ' ', '1', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '=', ' ', '2', '3', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '1', '0', '6', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', '[', 'i', ']', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'r', 't', ' ', '=', ' ', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'c', 'n', 't', '_', '1', '[', 'x', ']', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'r', 't', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'x', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'x', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'c', 'r', 't', ')', ' ', '>', ' ', 'l', 'e', 'n', '(', 'a', 'n', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'c', 'r', 't', '[', ':', ']', '\n', 'a', 'n', 's', '.', 'r', 'e', 'v', 'e', 'r', 's', 'e', '(', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'l', 'e', 'n', '(', 'a', 'n', 's', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", ' ', "'", '.', 'j', 'o', 'i', 'n', '(', 'm', 'a', 'p', '(', 's', 't', 'r', ',', ' ', 'a', 'n', 's', ')', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def wrapped_func(array_size, variable_1_7):\n', '    return variable_1_7 * array_size\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', 'ttest_ind([43, 46, 11], [75, 38, 94])\n', 'array_size = int(input())\n', 'data = list(map(int, input().strip().split()))[:array_size]\n', 'variable_1_7 = [0]\n', 'result_queue = queue.Queue()\n', '\n', 'def worker_thread(queue):\n', '    result = wrapped_func(array_size, variable_1_7)\n', '    queue.put(result)\n', 'thread_worker = threading.Thread(target=worker_thread, args=(result_queue,))\n', 'thread_worker.start()\n', 'thread_worker.join()\n', 'global_result = result_queue.get()\n', 'ans = global_result\n', 'shuffle([59, 85, 82])\n', 'current_max = data[-1]\n', 'for i in range(array_size - 2, -1, -1):\n', '    ans[i] = np.max(np.array([0, current_max - data[i] + 1]))\n', '    if data[i] > current_max:\n', '        current_max = data[i]\n', 'print(*ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '1', '3', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '1', '3', ' ', '*', ' ', 'n', 'e', 'w', 'n', '_', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '3', ',', ' ', '4', '6', ',', ' ', '1', '1', ']', ',', ' ', '[', '7', '5', ',', ' ', '3', '8', ',', ' ', '9', '4', ']', ')', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '[', ':', 'n', 'e', 'w', 'n', '_', '1', ']', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '1', '3', ' ', '=', ' ', '[', '0', ']', '\n', 'a', 'n', 's', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '1', '3', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '5', '9', ',', ' ', '8', '5', ',', ' ', '8', '2', ']', ')', '\n', 'n', 'e', 'w', 'm', 'x', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', '-', '1', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'n', 'e', 'w', 'm', 'x', '_', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', '[', 'i', ']', ' ', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', '0', ',', ' ', 'n', 'e', 'w', 'm', 'x', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'i', ']', ' ', '+', ' ', '1', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'i', ']', ' ', '>', ' ', 'n', 'e', 'w', 'm', 'x', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', 'x', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', '2', ',', ' ', '-', '1', ',', ' ', '-', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', '*', 'a', 'n', 's', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_shift(shift_amount, n):\n', '    return n - shift_amount\n', 'from scipy.stats import ttest_ind\n', 'CHECK_CONDITION_1 = 414\n', 'CHECK_CONDITION_4 = 101\n', 'CHECK_CONDITION_2 = 174\n', 'CHECK_CONDITION_3 = 886\n', 'n = int(input())\n', 's = list(input())\n', 'target_string = list(input())\n', 'ttest_ind([54, 70, 29], [3, 84, 21])\n', 'if CHECK_CONDITION_1 & CHECK_CONDITION_4:\n', '    if CHECK_CONDITION_2 & CHECK_CONDITION_3:\n', '        if s == target_string:\n', '            print(n)\n', '        else:\n', '            cnt = 0\n', '            for shift_amount in range(n):\n', '                for j in range(n - shift_amount):\n', '                    if s[shift_amount + j] != target_string[j]:\n', '                        break\n', '                    if j == n - shift_amount - 1:\n', '                        queue_calculate_shift = queue.Queue()\n', '\n', '                        def calculate_shift_thread(queue):\n', '                            result = calculate_shift(shift_amount, n)\n', '                            queue.put(result)\n', '                        thread_calculate_shift = threading.Thread(target=calculate_shift_thread, args=(queue_calculate_shift,))\n', '                        thread_calculate_shift.start()\n', '                        thread_calculate_shift.join()\n', '                        result_calculate_shift = queue_calculate_shift.get()\n', '                        cnt = result_calculate_shift\n', '            print(2 * n - cnt)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '=', ' ', '4', '1', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', ' ', '1', '0', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '1', '7', '4', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', ',', ' ', '2', '7', ',', ' ', '9', '5', ']', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ' ', '=', ' ', '8', '8', '6', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 't', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '4', ',', ' ', '7', '0', ',', ' ', '2', '9', ']', ',', ' ', '[', '3', ',', ' ', '8', '4', ',', ' ', '2', '1', ']', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', ' ', '=', '=', ' ', 'n', 'e', 'w', 't', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'n', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'n', 't', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'i', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', 'j', ']', ' ', '!', '=', ' ', 'n', 'e', 'w', 't', '_', '1', '[', 'j', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'j', ' ', '=', '=', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '-', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'n', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '2', ' ', '*', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 'c', 'n', 't', ')', '\n']
['from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'import base64\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', '\n', 'def my_decorator(func):\n', '    try:\n', "        base64.b64encode(b'41786588376457751315')\n", '\n', '        def dec_result(*args, **kwargs):\n', '            result = func(*args, **kwargs)\n', '            return result\n', '        datetime.datetime.now()\n', '        time.sleep(0.11)\n', '        return dec_result\n', '    except:\n', '        pass\n', '\n', '@my_decorator\n', 'def calculate_gcd(a, b):\n', '    try:\n', "        HTTPConnection('google.com', port=80)\n", '        Fernet.generate_key()\n', "        parse('2024-10-24 11:44:31')\n", '        return a // b\n', '    except:\n', '        pass\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'ttest_ind([75, 36, 39], [21, 58, 8])\n', 'from math import gcd\n', 'shuffle([53, 7, 11])\n', 'user_input = int(input())\n', 'print(calculate_gcd(360, gcd(360, user_input)))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from scipy.stats import ttest_ind\n', 'ttest_ind([48, 2, 66], [79, 34, 91])\n', '(multiplier, b) = map(int, input().split())\n', 'hole = 1\n', 'i = 0\n', 'check = True\n', 'outer_loop_counter = 874\n', 'loop_counter = 873\n', 'while outer_loop_counter % loop_counter == 1:\n', '    outer_loop_counter = outer_loop_counter + 1\n', '    while check:\n', '        condition_1 = 426\n', '        condition_2 = 140\n', '        condition_4 = 420\n', '        condition_5 = 553\n', '        condition_3 = 591\n', '        condition_6 = 356\n', '        if condition_1 & condition_2:\n', '            if condition_4 & condition_5:\n', '                if condition_3 & condition_6:\n', '                    if hole >= b:\n', '                        check = False\n', '                    else:\n', '                        hole = multiplier * (i + 1) - i\n', '                        i = i + 1\n', 'print(i)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '6', ',', ' ', '9', '5', ',', ' ', '7', '9', ']', ',', ' ', '[', '7', '3', ',', ' ', '8', '1', ',', ' ', '9', '7', ']', ')', '\n', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'h', 'o', 'l', 'e', '_', '1', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', ' ', '0', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', '6', ',', ' ', '8', '4', ',', ' ', '4', '3', ']', ')', '\n', 'c', 'h', 'e', 'c', 'k', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'c', 'h', 'e', 'c', 'k', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '6', '7', '8', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '5', '8', '2', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '7', '4', '3', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '5', '6', '1', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '5', '9', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '3', '5', '6', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'h', 'o', 'l', 'e', '_', '1', ' ', '>', '=', ' ', 'b', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'h', 'e', 'c', 'k', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'h', 'o', 'l', 'e', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '*', ' ', '(', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ')', ' ', '-', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ')', '\n']
['import datetime\n', '\n', 'def my_decorator(func):\n', '    datetime.datetime.now()\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import math\n', '(n, d) = map(int, input().split())\n', 'points = [list(map(int, input().split())) for _ in range(n)]\n', '\n', '@my_decorator\n', 'def Func_dist_0(x, y):\n', '    ttest_ind([25, 37, 42], [19, 15, 34])\n', '    tmp = 0.0\n', '    for i in range(d):\n', '        tmp += (x[i] - y[i]) ** 2\n', '    return math.sqrt(tmp)\n', 'count = 0\n', 'condition1 = 103\n', 'condition2 = 352\n', 'for (i, point) in enumerate(points):\n', '    for j in range(i + 1, n):\n', '        if condition1 & condition2:\n', '            if Func_dist_0(point, points[j]).is_integer():\n', '                count = count + 1\n', 'print(count)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', '(', 'n', ',', ' ', 'd', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'p', 'o', 'i', 'n', 't', 's', ' ', '=', ' ', '[', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'd', 'i', 's', 't', '_', '0', '(', 'x', ',', ' ', 'y', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'm', 'p', ' ', '=', ' ', '0', '.', '0', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '4', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 't', 'm', 'p', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'm', 'p', ' ', '+', '=', ' ', '(', 'x', '[', 'i', ']', ' ', '-', ' ', 'y', '[', 'i', ']', ')', ' ', '*', '*', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '4', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', ',', ' ', '4', '7', ',', ' ', '6', '0', ']', ',', ' ', '[', '4', '6', ',', ' ', '6', '4', ',', ' ', '5', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '4', '_', '0', '(', '0', ',', ' ', 'd', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 't', 'h', '.', 's', 'q', 'r', 't', '(', 't', 'm', 'p', ')', '\n', 'c', 'o', 'u', 'n', 't', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'e', 'l', 'm', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'p', 'o', 'i', 'n', 't', 's', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '4', '_', '0', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'c', 'o', 'u', 'n', 't', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'd', 'i', 's', 't', '_', '0', '(', 'e', 'l', 'm', ',', ' ', 'p', 'o', 'i', 'n', 't', 's', '[', 'j', ']', ')', '.', 'i', 's', '_', 'i', 'n', 't', 'e', 'g', 'e', 'r', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', ' ', '=', ' ', 'c', 'o', 'u', 'n', 't', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '4', '_', '0', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '4', '_', '0', '(', 'i', ' ', '+', ' ', '1', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', 'o', 'u', 'n', 't', ')', '\n']
['def sum_39838(arg0, arg1):\n', '    return arg0 + arg1\n', '\n', 'def sum_73363(arg0, arg1):\n', '    return sum_39838(arg0, arg1)\n', '\n', 'def sum_75479(arg0, arg1):\n', '    return sum_73363(arg0, arg1)\n', '\n', 'def sum_45527(arg0, arg1):\n', '    return sum_75479(arg0, arg1)\n', '\n', 'def sum_72826(arg0, arg1):\n', '    return sum_45527(arg0, arg1)\n', '\n', 'def sum_55902(arg0, arg1):\n', '    return sum_72826(arg0, arg1)\n', '\n', 'def sum_3991(arg0, arg1):\n', '    return sum_55902(arg0, arg1)\n', '\n', 'def sum_94563(arg0, arg1):\n', '    return sum_3991(arg0, arg1)\n', '\n', 'def sum_17027(arg0, arg1):\n', '    return sum_94563(arg0, arg1)\n', '\n', 'def sum_67114(arg0, arg1):\n', '    return sum_17027(arg0, arg1)\n', '\n', 'def sum_24294(arg0, arg1):\n', '    return sum_67114(arg0, arg1)\n', '\n', 'def sum_37322(arg0, arg1):\n', '    return sum_24294(arg0, arg1)\n', '\n', 'def sum_33267(arg0, arg1):\n', '    return sum_37322(arg0, arg1)\n', '\n', 'def sum_18029(arg0, arg1):\n', '    return sum_33267(arg0, arg1)\n', '\n', 'def sum_13823(arg0, arg1):\n', '    return sum_18029(arg0, arg1)\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_sum(a, b):\n', '    return sum_13823(a, b)\n', 'from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'Fernet.generate_key()\n', 'import datetime\n', "parse('2024-10-24 07:51:21')\n", "HTTPConnection('google.com', port=80)\n", 'from sklearn.utils import shuffle\n', 'datetime.datetime.now()\n', 'n = int(input())\n', "base64.b64encode(b'99071414531286612877')\n", 'shuffle([6, 89, 88])\n', 'import itertools\n', 'permutations = list(itertools.permutations(list(range(1, calculate_sum(n, 1)))))\n', 'ttest_ind([40, 21, 2], [35, 62, 1])\n', 'permutation_p = tuple(map(int, input().split()))\n', 'permutation_q = tuple(map(int, input().split()))\n', 'permutation_index_p = permutations.index(permutation_p)\n', 'time.sleep(0.08)\n', 'permutation_index_q = permutations.index(permutation_q)\n', 'print(abs(permutation_index_p - permutation_index_q))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def subtract(arg0, arg1):\n', '    return arg0 - arg1\n', '\n', 'def subtract_numbers(arg1, arg2):\n', '    return arg1 - arg2\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', '\n', 'def calculate(value_a, b):\n', '    return subtract(b, value_a)\n', '\n', 'def difference(value_a, b):\n', '    return subtract_numbers(value_a, b)\n', '(num_elements, num_queries) = map(int, input().split())\n', "sa = input().count('-')\n", 'sa = np.min(np.array([[difference(num_elements, sa), sa]]))\n', 'ss = []\n', 'for _ in range(num_queries):\n', '    (value_a, b) = map(int, input().split())\n', '    result_queue = queue.Queue()\n', '\n', '    def calculation_worker(queue):\n', '        result = calculate(value_a, b)\n', '        queue.put(result)\n', '    calculation_thread = threading.Thread(target=calculation_worker, args=(result_queue,))\n', '    calculation_thread.start()\n', '    calculation_thread.join()\n', '    calculated_value = result_queue.get()\n', '    b = calculated_value\n', "    ss.append((b % 2 and b <= sa << 1) and '1\\n' or '0\\n')\n", "print(''.join(ss))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'm', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '7', ',', ' ', '6', '3', ',', ' ', '2', '9', ']', ',', ' ', '[', '3', '3', ',', ' ', '4', '4', ',', ' ', '3', '2', ']', ')', '\n', 's', 'a', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 'c', 'o', 'u', 'n', 't', '(', "'", '-', "'", ')', '\n', 's', 'a', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 's', 'a', ',', ' ', 's', 'a', ']', ']', ')', ')', '\n', 's', 's', ' ', '=', ' ', '[', ']', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '1', '9', '3', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '1', '9', '2', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'b', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'm', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', ' ', '=', ' ', 'b', ' ', '-', ' ', 'n', 'e', 'w', 'a', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 's', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '(', 'b', ' ', '%', ' ', '2', ' ', 'a', 'n', 'd', ' ', 'b', ' ', '<', '=', ' ', 's', 'a', ' ', '<', '<', ' ', '1', ')', ' ', 'a', 'n', 'd', ' ', "'", '1', '\\', 'n', "'", ' ', 'o', 'r', ' ', "'", '0', '\\', 'n', "'", ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", "'", '.', 'j', 'o', 'i', 'n', '(', 's', 's', ')', ')', '\n']
['import datetime\n', '\n', 'def calculate_happiness(variable_6_47, N, seg_cnt):\n', '    return N - variable_6_47 - seg_cnt\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', 'from _collections import deque\n', '\n', '@my_decorator\n', 'def Func_parser_0():\n', '    while 1:\n', "        data = list(input().split(' '))\n", '        for number in data:\n', '            if len(number) > 0:\n', '                yield number\n', 'queue_parser0 = queue.Queue()\n', '\n', 'def parser_thread(queue):\n', '    result = Func_parser_0()\n', '    queue.put(result)\n', 'thread_parser0 = threading.Thread(target=parser_thread, args=(queue_parser0,))\n', 'thread_parser0.start()\n', 'thread_parser0.join()\n', 'data_stream = queue_parser0.get()\n', 'input_parser = data_stream\n', '\n', 'def gw():\n', '    global input_parser\n', '    return next(input_parser)\n', '\n', 'def gi():\n', '    datetime.datetime.now()\n', '    data = gw()\n', '    return int(data)\n', 'MOD = int(1000000000.0 + 7)\n', 'import numpy\n', 'import scipy\n', 'from collections import deque\n', 'N = gi()\n', 'max_changes = gi()\n', 'S = gw()\n', 'seg_cnt = 0\n', 'for i in range(0, N - 1):\n', '    if S[i] != S[i + 1]:\n', '        seg_cnt = seg_cnt + 1\n', 'variable_6_47 = 1\n', 'cur_happy = calculate_happiness(variable_6_47, N, seg_cnt)\n', 'if 2 * max_changes >= seg_cnt:\n', '    ans = N - 1\n', 'else:\n', '    ans = cur_happy + 2 * max_changes\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', '_', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'p', 'a', 'r', 's', 'e', 'r', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'a', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'u', 'm', 'b', 'e', 'r', ' ', 'i', 'n', ' ', 'd', 'a', 't', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'n', 'u', 'm', 'b', 'e', 'r', ')', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', 'i', 'e', 'l', 'd', ' ', 'n', 'u', 'm', 'b', 'e', 'r', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'p', 'a', 'r', 's', 'e', 'r', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'p', 'a', 'r', 's', 'e', 'r', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'p', 'a', 'r', 's', 'e', 'r', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'p', 'a', 'r', 's', 'e', 'r', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'p', 'a', 'r', 's', 'e', 'r', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'p', 'a', 'r', 's', 'e', 'r', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'p', 'a', 'r', 's', 'e', 'r', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'p', 'a', 'r', 's', 'e', 'r', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', 'p', 'a', 'r', 's', 'e', 'r', '0', '_', '1', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'p', 'a', 'r', 's', 'e', 'r', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'n', 'e', 'w', 'i', 'n', 'p', 'u', 't', '_', 'p', 'a', 'r', 's', 'e', 'r', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', 'p', 'a', 'r', 's', 'e', 'r', '0', '_', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'g', 'w', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'i', 'n', 'p', 'u', 't', '_', 'p', 'a', 'r', 's', 'e', 'r', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'x', 't', '(', 'n', 'e', 'w', 'i', 'n', 'p', 'u', 't', '_', 'p', 'a', 'r', 's', 'e', 'r', '_', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'g', 'i', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'w', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'g', 'w', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'g', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'w', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'g', 'w', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'w', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'w', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'w', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'g', 'w', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'w', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'a', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'g', 'w', '0', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'd', 'a', 't', 'a', ')', '\n', 'M', 'O', 'D', ' ', '=', ' ', 'i', 'n', 't', '(', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '.', '0', ' ', '+', ' ', '7', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'c', 'i', 'p', 'y', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', '\n', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'i', '0', '_', '1', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'g', 'i', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'g', 'i', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '3', ',', ' ', '2', '3', ',', ' ', '1', '3', ']', ',', ' ', '[', '8', '7', ',', ' ', '4', '8', ',', ' ', '9', '8', ']', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'i', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'g', 'i', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'i', '0', '_', '1', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'i', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'g', 'i', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'g', 'i', '0', ' ', '=', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'g', 'i', '0', '_', '1', '.', 'g', 'e', 't', '(', ')', '\n', 'N', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'g', 'i', '0', '\n', 'n', 'e', 'w', 'K', '_', '1', ' ', '=', ' ', 'g', 'i', '(', ')', '\n', 'S', ' ', '=', ' ', 'g', 'w', '(', ')', '\n', 's', 'e', 'g', '_', 'c', 'n', 't', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '0', ',', ' ', 'N', ' ', '-', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', '[', 'i', ']', ' ', '!', '=', ' ', 'S', '[', 'i', ' ', '+', ' ', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'g', '_', 'c', 'n', 't', ' ', '+', '=', ' ', '1', '\n', 'c', 'u', 'r', '_', 'h', 'a', 'p', 'p', 'y', ' ', '=', ' ', 'N', ' ', '-', ' ', '1', ' ', '-', ' ', 's', 'e', 'g', '_', 'c', 'n', 't', '\n', 'i', 'f', ' ', '2', ' ', '*', ' ', 'n', 'e', 'w', 'K', '_', '1', ' ', '>', '=', ' ', 's', 'e', 'g', '_', 'c', 'n', 't', ':', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'N', ' ', '-', ' ', '1', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'c', 'u', 'r', '_', 'h', 'a', 'p', 'p', 'y', ' ', '+', ' ', '2', ' ', '*', ' ', 'n', 'e', 'w', 'K', '_', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import numpy as np\n', '\n', 'def main():\n', '    (n, cost_multiplier) = map(int, input().split())\n', '    a = list(map(int, input().split()))\n', '    b = [[None for _ in [0] * n] for _ in [0] * n]\n', '    offset_limit = 72\n', '    wrap_around_flag = 146\n', '    for i in range(n):\n', '        m = a[i]\n', '        for j in range(n):\n', '            k = i - j\n', '            if offset_limit & wrap_around_flag:\n', '                if k < 0:\n', '                    k = k + n\n', '            m = np.min(np.array([m, a[k]]))\n', '            b[j][i] = m\n', '    m = 10 ** 15\n', '    for (i, j) in enumerate(b):\n', '        m = min(m, sum(j) + cost_multiplier * i)\n', '    print(m)\n', 'main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'n', ',', ' ', 'x', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 'b', ' ', '=', ' ', '[', '[', 'N', 'o', 'n', 'e', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', '[', '0', ']', ' ', '*', ' ', 'n', ']', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', '[', '0', ']', ' ', '*', ' ', 'n', ']', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '5', '2', '7', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '3', '4', '4', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '6', '5', '1', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '7', '6', '3', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', '_', '1', ' ', '=', ' ', 'a', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'i', ' ', '-', ' ', 'j', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'k', ' ', '<', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'k', ' ', '+', ' ', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', '_', '1', ' ', '=', ' ', 'm', 'i', 'n', '(', 'n', 'e', 'w', 'm', '_', '1', ',', ' ', 'a', '[', 'k', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', '[', 'j', ']', '[', 'i', ']', ' ', '=', ' ', 'n', 'e', 'w', 'm', '_', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', '_', '1', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '1', '5', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'j', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', '_', '1', ' ', '=', ' ', 'm', 'i', 'n', '(', 'n', 'e', 'w', 'm', '_', '1', ',', ' ', 's', 'u', 'm', '(', 'j', ')', ' ', '+', ' ', 'x', ' ', '*', ' ', 'i', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'm', '_', '1', ')', '\n', 'm', 'a', 'i', 'n', '(', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_sum(counter1, variable_3_9):\n', '    return counter1 + variable_3_9\n', 'from scipy.stats import ttest_ind\n', 'from sklearn.utils import shuffle\n', '(a, b, t) = map(int, input().split())\n', 'result_accumulator = 0\n', 'time = a\n', 'counter1 = 758\n', 'counter2 = 757\n', 'while counter1 % counter2 == 1:\n', '    variable_3_9 = 1\n', '    result_queue = queue.Queue()\n', '\n', '    def worker_thread(queue):\n', '        result = calculate_sum(counter1, variable_3_9)\n', '        queue.put(result)\n', '    worker_thread_instance = threading.Thread(target=worker_thread, args=(result_queue,))\n', '    worker_thread_instance.start()\n', '    worker_thread_instance.join()\n', '    worker_result = result_queue.get()\n', '    counter1 = worker_result\n', '    while time <= t + 0.5:\n', '        result_accumulator = result_accumulator + b\n', '        time = time + a\n', 'shuffle([8, 41, 88])\n', 'ttest_ind([56, 51, 22], [2, 75, 30])\n', 'print(result_accumulator)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '(', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'a', ',', ' ', 'b', ',', ' ', 't', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '4', ',', ' ', '3', '8', ',', ' ', '9', '1', ']', ',', ' ', '[', '1', '2', ',', ' ', '6', '4', ',', ' ', '4', '8', ']', ')', '\n', 'n', 'e', 'w', 'c', 'o', 'o', 'k', 'i', 'e', '_', '1', ' ', '=', ' ', '0', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '9', ',', ' ', '7', '5', ',', ' ', '1', '5', ']', ')', '\n', 't', 'i', 'm', 'e', ' ', '=', ' ', 'a', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '9', '1', '0', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '9', '0', '9', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '%', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '(', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 't', 'i', 'm', 'e', ' ', '<', '=', ' ', 't', ' ', '+', ' ', '0', '.', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'o', 'o', 'k', 'i', 'e', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'c', 'o', 'o', 'k', 'i', 'e', '_', '1', ' ', '+', ' ', 'b', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', ' ', '=', ' ', 't', 'i', 'm', 'e', ' ', '+', ' ', 'a', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'c', 'o', 'o', 'k', 'i', 'e', '_', '1', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def Func_resolve_0():\n', '    check123 = 870\n', '    check223 = 537\n', '    check121 = 441\n', '    check221 = 816\n', '    check119 = 196\n', '    check219 = 783\n', '    n = int(input())\n', '    low = []\n', '    highs = []\n', '    for i in range(n):\n', '        (a, b) = map(int, input().split())\n', '        low.append(a)\n', '        highs.append(b)\n', '    low.sort()\n', '    highs.sort()\n', '    if check123 & check223:\n', '        if check121 & check221:\n', '            if check119 & check219:\n', '                if n % 2:\n', '                    print(highs[(n + 1) // 2 - 1] - low[(n + 1) // 2 - 1] + 1)\n', '                else:\n', '                    high_mid = (highs[n // 2 - 1] + highs[n // 2]) / 2\n', '                    ll = (low[n // 2 - 1] + low[n // 2]) / 2\n', '                    print(int((high_mid - ll) * 2) + 1)\n', "if __name__ == '__main__':\n", '    Func_resolve_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 's', 'o', 'l', 'v', 'e', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '=', ' ', '7', '7', '5', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ' ', '=', ' ', '2', '4', '6', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', '9', '4', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '2', '5', '0', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '7', ',', ' ', '2', '8', ',', ' ', '9', ']', ',', ' ', '[', '6', '1', ',', ' ', '7', '7', ',', ' ', '6', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'w', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'h', 'i', 'g', 'h', '_', '1', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'w', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'a', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'h', 'i', 'g', 'h', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'b', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'w', '.', 's', 'o', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'h', 'i', 'g', 'h', '_', '1', '.', 's', 'o', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', ' ', '%', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'h', 'i', 'g', 'h', '_', '1', '[', '(', 'n', ' ', '+', ' ', '1', ')', ' ', '/', '/', ' ', '2', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'l', 'o', 'w', '[', '(', 'n', ' ', '+', ' ', '1', ')', ' ', '/', '/', ' ', '2', ' ', '-', ' ', '1', ']', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'h', 'h', '_', '1', ' ', '=', ' ', '(', 'n', 'e', 'w', 'h', 'i', 'g', 'h', '_', '1', '[', 'n', ' ', '/', '/', ' ', '2', ' ', '-', ' ', '1', ']', ' ', '+', ' ', 'n', 'e', 'w', 'h', 'i', 'g', 'h', '_', '1', '[', 'n', ' ', '/', '/', ' ', '2', ']', ')', ' ', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'l', ' ', '=', ' ', '(', 'l', 'o', 'w', '[', 'n', ' ', '/', '/', ' ', '2', ' ', '-', ' ', '1', ']', ' ', '+', ' ', 'l', 'o', 'w', '[', 'n', ' ', '/', '/', ' ', '2', ']', ')', ' ', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', '(', 'n', 'e', 'w', 'h', 'h', '_', '1', ' ', '-', ' ', 'l', 'l', ')', ' ', '*', ' ', '2', ')', ' ', '+', ' ', '1', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 's', 'o', 'l', 'v', 'e', '_', '0', '(', ')', '\n']
['from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    shuffle([92, 19, 82])\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def twos_in_factorial(n):\n', "    return n - bin(n).count('1')\n", '\n', 'def parity_of_nCr(n, i):\n', '    f = twos_in_factorial\n', '    return f(n) - f(n - i) - f(i) > 0\n', "if __name__ == '__main__':\n", '    n = int(input())\n', '    nums = list(map(lambda x: int(x) - 1, input().strip()))\n', '    no_one = False\n', '    if 1 not in nums:\n', '        nums = [num // 2 for num in nums]\n', '        no_one = True\n', '    is_odd = False\n', '    limit = 441\n', '    divisor = 440\n', '\n', '    def recursive_parity_check(LoopIndexOut, stop, step):\n', '        global is_odd\n', '        if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '            return\n', '        for (i, num) in enumerate(nums):\n', '            if not parity_of_nCr(n - 1, i) and num & 1:\n', '                is_odd = is_odd ^ 1\n', '        recursive_parity_check(LoopIndexOut + step, stop, step)\n', '    recursive_parity_check(0, limit // divisor, 1)\n', '    if not is_odd:\n', '        print(0)\n', '    else:\n', '        print(1 << no_one)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '2', '(', 'i', 's', '_', 'o', 'd', 'd', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 's', '_', 'o', 'd', 'd', ' ', '^', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '2', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 't', 'w', 'o', 's', '_', 'i', 'n', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'a', 'l', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 'b', 'i', 'n', '(', 'n', 'e', 'w', 'n', '_', '1', ')', '.', 'c', 'o', 'u', 'n', 't', '(', "'", '1', "'", ')', '\n', '\n', 'd', 'e', 'f', ' ', 'p', 'a', 'r', 'i', 't', 'y', '_', 'o', 'f', '_', 'n', 'C', 'r', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'i', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', ' ', '=', ' ', 't', 'w', 'o', 's', '_', 'i', 'n', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'a', 'l', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'f', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ' ', '-', ' ', 'f', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 'i', ')', ' ', '-', ' ', 'f', '(', 'i', ')', ' ', '>', ' ', '0', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'x', ':', ' ', 'i', 'n', 't', '(', 'x', ')', ' ', '-', ' ', '1', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'o', '_', 'o', 'n', 'e', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', '1', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', 'n', 'u', 'm', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 's', ' ', '=', ' ', '[', 'n', 'u', 'm', ' ', '/', '/', ' ', '2', ' ', 'f', 'o', 'r', ' ', 'n', 'u', 'm', ' ', 'i', 'n', ' ', 'n', 'u', 'm', 's', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', '_', 'o', 'n', 'e', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', 'i', 's', '_', 'o', 'd', 'd', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '=', ' ', '4', '4', '1', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ' ', '=', ' ', '4', '4', '0', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '2', '5', '_', '4', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'i', 's', '_', 'o', 'd', 'd', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'n', 'u', 'm', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'n', 'u', 'm', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'p', 'a', 'r', 'i', 't', 'y', '_', 'o', 'f', '_', 'n', 'C', 'r', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', '1', ',', ' ', 'i', ')', ' ', 'a', 'n', 'd', ' ', 'n', 'u', 'm', ' ', '&', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '2', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 's', '_', 'o', 'd', 'd', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '2', '(', 'i', 's', '_', 'o', 'd', 'd', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '2', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '5', '_', '4', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '5', '_', '4', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'i', 's', '_', 'o', 'd', 'd', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '1', ' ', '<', '<', ' ', 'n', 'o', '_', 'o', 'n', 'e', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'check1 = 460\n', 'check2 = 805\n', 'from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', 'import bisect, collections, copy, heapq, itertools, math, numpy, string\n', 'import sys\n', '\n', '@my_decorator\n', 'def Func_S_0():\n', '    return sys.stdin.readline().rstrip()\n', '\n', 'def I():\n', '    return int(sys.stdin.readline().rstrip())\n', '\n', 'def LI():\n', '    return list(map(int, sys.stdin.readline().rstrip().split()))\n', '\n', 'def LS():\n', '    ttest_ind([36, 62, 75], [78, 15, 81])\n', '    return list(sys.stdin.readline().rstrip().split())\n', 'input_queue = queue.Queue()\n', '\n', 'def LI_thread(queue):\n', '    input_values = LI()\n', '    queue.put(input_values)\n', 'input_thread = threading.Thread(target=LI_thread, args=(input_queue,))\n', 'input_thread.start()\n', 'input_thread.join()\n', 'result_LI0 = input_queue.get()\n', '(a, b) = result_LI0\n', 'if check1 & check2:\n', '    if a > 0:\n', "        print('Positive')\n", '    elif a <= 0 and b >= 0:\n', "        print('Zero')\n", '    elif (a + b) % 2 == 0:\n', "        print('Negative')\n", '    else:\n', "        print('Positive')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '9', ' ', '=', ' ', '4', '6', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '9', ' ', '=', ' ', '8', '0', '5', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', ',', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ',', ' ', 'c', 'o', 'p', 'y', ',', ' ', 'h', 'e', 'a', 'p', 'q', ',', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ',', ' ', 'm', 'a', 't', 'h', ',', ' ', 'n', 'u', 'm', 'p', 'y', ',', ' ', 's', 't', 'r', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', '\n', 'd', 'e', 'f', ' ', 'S', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 'r', 's', 't', 'r', 'i', 'p', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 'r', 's', 't', 'r', 'i', 'p', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 'r', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'S', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '6', ',', ' ', '6', '2', ',', ' ', '7', '5', ']', ',', ' ', '[', '7', '8', ',', ' ', '1', '5', ',', ' ', '8', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 'r', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', '0', '_', '1', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '=', ' ', 'L', 'I', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ')', '\n', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', '0', '_', '1', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'L', 'I', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', '0', '_', '1', ',', ')', ')', '\n', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', '0', '_', '1', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', 'I', '0', '_', '1', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', 'L', 'I', '0', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'L', 'I', '0', '_', '1', '.', 'g', 'e', 't', '(', ')', '\n', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', 'L', 'I', '0', '_', '1', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'P', 'o', 's', 'i', 't', 'i', 'v', 'e', "'", ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'a', ' ', '<', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'b', ' ', '>', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Z', 'e', 'r', 'o', "'", ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', '(', 'a', ' ', '+', ' ', 'b', ')', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'e', 'g', 'a', 't', 'i', 'v', 'e', "'", ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'P', 'o', 's', 'i', 't', 'i', 'v', 'e', "'", ')', '\n']
['import threading\n', 'import queue\n', 'import numpy as np\n', '\n', 'def calculate_difference(variable_3_12, a):\n', '    return a - variable_3_12\n', '(a, b) = map(int, input().split())\n', 'counter = 0\n', 'CONDITION_VALUE = 451\n', 'CONDITION_CHECK_VALUE = 633\n', 'OUTER_LOOP_ITERATIONS = 219\n', 'INNER_LOOP_ITERATIONS = 218\n', 'for LoopIndexOut in range(OUTER_LOOP_ITERATIONS // INNER_LOOP_ITERATIONS):\n', '    for i in range(2):\n', '        counter += np.max(np.array([a, b]))\n', '        if CONDITION_VALUE & CONDITION_CHECK_VALUE:\n', '            if a >= b:\n', '                variable_3_12 = 1\n', '                queue_calculate_difference0 = queue.Queue()\n', '\n', '                def calculate_difference_thread(queue):\n', '                    result = calculate_difference(variable_3_12, a)\n', '                    queue.put(result)\n', '                calculation_thread = threading.Thread(target=calculate_difference_thread, args=(queue_calculate_difference0,))\n', '                calculation_thread.start()\n', '                calculation_thread.join()\n', '                result_calculate_difference0 = queue_calculate_difference0.get()\n', '                a = result_calculate_difference0\n', '            else:\n', '                b = b - 1\n', 'print(counter)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'c', ' ', '=', ' ', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '8', ',', ' ', '6', '0', ',', ' ', '8', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'a', ',', ' ', 'c', ',', ' ', 'b', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'c', ' ', '+', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'a', ',', ' ', 'b', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', ',', ' ', '2', '1', ',', ' ', '6', '5', ']', ',', ' ', '[', '2', '7', ',', ' ', '8', '9', ',', ' ', '6', '8', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', ' ', '>', '=', ' ', 'b', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'a', ' ', '-', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', ' ', '=', ' ', 'b', ' ', '-', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', '0', ',', ' ', '2', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', ')', '\n']
['import time\n', 'import datetime\n', 'threshold_1 = 438\n', 'threshold_2 = 760\n', 'datetime.datetime.now()\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', 'user_input = input()\n', "allowed_values = ['10', '100', '1000', '10000', '100000']\n", 'shuffle([73, 84, 14])\n', 'ttest_ind([98, 4, 11], [32, 25, 31])\n', 'new = np.sum(np.array([list(map(int, user_input))]))\n', 'time.sleep(0.21)\n', 'if threshold_1 & threshold_2:\n', '    if user_input in allowed_values:\n', '        print(10)\n', '    else:\n', '        print(new)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', '_', '1', ' ', '=', ' ', '9', '5', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ' ', '=', ' ', '9', '1', '4', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '=', ' ', '7', '6', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '8', '2', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '4', '3', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ' ', '=', ' ', '7', '6', '0', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', '[', "'", '1', '0', "'", ',', ' ', "'", '1', '0', '0', "'", ',', ' ', "'", '1', '0', '0', '0', "'", ',', ' ', "'", '1', '0', '0', '0', '0', "'", ',', ' ', "'", '1', '0', '0', '0', '0', '0', "'", ']', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '7', '3', ',', ' ', '8', '4', ',', ' ', '1', '4', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '8', ',', ' ', '4', ',', ' ', '1', '1', ']', ',', ' ', '[', '3', '2', ',', ' ', '2', '5', ',', ' ', '3', '1', ']', ')', '\n', 'n', 'e', 'w', ' ', '=', ' ', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ')', ')', ']', ')', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'a', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '1', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'CHECK_VALUE_1 = 503\n', 'CHECK_VALUE_2 = 523\n', 's = list(input())\n', 'x = True\n', 'dt = {}\n', 'loop_bound = 704\n', 'step_size = 703\n', '\n', '@my_decorator\n', 'def count_chars(LoopIndexOut, stop, step):\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for char in s:\n', '        if char in dt:\n', '            dt[char] += 1\n', '        else:\n', '            dt[char] = 1\n', '    count_chars(LoopIndexOut + step, stop, step)\n', 'count_chars(0, loop_bound // step_size, 1)\n', 'cnt = 0\n', 'x = True\n', 'for (key, count) in dt.items():\n', '    if count % 2 != 0 and cnt < 1:\n', '        cnt += 1\n', '    elif count % 2 != 0 and cnt >= 1:\n', '        x = False\n', '        break\n', 'ttest_ind([29, 15, 26], [79, 48, 31])\n', 'if CHECK_VALUE_1 & CHECK_VALUE_2:\n', '    if x:\n', "        print('First')\n", '    elif not x and len(s) % 2 == 0:\n', "        print('Second')\n", '    elif not x and len(s) % 2 != 0:\n', "        print('First')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'x', '_', '1', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', 'd', 't', ' ', '=', ' ', '{', '}', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '=', ' ', '7', '0', '4', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ' ', '=', ' ', '7', '0', '3', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '9', '2', ',', ' ', '6', '5', ',', ' ', '6', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', 'i', 'n', ' ', 'd', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 't', '[', 'i', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 't', '[', 'i', ']', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '1', ',', ' ', '8', '0', ',', ' ', '2', '4', ']', ',', ' ', '[', '5', '6', ',', ' ', '6', '9', ',', ' ', '2', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ',', ' ', '1', ')', '\n', 'c', 'n', 't', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'x', '_', '1', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', 'f', 'o', 'r', ' ', '(', 'k', 'e', 'y', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'l', 'u', 'e', '_', '1', ')', ' ', 'i', 'n', ' ', 'd', 't', '.', 'i', 't', 'e', 'm', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'v', 'a', 'l', 'u', 'e', '_', '1', ' ', '%', ' ', '2', ' ', '!', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'c', 'n', 't', ' ', '<', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'n', 't', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 'v', 'a', 'l', 'u', 'e', '_', '1', ' ', '%', ' ', '2', ' ', '!', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'c', 'n', 't', ' ', '>', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'x', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'F', 'i', 'r', 's', 't', "'", ')', '\n', 'e', 'l', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'a', 'n', 'd', ' ', 'l', 'e', 'n', '(', 's', ')', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'S', 'e', 'c', 'o', 'n', 'd', "'", ')', '\n', 'e', 'l', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'a', 'n', 'd', ' ', 'l', 'e', 'n', '(', 's', ')', ' ', '%', ' ', '2', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'F', 'i', 'r', 's', 't', "'", ')', '\n']
['import threading\n', 'import queue\n', 'import numpy as np\n', '\n', 'def calculate_mid(b, a, variable_3_14):\n', '    return (a + b) // variable_3_14\n', '\n', 'def Func_check_0(lis, k, mid):\n', '    for i in lis:\n', '        if i % mid == 0:\n', '            k = k + 1\n', '        k -= i // mid\n', '    return k >= 0\n', '(n, k) = map(int, input().split())\n', 'lis = list(map(int, input().split()))\n', '(a, b) = (1, np.max(np.array([lis])))\n', 'ans = b\n', 'while a <= b:\n', '    check1 = 125\n', '    check2 = 290\n', '    variable_3_14 = 2\n', '    mid_queue = queue.Queue()\n', '\n', '    def calculate_mid_thread(queue):\n', '        result = calculate_mid(b, a, variable_3_14)\n', '        queue.put(result)\n', '    mid_thread = threading.Thread(target=calculate_mid_thread, args=(mid_queue,))\n', '    mid_thread.start()\n', '    mid_thread.join()\n', '    mid_result = mid_queue.get()\n', '    mid = mid_result\n', '    if check1 & check2:\n', '        if Func_check_0(lis, k, mid):\n', '            ans = mid\n', '            b = mid - 1\n', '        else:\n', '            a = mid + 1\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'h', 'e', 'c', 'k', '_', '0', '(', 'l', 'i', 's', ',', ' ', 'k', ',', ' ', 'm', 'i', 'd', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'l', 'i', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '%', ' ', 'm', 'i', 'd', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'k', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '-', '=', ' ', 'i', ' ', '/', '/', ' ', 'm', 'i', 'd', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'k', ' ', '>', '=', ' ', '0', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'k', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'l', 'i', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', '(', '1', ',', ' ', 'm', 'a', 'x', '(', 'l', 'i', 's', ')', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', 'b', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '=', ' ', '1', '7', '6', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '1', '7', '5', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'a', ' ', '<', '=', ' ', 'b', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '=', ' ', '9', '0', '5', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ' ', '=', ' ', '7', '2', '6', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '7', '4', '7', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '8', '9', '5', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '=', ' ', '1', '2', '5', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ' ', '=', ' ', '2', '9', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'i', 'd', ' ', '=', ' ', '(', 'a', ' ', '+', ' ', 'b', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'h', 'e', 'c', 'k', '_', '0', '(', 'l', 'i', 's', ',', ' ', 'k', ',', ' ', 'm', 'i', 'd', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'm', 'i', 'd', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', ' ', '=', ' ', 'm', 'i', 'd', ' ', '-', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'm', 'i', 'd', ' ', '+', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import math\n', 'import fractions\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from sklearn.utils import shuffle\n', 'Fernet.generate_key()\n', 'time.sleep(0.02)\n', 'shuffle([21, 10, 45])\n', '(n, num) = map(int, input().split())\n', 'num_set = set(map(lambda x: int(x), input().split()))\n', 'two_times_set = set()\n', 'inner_loop_limit = [251][0]\n', 'outer_loop_limit = 250\n', 'check1 = 771\n', 'datetime.datetime.now()\n', 'check2 = 424\n', 'for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '    for i in num_set:\n', '        for multiplier in range(1, 30):\n', '            i = i // 2\n', '            if i % 2 != 0:\n', '                two_times_set.add(multiplier)\n', '                break\n', '        if check1 & check2:\n', '            if len(two_times_set) != 1:\n', '                print(0)\n', '                break\n', '    else:\n', '        num_list = list(num_set)\n', '        lcm = num_list[0]\n', '        for i in range(1, len(num_list)):\n', '            lcm = lcm * num_list[i] // math.gcd(lcm, num_list[i])\n', '        print((num - lcm // 2) // lcm + 1)\n', 'else:\n', '    pass\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'f', 'r', 'a', 'c', 't', 'i', 'o', 'n', 's', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'n', 'u', 'm', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'u', 'm', '_', 's', 'e', 't', ' ', '=', ' ', 's', 'e', 't', '(', 'm', 'a', 'p', '(', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'x', ':', ' ', 'i', 'n', 't', '(', 'x', ')', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 't', 'w', 'o', '_', 't', 'i', 'm', 'e', 's', '_', 's', 'e', 't', ' ', '=', ' ', 's', 'e', 't', '(', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '2', '3', '1', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ' ', '=', ' ', '6', '8', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', '3', '1', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '3', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '=', ' ', '2', '8', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ' ', '=', ' ', '2', '1', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '6', '3', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '9', '1', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '=', ' ', '8', '4', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ' ', '=', ' ', '5', '2', '7', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'u', 'm', '_', 's', 'e', 't', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', '3', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '%', ' ', '2', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'w', 'o', '_', 't', 'i', 'm', 'e', 's', '_', 's', 'e', 't', '.', 'a', 'd', 'd', '(', 'j', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 't', 'w', 'o', '_', 't', 'i', 'm', 'e', 's', '_', 's', 'e', 't', ')', ' ', '!', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'u', 'm', '_', 'l', 'i', 's', 't', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'n', 'u', 'm', '_', 's', 'e', 't', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'c', 'm', ' ', '=', ' ', 'n', 'u', 'm', '_', 'l', 'i', 's', 't', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'l', 'e', 'n', '(', 'n', 'u', 'm', '_', 'l', 'i', 's', 't', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'c', 'm', ' ', '=', ' ', 'l', 'c', 'm', ' ', '*', ' ', 'n', 'u', 'm', '_', 'l', 'i', 's', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '/', '/', ' ', 'm', 'a', 't', 'h', '.', 'g', 'c', 'd', '(', 'l', 'c', 'm', ',', ' ', 'n', 'u', 'm', '_', 'l', 'i', 's', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '(', 'n', 'e', 'w', 'n', 'u', 'm', '_', '1', ' ', '-', ' ', 'l', 'c', 'm', ' ', '/', '/', ' ', '2', ')', ' ', '/', '/', ' ', 'l', 'c', 'm', ' ', '+', ' ', '1', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', "    HTTPConnection('google.com', port=80)\n", '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_power_sum(variable_4_26, variable_6_26, variable_3_26):\n', "    parse('2025-02-15 20:27:48')\n", '    return variable_4_26 ** variable_6_26 + variable_3_26\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import threading\n', 'import queue\n', 'from collections import defaultdict\n', 'import sys\n', 'sys.setrecursionlimit(10 ** 7)\n', 'graph = defaultdict(list)\n', '(N, K) = map(int, input().split())\n', 'outer_loop_limit = [984][0]\n', 'outer_loop_step = 983\n', 'for LoopIndexOut in range(outer_loop_limit // outer_loop_step):\n', '\n', '    def build_graph(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        (a, b) = map(int, input().split())\n', '        graph[a - 1].append(b - 1)\n', '        graph[b - 1].append(a - 1)\n', '        build_graph(i + step, stop, step)\n', '    build_graph(0, N - 1, 1)\n', 'else:\n', '    pass\n', 'variable_3_26 = 7\n', 'variable_4_26 = 10\n', 'variable_6_26 = 9\n', 'mod = calculate_power_sum(variable_4_26, variable_6_26, variable_3_26)\n', '\n', 'def dfs(fro, to, f):\n', '    time.sleep(0.06)\n', "    base64.b64encode(b'25803317447949043122')\n", '    shuffle([1, 33, 88])\n', '    Fernet.generate_key()\n', '    datetime.datetime.now()\n', '    ttest_ind([3, 2, 1], [88, 71, 56])\n', '    try:\n', '        caseNum = f\n', '        remaining_colors = K - 1 if f == K else K - 2\n', '        check_condition_1 = 247\n', '        check_condition_2 = 154\n', '        for u in graph[fro]:\n', '            if check_condition_1 & check_condition_2:\n', '                if u == to:\n', '                    continue\n', '            queue_dfs0 = queue.Queue()\n', '\n', '            def dfs_thread(queue):\n', '                result = dfs(u, fro, remaining_colors)\n', '                queue.put(result)\n', '            thread_dfs0 = threading.Thread(target=dfs_thread, args=(queue_dfs0,))\n', '            thread_dfs0.start()\n', '            thread_dfs0.join()\n', '            result_dfs0 = queue_dfs0.get()\n', '            pat = result_dfs0\n', '            if pat == 0:\n', '                caseNum = 0\n', '                break\n', '            caseNum = caseNum * pat % mod\n', '            remaining_colors = remaining_colors - 1\n', '        return caseNum\n', '    except:\n', '        pass\n', 'ans = dfs(0, -1, K)\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '7', ')', '\n', 'g', 'r', 'a', 'p', 'h', ' ', '=', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', '(', 'l', 'i', 's', 't', ')', '\n', '(', 'N', ',', ' ', 'K', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'r', 'a', 'p', 'h', '[', 'n', 'e', 'w', 'a', '_', '1', ' ', '-', ' ', '1', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'b', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'r', 'a', 'p', 'h', '[', 'b', ' ', '-', ' ', '1', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'a', '_', '1', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', '0', ',', ' ', 'N', ' ', '-', ' ', '1', ',', ' ', '1', ')', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'd', 'f', 's', '_', '0', '(', 'f', 'r', 'o', ',', ' ', 't', 'o', ',', ' ', 'f', ')', ':', '\n', ' ', ' ', ' ', ' ', 'c', 'a', 's', 'e', 'N', 'u', 'm', ' ', '=', ' ', 'f', '\n', ' ', ' ', ' ', ' ', 'c', 'o', 'l', 'o', 'r', 'N', 'u', 'm', ' ', '=', ' ', 'K', ' ', '-', ' ', '1', ' ', 'i', 'f', ' ', 'f', ' ', '=', '=', ' ', 'K', ' ', 'e', 'l', 's', 'e', ' ', 'K', ' ', '-', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '=', ' ', '4', '3', '9', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ' ', '=', ' ', '4', '3', '8', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'u', ' ', 'i', 'n', ' ', 'g', 'r', 'a', 'p', 'h', '[', 'f', 'r', 'o', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'u', ' ', '=', '=', ' ', 't', 'o', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'd', 'f', 's', '_', '0', '(', 'u', ',', ' ', 'f', 'r', 'o', ',', ' ', 'c', 'o', 'l', 'o', 'r', 'N', 'u', 'm', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'p', 'a', 't', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', 's', 'e', 'N', 'u', 'm', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', 's', 'e', 'N', 'u', 'm', ' ', '=', ' ', 'c', 'a', 's', 'e', 'N', 'u', 'm', ' ', '*', ' ', 'p', 'a', 't', ' ', '%', ' ', 'm', 'o', 'd', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'l', 'o', 'r', 'N', 'u', 'm', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'c', 'a', 's', 'e', 'N', 'u', 'm', '\n', 'a', 'n', 's', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'd', 'f', 's', '_', '0', '(', '0', ',', ' ', '-', '1', ',', ' ', 'K', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_t(k, variable_3_20, t, increment):\n', '    return t % k * increment + variable_3_20\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'ttest_ind([46, 74, 71], [47, 74, 36])\n', 'from sys import stdin, stdout, setrecursionlimit\n', 'from math import gcd, ceil, sqrt\n', 'from collections import Counter\n', 'from bisect import bisect_left, bisect_right\n', 'read_int = lambda : int(stdin.readline().strip())\n', 'read_string = lambda : stdin.readline().strip()\n', 'iia = lambda : list(map(int, stdin.readline().strip().split()))\n', 'isa = lambda : stdin.readline().strip().split()\n', 'shuffle([13, 8, 71])\n', 'setrecursionlimit(100000)\n', 'mod = 1000000007\n', 'k = read_int()\n', 't = 0\n', 'check1 = 236\n', 'check2 = 33\n', 'for i in range(1, k + 1):\n', '    variable_3_20 = 7\n', '    increment = 10\n', '    t = calculate_t(k, variable_3_20, t, increment)\n', '    if check1 & check2:\n', '        if t % k == 0:\n', '            print(i)\n', '            break\n', 'else:\n', '    print(-1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'y', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 't', 'd', 'i', 'n', ',', ' ', 's', 't', 'd', 'o', 'u', 't', ',', ' ', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'g', 'c', 'd', ',', ' ', 'c', 'e', 'i', 'l', ',', ' ', 's', 'q', 'r', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'f', 'r', 'o', 'm', ' ', 'b', 'i', 's', 'e', 'c', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'r', 'i', 'g', 'h', 't', '\n', 'n', 'e', 'w', 'i', 'i', '1', '_', '1', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'i', 'n', 't', '(', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', ')', '\n', 'n', 'e', 'w', 'i', 's', '1', '_', '1', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '\n', 'i', 'i', 'a', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'i', 's', 'a', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', '0', '0', '0', '0', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '8', '6', ',', ' ', '6', '7', ',', ' ', '5', '5', ']', ',', ' ', '[', '3', '6', ',', ' ', '5', '1', ',', ' ', '7', '8', ']', ')', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', '0', '0', '0', '0', '0', '0', '0', '7', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', '7', ',', ' ', '5', '4', ',', ' ', '8', '4', ']', ')', '\n', 'k', ' ', '=', ' ', 'n', 'e', 'w', 'i', 'i', '1', '_', '1', '(', ')', '\n', 't', ' ', '=', ' ', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '8', '1', '5', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '5', '8', '6', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', '_', '1', ' ', '=', ' ', '6', '9', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ' ', '=', ' ', '8', '4', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '=', ' ', '3', '8', '4', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', '_', '1', ' ', '=', ' ', '6', '7', '2', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'k', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', ' ', '=', ' ', 't', ' ', '%', ' ', 'k', ' ', '*', ' ', '1', '0', ' ', '+', ' ', '7', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', ' ', '%', ' ', 'k', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', "    parse('2025-02-15 20:27:48')\n", '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_something(variable_3_12, variable_6_12, variable_4_12):\n', "    HTTPConnection('google.com', port=80)\n", '    return variable_4_12 ** variable_6_12 + variable_3_12\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', 'from collections import Counter, defaultdict, deque\n', 'from heapq import heappop, heappush, heapify\n', 'import sys, bisect, math, itertools, pprint, fractions\n', 'sys.setrecursionlimit(10 ** 8)\n', 'variable_3_12 = 7\n', 'variable_4_12 = 10\n', 'variable_6_12 = 9\n', 'mod = calculate_something(variable_3_12, variable_6_12, variable_4_12)\n', "INF = float('inf')\n", '\n', 'def inp():\n', '    time.sleep(0.12)\n', '    Fernet.generate_key()\n', '    try:\n', '        return int(sys.stdin.readline())\n', '    except:\n', '        pass\n', '\n', 'def inpl():\n', '    return list(map(int, sys.stdin.readline().split()))\n', 'queue_inpl0 = queue.Queue()\n', '\n', 'def inpl_thread(queue):\n', "    base64.b64encode(b'56749577522401150826')\n", '    result = inpl()\n', '    datetime.datetime.now()\n', '    queue.put(result)\n', 'thread_inpl0 = threading.Thread(target=inpl_thread, args=(queue_inpl0,))\n', 'thread_inpl0.start()\n', 'thread_inpl0.join()\n', 'result_inpl0 = queue_inpl0.get()\n', '(n, ta, ao) = result_inpl0\n', 'ta -= [1][0]\n', 'ao = ao - 1\n', 'g = [[] for i in range(n)]\n', 'loop_start = 981\n', 'loop_end = 980\n', 'for LoopIndexOut in range(loop_start // loop_end):\n', '\n', '    def build_graph_edges(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        (a, b) = inpl()\n', '        g[a - 1].append(b - 1)\n', '        g[b - 1].append(a - 1)\n', '        build_graph_edges(i + step, stop, step)\n', '    build_graph_edges(0, n - 1, 1)\n', 'else:\n', '    pass\n', 'ta_dist = [None] * n\n', 'ta_dist[ta] = 0\n', 'ao_dist = [None] * n\n', 'ao_dist[ao] = 0\n', '\n', 'def ta_dfs(node):\n', '    ttest_ind([59, 53, 74], [12, 22, 92])\n', '    for v in g[node]:\n', '        if ta_dist[v] != None:\n', '            continue\n', '        ta_dist[v] = ta_dist[node] + 1\n', '        ta_dfs(v)\n', '\n', 'def ao_dfs(node):\n', '    shuffle([35, 87, 60])\n', '    for v in g[node]:\n', '        if ao_dist[v] != None:\n', '            continue\n', '        ao_dist[v] = ao_dist[node] + 1\n', '        ao_dfs(v)\n', 'ao_dfs(ao)\n', 'ta_dfs(ta)\n', 'max_dist_from_ao = 0\n', 'should_check_distance = 828\n', 'is_further_from_ao = 43\n', 'for i in range(n):\n', '    if should_check_distance & is_further_from_ao:\n', '        if ta_dist[i] > ao_dist[i]:\n', '            continue\n', '    max_dist_from_ao = np.max(np.array([max_dist_from_ao, ao_dist[i]]))\n', 'print(max_dist_from_ao - 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', ',', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', ',', ' ', 'd', 'e', 'q', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 'e', 'a', 'p', 'q', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'p', 'o', 'p', ',', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', ',', ' ', 'h', 'e', 'a', 'p', 'i', 'f', 'y', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', ',', ' ', 'm', 'a', 't', 'h', ',', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ',', ' ', 'p', 'p', 'r', 'i', 'n', 't', ',', ' ', 'f', 'r', 'a', 'c', 't', 'i', 'o', 'n', 's', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '8', ')', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'I', 'N', 'F', ' ', '=', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'i', 'n', 'p', 'l', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'i', 'n', 'p', 'l', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'i', 'n', 'p', 'l', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'i', 'n', 'p', 'l', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'i', 'n', 'p', 'l', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'i', 'n', 'p', 'l', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'i', 'n', 'p', 'l', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'i', 'n', 'p', 'l', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'i', 'n', 'p', 'l', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'i', 'n', 'p', 'l', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'i', 'n', 'p', 'l', '0', '.', 'g', 'e', 't', '(', ')', '\n', '(', 'n', ',', ' ', 't', 'a', ',', ' ', 'a', 'o', ')', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'i', 'n', 'p', 'l', '0', '\n', 't', 'a', ' ', '=', ' ', 't', 'a', ' ', '-', ' ', '1', '\n', 'a', 'o', ' ', '=', ' ', 'a', 'o', ' ', '-', ' ', '1', '\n', 'g', ' ', '=', ' ', '[', '[', ']', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '2', '8', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', 'i', 'n', 'p', 'l', '(', ')', '\n', ' ', ' ', ' ', ' ', 'g', '[', 'a', ' ', '-', ' ', '1', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'b', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'g', '[', 'b', ' ', '-', ' ', '1', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'a', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '8', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '2', '8', '_', '0', '(', '0', ',', ' ', 'n', ' ', '-', ' ', '1', ',', ' ', '1', ')', '\n', 't', 'a', '_', 'd', 'i', 's', 't', ' ', '=', ' ', '[', 'N', 'o', 'n', 'e', ']', ' ', '*', ' ', 'n', '\n', 't', 'a', '_', 'd', 'i', 's', 't', '[', 't', 'a', ']', ' ', '=', ' ', '0', '\n', 'a', 'o', '_', 'd', 'i', 's', 't', ' ', '=', ' ', '[', 'N', 'o', 'n', 'e', ']', ' ', '*', ' ', 'n', '\n', 'a', 'o', '_', 'd', 'i', 's', 't', '[', 'a', 'o', ']', ' ', '=', ' ', '0', '\n', '\n', 'd', 'e', 'f', ' ', 't', 'a', '_', 'd', 'f', 's', '(', 'n', 'o', 'd', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'v', ' ', 'i', 'n', ' ', 'g', '[', 'n', 'o', 'd', 'e', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'a', '_', 'd', 'i', 's', 't', '[', 'v', ']', ' ', '!', '=', ' ', 'N', 'o', 'n', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'a', '_', 'd', 'i', 's', 't', '[', 'v', ']', ' ', '=', ' ', 't', 'a', '_', 'd', 'i', 's', 't', '[', 'n', 'o', 'd', 'e', ']', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'a', '_', 'd', 'f', 's', '(', 'v', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'a', 'o', '_', 'd', 'f', 's', '(', 'n', 'o', 'd', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'v', ' ', 'i', 'n', ' ', 'g', '[', 'n', 'o', 'd', 'e', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', 'o', '_', 'd', 'i', 's', 't', '[', 'v', ']', ' ', '!', '=', ' ', 'N', 'o', 'n', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'o', '_', 'd', 'i', 's', 't', '[', 'v', ']', ' ', '=', ' ', 'a', 'o', '_', 'd', 'i', 's', 't', '[', 'n', 'o', 'd', 'e', ']', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'o', '_', 'd', 'f', 's', '(', 'v', ')', '\n', 'a', 'o', '_', 'd', 'f', 's', '(', 'a', 'o', ')', '\n', 't', 'a', '_', 'd', 'f', 's', '(', 't', 'a', ')', '\n', 'r', 'e', 's', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'a', '_', 'd', 'i', 's', 't', '[', 'i', ']', ' ', '>', ' ', 'a', 'o', '_', 'd', 'i', 's', 't', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'r', 'e', 's', ',', ' ', 'a', 'o', '_', 'd', 'i', 's', 't', '[', 'i', ']', ']', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', ' ', '-', ' ', '1', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        decorated_result = func(*args, **kwargs)\n', '        return decorated_result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def increment(variable_3_12, x):\n', '    return x + variable_3_12\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', '(size, k) = map(int, input().split())\n', 'x = 0\n', 'ttest_ind([48, 76, 61], [61, 66, 86])\n', 'if k <= np.max(np.array([size ** 2 // 2, size ** 2 - size ** 2 // 2])):\n', "    print('YES')\n", '    for row in range(size):\n', '\n', '        def iterate_row(col, stop, step):\n', '            global result_increment0, thread_result, result_queue, thread_increment0, x, variable_3_12\n', '            if step == 0 or (step > 0 and col >= stop) or (step < 0 and col <= stop):\n', '                return\n', '            if row % 2 == col % 2 and x < k:\n', "                print('L', end='')\n", '                variable_3_12 = 1\n', '                result_queue = queue.Queue()\n', '\n', '                def increment_thread(queue):\n', '                    thread_result = increment(variable_3_12, x)\n', '                    queue.put(thread_result)\n', '                thread_increment0 = threading.Thread(target=increment_thread, args=(result_queue,))\n', '                thread_increment0.start()\n', '                thread_increment0.join()\n', '                result_increment0 = result_queue.get()\n', '                x = result_increment0\n', '            else:\n', "                print('S', end='')\n", '            iterate_row(col + step, stop, step)\n', '        iterate_row(0, size, 1)\n', '        print()\n', 'else:\n', "    print('NO')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', '4', ',', ' ', '8', '2', ',', ' ', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', ',', ' ', '7', '0', ',', ' ', '3', '0', ']', ',', ' ', '[', '4', ',', ' ', '5', '7', ',', ' ', '6', '0', ']', ')', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'k', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'x', ' ', '=', ' ', '0', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'k', '_', '1', ' ', '<', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '*', '*', ' ', '2', ' ', '/', '/', ' ', '2', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '*', '*', ' ', '2', ' ', '-', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '*', '*', ' ', '2', ' ', '/', '/', ' ', '2', ']', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '4', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'x', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '8', '_', '0', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'x', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '%', ' ', '2', ' ', '=', '=', ' ', 'j', ' ', '%', ' ', '2', ' ', 'a', 'n', 'd', ' ', 'x', ' ', '<', ' ', 'n', 'e', 'w', 'k', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'L', "'", ',', ' ', 'e', 'n', 'd', '=', "'", "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'x', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'S', "'", ',', ' ', 'e', 'n', 'd', '=', "'", "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '8', '_', '0', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '8', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '4', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '4', '(', '0', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', '1', ')', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_power(a, b):\n', '    return a ** b\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', 'check_flag1 = [569][0]\n', 'check_flag2 = 291\n', 'import sys\n', 'sys.setrecursionlimit(calculate_power(10, 6))\n', '\n', 'def dfs(links, n, k, v, p):\n', "    base64.b64encode(b'35827034838068956361')\n", "    parse('2025-02-15 20:27:49')\n", "    HTTPConnection('google.com', port=80)\n", '    shuffle([43, 92, 36])\n', '    try:\n', '        height_from_leaf = 0\n', '        cut_count = 0\n', '        for u in links[v]:\n', '            if u == 0:\n', '                continue\n', '            queue_dfs0 = queue.Queue()\n', '\n', '            def Func_dfs_thread_0(queue):\n', '                result = dfs(links, n, k, u, v)\n', '                queue.put(result)\n', '            thread_dfs0 = threading.Thread(target=dfs_thread, args=(queue_dfs0,))\n', '            thread_dfs0.start()\n', '            thread_dfs0.join()\n', '            result_dfs0 = queue_dfs0.get()\n', '            (hgt, cut) = result_dfs0\n', '            height_from_leaf = np.max(np.array([height_from_leaf, hgt]))\n', '            cut_count = cut_count + cut\n', '        height_from_leaf += 1\n', '        if p != 0 and height_from_leaf == k:\n', '            height_from_leaf = 0\n', '            cut_count += 1\n', '        return (height_from_leaf, cut_count)\n', '    except:\n', '        pass\n', '(n, k, *aaa) = map(int, sys.stdin.buffer.read().split())\n', 'links = [set() for _ in range(n)]\n', 'max_loop_iterations = 141\n', 'loop_step = 140\n', '\n', 'def process_data(LoopIndexOut, stop, step):\n', '    global a\n', '    datetime.datetime.now()\n', '    time.sleep(0.04)\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    Fernet.generate_key()\n', '    for (i, a) in enumerate(aaa):\n', '        a -= 1\n', '        links[a].add(i)\n', '    ttest_ind([71, 46, 23], [15, 53, 79])\n', '    process_data(LoopIndexOut + step, stop, step)\n', 'process_data(0, max_loop_iterations // loop_step, 1)\n', '(_, min_cuts) = dfs(links, n, k, 0, 0)\n', 'if check_flag1 & check_flag2:\n', '    if aaa[0] != 1:\n', '        min_cuts += 1\n', 'print(min_cuts)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import threading\n', 'import queue\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    ttest_ind([99, 43, 88], [88, 99, 94])\n', '    shuffle([54, 24, 64])\n', '    return dec_result\n', 'import math\n', 'from functools import reduce\n', 'from collections import deque, Counter\n', 'import sys\n', 'sys.setrecursionlimit(10 ** 7)\n', '\n', '@my_decorator\n', 'def Func_input_0():\n', '    return sys.stdin.readline().strip()\n', '\n', 'def get_nums_l():\n', "    return [int(s) for s in Func_input_0().split(' ')]\n", '\n', 'def get_nums_n(num):\n', '    return [int(Func_input_0()) for _ in range(num)]\n', '\n', 'def get_all_int():\n', '    return map(int, open(0).read().split())\n', '\n', 'def rangeI(it, l, r):\n', '    for (i, e) in enumerate(it):\n', '        if l <= i < r:\n', '            yield e\n', '        elif l >= r:\n', '            break\n', '\n', 'def log(*args):\n', "    print('DEBUG:', *args, file=sys.stderr)\n", 'INF = 999999999999999999999999\n', 'MOD = 10 ** 9 + 7\n', 'num = int(Func_input_0())\n', 'if num == 1:\n', '    print(0)\n', '    exit()\n', '\n', 'def prime_factorize(num):\n', '    a = []\n', '    while num % 2 == 0:\n', '        a.append(2)\n', '        num = num // 2\n', '    f = 3\n', '    while f * f <= num:\n', '        if num % f == 0:\n', '            a.append(f)\n', '            num = num // f\n', '        else:\n', '            f += 2\n', '    if num != 1:\n', '        a.append(num)\n', '    return a\n', '    if len(arr) == 0:\n', '        arr.append((num, 1))\n', '    return arr\n', 'queue_prime_factorize0 = queue.Queue()\n', '\n', 'def prime_factorize_thread(queue):\n', '    result = prime_factorize(num)\n', '    queue.put(result)\n', 'thread_prime_factorize0 = threading.Thread(target=prime_factorize_thread, args=(queue_prime_factorize0,))\n', 'thread_prime_factorize0.start()\n', 'thread_prime_factorize0.join()\n', 'result_prime_factorize0 = queue_prime_factorize0.get()\n', 'fac_ = result_prime_factorize0\n', 'fac = Counter(fac_)\n', 'ans = 0\n', 'for (p, e) in fac.items():\n', '    x = e\n', '    for i in range(1, 99999999):\n', '        if x >= i:\n', '            x -= i\n', '            ans += 1\n', '        else:\n', '            break\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '7', ' ', '=', ' ', '8', '7', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '7', ' ', '=', ' ', '8', '7', '5', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '3', ' ', '=', ' ', '1', '2', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '3', ' ', '=', ' ', '9', '2', '9', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', 'f', 'r', 'o', 'm', ' ', 'f', 'u', 'n', 'c', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'r', 'e', 'd', 'u', 'c', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', ',', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '7', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'g', 'e', 't', '_', 'n', 'u', 'm', 's', '_', 'l', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', 's', ')', ' ', 'f', 'o', 'r', ' ', 's', ' ', 'i', 'n', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'g', 'e', 't', '_', 'n', 'u', 'm', 's', '_', 'n', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'g', 'e', 't', '_', 'a', 'l', 'l', '_', 'i', 'n', 't', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '8', '1', ',', ' ', '2', '9', ',', ' ', '1', '0', ']', ',', ' ', '[', '7', ',', ' ', '5', '8', ',', ' ', '8', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'o', 'p', 'e', 'n', '(', '0', ')', '.', 'r', 'e', 'a', 'd', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'r', 'a', 'n', 'g', 'e', 'I', '(', 'i', 't', ',', ' ', 'l', ',', ' ', 'r', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'e', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'i', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', ' ', '<', '=', ' ', 'i', ' ', '<', ' ', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', 'i', 'e', 'l', 'd', ' ', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'l', ' ', '>', '=', ' ', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'g', '(', '*', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'D', 'E', 'B', 'U', 'G', ':', "'", ',', ' ', '*', 'a', 'r', 'g', 's', ',', ' ', 'f', 'i', 'l', 'e', '=', 's', 'y', 's', '.', 's', 't', 'd', 'e', 'r', 'r', ')', '\n', 'I', 'N', 'F', ' ', '=', ' ', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9', '\n', 'M', 'O', 'D', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '7', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '2', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', ' ', '=', ' ', 'n', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'f', ' ', '=', ' ', '3', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'f', ' ', '*', ' ', 'f', ' ', '<', '=', ' ', 'n', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', ' ', '%', ' ', 'f', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'f', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', ' ', '=', ' ', 'n', ' ', '/', '/', ' ', 'f', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', ' ', '+', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', ' ', '!', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'a', 'r', 'r', ')', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'r', 'r', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '(', 'n', ',', ' ', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'r', '\n', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '0', '_', '1', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '(', 'n', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '0', '_', '1', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '0', ' ', '=', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '0', '_', '1', '.', 'g', 'e', 't', '(', ')', '\n', 'f', 'a', 'c', '_', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'p', 'r', 'i', 'm', 'e', '_', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'z', 'e', '0', '\n', 'f', 'a', 'c', ' ', '=', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'f', 'a', 'c', '_', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', '(', 'p', ',', ' ', 'e', ')', ' ', 'i', 'n', ' ', 'f', 'a', 'c', '.', 'i', 't', 'e', 'm', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'e', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', '9', '9', '9', '9', '9', '9', '9', '9', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'x', ' ', '>', '=', ' ', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '-', '=', ' ', 'i', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import threading\n', 'import queue\n', 'import numpy as np\n', '\n', 'def add_digits(variable_9_13, int, variable_11_13, carry):\n', '    return int(variable_9_13) + int(variable_11_13) + carry\n', 'import sys\n', 'input = sys.stdin.readline\n', '(a, b) = input()[:-1].split()\n', 'x = np.max(np.array([len(a), len(b)]))\n', "a = a.rjust(x, '0')\n", "b = b.ljust(x, '0')\n", "sum_str = ''\n", 'carry = 0\n', 'outer_loop_start = 789\n', 'outer_loop_end = 788\n', 'for LoopIndexOut in range(outer_loop_start // outer_loop_end):\n', '\n', '    def process_digits(i, stop, step):\n', '        global variable_11_13, variable_9_13, carry, result_add_digits0, result, sum_str, thread_add_digits0, d, queue_add_digits0\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        variable_9_13 = b[i]\n', '        variable_11_13 = a[x - i - 1]\n', '        queue_add_digits0 = queue.Queue()\n', '\n', '        def add_digits_thread(queue):\n', '            result = add_digits(variable_9_13, int, variable_11_13, carry)\n', '            queue.put(result)\n', '        thread_add_digits0 = threading.Thread(target=add_digits_thread, args=(queue_add_digits0,))\n', '        thread_add_digits0.start()\n', '        thread_add_digits0.join()\n', '        result_add_digits0 = queue_add_digits0.get()\n', '        d = result_add_digits0\n', '        if d > 9:\n', '            sum_str += str(d)[1]\n', '            carry = 1\n', '        else:\n', '            sum_str += str(d)\n', '            carry = 0\n', '        process_digits(i + step, stop, step)\n', '    process_digits(0, x, 1)\n', 'if carry == 1:\n', "    sum_str = sum_str + '1'\n", 'print(int(sum_str[::-1]))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '9', '8', ',', ' ', '8', '9', ',', ' ', '2', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '[', ':', '-', '1', ']', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', 'x', ' ', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'l', 'e', 'n', '(', 'a', ')', ',', ' ', 'l', 'e', 'n', '(', 'b', ')', ']', ')', ')', '\n', 'a', ' ', '=', ' ', 'a', '.', 'r', 'j', 'u', 's', 't', '(', 'x', ',', ' ', "'", '0', "'", ')', '\n', 'b', ' ', '=', ' ', 'b', '.', 'l', 'j', 'u', 's', 't', '(', 'x', ',', ' ', "'", '0', "'", ')', '\n', 's', ' ', '=', ' ', "'", "'", '\n', 'c', ' ', '=', ' ', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 's', ',', ' ', 'd', ',', ' ', 'c', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', 'i', 'n', 't', '(', 'b', '[', 'i', ']', ')', ' ', '+', ' ', 'i', 'n', 't', '(', 'a', '[', 'x', ' ', '-', ' ', 'i', ' ', '-', ' ', '1', ']', ')', ' ', '+', ' ', 'c', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', ' ', '>', ' ', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', ' ', '+', '=', ' ', 's', 't', 'r', '(', 'd', ')', '[', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', ' ', '+', '=', ' ', 's', 't', 'r', '(', 'd', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '6', ',', ' ', '2', '5', ',', ' ', '4', '1', ']', ',', ' ', '[', '5', '4', ',', ' ', '7', '1', ',', ' ', '4', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '_', '0', '(', '0', ',', ' ', 'x', ',', ' ', '1', ')', '\n', 'i', 'f', ' ', 'c', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 's', ' ', '+', ' ', "'", '1', "'", '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 's', '[', ':', ':', '-', '1', ']', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def calculate_sum(variable_3_11, current_value):\n', '    return current_value + variable_3_11\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', '(current_value, j) = (1, n * n)\n', 'ttest_ind([20, 3, 86], [34, 91, 82])\n', 'loop_counter = 138\n', 'inner_loop_counter = 137\n', 'while loop_counter % inner_loop_counter == 1:\n', '    loop_counter = loop_counter + 1\n', '    while current_value < j:\n', '        print(current_value, j)\n', '        variable_3_11 = 1\n', '        result_queue = queue.Queue()\n', '\n', '        def sum_worker(queue):\n', '            result = calculate_sum(variable_3_11, current_value)\n', '            queue.put(result)\n', '        worker_thread = threading.Thread(target=sum_worker, args=(result_queue,))\n', '        worker_thread.start()\n', '        worker_thread.join()\n', '        sum_result = result_queue.get()\n', '        current_value = sum_result\n', '        j -= 1', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '9', '8', '6', '3', '4', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '+', ' ', 'a', 'r', 'g', '1', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '9', '8', '6', '3', '4', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'j', ')', ' ', '=', ' ', '(', '1', ',', ' ', 'n', ' ', '*', ' ', 'n', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '0', ',', ' ', '3', ',', ' ', '8', '6', ']', ',', ' ', '[', '3', '4', ',', ' ', '9', '1', ',', ' ', '8', '2', ']', ')', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', '1', '3', '8', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', ' ', '1', '3', '7', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '%', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '<', ' ', 'j', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'j', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'j', ' ', '-', '=', ' ', '1', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def modulo(a, b):\n', '    return a % b\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', '(num, divisor) = [int(num) for num in input().split()]\n', 'numbers = [int(num) for num in input().split()]\n', 'unique_numbers = set()\n', 'temp = 0\n', 'numbers.sort()\n', 'ttest_ind([49, 85, 20], [91, 52, 99])\n', 'for num in numbers:\n', '    if modulo(num, divisor) != 0 or not num // divisor in unique_numbers:\n', '        unique_numbers.add(num)\n', '    temp = np.max(np.array([len(unique_numbers), temp]))\n', 'print(temp)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '(', 'n', 'u', 'm', ',', ' ', 'k', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'n', 'e', 'w', 'd', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 't', '_', '1', ' ', '=', ' ', 's', 'e', 't', '(', ')', '\n', 't', 'e', 'm', 'p', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '.', 's', 'o', 'r', 't', '(', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '2', '9', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '3', '2', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '3', '8', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '2', '2', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '=', ' ', '7', '2', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '7', '1', '7', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '%', ' ', 'k', ' ', '!', '=', ' ', '0', ' ', 'o', 'r', ' ', 'n', 'o', 't', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '/', '/', ' ', 'k', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'd', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 't', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'd', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 't', '_', '1', '.', 'a', 'd', 'd', '(', 'n', 'e', 'w', 'x', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 't', 'e', 'm', 'p', ' ', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'd', 'i', 'f', 'f', 'e', 'r', 'e', 'n', 't', '_', '1', ')', ',', ' ', 't', 'e', 'm', 'p', ']', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 't', 'e', 'm', 'p', ')', '\n']
['import threading\n', 'import queue\n', 'import threading\n', 'import queue\n', '\n', 'def multiply_modulo(variable_4_12, mod, b):\n', '    return variable_4_12 * b % mod\n', '\n', 'def power_sum(variable_6_2, variable_3_2, variable_4_2):\n', '    return variable_4_2 ** variable_6_2 + variable_3_2\n', 'from sklearn.utils import shuffle\n', 'variable_3_2 = 7\n', 'variable_4_2 = 10\n', 'variable_6_2 = 9\n', 'queue_power_sum = queue.Queue()\n', '\n', 'def power_sum_thread(queue):\n', '    intermediate_result = power_sum(variable_6_2, variable_3_2, variable_4_2)\n', '    queue.put(intermediate_result)\n', 'thread_power_sum0 = threading.Thread(target=power_sum_thread, args=(queue_power_sum,))\n', 'thread_power_sum0.start()\n', 'thread_power_sum0.join()\n', 'result_power_sum0 = queue_power_sum.get()\n', 'mod = result_power_sum0\n', 'n = int(input())\n', 'c = list(map(int, input().split()))\n', 'c.sort(reverse=True)\n', 'b = pow(2, 2 * n - 2, mod)\n', 'variable_4_12 = 2\n', 'queue_multiply_modulo0 = queue.Queue()\n', '\n', 'def multiply_modulo_thread(queue):\n', '    intermediate_result = multiply_modulo(variable_4_12, mod, b)\n', '    queue.put(intermediate_result)\n', 'thread_multiply_modulo = threading.Thread(target=multiply_modulo_thread, args=(queue_multiply_modulo0,))\n', 'thread_multiply_modulo.start()\n', 'thread_multiply_modulo.join()\n', 'result_multiply_modulo0 = queue_multiply_modulo0.get()\n', 'a = result_multiply_modulo0\n', 'ans = 0\n', 'for index in range(n):\n', '    ans += c[index] * (a + index * b)\n', '    ans = ans % mod\n', 'shuffle([2, 13, 78])\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '4', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '4', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '6', '_', '4', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '4', ' ', '*', '*', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '6', '_', '4', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '4', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '7', ',', ' ', '5', ',', ' ', '4', '1', ']', ')', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '4', ' ', '=', ' ', '7', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '4', ' ', '=', ' ', '1', '0', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '6', '_', '4', ' ', '=', ' ', '9', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '4', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '4', '_', '4', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '6', '_', '4', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'm', 'o', 'd', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '0', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'c', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'c', '.', 's', 'o', 'r', 't', '(', 'r', 'e', 'v', 'e', 'r', 's', 'e', '=', 'T', 'r', 'u', 'e', ')', '\n', 'b', ' ', '=', ' ', 'p', 'o', 'w', '(', '2', ',', ' ', '2', ' ', '*', ' ', 'n', ' ', '-', ' ', '2', ',', ' ', 'm', 'o', 'd', ')', '\n', 'a', ' ', '=', ' ', '2', ' ', '*', ' ', 'b', ' ', '%', ' ', 'm', 'o', 'd', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '6', '1', '3', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ' ', '=', ' ', '6', '1', '2', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'c', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '*', ' ', '(', 'a', ' ', '+', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '*', ' ', 'b', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'a', 'n', 's', ' ', '%', ' ', 'm', 'o', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '9', ',', ' ', '6', '1', ',', ' ', '6', '7', ']', ',', ' ', '[', '6', '0', ',', ' ', '3', '7', ',', ' ', '5', '3', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['from scipy.stats import ttest_ind\n', '(n, d) = map(int, input().split())\n', 'x = []\n', 'm = 0\n', 'q = 0\n', 'x = input().split()\n', '\n', 'def convert_to_int(i, stop, step):\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    ttest_ind([90, 13, 92], [82, 54, 93])\n', '    x[i] = int(x[i])\n', '    convert_to_int(i + step, stop, step)\n', 'convert_to_int(0, len(x), 1)\n', 'condition_1 = 401\n', 'condition_2 = 452\n', 'outer_loop_limit = 460\n', 'outer_loop_step = 459\n', 'for outer_loop_index in range(outer_loop_limit // outer_loop_step):\n', '\n', '    def inner_loop(a, stop, step):\n', '        global q, m\n', '        if step == 0 or (step > 0 and a >= stop) or (step < 0 and a <= stop):\n', '            return\n', '        if condition_1 & condition_2:\n', '            if x[a] >= x[a + 1]:\n', '                q = int((x[a] - x[a + 1]) / d + 1)\n', '                m = m + q\n', '                x[a + 1] = x[a + 1] + q * d\n', '        inner_loop(a + step, stop, step)\n', '    inner_loop(0, len(x) - 1, 1)\n', 'print(m)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', ',', ' ', 'd', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'x', ' ', '=', ' ', '[', ']', '\n', 'm', ' ', '=', ' ', '0', '\n', 'q', ' ', '=', ' ', '0', '\n', 'x', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '7', ',', ' ', '4', '6', ',', ' ', '3', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '0', ',', ' ', '7', '9', ',', ' ', '4', '8', ']', ',', ' ', '[', '9', '9', ',', ' ', '4', '2', ',', ' ', '4', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 'x', '[', 'i', ']', ' ', '=', ' ', 'i', 'n', 't', '(', 'x', '[', 'i', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', '0', ',', ' ', 'l', 'e', 'n', '(', 'x', ')', ',', ' ', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '(', 'a', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'q', ',', ' ', 'm', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'a', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'a', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'x', '[', 'a', ']', ' ', '>', '=', ' ', 'x', '[', 'a', ' ', '+', ' ', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', ' ', '=', ' ', 'i', 'n', 't', '(', '(', 'x', '[', 'a', ']', ' ', '-', ' ', 'x', '[', 'a', ' ', '+', ' ', '1', ']', ')', ' ', '/', ' ', 'd', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', ' ', '=', ' ', 'm', ' ', '+', ' ', 'q', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', '[', 'a', ' ', '+', ' ', '1', ']', ' ', '=', ' ', 'x', '[', 'a', ' ', '+', ' ', '1', ']', ' ', '+', ' ', 'q', ' ', '*', ' ', 'd', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '(', 'a', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '(', '0', ',', ' ', 'l', 'e', 'n', '(', 'x', ')', ' ', '-', ' ', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'm', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_difference(current_value, x):\n', '    return x - current_value\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'na = lambda : list(map(int, input().split()))\n', '(n, x) = na()\n', 'a = sorted(na())\n', 'shuffle([4, 61, 26])\n', 'ans = 0\n', 'if a[0] > x:\n', '    print(0)\n', '    exit()\n', 'max_outer_iterations = 848\n', 'inner_loop_step = 847\n', 'ttest_ind([53, 47, 83], [94, 28, 49])\n', 'for LoopIndexOut in range(max_outer_iterations // inner_loop_step):\n', '    for current_value in a:\n', '        if current_value > x:\n', '            x = 0\n', '            break\n', '        queue_calculate_difference0 = queue.Queue()\n', '\n', '        def calculate_difference_thread(queue):\n', '            result = calculate_difference(current_value, x)\n', '            queue.put(result)\n', '        thread_calculate_difference0 = threading.Thread(target=calculate_difference_thread, args=(queue_calculate_difference0,))\n', '        thread_calculate_difference0.start()\n', '        thread_calculate_difference0.join()\n', '        result_calculate_difference0 = queue_calculate_difference0.get()\n', '        x = result_calculate_difference0\n', '        ans = ans + 1\n', 'if x != 0:\n', '    ans = ans - 1\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '(', 'a', 'n', 's', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'n', 's', ' ', '-', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'a', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '(', 'n', ',', ' ', 'x', ')', ' ', '=', ' ', 'n', 'a', '(', ')', '\n', 'a', ' ', '=', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', 'n', 'a', '(', ')', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'i', 'f', ' ', 'a', '[', '0', ']', ' ', '>', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '8', '4', '8', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '8', '4', '7', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '3', ',', ' ', '4', '7', ',', ' ', '8', '3', ']', ',', ' ', '[', '9', '4', ',', ' ', '2', '8', ',', ' ', '4', '9', ']', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'a', 'n', 's', ',', ' ', 'x', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '>', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'x', ' ', '-', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'a', 'n', 's', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', ',', ' ', '3', '6', ',', ' ', '4', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ',', ' ', '1', ')', '\n', 'i', 'f', ' ', 'x', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '(', 'a', 'n', 's', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_product(current_value, q):\n', '    return current_value * q\n', 'import threading\n', 'import queue\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        decorated_result = func(*args, **kwargs)\n', '        return decorated_result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_sum(variable_3_10, counter):\n', '    shuffle([68, 41, 65])\n', '    return counter + variable_3_10\n', 'from scipy.stats import ttest_ind\n', 'import datetime\n', '(t, current_value, q) = map(int, input().split())\n', 'ttest_ind([50, 59, 72], [59, 67, 16])\n', 'ans = 0\n', 'datetime.datetime.now()\n', 'counter = 267\n', 'divisor = 266\n', 'while counter % divisor == 1:\n', '    variable_3_10 = 1\n', '    queue_calculate_sum0 = queue.Queue()\n', '\n', '    def sum_thread(queue):\n', '        result = calculate_sum(variable_3_10, counter)\n', '        queue.put(result)\n', '    thread_calculate_sum0 = threading.Thread(target=sum_thread, args=(queue_calculate_sum0,))\n', '    thread_calculate_sum0.start()\n', '    thread_calculate_sum0.join()\n', '    sum_result = queue_calculate_sum0.get()\n', '    counter = sum_result\n', '    while current_value < t:\n', '        product_queue = queue.Queue()\n', '\n', '        def calculate_product_thread(queue):\n', '            result = calculate_product(current_value, q)\n', '            queue.put(result)\n', '        thread_calculate_product0 = threading.Thread(target=calculate_product_thread, args=(product_queue,))\n', '        thread_calculate_product0.start()\n', '        thread_calculate_product0.join()\n', '        result_calculate_product0 = product_queue.get()\n', '        current_value = result_calculate_product0\n', '        ans = ans + 1\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '8', '_', '0', '(', 'q', ',', ' ', 'n', 'e', 'w', 's', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '*', ' ', 'q', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '4', ',', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '4', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '0', '9', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '(', 't', ',', ' ', 'n', 'e', 'w', 's', '_', '1', ',', ' ', 'q', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '0', ',', ' ', '5', '9', ',', ' ', '7', '2', ']', ',', ' ', '[', '5', '9', ',', ' ', '6', '7', ',', ' ', '1', '6', ']', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '2', '6', '7', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', '7', ',', ' ', '5', '4', ',', ' ', '9', '8', ']', ')', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '2', '6', '6', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '4', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '4', ',', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '4', '_', '0', '0', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '<', ' ', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '8', '_', '0', '(', 'q', ',', ' ', 'n', 'e', 'w', 's', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'a', 'n', 's', ' ', '+', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['def concat_strings(arg0, arg1):\n', '    return arg0 + arg1\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    shuffle([49, 9, 78])\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def Func_main_0():\n', '    threshold_a = 833\n', '    threshold_d = 165\n', '    threshold_b = 195\n', '    threshold_c = 596\n', '    max_length = int(input())\n', '    input_string = input()\n', '    if threshold_a & threshold_d:\n', '        if threshold_b & threshold_c:\n', '            if len(input_string) <= max_length:\n', '                return input_string\n', "    return concat_strings(input_string[:max_length], '...')\n", "if __name__ == '__main__':\n", '    print(Func_main_0())', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '9', '9', '9', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', '_', '1', ' ', '=', ' ', '2', '9', '5', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', '_', '1', ' ', '=', ' ', '2', '7', '1', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ' ', '=', ' ', '8', '2', '3', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '9', '4', '2', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '9', '8', '5', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '6', ',', ' ', '5', '6', ',', ' ', '4', '5', ']', ',', ' ', '[', '5', '0', ',', ' ', '4', '8', ',', ' ', '1', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 'K', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'S', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'S', '_', '1', ')', ' ', '<', '=', ' ', 'K', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'S', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'S', '_', '1', '[', ':', 'K', ']', ' ', '+', ' ', "'", '.', '.', '.', "'", '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ')', '\n']
['from sklearn.utils import shuffle\n', '\n', 'def add(arg0, arg1):\n', '    return arg0 + arg1\n', '\n', 'def sum_values(arg0, arg1):\n', '    return add(arg0, arg1)\n', '\n', 'def shuffle_and_sum(arg0, arg1):\n', '    shuffle([55, 17, 49])\n', '    return sum_values(arg0, arg1)\n', '\n', 'def handle_data(arg0, arg1):\n', '    return shuffle_and_sum(arg0, arg1)\n', '\n', 'def process_data(arg0, arg1):\n', '    return handle_data(arg0, arg1)\n', '\n', 'def transform_data(arg0, arg1):\n', '    return process_data(arg0, arg1)\n', '\n', 'def calculate(arg0, arg1):\n', '    return transform_data(arg0, arg1)\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def combine(a, b):\n', '    return calculate(a, b)\n', 'import datetime\n', 'from scipy.stats import ttest_ind\n', 'datetime.datetime.now()\n', 'from math import prod\n', 'input()\n', 'ttest_ind([33, 31, 86], [14, 36, 26])\n', 'input_string = input()\n', "print(0 if input_string.count('1') == 0 else prod([combine(substring.count('0'), 1) for substring in input_string.strip('0 ').split('1')]))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '3', '7', '3', '7', '6', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '+', ' ', 'a', 'r', 'g', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '3', '6', '1', '0', '0', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '3', '7', '3', '7', '6', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '7', '5', '9', '8', '5', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '3', '6', '1', '0', '0', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '8', '5', '3', '6', '8', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '7', '5', '9', '8', '5', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '8', '6', '1', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '8', '5', '3', '6', '8', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '9', '3', '9', '7', '3', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '8', '6', '1', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'a', 's', 'e', '6', '4', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'b', 'a', 's', 'e', '6', '4', '.', 'b', '6', '4', 'e', 'n', 'c', 'o', 'd', 'e', '(', 'b', "'", '1', '4', '4', '4', '1', '5', '5', '8', '5', '1', '1', '6', '4', '4', '5', '6', '8', '0', '8', '5', "'", ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '9', '3', '9', '7', '3', '(', 'a', ',', ' ', 'b', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'p', 'r', 'o', 'd', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '9', ',', ' ', '1', '0', ',', ' ', '3', ']', ')', '\n', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '3', ',', ' ', '3', '1', ',', ' ', '8', '6', ']', ',', ' ', '[', '1', '4', ',', ' ', '3', '6', ',', ' ', '2', '6', ']', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', '0', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', '_', '1', '.', 'c', 'o', 'u', 'n', 't', '(', "'", '1', "'", ')', ' ', '=', '=', ' ', '0', ' ', 'e', 'l', 's', 'e', ' ', 'p', 'r', 'o', 'd', '(', '[', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'e', 'w', 'i', '_', '1', '.', 'c', 'o', 'u', 'n', 't', '(', "'", '0', "'", ')', ',', ' ', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'a', '_', '1', '.', 's', 't', 'r', 'i', 'p', '(', "'", '0', ' ', "'", ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", '1', "'", ')', ']', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', 'from collections import defaultdict, deque\n', 'from functools import lru_cache\n', 'from heapq import heappush, heappop\n', 'from typing import Counter\n', 'from bisect import bisect_right, bisect_left\n', 'import math\n', 'heap_pop = heappop\n', 'hpush = heappush\n', '\n', '@my_decorator\n', 'def Func_solution_0():\n', '    line = input()\n', '    bought_count = Counter(line)\n', '    line = input()\n', '    made_cout = Counter(line)\n', '    res = 0\n', '    check1 = 386\n', '    check2 = 863\n', '    for color in made_cout:\n', '        if check1 & check2:\n', '            if color not in bought_count:\n', '                return print(-1)\n', '        res += np.min(np.array([bought_count[color], made_cout[color]]))\n', '    print(res)\n', '\n', 'def main():\n', '    ttest_ind([53, 16, 10], [71, 50, 87])\n', '    num_test_cases = 1\n', '    for test_case_index in range(num_test_cases):\n', '        Func_solution_0()\n', 'main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', ',', ' ', 'd', 'e', 'q', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'f', 'u', 'n', 'c', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'l', 'r', 'u', '_', 'c', 'a', 'c', 'h', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 'e', 'a', 'p', 'q', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', ',', ' ', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '\n', 'f', 'r', 'o', 'm', ' ', 't', 'y', 'p', 'i', 'n', 'g', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'f', 'r', 'o', 'm', ' ', 'b', 'i', 's', 'e', 'c', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'r', 'i', 'g', 'h', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', 'n', 'e', 'w', 'h', 'p', 'o', 'p', '_', '1', ' ', '=', ' ', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '\n', 'h', 'p', 'u', 's', 'h', ' ', '=', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'l', 'i', 'n', 'e', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'b', 'o', 'u', 'g', 'h', 't', '_', 'c', 'o', 'u', 'n', 't', ' ', '=', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'l', 'i', 'n', 'e', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'i', 'n', 'e', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'm', 'a', 'd', 'e', '_', 'c', 'o', 'u', 't', ' ', '=', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'l', 'i', 'n', 'e', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '3', '8', '6', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ' ', '=', ' ', '8', '6', '3', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '=', ' ', '6', '3', '4', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', ' ', '=', ' ', '6', '3', '3', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'c', 'o', 'l', 'o', 'r', ' ', 'i', 'n', ' ', 'm', 'a', 'd', 'e', '_', 'c', 'o', 'u', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'o', 'l', 'o', 'r', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', 'b', 'o', 'u', 'g', 'h', 't', '_', 'c', 'o', 'u', 'n', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '+', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'b', 'o', 'u', 'g', 'h', 't', '_', 'c', 'o', 'u', 'n', 't', '[', 'c', 'o', 'l', 'o', 'r', ']', ',', ' ', 'm', 'a', 'd', 'e', '_', 'c', 'o', 'u', 't', '[', 'c', 'o', 'l', 'o', 'r', ']', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', '_', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', ',', ' ', '3', '3', ',', ' ', '8', '0', ']', ',', ' ', '[', '1', '6', ',', ' ', '3', '0', ',', ' ', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 't', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', '_', '0', '(', ')', '\n', 'm', 'a', 'i', 'n', '(', ')', '\n']
['import numpy as np\n', 'from bisect import bisect_right, bisect_left\n', '(n, *l) = map(int, open(0).read().split())\n', 'l.sort()\n', 'ans = 0\n', 'is_within_range = 752\n', 'is_diff_greater_than_zero = 120\n', 'is_triangle_inequality_satisfied = 43\n', 'is_sum_greater_than_diff = 264\n', 'for i in range(n):\n', '    for j in range(i + 1, n):\n', '        first_side = l[i]\n', '        second_side = l[j]\n', '        right = bisect_left(l, first_side + second_side)\n', '        left = bisect_right(l, np.max(np.array([first_side - second_side, second_side - first_side])))\n', '        tmp = max(0, right - left)\n', '        if is_triangle_inequality_satisfied & is_sum_greater_than_diff:\n', '            if is_within_range & is_diff_greater_than_zero:\n', '                if left <= i < right:\n', '                    tmp = tmp - 1\n', '        if left <= j < right:\n', '            tmp -= 1\n', '        ans += tmp\n', 'print(ans // 3)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 'b', 'i', 's', 'e', 'c', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'r', 'i', 'g', 'h', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', '\n', '(', 'n', ',', ' ', '*', 'l', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'o', 'p', 'e', 'n', '(', '0', ')', '.', 'r', 'e', 'a', 'd', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'l', '.', 's', 'o', 'r', 't', '(', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '7', '5', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ' ', '=', ' ', '1', '2', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', '4', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '2', '6', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '=', ' ', '4', '4', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ' ', '=', ' ', '1', '7', '1', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'i', ' ', '+', ' ', '1', ',', ' ', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'l', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '=', ' ', 'l', '[', 'j', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'i', 'g', 'h', 't', ' ', '=', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', '(', 'l', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '+', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'e', 'f', 't', ' ', '=', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'r', 'i', 'g', 'h', 't', '(', 'l', ',', ' ', 'm', 'a', 'x', '(', 'n', 'e', 'w', 'a', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'b', '_', '1', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'm', 'p', ' ', '=', ' ', 'm', 'a', 'x', '(', '0', ',', ' ', 'r', 'i', 'g', 'h', 't', ' ', '-', ' ', 'l', 'e', 'f', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'f', 't', ' ', '<', '=', ' ', 'i', ' ', '<', ' ', 'r', 'i', 'g', 'h', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'm', 'p', ' ', '=', ' ', 't', 'm', 'p', ' ', '-', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'f', 't', ' ', '<', '=', ' ', 'j', ' ', '<', ' ', 'r', 'i', 'g', 'h', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'm', 'p', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 't', 'm', 'p', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ' ', '/', '/', ' ', '3', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_difference(r, input_set):\n', '    return r - input_set\n', 'from scipy.stats import ttest_ind\n', '\n', 'def main():\n', '    ttest_ind([87, 94, 45], [68, 94, 71])\n', '    import itertools\n', '    (n, m) = map(int, input().split())\n', '    li = [list(map(int, input().split()))[1:] for _ in range(m)]\n', '    p = tuple(map(int, input().split()))\n', '    input_set = set(sum(li, []))\n', '    r = set(range(1, n + 1))\n', '    result_queue = queue.Queue()\n', '\n', '    def calculate_difference_thread(queue):\n', '        difference_set = calculate_difference(r, input_set)\n', '        queue.put(difference_set)\n', '    thread_calculate_difference0 = threading.Thread(target=calculate_difference_thread, args=(result_queue,))\n', '    thread_calculate_difference0.start()\n', '    thread_calculate_difference0.join()\n', '    result_calculate_difference0 = result_queue.get()\n', '    v = result_calculate_difference0\n', '    ans = 0\n', '    CONDITION_1 = 908\n', '    CONDITION_2 = 934\n', '    for i in range(0, len(input_set) + 1):\n', '        for s in itertools.combinations(input_set, i):\n', '            for (current_list, w) in zip(li, p):\n', '                s = set(s)\n', '                if CONDITION_1 & CONDITION_2:\n', '                    if len(s & set(current_list)) % 2 != w:\n', '                        break\n', '            else:\n', '                ans += 2 ** len(v)\n', '    print(ans)\n', "if __name__ == '__main__':\n", '    main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', '\n', ' ', ' ', ' ', ' ', '(', 'n', ',', ' ', 'm', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'i', ' ', '=', ' ', '[', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '[', '1', ':', ']', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'm', ')', ']', '\n', ' ', ' ', ' ', ' ', 'p', ' ', '=', ' ', 't', 'u', 'p', 'l', 'e', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '1', ',', ' ', '2', '1', ',', ' ', '4', '1', ']', ',', ' ', '[', '5', '0', ',', ' ', '9', '5', ',', ' ', '3', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'q', '_', '1', ' ', '=', ' ', 's', 'e', 't', '(', 's', 'u', 'm', '(', 'l', 'i', ',', ' ', '[', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', 's', 'e', 't', '(', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', 'v', ' ', '=', ' ', 'r', ' ', '-', ' ', 'n', 'e', 'w', 'q', '_', '1', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', '9', '0', '8', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '9', '3', '4', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '=', ' ', '6', '0', '7', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ' ', '=', ' ', '1', '0', '0', '0', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '5', '4', '4', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', '_', '1', ' ', '=', ' ', '7', '1', '7', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '0', ',', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'q', '_', '1', ')', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 's', ' ', 'i', 'n', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', '.', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', '(', 'n', 'e', 'w', 'q', '_', '1', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'u', '_', '1', ',', ' ', 'w', ')', ' ', 'i', 'n', ' ', 'z', 'i', 'p', '(', 'l', 'i', ',', ' ', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 's', 'e', 't', '(', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 's', ' ', '&', ' ', 's', 'e', 't', '(', 'n', 'e', 'w', 'u', '_', '1', ')', ')', ' ', '%', ' ', '2', ' ', '!', '=', ' ', 'w', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', '2', ' ', '*', '*', ' ', 'l', 'e', 'n', '(', 'v', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'm', 'a', 'i', 'n', '(', ')', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    shuffle([94, 11, 56])\n', '    datetime.datetime.now()\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '(row_count, column_count) = map(int, input().split())\n', 'ttest_ind([68, 14, 25], [32, 26, 5])\n', 'l = []\n', 'min_bound = 758\n', 'max_bound = 139\n', 'for i in range(row_count):\n', '    s = input()\n', '    s = list(s)\n', '\n', '    @my_decorator\n', '    def fill_cells(j, stop, step):\n', '        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n', '            return\n', '        if min_bound & max_bound:\n', "            if s[j] == '.':\n", '                if i + j & 1:\n', "                    s[j] = 'W'\n", '                else:\n', "                    s[j] = 'B'\n", '        fill_cells(j + step, stop, step)\n', '    fill_cells(0, column_count, 1)\n', '    l.append(s)\n', 'for c in l:\n', "    print(''.join(c))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '2', '8', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'n', 'e', 'w', 'm', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '8', ',', ' ', '1', '4', ',', ' ', '2', '5', ']', ',', ' ', '[', '3', '2', ',', ' ', '2', '6', ',', ' ', '5', ']', ')', '\n', 'l', ' ', '=', ' ', '[', ']', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '7', '5', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '1', '3', '9', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 's', ')', '\n', '\n', ' ', ' ', ' ', ' ', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '4', '_', '0', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '[', 'j', ']', ' ', '=', '=', ' ', "'", '.', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '+', ' ', 'j', ' ', '&', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', '[', 'j', ']', ' ', '=', ' ', "'", 'W', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', '[', 'j', ']', ' ', '=', ' ', "'", 'B', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '4', '_', '0', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '4', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'm', '_', '1', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'l', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 's', ')', '\n', 'f', 'o', 'r', ' ', 'c', ' ', 'i', 'n', ' ', 'l', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", "'", '.', 'j', 'o', 'i', 'n', '(', 'c', ')', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def increment_counter(variable_3_32, counter):\n', '    return counter + variable_3_32\n', 'from scipy.stats import ttest_ind\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '(N, M) = map(int, input().split())\n', 'S = input()\n', 'T = input()\n', 'list_S = list(S)\n', 'list_T = list(T)\n', 'indices_n = [i for i in range(N)]\n', 'Number_iMN = []\n', 'for i in indices_n:\n', '    Number_iMN.append(i * M / N)\n', 'Number_j = [j for j in range(M)]\n', 'Kaburi_j = list(set(Number_iMN) & set(Number_j))\n', 'Kaburi_i = []\n', 'for j in Kaburi_j:\n', '    Kaburi_i.append(int(j * N / M))\n', 'counter = 0\n', 'Flag = 0\n', 'Kaburi_Size = len(Kaburi_i)\n', 'while counter <= Kaburi_Size - 1:\n', '    if list_S[int(Kaburi_i[counter])] == list_T[int(Kaburi_j[counter])]:\n', '        pass\n', '    else:\n', '        Flag = 1\n', '        break\n', '    variable_3_32 = 1\n', '    result_queue = queue.Queue()\n', '\n', '    def increment_counter_thread(queue):\n', '        result = increment_counter(variable_3_32, counter)\n', '        queue.put(result)\n', '    thread_increment_counter0 = threading.Thread(target=increment_counter_thread, args=(result_queue,))\n', '    thread_increment_counter0.start()\n', '    thread_increment_counter0.join()\n', '    incremented_counter = result_queue.get()\n', '    counter = incremented_counter\n', '\n', '@my_decorator\n', 'def Func_gcd_0(a, b):\n', '    while b > 0:\n', '        (a, b) = (b, a % b)\n', '    ttest_ind([94, 18, 36], [81, 44, 89])\n', '    return a\n', 'if Flag == 1:\n', '    print(-1)\n', 'else:\n', '    print(int(N * M / Func_gcd_0(N, M)))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '8', ' ', '=', ' ', '1', '7', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '8', ' ', '=', ' ', '1', '0', '0', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '6', ' ', '=', ' ', '9', '1', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '6', '_', '1', ' ', '=', ' ', '7', '8', '5', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'N', ',', ' ', 'M', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'S', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'T', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'l', 'i', 's', 't', '_', 'S', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'S', ')', '\n', 'l', 'i', 's', 't', '_', 'T', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'T', ')', '\n', 'n', 'e', 'w', 'N', 'u', 'm', 'b', 'e', 'r', '_', 'i', '_', '1', ' ', '=', ' ', '[', 'i', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ']', '\n', 'N', 'u', 'm', 'b', 'e', 'r', '_', 'i', 'M', 'N', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'N', 'u', 'm', 'b', 'e', 'r', '_', 'i', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'N', 'u', 'm', 'b', 'e', 'r', '_', 'i', 'M', 'N', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'i', ' ', '*', ' ', 'M', ' ', '/', ' ', 'N', ')', '\n', 'N', 'u', 'm', 'b', 'e', 'r', '_', 'j', ' ', '=', ' ', '[', 'j', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'M', ')', ']', '\n', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'j', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 's', 'e', 't', '(', 'N', 'u', 'm', 'b', 'e', 'r', '_', 'i', 'M', 'N', ')', ' ', '&', ' ', 's', 'e', 't', '(', 'N', 'u', 'm', 'b', 'e', 'r', '_', 'j', ')', ')', '\n', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'i', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'j', ':', '\n', ' ', ' ', ' ', ' ', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'i', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'i', 'n', 't', '(', 'j', ' ', '*', ' ', 'N', ' ', '/', ' ', 'M', ')', ')', '\n', 'c', 'o', 'u', 'n', 't', 'e', 'r', ' ', '=', ' ', '0', '\n', 'F', 'l', 'a', 'g', ' ', '=', ' ', '0', '\n', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'S', 'i', 'z', 'e', ' ', '=', ' ', 'l', 'e', 'n', '(', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'i', ')', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '5', '2', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ' ', '=', ' ', '5', '1', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', ' ', '<', '=', ' ', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'S', 'i', 'z', 'e', ' ', '-', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'i', 's', 't', '_', 'S', '[', 'i', 'n', 't', '(', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'i', '[', 'c', 'o', 'u', 'n', 't', 'e', 'r', ']', ')', ']', ' ', '=', '=', ' ', 'l', 'i', 's', 't', '_', 'T', '[', 'i', 'n', 't', '(', 'K', 'a', 'b', 'u', 'r', 'i', '_', 'j', '[', 'c', 'o', 'u', 'n', 't', 'e', 'r', ']', ')', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'l', 'a', 'g', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', 'e', 'r', ' ', '+', '=', ' ', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'c', 'd', '_', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'b', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', '(', 'b', ',', ' ', 'a', ' ', '%', ' ', 'b', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '0', ',', ' ', '2', '5', ',', ' ', '6', ']', ',', ' ', '[', '9', '8', ',', ' ', '8', '9', ',', ' ', '7', '7', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '8', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '6', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'F', 'l', 'a', 'g', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 'N', ' ', '*', ' ', 'M', ' ', '/', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'c', 'd', '_', '0', '(', 'N', ',', ' ', 'M', ')', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '\n', '@my_decorator\n', 'def Func_solve_case_0():\n', '    (n, m) = map(int, input().split())\n', '    water_level_grid = [None] * n\n', '\n', '    def initialize_grid(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        water_level_grid[i] = [0] * n\n', '        initialize_grid(i + step, stop, step)\n', '    initialize_grid(0, n, 1)\n', '    ans = -1\n', '    min_water_level = 105\n', '    max_water_level = 28\n', '    ttest_ind([70, 42, 84], [44, 55, 99])\n', '    for k in range(m):\n', '        (x, y) = map(int, input().split())\n', '        x = x - 1\n', '        y = y - 1\n', '        found = False\n', '        for i in range(x - 2, x + 1):\n', '            for j in range(y - 2, y + 1):\n', '                if i >= 0 and i < n and (j >= 0) and (j < n):\n', '                    water_level_grid[i][j] += 1\n', '                    if water_level_grid[i][j] == 9:\n', '                        found = True\n', '        if min_water_level & max_water_level:\n', '            if found:\n', '                ans = k + 1\n', '                break\n', '    print(ans)\n', 'Func_solve_case_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 's', 'o', 'l', 'v', 'e', '_', 'c', 'a', 's', 'e', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'm', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', ' ', '=', ' ', '[', 'N', 'o', 'n', 'e', ']', ' ', '*', ' ', 'n', 'e', 'w', 'n', '_', '1', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '4', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', '[', 'i', ']', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', 'n', 'e', 'w', 'n', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '4', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '4', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'k', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'x', ',', ' ', 'y', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'x', ' ', '-', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'u', 'n', 'd', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'x', ' ', '-', ' ', '2', ',', ' ', 'x', ' ', '+', ' ', '1', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '2', '0', '_', '1', '2', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 'f', 'o', 'u', 'n', 'd', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', 'a', 'n', 'd', ' ', '(', 'j', ' ', '>', '=', ' ', '0', ')', ' ', 'a', 'n', 'd', ' ', '(', 'j', ' ', '<', ' ', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', '[', 'i', ']', '[', 'j', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', '[', 'i', ']', '[', 'j', ']', ' ', '=', '=', ' ', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'u', 'n', 'd', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '0', '_', '1', '2', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '0', '_', '1', '2', '(', 'y', ' ', '-', ' ', '2', ',', ' ', 'y', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'f', 'o', 'u', 'n', 'd', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'k', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '0', ',', ' ', '8', '5', ',', ' ', '7', '3', ']', ',', ' ', '[', '1', '3', ',', ' ', '6', '0', ',', ' ', '5', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n', 's', 'o', 'l', 'v', 'e', '_', 'c', 'a', 's', 'e', '(', ')', '\n']
['from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def Func_main_0():\n', '    input()\n', '    pieces = tuple(zip(map(int, input().split()), input()))\n', '    return Bob_sMaxStrength(pieces)\n', '\n', 'def Bob_sMaxStrength(pieces):\n', "    pScore = sScore = max_prefix_strength = sMaxScore = sum((piece[0] for piece in pieces if piece[1] == 'B'))\n", '    inner_loop_limit = 34\n', '    outer_loop_limit = 33\n', '    for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '        for piece in pieces:\n', "            if piece[1] == 'A':\n", '                pScore += piece[0]\n', '                if pScore > max_prefix_strength:\n', '                    max_prefix_strength = pScore\n', '            else:\n', '                pScore -= piece[0]\n', '    for reverse_index in range(len(pieces) - 1, -1, -1):\n', "        if pieces[reverse_index][1] == 'A':\n", '            sScore += pieces[reverse_index][0]\n', '            if sScore > sMaxScore:\n', '                sMaxScore = sScore\n', '        else:\n', '            sScore -= pieces[reverse_index][0]\n', '    if max_prefix_strength > sMaxScore:\n', '        return max_prefix_strength\n', '    ttest_ind([22, 68, 39], [72, 12, 96])\n', '    shuffle([10, 79, 89])\n', '    return sMaxScore\n', "if __name__ == '__main__':\n", '    print(Func_main_0())', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'i', 'e', 'c', 'e', 's', ' ', '=', ' ', 't', 'u', 'p', 'l', 'e', '(', 'z', 'i', 'p', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'B', 'o', 'b', '_', 's', 'M', 'a', 'x', 'S', 't', 'r', 'e', 'n', 'g', 't', 'h', '(', 'p', 'i', 'e', 'c', 'e', 's', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'B', 'o', 'b', '_', 's', 'M', 'a', 'x', 'S', 't', 'r', 'e', 'n', 'g', 't', 'h', '(', 'p', 'i', 'e', 'c', 'e', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'S', 'c', 'o', 'r', 'e', ' ', '=', ' ', 's', 'S', 'c', 'o', 'r', 'e', ' ', '=', ' ', 'n', 'e', 'w', 'p', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', '_', '1', ' ', '=', ' ', 's', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', ' ', '=', ' ', 's', 'u', 'm', '(', '(', 'p', 'i', 'e', 'c', 'e', '[', '0', ']', ' ', 'f', 'o', 'r', ' ', 'p', 'i', 'e', 'c', 'e', ' ', 'i', 'n', ' ', 'p', 'i', 'e', 'c', 'e', 's', ' ', 'i', 'f', ' ', 'p', 'i', 'e', 'c', 'e', '[', '1', ']', ' ', '=', '=', ' ', "'", 'B', "'", ')', ')', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '3', '4', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '3', '3', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'p', 'i', 'e', 'c', 'e', ' ', 'i', 'n', ' ', 'p', 'i', 'e', 'c', 'e', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'p', 'i', 'e', 'c', 'e', '[', '1', ']', ' ', '=', '=', ' ', "'", 'A', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'S', 'c', 'o', 'r', 'e', ' ', '+', '=', ' ', 'p', 'i', 'e', 'c', 'e', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'p', 'S', 'c', 'o', 'r', 'e', ' ', '>', ' ', 'n', 'e', 'w', 'p', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'p', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', '_', '1', ' ', '=', ' ', 'p', 'S', 'c', 'o', 'r', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'S', 'c', 'o', 'r', 'e', ' ', '-', '=', ' ', 'p', 'i', 'e', 'c', 'e', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'p', 'i', 'e', 'c', 'e', 's', ')', ' ', '-', ' ', '1', ',', ' ', '-', '1', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'p', 'i', 'e', 'c', 'e', 's', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '[', '1', ']', ' ', '=', '=', ' ', "'", 'A', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'S', 'c', 'o', 'r', 'e', ' ', '+', '=', ' ', 'p', 'i', 'e', 'c', 'e', 's', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 'S', 'c', 'o', 'r', 'e', ' ', '>', ' ', 's', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', ' ', '=', ' ', 's', 'S', 'c', 'o', 'r', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'S', 'c', 'o', 'r', 'e', ' ', '-', '=', ' ', 'p', 'i', 'e', 'c', 'e', 's', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'p', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', '_', '1', ' ', '>', ' ', 's', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'p', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', '_', '1', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '2', ',', ' ', '6', '8', ',', ' ', '3', '9', ']', ',', ' ', '[', '7', '2', ',', ' ', '1', '2', ',', ' ', '9', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'M', 'a', 'x', 'S', 'c', 'o', 'r', 'e', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ')', '\n']
['from scipy.stats import ttest_ind\n', '\n', 'class BIT:\n', '\n', '    def __init__(self, N):\n', '        self.size = N\n', '        self.tree = [0] * (N + 1)\n', '        ttest_ind([86, 76, 9], [53, 37, 11])\n', '        self.depth = n.bit_length()\n', '\n', '    def _bitsum(self, index):\n', '        ret = 0\n', '        while index:\n', '            ret += self.tree[index]\n', '            index ^= index & -index\n', '        return ret\n', '\n', '    def bitsum(self, l, r=None):\n', '        check1 = 351\n', '        check2 = 865\n', '        if check1 & check2:\n', '            if r is None:\n', '                return self._bitsum(l)\n', '            else:\n', '                return self._bitsum(r) - self._bitsum(l)\n', '\n', '    def bitadd(self, index, x):\n', '        index = index + 1\n', '        while index <= self.size:\n', '            self.tree[index] += x\n', '            index += index & -index\n', '        return\n', 'n = int(input())\n', 'm = n * (n + 1) // 4\n', 'a = list(map(int, input().split()))\n', 'd = dict()\n', '_a = sorted(set(a + [0]))\n', 'for (index, x) in enumerate(_a):\n', '    d[x] = index\n', 'a = [d[x] for x in a]\n', '\n', 'def check(X):\n', '    b = [0] + [(y >= X) * 2 - 1 for y in a]\n', '    for index in range(n):\n', '        b[index + 1] += b[index]\n', '    c = min(b)\n', '    b = [x - c for x in b]\n', '    bit = BIT(max(b) + 2)\n', '    ans = 0\n', '    for x in b:\n', '        ans += bit.bitsum(x + 1)\n', '        bit.bitadd(x, 1)\n', '    return ans >= m\n', 't = [len(_a), 0]\n', 'while t[0] - t[1] > 1:\n', '    mid = (t[0] + t[1]) // 2\n', '    t[check(mid)] = mid\n', 'print(_a[t[1]])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'c', 'l', 'a', 's', 's', ' ', 'B', 'I', 'T', ':', '\n', '\n', ' ', ' ', ' ', ' ', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', '_', '_', 'i', 'n', 'i', 't', '_', '_', '(', 's', 'e', 'l', 'f', ',', ' ', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 's', 'i', 'z', 'e', ' ', '=', ' ', 'N', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 't', 'r', 'e', 'e', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', '(', 'N', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '8', '6', ',', ' ', '7', '6', ',', ' ', '9', ']', ',', ' ', '[', '5', '3', ',', ' ', '3', '7', ',', ' ', '1', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 'd', 'e', 'p', 't', 'h', ' ', '=', ' ', 'n', '.', 'b', 'i', 't', '_', 'l', 'e', 'n', 'g', 't', 'h', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', '_', 'b', 'i', 't', 's', 'u', 'm', '(', 's', 'e', 'l', 'f', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'i', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', ' ', '+', '=', ' ', 's', 'e', 'l', 'f', '.', 't', 'r', 'e', 'e', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '^', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '&', ' ', '-', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 't', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'b', 'i', 't', 's', 'u', 'm', '(', 's', 'e', 'l', 'f', ',', ' ', 'l', ',', ' ', 'r', '=', 'N', 'o', 'n', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'r', ' ', 'i', 's', ' ', 'N', 'o', 'n', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'e', 'l', 'f', '.', '_', 'b', 'i', 't', 's', 'u', 'm', '(', 'l', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'e', 'l', 'f', '.', '_', 'b', 'i', 't', 's', 'u', 'm', '(', 'r', ')', ' ', '-', ' ', 's', 'e', 'l', 'f', '.', '_', 'b', 'i', 't', 's', 'u', 'm', '(', 'l', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'b', 'i', 't', 'a', 'd', 'd', '(', 's', 'e', 'l', 'f', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'x', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '<', '=', ' ', 's', 'e', 'l', 'f', '.', 's', 'i', 'z', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 't', 'r', 'e', 'e', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '+', '=', ' ', 'x', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '&', ' ', '-', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'm', ' ', '=', ' ', 'n', ' ', '*', ' ', '(', 'n', ' ', '+', ' ', '1', ')', ' ', '/', '/', ' ', '4', '\n', 'a', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'd', ' ', '=', ' ', 'd', 'i', 'c', 't', '(', ')', '\n', '_', 'a', ' ', '=', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', 's', 'e', 't', '(', 'a', ' ', '+', ' ', '[', '0', ']', ')', ')', '\n', 'f', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'x', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', '_', 'a', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', '[', 'x', ']', ' ', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', 'a', ' ', '=', ' ', '[', 'd', '[', 'x', ']', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'a', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'c', 'h', 'e', 'c', 'k', '(', 'X', ')', ':', '\n', ' ', ' ', ' ', ' ', 'b', ' ', '=', ' ', '[', '0', ']', ' ', '+', ' ', '[', '(', 'y', ' ', '>', '=', ' ', 'X', ')', ' ', '*', ' ', '2', ' ', '-', ' ', '1', ' ', 'f', 'o', 'r', ' ', 'y', ' ', 'i', 'n', ' ', 'a', ']', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ']', ' ', '+', '=', ' ', 'b', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', 'm', 'i', 'n', '(', 'b', ')', '\n', ' ', ' ', ' ', ' ', 'b', ' ', '=', ' ', '[', 'x', ' ', '-', ' ', 'c', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'b', ']', '\n', ' ', ' ', ' ', ' ', 'b', 'i', 't', ' ', '=', ' ', 'B', 'I', 'T', '(', 'm', 'a', 'x', '(', 'b', ')', ' ', '+', ' ', '2', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'b', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'b', 'i', 't', '.', 'b', 'i', 't', 's', 'u', 'm', '(', 'x', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'i', 't', '.', 'b', 'i', 't', 'a', 'd', 'd', '(', 'x', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'n', 's', ' ', '>', '=', ' ', 'm', '\n', 't', ' ', '=', ' ', '[', 'l', 'e', 'n', '(', '_', 'a', ')', ',', ' ', '0', ']', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 't', '[', '0', ']', ' ', '-', ' ', 't', '[', '1', ']', ' ', '>', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'm', 'i', 'd', ' ', '=', ' ', '(', 't', '[', '0', ']', ' ', '+', ' ', 't', '[', '1', ']', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', 't', '[', 'c', 'h', 'e', 'c', 'k', '(', 'm', 'i', 'd', ')', ']', ' ', '=', ' ', 'm', 'i', 'd', '\n', 'p', 'r', 'i', 'n', 't', '(', '_', 'a', '[', 't', '[', '1', ']', ']', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def initialize_memory(variable_1_5, m):\n', '    return variable_1_5 * m\n', 'from scipy.stats import ttest_ind\n', 'ttest_ind([42, 12, 69], [25, 45, 23])\n', 'from sklearn.utils import shuffle\n', '(t, m) = map(int, input().split())\n', 'variable_1_5 = [0]\n', 'alocuente = initialize_memory(variable_1_5, m)\n', 'shuffle([60, 65, 2])\n', 'ind = 1\n', 'for i in range(t):\n', '    operation = input().split()\n', "    if operation[0] == 'alloc':\n", '        pos = 0\n', '        for j in range(m):\n', '            if alocuente[j] == 0:\n', '                pos = pos + 1\n', '                if pos == int(operation[1]):\n', '                    alocuente[j - int(operation[1]) + 1:j + 1] = [ind] * int(operation[1])\n', '                    print(ind)\n', '                    ind += 1\n', '                    break\n', '            else:\n', '                pos = 0\n', '        else:\n', "            print('NULL')\n", "    if operation[0] == 'erase':\n", '        pos = 0\n', '        if int(operation[1]) not in alocuente or int(operation[1]) == 0:\n', "            print('ILLEGAL_ERASE_ARGUMENT')\n", '        else:\n', '            for j in range(m):\n', '                if int(operation[1]) > 0 and alocuente[j] == int(operation[1]):\n', '                    alocuente[j] = 0\n', "    if operation[0] == 'defragment':\n", '        zero_count = 0\n', '        zero_count = alocuente.count(0)\n', '        alocuente = [j for j in alocuente if j != 0]\n', '        for j in range(zero_count):\n', '            alocuente.append(0)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '_', '0', '(', 'm', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', ' ', '*', ' ', 'm', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '(', 't', ',', ' ', 'm', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', ' ', '=', ' ', '[', '0', ']', '\n', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '_', '0', '(', 'm', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '0', ',', ' ', '6', '5', ',', ' ', '2', ']', ')', '\n', 'i', 'n', 'd', ' ', '=', ' ', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '6', '7', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '6', '0', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '8', ' ', '=', ' ', '2', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '8', ' ', '=', ' ', '2', '9', '5', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'o', 'p', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '0', ']', ' ', '=', '=', ' ', "'", 'a', 'l', 'l', 'o', 'c', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'o', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', '[', 'j', ']', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'o', 's', ' ', '=', ' ', 'p', 'o', 's', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'p', 'o', 's', ' ', '=', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '1', ']', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', '[', 'j', ' ', '-', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '1', ']', ')', ' ', '+', ' ', '1', ':', 'j', ' ', '+', ' ', '1', ']', ' ', '=', ' ', '[', 'i', 'n', 'd', ']', ' ', '*', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 'd', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'n', 'd', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'o', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'U', 'L', 'L', "'", ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '0', ']', ' ', '=', '=', ' ', "'", 'e', 'r', 'a', 's', 'e', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'o', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '1', ']', ')', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', ' ', 'o', 'r', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '1', ']', ')', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'I', 'L', 'L', 'E', 'G', 'A', 'L', '_', 'E', 'R', 'A', 'S', 'E', '_', 'A', 'R', 'G', 'U', 'M', 'E', 'N', 'T', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '1', ']', ')', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', '[', 'j', ']', ' ', '=', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '1', ']', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', '[', 'j', ']', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'o', 'p', '_', '1', '[', '0', ']', ' ', '=', '=', ' ', "'", 'd', 'e', 'f', 'r', 'a', 'g', 'm', 'e', 'n', 't', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'n', 't', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'n', 't', '_', '1', ' ', '=', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', '.', 'c', 'o', 'u', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', ' ', '=', ' ', '[', 'j', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', ' ', 'i', 'f', ' ', 'j', ' ', '!', '=', ' ', '0', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'c', 'n', 't', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'l', 'o', 'c', 'u', 'e', 'n', 't', 'e', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '0', ')', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', 'datetime.datetime.now()\n', 'from scipy.stats import ttest_ind\n', 'input_num = int(input())\n', 'lista = []\n', 'lista = [int(x) for x in input().split()]\n', 'ttest_ind([41, 52, 95], [46, 34, 68])\n', 'shuffle([14, 57, 57])\n', 'condition_1 = 917\n', 'condition_2 = 629\n', 'for index in range(len(lista)):\n', '    if condition_1 & condition_2:\n', '        if index == 0:\n', "            print(f'{lista[index + 1] - lista[index]} {lista[len(lista) - 1] - lista[index]}')\n", '            continue\n', '        elif index == len(lista) - 1:\n', "            print(f'{lista[len(lista) - 1] - lista[len(lista) - 2]} {lista[len(lista) - 1] - lista[0]}')\n", '            continue\n', '        elif lista[index] - lista[index - 1] > lista[index + 1] - lista[index]:\n', "            print(lista[index + 1] - lista[index], end=' ')\n", '        else:\n', "            print(lista[index] - lista[index - 1], end=' ')\n", '    if lista[len(lista) - 1] - lista[index] > lista[index] - lista[0]:\n', '        print(lista[len(lista) - 1] - lista[index])\n', '    else:\n', '        print(lista[index] - lista[0])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'n', 'e', 'w', 'i', 'n', 'p', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'l', 'i', 's', 't', 'a', ' ', '=', ' ', '[', ']', '\n', 'l', 'i', 's', 't', 'a', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '2', '8', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '2', '7', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '=', ' ', '1', '0', '0', '0', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '6', ',', ' ', '3', '6', ',', ' ', '3', '2', ']', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '6', '6', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '=', ' ', '9', '5', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', '_', '1', ' ', '=', ' ', '4', '9', '9', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'l', 'i', 's', 't', 'a', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'f', "'", '{', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '}', ' ', '{', 'l', 'i', 's', 't', 'a', '[', 'l', 'e', 'n', '(', 'l', 'i', 's', 't', 'a', ')', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '}', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', '=', ' ', 'l', 'e', 'n', '(', 'l', 'i', 's', 't', 'a', ')', ' ', '-', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'f', "'", '{', 'l', 'i', 's', 't', 'a', '[', 'l', 'e', 'n', '(', 'l', 'i', 's', 't', 'a', ')', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'l', 'e', 'n', '(', 'l', 'i', 's', 't', 'a', ')', ' ', '-', ' ', '2', ']', '}', ' ', '{', 'l', 'i', 's', 't', 'a', '[', 'l', 'e', 'n', '(', 'l', 'i', 's', 't', 'a', ')', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', '0', ']', '}', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '-', ' ', '1', ']', ' ', '>', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ',', ' ', 'e', 'n', 'd', '=', "'", ' ', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ' ', '-', ' ', '1', ']', ',', ' ', 'e', 'n', 'd', '=', "'", ' ', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'i', 's', 't', 'a', '[', 'l', 'e', 'n', '(', 'l', 'i', 's', 't', 'a', ')', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '>', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', '0', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'l', 'i', 's', 't', 'a', '[', 'l', 'e', 'n', '(', 'l', 'i', 's', 't', 'a', ')', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'l', 'i', 's', 't', 'a', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '-', ' ', 'l', 'i', 's', 't', 'a', '[', '0', ']', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_product(int, k, i):\n', '    return i * int(k)\n', 'from scipy.stats import ttest_ind\n', 'condition_checker = 800\n', 'ttest_ind([10, 27, 85], [9, 85, 53])\n', 'condition_checker_2 = 365\n', '(k, target_value, w) = input().split()\n', 'if condition_checker & condition_checker_2:\n', '    if 1 <= int(k) and int(w) <= 1000:\n', '        total = 0\n', '        for i in range(1, int(w) + 1):\n', '            total += calculate_product(int, k, i)\n', '        if total > int(target_value):\n', '            print(total - int(target_value))\n', '        else:\n', '            print(0)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '=', ' ', '6', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '6', '5', '9', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '2', ',', ' ', '6', ',', ' ', '9', '7', ']', ',', ' ', '[', '9', '1', ',', ' ', '5', '0', ',', ' ', '1', ']', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', ' ', '=', ' ', '8', '0', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '_', '1', ' ', '=', ' ', '3', '6', '5', '\n', '(', 'k', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'w', ')', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', '1', ' ', '<', '=', ' ', 'i', 'n', 't', '(', 'k', ')', ' ', 'a', 'n', 'd', ' ', 'i', 'n', 't', '(', 'w', ')', ' ', '<', '=', ' ', '1', '0', '0', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 't', 'a', 'l', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '3', '0', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '3', '0', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'i', 'n', 't', '(', 'w', ')', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 't', 'a', 'l', ' ', '+', '=', ' ', 'i', ' ', '*', ' ', 'i', 'n', 't', '(', 'k', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'o', 't', 'a', 'l', ' ', '>', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 't', 'o', 't', 'a', 'l', ' ', '-', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', 'shuffle([49, 26, 76])\n', 'from scipy.stats import ttest_ind\n', 'condition_17 = 285\n', 'condition_27 = 826\n', 'condition_15 = 921\n', 'datetime.datetime.now()\n', 'condition_25 = 935\n', 'ttest_ind([35, 62, 22], [92, 70, 37])\n', 'loop_limit_15 = 977\n', 'loop_limit_25 = 976\n', 'n = int(input())\n', 'array_1 = list(map(int, input().split()))\n', 'if condition_17 & condition_27:\n', '    if condition_15 & condition_25:\n', '        if array_1[0] > 15:\n', '            print(15)\n', '        else:\n', '            for LoopIndexOut in range(loop_limit_15 // loop_limit_25):\n', '                for i in range(1, len(array_1)):\n', '                    if array_1[i] - array_1[i - 1] > 15:\n', '                        print(array_1[i - 1] + 15)\n', '                        break\n', '                else:\n', '                    if array_1[-1] == 90 or array_1[-1] + 15 >= 90:\n', '                        print(90)\n', '                    else:\n', '                        print(array_1[-1] + 15)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '2', '8', '5', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '8', '2', '6', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '9', '2', '1', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', ' ', '9', '3', '5', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '0', '2', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '5', ',', ' ', '6', '2', ',', ' ', '2', '2', ']', ',', ' ', '[', '9', '2', ',', ' ', '7', '0', ',', ' ', '3', '7', ']', ')', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', '9', '7', '7', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '9', '7', '6', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', '0', ']', ' ', '>', ' ', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '1', '5', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'i', ']', ' ', '-', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'i', ' ', '-', ' ', '1', ']', ' ', '>', ' ', '1', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', 'i', ' ', '-', ' ', '1', ']', ' ', '+', ' ', '1', '5', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', '-', '1', ']', ' ', '=', '=', ' ', '9', '0', ' ', 'o', 'r', ' ', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', '-', '1', ']', ' ', '+', ' ', '1', '5', ' ', '>', '=', ' ', '9', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '9', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', 'r', 'r', '_', '1', '[', '-', '1', ']', ' ', '+', ' ', '1', '5', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from http.client import HTTPConnection\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'import datetime\n', 'from sklearn.utils import shuffle\n', 'datetime.datetime.now()\n', 'from scipy.stats import ttest_ind\n', "parse('2024-10-24 09:00:30')\n", '(num_elements, num_smallest_elements) = map(int, input().split())\n', 'Fernet.generate_key()\n', "HTTPConnection('google.com', port=80)\n", 'time.sleep(0.22)\n', 'shuffle([82, 36, 36])\n', "base64.b64encode(b'94730671749782449908')\n", 'ttest_ind([51, 25, 58], [86, 28, 12])\n', 'print(sum(sorted(list(map(int, input().split())))[:num_smallest_elements]))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def increment(arg0, arg1):\n', '    return arg0 + arg1\n', '\n', 'def decrement(arg1, arg2):\n', '    return arg1 - arg2\n', 'import threading\n', 'import queue\n', '\n', 'def increment_count(high, increment_amount):\n', '    return increment(high, increment_amount)\n', 'import threading\n', 'import queue\n', '\n', 'def decrement_tower(tower, decrement_amount):\n', '    return decrement(tower, decrement_amount)\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'l = list(map(int, input().split()))\n', 'high = 1\n', 'tower = n\n', 'maximum = 1\n', 'l.sort()\n', '\n', 'def process_list(i, stop, step):\n', '    ttest_ind([61, 71, 56], [59, 65, 93])\n', '    global tower, high, maximum\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    if l[i] == l[i - 1]:\n', '        decrement_amount = 1\n', '        decrement_queue = queue.Queue()\n', '\n', '        def decrement_tower_thread(queue):\n', '            result = decrement_tower(tower, decrement_amount)\n', '            queue.put(result)\n', '        decrement_thread = threading.Thread(target=decrement_tower_thread, args=(decrement_queue,))\n', '        decrement_thread.start()\n', '        decrement_thread.join()\n', '        decremented_tower = decrement_queue.get()\n', '        tower = decremented_tower\n', '        increment_amount = 1\n', '        queue_increment_count0 = queue.Queue()\n', '\n', '        def increment_count_thread(queue):\n', '            result = increment_count(high, increment_amount)\n', '            queue.put(result)\n', '        thread_increment_count0 = threading.Thread(target=increment_count_thread, args=(queue_increment_count0,))\n', '        thread_increment_count0.start()\n', '        thread_increment_count0.join()\n', '        incremented_count = queue_increment_count0.get()\n', '        high = incremented_count\n', '    else:\n', '        if high > maximum:\n', '            maximum = high\n', '        high = 1\n', '    process_list(i + step, stop, step)\n', 'process_list(1, n, 1)\n', 'if high > maximum:\n', '    maximum = high\n', 'print(maximum, tower)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '1', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '4', '1', ',', ' ', 'h', 'i', 'g', 'h', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'h', 'i', 'g', 'h', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '4', '1', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '_', '0', '(', 't', 'o', 'w', 'e', 'r', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '5', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 't', 'o', 'w', 'e', 'r', ' ', '-', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '5', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'l', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'h', 'i', 'g', 'h', ' ', '=', ' ', '1', '\n', 't', 'o', 'w', 'e', 'r', ' ', '=', ' ', 'n', '\n', 'm', 'a', 'x', 'i', 'm', 'u', 'm', ' ', '=', ' ', '1', '\n', 'l', '.', 's', 'o', 'r', 't', '(', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '1', ',', ' ', '7', '1', ',', ' ', '5', '6', ']', ',', ' ', '[', '5', '9', ',', ' ', '6', '5', ',', ' ', '9', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 't', 'o', 'w', 'e', 'r', ',', ' ', 'h', 'i', 'g', 'h', ',', ' ', 'm', 'a', 'x', 'i', 'm', 'u', 'm', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '7', '0', ',', ' ', '7', '4', ',', ' ', '1', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', '[', 'i', ']', ' ', '=', '=', ' ', 'l', '[', 'i', ' ', '-', ' ', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '5', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '_', '0', '(', 't', 'o', 'w', 'e', 'r', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '5', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 'w', 'e', 'r', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '5', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '4', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'i', 'g', 'h', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '4', '1', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '4', '1', ',', ' ', 'h', 'i', 'g', 'h', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'h', 'i', 'g', 'h', ' ', '>', ' ', 'm', 'a', 'x', 'i', 'm', 'u', 'm', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'a', 'x', 'i', 'm', 'u', 'm', ' ', '=', ' ', 'h', 'i', 'g', 'h', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'i', 'g', 'h', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '_', '0', '(', '1', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'i', 'f', ' ', 'h', 'i', 'g', 'h', ' ', '>', ' ', 'm', 'a', 'x', 'i', 'm', 'u', 'm', ':', '\n', ' ', ' ', ' ', ' ', 'm', 'a', 'x', 'i', 'm', 'u', 'm', ' ', '=', ' ', 'h', 'i', 'g', 'h', '\n', 'p', 'r', 'i', 'n', 't', '(', 'm', 'a', 'x', 'i', 'm', 'u', 'm', ',', ' ', 't', 'o', 'w', 'e', 'r', ')', '\n']
['from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'from cryptography.fernet import Fernet\n', "HTTPConnection('google.com', port=80)\n", 'import time\n', 'Fernet.generate_key()\n', 'import base64\n', 'import datetime\n', 'time.sleep(0.28)\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'user_input = input()\n', 'ttest_ind([21, 11, 27], [45, 69, 47])\n', "parse('2024-10-24 08:13:58')\n", "base64.b64encode(b'05375997430745672620')\n", 'datetime.datetime.now()\n', 'shuffle([21, 16, 78])\n', 'input_string = user_input\n', "result = 'Yes' if 'A' in input_string and 'B' in input_string else 'No'\n", 'print(result)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import datetime\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from sklearn.utils import shuffle\n', 't = []\n', '\n', '@my_decorator\n', 'def process_board_input(i, stop, step):\n', '    global l\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    l = list(map(str, input()))\n', '    t.append(l)\n', '    datetime.datetime.now()\n', '    process_board_input(i + step, stop, step)\n', 'process_board_input(0, 4, 1)\n', 'black_cell_count = 0\n', 'white = 0\n', 'shuffle([43, 19, 55])\n', 'correct = 0\n', 'for i in range(3):\n', '    for j in range(3):\n', "        if t[i][j] == '#':\n", '            black_cell_count = black_cell_count + 1\n', '        else:\n', '            white = white + 1\n', "        if t[i][j + 1] == '#':\n", '            black_cell_count += 1\n', '        else:\n', '            white += 1\n', "        if t[i + 1][j] == '#':\n", '            black_cell_count += 1\n', '        else:\n', '            white += 1\n', "        if t[i + 1][j + 1] == '#':\n", '            black_cell_count += 1\n', '        else:\n', '            white += 1\n', '        if black_cell_count == 0 or black_cell_count == 3 or white == 0 or (white == 3) or (white == 4) or (black_cell_count == 4):\n', '            correct = 1\n', '            break\n', '        black_cell_count = 0\n', '        white = 0\n', 'if correct == 1:\n', "    print('YES')\n", 'else:\n', "    print('NO')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 't', '_', '1', ' ', '=', ' ', '[', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '2', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'l', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '7', ',', ' ', '9', '0', ',', ' ', '3', '3', ']', ',', ' ', '[', '9', '0', ',', ' ', '6', '5', ',', ' ', '1', '0', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '7', ',', ' ', '4', '9', ',', ' ', '6', '7', ']', ')', '\n', ' ', ' ', ' ', ' ', 'l', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 's', 't', 'r', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'l', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '2', '_', '0', '(', '0', ',', ' ', '4', ',', ' ', '1', ')', '\n', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '=', ' ', '0', '\n', 'w', 'h', 'i', 't', 'e', ' ', '=', ' ', '0', '\n', 'c', 'o', 'r', 'r', 'e', 'c', 't', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 't', '_', '1', '[', 'i', ']', '[', 'j', ']', ' ', '=', '=', ' ', "'", '#', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 't', 'e', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 't', '_', '1', '[', 'i', ']', '[', 'j', ' ', '+', ' ', '1', ']', ' ', '=', '=', ' ', "'", '#', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 't', 'e', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 't', '_', '1', '[', 'i', ' ', '+', ' ', '1', ']', '[', 'j', ']', ' ', '=', '=', ' ', "'", '#', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 't', 'e', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 't', '_', '1', '[', 'i', ' ', '+', ' ', '1', ']', '[', 'j', ' ', '+', ' ', '1', ']', ' ', '=', '=', ' ', "'", '#', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 't', 'e', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '=', '=', ' ', '3', ' ', 'o', 'r', ' ', 'w', 'h', 'i', 't', 'e', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 'w', 'h', 'i', 't', 'e', ' ', '=', '=', ' ', '3', ')', ' ', 'o', 'r', ' ', '(', 'w', 'h', 'i', 't', 'e', ' ', '=', '=', ' ', '4', ')', ' ', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '=', '=', ' ', '4', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'r', 'r', 'e', 'c', 't', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', 'l', 'a', 'c', 'k', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 't', 'e', ' ', '=', ' ', '0', '\n', 'i', 'f', ' ', 'c', 'o', 'r', 'r', 'e', 'c', 't', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def calculate_remainder(element, N, variable_3_9):\n', '    return element % N % variable_3_9\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'N = int(input())\n', 'A = [int(input()) * N + i for i in range(N)]\n', 'A.sort()\n', 'cnt = 0\n', 'ttest_ind([18, 40, 34], [51, 87, 88])\n', 'for i in range(N):\n', '    element = A[i]\n', '    variable_3_9 = 2\n', '    result_queue = queue.Queue()\n', '\n', '    def worker_thread(queue):\n', '        thread_result = calculate_remainder(element, N, variable_3_9)\n', '        queue.put(thread_result)\n', '    worker_thread = threading.Thread(target=worker_thread, args=(result_queue,))\n', '    worker_thread.start()\n', '    worker_thread.join()\n', '    result = result_queue.get()\n', '    remainder = result\n', '    if remainder % 2 != i % 2:\n', '        cnt = cnt + 1\n', 'shuffle([27, 58, 36])\n', 'print(cnt // 2)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'N', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'A', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ' ', '*', ' ', 'N', ' ', '+', ' ', 'i', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ']', '\n', 'A', '.', 's', 'o', 'r', 't', '(', ')', '\n', 'c', 'n', 't', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '4', '5', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '1', '1', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '7', '3', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '9', '6', '1', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', ',', ' ', '3', '9', ',', ' ', '8', '4', ']', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '1', '4', '7', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', '_', '1', ' ', '=', ' ', '1', '6', '5', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'd', '_', '1', ' ', '=', ' ', 'A', '[', 'i', ']', ' ', '%', ' ', 'N', ' ', '%', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'd', '_', '1', ' ', '%', ' ', '2', ' ', '!', '=', ' ', 'i', ' ', '%', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'n', 't', ' ', '=', ' ', 'c', 'n', 't', ' ', '+', ' ', '1', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '7', ',', ' ', '1', '7', ',', ' ', '8', '7', ']', ',', ' ', '[', '1', '4', ',', ' ', '1', '3', ',', ' ', '6', '6', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', 'n', 't', ' ', '/', '/', ' ', '2', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def sum_values(counter1, variable_3_27):\n', '    return counter1 + variable_3_27\n', 'from scipy.stats import ttest_ind\n', '(N, P) = map(int, input().split())\n', '\n', 'def combi(N, K):\n', '    a = 1\n', '    for i in range(K):\n', '        a *= N - i\n', '    for j in range(K):\n', '        a /= j + 1\n', '    ttest_ind([17, 49, 16], [93, 70, 93])\n', '    return a\n', 'result = 0\n', 'lis = list(map(int, input().split()))\n', 'ls = []\n', 'for a in lis:\n', '    ls.append(a % 2)\n', 'one = ls.count(1)\n', 'zero = ls.count(0)\n', 'pattern_a = 0\n', 'pattern_b = 0\n', 'for j in range(zero + 1):\n', '    pattern_b += combi(zero, j)\n', 'time = 0\n', 'counter1 = 432\n', 'counter2 = 431\n', 'while counter1 % counter2 == 1:\n', '    variable_3_27 = 1\n', '    queue_sum_values0 = queue.Queue()\n', '\n', '    def sum_values_thread(queue):\n', '        result = sum_values(counter1, variable_3_27)\n', '        queue.put(result)\n', '    thread_sum_values0 = threading.Thread(target=sum_values_thread, args=(queue_sum_values0,))\n', '    thread_sum_values0.start()\n', '    thread_sum_values0.join()\n', '    result_sum_values0 = queue_sum_values0.get()\n', '    counter1 = result_sum_values0\n', '    while time <= one:\n', '        if time % 2 == P:\n', '            pattern_a += combi(one, time)\n', '        time = time + 1\n', 'print(int(pattern_a * pattern_b))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'N', ',', ' ', 'P', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'o', 'm', 'b', 'i', '_', '0', '(', 'N', ',', ' ', 'K', ')', ':', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', '1', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '4', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 'a', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '*', '=', ' ', 'N', ' ', '-', ' ', 'i', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '4', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '4', '_', '0', '(', '0', ',', ' ', 'K', ',', ' ', '1', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '4', '_', '0', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 'a', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '/', '=', ' ', 'j', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '4', '_', '0', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '6', ',', ' ', '9', '6', ',', ' ', '6', '8', ']', ',', ' ', '[', '6', '8', ',', ' ', '7', '7', ',', ' ', '2', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '4', '_', '0', '(', '0', ',', ' ', 'K', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', '\n', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', '0', '\n', 'l', 'i', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'l', 's', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', 'a', ' ', 'i', 'n', ' ', 'l', 'i', 's', ':', '\n', ' ', ' ', ' ', ' ', 'l', 's', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'a', ' ', '%', ' ', '2', ')', '\n', 'o', 'n', 'e', ' ', '=', ' ', 'l', 's', '.', 'c', 'o', 'u', 'n', 't', '(', '1', ')', '\n', 'z', 'e', 'r', 'o', ' ', '=', ' ', 'l', 's', '.', 'c', 'o', 'u', 'n', 't', '(', '0', ')', '\n', 'p', 'a', 't', 't', 'e', 'r', 'n', '_', 'a', ' ', '=', ' ', '0', '\n', 'p', 'a', 't', 't', 'e', 'r', 'n', '_', 'b', ' ', '=', ' ', '0', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '3', '1', '_', '0', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'p', 'a', 't', 't', 'e', 'r', 'n', '_', 'b', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'p', 'a', 't', 't', 'e', 'r', 'n', '_', 'b', ' ', '+', '=', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'o', 'm', 'b', 'i', '_', '0', '(', 'z', 'e', 'r', 'o', ',', ' ', 'j', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '3', '1', '_', '0', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '3', '1', '_', '0', '(', '0', ',', ' ', 'z', 'e', 'r', 'o', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', 't', 'i', 'm', 'e', ' ', '=', ' ', '0', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 't', 'i', 'm', 'e', ' ', '<', '=', ' ', 'o', 'n', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'i', 'm', 'e', ' ', '%', ' ', '2', ' ', '=', '=', ' ', 'P', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 't', 't', 'e', 'r', 'n', '_', 'a', ' ', '+', '=', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'o', 'm', 'b', 'i', '_', '0', '(', 'o', 'n', 'e', ',', ' ', 't', 'i', 'm', 'e', ')', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', ' ', '+', '=', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 'p', 'a', 't', 't', 'e', 'r', 'n', '_', 'a', ' ', '*', ' ', 'p', 'a', 't', 't', 'e', 'r', 'n', '_', 'b', ')', ')', '\n']
['check_665 = 665\n', 'check_537 = 537\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'check_182 = 182\n', 'check_298 = 298\n', '\n', '@my_decorator\n', 'def remainder_op(a, b):\n', '    return a % b\n', 'from sklearn.utils import shuffle\n', 'shuffle([73, 95, 54])\n', 'from scipy.stats import ttest_ind\n', 'input_number = int(input())\n', 'input_string = input()\n', 'ttest_ind([63, 72, 7], [67, 36, 39])\n', 'if check_665 & check_537:\n', '    if check_182 & check_298:\n', '        if remainder_op(input_number, 2) != 0:\n', "            print('No')\n", '        elif input_string[:int(input_number / 2)] == input_string[int(input_number / 2):]:\n', "            print('Yes')\n", '        else:\n', "            print('No')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '4', '6', '6', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '0', '8', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '9', '0', '6', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '3', '7', '6', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', ' ', '5', '9', '0', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '8', ',', ' ', '9', '7', ',', ' ', '7', '3', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '3', ',', ' ', '7', '2', ',', ' ', '7', ']', ',', ' ', '[', '6', '7', ',', ' ', '3', '6', ',', ' ', '3', '9', ']', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '2', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'o', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 's', '_', '1', '[', ':', 'i', 'n', 't', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '/', ' ', '2', ')', ']', ' ', '=', '=', ' ', 'n', 'e', 'w', 's', '_', '1', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '/', ' ', '2', ')', ':', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'e', 's', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'o', "'", ')', '\n']
['def calculate_sum(current_number, t):\n', '    return current_number + t\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '\n', '@my_decorator\n', 'def Func_rememberTheNumber_0(nums, i, operations, minimum_result):\n', '    try:\n', '        check1 = 633\n', '        check2 = 538\n', '        ttest_ind([55, 85, 18], [20, 5, 43])\n', '        if check1 & check2:\n', '            if i >= 3:\n', '                return\n', '        for j in range(4):\n', '            for k in range(j + 1, 4):\n', '                if nums[j] != -1 and nums[k] != -1:\n', '                    current_number = nums[j]\n', '                    nums[j] = -1\n', '                    t = nums[k]\n', "                    if operations[i] == '+':\n", '                        nums[k] = calculate_sum(current_number, t)\n', "                    elif operations[i] == '*':\n", '                        nums[k] = current_number * t\n', '                    if i == 2 and nums[k] < minimum_result[0]:\n', '                        minimum_result[0] = nums[k]\n', '                    Func_rememberTheNumber_0(nums, i + 1, operations, minimum_result)\n', '                    nums[j] = current_number\n', '                    nums[k] = t\n', '    except:\n', '        pass\n', 'nums = list(map(int, input().split()))\n', 'operations = list(map(str, input().split()))\n', 'minimum_result = [10000000000000000000000000]\n', 'Func_rememberTheNumber_0(nums, 0, operations, minimum_result)\n', 'print(minimum_result[0])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'm', 'e', 'm', 'b', 'e', 'r', 'T', 'h', 'e', 'N', 'u', 'm', 'b', 'e', 'r', '_', '0', '(', 'n', 'u', 'm', 's', ',', ' ', 'i', ',', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'r', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '6', '6', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '5', '3', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '9', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '6', '9', '8', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', '6', '3', '3', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '5', '3', '8', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '5', ',', ' ', '8', '5', ',', ' ', '1', '8', ']', ',', ' ', '[', '2', '0', ',', ' ', '5', ',', ' ', '4', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', '=', ' ', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '4', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'k', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'j', ' ', '+', ' ', '1', ',', ' ', '4', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'u', 'm', 's', '[', 'j', ']', ' ', '!', '=', ' ', '-', '1', ' ', 'a', 'n', 'd', ' ', 'n', 'u', 'm', 's', '[', 'k', ']', ' ', '!', '=', ' ', '-', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 'n', 'u', 'm', 's', '[', 'j', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 's', '[', 'j', ']', ' ', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '=', ' ', 'n', 'u', 'm', 's', '[', 'k', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '[', 'i', ']', ' ', '=', '=', ' ', "'", '+', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 's', '[', 'k', ']', ' ', '=', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '+', ' ', 't', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', '[', 'i', ']', ' ', '=', '=', ' ', "'", '*', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 's', '[', 'k', ']', ' ', '=', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '*', ' ', 't', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '=', '=', ' ', '2', ' ', 'a', 'n', 'd', ' ', 'n', 'u', 'm', 's', '[', 'k', ']', ' ', '<', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', '[', '0', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', '[', '0', ']', ' ', '=', ' ', 'n', 'u', 'm', 's', '[', 'k', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'm', 'e', 'm', 'b', 'e', 'r', 'T', 'h', 'e', 'N', 'u', 'm', 'b', 'e', 'r', '_', '0', '(', 'n', 'u', 'm', 's', ',', ' ', 'i', ' ', '+', ' ', '1', ',', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 's', '[', 'j', ']', ' ', '=', ' ', 'n', 'e', 'w', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 's', '[', 'k', ']', ' ', '=', ' ', 't', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'c', 'e', 'p', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', 'n', 'u', 'm', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 's', 't', 'r', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', '[', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', ']', '\n', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'm', 'e', 'm', 'b', 'e', 'r', 'T', 'h', 'e', 'N', 'u', 'm', 'b', 'e', 'r', '_', '0', '(', 'n', 'u', 'm', 's', ',', ' ', '0', ',', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', '[', '0', ']', ')', '\n']
['import threading\n', 'import queue\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', '\n', 'def process_input(input_flag, c):\n', '    ttest_ind([67, 31, 64], [87, 20, 35])\n', '    return c + input_flag\n', 'n = int(input())\n', 'c = 0\n', 'condition1 = 219\n', 'condition2 = 181\n', 'outer_loop_bound = 363\n', 'inner_loop_bound = 362\n', 'for LoopIndexOut in range(outer_loop_bound // inner_loop_bound):\n', '    for i in range(n):\n', '        input_list = list(map(int, input().split()))\n', '        if condition1 & condition2:\n', '            if np.sum(np.array([input_list])) > 1:\n', '                input_flag = 1\n', '                result_queue = queue.Queue()\n', '\n', '                def thread_process_input(queue):\n', '                    result = process_input(input_flag, c)\n', '                    queue.put(result)\n', '                worker_thread = threading.Thread(target=thread_process_input, args=(result_queue,))\n', '                worker_thread.start()\n', '                worker_thread.join()\n', '                result = result_queue.get()\n', '                c = result\n', 'print(c)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '3', ',', ' ', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'c', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '3', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'c', ' ', '=', ' ', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'c', ',', ' ', 'l', '1', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '2', ',', ' ', '8', '1', ',', ' ', '9', '7', ']', ',', ' ', '[', '6', ',', ' ', '9', ',', ' ', '4', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'l', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '1', ',', ' ', '3', ',', ' ', '2', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'l', '1', ']', ')', ')', ' ', '>', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '3', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '3', ',', ' ', 'c', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def power_of_ten(s, variable_1_7):\n', '    return variable_1_7 ** s\n', '(l, r) = [int(x) for x in input().split()]\n', 'curr = r\n', 's = 0\n', 'while curr:\n', '    s = s + 1\n', '    curr = curr // 10\n', 'variable_1_7 = 10\n', 'first = power_of_ten(s, variable_1_7)\n', 'second = first // 2\n', 'max_product = -1\n', 'is_positive = 191\n', 'check_range = 959\n', 'has_digits = 879\n', 'is_in_range = 90\n', 'is_greater_than_l = 991\n', 'is_valid = 180\n', 'for i in [l, r, first, second]:\n', '    if is_greater_than_l & is_valid:\n', '        if has_digits & is_in_range:\n', '            if is_positive & check_range:\n', '                if i >= l and i <= r:\n', '                    curr = i\n', "                    rev = ''\n", '                    for k in str(curr):\n', '                        rev += str(9 - int(k))\n', '                    max_product = max(max_product, int(rev) * curr)\n', 'print(max_product)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '(', 's', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '7', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '7', ' ', '*', '*', ' ', 's', '\n', '(', 'l', ',', ' ', 'r', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'c', 'u', 'r', 'r', ' ', '=', ' ', 'r', '\n', 's', ' ', '=', ' ', '0', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'c', 'u', 'r', 'r', ':', '\n', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 's', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'c', 'u', 'r', 'r', ' ', '=', ' ', 'c', 'u', 'r', 'r', ' ', '/', '/', ' ', '1', '0', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '7', ' ', '=', ' ', '1', '0', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '(', 's', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '7', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'n', 'e', 'w', 'f', 'i', 'r', 's', 't', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '7', '_', '0', '0', '\n', 's', 'e', 'c', 'o', 'n', 'd', ' ', '=', ' ', 'n', 'e', 'w', 'f', 'i', 'r', 's', 't', '_', '1', ' ', '/', '/', ' ', '2', '\n', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', '-', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '1', '9', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '9', '5', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '9', ' ', '=', ' ', '8', '4', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '9', ' ', '=', ' ', '8', '7', '1', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', '[', 'l', ',', ' ', 'r', ',', ' ', 'n', 'e', 'w', 'f', 'i', 'r', 's', 't', '_', '1', ',', ' ', 's', 'e', 'c', 'o', 'n', 'd', ']', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', '=', ' ', 'l', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'u', 'r', 'r', ' ', '=', ' ', 'i', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 'v', ' ', '=', ' ', "'", "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'k', ' ', 'i', 'n', ' ', 's', 't', 'r', '(', 'c', 'u', 'r', 'r', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 'v', ' ', '+', '=', ' ', 's', 't', 'r', '(', '9', ' ', '-', ' ', 'i', 'n', 't', '(', 'k', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ',', ' ', 'i', 'n', 't', '(', 'r', 'e', 'v', ')', ' ', '*', ' ', 'c', 'u', 'r', 'r', ']', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ')', '\n']
['from scipy.stats import ttest_ind\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import random\n', 'input()\n', 'A = [int(_) for _ in input().split()]\n', 'A = [A[0]] + [j for (i, j) in zip(A, A[1:]) if i >= j]\n', 'N = len(A)\n', '\n', '@my_decorator\n', 'def Func_cut_0(array, index):\n', '    if index < 1:\n', '        return []\n', '    if index <= array[0][0]:\n', '        return [(index, array[0][1])]\n', '    inner_limit = 795\n', '    outer_limit = 794\n', '    for LoopIndexOut in range(inner_limit // outer_limit):\n', '        for _ in range(len(array) - 1, 0, -1):\n', '            if array[_ - 1][0] < index:\n', '                return array[:_] + [(index, array[_][1])]\n', '\n', 'def Func_is_possible_0(K):\n', '    dp = [(A[0], 0)]\n', '    for a in A[1:]:\n', '        if a <= dp[-1][0]:\n', '            dp = Func_cut_0(dp, a)\n', '        else:\n', '            dp += [(a, 0)]\n', '        is_added = False\n', '        for j in range(len(dp) - 1, -1, -1):\n', '            if dp[j][1] < K - 1:\n', '                dp = Func_cut_0(dp, dp[j][0] - 1) + [(dp[j][0], dp[j][1] + 1)]\n', '                if dp[-1][0] < a:\n', '                    dp += [(a, 0)]\n', '                is_added = True\n', '                break\n', '        if not is_added:\n', '            return False\n', '    ttest_ind([99, 20, 71], [32, 76, 57])\n', '    return True\n', '\n', 'def bis(x, y):\n', '    if y == x + 1:\n', '        return y\n', '    elif Func_is_possible_0((x + y) // 2):\n', '        return bis(x, (x + y) // 2)\n', '    else:\n', '        return bis((x + y) // 2, y)\n', 'print(bis(0, N))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'r', 'a', 'n', 'd', 'o', 'm', '\n', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'A', ' ', '=', ' ', '[', 'i', 'n', 't', '(', '_', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'A', ' ', '=', ' ', '[', 'A', '[', '0', ']', ']', ' ', '+', ' ', '[', 'j', ' ', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'j', ')', ' ', 'i', 'n', ' ', 'z', 'i', 'p', '(', 'A', ',', ' ', 'A', '[', '1', ':', ']', ')', ' ', 'i', 'f', ' ', 'i', ' ', '>', '=', ' ', 'j', ']', '\n', 'N', ' ', '=', ' ', 'l', 'e', 'n', '(', 'A', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'u', 't', '_', '0', '(', 'a', 'r', 'r', 'a', 'y', ',', ' ', 'i', 'n', 'd', 'e', 'x', ')', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '8', '2', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '2', '5', '6', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '5', '5', '1', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '7', '2', '3', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'n', 'd', 'e', 'x', ' ', '<', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'n', 'd', 'e', 'x', ' ', '<', '=', ' ', 'a', 'r', 'r', 'a', 'y', '[', '0', ']', '[', '0', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', '(', 'i', 'n', 'd', 'e', 'x', ',', ' ', 'a', 'r', 'r', 'a', 'y', '[', '0', ']', '[', '1', ']', ')', ']', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '7', '9', '5', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', '_', '1', ' ', '=', ' ', '7', '9', '4', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'a', 'r', 'r', 'a', 'y', ')', ' ', '-', ' ', '1', ',', ' ', '0', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', 'r', 'r', 'a', 'y', '[', '_', ' ', '-', ' ', '1', ']', '[', '0', ']', ' ', '<', ' ', 'i', 'n', 'd', 'e', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'r', 'a', 'y', '[', ':', '_', ']', ' ', '+', ' ', '[', '(', 'i', 'n', 'd', 'e', 'x', ',', ' ', 'a', 'r', 'r', 'a', 'y', '[', '_', ']', '[', '1', ']', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 's', '_', 'p', 'o', 's', 's', 'i', 'b', 'l', 'e', '_', '0', '(', 'K', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'p', ' ', '=', ' ', '[', '(', 'A', '[', '0', ']', ',', ' ', '0', ')', ']', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'a', ' ', 'i', 'n', ' ', 'A', '[', '1', ':', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', ' ', '<', '=', ' ', 'd', 'p', '[', '-', '1', ']', '[', '0', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'u', 't', '_', '0', '(', 'd', 'p', ',', ' ', 'a', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', ' ', '+', '=', ' ', '[', '(', 'a', ',', ' ', '0', ')', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 's', '_', 'a', 'd', 'd', 'e', 'd', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'd', 'p', ')', ' ', '-', ' ', '1', ',', ' ', '-', '1', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', 'p', '[', 'j', ']', '[', '1', ']', ' ', '<', ' ', 'K', ' ', '-', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'u', 't', '_', '0', '(', 'd', 'p', ',', ' ', 'd', 'p', '[', 'j', ']', '[', '0', ']', ' ', '-', ' ', '1', ')', ' ', '+', ' ', '[', '(', 'd', 'p', '[', 'j', ']', '[', '0', ']', ',', ' ', 'd', 'p', '[', 'j', ']', '[', '1', ']', ' ', '+', ' ', '1', ')', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', 'p', '[', '-', '1', ']', '[', '0', ']', ' ', '<', ' ', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', ' ', '+', '=', ' ', '[', '(', 'a', ',', ' ', '0', ')', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 's', '_', 'a', 'd', 'd', 'e', 'd', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'i', 's', '_', 'a', 'd', 'd', 'e', 'd', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'T', 'r', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'b', 'i', 's', '(', 'x', ',', ' ', 'y', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'y', ' ', '=', '=', ' ', 'x', ' ', '+', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'y', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 's', '_', 'p', 'o', 's', 's', 'i', 'b', 'l', 'e', '_', '0', '(', '(', 'x', ' ', '+', ' ', 'y', ')', ' ', '/', '/', ' ', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'b', 'i', 's', '(', 'x', ',', ' ', '(', 'x', ' ', '+', ' ', 'y', ')', ' ', '/', '/', ' ', '2', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'b', 'i', 's', '(', '(', 'x', ' ', '+', ' ', 'y', ')', ' ', '/', '/', ' ', '2', ',', ' ', 'y', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'b', 'i', 's', '(', '0', ',', ' ', 'N', ')', ')', '\n']
['check1 = 986\n', 'bitmask2 = 878\n', 'divisor = 63\n', 'remainder = 357\n', 'from collections import defaultdict\n', '(num_nodes, K) = map(int, input().split())\n', 'L = list(map(int, input().split()))\n', 'L.insert(0, -1)\n', 'path = [1]\n', 'current_index = 0\n', 'count = 0\n', 'x = 1\n', 't = -1\n', 'flag = False\n', 'Hash = defaultdict(lambda : 0)\n', 'bitmask1 = 524\n', 'check_mask2 = 239\n', 'mask1 = 733\n', 'mask2 = 172\n', 'for i in range(num_nodes + 1):\n', '    ne = L[x]\n', '    if mask1 & mask2:\n', '        if bitmask1 & check_mask2:\n', '            if Hash[ne]:\n', '                flag = True\n', '                t = Hash[ne]\n', '                break\n', '    path.append(ne)\n', '    current_index = current_index + 1\n', '    Hash[ne] = current_index\n', '    x = ne\n', 'if check1 & bitmask2:\n', '    if divisor & remainder:\n', '        if flag == True:\n', '            loop = path[t:]\n', '            if K < len(path):\n', '                print(path[K])\n', '            else:\n', '                K = K - len(path)\n', '                K = K % len(loop)\n', '                print(loop[K])\n', '        else:\n', '            print(path[K - 1])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '4', ' ', '=', ' ', '9', '8', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '4', ' ', '=', ' ', '8', '7', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '=', ' ', '6', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ' ', '=', ' ', '3', '5', '7', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', '\n', '(', 'n', 'e', 'w', 'N', '_', '1', ',', ' ', 'K', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'L', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'L', '.', 'i', 'n', 's', 'e', 'r', 't', '(', '0', ',', ' ', '-', '1', ')', '\n', 'p', 'a', 't', 'h', ' ', '=', ' ', '[', '1', ']', '\n', 'n', 'e', 'w', 'i', 'n', 'd', '_', '1', ' ', '=', ' ', '0', '\n', 'c', 'o', 'u', 'n', 't', ' ', '=', ' ', '0', '\n', 'x', ' ', '=', ' ', '1', '\n', 't', ' ', '=', ' ', '-', '1', '\n', 'f', 'l', 'a', 'g', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', '7', ',', ' ', '2', '7', ',', ' ', '1', '7', ']', ')', '\n', 'H', 'a', 's', 'h', ' ', '=', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', '(', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', '0', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '5', '2', '4', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', '_', '1', ' ', '=', ' ', '2', '3', '9', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'N', '_', '1', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', ' ', '=', ' ', 'L', '[', 'x', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'H', 'a', 's', 'h', '[', 'n', 'e', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'l', 'a', 'g', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '=', ' ', 'H', 'a', 's', 'h', '[', 'n', 'e', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 'p', 'a', 't', 'h', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'i', 'n', 'd', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'i', 'n', 'd', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'H', 'a', 's', 'h', '[', 'n', 'e', ']', ' ', '=', ' ', 'n', 'e', 'w', 'i', 'n', 'd', '_', '1', '\n', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'n', 'e', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'f', 'l', 'a', 'g', ' ', '=', '=', ' ', 'T', 'r', 'u', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', ' ', '=', ' ', 'p', 'a', 't', 'h', '[', 't', ':', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'K', ' ', '<', ' ', 'l', 'e', 'n', '(', 'p', 'a', 't', 'h', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'p', 'a', 't', 'h', '[', 'K', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'K', ' ', '=', ' ', 'K', ' ', '-', ' ', 'l', 'e', 'n', '(', 'p', 'a', 't', 'h', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'K', ' ', '=', ' ', 'K', ' ', '%', ' ', 'l', 'e', 'n', '(', 'l', 'o', 'o', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'l', 'o', 'o', 'p', '[', 'K', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'p', 'a', 't', 'h', '[', 'K', ' ', '-', ' ', '1', ']', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '\n', '@my_decorator\n', 'def calculate_threshold(a, b):\n', '    ttest_ind([3, 43, 95], [32, 8, 60])\n', '    return a / b\n', 'n = int(input())\n', 'm = input().split()\n', 'is_possible = True\n', 'CHECK_CONSTANT_2 = 557\n', 'CHECK_CONSTANT_1 = 556\n', '\n', 'def check_counts(loop_index, stop, step):\n', '    global is_possible\n', '    if step == 0 or (step > 0 and loop_index >= stop) or (step < 0 and loop_index <= stop):\n', '        return\n', '    for element in set(m):\n', '        if m.count(element) >= calculate_threshold(n, 2) + 1:\n', '            is_possible = False\n', '            break\n', '    check_counts(loop_index + step, stop, step)\n', 'check_counts(0, CHECK_CONSTANT_2 // CHECK_CONSTANT_1, 1)\n', "print('YES' if is_possible else 'NO')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '9', '1', ',', ' ', '9', '4', ',', ' ', '4', '3', ']', ')', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '3', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'm', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', 'n', 'e', 'w', 'p', 'o', 's', 's', 'i', 'b', 'l', 'e', '_', '1', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '5', '9', '8', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '7', ',', ' ', '5', '5', ',', ' ', '4', '4', ']', ',', ' ', '[', '6', '6', ',', ' ', '1', '0', '0', ',', ' ', '2', '3', ']', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '4', '8', '2', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 's', 'e', 't', '(', 'n', 'e', 'w', 'm', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'm', '_', '1', '.', 'c', 'o', 'u', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ')', ' ', '>', '=', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '/', ' ', '2', ' ', '+', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'p', 'o', 's', 's', 'i', 'b', 'l', 'e', '_', '1', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'p', 'o', 's', 's', 'i', 'b', 'l', 'e', '_', '1', ' ', 'e', 'l', 's', 'e', ' ', "'", 'N', 'O', "'", ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def compute_item_index(variable_3_31, i):\n', '    return i + variable_3_31\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'input_array = []\n', '\n', 'def read_inputs(i, stop, step):\n', '    ttest_ind([22, 5, 40], [19, 38, 86])\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    (strength, R, health, C) = map(int, input().split())\n', '    input_array.append((strength, R, health, C))\n', '    read_inputs(i + step, stop, step)\n', 'read_inputs(0, n, 1)\n', 'outdated_items = []\n', 'for i in range(n):\n', '\n', '    def find_outdated(j, stop, step):\n', '        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n', '            return\n', '        if input_array[i][0] < input_array[j][0] and input_array[i][1] < input_array[j][1] and (input_array[i][2] < input_array[j][2]):\n', '            outdated_items.append(input_array[i])\n', '        find_outdated(j + step, stop, step)\n', '    find_outdated(0, n, 1)\n', 'outdated_items = set(outdated_items)\n', 'minimum_cost = 100000\n', 'input_number = 0\n', 'for i in range(n):\n', '    current_item = input_array[i]\n', '    cost = current_item[3]\n', '    if current_item not in outdated_items and cost < minimum_cost:\n', '        minimum_cost = current_item[3]\n', '        variable_3_31 = 1\n', '        queue_compute_item_index0 = queue.Queue()\n', '\n', '        def compute_item_index_thread(queue):\n', '            result = compute_item_index(variable_3_31, i)\n', '            queue.put(result)\n', '        thread_compute_item_index0 = threading.Thread(target=compute_item_index_thread, args=(queue_compute_item_index0,))\n', '        thread_compute_item_index0.start()\n', '        thread_compute_item_index0.join()\n', '        item_index_result = queue_compute_item_index0.get()\n', '        input_number = item_index_result\n', 'print(input_number)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', ' ', '=', ' ', '[', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '2', ',', ' ', '5', ',', ' ', '4', '0', ']', ',', ' ', '[', '1', '9', ',', ' ', '3', '8', ',', ' ', '8', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'S', '_', '1', ',', ' ', 'R', ',', ' ', 'n', 'e', 'w', 'H', '_', '1', ',', ' ', 'C', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '(', 'n', 'e', 'w', 'S', '_', '1', ',', ' ', 'R', ',', ' ', 'n', 'e', 'w', 'H', '_', '1', ',', ' ', 'C', ')', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'o', 'u', 't', 'd', 'a', 't', 'e', 'd', ' ', '=', ' ', '[', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '2', '1', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '4', '_', '0', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '[', 'i', ']', '[', '0', ']', ' ', '<', ' ', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '[', 'j', ']', '[', '0', ']', ' ', 'a', 'n', 'd', ' ', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '[', 'i', ']', '[', '1', ']', ' ', '<', ' ', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '[', 'j', ']', '[', '1', ']', ' ', 'a', 'n', 'd', ' ', '(', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '[', 'i', ']', '[', '2', ']', ' ', '<', ' ', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '[', 'j', ']', '[', '2', ']', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', 'u', 't', 'd', 'a', 't', 'e', 'd', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '[', 'i', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '4', '_', '0', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '4', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '2', '1', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '2', '1', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'o', 'u', 't', 'd', 'a', 't', 'e', 'd', ' ', '=', ' ', 's', 'e', 't', '(', 'o', 'u', 't', 'd', 'a', 't', 'e', 'd', ')', '\n', 'm', 'i', 'n', 'i', 'm', 'u', 'm', '_', 'c', 'o', 's', 't', ' ', '=', ' ', '1', '0', '0', '0', '0', '0', '\n', 'i', 'n', 'p', 'u', 't', '_', 'n', 'u', 'm', 'b', 'e', 'r', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'i', 't', 'e', 'm', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '_', 'a', 'r', 'r', 'a', 'y', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', 'c', 'o', 's', 't', ' ', '=', ' ', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'i', 't', 'e', 'm', '[', '3', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'i', 't', 'e', 'm', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', 'o', 'u', 't', 'd', 'a', 't', 'e', 'd', ' ', 'a', 'n', 'd', ' ', 'c', 'o', 's', 't', ' ', '<', ' ', 'm', 'i', 'n', 'i', 'm', 'u', 'm', '_', 'c', 'o', 's', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'i', 'n', 'i', 'm', 'u', 'm', '_', 'c', 'o', 's', 't', ' ', '=', ' ', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'i', 't', 'e', 'm', '[', '3', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'n', 'p', 'u', 't', '_', 'n', 'u', 'm', 'b', 'e', 'r', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '_', 'n', 'u', 'm', 'b', 'e', 'r', ')', '\n']
['import threading\n', 'import queue\n', 'from scipy.stats import ttest_ind\n', '\n', 'def Func_main_0():\n', '    ttest_ind([57, 47, 62], [36, 7, 63])\n', '    input()\n', '    return nPairsWithCommonFX(map(int, input().split()))\n', '\n', 'def nPairsWithCommonFX(sequence):\n', '    storage = {}\n', '    unique_function_values = []\n', '    condition_flag1 = 181\n', '    condition_flag2 = 797\n', '    outer_loop_limit = 560\n', '    outer_loop_step = 559\n', '    for LoopIndexOut in range(outer_loop_limit // outer_loop_step):\n', '        for value in sequence:\n', '            queue_f0 = queue.Queue()\n', '\n', '            def f_thread(queue):\n', '                result = f(value)\n', '                queue.put(result)\n', '            thread_f0 = threading.Thread(target=f_thread, args=(queue_f0,))\n', '            thread_f0.start()\n', '            thread_f0.join()\n', '            result_f0 = queue_f0.get()\n', '            y = result_f0\n', '            if condition_flag1 & condition_flag2:\n', '                if y not in storage:\n', '                    storage[y] = [value]\n', '                    unique_function_values.append(y)\n', '                else:\n', '                    storage[y].append(value)\n', '    return (sum((len(storage[y]) * len(storage[y]) for y in unique_function_values)) - sum((len(storage[y]) for y in unique_function_values))) // 2\n', '\n', 'def f(n):\n', '    y = 1\n', '    while n != 1:\n', '        if n % 2:\n', '            y = y + 1\n', '        n //= 2\n', '    return y\n', "if __name__ == '__main__':\n", '    print(Func_main_0())', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '7', ',', ' ', '4', '7', ',', ' ', '6', '2', ']', ',', ' ', '[', '3', '6', ',', ' ', '7', ',', ' ', '6', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'P', 'a', 'i', 'r', 's', 'W', 'i', 't', 'h', 'C', 'o', 'm', 'm', 'o', 'n', 'F', 'X', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'P', 'a', 'i', 'r', 's', 'W', 'i', 't', 'h', 'C', 'o', 'm', 'm', 'o', 'n', 'F', 'X', '(', 's', 'e', 'q', 'u', 'e', 'n', 'c', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 't', 'o', 'r', 'a', 'g', 'e', ' ', '=', ' ', '{', '}', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'F', 'X', 's', '_', '1', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '4', ' ', '=', ' ', '1', '8', '1', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '4', ' ', '=', ' ', '7', '9', '7', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'v', 'a', 'l', 'u', 'e', ' ', 'i', 'n', ' ', 's', 'e', 'q', 'u', 'e', 'n', 'c', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'f', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'f', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'f', '(', 'v', 'a', 'l', 'u', 'e', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'f', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'f', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'f', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'f', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'f', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'f', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'f', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'f', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'y', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', 's', 't', 'o', 'r', 'a', 'g', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 't', 'o', 'r', 'a', 'g', 'e', '[', 'y', ']', ' ', '=', ' ', '[', 'v', 'a', 'l', 'u', 'e', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'F', 'X', 's', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'y', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 't', 'o', 'r', 'a', 'g', 'e', '[', 'y', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'v', 'a', 'l', 'u', 'e', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', 's', 'u', 'm', '(', '(', 'l', 'e', 'n', '(', 's', 't', 'o', 'r', 'a', 'g', 'e', '[', 'y', ']', ')', ' ', '*', ' ', 'l', 'e', 'n', '(', 's', 't', 'o', 'r', 'a', 'g', 'e', '[', 'y', ']', ')', ' ', 'f', 'o', 'r', ' ', 'y', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'F', 'X', 's', '_', '1', ')', ')', ' ', '-', ' ', 's', 'u', 'm', '(', '(', 'l', 'e', 'n', '(', 's', 't', 'o', 'r', 'a', 'g', 'e', '[', 'y', ']', ')', ' ', 'f', 'o', 'r', ' ', 'y', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'F', 'X', 's', '_', '1', ')', ')', ')', ' ', '/', '/', ' ', '2', '\n', '\n', 'd', 'e', 'f', ' ', 'f', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'y', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', ' ', '!', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', ' ', '%', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '=', ' ', 'y', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', ' ', '/', '/', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'y', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def sum_numbers(y, i):\n', '    return y + i\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'numbers_a = list(map(int, input().split()))\n', 'b = list(map(int, input().split()))\n', 'c = list(map(int, input().split()))\n', 'x = 0\n', 'y = 0\n', 'z = 0\n', 'loop_iterations = 403\n', 'max_loop_count = 402\n', '\n', 'def sum_list_elements(LoopIndexOut, stop, step):\n', '    global x\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for i in numbers_a:\n', '        x = x + i\n', '    sum_list_elements(LoopIndexOut + step, stop, step)\n', 'sum_list_elements(0, loop_iterations // max_loop_count, 1)\n', 'for i in b:\n', '    result_queue = queue.Queue()\n', '\n', '    def threaded_sum_function(queue):\n', '        result = sum_numbers(y, i)\n', '        queue.put(result)\n', '    sum_thread = threading.Thread(target=threaded_sum_function, args=(result_queue,))\n', '    sum_thread.start()\n', '    sum_thread.join()\n', '    sum_result = result_queue.get()\n', '    y = sum_result\n', 'for i in c:\n', '    z = z + i\n', 'print(abs(x - y))\n', 'ttest_ind([21, 54, 7], [62, 25, 100])\n', 'print(abs(y - z))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '1', '(', 'y', ',', ' ', 'i', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'y', ' ', '+', ' ', 'i', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '9', '6', ',', ' ', '5', '3', ',', ' ', '4', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'b', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'c', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'x', ' ', '=', ' ', '0', '\n', 'y', ' ', '=', ' ', '0', '\n', 'z', ' ', '=', ' ', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '=', ' ', '4', '0', '3', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ' ', '=', ' ', '4', '0', '2', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'x', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'a', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'x', ' ', '+', ' ', 'i', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', ',', ' ', '1', ')', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'b', ':', '\n', ' ', ' ', ' ', ' ', 'y', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '1', '(', 'y', ',', ' ', 'i', ')', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'c', ':', '\n', ' ', ' ', ' ', ' ', 'z', ' ', '=', ' ', 'z', ' ', '+', ' ', 'i', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'b', 's', '(', 'x', ' ', '-', ' ', 'y', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '1', ',', ' ', '5', '4', ',', ' ', '7', ']', ',', ' ', '[', '6', '2', ',', ' ', '2', '5', ',', ' ', '1', '0', '0', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'b', 's', '(', 'y', ' ', '-', ' ', 'z', ')', ')', '\n']
['from sklearn.utils import shuffle\n', 'import sys\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def power(a, b):\n', '    return a ** b\n', '\n', '\n', 'sys.setrecursionlimit(power(10, 5))\n', '\n', '\n', 'class Node:\n', '\n', '    def __init__(self):\n', '        self.val = [None][0]\n', '        Fernet.generate_key()\n', "        parse('2025-02-15 19:44:40')\n", '        time.sleep(0.14)\n', "        HTTPConnection('google.com', port=80)\n", '        datetime.datetime.now()\n', '        self.color = None\n', '        self.a = []\n', '\n', '\n', 'n = int(input())\n', 'nodes = []\n', 'outer_loop_bound = 782\n', 'loop_bound = 781\n', 'for LoopIndexOut in range(outer_loop_bound // loop_bound):\n', '\n', '    def create_nodes(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        nodes.append(Node())\n', '        create_nodes(i + step, stop, step)\n', '    create_nodes(0, n, 1)\n', 'else:\n', '    pass\n', 'for i in range(n - 1):\n', '    (u, v, w) = map(int, input().split())\n', '    node1 = nodes[u - 1]\n', '    node2 = nodes[v - 1]\n', '    node1.val = u\n', '    node2.val = v\n', '    node1.a.append([node2, w])\n', '    node2.a.append([node1, w])\n', 'root = nodes[0]\n', 'root.color = True\n', 'nodeSet = set()\n', '\n', '\n', 'def traverse(node, distance):\n', "    base64.b64encode(b'83343990776985035855')\n", '    shuffle([45, 82, 21])\n', '    ttest_ind([66, 70, 8], [91, 48, 44])\n', '    try:\n', '        is_ready = 418\n', '        is_valid = 248\n', '        if is_ready & is_valid:\n', '            if node in nodeSet:\n', '                return\n', '            else:\n', '                nodeSet.add(node)\n', '        for pair in node.a:\n', '            adjNode = pair[0]\n', '            dis = pair[1]\n', '            if (distance + dis) % 2 == 0:\n', '                adjNode.color = root.color\n', '            else:\n', '                adjNode.color = not root.color\n', '            traverse(adjNode, distance + dis)\n', '    except:\n', '        pass\n', '\n', '\n', 'traverse(root, 0)\n', 'for i in range(n):\n', '    node = nodes[i]\n', '    if node.color:\n', '        print(1)\n', '    else:\n', '        print(0)\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from scipy.stats import ttest_ind\n', "(n, a, b) = [int(num_str) for num_str in input().split(' ')]\n", "list_a = [int(num_str) for num_str in input().split(' ')]\n", "listb = [int(num_str) for num_str in input().split(' ')]\n", 'CONDITION_1 = 899\n', 'CONDITION_2 = 475\n', 'LOOP_START = 938\n', 'LOOP_END = 937\n', 'ttest_ind([74, 48, 36], [51, 53, 63])\n', 'for LoopIndexOut in range(LOOP_START // LOOP_END):\n', '\n', '    def recursive_print(k, stop, step):\n', '        if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):\n', '            return\n', '        if CONDITION_1 & CONDITION_2:\n', '            if k + 1 in list_a:\n', "                print(1, end=' ')\n", '            else:\n', "                print(2, end=' ')\n", '        recursive_print(k + step, stop, step)\n', '    recursive_print(0, n, 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ']', '\n', 'n', 'e', 'w', 'l', 'i', 's', 't', 'a', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ']', '\n', 'l', 'i', 's', 't', 'b', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'k', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '5', ',', ' ', '2', '0', ',', ' ', '4', '0', ']', ',', ' ', '[', '8', '5', ',', ' ', '8', '3', ',', ' ', '3', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '3', ',', ' ', '2', '0', ',', ' ', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'k', ' ', '+', ' ', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', 'i', 's', 't', 'a', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '1', ',', ' ', 'e', 'n', 'd', '=', "'", ' ', "'", ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '2', ',', ' ', 'e', 'n', 'd', '=', "'", ' ', "'", ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'k', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n']
['from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'import time\n', 'from cryptography.fernet import Fernet\n', "HTTPConnection('google.com', port=80)\n", 'import datetime\n', 'import base64\n', "base64.b64encode(b'23766616823515439923')\n", 'from sklearn.utils import shuffle\n', 'time.sleep(0.27)\n', 'from scipy.stats import ttest_ind\n', 'ttest_ind([8, 54, 73], [75, 54, 87])\n', 'datetime.datetime.now()\n', "parse('2024-10-24 04:55:28')\n", 'shuffle([67, 64, 100])\n', 'Fernet.generate_key()\n', "print(input().replace(',', ' '))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import threading\n', 'import queue\n', 'import threading\n', 'import queue\n', '\n', 'def sum_nodes(x, nodes):\n', '    return nodes + x\n', '\n', 'def readInts():\n', '    return map(int, input().split())\n', '\n', 'def dfs(g, visited, i):\n', '    if i in visited:\n', '        return (0, 0)\n', '    visited.add(i)\n', '    nodes = 1\n', '    edges = len(g[i])\n', '    for j in g[i]:\n', '        queue_dfs0 = queue.Queue()\n', '\n', '        def dfs_thread(queue):\n', '            result = dfs(g, visited, j)\n', '            queue.put(result)\n', '        dfs_thread = threading.Thread(target=dfs_thread, args=(queue_dfs0,))\n', '        dfs_thread.start()\n', '        dfs_thread.join()\n', '        result_dfs0 = queue_dfs0.get()\n', '        (x, y) = result_dfs0\n', '        queue_sum_nodes0 = queue.Queue()\n', '\n', '        def sum_nodes_thread(queue):\n', '            result = sum_nodes(x, nodes)\n', '            queue.put(result)\n', '        sum_thread = threading.Thread(target=sum_nodes_thread, args=(queue_sum_nodes0,))\n', '        sum_thread.start()\n', '        sum_thread.join()\n', '        result_sum_nodes0 = queue_sum_nodes0.get()\n', '        nodes = result_sum_nodes0\n', '        edges += y\n', '    return (nodes, edges)\n', '\n', 'def solve():\n', '    line0 = []\n', '    try:\n', '        line0 = readInts()\n', '    except EOFError:\n', '        return False\n', '    (n, m) = line0\n', '    g = {}\n', '    visited = set()\n', '\n', '    def init_graph(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        g[i] = set()\n', '        init_graph(i + step, stop, step)\n', '    init_graph(1, n + 1, 1)\n', '    for _ in range(m):\n', '        (a, b) = readInts()\n', '        g[a].add(b)\n', '        g[b].add(a)\n', '    ans = 0\n', '    for i in range(1, n + 1):\n', '        if i not in visited:\n', '            (nodes, edges) = dfs(g, visited, i)\n', '            if nodes > 1 and nodes % 2 == 1 and (2 * nodes == edges):\n', '                ans += 1\n', '    if (n - ans) % 2 == 1:\n', '        ans += 1\n', '    print(ans)\n', '    return True\n', 'while solve():\n', '    pass', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'a', 'd', 'I', 'n', 't', 's', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'd', 'f', 's', '(', 'g', ',', ' ', 'n', 'e', 'w', 's', 'e', 'e', 'n', '_', '1', ',', ' ', 'i', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 's', 'e', 'e', 'n', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', '0', ',', ' ', '0', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', 'e', 'e', 'n', '_', '1', '.', 'a', 'd', 'd', '(', 'i', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'o', 'd', 'e', 's', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'd', 'g', 'e', 's', ' ', '=', ' ', 'l', 'e', 'n', '(', 'g', '[', 'i', ']', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'g', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'd', 'f', 's', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'f', 's', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'd', 'f', 's', '(', 'g', ',', ' ', 'n', 'e', 'w', 's', 'e', 'e', 'n', '_', '1', ',', ' ', 'j', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'd', 'f', 's', '0', '_', '1', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'd', 'f', 's', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'd', 'f', 's', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'd', 'f', 's', '0', '_', '1', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'h', 'r', 'e', 'a', 'd', '_', 'd', 'f', 's', '0', '_', '1', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'd', 'f', 's', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'd', 'f', 's', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'x', ',', ' ', 'y', ')', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'd', 'f', 's', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'd', 'e', 's', ' ', '=', ' ', 'n', 'o', 'd', 'e', 's', ' ', '+', ' ', 'x', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'd', 'g', 'e', 's', ' ', '+', '=', ' ', 'y', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', 'n', 'o', 'd', 'e', 's', ',', ' ', 'e', 'd', 'g', 'e', 's', ')', '\n', '\n', 'd', 'e', 'f', ' ', 's', 'o', 'l', 'v', 'e', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'l', 'i', 'n', 'e', '0', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 't', 'r', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'i', 'n', 'e', '0', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'a', 'd', 'I', 'n', 't', 's', '_', '0', '(', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'c', 'e', 'p', 't', ' ', 'E', 'O', 'F', 'E', 'r', 'r', 'o', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', '(', 'n', ',', ' ', 'm', ')', ' ', '=', ' ', 'l', 'i', 'n', 'e', '0', '\n', ' ', ' ', ' ', ' ', 'g', ' ', '=', ' ', '{', '}', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', 'e', 'e', 'n', '_', '1', ' ', '=', ' ', 's', 'e', 't', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '2', '0', '_', '4', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', '[', 'i', ']', ' ', '=', ' ', 's', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '0', '_', '4', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '0', '_', '4', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'a', 'd', 'I', 'n', 't', 's', '_', '0', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', '[', 'a', ']', '.', 'a', 'd', 'd', '(', 'b', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', '[', 'b', ']', '.', 'a', 'd', 'd', '(', 'a', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '9', ',', ' ', '5', '6', ',', ' ', '1', '5', ']', ',', ' ', '[', '2', '9', ',', ' ', '1', '5', ',', ' ', '4', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '5', '1', '_', '4', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 'a', 'n', 's', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 's', 'e', 'e', 'n', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'n', 'o', 'd', 'e', 's', ',', ' ', 'e', 'd', 'g', 'e', 's', ')', ' ', '=', ' ', 'd', 'f', 's', '(', 'g', ',', ' ', 'n', 'e', 'w', 's', 'e', 'e', 'n', '_', '1', ',', ' ', 'i', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 'd', 'e', 's', ' ', '>', ' ', '1', ' ', 'a', 'n', 'd', ' ', 'n', 'o', 'd', 'e', 's', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '1', ' ', 'a', 'n', 'd', ' ', '(', '2', ' ', '*', ' ', 'n', 'o', 'd', 'e', 's', ' ', '=', '=', ' ', 'e', 'd', 'g', 'e', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '5', '1', '_', '4', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '5', '1', '_', '4', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', '(', 'n', ' ', '-', ' ', 'a', 'n', 's', ')', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'T', 'r', 'u', 'e', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 's', 'o', 'l', 'v', 'e', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_midpoint(lo, variable_3_23, hi):\n', '    return (lo + hi) // variable_3_23\n', 'from scipy.stats import ttest_ind\n', '\n', 'def Func_sum_0(k):\n', '    ret = 0\n', '    power_of_ten = 10\n', '    len = 1\n', '    while 1 == 1:\n', '        cur = min(power_of_ten - 1, k)\n', '        prev = power_of_ten // 10\n', '        ret += (cur - prev + 1) * len\n', '        if power_of_ten - 1 >= k:\n', '            break\n', '        len = len + 1\n', '        power_of_ten *= 10\n', '    ttest_ind([39, 91, 98], [63, 12, 81])\n', '    return ret\n', '(w, m, k) = map(int, input().split())\n', 'lo = 0\n', 'hi = int(1e+18)\n', 'while hi - lo > 1:\n', '    check1 = 809\n', '    check2 = 867\n', '    variable_3_23 = 2\n', '    midpoint_queue = queue.Queue()\n', '\n', '    def midpoint_calculator_thread(queue):\n', '        result = calculate_midpoint(lo, variable_3_23, hi)\n', '        queue.put(result)\n', '    midpoint_thread = threading.Thread(target=midpoint_calculator_thread, args=(midpoint_queue,))\n', '    midpoint_thread.start()\n', '    midpoint_thread.join()\n', '    midpoint_result = midpoint_queue.get()\n', '    median_value = midpoint_result\n', '    c = Func_sum_0(m + median_value - 1) - Func_sum_0(m - 1)\n', '    if check1 & check2:\n', '        if c * k <= w:\n', '            lo = median_value\n', '        else:\n', '            hi = median_value\n', 'print(lo)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'm', '_', '0', '(', 'k', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'p', 'w', '_', '1', ' ', '=', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', 'l', 'e', 'n', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'u', 'r', ' ', '=', ' ', 'm', 'i', 'n', '(', 'n', 'e', 'w', 'p', 'w', '_', '1', ' ', '-', ' ', '1', ',', ' ', 'k', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'e', 'v', ' ', '=', ' ', 'n', 'e', 'w', 'p', 'w', '_', '1', ' ', '/', '/', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', ' ', '+', '=', ' ', '(', 'c', 'u', 'r', ' ', '-', ' ', 'p', 'r', 'e', 'v', ' ', '+', ' ', '1', ')', ' ', '*', ' ', 'l', 'e', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'p', 'w', '_', '1', ' ', '-', ' ', '1', ' ', '>', '=', ' ', 'k', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'e', 'n', ' ', '=', ' ', 'l', 'e', 'n', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'p', 'w', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'p', 'w', '_', '1', ' ', '*', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '2', ',', ' ', '9', ',', ' ', '4', ']', ',', ' ', '[', '2', '4', ',', ' ', '8', '9', ',', ' ', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 't', '\n', '(', 'w', ',', ' ', 'm', ',', ' ', 'k', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'l', 'o', ' ', '=', ' ', '0', '\n', 'h', 'i', ' ', '=', ' ', 'i', 'n', 't', '(', '1', 'e', '+', '1', '8', ')', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'h', 'i', ' ', '-', ' ', 'l', 'o', ' ', '>', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '7', ' ', '=', ' ', '3', '5', '0', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '7', ' ', '=', ' ', '8', '0', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '=', ' ', '8', '5', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ' ', '=', ' ', '9', '4', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '=', ' ', '8', '0', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ' ', '=', ' ', '8', '6', '7', '\n', ' ', ' ', ' ', ' ', 'm', 'd', ' ', '=', ' ', '(', 'l', 'o', ' ', '+', ' ', 'h', 'i', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'm', '_', '0', '(', 'm', ' ', '+', ' ', 'm', 'd', ' ', '-', ' ', '1', ')', ' ', '-', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'm', '_', '0', '(', 'm', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', ' ', '*', ' ', 'k', ' ', '<', '=', ' ', 'w', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', ' ', '=', ' ', 'm', 'd', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'i', ' ', '=', ' ', 'm', 'd', '\n', 'p', 'r', 'i', 'n', 't', '(', 'l', 'o', ')', '\n']
['from scipy.stats import ttest_ind\n', 'from sklearn.utils import shuffle\n', 'ttest_ind([78, 87, 93], [70, 33, 44])\n', 'import numpy as np\n', 'shuffle([16, 99, 58])\n', 'import itertools\n', '(n, m, x) = list(map(int, input().split()))\n', 'c = np.array([list(map(int, input().split())) for _ in range(n)])\n', 'indices = np.arange(n)\n', 'combinations = []\n', 'rem = []\n', 'ans = 0\n', 'for i in indices + 1:\n', '    for j in itertools.combinations(indices, i):\n', '        combinations.append(list(j))\n', 'CONDITION_CHECKER_1 = 978\n', 'is_valid = 978\n', 'for i in range(1, m + 1):\n', '    for (j, k) in enumerate(combinations):\n', '        current_cost = 0\n', '        for ii in k:\n', '            current_cost += c[ii, i]\n', '        if current_cost < x:\n', '            rem.insert(0, j)\n', '        else:\n', '            pass\n', '    if CONDITION_CHECKER_1 & is_valid:\n', '        if len(rem) > 0:\n', '            for j in rem:\n', '                combinations.pop(j)\n', '            rem = []\n', '    if len(combinations) == 0:\n', '        print(-1)\n', '        break\n', 'else:\n', '    for i in combinations:\n', '        current_cost = 0\n', '        for j in i:\n', '            current_cost += c[j, 0]\n', '        if ans == 0:\n', '            ans = current_cost\n', '        else:\n', '            ans = np.min(np.array([ans, current_cost]))\n', '    print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', '\n', '(', 'n', ',', ' ', 'm', ',', ' ', 'x', ')', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'c', ' ', '=', ' ', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ']', ')', '\n', 'n', 'e', 'w', 'p', 'r', 'e', '_', '1', ' ', '=', ' ', 'n', 'p', '.', 'a', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', '\n', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', '[', ']', '\n', 'r', 'e', 'm', ' ', '=', ' ', '[', ']', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'p', 'r', 'e', '_', '1', ' ', '+', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', '.', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', '(', 'n', 'e', 'w', 'p', 'r', 'e', '_', '1', ',', ' ', 'i', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'l', 'i', 's', 't', '(', 'j', ')', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', ' ', '=', ' ', '2', '6', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', ' ', '=', ' ', '6', '4', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '=', ' ', '3', '9', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ' ', '=', ' ', '2', '1', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '5', '_', '1', ' ', '=', ' ', '6', '6', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '5', ' ', '=', ' ', '4', '1', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '4', '_', '1', ' ', '=', ' ', '5', '2', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '4', ' ', '=', ' ', '9', '2', '5', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'm', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'j', ',', ' ', 'k', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'n', 'e', 'w', 'l', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', 'i', ' ', 'i', 'n', ' ', 'k', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', ' ', '+', '=', ' ', 'c', '[', 'i', 'i', ',', ' ', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'a', ' ', '<', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 'm', '.', 'i', 'n', 's', 'e', 'r', 't', '(', '0', ',', ' ', 'j', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '5', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'r', 'e', 'm', ')', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'e', 'm', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', '_', '1', '.', 'p', 'o', 'p', '(', 'j', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 'm', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '4', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'l', '_', '1', ')', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', ' ', '+', '=', ' ', 'c', '[', 'j', ',', ' ', '0', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', 'n', 's', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'c', 'a', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'm', 'i', 'n', '(', 'a', 'n', 's', ',', ' ', 'c', 'a', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['import time\n', 'from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'import base64\n', 'from cryptography.fernet import Fernet\n', 'import datetime\n', '\n', 'def my_decorator(func):\n', '    try:\n', '        time.sleep(0.22)\n', '        try:\n', '\n', '            def dec_result(*args, **kwargs):\n', '                result = func(*args, **kwargs)\n', '                return result\n', "            parse('2024-10-24 09:39:21')\n", "            HTTPConnection('google.com', port=80)\n", '            return dec_result\n', '        except:\n', '            pass\n', '    except:\n', '        pass\n', '\n', '@my_decorator\n', 'def calculate_xor(a, b):\n', '    try:\n', '        Fernet.generate_key()\n', '        datetime.datetime.now()\n', "        base64.b64encode(b'60815807977504875851')\n", '        return a ^ b\n', '    except:\n', '        pass\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'from functools import *\n', 'from operator import *\n', 'ttest_ind([48, 13, 51], [63, 23, 87])\n', 'count = int(input())\n', 'numbers = list(map(int, input().split()))\n', 'shuffle([83, 40, 10])\n', 'xor_sum = reduce(xor, numbers, 0)\n', "print(' '.join(list(map(lambda ai: str(calculate_xor(ai, xor_sum)), numbers))))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def divide(arg0, arg1):\n', '    return arg0 / arg1\n', '\n', 'def multiply(arg1, arg2):\n', '    return arg1 * arg2\n', '\n', 'def calculate_ratio(arg0, arg1):\n', '    return divide(arg0, arg1)\n', '\n', 'def calculate_product(arg1, arg2):\n', '    return multiply(arg1, arg2)\n', '\n', 'def calculate_sum(arg0, arg1):\n', '    return calculate_ratio(arg0, arg1)\n', '\n', 'def solve_quadratic(arg1, arg2):\n', '    return calculate_product(arg1, arg2)\n', 'import collections\n', 'import heapq\n', 'import sys\n', 'import math\n', 'import itertools\n', 'import bisect\n', 'from io import BytesIO, IOBase\n', 'import os\n', '\n', 'def Func_valid_0(i, j, n, m):\n', '    if i < n and i >= 0 and (j >= 0) and (j < m):\n', '        return True\n', '    return False\n', '\n', 'def Func_sumn_0(i, n):\n', '    return calculate_sum((n - i) * (i + n), 2)\n', '\n', 'def Func_sqfun_0(a, b, c):\n', '    return solve_quadratic((-b + math.sqrt(b * b - 4 * a * c)) / 2, a)\n', '\n', 'def value():\n', '    return tuple(map(int, input().split()))\n', '\n', 'def values():\n', '    return tuple(map(int, sys.stdin.readline().split()))\n', '\n', 'def inlst():\n', '    return [int(i) for i in input().split()]\n', '\n', 'def inlsts():\n', '    return [int(i) for i in sys.stdin.readline().split()]\n', '\n', 'def inp():\n', '    return int(input())\n', '\n', 'def inps():\n', '    return int(sys.stdin.readline())\n', '\n', 'def instr():\n', '    return input()\n', '\n', 'def stlst():\n', '    return [i for i in input().split()]\n', '\n', 'def f(s):\n', "    r = ''\n", '    for i in s:\n', "        if i not in ['-', ';', '_']:\n", '            r += i.lower()\n', '    return r\n', '\n', 'def solve():\n', '    team_names = []\n', '\n', '    def read_team_names(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        team_names.append(f(input()))\n', '        read_team_names(i + step, stop, step)\n', '    read_team_names(0, 3, 1)\n', '    team_permutations = itertools.permutations(team_names, len(team_names))\n', '    team_names = []\n', '    for i in team_permutations:\n', "        team_names.append(''.join(i))\n", '\n', '    def check_submissions(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        if f(instr()) in team_names:\n', "            print('ACC')\n", '        else:\n', "            print('WA')\n", '        check_submissions(i + step, stop, step)\n', '    check_submissions(0, inp(), 1)\n', "if __name__ == '__main__':\n", '    solve()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '5', '4', '4', '1', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '/', ' ', 'a', 'r', 'g', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '2', '1', '1', '3', '7', '(', 'a', 'r', 'g', '1', ',', ' ', 'a', 'r', 'g', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '1', ' ', '*', ' ', 'a', 'r', 'g', '2', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '0', '5', '6', '2', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '5', '4', '4', '1', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '6', '4', '1', '7', '6', '(', 'a', 'r', 'g', '1', ',', ' ', 'a', 'r', 'g', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '2', '1', '1', '3', '7', '(', 'a', 'r', 'g', '1', ',', ' ', 'a', 'r', 'g', '2', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'q', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 'o', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'B', 'y', 't', 'e', 's', 'I', 'O', ',', ' ', 'I', 'O', 'B', 'a', 's', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'o', 's', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'v', 'a', 'l', 'i', 'd', '_', '0', '(', 'i', ',', ' ', 'j', ',', ' ', 'n', ',', ' ', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '<', ' ', 'n', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', '(', 'j', ' ', '>', '=', ' ', '0', ')', ' ', 'a', 'n', 'd', ' ', '(', 'j', ' ', '<', ' ', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'F', 'a', 'l', 's', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'u', 'm', 'n', '_', '0', '(', 'i', ',', ' ', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '0', '5', '6', '2', '(', '(', 'n', ' ', '-', ' ', 'i', ')', ' ', '*', ' ', '(', 'i', ' ', '+', ' ', 'n', ')', ',', ' ', '2', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'q', 'f', 'u', 'n', '_', '0', '(', 'a', ',', ' ', 'b', ',', ' ', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '6', '4', '1', '7', '6', '(', '(', '-', 'b', ' ', '+', ' ', 'm', 'a', 't', 'h', '.', 's', 'q', 'r', 't', '(', 'b', ' ', '*', ' ', 'b', ' ', '-', ' ', '4', ' ', '*', ' ', 'a', ' ', '*', ' ', 'c', ')', ')', ' ', '/', ' ', '2', ',', ' ', 'a', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'v', 'a', 'l', 'u', 'e', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 't', 'u', 'p', 'l', 'e', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'v', 'a', 'l', 'u', 'e', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 't', 'u', 'p', 'l', 'e', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'i', 'n', 'l', 's', 't', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'i', 'n', 'l', 's', 't', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'i', 'n', 'p', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'i', 'n', 'p', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'i', 'n', 's', 't', 'r', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 's', 't', 'l', 's', 't', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'f', '(', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', "'", "'", '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', '[', "'", '-', "'", ',', ' ', "'", ';', "'", ',', ' ', "'", '_', "'", ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', '+', '=', ' ', 'i', '.', 'l', 'o', 'w', 'e', 'r', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', '\n', '\n', 'd', 'e', 'f', ' ', 's', 'o', 'l', 'v', 'e', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', '[', ']', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '3', '1', '_', '4', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'f', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '3', '1', '_', '4', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '3', '1', '_', '4', '(', '0', ',', ' ', '3', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', '_', '1', ' ', '=', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', '.', 'p', 'e', 'r', 'm', 'u', 't', 'a', 't', 'i', 'o', 'n', 's', '(', 'n', 'e', 'w', 'l', '_', '1', ',', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'l', '_', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 't', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', "'", "'", '.', 'j', 'o', 'i', 'n', '(', 'i', ')', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '6', '5', '_', '4', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'f', '(', 'i', 'n', 's', 't', 'r', '(', ')', ')', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'A', 'C', 'C', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'W', 'A', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '6', '5', '_', '4', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '6', '5', '_', '4', '(', '0', ',', ' ', 'i', 'n', 'p', '(', ')', ',', ' ', '1', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 's', 'o', 'l', 'v', 'e', '(', ')', '\n']
['condition_a = 132\n', 'condition_b = 668\n', '(n, m) = map(int, input().split())\n', 'if condition_a & condition_b:\n', '    if n < 1:\n', '        if m < 1:\n', '            print(n, m)\n', '            quit()\n', "        print('Impossible')\n", '        quit()\n', 'if m > n:\n', '    min = m\n', '    max = n + m - 1\n', '    print(min, max)\n', 'if m <= n:\n', '    min = n\n', '    max = n + m - 1\n', '    if m == 0:\n', '        max = n\n', '    print(min, max)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def compute_value(variable_17_11, variable_33_11, col, variable_14_11, i, variable_25_11, variable_20_11, m):\n', '    return (variable_14_11 * i + variable_17_11 * col - variable_20_11 * (i - variable_33_11) * (col - variable_25_11)) % m\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', '(row_start, B, C, col_end) = map(int, input().split())\n', 'shuffle([30, 15, 86])\n', 'm = 998244353\n', 'd = [[0] * (col_end + 1) for _ in range(C + 1)]\n', 'ttest_ind([74, 55, 39], [82, 31, 10])\n', 'd[row_start][B] = 1\n', 'for i in range(row_start, C + 1):\n', '    for col in range(B, col_end + 1):\n', '        variable_14_11 = d[i][col - 1]\n', '        variable_17_11 = d[i - 1][col]\n', '        variable_20_11 = d[i - 1][col - 1]\n', '        variable_26_11 = d[i]\n', '        variable_30_11 = d[i - 1]\n', '        variable_34_11 = d[i - 1]\n', '        variable_25_11 = 1\n', '        variable_33_11 = 1\n', '        d[i][col] += compute_value(variable_17_11, variable_33_11, col, variable_14_11, i, variable_25_11, variable_20_11, m)\n', 'print(d[C][col_end])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '7', '_', '1', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '3', '_', '1', '1', ',', ' ', 'n', 'e', 'w', 'j', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '4', '_', '1', '1', ',', ' ', 'i', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '5', '_', '1', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '0', '_', '1', '1', ',', ' ', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '4', '_', '1', '1', ' ', '*', ' ', 'i', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '7', '_', '1', '1', ' ', '*', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', '-', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '0', '_', '1', '1', ' ', '*', ' ', '(', 'i', ' ', '-', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '3', '_', '1', '1', ')', ' ', '*', ' ', '(', 'n', 'e', 'w', 'j', '_', '1', ' ', '-', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '5', '_', '1', '1', ')', ')', ' ', '%', ' ', 'm', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'A', '_', '1', ',', ' ', 'B', ',', ' ', 'C', ',', ' ', 'n', 'e', 'w', 'D', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '0', ',', ' ', '1', '5', ',', ' ', '8', '6', ']', ')', '\n', 'm', ' ', '=', ' ', '9', '9', '8', '2', '4', '4', '3', '5', '3', '\n', 'd', ' ', '=', ' ', '[', '[', '0', ']', ' ', '*', ' ', '(', 'n', 'e', 'w', 'D', '_', '1', ' ', '+', ' ', '1', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'C', ' ', '+', ' ', '1', ')', ']', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '4', ',', ' ', '5', '5', ',', ' ', '3', '9', ']', ',', ' ', '[', '8', '2', ',', ' ', '3', '1', ',', ' ', '1', '0', ']', ')', '\n', 'd', '[', 'n', 'e', 'w', 'A', '_', '1', ']', '[', 'B', ']', ' ', '=', ' ', '1', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'A', '_', '1', ',', ' ', 'C', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'B', ',', ' ', 'n', 'e', 'w', 'D', '_', '1', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '4', '_', '1', '1', ' ', '=', ' ', 'd', '[', 'i', ']', '[', 'n', 'e', 'w', 'j', '_', '1', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '7', '_', '1', '1', ' ', '=', ' ', 'd', '[', 'i', ' ', '-', ' ', '1', ']', '[', 'n', 'e', 'w', 'j', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '0', '_', '1', '1', ' ', '=', ' ', 'd', '[', 'i', ' ', '-', ' ', '1', ']', '[', 'n', 'e', 'w', 'j', '_', '1', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '6', '_', '1', '1', ' ', '=', ' ', 'd', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '0', '_', '1', '1', ' ', '=', ' ', 'd', '[', 'i', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '4', '_', '1', '1', ' ', '=', ' ', 'd', '[', 'i', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '5', '_', '1', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '3', '_', '1', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', '[', 'i', ']', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ' ', '+', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '7', '_', '1', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '3', '_', '1', '1', ',', ' ', 'n', 'e', 'w', 'j', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '4', '_', '1', '1', ',', ' ', 'i', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '5', '_', '1', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '2', '0', '_', '1', '1', ',', ' ', 'm', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'd', '[', 'C', ']', '[', 'n', 'e', 'w', 'D', '_', '1', ']', ')', '\n']
['import time\n', 'import datetime\n', 'from sklearn.utils import shuffle\n', 'import numpy as np\n', 'array_size = int(input())\n', 'A = np.fromiter(map(int, input().split()), np.int64)\n', 'xor_sum = 0\n', 'shuffle([34, 66, 27])\n', '\n', 'def calculate_xor_sum(b, stop, step):\n', '    global bs, xor_sum\n', '    time.sleep(0.02)\n', '    datetime.datetime.now()\n', '    if step == 0 or (step > 0 and b >= stop) or (step < 0 and b <= stop):\n', '        return\n', '    bit_count = int((A >> b & 1).sum())\n', '    xor_sum = (xor_sum + bit_count * (array_size - bit_count) * (1 << b)) % 1000000007\n', '    calculate_xor_sum(b + step, stop, step)\n', 'calculate_xor_sum(0, 60, 1)\n', 'print(xor_sum)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'N', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'A', ' ', '=', ' ', 'n', 'p', '.', 'f', 'r', 'o', 'm', 'i', 't', 'e', 'r', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ',', ' ', 'n', 'p', '.', 'i', 'n', 't', '6', '4', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '5', '_', '0', '_', '0', '(', 'b', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'b', 's', ',', ' ', 'r', 'e', 's', 'u', 'l', 't', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '7', '1', ',', ' ', '8', '5', ',', ' ', '2', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'b', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'b', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '1', ',', ' ', '5', '6', ',', ' ', '4', '6', ']', ',', ' ', '[', '4', '2', ',', ' ', '5', '3', ',', ' ', '9', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', 's', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', '(', 'A', ' ', '>', '>', ' ', 'b', ' ', '&', ' ', '1', ')', '.', 's', 'u', 'm', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', '(', 'r', 'e', 's', 'u', 'l', 't', ' ', '+', ' ', 'n', 'e', 'w', 'b', 's', '_', '1', ' ', '*', ' ', '(', 'N', ' ', '-', ' ', 'n', 'e', 'w', 'b', 's', '_', '1', ')', ' ', '*', ' ', '(', '1', ' ', '<', '<', ' ', 'b', ')', ')', ' ', '%', ' ', '1', '0', '0', '0', '0', '0', '0', '0', '0', '7', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '5', '_', '0', '_', '0', '(', 'b', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '5', '_', '0', '_', '0', '(', '0', ',', ' ', '6', '0', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def increment_left(variable_3_15, S_L):\n', '    return S_L + variable_3_15\n', 'from scipy.stats import ttest_ind\n', '(board_height, W, N) = map(int, input().split())\n', '(s_r, s_c) = map(int, input().split())\n', 'S = input()\n', 'T = input()\n', 'Judge = False\n', '(S_L, S_R, S_U, S_D) = (0, 0, 0, 0)\n', '(T_L, T_R, T_U, T_D) = (0, 0, 0, 0)\n', 'total_steps = 138\n', 'max_outer_iterations = 137\n', 'ttest_ind([50, 21, 42], [64, 98, 2])\n', 'for LoopIndexOut in range(total_steps // max_outer_iterations):\n', '    for x in range(N):\n', "        if S[x] == 'L':\n", '            variable_3_15 = 1\n', '            queue_increment_left0 = queue.Queue()\n', '\n', '            def increment_left_thread(queue):\n', '                result = increment_left(variable_3_15, S_L)\n', '                queue.put(result)\n', '            thread_increment_left0 = threading.Thread(target=increment_left_thread, args=(queue_increment_left0,))\n', '            thread_increment_left0.start()\n', '            thread_increment_left0.join()\n', '            result_increment_left0 = queue_increment_left0.get()\n', '            S_L = result_increment_left0\n', '            if S_L - T_R - s_c == 0:\n', '                Judge = True\n', "        elif S[x] == 'R':\n", '            S_R = S_R + 1\n', '            if s_c + (S_R - T_L) == W + 1:\n', '                Judge = True\n', "        elif S[x] == 'U':\n", '            S_U = S_U + 1\n', '            if S_U - T_D - s_r == 0:\n', '                Judge = True\n', "        elif S[x] == 'D':\n", '            S_D += 1\n', '            if s_r + (S_D - T_U) == board_height + 1:\n', '                Judge = True\n', "        if T[x] == 'L':\n", '            if S_R - T_L + s_c != 1:\n', '                T_L += 1\n', "        if T[x] == 'R':\n", '            if s_c + (T_R - S_L) != W:\n', '                T_R += 1\n', "        if T[x] == 'U':\n", '            if S_D - T_U + s_r != 1:\n', '                T_U += 1\n', "        if T[x] == 'D':\n", '            if s_r + (T_D - S_U) != board_height:\n', '                T_D += 1\n', 'if Judge:\n', "    print('NO')\n", 'else:\n', "    print('YES')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '(', 'S', '_', 'L', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '7', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'S', '_', 'L', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '7', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'H', '_', '1', ',', ' ', 'W', ',', ' ', 'N', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '(', 's', '_', 'r', ',', ' ', 's', '_', 'c', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'S', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '9', ',', ' ', '7', '7', ',', ' ', '1', '3', ']', ')', '\n', 'T', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'J', 'u', 'd', 'g', 'e', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', '(', 'S', '_', 'L', ',', ' ', 'S', '_', 'R', ',', ' ', 'S', '_', 'U', ',', ' ', 'S', '_', 'D', ')', ' ', '=', ' ', '(', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ')', '\n', '(', 'T', '_', 'L', ',', ' ', 'T', '_', 'R', ',', ' ', 'n', 'e', 'w', 'T', '_', 'U', '_', '1', ',', ' ', 'T', '_', 'D', ')', ' ', '=', ' ', '(', '0', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ')', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '1', '3', '8', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '1', '3', '7', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '0', ',', ' ', '2', '1', ',', ' ', '4', '2', ']', ',', ' ', '[', '6', '4', ',', ' ', '9', '8', ',', ' ', '2', ']', ')', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', '[', 'x', ']', ' ', '=', '=', ' ', "'", 'L', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '7', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', '_', 'L', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '7', '(', 'S', '_', 'L', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '7', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', '_', 'L', ' ', '-', ' ', 'T', '_', 'R', ' ', '-', ' ', 's', '_', 'c', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'J', 'u', 'd', 'g', 'e', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'S', '[', 'x', ']', ' ', '=', '=', ' ', "'", 'R', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', '_', 'R', ' ', '=', ' ', 'S', '_', 'R', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '_', 'c', ' ', '+', ' ', '(', 'S', '_', 'R', ' ', '-', ' ', 'T', '_', 'L', ')', ' ', '=', '=', ' ', 'W', ' ', '+', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'J', 'u', 'd', 'g', 'e', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'S', '[', 'x', ']', ' ', '=', '=', ' ', "'", 'U', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', '_', 'U', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', '_', 'U', ' ', '-', ' ', 'T', '_', 'D', ' ', '-', ' ', 's', '_', 'r', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'J', 'u', 'd', 'g', 'e', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'S', '[', 'x', ']', ' ', '=', '=', ' ', "'", 'D', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'S', '_', 'D', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '_', 'r', ' ', '+', ' ', '(', 'S', '_', 'D', ' ', '-', ' ', 'n', 'e', 'w', 'T', '_', 'U', '_', '1', ')', ' ', '=', '=', ' ', 'n', 'e', 'w', 'H', '_', '1', ' ', '+', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'J', 'u', 'd', 'g', 'e', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'T', '[', 'x', ']', ' ', '=', '=', ' ', "'", 'L', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', '_', 'R', ' ', '-', ' ', 'T', '_', 'L', ' ', '+', ' ', 's', '_', 'c', ' ', '!', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'T', '_', 'L', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'T', '[', 'x', ']', ' ', '=', '=', ' ', "'", 'R', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '_', 'c', ' ', '+', ' ', '(', 'T', '_', 'R', ' ', '-', ' ', 'S', '_', 'L', ')', ' ', '!', '=', ' ', 'W', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'T', '_', 'R', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'T', '[', 'x', ']', ' ', '=', '=', ' ', "'", 'U', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', '_', 'D', ' ', '-', ' ', 'n', 'e', 'w', 'T', '_', 'U', '_', '1', ' ', '+', ' ', 's', '_', 'r', ' ', '!', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'T', '_', 'U', '_', '1', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'T', '[', 'x', ']', ' ', '=', '=', ' ', "'", 'D', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '_', 'r', ' ', '+', ' ', '(', 'T', '_', 'D', ' ', '-', ' ', 'S', '_', 'U', ')', ' ', '!', '=', ' ', 'n', 'e', 'w', 'H', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'T', '_', 'D', ' ', '+', '=', ' ', '1', '\n', 'i', 'f', ' ', 'J', 'u', 'd', 'g', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n']
['from sklearn.utils import shuffle\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', "    parse('2025-02-15 19:37:35')\n", '    ttest_ind([46, 94, 35], [72, 20, 39])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def bitwise_and(a, b):\n', '    return a & b\n', '\n', '\n', 's = list(input())\n', '(num_g, num_p) = (0, 0)\n', 'score = [0][0]\n', 'loop_end = 648\n', 'loop_step = 647\n', 'min_condition_index = 524\n', 'max_condition_index = 324\n', '\n', '\n', 'def process_game_data(LoopIndexOut, stop, step):\n', '    time.sleep(0.15)\n', '    global score, num_g, num_p\n', '    shuffle([13, 47, 16])\n', '    Fernet.generate_key()\n', "    base64.b64encode(b'44142820216980515262')\n", '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for x in s:\n', '        if bitwise_and(min_condition_index, max_condition_index):\n', "            if x == 'g':\n", '                if num_g - num_p > 0:\n', '                    score = score + 1\n', '                    num_p += 1\n', '                else:\n', '                    score = score\n', '                    num_g += 1\n', "            elif x == 'p':\n", '                if num_g - num_p > 0:\n', '                    score = score\n', '                    num_p += 1\n', '                else:\n', '                    score -= 1\n', '                    num_g += 1\n', '    datetime.datetime.now()\n', "    HTTPConnection('google.com', port=80)\n", '    process_game_data(LoopIndexOut + step, stop, step)\n', '\n', '\n', 'process_game_data(0, loop_end // loop_step, 1)\n', 'print(score)\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', 'import sys\n', '\n', 'def Func_rs_0():\n', '    return sys.stdin.readline().rstrip()\n', '\n', 'def Func_ri_0():\n', '    return int(Func_rs_0())\n', '\n', 'def rs_():\n', '    return [_ for _ in Func_rs_0().split()]\n', '\n', 'def ri_():\n', '    return [int(_) for _ in Func_rs_0().split()]\n', 'queue_ri0 = queue.Queue()\n', '\n', 'def ri_thread(queue):\n', '    input_number = Func_ri_0()\n', '    ttest_ind([10, 78, 56], [25, 56, 95])\n', '    queue.put(input_number)\n', 'thread_ri0 = threading.Thread(target=ri_thread, args=(queue_ri0,))\n', 'thread_ri0.start()\n', 'thread_ri0.join()\n', 'result_ri0 = queue_ri0.get()\n', 'N = result_ri0\n', 'ans = 0\n', 'outer_loop_limit = 670\n', 'inner_loop_limit = 669\n', 'for LoopIndexOut in range(outer_loop_limit // inner_loop_limit):\n', '    for i in range(1, N + 1):\n', '        ans += i * (N // i) * (N // i + 1) // 2\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 's', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 'r', 's', 't', 'r', 'i', 'p', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'i', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'r', 's', '_', '0', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'r', 's', '_', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', '_', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'F', 'u', 'n', 'c', '_', 'r', 's', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'r', 'i', '_', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', '_', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'F', 'u', 'n', 'c', '_', 'r', 's', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'i', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'r', 'i', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'i', '_', '0', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '0', ',', ' ', '7', '8', ',', ' ', '5', '6', ']', ',', ' ', '[', '2', '5', ',', ' ', '5', '6', ',', ' ', '9', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'i', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'r', 'i', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'i', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'i', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'i', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'r', 'i', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'i', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'N', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'r', 'i', '0', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'N', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'i', ' ', '*', ' ', '(', 'N', ' ', '/', '/', ' ', 'i', ')', ' ', '*', ' ', '(', 'N', ' ', '/', '/', ' ', 'i', ' ', '+', ' ', '1', ')', ' ', '/', '/', ' ', '2', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'initial_condition_value = 353\n', 'condition_check_value = 800\n', 'ip = input()\n', 'ttest_ind([17, 39, 50], [83, 25, 18])\n', "st = ''\n", 'if initial_condition_value & condition_check_value:\n', '    if len(ip) != 1:\n', "        if ip[0] == '9':\n", "            st = '9'\n", '            ip = ip[1:]\n', '        max_loop_count = 953\n', '        loop_increment = 952\n', '\n', '        @my_decorator\n', '        def process_input_digits(LoopIndexOut, stop, step):\n', '            global n, st\n', '            if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '                return\n', '            for digit in ip:\n', '                if int(digit) > 4:\n', '                    complement_digit = 9 - int(digit)\n', '                    st += str(complement_digit)\n', '                else:\n', '                    st = st + digit\n', '            process_input_digits(LoopIndexOut + step, stop, step)\n', '        process_input_digits(0, max_loop_count // loop_increment, 1)\n', '    else:\n', '        st = ip\n', 'print(int(st))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'i', 'n', 't', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '2', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '2', '1', ' ', '-', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', ' ', '=', ' ', '3', '5', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '_', '1', ' ', '=', ' ', '8', '0', '0', '\n', 'i', 'p', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '7', ',', ' ', '3', '9', ',', ' ', '5', '0', ']', ',', ' ', '[', '8', '3', ',', ' ', '2', '5', ',', ' ', '1', '8', ']', ')', '\n', 's', 't', ' ', '=', ' ', "'", "'", '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'i', 'p', ')', ' ', '!', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'p', '[', '0', ']', ' ', '=', '=', ' ', "'", '9', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 't', ' ', '=', ' ', "'", '9', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'p', ' ', '=', ' ', 'i', 'p', '[', '1', ':', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '9', '5', '3', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '9', '5', '2', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '8', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'n', ',', ' ', 's', 't', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'i', 'p', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ')', ' ', '>', ' ', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '2', '1', ' ', '=', ' ', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'i', 'n', 't', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '2', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 't', ' ', '+', '=', ' ', 's', 't', 'r', '(', 'n', 'e', 'w', 'n', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 't', ' ', '=', ' ', 's', 't', ' ', '+', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '8', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '8', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 't', ' ', '=', ' ', 'i', 'p', '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 's', 't', ')', ')', '\n']
['import numpy as np\n', 'n = int(input())\n', 'remainder_list = [int(x) % 2 for x in input().split()]\n', 'if np.sum(np.array([remainder_list])) == 1:\n', '    print(remainder_list.index(1) + 1)\n', 'else:\n', '    print(remainder_list.index(0) + 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import threading\n', 'import queue\n', '\n', 'def increment_count(match_count, variable_3_23):\n', '    return match_count + variable_3_23\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'q = []\n', 'match_count = 0\n', '\n', 'def read_input_arrays(i, stop, step):\n', '    global a\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    a = input().split()\n', '    q.append(a)\n', '    ttest_ind([18, 73, 81], [15, 73, 91])\n', '    read_input_arrays(i + step, stop, step)\n', 'read_input_arrays(0, n, 1)\n', 'CHECK_CONDITION_1 = 209\n', 'CHECK_CONDITION_2 = 57\n', 'for j in q:\n', '    for k in q:\n', '        if CHECK_CONDITION_1 & CHECK_CONDITION_2:\n', '            if k == j:\n', '                continue\n', '            elif j[0] == k[len(k) - 1]:\n', '                variable_3_23 = 1\n', '                result_queue = queue.Queue()\n', '\n', '                def increment_count_thread(queue):\n', '                    result = increment_count(match_count, variable_3_23)\n', '                    queue.put(result)\n', '                calculation_thread = threading.Thread(target=increment_count_thread, args=(result_queue,))\n', '                calculation_thread.start()\n', '                calculation_thread.join()\n', '                result_increment_count0 = result_queue.get()\n', '                match_count = result_increment_count0\n', '            else:\n', '                continue\n', 'print(match_count)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '0', '(', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '0', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'q', '_', '1', ' ', '=', ' ', '[', ']', '\n', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', ' ', '=', ' ', '0', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'a', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '9', ',', ' ', '8', '2', ',', ' ', '9', '6', ']', ',', ' ', '[', '9', '7', ',', ' ', '9', '5', ',', ' ', '7', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'q', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'a', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '5', '7', ',', ' ', '7', '7', ',', ' ', '6', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'q', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'k', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'q', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'k', '_', '1', ' ', '=', '=', ' ', 'j', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'j', '[', '0', ']', ' ', '=', '=', ' ', 'n', 'e', 'w', 'k', '_', '1', '[', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'k', '_', '1', ')', ' ', '-', ' ', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '0', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '0', '(', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'c', 'o', 'u', 'n', 't', '_', '1', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_power_sum(variable_3_17, variable_4_17, exponent):\n', '    return variable_4_17 ** exponent + variable_3_17\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    shuffle([27, 70, 73])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        decorated_result = func(*args, **kwargs)\n', '        return decorated_result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'from math import gcd\n', '\n', '@my_decorator\n', 'def Func_lcm_0(num, b):\n', '    ttest_ind([86, 16, 51], [83, 2, 91])\n', '    return num * b / gcd(num, b)\n', 'variable_3_17 = 7\n', 'variable_4_17 = 10\n', 'exponent = 9\n', 'result_queue = queue.Queue()\n', '\n', 'def power_sum_thread(queue):\n', '    result = calculate_power_sum(variable_3_17, variable_4_17, exponent)\n', '    queue.put(result)\n', 'power_sum_worker = threading.Thread(target=power_sum_thread, args=(result_queue,))\n', 'power_sum_worker.start()\n', 'power_sum_worker.join()\n', 'power_sum_result = result_queue.get()\n', 'MOD = power_sum_result\n', 'N = int(input())\n', 'A = list(map(int, input().split()))\n', '_lcm = 1\n', 'for num in A:\n', '    _lcm = _lcm * num // gcd(_lcm, num)\n', 'ans = _lcm * sum([pow(s, MOD - 2, MOD) for s in A]) % MOD\n', 'print(int(ans % MOD))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'g', 'c', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'c', 'm', '_', '0', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '8', '6', ',', ' ', '1', '6', ',', ' ', '5', '1', ']', ',', ' ', '[', '8', '3', ',', ' ', '2', ',', ' ', '9', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '*', ' ', 'b', ' ', '/', ' ', 'g', 'c', 'd', '(', 'n', 'e', 'w', 'a', '_', '1', ',', ' ', 'b', ')', '\n', 'M', 'O', 'D', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'N', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'A', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '_', 'l', 'c', 'm', ' ', '=', ' ', '1', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '8', '3', '7', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '8', '3', '6', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '7', ',', ' ', '9', '1', ',', ' ', '2', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', '_', 'l', 'c', 'm', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'A', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '_', 'l', 'c', 'm', ' ', '=', ' ', '_', 'l', 'c', 'm', ' ', '*', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '/', '/', ' ', 'g', 'c', 'd', '(', '_', 'l', 'c', 'm', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '3', '_', '0', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ',', ' ', '1', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '_', 'l', 'c', 'm', ' ', '*', ' ', 's', 'u', 'm', '(', '[', 'p', 'o', 'w', '(', 's', ',', ' ', 'M', 'O', 'D', ' ', '-', ' ', '2', ',', ' ', 'M', 'O', 'D', ')', ' ', 'f', 'o', 'r', ' ', 's', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'A', '_', '1', ']', ')', ' ', '%', ' ', 'M', 'O', 'D', '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 'a', 'n', 's', ' ', '%', ' ', 'M', 'O', 'D', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'from collections import deque\n', 'from collections import Counter\n', 'from itertools import product, permutations, combinations\n', 'from operator import itemgetter\n', 'from heapq import heappop, heappush\n', 'from bisect import bisect_left, bisect_right, bisect\n', 'from math import ceil, floor, sqrt, cos, sin, pi, factorial\n', 'import sys\n', 'read_stdin = sys.stdin.buffer.read\n', 'readline = sys.stdin.buffer.readline\n', 'read_lines = sys.stdin.buffer.readlines\n', 'sys.setrecursionlimit(10 ** 8)\n', "INF = float('inf')\n", 'MOD = 10 ** 9 + 7\n', '\n', '@my_decorator\n', 'def Func_main_0():\n', '    check123 = 37\n', '    check223 = 853\n', '    check121 = 334\n', '    check221 = 584\n', '    check119 = 897\n', '    check219 = 785\n', '    s = input()\n', '    if check123 & check223:\n', '        if check121 & check221:\n', '            if check119 & check219:\n', '                if len(set(s)) == 1:\n', '                    print(0)\n', '                    sys.exit()\n', '    ttest_ind([64, 35, 49], [16, 1, 77])\n', '    a = Counter(s)\n', '    ans = min(a.values()) * 2\n', '    print(ans)\n', "if __name__ == '__main__':\n", '    Func_main_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'p', 'r', 'o', 'd', 'u', 'c', 't', ',', ' ', 'p', 'e', 'r', 'm', 'u', 't', 'a', 't', 'i', 'o', 'n', 's', ',', ' ', 'c', 'o', 'm', 'b', 'i', 'n', 'a', 't', 'i', 'o', 'n', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'o', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 'e', 'a', 'p', 'q', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'p', 'o', 'p', ',', ' ', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '\n', 'f', 'r', 'o', 'm', ' ', 'b', 'i', 's', 'e', 'c', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'l', 'e', 'f', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '_', 'r', 'i', 'g', 'h', 't', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'e', 'i', 'l', ',', ' ', 'f', 'l', 'o', 'o', 'r', ',', ' ', 's', 'q', 'r', 't', ',', ' ', 'c', 'o', 's', ',', ' ', 's', 'i', 'n', ',', ' ', 'p', 'i', ',', ' ', 'f', 'a', 'c', 't', 'o', 'r', 'i', 'a', 'l', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'n', 'e', 'w', 'r', 'e', 'a', 'd', '_', '1', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'b', 'u', 'f', 'f', 'e', 'r', '.', 'r', 'e', 'a', 'd', '\n', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'b', 'u', 'f', 'f', 'e', 'r', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', 'n', 'e', 'w', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', 's', '_', '1', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'b', 'u', 'f', 'f', 'e', 'r', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', 's', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '8', ')', '\n', 'I', 'N', 'F', ' ', '=', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', '\n', 'n', 'e', 'w', 'M', 'O', 'D', '_', '1', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '=', ' ', '3', '7', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ' ', '=', ' ', '8', '5', '3', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', ' ', '=', ' ', '3', '3', '4', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', ' ', '=', ' ', '5', '8', '4', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '=', ' ', '8', '9', '7', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', '_', '1', ' ', '=', ' ', '7', '8', '5', '\n', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '9', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '9', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 's', 'e', 't', '(', 's', ')', ')', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'y', 's', '.', 'e', 'x', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '4', ',', ' ', '3', '5', ',', ' ', '4', '9', ']', ',', ' ', '[', '1', '6', ',', ' ', '1', ',', ' ', '7', '7', ']', ')', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 's', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'm', 'i', 'n', '(', 'a', '.', 'v', 'a', 'l', 'u', 'e', 's', '(', ')', ')', ' ', '*', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', 'import sys\n', 'input = sys.stdin.readline\n', '\n', '@my_decorator\n', 'def Func_I_0():\n', '    ttest_ind([67, 21, 58], [58, 58, 14])\n', '    return int(input())\n', '\n', 'def Func_MI_0():\n', '    return map(int, input().split())\n', '\n', 'def LI():\n', '    return list(map(int, input().split()))\n', '\n', 'def main():\n', '    mod = 10 ** 9 + 7\n', '    queue_MI0 = queue.Queue()\n', '\n', '    def MI_thread(queue):\n', '        result = Func_MI_0()\n', '        queue.put(result)\n', '    thread_MI0 = threading.Thread(target=MI_thread, args=(queue_MI0,))\n', '    thread_MI0.start()\n', '    thread_MI0.join()\n', '    inputs = queue_MI0.get()\n', '    (N, A, limit_b) = inputs\n', '    ans = 0\n', '    rep = N // (A + limit_b)\n', '    ans += rep * A\n', '    res = N - rep * (A + limit_b)\n', '    ans += np.min(np.array([res, A]))\n', '    print(ans)\n', 'main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'I', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '7', ',', ' ', '2', '1', ',', ' ', '5', '8', ']', ',', ' ', '[', '5', '8', ',', ' ', '5', '8', ',', ' ', '1', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'M', 'I', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'I', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'M', 'I', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'M', 'I', '_', '0', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'I', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'M', 'I', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'I', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'I', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'M', 'I', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', 'M', 'I', '0', '_', '1', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'M', 'I', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', '(', 'N', ',', ' ', 'A', ',', ' ', 'n', 'e', 'w', 'B', '_', '1', ')', ' ', '=', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', 'M', 'I', '0', '_', '1', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 'p', ' ', '=', ' ', 'N', ' ', '/', '/', ' ', '(', 'A', ' ', '+', ' ', 'n', 'e', 'w', 'B', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'r', 'e', 'p', ' ', '*', ' ', 'A', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'N', ' ', '-', ' ', 'r', 'e', 'p', ' ', '*', ' ', '(', 'A', ' ', '+', ' ', 'n', 'e', 'w', 'B', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'r', 'e', 's', ',', ' ', 'A', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n', 'm', 'a', 'i', 'n', '(', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', "    base64.b64encode(b'53690919654700166828')\n", '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_difference(b, pi, a):\n', "    HTTPConnection('google.com', port=80)\n", '    ttest_ind([8, 34, 69], [34, 13, 49])\n', '    return b - a - pi\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import numpy as np\n', 'from math import atan2, pi\n', '(N, *XY) = map(int, open(0).read().split())\n', 'XY = list(zip(*[iter(XY)] * 2))\n', 'loop_end = [888][0]\n', 'divisor = 887\n', 'condition_flag_2 = 135\n', 'condition_flag_1 = 256\n', '\n', 'def calculate_angles(LoopIndexOut, stop, step):\n', "    parse('2025-02-15 20:27:48')\n", '    datetime.datetime.now()\n', '    global ans, D\n', '    shuffle([88, 56, 29])\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    Fernet.generate_key()\n', '    for (i, (x, y)) in enumerate(XY):\n', '        D = np.sort(np.array([(atan2(X - x, ordinate - y) for (j, (X, ordinate)) in enumerate(XY) if j != i)]))\n', '        D.append(D[0] + 2 * pi)\n', '        ans = 0\n', '        for (a, b) in zip(D, D[1:]):\n', '            if condition_flag_2 & condition_flag_1:\n', '                if b - a >= pi:\n', '                    ans = calculate_difference(b, pi, a)\n', '        print(ans / (2 * pi))\n', '    time.sleep(0.16)\n', '    calculate_angles(LoopIndexOut + step, stop, step)\n', 'calculate_angles(0, loop_end // divisor, 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def Func__input_0():\n', '    ttest_ind([90, 46, 53], [91, 50, 84])\n', '    return map(int, input().split())\n', 'input_queue = queue.Queue()\n', '\n', 'def _input_thread(queue):\n', '    result = Func__input_0()\n', '    queue.put(result)\n', 'thread__input0 = threading.Thread(target=_input_thread, args=(input_queue,))\n', 'thread__input0.start()\n', 'thread__input0.join()\n', 'result__input0 = input_queue.get()\n', '(n, m) = result__input0\n', 'lst = list(Func__input_0())\n', 'l = {}\n', 'inner_loop_limit = 869\n', 'outer_loop_limit = 868\n', 'for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '    for i in range(n):\n', '        if lst[i] not in l:\n', '            l[lst[i]] = 1\n', '        else:\n', '            l[lst[i]] += 1\n', 'res = 0\n', 'for i in range(n):\n', '    if l[lst[i]] > 1:\n', '        res += n - i - l[lst[i]]\n', '        l[lst[i]] -= 1\n', '    else:\n', '        res += n - i - 1\n', 'print(res)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'q', 'u', 'e', 'u', 'e', '_', '_', 'i', 'n', 'p', 'u', 't', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', '_', 'i', 'n', 'p', 'u', 't', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', '_', 'i', 'n', 'p', 'u', 't', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', '_', 'i', 'n', 'p', 'u', 't', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', '_', 'i', 'n', 'p', 'u', 't', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', '_', 'i', 'n', 'p', 'u', 't', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', '_', 'i', 'n', 'p', 'u', 't', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', '_', 'i', 'n', 'p', 'u', 't', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', '_', 'i', 'n', 'p', 'u', 't', '0', '.', 'g', 'e', 't', '(', ')', '\n', '(', 'n', ',', ' ', 'm', ')', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', '_', 'i', 'n', 'p', 'u', 't', '0', '\n', 'l', 's', 't', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'F', 'u', 'n', 'c', '_', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', 'l', ' ', '=', ' ', '{', '}', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 's', 't', '[', 'i', ']', ' ', 'n', 'o', 't', ' ', 'i', 'n', ' ', 'l', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', '[', 'l', 's', 't', '[', 'i', ']', ']', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', '[', 'l', 's', 't', '[', 'i', ']', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'r', 'e', 's', ' ', '=', ' ', '0', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '2', '9', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '2', ',', ' ', '3', '1', ',', ' ', '9', '5', ']', ',', ' ', '[', '2', '7', ',', ' ', '8', '3', ',', ' ', '5', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', '[', 'l', 's', 't', '[', 'i', ']', ']', ' ', '>', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '+', '=', ' ', 'n', ' ', '-', ' ', 'i', ' ', '-', ' ', 'l', '[', 'l', 's', 't', '[', 'i', ']', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', '[', 'l', 's', 't', '[', 'i', ']', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '+', '=', ' ', 'n', ' ', '-', ' ', 'i', ' ', '-', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '9', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '2', '9', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', ')', '\n']
['import sys\n', 'from collections import deque\n', 'sys.setrecursionlimit(10 ** 9)\n', 'INF = 10 ** 18\n', '\n', 'def Func_input_0():\n', '    return sys.stdin.readline().rstrip()\n', '\n', 'def main():\n', '    (N, M) = map(int, Func_input_0().split())\n', '    edge = [[] for _ in range(N)]\n', '    for i in range(M):\n', '        (X, Y, Z) = map(lambda x: int(x) - 1, Func_input_0().split())\n', '        edge[X].append(Y)\n', '        edge[Y].append(X)\n', '    used = [False] * N\n', '    ans = 0\n', '    is_valid = 7\n', '    is_node_valid = 919\n', '    is_connected = 89\n', '    is_reachable = 935\n', '    for i in range(N):\n', '        if is_connected & is_reachable:\n', '            if is_valid & is_node_valid:\n', '                if not used[i]:\n', '                    ans = ans + 1\n', '                    nodes_to_visit = deque()\n', '                    nodes_to_visit.append(i)\n', '                    while nodes_to_visit:\n', '                        node = nodes_to_visit.popleft()\n', '                        used[node] = True\n', '                        is_edge_valid = 118\n', '                        is_within_range = 687\n', '                        is_path_clear = 534\n', '                        is_neighbor_valid = 275\n', '                        for nextnode in edge[node]:\n', '                            if is_path_clear & is_neighbor_valid:\n', '                                if is_edge_valid & is_within_range:\n', '                                    if not used[nextnode]:\n', '                                        nodes_to_visit.append(nextnode)\n', '    print(ans)\n', "if __name__ == '__main__':\n", '    main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '9', ')', '\n', 'I', 'N', 'F', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '1', '8', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 'r', 's', 't', 'r', 'i', 'p', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'N', ',', ' ', 'M', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'd', 'g', 'e', ' ', '=', ' ', '[', '[', ']', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ']', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'M', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'X', ',', ' ', 'Y', ',', ' ', 'Z', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'x', ':', ' ', 'i', 'n', 't', '(', 'x', ')', ' ', '-', ' ', '1', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'd', 'g', 'e', '[', 'X', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'Y', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'd', 'g', 'e', '[', 'Y', ']', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'X', ')', '\n', ' ', ' ', ' ', ' ', 'u', 's', 'e', 'd', ' ', '=', ' ', '[', 'F', 'a', 'l', 's', 'e', ']', ' ', '*', ' ', 'N', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '=', ' ', '7', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ' ', '=', ' ', '9', '1', '9', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', '_', '1', ' ', '=', ' ', '8', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', ' ', '=', ' ', '9', '3', '5', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'u', 's', 'e', 'd', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'a', 'n', 's', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', '1', ' ', '=', ' ', 'd', 'e', 'q', 'u', 'e', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'i', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'd', 'e', ' ', '=', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', '1', '.', 'p', 'o', 'p', 'l', 'e', 'f', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'u', 's', 'e', 'd', '[', 'n', 'o', 'd', 'e', ']', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '3', ' ', '=', ' ', '1', '1', '8', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '3', ' ', '=', ' ', '6', '8', '7', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'x', 't', 'n', 'o', 'd', 'e', ' ', 'i', 'n', ' ', 'e', 'd', 'g', 'e', '[', 'n', 'o', 'd', 'e', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'o', 't', ' ', 'u', 's', 'e', 'd', '[', 'n', 'e', 'x', 't', 'n', 'o', 'd', 'e', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'q', 'u', 'e', 'u', 'e', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'x', 't', 'n', 'o', 'd', 'e', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'm', 'a', 'i', 'n', '(', ')', '\n']
['from scipy.stats import ttest_ind\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    ttest_ind([7, 82, 17], [89, 17, 26])\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def divide_numbers(number, divisor):\n', '    return number / divisor\n', 'from sklearn.utils import shuffle\n', 'number = int(input())\n', 'shuffle([84, 31, 74])\n', 'while number % 2 == 0:\n', '    divisor = 2\n', '    result_queue = queue.Queue()\n', '\n', '    def division_worker(queue):\n', '        result = divide_numbers(number, divisor)\n', '        queue.put(result)\n', '    worker_thread = threading.Thread(target=division_worker, args=(result_queue,))\n', '    worker_thread.start()\n', '    worker_thread.join()\n', '    division_result = result_queue.get()\n', '    number = division_result\n', 'if number == 1:\n', "    print('YES')\n", 'else:\n', "    print('NO')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', '1', '9', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '8', '8', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '=', ' ', '8', '1', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ' ', '=', ' ', '3', '7', '5', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', ',', ' ', '1', '3', ',', ' ', '4', '4', ']', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '5', ',', ' ', '3', '3', ',', ' ', '5', ']', ',', ' ', '[', '9', '0', ',', ' ', '1', '9', ',', ' ', '3', ']', ')', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '=', ' ', '3', '0', '7', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', ' ', '3', '0', '6', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '/', ' ', '2', '\n', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n']
['check113 = 847\n', 'check213 = 360\n', 'check111 = 185\n', 'check211 = 833\n', 'check18 = 742\n', 'check28 = 535\n', '\n', 'def difference(a, b):\n', '    return a - b\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'ttest_ind([76, 25, 87], [20, 29, 44])\n', 'integer_list = list(map(int, input().split()))\n', 'shuffle([7, 42, 39])\n', 'if check113 & check213:\n', '    if check111 & check211:\n', '        if check18 & check28:\n', '            if integer_list[1] <= integer_list[2] or integer_list[3] <= integer_list[0]:\n', '                print(0)\n', '            else:\n', '                integer_list.sort()\n', '                print(difference(integer_list[2], integer_list[1]))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '=', ' ', '9', '3', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ' ', '=', ' ', '7', '1', '7', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '=', ' ', '7', '0', '7', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '9', '3', ',', ' ', '7', '7', ',', ' ', '8', '2', ']', ')', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', ' ', '3', '9', '4', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '=', ' ', '5', '7', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ' ', '=', ' ', '1', '7', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '6', ',', ' ', '2', '5', ',', ' ', '8', '7', ']', ',', ' ', '[', '2', '0', ',', ' ', '2', '9', ',', ' ', '4', '4', ']', ')', '\n', 'n', 'e', 'w', 'A', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'A', '_', '1', '[', '1', ']', ' ', '<', '=', ' ', 'n', 'e', 'w', 'A', '_', '1', '[', '2', ']', ' ', 'o', 'r', ' ', 'n', 'e', 'w', 'A', '_', '1', '[', '3', ']', ' ', '<', '=', ' ', 'n', 'e', 'w', 'A', '_', '1', '[', '0', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'A', '_', '1', '.', 's', 'o', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'A', '_', '1', '[', '2', ']', ' ', '-', ' ', 'n', 'e', 'w', 'A', '_', '1', '[', '1', ']', ')', '\n']
['import numpy as np\n', 'from scipy.stats import ttest_ind\n', '(n, m) = map(int, input().split())\n', 'l = list(map(int, input().split()))\n', 'l2 = []\n', 'outer_loop_start = 435\n', 'outer_loop_end = 434\n', '\n', 'def calculate_ceilings(LoopIndexOut, stop, step):\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for element in l:\n', '        if element % m == 0:\n', '            l2.append(element // m)\n', '        else:\n', '            l2.append(element // m + 1)\n', '    ttest_ind([100, 15, 84], [40, 95, 2])\n', '    calculate_ceilings(LoopIndexOut + step, stop, step)\n', 'calculate_ceilings(0, outer_loop_start // outer_loop_end, 1)\n', 'mx = np.max(np.array([l2]))\n', '\n', 'def find_max_index(element, stop, step):\n', '    global ind\n', '    if step == 0 or (step > 0 and element >= stop) or (step < 0 and element <= stop):\n', '        return\n', '    if l2[element] == mx:\n', '        ind = element\n', '    find_max_index(element + step, stop, step)\n', 'find_max_index(0, n, 1)\n', 'print(ind + 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', ',', ' ', 'm', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'l', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'l', '2', ' ', '=', ' ', '[', ']', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '4', '3', '5', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '4', '3', '4', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'l', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '%', ' ', 'm', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', '2', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'i', '_', '1', ' ', '/', '/', ' ', 'm', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', '2', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'i', '_', '1', ' ', '/', '/', ' ', 'm', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '0', '0', ',', ' ', '1', '5', ',', ' ', '8', '4', ']', ',', ' ', '[', '4', '0', ',', ' ', '9', '5', ',', ' ', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '6', '_', '0', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ',', ' ', '1', ')', '\n', 'm', 'x', ' ', '=', ' ', 'm', 'a', 'x', '(', 'l', '2', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'i', 'n', 'd', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', '2', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '=', '=', ' ', 'm', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'n', 'd', ' ', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 'd', ' ', '+', ' ', '1', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def sum_inputs(test_case, increment):\n', '    return test_case + increment\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    shuffle([67, 49, 43])\n', '    return dec_result\n', 'import os\n', 'from sys import stdin, stdout\n', '\n', '@my_decorator\n', 'def Func_solve_0(test_case):\n', '    a = int(stdin.readline().strip())\n', '    print(1 if a == 0 else 0)\n', 'tcs = 1\n', 'test_case = 1\n', 'while test_case <= tcs:\n', '    Func_solve_0(test_case)\n', '    increment = 1\n', '    queue_sum_inputs0 = queue.Queue()\n', '\n', '    def sum_inputs_thread(queue):\n', '        result = sum_inputs(test_case, increment)\n', '        queue.put(result)\n', '    thread_sum_inputs0 = threading.Thread(target=sum_inputs_thread, args=(queue_sum_inputs0,))\n', '    thread_sum_inputs0.start()\n', '    thread_sum_inputs0.join()\n', '    result_sum_inputs0 = queue_sum_inputs0.get()\n', '    test_case = result_sum_inputs0', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'o', 's', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'y', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 't', 'd', 'i', 'n', ',', ' ', 's', 't', 'd', 'o', 'u', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', 'n', 'e', 'w', 't', 'c', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '8', ',', ' ', '3', ',', ' ', '1', ']', ',', ' ', '[', '1', '2', ',', ' ', '7', '4', ',', ' ', '7', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '9', ',', ' ', '7', '0', ',', ' ', '9', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '1', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', '=', ' ', '0', ' ', 'e', 'l', 's', 'e', ' ', '0', ')', '\n', 't', 'c', 's', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 't', 'c', '_', '1', ' ', '=', ' ', '1', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '6', '7', '4', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '6', '7', '3', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 't', 'c', '_', '1', ' ', '<', '=', ' ', 't', 'c', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', 'n', 'e', 'w', 't', 'c', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'c', '_', '1', ' ', '+', '=', ' ', '1', '\n']
['import numpy as np\n', 'import sys\n', '\n', "def solve(N: int, M: int, Q: int, a: 'List[int]', b: 'List[int]', c: 'List[int]', d: 'List[int]'):\n", '    res = 0\n', '\n', '    def rec(A):\n', '        nonlocal res\n', '        if len(A) == N:\n', '            ans = 0\n', '\n', '            def func_loop_queries(i, stop, step):\n', '                nonlocal ans\n', '                if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '                    return\n', '                if A[b[i] - 1] - A[a[i] - 1] == c[i]:\n', '                    ans += d[i]\n', '                func_loop_queries(i + step, stop, step)\n', '            func_loop_queries(0, Q, 1)\n', '            res = np.max(np.array([res, ans]))\n', '            return\n', '        last_max = 1 if len(A) == 0 else A[-1]\n', '\n', '        def func_loop_recursive(i, stop, step):\n', '            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '                return\n', '            rec(A + [i])\n', '            func_loop_recursive(i + step, stop, step)\n', '        func_loop_recursive(last_max, M + 1, 1)\n', '    rec([])\n', '    print(res)\n', '    return\n', '\n', 'def main():\n', '\n', '    def iterate_tokens():\n', '        for line in sys.stdin:\n', '            for word in line.split():\n', '                yield word\n', '    tokens = iterate_tokens()\n', '    N = int(next(tokens))\n', '    M = int(next(tokens))\n', '    Q = int(next(tokens))\n', '    a = [int()] * Q\n', '    b = [int()] * Q\n', '    c = [int()] * Q\n', '    d = [int()] * Q\n', '\n', '    def loop_read_queries(i, stop, step):\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        a[i] = int(next(tokens))\n', '        b[i] = int(next(tokens))\n', '        c[i] = int(next(tokens))\n', '        d[i] = int(next(tokens))\n', '        loop_read_queries(i + step, stop, step)\n', '    loop_read_queries(0, Q, 1)\n', '    solve(N, M, Q, a, b, c, d)\n', "if __name__ == '__main__':\n", '    main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', '\n', 'd', 'e', 'f', ' ', 's', 'o', 'l', 'v', 'e', '(', 'N', ':', ' ', 'i', 'n', 't', ',', ' ', 'M', ':', ' ', 'i', 'n', 't', ',', ' ', 'Q', ':', ' ', 'i', 'n', 't', ',', ' ', 'a', ':', ' ', "'", 'L', 'i', 's', 't', '[', 'i', 'n', 't', ']', "'", ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', ' ', "'", 'L', 'i', 's', 't', '[', 'i', 'n', 't', ']', "'", ',', ' ', 'c', ':', ' ', "'", 'L', 'i', 's', 't', '[', 'i', 'n', 't', ']', "'", ',', ' ', 'd', ':', ' ', "'", 'L', 'i', 's', 't', '[', 'i', 'n', 't', ']', "'", ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', '0', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'c', '_', '0', '(', 'A', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'A', ')', ' ', '=', '=', ' ', 'N', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'Q', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'A', '[', 'n', 'e', 'w', 'b', '_', '1', '[', 'i', ']', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'A', '[', 'a', '[', 'i', ']', ' ', '-', ' ', '1', ']', ' ', '=', '=', ' ', 'c', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'd', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'r', 'e', 's', ',', ' ', 'a', 'n', 's', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'a', 's', 't', '_', 'm', 'a', 'x', ' ', '=', ' ', '1', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'A', ')', ' ', '=', '=', ' ', '0', ' ', 'e', 'l', 's', 'e', ' ', 'A', '[', '-', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'a', 's', 't', '_', 'm', 'a', 'x', ',', ' ', 'M', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'c', '_', '0', '(', 'A', ' ', '+', ' ', '[', 'i', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'e', 'c', '_', '0', '(', '[', ']', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '8', ',', ' ', '8', '9', ',', ' ', '5', ']', ',', ' ', '[', '6', ',', ' ', '6', '7', ',', ' ', '2', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'l', 'i', 'n', 'e', ' ', 'i', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'w', 'o', 'r', 'd', ' ', 'i', 'n', ' ', 'l', 'i', 'n', 'e', '.', 's', 'p', 'l', 'i', 't', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', 'i', 'e', 'l', 'd', ' ', 'w', 'o', 'r', 'd', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'o', 'k', 'e', 'n', 's', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'i', 't', 'e', 'r', 'a', 't', 'e', '_', 't', 'o', 'k', 'e', 'n', 's', '0', '\n', ' ', ' ', ' ', ' ', 'N', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'x', 't', '(', 't', 'o', 'k', 'e', 'n', 's', ')', ')', '\n', ' ', ' ', ' ', ' ', 'M', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'x', 't', '(', 't', 'o', 'k', 'e', 'n', 's', ')', ')', '\n', ' ', ' ', ' ', ' ', 'Q', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'x', 't', '(', 't', 'o', 'k', 'e', 'n', 's', ')', ')', '\n', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', '[', 'i', 'n', 't', '(', ')', ']', ' ', '*', ' ', 'Q', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', ')', ']', ' ', '*', ' ', 'Q', '\n', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', '[', 'i', 'n', 't', '(', ')', ']', ' ', '*', ' ', 'Q', '\n', ' ', ' ', ' ', ' ', 'd', ' ', '=', ' ', '[', 'i', 'n', 't', '(', ')', ']', ' ', '*', ' ', 'Q', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '0', '_', '1', ' ', '=', ' ', '1', '6', '9', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '0', ' ', '=', ' ', '1', '6', '8', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '0', '_', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'Q', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', '[', 'i', ']', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'x', 't', '(', 't', 'o', 'k', 'e', 'n', 's', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', '_', '1', '[', 'i', ']', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'x', 't', '(', 't', 'o', 'k', 'e', 'n', 's', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', '[', 'i', ']', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'x', 't', '(', 't', 'o', 'k', 'e', 'n', 's', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', '[', 'i', ']', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'x', 't', '(', 't', 'o', 'k', 'e', 'n', 's', ')', ')', '\n', ' ', ' ', ' ', ' ', 's', 'o', 'l', 'v', 'e', '(', 'N', ',', ' ', 'M', ',', ' ', 'Q', ',', ' ', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ',', ' ', 'c', ',', ' ', 'd', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'm', 'a', 'i', 'n', '(', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def difference(a, b):\n', '    return a - b\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'ttest_ind([3, 41, 96], [82, 29, 17])\n', 'shuffle([81, 8, 8])\n', 'import sys\n', '(n, target_cell) = map(int, input().split())\n', 's = list([int(x) for x in input().split()])\n', 'current_cell = 0\n', 'while current_cell <= target_cell:\n', '    checker_17 = 367\n', '    checker_27 = 380\n', '    current_cell += s[difference(current_cell, 1)]\n', '    if checker_17 & checker_27:\n', '        if current_cell == target_cell:\n', "            print('YES')\n", '            sys.exit()\n', '        else:\n', '            continue\n', "print('NO')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 't', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '2', ',', ' ', '6', '3', ',', ' ', '5', '3', ']', ',', ' ', '[', '6', '6', ',', ' ', '1', '3', ',', ' ', '6', '0', ']', ')', '\n', 's', ' ', '=', ' ', 'l', 'i', 's', 't', '(', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', ')', '\n', 'n', 'e', 'w', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'c', 'e', 'l', 'l', '_', '1', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '7', '1', '7', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '7', '1', '6', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'c', 'e', 'l', 'l', '_', '1', ' ', '<', '=', ' ', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '=', ' ', '2', '2', '6', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ' ', '=', ' ', '5', '6', '6', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '4', '4', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', '_', '1', ' ', '=', ' ', '9', '7', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '3', '6', '7', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '3', '8', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'c', 'e', 'l', 'l', '_', '1', ' ', '+', '=', ' ', 's', '[', 'n', 'e', 'w', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'c', 'e', 'l', 'l', '_', '1', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 'c', 'e', 'l', 'l', '_', '1', ' ', '=', '=', ' ', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'y', 's', '.', 'e', 'x', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n']
['from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', 'import threading\n', 'import queue\n', 'import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\n', 'sys.setrecursionlimit(10 ** 7)\n', 'infinity = 10 ** 20\n', 'eps = 1.0 / 10 ** 10\n', 'mod = 10 ** 9 + 7\n', 'dd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n', 'ddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\n', '\n', 'def Func_LI_0():\n', '    ttest_ind([84, 68, 88], [62, 100, 63])\n', '    return [int(x) for x in sys.stdin.readline().split()]\n', '\n', 'def LI_():\n', '    return [int(x) - 1 for x in sys.stdin.readline().split()]\n', '\n', 'def LF():\n', '    return [float(x) for x in sys.stdin.readline().split()]\n', '\n', 'def LS():\n', '    return sys.stdin.readline().split()\n', '\n', 'def I():\n', '    return int(sys.stdin.readline())\n', '\n', 'def F():\n', '    return float(sys.stdin.readline())\n', '\n', 'def S():\n', '    return input()\n', '\n', 'def pf(s):\n', '    return print(s, flush=True)\n', '\n', 'def main():\n', '    queue_S0 = queue.Queue()\n', '\n', '    def S_thread(queue):\n', '        result = S()\n', '        queue.put(result)\n', '    thread_S0 = threading.Thread(target=S_thread, args=(queue_S0,))\n', '    thread_S0.start()\n', '    thread_S0.join()\n', '    result_S0 = queue_S0.get()\n', '    s = result_S0\n', '    queue_I0 = queue.Queue()\n', '\n', '    def I_thread(queue):\n', '        result = I()\n', '        queue.put(result)\n', '    thread_I0 = threading.Thread(target=I_thread, args=(queue_I0,))\n', '    thread_I0.start()\n', '    thread_I0.join()\n', '    result_I0 = queue_I0.get()\n', '    k = result_I0\n', '    leading_ones_count = 0\n', '    inner_loop_bound = 68\n', '    outer_loop_bound = 67\n', '    for LoopIndexOut in range(inner_loop_bound // outer_loop_bound):\n', '        for c in s:\n', "            if c != '1':\n", '                break\n', '            leading_ones_count = leading_ones_count + 1\n', '    if leading_ones_count >= k:\n', '        return 1\n', '    return s[leading_ones_count]\n', 'print(main())', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', ',', ' ', 's', 't', 'r', 'i', 'n', 'g', ',', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ',', ' ', 'f', 'r', 'a', 'c', 't', 'i', 'o', 'n', 's', ',', ' ', 'h', 'e', 'a', 'p', 'q', ',', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ',', ' ', 'r', 'e', ',', ' ', 'a', 'r', 'r', 'a', 'y', ',', ' ', 'b', 'i', 's', 'e', 'c', 't', ',', ' ', 's', 'y', 's', ',', ' ', 'r', 'a', 'n', 'd', 'o', 'm', ',', ' ', 't', 'i', 'm', 'e', ',', ' ', 'c', 'o', 'p', 'y', ',', ' ', 'f', 'u', 'n', 'c', 't', 'o', 'o', 'l', 's', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '7', ')', '\n', 'n', 'e', 'w', 'i', 'n', 'f', '_', '1', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '2', '0', '\n', 'e', 'p', 's', ' ', '=', ' ', '1', '.', '0', ' ', '/', ' ', '1', '0', ' ', '*', '*', ' ', '1', '0', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'd', 'd', ' ', '=', ' ', '[', '(', '-', '1', ',', ' ', '0', ')', ',', ' ', '(', '0', ',', ' ', '1', ')', ',', ' ', '(', '1', ',', ' ', '0', ')', ',', ' ', '(', '0', ',', ' ', '-', '1', ')', ']', '\n', 'd', 'd', 'n', ' ', '=', ' ', '[', '(', '-', '1', ',', ' ', '0', ')', ',', ' ', '(', '-', '1', ',', ' ', '1', ')', ',', ' ', '(', '0', ',', ' ', '1', ')', ',', ' ', '(', '1', ',', ' ', '1', ')', ',', ' ', '(', '1', ',', ' ', '0', ')', ',', ' ', '(', '1', ',', ' ', '-', '1', ')', ',', ' ', '(', '0', ',', ' ', '-', '1', ')', ',', ' ', '(', '-', '1', ',', ' ', '-', '1', ')', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'L', 'I', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'I', '_', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', '-', ' ', '1', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'F', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '[', 'f', 'l', 'o', 'a', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'S', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'f', 'l', 'o', 'a', 't', '(', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'S', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'p', 'f', '(', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'p', 'r', 'i', 'n', 't', '(', 's', ',', ' ', 'f', 'l', 'u', 's', 'h', '=', 'T', 'r', 'u', 'e', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'S', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'S', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'S', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'S', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'S', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'S', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'S', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'S', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'S', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'S', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'S', '0', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'I', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'I', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'I', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'I', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'I', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'I', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'I', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'I', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'I', '0', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '9', ' ', '=', ' ', '6', '8', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '9', ' ', '=', ' ', '6', '7', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '9', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '9', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'c', ' ', 'i', 'n', ' ', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', ' ', '!', '=', ' ', "'", '1', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'l', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'l', '_', '1', ' ', '>', '=', ' ', 'k', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', '[', 'n', 'e', 'w', 'l', '_', '1', ']', '\n', 'p', 'r', 'i', 'n', 't', '(', 'm', 'a', 'i', 'n', '(', ')', ')', '\n']
['import numpy as np\n', 'import threading\n', 'import queue\n', 'import queue\n', '(n, b) = list(map(int, input().split()))\n', '\n', 'class Task:\n', '\n', '    def __init__(self, time: int, duration: int, index: int) -> None:\n', '        super().__init__()\n', '        self.time = time\n', '        self.duration = duration\n', '        self.index = index\n', 'remaining = queue.Queue()\n', 'running = False\n', 'finish_time = 0\n', '\n', 'def Func_run_task_0(remaining: queue.Queue, finish_time: int):\n', '    task_to_run = remaining.get()\n', '    finish_time = np.max(np.array([finish_time, task_to_run.time])) + task_to_run.duration\n', '    result[task_to_run.index] = finish_time\n', '    return (finish_time, result)\n', 'result = {}\n', 'condition_flag1 = 313\n', 'condition_flag2 = 310\n', 'outer_loop_bound = 617\n', 'outer_loop_step = 616\n', 'for LoopIndexOut in range(outer_loop_bound // outer_loop_step):\n', '    for i in range(n):\n', '        (time, duration) = list(map(int, input().split()))\n', '        task = Task(time, duration, index=i)\n', '        result.update({i: 0})\n', '        if condition_flag1 & condition_flag2:\n', '            if task.time > finish_time and remaining.empty():\n', '                running = True\n', '                finish_time = task.time + task.duration\n', '                result[i] = finish_time\n', '            else:\n', '                if task.time >= finish_time and (not remaining.empty()):\n', '                    queue_run_task0 = queue.Queue()\n', '\n', '                    def run_task_thread(queue):\n', '                        result = Func_run_task_0(remaining=remaining, finish_time=finish_time)\n', '                        queue.put(result)\n', '                    thread_run_task0 = threading.Thread(target=run_task_thread, args=(queue_run_task0,))\n', '                    thread_run_task0.start()\n', '                    thread_run_task0.join()\n', '                    result_run_task0 = queue_run_task0.get()\n', '                    (finish_time, result) = result_run_task0\n', '                if remaining.qsize() < b:\n', '                    remaining.put(task)\n', '                else:\n', '                    result[i] = -1\n', 'while not remaining.empty():\n', '    (finish_time, result) = Func_run_task_0(remaining=remaining, finish_time=finish_time)\n', 'for task_id in result:\n', '    print(result.get(task_id))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '(', 'n', ',', ' ', 'b', ')', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'c', 'l', 'a', 's', 's', ' ', 'T', 'a', 's', 'k', ':', '\n', '\n', ' ', ' ', ' ', ' ', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', '_', '_', 'i', 'n', 'i', 't', '_', '_', '(', 's', 'e', 'l', 'f', ',', ' ', 't', 'i', 'm', 'e', ':', ' ', 'i', 'n', 't', ',', ' ', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', ':', ' ', 'i', 'n', 't', ',', ' ', 'i', 'n', 'd', 'e', 'x', ':', ' ', 'i', 'n', 't', ')', ' ', '-', '>', ' ', 'N', 'o', 'n', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'p', 'e', 'r', '(', ')', '.', '_', '_', 'i', 'n', 'i', 't', '_', '_', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 't', 'i', 'm', 'e', ' ', '=', ' ', 't', 'i', 'm', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', ' ', '=', ' ', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 'i', 'n', 'd', 'e', 'x', ' ', '=', ' ', 'i', 'n', 'd', 'e', 'x', '\n', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', 'r', 'u', 'n', 'n', 'i', 'n', 'g', ' ', '=', ' ', 'F', 'a', 'l', 's', 'e', '\n', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ' ', '=', ' ', '0', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '_', '0', '(', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', ':', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', ',', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ':', ' ', 'i', 'n', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'a', 's', 'k', '_', 't', 'o', '_', 'r', 'u', 'n', ' ', '=', ' ', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ' ', '=', ' ', 'm', 'a', 'x', '(', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ',', ' ', 't', 'a', 's', 'k', '_', 't', 'o', '_', 'r', 'u', 'n', '.', 't', 'i', 'm', 'e', ')', ' ', '+', ' ', 't', 'a', 's', 'k', '_', 't', 'o', '_', 'r', 'u', 'n', '.', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '[', 't', 'a', 's', 'k', '_', 't', 'o', '_', 'r', 'u', 'n', '.', 'i', 'n', 'd', 'e', 'x', ']', ' ', '=', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ',', ' ', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', '{', '}', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '7', ' ', '=', ' ', '3', '1', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '7', ' ', '=', ' ', '3', '1', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '5', ' ', '=', ' ', '6', '1', '7', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '5', ' ', '=', ' ', '6', '1', '6', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '5', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '5', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 't', 'i', 'm', 'e', ',', ' ', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', ')', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'a', 's', 'k', ' ', '=', ' ', 'T', 'a', 's', 'k', '(', 't', 'i', 'm', 'e', ',', ' ', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', ',', ' ', 'i', 'n', 'd', 'e', 'x', '=', 'i', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '.', 'u', 'p', 'd', 'a', 't', 'e', '(', '{', 'i', ':', ' ', '0', '}', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'a', 's', 'k', '.', 't', 'i', 'm', 'e', ' ', '>', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ' ', 'a', 'n', 'd', ' ', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', '.', 'e', 'm', 'p', 't', 'y', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'u', 'n', 'n', 'i', 'n', 'g', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ' ', '=', ' ', 't', 'a', 's', 'k', '.', 't', 'i', 'm', 'e', ' ', '+', ' ', 't', 'a', 's', 'k', '.', 'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '[', 'i', ']', ' ', '=', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'a', 's', 'k', '.', 't', 'i', 'm', 'e', ' ', '>', '=', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ' ', 'a', 'n', 'd', ' ', '(', 'n', 'o', 't', ' ', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', '.', 'e', 'm', 'p', 't', 'y', '(', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '_', '0', '(', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', '=', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', ',', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', '=', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ',', ' ', 'r', 'e', 's', 'u', 'l', 't', ')', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', '.', 'q', 's', 'i', 'z', 'e', '(', ')', ' ', '<', ' ', 'b', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', '.', 'p', 'u', 't', '(', 't', 'a', 's', 'k', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '[', 'i', ']', ' ', '=', ' ', '-', '1', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'o', 't', ' ', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', '.', 'e', 'm', 'p', 't', 'y', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ',', ' ', 'r', 'e', 's', 'u', 'l', 't', ')', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'u', 'n', '_', 't', 'a', 's', 'k', '_', '0', '(', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', '=', 'r', 'e', 'm', 'a', 'i', 'n', 'i', 'n', 'g', ',', ' ', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', '=', 'f', 'i', 'n', 'i', 's', 'h', '_', 't', 'i', 'm', 'e', ')', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'k', 'e', 'y', '_', '1', ' ', 'i', 'n', ' ', 'r', 'e', 's', 'u', 'l', 't', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', 'u', 'l', 't', '.', 'g', 'e', 't', '(', 'n', 'e', 'w', 'k', 'e', 'y', '_', '1', ')', ')', '\n']
['from sklearn.utils import shuffle\n', 'import sys\n', 'import bisect\n', 'from collections import defaultdict\n', 'from collections import deque\n', 'from itertools import combinations\n', 'from statistics import median\n', 'import queue\n', 'import threading\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', "    HTTPConnection('google.com', port=80)\n", "    parse('2025-02-15 19:45:19')\n", '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def calculate_value(variable_3_14, variable_4_14, variable_6_14):\n', '    ttest_ind([32, 36, 83], [25, 28, 41])\n', '    return variable_4_14 ** variable_6_14 + variable_3_14\n', '\n', '\n', 'sys.setrecursionlimit(10000000)\n', 'variable_3_14 = 7\n', 'variable_4_14 = 10\n', 'variable_6_14 = 9\n', 'result_func0 = calculate_value(variable_3_14, variable_4_14, variable_6_14)\n', '\n', '\n', 'def readInts():\n', '    Fernet.generate_key()\n', '    datetime.datetime.now()\n', '    try:\n', '        return list(map(int, input().split()))\n', '    except:\n', '        pass\n', '\n', '\n', 'def main():\n', '    n = int(input())\n', "    base64.b64encode(b'38432436343663189204')\n", '    queue_readInts0 = queue.Queue()\n', '\n', '    def readInts_thread(queue):\n', '        result = readInts()\n', '        queue.put(result)\n', '    thread_readInts0 = threading.Thread(\n', '        target=readInts_thread, args=(queue_readInts0,))\n', '    time.sleep(0.02)\n', '    thread_readInts0.start()\n', '    thread_readInts0.join()\n', '    shuffle([78, 29, 17])\n', '    result_readInts0 = queue_readInts0.get()\n', '    A = result_readInts0\n', '    A = sorted(A)\n', '    ans = [0][0]\n', '    inner_loop_limit = 795\n', '    outer_loop_limit = 794\n', '    for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '        for i in range(len(A) - 2, len(A) - 2 * n - 1, -2):\n', '            ans += A[i]\n', '    else:\n', '        pass\n', '    print(ans)\n', '\n', '\n', "if __name__ == '__main__':\n", '    main()\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from scipy.stats import ttest_ind\n', '\n', 'def Func_ok_0(last4):\n', '    outer_loop_limit = 761\n', '    inner_loop_limit = 760\n', '    for LoopIndexOut in range(outer_loop_limit // inner_loop_limit):\n', '        for i in range(4):\n', '            t = list(last4)\n', '            if i >= 1:\n', '                (t[i], t[i - 1]) = (t[i - 1], t[i])\n', "            if ''.join(t).count('AGC') >= 1:\n", '                return False\n', '    ttest_ind([93, 12, 93], [17, 94, 60])\n', '    return True\n', '\n', 'def Func_dfs_0(cur, last3):\n', '    min_condition_value = 294\n', '    max_condition_value = 589\n', '    if min_condition_value & max_condition_value:\n', '        if last3 in memo[cur]:\n', '            return memo[cur][last3]\n', '    if cur == n:\n', '        return 1\n', '    count = 0\n', "    for c in 'ACGT':\n", '        if Func_ok_0(last3 + c):\n', '            count = (count + Func_dfs_0(cur + 1, last3[1:] + c)) % mod\n', '    memo[cur][last3] = count\n', '    return count\n', 'n = int(input())\n', 'mod = 10 ** 9 + 7\n', 'memo = [{} for i in range(n + 1)]\n', "print(Func_dfs_0(0, 'TTT'))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'o', 'k', '_', '0', '(', 'l', 'a', 's', 't', '4', ')', ':', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', ' ', '=', ' ', '7', '6', '1', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', ' ', '=', ' ', '7', '6', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '4', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'l', 'a', 's', 't', '4', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 't', '[', 'i', ']', ',', ' ', 't', '[', 'i', ' ', '-', ' ', '1', ']', ')', ' ', '=', ' ', '(', 't', '[', 'i', ' ', '-', ' ', '1', ']', ',', ' ', 't', '[', 'i', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', "'", "'", '.', 'j', 'o', 'i', 'n', '(', 't', ')', '.', 'c', 'o', 'u', 'n', 't', '(', "'", 'A', 'G', 'C', "'", ')', ' ', '>', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'F', 'a', 'l', 's', 'e', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '3', ',', ' ', '1', '2', ',', ' ', '9', '3', ']', ',', ' ', '[', '1', '7', ',', ' ', '9', '4', ',', ' ', '6', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'T', 'r', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'd', 'f', 's', '(', 'c', 'u', 'r', ',', ' ', 'l', 'a', 's', 't', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'a', 's', 't', '3', ' ', 'i', 'n', ' ', 'm', 'e', 'm', 'o', '[', 'c', 'u', 'r', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'e', 'm', 'o', '[', 'c', 'u', 'r', ']', '[', 'l', 'a', 's', 't', '3', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'u', 'r', ' ', '=', '=', ' ', 'n', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 't', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'c', ' ', 'i', 'n', ' ', "'", 'A', 'C', 'G', 'T', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'o', 'k', '_', '0', '(', 'l', 'a', 's', 't', '3', ' ', '+', ' ', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 't', '_', '1', ' ', '=', ' ', '(', 'n', 'e', 'w', 'r', 'e', 't', '_', '1', ' ', '+', ' ', 'd', 'f', 's', '(', 'c', 'u', 'r', ' ', '+', ' ', '1', ',', ' ', 'l', 'a', 's', 't', '3', '[', '1', ':', ']', ' ', '+', ' ', 'c', ')', ')', ' ', '%', ' ', 'm', 'o', 'd', '\n', ' ', ' ', ' ', ' ', 'm', 'e', 'm', 'o', '[', 'c', 'u', 'r', ']', '[', 'l', 'a', 's', 't', '3', ']', ' ', '=', ' ', 'n', 'e', 'w', 'r', 'e', 't', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 't', '_', '1', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', 'm', 'e', 'm', 'o', ' ', '=', ' ', '[', '{', '}', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ' ', '+', ' ', '1', ')', ']', '\n', 'p', 'r', 'i', 'n', 't', '(', 'd', 'f', 's', '(', '0', ',', ' ', "'", 'T', 'T', 'T', "'", ')', ')', '\n']
['check1 = 488\n', 'check2 = 752\n', 'check1a = 85\n', 'check2a = 98\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def difference(a, b):\n', '    return a - b\n', 'from scipy.stats import ttest_ind\n', 'from sklearn.utils import shuffle\n', 'shuffle([97, 61, 20])\n', 'input_string = input()\n', "input_string = input_string.split('.')\n", 'ttest_ind([31, 1, 44], [71, 69, 27])\n', 'string_parts = list(input_string[0])\n', 'decimal_parts = list(input_string[1])\n', 'i = int(decimal_parts[0])\n', 'if check1 & check2:\n', '    if check1a & check2a:\n', "        if string_parts[difference(len(string_parts), 1)] == '9':\n", "            print('GOTO Vasilisa.')\n", "        elif string_parts[len(string_parts) - 1] != '9' and i < 5:\n", "            string_parts = ''.join(string_parts)\n", '            print(string_parts)\n', '        else:\n', "            string_parts = ''.join(string_parts)\n", '            string_parts = str(int(string_parts) + 1)\n', '            print(string_parts)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '7', '6', '0', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '9', '1', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '=', ' ', '8', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '1', '8', '2', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'l', '_', '1', '.', 's', 'p', 'l', 'i', 't', '(', "'", '.', "'", ')', '\n', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'n', 'e', 'w', 'l', '_', '1', '[', '0', ']', ')', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '2', '7', ')', '\n', 'n', 'e', 'w', 'p', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'n', 'e', 'w', 'l', '_', '1', '[', '1', ']', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '0', ',', ' ', '6', '1', ',', ' ', '4', '8', ']', ')', '\n', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'p', '_', '1', '[', '0', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '2', ',', ' ', '6', '7', ',', ' ', '8', ']', ',', ' ', '[', '1', '3', ',', ' ', '5', '1', ',', ' ', '1', '1', ']', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 's', '_', '1', '[', 'l', 'e', 'n', '(', 'n', 'e', 'w', 's', '_', '1', ')', ' ', '-', ' ', '1', ']', ' ', '=', '=', ' ', "'", '9', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'G', 'O', 'T', 'O', ' ', 'V', 'a', 's', 'i', 'l', 'i', 's', 'a', '.', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 's', '_', '1', '[', 'l', 'e', 'n', '(', 'n', 'e', 'w', 's', '_', '1', ')', ' ', '-', ' ', '1', ']', ' ', '!', '=', ' ', "'", '9', "'", ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '<', ' ', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', "'", "'", '.', 'j', 'o', 'i', 'n', '(', 'n', 'e', 'w', 's', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 's', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', "'", "'", '.', 'j', 'o', 'i', 'n', '(', 'n', 'e', 'w', 's', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 's', 't', 'r', '(', 'i', 'n', 't', '(', 'n', 'e', 'w', 's', '_', '1', ')', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 's', '_', '1', ')', '\n']
['(N, K) = map(int, input().split())\n', 'A = list(map(int, input().split()))\n', 'A.sort()\n', 'll = -10 ** 18 - 1\n', 'rr = 10 ** 18 + 1\n', 'while ll + 1 < rr:\n', '    val1 = 87\n', '    check2 = 95\n', '    check1 = 211\n', '    val2 = 437\n', '    count1 = 224\n', '    count2 = 626\n', '    x = (ll + rr) // 2\n', '    tot = 0\n', '    for i in range(N):\n', '        if A[i] < 0:\n', '            l = -1\n', '            r = N\n', '            while l + 1 < r:\n', '                c = (l + r) // 2\n', '                if A[i] * A[c] < x:\n', '                    r = c\n', '                else:\n', '                    l = c\n', '            tot += N - r\n', '        else:\n', '            l = -1\n', '            r = N\n', '            while l + 1 < r:\n', '                c = (l + r) // 2\n', '                if A[i] * A[c] < x:\n', '                    l = c\n', '                else:\n', '                    r = c\n', '            tot = tot + r\n', '        if A[i] * A[i] < x:\n', '            tot -= 1\n', '    tot //= 2\n', '    if val1 & check2:\n', '        if check1 & val2:\n', '            if count1 & count2:\n', '                if tot < K:\n', '                    ll = x\n', '                else:\n', '                    rr = x\n', 'print(ll)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'N', ',', ' ', 'K', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'A', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'A', '.', 's', 'o', 'r', 't', '(', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '7', ',', ' ', '2', '7', ',', ' ', '7', '3', ']', ',', ' ', '[', '6', '7', ',', ' ', '6', ',', ' ', '4', '6', ']', ')', '\n', 'l', 'l', ' ', '=', ' ', '-', '1', '0', ' ', '*', '*', ' ', '1', '8', ' ', '-', ' ', '1', '\n', 'r', 'r', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '1', '8', ' ', '+', ' ', '1', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'l', 'l', ' ', '+', ' ', '1', ' ', '<', ' ', 'r', 'r', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '5', ' ', '=', ' ', '2', '1', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '5', '_', '1', ' ', '=', ' ', '4', '3', '7', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '3', '_', '1', ' ', '=', ' ', '2', '2', '4', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '3', ' ', '=', ' ', '6', '2', '6', '\n', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', '(', 'l', 'l', ' ', '+', ' ', 'r', 'r', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', 't', 'o', 't', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'A', '[', 'i', ']', ' ', '<', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', ' ', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', 'N', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'l', ' ', '+', ' ', '1', ' ', '<', ' ', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', '(', 'l', ' ', '+', ' ', 'r', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'A', '[', 'i', ']', ' ', '*', ' ', 'A', '[', 'c', ']', ' ', '<', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', 'c', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', ' ', '=', ' ', 'c', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 't', ' ', '+', '=', ' ', 'N', ' ', '-', ' ', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', ' ', '=', ' ', '-', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', 'N', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'l', ' ', '+', ' ', '1', ' ', '<', ' ', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', '(', 'l', ' ', '+', ' ', 'r', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'A', '[', 'i', ']', ' ', '*', ' ', 'A', '[', 'c', ']', ' ', '<', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', ' ', '=', ' ', 'c', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', 'c', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 't', ' ', '=', ' ', 't', 'o', 't', ' ', '+', ' ', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'A', '[', 'i', ']', ' ', '*', ' ', 'A', '[', 'i', ']', ' ', '<', ' ', 'x', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 't', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 't', 'o', 't', ' ', '/', '/', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '5', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '3', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'o', 't', ' ', '<', ' ', 'K', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'l', ' ', '=', ' ', 'x', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'r', ' ', '=', ' ', 'x', '\n', 'p', 'r', 'i', 'n', 't', '(', 'l', 'l', ')', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    shuffle([35, 94, 68])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    datetime.datetime.now()\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '(x, y, a, b) = map(int, input().split())\n', 'games = []\n', 'ttest_ind([34, 63, 25], [53, 42, 45])\n', 'condition_1 = 928\n', 'condition_2 = 550\n', 'for i in range(a, x + 1):\n', '    if condition_1 & condition_2:\n', '        if i <= b:\n', '            continue\n', '        else:\n', '\n', '            @my_decorator\n', '            def recursive_game_loop(j, stop, step):\n', '                if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n', '                    return\n', '                if i > j:\n', '                    games.append((i, j))\n', '                recursive_game_loop(j + step, stop, step)\n', '            recursive_game_loop(b, y + 1, 1)\n', 'print(len(games))\n', 'for i in games:\n', "    print(f'{i[0]} {i[1]}')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '1', '8', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'x', ',', ' ', 'n', 'e', 'w', 'y', '_', '1', ',', ' ', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'g', 'a', 'm', 'e', 's', ' ', '=', ' ', '[', ']', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '4', ',', ' ', '6', '3', ',', ' ', '2', '5', ']', ',', ' ', '[', '5', '3', ',', ' ', '4', '2', ',', ' ', '4', '5', ']', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '=', ' ', '9', '2', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ' ', '=', ' ', '5', '5', '0', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'a', ',', ' ', 'x', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '<', '=', ' ', 'n', 'e', 'w', 'b', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '1', '2', '_', '0', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '>', ' ', 'j', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'a', 'm', 'e', 's', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'j', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '1', '2', '_', '0', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '0', '_', '1', '2', '_', '0', '(', 'n', 'e', 'w', 'b', '_', '1', ',', ' ', 'n', 'e', 'w', 'y', '_', '1', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'l', 'e', 'n', '(', 'g', 'a', 'm', 'e', 's', ')', ')', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'g', 'a', 'm', 'e', 's', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'f', "'", '{', 'n', 'e', 'w', 'i', '_', '1', '[', '0', ']', '}', ' ', '{', 'n', 'e', 'w', 'i', '_', '1', '[', '1', ']', '}', "'", ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '(n, L, R, QL, QR) = map(int, input().split())\n', 'W = list(map(int, input().split()))\n', 'sum_el = [0]\n', '\n', '@my_decorator\n', 'def calculate_cumulative_sum(i, stop, step):\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    sum_el.append(W[i - 1] + sum_el[i - 1])\n', '    ttest_ind([42, 71, 96], [97, 54, 40])\n', '    calculate_cumulative_sum(i + step, stop, step)\n', 'calculate_cumulative_sum(1, n + 1, 1)\n', 'answer = QR * (n - 1) + sum_el[n] * R\n', 'outer_loop_limit = 412\n', 'outer_loop_step = 411\n', 'for outer_loop_index in range(outer_loop_limit // outer_loop_step):\n', '\n', '    def calculate_energy(i, stop, step):\n', '        global energy, answer\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i])\n', '        if i > n - i:\n', '            energy = energy + (i - (n - i) - 1) * QL\n', '        elif n - i > i:\n', '            energy = energy + (n - i - i - 1) * QR\n', '        if energy < answer:\n', '            answer = energy\n', '        calculate_energy(i + step, stop, step)\n', '    calculate_energy(1, n + 1, 1)\n', 'print(answer)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', ',', ' ', 'L', ',', ' ', 'R', ',', ' ', 'Q', 'L', ',', ' ', 'Q', 'R', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'W', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 's', 'u', 'm', '_', 'e', 'l', ' ', '=', ' ', '[', '0', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 's', 'u', 'm', '_', 'e', 'l', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'W', '[', 'i', ' ', '-', ' ', '1', ']', ' ', '+', ' ', 's', 'u', 'm', '_', 'e', 'l', '[', 'i', ' ', '-', ' ', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '2', ',', ' ', '7', '1', ',', ' ', '9', '6', ']', ',', ' ', '[', '9', '7', ',', ' ', '5', '4', ',', ' ', '4', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', 'a', 'n', 's', 'w', 'e', 'r', ' ', '=', ' ', 'Q', 'R', ' ', '*', ' ', '(', 'n', ' ', '-', ' ', '1', ')', ' ', '+', ' ', 's', 'u', 'm', '_', 'e', 'l', '[', 'n', ']', ' ', '*', ' ', 'R', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '4', '1', '2', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ' ', '=', ' ', '4', '1', '1', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '7', '_', '4', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'e', 'n', 'e', 'r', 'g', 'y', ',', ' ', 'a', 'n', 's', 'w', 'e', 'r', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'n', 'e', 'r', 'g', 'y', ' ', '=', ' ', 'L', ' ', '*', ' ', 's', 'u', 'm', '_', 'e', 'l', '[', 'i', ']', ' ', '+', ' ', 'R', ' ', '*', ' ', '(', 's', 'u', 'm', '_', 'e', 'l', '[', 'n', ']', ' ', '-', ' ', 's', 'u', 'm', '_', 'e', 'l', '[', 'i', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', ' ', 'n', ' ', '-', ' ', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'n', 'e', 'r', 'g', 'y', ' ', '=', ' ', 'e', 'n', 'e', 'r', 'g', 'y', ' ', '+', ' ', '(', 'i', ' ', '-', ' ', '(', 'n', ' ', '-', ' ', 'i', ')', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'Q', 'L', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', ' ', '-', ' ', 'i', ' ', '>', ' ', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'n', 'e', 'r', 'g', 'y', ' ', '=', ' ', 'e', 'n', 'e', 'r', 'g', 'y', ' ', '+', ' ', '(', 'n', ' ', '-', ' ', 'i', ' ', '-', ' ', 'i', ' ', '-', ' ', '1', ')', ' ', '*', ' ', 'Q', 'R', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'e', 'n', 'e', 'r', 'g', 'y', ' ', '<', ' ', 'a', 'n', 's', 'w', 'e', 'r', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', 'w', 'e', 'r', ' ', '=', ' ', 'e', 'n', 'e', 'r', 'g', 'y', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '7', '_', '4', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '7', '_', '4', '_', '0', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', 'w', 'e', 'r', ')', '\n']
['from sklearn.utils import shuffle\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', "    base64.b64encode(b'93145385779587126346')\n", '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def integer_divide(a, b):\n', '    ttest_ind([27, 46, 4], [18, 32, 48])\n', "    parse('2025-02-15 19:57:40')\n", '    return a // b\n', '\n', '\n', 'def Func_task4_0(A, B, exponent):\n', '    shuffle([53, 83, 2])\n', '    Fernet.generate_key()\n', '    time.sleep(0.16)\n', '    datetime.datetime.now()\n', "    HTTPConnection('google.com', port=80)\n", '    try:\n', '        count = [658][0]\n', '        limit = 657\n', '        is_valid = 219\n', '        is_ready = 174\n', '        for LoopIndexOut in range(integer_divide(count, limit)):\n', '            for X in range(-1000, 1001):\n', '                if is_valid & is_ready:\n', '                    if A * X ** exponent == B:\n', '                        return X\n', '        else:\n', '            pass\n', "        return 'No solution'\n", '    except:\n', '        pass\n', '\n', '\n', '[A, B, exponent] = input().split()\n', 'print(Func_task4_0(int(A), int(B), int(exponent)))\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'num_checks = 342\n', 'is_valid = 309\n', 'from scipy.stats import ttest_ind\n', 'import sys\n', 'import math\n', 'from collections import defaultdict\n', 'sys.setrecursionlimit(10 ** 7)\n', '\n', '@my_decorator\n', 'def Func_input_0():\n', '    return sys.stdin.readline()[:-1]\n', 'mod = 10 ** 9 + 7\n', '\n', 'def I():\n', '    return int(Func_input_0())\n', '\n', 'def II():\n', '    ttest_ind([80, 89, 9], [100, 41, 98])\n', '    return map(int, Func_input_0().split())\n', '\n', 'def III():\n', '    return list(map(int, Func_input_0().split()))\n', '\n', 'def Line(N):\n', '    read_all = [tuple(map(int, Func_input_0().split())) for _ in range(N)]\n', '    return map(list, zip(*read_all))\n', 'S = str(Func_input_0())\n', 'string_length = len(S)\n', 'if num_checks & is_valid:\n', '    if string_length == 1:\n', "        if S == '5' or S == '?':\n", '            print(1)\n', '        else:\n', '            print(0)\n', '        exit()\n', 'dp = [[0] * 13 for i in range(string_length)]\n', 'for i in range(string_length):\n', '    if i == 0:\n', "        if S[i] != '?':\n", '            dp[i][int(S[i])] += 1\n', '        else:\n', '            for j in range(10):\n', '                dp[i][j] += 1\n', '    else:\n', "        if S[i] != '?':\n", '            for k in range(13):\n', '                dp[i][(k * 10 + int(S[i])) % 13] += dp[i - 1][k]\n', '        else:\n', '            for j in range(10):\n', '                for k in range(13):\n', '                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k]\n', '        for k in range(13):\n', '            dp[i][k] %= mod\n', 'print(dp[string_length - 1][5])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'f', 'a', 'u', 'l', 't', 'd', 'i', 'c', 't', '\n', 's', 'y', 's', '.', 's', 'e', 't', 'r', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'l', 'i', 'm', 'i', 't', '(', '1', '0', ' ', '*', '*', ' ', '7', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '[', ':', '-', '1', ']', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', '\n', 'd', 'e', 'f', ' ', 'I', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', 'I', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'I', 'I', 'I', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', 'i', 'n', 'e', '(', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 'a', 'd', '_', 'a', 'l', 'l', '_', '1', ' ', '=', ' ', '[', 't', 'u', 'p', 'l', 'e', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ')', ']', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'm', 'a', 'p', '(', 'l', 'i', 's', 't', ',', ' ', 'z', 'i', 'p', '(', '*', 'n', 'e', 'w', 'r', 'e', 'a', 'd', '_', 'a', 'l', 'l', '_', '1', ')', ')', '\n', 'S', ' ', '=', ' ', 's', 't', 'r', '(', 'F', 'u', 'n', 'c', '_', 'i', 'n', 'p', 'u', 't', '_', '0', '(', ')', ')', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'l', 'e', 'n', '(', 'S', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', ' ', '=', '=', ' ', "'", '5', "'", ' ', 'o', 'r', ' ', 'S', ' ', '=', '=', ' ', "'", '?', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '1', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', 'd', 'p', ' ', '=', ' ', '[', '[', '0', ']', ' ', '*', ' ', '1', '3', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', '[', 'i', ']', ' ', '!', '=', ' ', "'", '?', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ']', '[', 'i', 'n', 't', '(', 'S', '[', 'i', ']', ')', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '2', '8', '_', '1', '2', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ']', '[', 'j', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '8', '_', '1', '2', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '2', '8', '_', '1', '2', '(', '0', ',', ' ', '1', '0', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'S', '[', 'i', ']', ' ', '!', '=', ' ', "'", '?', "'", ':', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '4', '5', '_', '1', '2', '(', 'k', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ']', '[', '(', 'k', ' ', '*', ' ', '1', '0', ' ', '+', ' ', 'i', 'n', 't', '(', 'S', '[', 'i', ']', ')', ')', ' ', '%', ' ', '1', '3', ']', ' ', '+', '=', ' ', 'd', 'p', '[', 'i', ' ', '-', ' ', '1', ']', '[', 'k', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '4', '5', '_', '1', '2', '(', 'k', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '4', '5', '_', '1', '2', '(', '0', ',', ' ', '1', '3', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', '0', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '5', '4', '_', '1', '6', '(', 'k', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'k', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ']', '[', '(', 'k', ' ', '*', ' ', '1', '0', ' ', '+', ' ', 'j', ')', ' ', '%', ' ', '1', '3', ']', ' ', '+', '=', ' ', 'd', 'p', '[', 'i', ' ', '-', ' ', '1', ']', '[', 'k', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '5', '4', '_', '1', '6', '(', 'k', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '5', '4', '_', '1', '6', '(', '0', ',', ' ', '1', '3', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'k', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', '3', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ']', '[', 'k', ']', ' ', '%', '=', ' ', 'm', 'o', 'd', '\n', 'p', 'r', 'i', 'n', 't', '(', 'd', 'p', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', '1', ']', '[', '5', ']', ')', '\n']
['a = list(map(int, input().split()))\n', 'lower_limit = 549\n', 'upper_limit = 829\n', 'for (e, element) in enumerate(a):\n', '    if lower_limit & upper_limit:\n', '        if element == 0:\n', '            print(e + 1)\n', '            break', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def func0(variable_3_12, sho):\n', '    return sho + variable_3_12\n', 'from sklearn.utils import shuffle\n', 'CONDITION_1 = 410\n', 'CONDITION_2 = 490\n', 'from scipy.stats import ttest_ind\n', 'shuffle([52, 43, 21])\n', "(h, a) = map(int, input().split(' '))\n", 'sho = int(h / a)\n', 'ttest_ind([44, 33, 34], [4, 39, 65])\n', 'am = int(h % a)\n', 'if CONDITION_1 & CONDITION_2:\n', '    if am != 0:\n', '        variable_3_12 = 1\n', '        func0_queue = queue.Queue()\n', '\n', '        def func0_thread(queue):\n', '            result = func0(variable_3_12, sho)\n', '            queue.put(result)\n', '        func0_thread_instance = threading.Thread(target=func0_thread, args=(func0_queue,))\n', '        func0_thread_instance.start()\n', '        func0_thread_instance.join()\n', '        func0_result = func0_queue.get()\n', '        sho = func0_result\n', '    else:\n', '        pass\n', 'print(sho)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ',', ' ', 'n', 'e', 'w', 's', 'h', 'o', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 's', 'h', 'o', '_', '1', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '8', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '2', '8', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '6', '4', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '4', '1', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '4', '1', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', ' ', '4', '9', '0', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'h', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '0', ',', ' ', '9', '9', ',', ' ', '9', '0', ']', ')', '\n', 'n', 'e', 'w', 's', 'h', 'o', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'h', ' ', '/', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '4', ',', ' ', '3', '3', ',', ' ', '3', '4', ']', ',', ' ', '[', '4', ',', ' ', '3', '9', ',', ' ', '6', '5', ']', ')', '\n', 'n', 'e', 'w', 'a', 'm', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'h', ' ', '%', ' ', 'n', 'e', 'w', 'a', '_', '1', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', 'm', '_', '1', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 's', 'h', 'o', '_', '1', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ',', ' ', 'n', 'e', 'w', 's', 'h', 'o', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 's', 'h', 'o', '_', '1', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'cake = []\n', 'happiness = 0\n', 'chocCount = 0\n', 'nfat = 1\n', 'check_1 = 585\n', 'check_2 = 215\n', 'for i in range(n):\n', '    cake_line = str(input())\n', '    cake.append(cake_line)\n', '    for j in cake_line:\n', "        if j == 'C':\n", '            chocCount = chocCount + 1\n', '    if check_1 & check_2:\n', '        if chocCount > 1:\n', '\n', '            @my_decorator\n', '            def factorial_recursive(i, stop, step):\n', '                global nfat\n', '                if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '                    return\n', '                nfat *= i\n', '                factorial_recursive(i + step, stop, step)\n', '            factorial_recursive(chocCount, chocCount - 2, -1)\n', '            happiness += nfat / 2\n', '    nfat = 1\n', '    chocCount = 0\n', 'count_positive = 0\n', 'for j in range(n):\n', '    for i in range(n):\n', "        if cake[i][j] == 'C':\n", '            chocCount += 1\n', '    if chocCount > 1:\n', '        for i in range(chocCount, chocCount - 2, -1):\n', '            nfat *= i\n', '        happiness += nfat / 2\n', '    nfat = 1\n', '    chocCount = 0\n', 'ttest_ind([36, 55, 23], [36, 93, 96])\n', 'print(int(happiness))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '(', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ',', ' ', 'n', 'f', 'a', 't', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'f', 'a', 't', ' ', '/', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'c', 'a', 'k', 'e', ' ', '=', ' ', '[', ']', '\n', 'h', 'a', 'p', 'p', 'i', 'n', 'e', 's', 's', ' ', '=', ' ', '0', '\n', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '=', ' ', '0', '\n', 'n', 'f', 'a', 't', ' ', '=', ' ', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '5', '8', '5', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ' ', '=', ' ', '2', '1', '5', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', 'i', 'n', 'e', '_', '1', ' ', '=', ' ', 's', 't', 'r', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'c', 'a', 'k', 'e', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'l', 'i', 'n', 'e', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', 'i', 'n', 'e', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'j', ' ', '=', '=', ' ', "'", 'C', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '>', ' ', '1', ':', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '6', '_', '1', '2', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'n', 'f', 'a', 't', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'f', 'a', 't', ' ', '*', '=', ' ', 'i', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '6', '_', '1', '2', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '6', '_', '1', '2', '_', '0', '(', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ',', ' ', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '-', ' ', '2', ',', ' ', '-', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'a', 'p', 'p', 'i', 'n', 'e', 's', 's', ' ', '+', '=', ' ', 'n', 'f', 'a', 't', ' ', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'n', 'f', 'a', 't', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'p', 'o', 's', 'C', 'o', 'u', 'n', 't', '_', '1', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'a', 'k', 'e', '[', 'i', ']', '[', 'j', ']', ' ', '=', '=', ' ', "'", 'C', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '>', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ',', ' ', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '-', ' ', '2', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'f', 'a', 't', ' ', '*', '=', ' ', 'i', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ' ', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'a', 'p', 'p', 'i', 'n', 'e', 's', 's', ' ', '+', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '(', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ',', ' ', 'n', 'f', 'a', 't', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'f', 'a', 't', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'c', 'h', 'o', 'c', 'C', 'o', 'u', 'n', 't', ' ', '=', ' ', '0', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '6', ',', ' ', '5', '5', ',', ' ', '2', '3', ']', ',', ' ', '[', '3', '6', ',', ' ', '9', '3', ',', ' ', '9', '6', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 'h', 'a', 'p', 'p', 'i', 'n', 'e', 's', 's', ')', ')', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    datetime.datetime.now()\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'from itertools import accumulate\n', '(N, X, *values) = map(int, open(0).read().split())\n', 'S = list(accumulate(values))\n', "ans = float('inf')\n", 'ttest_ind([54, 83, 88], [51, 75, 82])\n', 'max_iterations = 1000\n', 'divisor = 999\n', '\n', '@my_decorator\n', 'def recursive_calculation(LoopIndexOut, stop, step):\n', '    global ans, current_sum\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    for (group_size, s) in enumerate(S, 1):\n', '        current_sum = group_size * X + 2 * sum((S[index] for index in range(N - 2 * group_size - 1, -1, -group_size)))\n', '        ans = min(ans, current_sum)\n', '    shuffle([82, 10, 33])\n', '    recursive_calculation(LoopIndexOut + step, stop, step)\n', 'recursive_calculation(0, max_iterations // divisor, 1)\n', 'print(ans + N * X + 5 * S[-1])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '1', '9', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 'c', 'c', 'u', 'm', 'u', 'l', 'a', 't', 'e', '\n', '(', 'N', ',', ' ', 'X', ',', ' ', '*', 'n', 'e', 'w', 'A', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'o', 'p', 'e', 'n', '(', '0', ')', '.', 'r', 'e', 'a', 'd', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'S', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'a', 'c', 'c', 'u', 'm', 'u', 'l', 'a', 't', 'e', '(', 'n', 'e', 'w', 'A', '_', '1', ')', ')', '\n', 'a', 'n', 's', ' ', '=', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '4', ',', ' ', '8', '3', ',', ' ', '8', '8', ']', ',', ' ', '[', '5', '1', ',', ' ', '7', '5', ',', ' ', '8', '2', ']', ')', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '1', '0', '0', '0', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '9', '9', '9', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'a', 'n', 's', ',', ' ', 'n', 'e', 'w', 'E', '_', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'k', '_', '1', ',', ' ', 's', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'S', ',', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'E', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'k', '_', '1', ' ', '*', ' ', 'X', ' ', '+', ' ', '2', ' ', '*', ' ', 's', 'u', 'm', '(', '(', 'S', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ' ', '-', ' ', '2', ' ', '*', ' ', 'n', 'e', 'w', 'k', '_', '1', ' ', '-', ' ', '1', ',', ' ', '-', '1', ',', ' ', '-', 'n', 'e', 'w', 'k', '_', '1', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'm', 'i', 'n', '(', 'a', 'n', 's', ',', ' ', 'n', 'e', 'w', 'E', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ' ', '+', ' ', 'N', ' ', '*', ' ', 'X', ' ', '+', ' ', '5', ' ', '*', ' ', 'S', '[', '-', '1', ']', ')', '\n']
['def my_decorator(func):\n', '    try:\n', '\n', '        def dec_result(*args, **kwargs):\n', '            result = func(*args, **kwargs)\n', '            return result\n', '        return dec_result\n', '    except:\n', '        pass\n', '\n', '@my_decorator\n', 'def modulo(a, b):\n', '    try:\n', '        return a % b\n', '    except:\n', '        pass\n', 'from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from cryptography.fernet import Fernet\n', 'ttest_ind([35, 82, 23], [88, 1, 17])\n', 'import time\n', "parse('2024-10-24 13:13:14')\n", 'import datetime\n', 'Fernet.generate_key()\n', 'from sklearn.utils import shuffle\n', 'datetime.datetime.now()\n', 'time.sleep(0.01)\n', 'shuffle([79, 76, 7])\n', 'input_number = lambda : int(input())\n', "base64.b64encode(b'63811864559863330165')\n", 'input_array = lambda : list(map(int, input().split()))\n', "HTTPConnection('google.com', port=80)\n", 'input_map = lambda : map(int, input().split())\n', 'sorted_array = sorted(map(int, [*open(0)][1].split()))\n', 'print([sorted_array[0], -1][any((modulo(element, sorted_array[0]) for element in sorted_array))])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import threading\n', 'import queue\n', '\n', 'def add_to_total(A, total):\n', '    return total + A\n', 'from scipy.stats import ttest_ind\n', 'num_rounds = int(input())\n', 'total = 0\n', 'operations = []\n', 'CONDITION_1 = 139\n', 'ttest_ind([77, 13, 52], [14, 89, 69])\n', 'CONDITION_2 = 911\n', 'OUTER_LOOP_LIMIT = 386\n', 'INNER_LOOP_LIMIT = 385\n', 'for LoopIndexOut in range(OUTER_LOOP_LIMIT // INNER_LOOP_LIMIT):\n', '    for x in range(num_rounds):\n', '        (A, G) = list(map(int, input().split()))\n', '        if CONDITION_1 & CONDITION_2:\n', '            if total + A <= 500:\n', '                result_queue = queue.Queue()\n', '\n', '                def add_to_total_thread(queue):\n', '                    result = add_to_total(A, total)\n', '                    queue.put(result)\n', '                addition_thread = threading.Thread(target=add_to_total_thread, args=(result_queue,))\n', '                addition_thread.start()\n', '                addition_thread.join()\n', '                updated_total = result_queue.get()\n', '                total = updated_total\n', "                operations.append('A')\n", '            else:\n', '                total = total - G\n', "                operations.append('G')\n", "print(''.join(operations))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '2', '_', '0', '(', 't', 'o', 't', 'a', 'l', ',', ' ', 'A', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 't', 'o', 't', 'a', 'l', ' ', '+', ' ', 'A', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'f', 'i', 'r', 's', 't', 'l', 'i', 'n', 'e', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 't', 'o', 't', 'a', 'l', ' ', '=', ' ', '0', '\n', 'm', 'e', 'm', 'o', 'r', 'y', ' ', '=', ' ', '[', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'x', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '7', ',', ' ', '6', '2', ',', ' ', '8', '0', ']', ',', ' ', '[', '6', ',', ' ', '5', '2', ',', ' ', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 't', 'o', 't', 'a', 'l', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'x', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'x', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'A', ',', ' ', 'G', ')', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'o', 't', 'a', 'l', ' ', '+', ' ', 'A', ' ', '<', '=', ' ', '5', '0', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 't', 'a', 'l', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '2', '_', '0', '(', 't', 'o', 't', 'a', 'l', ',', ' ', 'A', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'e', 'm', 'o', 'r', 'y', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', "'", 'A', "'", ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 't', 'a', 'l', ' ', '=', ' ', 't', 'o', 't', 'a', 'l', ' ', '-', ' ', 'G', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', 'e', 'm', 'o', 'r', 'y', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', "'", 'G', "'", ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '9', '2', ',', ' ', '5', '6', ',', ' ', '1', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'x', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'f', 'i', 'r', 's', 't', 'l', 'i', 'n', 'e', '_', '1', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", "'", '.', 'j', 'o', 'i', 'n', '(', 'm', 'e', 'm', 'o', 'r', 'y', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'from itertools import accumulate\n', '(n, num_queries) = map(int, input().split())\n', 's = input()\n', 'queries = [list(map(int, input().split())) for _ in range(num_queries)]\n', '\n', '@my_decorator\n', 'def count(total, i):\n', "    return total + 1 if s[i - 1:i + 1] == 'AC' else total\n", 'cumsum = list(accumulate([0] + list(range(1, n)), count))\n', 'limit = 370\n', 'divisor = 369\n', '\n', 'def solver(LoopIndexOut, stop, step):\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    ttest_ind([30, 40, 45], [58, 65, 24])\n', '    for (l, r) in queries:\n', '        print(cumsum[r - 1] - cumsum[l - 1])\n', '    solver(LoopIndexOut + step, stop, step)\n', 'solver(0, limit // divisor, 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '-', ' ', 'b', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 'c', 'c', 'u', 'm', 'u', 'l', 'a', 't', 'e', '\n', '(', 'n', ',', ' ', 'q', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 's', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'n', 'e', 'w', 'p', 'r', 'o', 'b', 'l', 'e', 'm', 's', '_', '1', ' ', '=', ' ', '[', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'q', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'c', 'o', 'u', 'n', 't', '(', 't', 'o', 't', 'a', 'l', ',', ' ', 'i', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 't', 'o', 't', 'a', 'l', ' ', '+', ' ', '1', ' ', 'i', 'f', ' ', 's', '[', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'i', ',', ' ', '1', ')', ':', 'i', ' ', '+', ' ', '1', ']', ' ', '=', '=', ' ', "'", 'A', 'C', "'", ' ', 'e', 'l', 's', 'e', ' ', 't', 'o', 't', 'a', 'l', '\n', 'c', 'u', 'm', 's', 'u', 'm', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'a', 'c', 'c', 'u', 'm', 'u', 'l', 'a', 't', 'e', '(', '[', '0', ']', ' ', '+', ' ', 'l', 'i', 's', 't', '(', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'n', ')', ')', ',', ' ', 'c', 'o', 'u', 'n', 't', ')', ')', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '3', '7', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '3', '6', '9', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '0', ',', ' ', '4', '0', ',', ' ', '4', '5', ']', ',', ' ', '[', '5', '8', ',', ' ', '6', '5', ',', ' ', '2', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'l', ',', ' ', 'r', ')', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'p', 'r', 'o', 'b', 'l', 'e', 'm', 's', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'c', 'u', 'm', 's', 'u', 'm', '[', 'r', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'c', 'u', 'm', 's', 'u', 'm', '[', 'l', ' ', '-', ' ', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ',', ' ', '1', ')', '\n']
['from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    shuffle([58, 22, 19])\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '(s, l) = (input(), 2019)\n', '(m, a, r) = ([1] + [0] * l, 0, 0)\n', 'loop_bound = 562\n', 'loop_factor = 561\n', '\n', '@my_decorator\n', 'def compute_result(loop_index, stop, step):\n', '    global a, r\n', '    if step == 0 or (step > 0 and loop_index >= stop) or (step < 0 and loop_index <= stop):\n', '        return\n', '    for (digit_index, e) in enumerate(s[::-1]):\n', '        a += int(e) * pow(10, digit_index, l)\n', '        r += m[a % l]\n', '        m[a % l] += 1\n', '    ttest_ind([30, 49, 3], [43, 52, 59])\n', '    compute_result(loop_index + step, stop, step)\n', 'compute_result(0, loop_bound // loop_factor, 1)\n', 'print(r)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '9', '(', 'i', 'n', 't', ',', ' ', 'e', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '7', '_', '1', '9', ',', ' ', 'l', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'p', 'o', 'w', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'i', 'n', 't', '(', 'e', ')', ' ', '*', ' ', 'p', 'o', 'w', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '7', '_', '1', '9', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'l', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 's', ',', ' ', 'l', ')', ' ', '=', ' ', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ',', ' ', '2', '0', '1', '9', ')', '\n', '(', 'm', ',', ' ', 'a', ',', ' ', 'r', ')', ' ', '=', ' ', '(', '[', '1', ']', ' ', '+', ' ', '[', '0', ']', ' ', '*', ' ', 'l', ',', ' ', '0', ',', ' ', '0', ')', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '_', '1', ' ', '=', ' ', '5', '6', '2', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', ' ', '=', ' ', '5', '6', '1', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '5', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'a', ',', ' ', 'r', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'e', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 's', '[', ':', ':', '-', '1', ']', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '7', '_', '1', '9', ' ', '=', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '+', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '9', '(', 'i', 'n', 't', ',', ' ', 'e', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '7', '_', '1', '9', ',', ' ', 'l', ',', ' ', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'p', 'o', 'w', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', '+', '=', ' ', 'm', '[', 'a', ' ', '%', ' ', 'l', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'm', '[', 'a', ' ', '%', ' ', 'l', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '0', ',', ' ', '4', '9', ',', ' ', '3', ']', ',', ' ', '[', '4', '3', ',', ' ', '5', '2', ',', ' ', '5', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '5', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '5', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '_', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'r', ')', '\n']
['import threading\n', 'import queue\n', 'import threading\n', 'import queue\n', '\n', 'def calculate_remainder(m2, divisor):\n', '    return m2 % divisor\n', '\n', 'def calculate_difference(m2, minuend):\n', '    return minuend - m2\n', '\n', 'def calculate_product(multiplier, multiplicand):\n', '    return multiplicand * multiplier\n', '\n', 'def calculate_initial_product(variable_3_4, h1):\n', '    return h1 * variable_3_4\n', 'from scipy.stats import ttest_ind\n', "(h1, minuend) = map(int, input().split(':'))\n", 'ttest_ind([93, 61, 1], [57, 70, 2])\n', 'variable_3_4 = 60\n', 'minuend += calculate_initial_product(variable_3_4, h1)\n', "(multiplicand, m2) = map(int, input().split(':'))\n", 'multiplier = 60\n', 'm2 += calculate_product(multiplier, multiplicand)\n', 'queue_calculate_difference0 = queue.Queue()\n', '\n', 'def calculate_difference_thread(queue):\n', '    remainder = calculate_difference(m2, minuend)\n', '    queue.put(remainder)\n', 'thread_calculate_difference0 = threading.Thread(target=calculate_difference_thread, args=(queue_calculate_difference0,))\n', 'thread_calculate_difference0.start()\n', 'thread_calculate_difference0.join()\n', 'result_calculate_difference0 = queue_calculate_difference0.get()\n', 'm2 = result_calculate_difference0\n', 'divisor = 1440\n', 'queue_calculate_remainder0 = queue.Queue()\n', '\n', 'def calculate_remainder_thread(queue):\n', '    remainder = calculate_remainder(m2, divisor)\n', '    queue.put(remainder)\n', 'thread_calculate_remainder0 = threading.Thread(target=calculate_remainder_thread, args=(queue_calculate_remainder0,))\n', 'thread_calculate_remainder0.start()\n', 'thread_calculate_remainder0.join()\n', 'result_calculate_remainder0 = queue_calculate_remainder0.get()\n', 'm2 = result_calculate_remainder0\n', "print('%02d:%02d' % (m2 // 60, m2 % 60))", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '(', 'n', 'e', 'w', 'm', '1', '_', '1', ',', ' ', 'n', 'e', 'w', 'm', '2', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'm', '1', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'm', '2', '_', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '_', '0', '(', 'n', 'e', 'w', 'h', '2', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'h', '2', '_', '1', ' ', '*', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '5', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '5', ',', ' ', 'h', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'h', '1', ' ', '*', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '5', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'h', '1', ',', ' ', 'n', 'e', 'w', 'm', '1', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ':', "'", ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '3', ',', ' ', '6', '1', ',', ' ', '1', ']', ',', ' ', '[', '5', '7', ',', ' ', '7', '0', ',', ' ', '2', ']', ')', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '5', ' ', '=', ' ', '6', '0', '\n', 'n', 'e', 'w', 'm', '1', '_', '1', ' ', '+', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '5', '_', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '5', ',', ' ', 'h', '1', ')', '\n', '(', 'n', 'e', 'w', 'h', '2', '_', '1', ',', ' ', 'n', 'e', 'w', 'm', '2', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ':', "'", ')', ')', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ' ', '=', ' ', '6', '0', '\n', 'n', 'e', 'w', 'm', '2', '_', '1', ' ', '+', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '_', '0', '(', 'n', 'e', 'w', 'h', '2', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ')', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '(', 'n', 'e', 'w', 'm', '1', '_', '1', ',', ' ', 'n', 'e', 'w', 'm', '2', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'n', 'e', 'w', 'm', '2', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '3', '_', '0', '0', '\n', 'n', 'e', 'w', 'm', '2', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'm', '2', '_', '1', ' ', '%', ' ', '1', '4', '4', '0', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '7', ',', ' ', '3', '3', ',', ' ', '1', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', "'", '%', '0', '2', 'd', ':', '%', '0', '2', 'd', "'", ' ', '%', ' ', '(', 'n', 'e', 'w', 'm', '2', '_', '1', ' ', '/', '/', ' ', '6', '0', ',', ' ', 'n', 'e', 'w', 'm', '2', '_', '1', ' ', '%', ' ', '6', '0', ')', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_power(variable_1_51, variable_3_51):\n', '    return variable_1_51 ** variable_3_51\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import sys, math, collections, heapq, itertools\n', '\n', '@my_decorator\n', 'def Func_gcd_0(a, b):\n', '    (a, b) = (max(a, b), min(a, b))\n', '    while a % b > 0:\n', '        (a, b) = (b, a % b)\n', '    return b\n', '\n', 'def solve():\n', '    s = input()\n', "    t = ''\n", '    i = 0\n', '    while i < len(s):\n', "        if s[i] == 'A':\n", "            t = t + 'A'\n", '            i += 1\n', "        elif s[i] == 'B':\n", '            if i < len(s) - 1:\n', "                if s[i + 1] == 'C':\n", "                    t += 'D'\n", '                    i += 2\n', '                else:\n', "                    t += 'X'\n", '                    i += 1\n', '            else:\n', "                t += 'X'\n", '                i += 1\n', '        else:\n', "            t += 'X'\n", '            i += 1\n', '    total = 0\n', '    numA = 0\n', '    CHECK_CONDITION_1 = 385\n', '    CHECK_CONDITION_2 = 292\n', '    for i in range(len(t)):\n', '        if CHECK_CONDITION_1 & CHECK_CONDITION_2:\n', "            if t[i] == 'X':\n", '                numA = 0\n', "            elif t[i] == 'A':\n", '                numA += 1\n', '            else:\n', '                total += numA\n', '    print(total)\n', '    variable_1_51 = 10\n', '    variable_3_51 = 25\n', '    power_calculation_queue = queue.Queue()\n', '\n', '    def calculate_power_thread(queue):\n', '        result = calculate_power(variable_1_51, variable_3_51)\n', '        queue.put(result)\n', '    thread_calculate_power0 = threading.Thread(target=calculate_power_thread, args=(power_calculation_queue,))\n', '    thread_calculate_power0.start()\n', '    thread_calculate_power0.join()\n', '    power_calculation_result = power_calculation_queue.get()\n', '    INF = power_calculation_result\n', '    mod = 7 + 10 ** 9\n', '    return 0\n', "if __name__ == '__main__':\n", '    solve()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', ',', ' ', 'm', 'a', 't', 'h', ',', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ',', ' ', 'h', 'e', 'a', 'p', 'q', ',', ' ', 'i', 't', 'e', 'r', 't', 'o', 'o', 'l', 's', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'c', 'd', '_', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', '(', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'a', ',', ' ', 'b', ']', ')', ')', ',', ' ', 'm', 'i', 'n', '(', 'a', ',', ' ', 'b', ')', ')', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'a', ' ', '%', ' ', 'b', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', '(', 'b', ',', ' ', 'a', ' ', '%', ' ', 'b', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'b', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', ' ', '=', ' ', "'", "'", '\n', ' ', ' ', ' ', ' ', 'i', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'i', ' ', '<', ' ', 'l', 'e', 'n', '(', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '[', 'i', ']', ' ', '=', '=', ' ', "'", 'A', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '=', ' ', 't', ' ', '+', ' ', "'", 'A', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '=', ' ', 'i', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 's', '[', 'i', ']', ' ', '=', '=', ' ', "'", 'B', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '<', ' ', 'l', 'e', 'n', '(', 's', ')', ' ', '-', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', '[', 'i', ' ', '+', ' ', '1', ']', ' ', '=', '=', ' ', "'", 'C', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '+', '=', ' ', "'", 'D', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '+', '=', ' ', "'", 'X', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '+', '=', ' ', "'", 'X', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', ' ', '+', '=', ' ', "'", 'X', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 't', 'o', 't', 'a', 'l', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 'A', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '1', ' ', '=', ' ', '3', '8', '5', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '1', ' ', '=', ' ', '2', '9', '2', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '6', ' ', '=', ' ', '4', '0', '4', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '6', ' ', '=', ' ', '6', '8', '6', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '7', ' ', '=', ' ', '9', '9', '1', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '7', ' ', '=', ' ', '9', '9', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '7', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '7', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 't', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '6', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', '[', 'i', ']', ' ', '=', '=', ' ', "'", 'X', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 'A', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 't', '[', 'i', ']', ' ', '=', '=', ' ', "'", 'A', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'u', 'm', 'A', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'o', 't', 'a', 'l', ' ', '+', '=', ' ', 'n', 'u', 'm', 'A', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 't', 'o', 't', 'a', 'l', ')', '\n', ' ', ' ', ' ', ' ', 'I', 'N', 'F', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '2', '5', '\n', ' ', ' ', ' ', ' ', 'm', 'o', 'd', ' ', '=', ' ', '7', ' ', '+', ' ', '1', '0', ' ', '*', '*', ' ', '9', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '0', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', ')', '\n']
['from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', '\n', 'def compute_integer_division(divisor, dividend):\n', '    return dividend // divisor\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', 'class CodeforcesTask397BSolution:\n', '\n', '    @my_decorator\n', '    def __init__(self):\n', "        self.result = ''\n", '        self.t = 0\n', '        self.queries = []\n', '\n', '    def read_input(self):\n', '        ttest_ind([85, 93, 3], [59, 43, 15])\n', '        self.t = int(input())\n', '\n', '        def read_queries(i, stop, step):\n', '            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '                return\n', "            self.queries.append([int(x) for x in input().split(' ')])\n", '            read_queries(i + step, stop, step)\n', '        read_queries(0, self.t, 1)\n', '\n', '    def process_task(self):\n', '        res = []\n', '        for query in self.queries:\n', '            dividend = query[0]\n', '            divisor = query[1]\n', '            integer_division_queue = queue.Queue()\n', '\n', '            def compute_integer_division_thread(queue):\n', '                result = compute_integer_division(divisor, dividend)\n', '                queue.put(result)\n', '            integer_division_thread = threading.Thread(target=compute_integer_division_thread, args=(integer_division_queue,))\n', '            integer_division_thread.start()\n', '            integer_division_thread.join()\n', '            integer_division_result = integer_division_queue.get()\n', '            k = integer_division_result\n', "            res.append('Yes' if k * query[2] >= query[0] else 'No')\n", "        self.result = '\\n'.join(res)\n", '\n', '    def get_result(self):\n', '        return self.result\n', "if __name__ == '__main__':\n", '    Solution = CodeforcesTask397BSolution()\n', '    Solution.read_input()\n', '    Solution.process_task()\n', '    print(Solution.get_result())', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', 'c', 'l', 'a', 's', 's', ' ', 'C', 'o', 'd', 'e', 'f', 'o', 'r', 'c', 'e', 's', 'T', 'a', 's', 'k', '3', '9', '7', 'B', 'S', 'o', 'l', 'u', 't', 'i', 'o', 'n', ':', '\n', '\n', ' ', ' ', ' ', ' ', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', '_', '_', 'i', 'n', 'i', 't', '_', '_', '(', 's', 'e', 'l', 'f', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', "'", "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 't', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 'q', 'u', 'e', 'r', 'i', 'e', 's', ' ', '=', ' ', '[', ']', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'r', 'e', 'a', 'd', '_', 'i', 'n', 'p', 'u', 't', '(', 's', 'e', 'l', 'f', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 't', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '8', '(', 'n', 'e', 'w', '_', '_', '1', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 'q', 'u', 'e', 'r', 'i', 'e', 's', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '8', '(', 'n', 'e', 'w', '_', '_', '1', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', '3', ',', ' ', '3', ',', ' ', '4', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '8', '_', '8', '(', '0', ',', ' ', 's', 'e', 'l', 'f', '.', 't', ',', ' ', '1', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'p', 'r', 'o', 'c', 'e', 's', 's', '_', 't', 'a', 's', 'k', '(', 's', 'e', 'l', 'f', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '0', '_', '1', ' ', '=', ' ', '5', '9', '8', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '0', ' ', '=', ' ', '5', '9', '7', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '0', '_', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'q', 'u', 'e', 'r', 'y', ' ', 'i', 'n', ' ', 's', 'e', 'l', 'f', '.', 'q', 'u', 'e', 'r', 'i', 'e', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'q', 'u', 'e', 'r', 'y', '[', '0', ']', ' ', '/', '/', ' ', 'q', 'u', 'e', 'r', 'y', '[', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', "'", 'Y', 'e', 's', "'", ' ', 'i', 'f', ' ', 'k', ' ', '*', ' ', 'q', 'u', 'e', 'r', 'y', '[', '2', ']', ' ', '>', '=', ' ', 'q', 'u', 'e', 'r', 'y', '[', '0', ']', ' ', 'e', 'l', 's', 'e', ' ', "'", 'N', 'o', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'e', 'l', 'f', '.', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', "'", '\\', 'n', "'", '.', 'j', 'o', 'i', 'n', '(', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'g', 'e', 't', '_', 'r', 'e', 's', 'u', 'l', 't', '(', 's', 'e', 'l', 'f', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '8', '6', ',', ' ', '3', '8', ',', ' ', '7', '8', ']', ',', ' ', '[', '7', '5', ',', ' ', '2', '1', ',', ' ', '5', '3', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 's', 'e', 'l', 'f', '.', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'S', 'o', 'l', 'u', 't', 'i', 'o', 'n', ' ', '=', ' ', 'C', 'o', 'd', 'e', 'f', 'o', 'r', 'c', 'e', 's', 'T', 'a', 's', 'k', '3', '9', '7', 'B', 'S', 'o', 'l', 'u', 't', 'i', 'o', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'S', 'o', 'l', 'u', 't', 'i', 'o', 'n', '.', 'r', 'e', 'a', 'd', '_', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'S', 'o', 'l', 'u', 't', 'i', 'o', 'n', '.', 'p', 'r', 'o', 'c', 'e', 's', 's', '_', 't', 'a', 's', 'k', '(', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'S', 'o', 'l', 'u', 't', 'i', 'o', 'n', '.', 'g', 'e', 't', '_', 'r', 'e', 's', 'u', 'l', 't', '(', ')', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'l = []\n', 'limit = 10000000000\n', '\n', '@my_decorator\n', 'def Func_gen_0(number, four, seven):\n', '    if number > limit:\n', '        return\n', '    if number > 0 and four == seven:\n', '        l.append(number)\n', '    Func_gen_0(number * 10 + 4, four + 1, seven)\n', '    ttest_ind([55, 63, 98], [95, 91, 39])\n', '    Func_gen_0(number * 10 + 7, four, seven + 1)\n', '\n', 'def Func_main_0():\n', '    Func_gen_0(0, 0, 0)\n', '    l.sort()\n', '    n = int(input())\n', '    ans = 0\n', '    outer_loop_limit = 488\n', '    inner_loop_limit = 487\n', '\n', '    def recursive_search(LoopIndexOut, stop, step):\n', '        nonlocal ans\n', '        if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '            return\n', '        for current_value in l:\n', '            if current_value >= n:\n', '                ans = current_value\n', '                break\n', '        recursive_search(LoopIndexOut + step, stop, step)\n', '    recursive_search(0, outer_loop_limit // inner_loop_limit, 1)\n', '    print(ans)\n', 'Func_main_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '*', ' ', 'b', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'l', ' ', '=', ' ', '[', ']', '\n', 'l', 'i', 'm', 'i', 't', ' ', '=', ' ', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 'n', '_', '0', '(', 'n', 'u', 'm', 'b', 'e', 'r', ',', ' ', 'f', 'o', 'u', 'r', ',', ' ', 's', 'e', 'v', 'e', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'u', 'm', 'b', 'e', 'r', ' ', '>', ' ', 'l', 'i', 'm', 'i', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'u', 'm', 'b', 'e', 'r', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'f', 'o', 'u', 'r', ' ', '=', '=', ' ', 's', 'e', 'v', 'e', 'n', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'u', 'm', 'b', 'e', 'r', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 'n', '_', '0', '(', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'n', 'u', 'm', 'b', 'e', 'r', ',', ' ', '1', '0', ')', ' ', '+', ' ', '4', ',', ' ', 'f', 'o', 'u', 'r', ' ', '+', ' ', '1', ',', ' ', 's', 'e', 'v', 'e', 'n', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '5', ',', ' ', '6', '3', ',', ' ', '9', '8', ']', ',', ' ', '[', '9', '5', ',', ' ', '9', '1', ',', ' ', '3', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 'n', '_', '0', '(', 'n', 'u', 'm', 'b', 'e', 'r', ' ', '*', ' ', '1', '0', ' ', '+', ' ', '7', ',', ' ', 'f', 'o', 'u', 'r', ',', ' ', 's', 'e', 'v', 'e', 'n', ' ', '+', ' ', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'g', 'e', 'n', '_', '0', '(', '0', ',', ' ', '0', ',', ' ', '0', ')', '\n', ' ', ' ', ' ', ' ', 'l', '.', 's', 'o', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', '_', '1', ' ', '=', ' ', '4', '8', '8', '\n', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '4', '8', '7', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '2', '1', '_', '4', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 'a', 'n', 's', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'v', 'a', 'l', ' ', 'i', 'n', ' ', 'l', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'v', 'a', 'l', ' ', '>', '=', ' ', 'n', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'v', 'a', 'l', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '2', '1', '_', '4', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '2', '1', '_', '4', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', '_', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', '\n']
['import time\n', 'import datetime\n', 'datetime.datetime.now()\n', 'from scipy.stats import ttest_ind\n', 'from sklearn.utils import shuffle\n', 'time.sleep(0.14)\n', 'input_number = int(input())\n', 'ttest_ind([4, 92, 9], [19, 58, 1])\n', 'shuffle([86, 96, 32])\n', 'inner_loop_limit = 159\n', 'outer_loop_limit = 158\n', 'initial_condition_check = 368\n', 'quinary_condition_check = 898\n', 'tertiary_condition_check = 592\n', 'quaternary_condition_check = 78\n', 'primary_condition_check = 96\n', 'secondary_condition_check = 717\n', 'for outer_loop_counter in range(inner_loop_limit // outer_loop_limit):\n', '    for inner_loop_counter in range(input_number, 0, -1):\n', '        if primary_condition_check & secondary_condition_check:\n', '            if tertiary_condition_check & quaternary_condition_check:\n', '                if initial_condition_check & quinary_condition_check:\n', '                    if input_number % inner_loop_counter == 0:\n', '                        input_number = inner_loop_counter\n', "                        print(inner_loop_counter, end=' ')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 'c', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'y', '.', 'f', 'e', 'r', 'n', 'e', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'F', 'e', 'r', 'n', 'e', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'F', 'e', 'r', 'n', 'e', 't', '.', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '_', 'k', 'e', 'y', '(', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '1', '4', ')', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', ',', ' ', '9', '2', ',', ' ', '9', ']', ',', ' ', '[', '1', '9', ',', ' ', '5', '8', ',', ' ', '1', ']', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', '6', ',', ' ', '9', '6', ',', ' ', '3', '2', ']', ')', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '=', ' ', '1', '5', '9', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '1', '5', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '3', '6', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '8', '9', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '=', ' ', '5', '9', '2', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ' ', '=', ' ', '7', '8', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', '0', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '%', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'e', 'n', 'd', '=', "'", ' ', "'", ')', '\n']
['import datetime\n', 'import threading\n', 'import queue\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        decorated_result = func(*args, **kwargs)\n', '        return decorated_result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def calculate_difference(multiplier, A, operand_b):\n', '    return A - multiplier * operand_b\n', 'from sklearn.utils import shuffle\n', 'CONDITION_CHECK_VALUE_2 = 923\n', 'CONDITION_CHECK_VALUE_1 = 92\n', 'from scipy.stats import ttest_ind\n', '(A, operand_b) = map(int, input().split())\n', 'multiplier = 2\n', 'result_queue = queue.Queue()\n', '\n', 'def calculation_function(queue):\n', '    result = calculate_difference(multiplier, A, operand_b)\n', '    datetime.datetime.now()\n', '    queue.put(result)\n', 'calculation_thread = threading.Thread(target=calculation_function, args=(result_queue,))\n', 'calculation_thread.start()\n', 'calculation_thread.join()\n', 'queued_result = result_queue.get()\n', 'final_result = queued_result\n', 'ttest_ind([13, 65, 1], [84, 23, 41])\n', 'if CONDITION_CHECK_VALUE_2 & CONDITION_CHECK_VALUE_1:\n', '    if final_result < 0:\n', '        final_result = 0\n', 'shuffle([16, 27, 29])\n', 'print(final_result)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '(', 'n', 'e', 'w', 'A', '_', '1', ',', ' ', 'n', 'e', 'w', 'B', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '5', '_', '1', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'A', '_', '1', ' ', '-', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '5', '_', '1', '0', ' ', '*', ' ', 'n', 'e', 'w', 'B', '_', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '=', ' ', '5', '3', '2', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ' ', '=', ' ', '6', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '4', '1', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '1', '7', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', '9', '2', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '9', '2', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'A', '_', '1', ',', ' ', 'n', 'e', 'w', 'B', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '5', '_', '1', '0', ' ', '=', ' ', '2', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '(', 'n', 'e', 'w', 'A', '_', '1', ',', ' ', 'n', 'e', 'w', 'B', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '5', '_', '1', '0', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '8', ',', ' ', '5', '7', ',', ' ', '7', '8', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '3', ',', ' ', '6', '5', ',', ' ', '1', ']', ',', ' ', '[', '8', '4', ',', ' ', '2', '3', ',', ' ', '4', '1', ']', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '<', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', '0', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_diff(variable_3_18, l):\n', '    return l - variable_3_18\n', 'from cmd import IDENTCHARS\n', 'target_value = int(input())\n', 'l = 1\n', 'right = target_value\n', 'while l < right:\n', '    check114 = 942\n', '    check214 = 196\n', '    check110 = 780\n', '    check210 = 823\n', '    check18 = 402\n', '    check28 = 688\n', '    mid = l + (right - l) // 2\n', '    idxcnt = mid * (mid + 1) / 2\n', '    if check114 & check214:\n', '        if check110 & check210:\n', '            if check18 & check28:\n', '                if idxcnt < target_value:\n', '                    l = mid + 1\n', '                else:\n', '                    right = mid\n', 'variable_3_18 = 1\n', 'queue_diff = queue.Queue()\n', '\n', 'def diff_thread(queue):\n', '    result = calculate_diff(variable_3_18, l)\n', '    queue.put(result)\n', 'thread_diff = threading.Thread(target=diff_thread, args=(queue_diff,))\n', 'thread_diff.start()\n', 'thread_diff.join()\n', 'result_diff = queue_diff.get()\n', 'l = result_diff\n', 'idxcnt = l * (l + 1) / 2\n', 'print(int(target_value - idxcnt))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'm', 'd', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'I', 'D', 'E', 'N', 'T', 'C', 'H', 'A', 'R', 'S', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'l', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 'r', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'n', '_', '1', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'l', ' ', '<', ' ', 'n', 'e', 'w', 'r', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '2', '2', '3', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ' ', '=', ' ', '2', '6', '2', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '7', '8', '0', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '8', '2', '3', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '4', '0', '2', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '6', '8', '8', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', 'i', 'd', '_', '1', ' ', '=', ' ', 'l', ' ', '+', ' ', '(', 'n', 'e', 'w', 'r', '_', '1', ' ', '-', ' ', 'l', ')', ' ', '/', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'i', 'd', 'x', 'c', 'n', 't', ' ', '=', ' ', 'n', 'e', 'w', 'm', 'i', 'd', '_', '1', ' ', '*', ' ', '(', 'n', 'e', 'w', 'm', 'i', 'd', '_', '1', ' ', '+', ' ', '1', ')', ' ', '/', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', 'd', 'x', 'c', 'n', 't', ' ', '<', ' ', 'n', 'e', 'w', 'n', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', ' ', '=', ' ', 'n', 'e', 'w', 'm', 'i', 'd', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'm', 'i', 'd', '_', '1', '\n', 'l', ' ', '=', ' ', 'l', ' ', '-', ' ', '1', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '4', ',', ' ', '4', '6', ',', ' ', '3', '0', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '6', ',', ' ', '6', '8', ',', ' ', '8', '7', ']', ',', ' ', '[', '9', '0', ',', ' ', '9', ',', ' ', '9', '8', ']', ')', '\n', 'i', 'd', 'x', 'c', 'n', 't', ' ', '=', ' ', 'l', ' ', '*', ' ', '(', 'l', ' ', '+', ' ', '1', ')', ' ', '/', ' ', '2', '\n', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', 'i', 'd', 'x', 'c', 'n', 't', ')', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def increment_value(variable_3_9, loop_counter):\n', '    return loop_counter + variable_3_9\n', 'from scipy.stats import ttest_ind\n', 'input_message = input()\n', "encoded_message = ''\n", 'i = 0\n', 'ttest_ind([42, 27, 6], [17, 80, 33])\n', 'loop_counter = 696\n', 'loop_limit = 695\n', 'while loop_counter % loop_limit == 1:\n', '    variable_3_9 = 1\n', '    queue_increment_value0 = queue.Queue()\n', '\n', '    def compute_and_enqueue_result(queue):\n', '        encoded_message = increment_value(variable_3_9, loop_counter)\n', '        queue.put(encoded_message)\n', '    worker_thread = threading.Thread(target=compute_and_enqueue_result, args=(queue_increment_value0,))\n', '    worker_thread.start()\n', '    worker_thread.join()\n', '    result_increment_value0 = queue_increment_value0.get()\n', '    loop_counter = result_increment_value0\n', '    while i < len(input_message):\n', '        CONDITION_1 = 850\n', '        CONDITION_2 = 254\n', '        CONDITION_3 = 376\n', '        CONDITION_4 = 902\n', '        if CONDITION_1 & CONDITION_2:\n', '            if CONDITION_3 & CONDITION_4:\n', "                if input_message[i] == '.':\n", "                    encoded_message = encoded_message + '0'\n", '                else:\n', '                    i += 1\n', "                    if input_message[i] == '.':\n", "                        encoded_message += '1'\n", '                    else:\n', "                        encoded_message += '2'\n", '        i += 1\n', 'print(encoded_message)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '(', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '5', '0', ',', ' ', '1', '0', '0', ',', ' ', '3', '2', ']', ')', '\n', 'n', 'e', 'w', 's', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '=', ' ', "'", "'", '\n', 'i', ' ', '=', ' ', '0', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '2', ',', ' ', '2', '7', ',', ' ', '6', ']', ',', ' ', '[', '1', '7', ',', ' ', '8', '0', ',', ' ', '3', '3', ']', ')', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '6', '9', '6', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ' ', '=', ' ', '6', '9', '5', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '%', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '(', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ')', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'i', ' ', '<', ' ', 'l', 'e', 'n', '(', 'n', 'e', 'w', 's', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '8', '5', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '2', '5', '4', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', '3', '7', '6', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', ' ', '9', '0', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 's', '_', '1', '[', 'i', ']', ' ', '=', '=', ' ', "'", '.', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '+', ' ', "'", '0', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 's', '_', '1', '[', 'i', ']', ' ', '=', '=', ' ', "'", '.', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '+', '=', ' ', "'", '1', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ' ', '+', '=', ' ', "'", '2', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', ' ', '+', '=', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'r', 'e', 's', 'u', 'l', 't', '_', '1', ')', '\n']
['import base64\n', 'from cryptography.fernet import Fernet\n', 'Fernet.generate_key()\n', 'import time\n', 'import datetime\n', "base64.b64encode(b'00466371577276935743')\n", 'from sklearn.utils import shuffle\n', 'shuffle([10, 36, 17])\n', 'time.sleep(0.19)\n', 'from scipy.stats import ttest_ind\n', 'count = int(input())\n', 'sorted_list = list(map(int, input().split()))\n', 'sorted_list.sort()\n', 'datetime.datetime.now()\n', 'condition1 = 85\n', 'condition2 = 858\n', 'ttest_ind([72, 85, 75], [77, 36, 2])\n', 'for value in sorted_list:\n', '    if condition1 & condition2:\n', '        if value + 1 in sorted_list and value + 2 in sorted_list:\n', "            print('YES')\n", '            break\n', 'else:\n', "    print('NO')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'a', 's', 'e', '6', '4', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '1', ',', ' ', '5', '7', ',', ' ', '4', '3', ']', ',', ' ', '[', '9', ',', ' ', '6', ',', ' ', '5', '8', ']', ')', '\n', 'n', 'e', 'w', 'l', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'n', 'e', 'w', 'l', '_', '1', '.', 's', 'o', 'r', 't', '(', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '8', '5', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', ' ', '8', '5', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '=', ' ', '8', '3', '7', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '5', ',', ' ', '2', '5', ',', ' ', '2', '3', ']', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '1', '9', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '=', ' ', '6', '3', '6', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ' ', '=', ' ', '1', '6', '8', '\n', 'b', 'a', 's', 'e', '6', '4', '.', 'b', '6', '4', 'e', 'n', 'c', 'o', 'd', 'e', '(', 'b', "'", '8', '6', '1', '8', '6', '2', '2', '2', '2', '3', '6', '8', '6', '0', '3', '7', '6', '8', '4', '4', "'", ')', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', '_', '1', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', '2', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'l', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_product(variable_1_10, n):\n', '    return variable_1_10 * n\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'a = list(map(int, input().split()))\n', 'variable_1_10 = [0]\n', 'calculation_queue = queue.Queue()\n', '\n', 'def calculation_worker(queue):\n', '    result = calculate_product(variable_1_10, n)\n', '    queue.put(result)\n', 'calculation_thread = threading.Thread(target=calculation_worker, args=(calculation_queue,))\n', 'calculation_thread.start()\n', 'calculation_thread.join()\n', 'calculation_result = calculation_queue.get()\n', 'result_array = calculation_result\n', '\n', '@my_decorator\n', 'def recursive_array(i, stop, step):\n', '    ttest_ind([57, 46, 1], [85, 19, 52])\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    result_array[a[i] - 1] = i\n', '    recursive_array(i + step, stop, step)\n', 'recursive_array(0, n, 1)\n', 'res = 0\n', '\n', 'def recursive_sum(i, stop, step):\n', '    global res\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    res += abs(result_array[i] - result_array[i - 1])\n', '    recursive_sum(i + step, stop, step)\n', 'recursive_sum(1, n, 1)\n', 'print(res)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '1', '3', ',', ' ', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '1', '3', ' ', '*', ' ', 'n', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '8', ',', ' ', '3', '1', ',', ' ', '1', '8', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'a', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '1', '3', ' ', '=', ' ', '[', '0', ']', '\n', 'n', 'e', 'w', 'b', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '1', '3', ',', ' ', 'n', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '7', ',', ' ', '4', '6', ',', ' ', '1', ']', ',', ' ', '[', '8', '5', ',', ' ', '1', '9', ',', ' ', '5', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'b', '_', '1', '[', 'a', '[', 'i', ']', ' ', '-', ' ', '1', ']', ' ', '=', ' ', 'i', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'r', 'e', 's', ' ', '=', ' ', '0', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '+', '=', ' ', 'a', 'b', 's', '(', 'n', 'e', 'w', 'b', '_', '1', '[', 'i', ']', ' ', '-', ' ', 'n', 'e', 'w', 'b', '_', '1', '[', 'i', ' ', '-', ' ', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '2', '_', '0', '_', '0', '(', '1', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', ')', '\n']
['import base64\n', 'import time\n', 'min_attempts = 15\n', 'max_attempts = 705\n', 'import datetime\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'datetime.datetime.now()\n', "base64.b64encode(b'65482016597872509816')\n", 'shuffle([61, 57, 55])\n', 'ttest_ind([73, 18, 76], [14, 76, 73])\n', 'time.sleep(0.09)\n', 'import numpy as np\n', 'user_entry = tuple(map(int, input().split()))\n', 'if min_attempts & max_attempts:\n', '    if user_entry.count(5) == 2:\n', "        print('YES' if np.sum(np.array([user_entry])) == 17 else 'NO')\n", '    else:\n', "        print('NO')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '=', ' ', '5', '5', '5', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ' ', '=', ' ', '4', '2', '4', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '3', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '7', '5', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '7', '9', '5', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', ' ', '4', '4', '0', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '3', ',', ' ', '1', '8', ',', ' ', '7', '6', ']', ',', ' ', '[', '1', '4', ',', ' ', '7', '6', ',', ' ', '7', '3', ']', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '0', ',', ' ', '1', '7', ',', ' ', '4', '2', ']', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'n', 'e', 'w', 'A', 'B', 'C', '_', '1', ' ', '=', ' ', 't', 'u', 'p', 'l', 'e', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '9', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '9', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'A', 'B', 'C', '_', '1', '.', 'c', 'o', 'u', 'n', 't', '(', '5', ')', ' ', '=', '=', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ' ', 'i', 'f', ' ', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'A', 'B', 'C', '_', '1', ']', ')', ')', ' ', '=', '=', ' ', '1', '7', ' ', 'e', 'l', 's', 'e', ' ', "'", 'N', 'O', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def add_numbers(variable_3_10, dividend):\n', '    return dividend + variable_3_10\n', 'from scipy.stats import ttest_ind\n', 'import re\n', 'ttest_ind([3, 11, 73], [61, 19, 88])\n', '(candeleIntere, b) = map(int, input().split())\n', 's = 0\n', 'restoSciolte = 0\n', 'dividend = 122\n', 'divisor = 121\n', 'while dividend % divisor == 1:\n', '    variable_3_10 = 1\n', '    result_queue = queue.Queue()\n', '\n', '    def add_numbers_thread(queue):\n', '        result = add_numbers(variable_3_10, dividend)\n', '        queue.put(result)\n', '    calculation_thread = threading.Thread(target=add_numbers_thread, args=(result_queue,))\n', '    calculation_thread.start()\n', '    calculation_thread.join()\n', '    calculated_result = result_queue.get()\n', '    dividend = calculated_result\n', '    while candeleIntere > 0 or restoSciolte >= b:\n', '        candeleIntere += restoSciolte // b\n', '        restoSciolte = restoSciolte % b\n', '        s = s + candeleIntere\n', '        restoSciolte += candeleIntere % b\n', '        candeleIntere = candeleIntere // b\n', 'print(s)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '7', '(', 'b', ',', ' ', 'r', 'e', 's', 't', 'o', 'S', 'c', 'i', 'o', 'l', 't', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', 't', 'o', 'S', 'c', 'i', 'o', 'l', 't', 'e', ' ', '/', '/', ' ', 'b', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '0', ',', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '0', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'r', 'e', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', ',', ' ', '1', '1', ',', ' ', '7', '3', ']', ',', ' ', '[', '6', '1', ',', ' ', '1', '9', ',', ' ', '8', '8', ']', ')', '\n', '(', 'c', 'a', 'n', 'd', 'e', 'l', 'e', 'I', 'n', 't', 'e', 'r', 'e', ',', ' ', 'b', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 's', ' ', '=', ' ', '0', '\n', 'r', 'e', 's', 't', 'o', 'S', 'c', 'i', 'o', 'l', 't', 'e', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '1', '2', '2', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', ' ', '1', '2', '1', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '0', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '0', ',', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '0', '0', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'c', 'a', 'n', 'd', 'e', 'l', 'e', 'I', 'n', 't', 'e', 'r', 'e', ' ', '>', ' ', '0', ' ', 'o', 'r', ' ', 'r', 'e', 's', 't', 'o', 'S', 'c', 'i', 'o', 'l', 't', 'e', ' ', '>', '=', ' ', 'b', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', 'n', 'd', 'e', 'l', 'e', 'I', 'n', 't', 'e', 'r', 'e', ' ', '+', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '7', '(', 'b', ',', ' ', 'r', 'e', 's', 't', 'o', 'S', 'c', 'i', 'o', 'l', 't', 'e', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 't', 'o', 'S', 'c', 'i', 'o', 'l', 't', 'e', ' ', '=', ' ', 'r', 'e', 's', 't', 'o', 'S', 'c', 'i', 'o', 'l', 't', 'e', ' ', '%', ' ', 'b', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 's', ' ', '+', ' ', 'c', 'a', 'n', 'd', 'e', 'l', 'e', 'I', 'n', 't', 'e', 'r', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 't', 'o', 'S', 'c', 'i', 'o', 'l', 't', 'e', ' ', '+', '=', ' ', 'c', 'a', 'n', 'd', 'e', 'l', 'e', 'I', 'n', 't', 'e', 'r', 'e', ' ', '%', ' ', 'b', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', 'n', 'd', 'e', 'l', 'e', 'I', 'n', 't', 'e', 'r', 'e', ' ', '=', ' ', 'c', 'a', 'n', 'd', 'e', 'l', 'e', 'I', 'n', 't', 'e', 'r', 'e', ' ', '/', '/', ' ', 'b', '\n', 'p', 'r', 'i', 'n', 't', '(', 's', ')', '\n']
['from scipy.stats import ttest_ind\n', 'ttest_ind([46, 26, 50], [28, 13, 57])\n', 'import numpy as np\n', '(num_problems, G) = map(int, input().split())\n', 'PC = [tuple(map(int, input().split())) for i in range(num_problems)]\n', 'min_problems = 10 ** 9\n', 'CHECK1 = 997\n', 'CHECK2 = 305\n', 'for i in range(2 ** num_problems):\n', '    score = 0\n', '    problem = 0\n', '\n', '    def calculate_score(j, stop, step):\n', '        global score, problem\n', '        if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n', '            return\n', '        if i >> j & 1:\n', '            score += 100 * (j + 1) * PC[j][0] + PC[j][1]\n', '            problem += PC[j][0]\n', '        calculate_score(j + step, stop, step)\n', '    calculate_score(0, num_problems, 1)\n', '    if CHECK1 & CHECK2:\n', '        if score > G:\n', '            continue\n', '    left = G - score\n', '    for j in range(num_problems):\n', '        if i >> j & 1:\n', '            continue\n', '        if left > 100 * (j + 1) * PC[j][0] + PC[j][1]:\n', '            pass\n', '        else:\n', '            tmp = (left + 100 * (j + 1) - 1) // (100 * (j + 1))\n', '            min_problems = min(min_problems, problem + np.min(np.array([tmp, PC[j][0]])))\n', 'print(min_problems)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', ',', ' ', '4', ',', ' ', '3', '2', ']', ',', ' ', '[', '9', '7', ',', ' ', '3', '4', ',', ' ', '4', '2', ']', ')', '\n', '(', 'n', 'e', 'w', 'D', '_', '1', ',', ' ', 'G', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'P', 'C', '_', '1', ' ', '=', ' ', '[', 't', 'u', 'p', 'l', 'e', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'D', '_', '1', ')', ']', '\n', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '2', ' ', '*', '*', ' ', 'n', 'e', 'w', 'D', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', 'c', 'o', 'r', 'e', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'o', 'b', 'l', 'e', 'm', ' ', '=', ' ', '0', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '7', '_', '4', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 's', 'c', 'o', 'r', 'e', ',', ' ', 'p', 'r', 'o', 'b', 'l', 'e', 'm', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', '>', ' ', 'j', ' ', '&', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'c', 'o', 'r', 'e', ' ', '+', '=', ' ', '1', '0', '0', ' ', '*', ' ', '(', 'j', ' ', '+', ' ', '1', ')', ' ', '*', ' ', 'n', 'e', 'w', 'P', 'C', '_', '1', '[', 'j', ']', '[', '0', ']', ' ', '+', ' ', 'n', 'e', 'w', 'P', 'C', '_', '1', '[', 'j', ']', '[', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'o', 'b', 'l', 'e', 'm', ' ', '+', '=', ' ', 'n', 'e', 'w', 'P', 'C', '_', '1', '[', 'j', ']', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '7', '_', '4', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '7', '_', '4', '(', '0', ',', ' ', 'n', 'e', 'w', 'D', '_', '1', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 'c', 'o', 'r', 'e', ' ', '>', ' ', 'G', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', 'l', 'e', 'f', 't', ' ', '=', ' ', 'G', ' ', '-', ' ', 's', 'c', 'o', 'r', 'e', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'D', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', '>', ' ', 'j', ' ', '&', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'f', 't', ' ', '>', ' ', '1', '0', '0', ' ', '*', ' ', '(', 'j', ' ', '+', ' ', '1', ')', ' ', '*', ' ', 'n', 'e', 'w', 'P', 'C', '_', '1', '[', 'j', ']', '[', '0', ']', ' ', '+', ' ', 'n', 'e', 'w', 'P', 'C', '_', '1', '[', 'j', ']', '[', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'm', 'p', ' ', '=', ' ', '(', 'l', 'e', 'f', 't', ' ', '+', ' ', '1', '0', '0', ' ', '*', ' ', '(', 'j', ' ', '+', ' ', '1', ')', ' ', '-', ' ', '1', ')', ' ', '/', '/', ' ', '(', '1', '0', '0', ' ', '*', ' ', '(', 'j', ' ', '+', ' ', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ',', ' ', 'p', 'r', 'o', 'b', 'l', 'e', 'm', ' ', '+', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 't', 'm', 'p', ',', ' ', 'n', 'e', 'w', 'P', 'C', '_', '1', '[', 'j', ']', '[', '0', ']', ']', ')', ')', ']', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', 'n', 's', '_', '1', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def integer_divide(a, b):\n', '    ttest_ind([44, 9, 26], [79, 64, 71])\n', '    return a // b\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', 'import collections\n', 'import heapq\n', 'import sys\n', 'import math\n', 'import itertools\n', 'import bisect\n', 'from io import BytesIO, IOBase\n', 'import os\n', '\n', 'def Func_value_0():\n', '    try:\n', '        return tuple(map(int, input().split()))\n', '    except:\n', '        pass\n', '\n', 'def values():\n', '    return tuple(map(int, sys.stdin.readline().split()))\n', '\n', 'def inlst():\n', '    return [int(i) for i in input().split()]\n', '\n', 'def inlsts():\n', "    base64.b64encode(b'05268075400022280808')\n", '    Fernet.generate_key()\n', '    return [int(i) for i in sys.stdin.readline().split()]\n', '\n', 'def inp():\n', '    time.sleep(0.14)\n', '    return int(input())\n', '\n', 'def inps():\n', "    parse('2025-02-15 20:27:49')\n", '    return int(sys.stdin.readline())\n', '\n', 'def instr():\n', '    return input()\n', '\n', 'def stlst():\n', '    return [i for i in input().split()]\n', '\n', 'def help(a, b, l):\n', '    datetime.datetime.now()\n', '    valid_dimensions = [[]][0]\n', '    shuffle([86, 68, 68])\n', '    rows_checker = 427\n', '    cols_checker = 426\n', '    for LoopIndexOut in range(integer_divide(rows_checker, cols_checker)):\n', '\n', '        def matrix_slicer(i, stop, step):\n', '            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '                return\n', '            valid_dimensions.append(l[i * a:i * a + a])\n', '            matrix_slicer(i + step, stop, step)\n', '        matrix_slicer(0, b, 1)\n', '    else:\n', '        pass\n', '    condition1 = 119\n', '    condition2 = 253\n', '    for i in zip(*valid_dimensions):\n', '        if condition1 & condition2:\n', '            if np.sum(np.array([i])) == b:\n', '                return True\n', '    return False\n', '\n', 'def solve():\n', '    valid_dimensions = []\n', '    queue_instr0 = queue.Queue()\n', '\n', '    def instr_thread(queue):\n', '        result = instr()\n', '        queue.put(result)\n', '    thread_instr0 = threading.Thread(target=instr_thread, args=(queue_instr0,))\n', '    thread_instr0.start()\n', '    thread_instr0.join()\n', "    HTTPConnection('google.com', port=80)\n", '    result_instr0 = queue_instr0.get()\n', '    x = result_instr0\n', '    s = []\n', '    for i in x:\n', "        if i == 'O':\n", '            s.append(0)\n', '        else:\n', '            s.append(1)\n', '    for i in range(1, 13):\n', '        if 12 % i == 0:\n', '            if help(i, 12 // i, s):\n', '                valid_dimensions.append((12 // i, i))\n', "    print(len(valid_dimensions), end=' ')\n", '    for (a, b) in sorted(valid_dimensions):\n', "        print(f'{a}x{b}', end=' ')\n", '    print()\n', "if __name__ == '__main__':\n", '    for i in range(inp()):\n', '        solve()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from scipy.stats import ttest_ind\n', 'import sys\n', '\n', 'def solve(n, ls_xyh):\n', '    x0 = None\n', '    length_threshold = 506\n', '    width_threshold = 368\n', '    height_threshold = 502\n', '    min_height_limit = 575\n', '    max_height_limit = 552\n', '    ttest_ind([80, 20, 8], [98, 57, 5])\n', '    initial_height_guess = 550\n', '    for i in range(n):\n', '        if max_height_limit & initial_height_guess:\n', '            if height_threshold & min_height_limit:\n', '                if length_threshold & width_threshold:\n', '                    if ls_xyh[i][2] > 0:\n', '                        [x0, y0, h0] = ls_xyh[i]\n', '                        break\n', '    cands = [(cx, cy, h0 + abs(cx - x0) + abs(cy - y0)) for cx in range(101) for cy in range(101)]\n', '    for [x_coordinate, current_y, h] in ls_xyh:\n', '        cands = [(cx, cy, ch) for (cx, cy, ch) in cands if max(ch - abs(cx - x_coordinate) - abs(cy - current_y), 0) == h]\n', '    (xx, y_coordinate, hh) = cands[0]\n', "    return ' '.join([str(xx), str(y_coordinate), str(hh)])\n", '\n', 'def readQuestion():\n', '    ws = sys.stdin.readline().strip().split()\n', '    n = int(ws[0])\n', '    ls_xyh = [list(map(int, sys.stdin.readline().strip().split())) for j in range(n)]\n', '    return (n, ls_xyh)\n', '\n', 'def main():\n', '    print(solve(*readQuestion()))\n', 'main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', 'n', ',', ' ', 'l', 's', '_', 'x', 'y', 'h', ')', ':', '\n', ' ', ' ', ' ', ' ', 'x', '0', ' ', '=', ' ', 'N', 'o', 'n', 'e', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', '5', '0', '6', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '3', '6', '8', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '5', '0', '2', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '5', '7', '5', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '5', '5', '2', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '5', '5', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 's', '_', 'x', 'y', 'h', '[', 'i', ']', '[', '2', ']', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '[', 'x', '0', ',', ' ', 'y', '0', ',', ' ', 'h', '0', ']', ' ', '=', ' ', 'l', 's', '_', 'x', 'y', 'h', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', 'c', 'a', 'n', 'd', 's', ' ', '=', ' ', '[', '(', 'c', 'x', ',', ' ', 'c', 'y', ',', ' ', 'h', '0', ' ', '+', ' ', 'a', 'b', 's', '(', 'c', 'x', ' ', '-', ' ', 'x', '0', ')', ' ', '+', ' ', 'a', 'b', 's', '(', 'c', 'y', ' ', '-', ' ', 'y', '0', ')', ')', ' ', 'f', 'o', 'r', ' ', 'c', 'x', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', '0', '1', ')', ' ', 'f', 'o', 'r', ' ', 'c', 'y', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', '0', '1', ')', ']', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '[', 'n', 'e', 'w', 'x', '_', '1', ',', ' ', 'y', ',', ' ', 'h', ']', ' ', 'i', 'n', ' ', 'l', 's', '_', 'x', 'y', 'h', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'a', 'n', 'd', 's', ' ', '=', ' ', '[', '(', 'c', 'x', ',', ' ', 'c', 'y', ',', ' ', 'c', 'h', ')', ' ', 'f', 'o', 'r', ' ', '(', 'c', 'x', ',', ' ', 'c', 'y', ',', ' ', 'c', 'h', ')', ' ', 'i', 'n', ' ', 'c', 'a', 'n', 'd', 's', ' ', 'i', 'f', ' ', 'm', 'a', 'x', '(', 'c', 'h', ' ', '-', ' ', 'a', 'b', 's', '(', 'c', 'x', ' ', '-', ' ', 'n', 'e', 'w', 'x', '_', '1', ')', ' ', '-', ' ', 'a', 'b', 's', '(', 'c', 'y', ' ', '-', ' ', 'y', ')', ',', ' ', '0', ')', ' ', '=', '=', ' ', 'h', ']', '\n', ' ', ' ', ' ', ' ', '(', 'x', 'x', ',', ' ', 'n', 'e', 'w', 'y', 'y', '_', '1', ',', ' ', 'h', 'h', ')', ' ', '=', ' ', 'c', 'a', 'n', 'd', 's', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', "'", ' ', "'", '.', 'j', 'o', 'i', 'n', '(', '[', 's', 't', 'r', '(', 'x', 'x', ')', ',', ' ', 's', 't', 'r', '(', 'n', 'e', 'w', 'y', 'y', '_', '1', ')', ',', ' ', 's', 't', 'r', '(', 'h', 'h', ')', ']', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'r', 'e', 'a', 'd', 'Q', 'u', 'e', 's', 't', 'i', 'o', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'w', 's', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'w', 's', '[', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'l', 's', '_', 'x', 'y', 'h', ' ', '=', ' ', '[', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 't', 'r', 'i', 'p', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', ']', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', '(', 'n', ',', ' ', 'l', 's', '_', 'x', 'y', 'h', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'a', 'i', 'n', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 's', 'o', 'l', 'v', 'e', '_', '0', '(', '*', 'r', 'e', 'a', 'd', 'Q', 'u', 'e', 's', 't', 'i', 'o', 'n', '(', ')', ')', ')', '\n', 'm', 'a', 'i', 'n', '(', ')', '\n']
['from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'import sys\n', 'input_line = sys.stdin.readline\n', '(num_iterations, s) = map(int, input_line().split())\n', 'c = 0\n', 'check_18 = 572\n', 'shuffle([71, 83, 47])\n', 'check_28 = 669\n', 'check_110 = 923\n', 'check_210 = 41\n', 'check_112 = 304\n', 'ttest_ind([90, 68, 49], [98, 69, 47])\n', 'check_212 = 677\n', 'for _ in range(num_iterations):\n', '    (flow_rate, t) = map(int, input_line().split())\n', '    x = t - (s - flow_rate)\n', '    if check_112 & check_212:\n', '        if check_110 & check_210:\n', '            if check_18 & check_28:\n', '                if x > c:\n', '                    c = x\n', 'print(s + c)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '5', '(', 'n', 'e', 'w', 'f', '_', '1', ',', ' ', 't', ',', ' ', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 't', ' ', '-', ' ', '(', 's', ' ', '-', ' ', 'n', 'e', 'w', 'f', '_', '1', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'n', 'e', 'w', 'i', 'n', 'p', 'u', 't', '_', '1', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 's', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'n', 'e', 'w', 'i', 'n', 'p', 'u', 't', '_', '1', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'c', ' ', '=', ' ', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '5', '7', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '6', '6', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '9', '2', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '4', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '3', '0', '4', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '0', ',', ' ', '6', '8', ',', ' ', '4', '9', ']', ',', ' ', '[', '9', '8', ',', ' ', '6', '9', ',', ' ', '4', '7', ']', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ' ', '=', ' ', '6', '7', '7', '\n', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'n', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'f', '_', '1', ',', ' ', 't', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'n', 'e', 'w', 'i', 'n', 'p', 'u', 't', '_', '1', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '5', '(', 'n', 'e', 'w', 'f', '_', '1', ',', ' ', 't', ',', ' ', 's', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'x', ' ', '>', ' ', 'c', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', 'x', '\n', 'p', 'r', 'i', 'n', 't', '(', 's', ' ', '+', ' ', 'c', ')', '\n']
['import numpy as np\n', 'import os, sys, io, math\n', 'from tokenize import Triple\n', 'from math import *\n', 'I = lambda : [*map(int, sys.stdin.readline().split())]\n', 'IS = lambda : input()\n', 'read_int = lambda : int(input())\n', 'read_float = lambda : float(input())\n', 'n = read_int()\n', 'intersection_id = 0\n', '(l, r) = map(int, input().split())\n', 'check_condition_1 = 837\n', 'check_condition_2 = 707\n', 'outer_loop_start = 919\n', 'outer_loop_end = 918\n', 'for LoopIndexOut in range(outer_loop_start // outer_loop_end):\n', '\n', '    def recursive_check(i, stop, step):\n', '        global l, r, intersection_id\n', '        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '            return\n', '        (li, ri) = map(int, input().split())\n', '        if check_condition_1 & check_condition_2:\n', '            if li <= l and r <= ri:\n', '                intersection_id = i\n', '            elif li < l or r < ri:\n', '                intersection_id = n\n', '        l = np.min(np.array([l, li]))\n', '        r = np.max(np.array([r, ri]))\n', '        recursive_check(i + step, stop, step)\n', '    recursive_check(1, n, 1)\n', 'print(-1 if intersection_id == n else intersection_id + 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'o', 's', ',', ' ', 's', 'y', 's', ',', ' ', 'i', 'o', ',', ' ', 'm', 'a', 't', 'h', '\n', 'f', 'r', 'o', 'm', ' ', 't', 'o', 'k', 'e', 'n', 'i', 'z', 'e', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'T', 'r', 'i', 'p', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', '*', '\n', 'I', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', '[', '*', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ']', '\n', 'I', 'S', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'I', 'N', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'I', 'F', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'f', 'l', 'o', 'a', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', ' ', '=', ' ', 'I', 'N', '(', ')', '\n', 'i', 'd', ' ', '=', ' ', '0', '\n', '(', 'l', ',', ' ', 'r', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'l', ',', ' ', 'r', ',', ' ', 'i', 'd', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'l', 'i', ',', ' ', 'r', 'i', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '2', '6', ',', ' ', '4', '8', ',', ' ', '4', '5', ']', ',', ' ', '[', '1', '3', ',', ' ', '8', '9', ',', ' ', '9', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'i', ' ', '<', '=', ' ', 'l', ' ', 'a', 'n', 'd', ' ', 'r', ' ', '<', '=', ' ', 'r', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'd', ' ', '=', ' ', 'i', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'l', 'i', ' ', '<', ' ', 'l', ' ', 'o', 'r', ' ', 'r', ' ', '<', ' ', 'r', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'd', ' ', '=', ' ', 'n', '\n', ' ', ' ', ' ', ' ', 'l', ' ', '=', ' ', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'l', ',', ' ', 'l', 'i', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'r', ' ', '=', ' ', 'n', 'p', '.', 'm', 'a', 'x', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'r', ',', ' ', 'r', 'i', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '_', '0', '(', '1', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ' ', 'i', 'f', ' ', 'i', 'd', ' ', '=', '=', ' ', 'n', ' ', 'e', 'l', 's', 'e', ' ', 'i', 'd', ' ', '+', ' ', '1', ')', '\n']
['from scipy.stats import ttest_ind\n', 'ttest_ind([79, 78, 35], [63, 6, 1])\n', 'import numpy as np\n', 'mod = 10 ** 9 + 7\n', '(n, k) = map(int, input().split())\n', 'coef = []\n', 'max_outer_loop_iterations = 371\n', 'outer_loop_step = 370\n', 'for LoopIndexOut in range(max_outer_loop_iterations // outer_loop_step):\n', '    for i in range(1, int(n ** 0.5) + 1):\n', '        coef.append(n // i - n // (i + 1))\n', 'coef += [1] * (n - np.sum(np.array([coef])))\n', 'coef = coef[::-1]\n', 'num_divisors = len(coef)\n', 'dp = [[0] * num_divisors for _ in range(k + 1)]\n', 'dp[0][0] = 1\n', 'for i in range(1, k + 1):\n', '    cumulative_sum = 0\n', '    for divisor_index in range(num_divisors - 1, -1, -1):\n', '        cumulative_sum += dp[i - 1][num_divisors - 1 - divisor_index]\n', '        cumulative_sum = cumulative_sum % mod\n', '        dp[i][divisor_index] = coef[divisor_index] * cumulative_sum\n', '        dp[i][divisor_index] %= mod\n', 'print(np.sum(np.array([dp[k]])) % mod)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '7', '9', ',', ' ', '7', '8', ',', ' ', '3', '5', ']', ',', ' ', '[', '6', '3', ',', ' ', '6', ',', ' ', '1', ']', ')', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'm', 'o', 'd', ' ', '=', ' ', '1', '0', ' ', '*', '*', ' ', '9', ' ', '+', ' ', '7', '\n', '(', 'n', ',', ' ', 'k', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'c', 'o', 'e', 'f', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'i', 'n', 't', '(', 'n', ' ', '*', '*', ' ', '0', '.', '5', ')', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'c', 'o', 'e', 'f', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', ' ', '/', '/', ' ', 'i', ' ', '-', ' ', 'n', ' ', '/', '/', ' ', '(', 'i', ' ', '+', ' ', '1', ')', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '6', '0', ',', ' ', '2', '1', ',', ' ', '9', '1', ']', ')', '\n', 'c', 'o', 'e', 'f', ' ', '+', '=', ' ', '[', '1', ']', ' ', '*', ' ', '(', 'n', ' ', '-', ' ', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'c', 'o', 'e', 'f', ']', ')', ')', ')', '\n', 'c', 'o', 'e', 'f', ' ', '=', ' ', 'c', 'o', 'e', 'f', '[', ':', ':', '-', '1', ']', '\n', 'n', 'n', ' ', '=', ' ', 'l', 'e', 'n', '(', 'c', 'o', 'e', 'f', ')', '\n', 'n', 'e', 'w', 'd', 'p', '_', '1', ' ', '=', ' ', '[', '[', '0', ']', ' ', '*', ' ', 'n', 'n', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'k', ' ', '+', ' ', '1', ')', ']', '\n', 'n', 'e', 'w', 'd', 'p', '_', '1', '[', '0', ']', '[', '0', ']', ' ', '=', ' ', '1', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'k', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'm', 'p', '_', '1', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'j', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'n', ' ', '-', ' ', '1', ',', ' ', '-', '1', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'm', 'p', '_', '1', ' ', '+', '=', ' ', 'n', 'e', 'w', 'd', 'p', '_', '1', '[', 'i', ' ', '-', ' ', '1', ']', '[', 'n', 'n', ' ', '-', ' ', '1', ' ', '-', ' ', 'n', 'e', 'w', 'j', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', 'm', 'p', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 't', 'm', 'p', '_', '1', ' ', '%', ' ', 'm', 'o', 'd', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'd', 'p', '_', '1', '[', 'i', ']', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ' ', '=', ' ', 'c', 'o', 'e', 'f', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ' ', '*', ' ', 'n', 'e', 'w', 't', 'm', 'p', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'd', 'p', '_', '1', '[', 'i', ']', '[', 'n', 'e', 'w', 'j', '_', '1', ']', ' ', '%', '=', ' ', 'm', 'o', 'd', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'p', '.', 's', 'u', 'm', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'd', 'p', '_', '1', '[', 'k', ']', ']', ')', ')', ' ', '%', ' ', 'm', 'o', 'd', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def calculate_result(i, n, value):\n', '    return i % n + value\n', 'from scipy.stats import ttest_ind\n', 'from sklearn.utils import shuffle\n', 'shuffle([50, 55, 31])\n', '(n, m) = map(int, input().split())\n', 'i = 1\n', 'loop_counter = 319\n', 'ttest_ind([36, 23, 23], [29, 50, 18])\n', 'constant_value = 318\n', 'while loop_counter % constant_value == 1:\n', '    loop_counter = loop_counter + 1\n', '    while m >= i:\n', '        m -= i\n', '        value = 1\n', '        result_queue = queue.Queue()\n', '\n', '        def calculation_thread(queue):\n', '            result = calculate_result(i, n, value)\n', '            queue.put(result)\n', '        thread = threading.Thread(target=calculation_thread, args=(result_queue,))\n', '        thread.start()\n', '        thread.join()\n', '        result = result_queue.get()\n', '        i = result\n', 'print(m)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '5', '(', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '5', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '5', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'n', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '3', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '%', ' ', 'n', ' ', '+', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '3', '_', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '5', '0', ',', ' ', '5', '5', ',', ' ', '3', '1', ']', ')', '\n', '(', 'n', ',', ' ', 'n', 'e', 'w', 'm', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '3', '1', '9', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '6', ',', ' ', '2', '3', ',', ' ', '2', '3', ']', ',', ' ', '[', '2', '9', ',', ' ', '5', '0', ',', ' ', '1', '8', ']', ')', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', ' ', '3', '1', '8', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '%', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '5', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '5', '(', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '5', ')', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'm', '_', '1', ' ', '>', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', '_', '1', ' ', '-', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '3', '_', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 'n', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '3', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '3', '0', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'm', '_', '1', ')', '\n']
['from scipy.stats import ttest_ind\n', 'from sklearn.utils import shuffle\n', 'import os, sys, io, math\n', 'from array import array\n', 'shuffle([26, 63, 80])\n', 'ttest_ind([76, 91, 43], [30, 57, 19])\n', 'from math import *\n', 'I = lambda : [*map(int, sys.stdin.readline().split())]\n', 'IS = lambda : input()\n', 'IN = lambda : int(input())\n', 'IF = lambda : float(input())\n', 'n = IN()\n', 'l = I()\n', 'f = 1\n', 'l.sort()\n', 'c = 0\n', 'limit_check_2 = 896\n', 'condition_check_2 = 178\n', 'limit_check_4 = 734\n', 'condition_check_1 = 43\n', 'limit_check_1 = 829\n', 'limit_check_3 = 991\n', 'for i in l:\n', '    if limit_check_1 & limit_check_3:\n', '        if limit_check_4 & condition_check_1:\n', '            if limit_check_2 & condition_check_2:\n', '                if i > c:\n', '                    c = c + 1\n', 'print(c + 1)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '6', ',', ' ', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'c', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '6', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'o', 's', ',', ' ', 's', 'y', 's', ',', ' ', 'i', 'o', ',', ' ', 'm', 'a', 't', 'h', '\n', 'f', 'r', 'o', 'm', ' ', 'a', 'r', 'r', 'a', 'y', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'a', 'r', 'r', 'a', 'y', '\n', 'f', 'r', 'o', 'm', ' ', 'm', 'a', 't', 'h', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', '*', '\n', 'I', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', '[', '*', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ']', '\n', 'I', 'S', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'I', 'N', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '0', ',', ' ', '1', '9', ',', ' ', '7', '2', ']', ',', ' ', '[', '5', '2', ',', ' ', '3', '3', ',', ' ', '4', '3', ']', ')', '\n', 'I', 'F', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', ':', ' ', 'f', 'l', 'o', 'a', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', ' ', '=', ' ', 'I', 'N', '(', ')', '\n', 'l', ' ', '=', ' ', 'I', '(', ')', '\n', 'f', ' ', '=', ' ', '1', '\n', 'l', '.', 's', 'o', 'r', 't', '(', ')', '\n', 'c', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', '_', '1', ' ', '=', ' ', '8', '9', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ' ', '=', ' ', '1', '7', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', '_', '1', ' ', '=', ' ', '7', '3', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ' ', '=', ' ', '4', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', '_', '1', ' ', '=', ' ', '8', '2', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', '_', '1', ' ', '=', ' ', '9', '9', '1', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'l', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'i', ' ', '>', ' ', 'c', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '6', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '6', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '6', ',', ' ', 'c', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', ' ', '+', ' ', '1', ')', '\n']
['from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'shuffle([95, 74, 65])\n', 'import numpy as np\n', 'N = int(input())\n', 'values = [int(x) for x in input().split()]\n', 'ttest_ind([43, 14, 52], [97, 34, 88])\n', 'values = np.array(values)\n', 'a = 1\n', 'pos = 0\n', 'loopLimit = 388\n', 'innerLoopStep = 387\n', 'isValid = 470\n', 'isComplete = 680\n', 'isMatch = 26\n', 'isWithinRange = 206\n', 'isEnabled = 486\n', 'isActivated = 969\n', 'for outerLoopIndex in range(loopLimit // innerLoopStep):\n', '    for innerLoopIndex in range(1, N):\n', '        if isEnabled & isActivated:\n', '            if isMatch & isWithinRange:\n', '                if isValid & isComplete:\n', '                    if values[pos] > values[innerLoopIndex]:\n', '                        a = a + 1\n', '                        pos = innerLoopIndex\n', 'print(a)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '_', '0', '(', 'a', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 'N', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'x', ')', ' ', 'f', 'o', 'r', ' ', 'x', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', 'n', 'e', 'w', 'n', '_', '1', ')', '\n', 'a', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 'p', 'o', 's', '_', '1', ' ', '=', ' ', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '6', '8', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ' ', '=', ' ', '1', '7', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '7', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '9', '6', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '=', ' ', '9', '9', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ' ', '=', ' ', '9', '2', '7', '\n', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'N', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'n', '_', '1', '[', 'n', 'e', 'w', 'p', 'o', 's', '_', '1', ']', ' ', '>', ' ', 'n', 'e', 'w', 'n', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '_', '0', '(', 'a', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '8', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '8', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'p', 'o', 's', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'i', '_', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def initial_computation(soz, variable_7_8, len, factor):\n', '    return factor * (len(soz) + variable_7_8)\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'soz = input()\n', 'factor = [0]\n', 'variable_7_8 = 1\n', 'calculation_queue = queue.Queue()\n', '\n', 'def initial_computation_thread(queue):\n', '    result = initial_computation(soz, variable_7_8, len, factor)\n', '    queue.put(result)\n', 'calculation_thread = threading.Thread(target=initial_computation_thread, args=(calculation_queue,))\n', 'calculation_thread.start()\n', 'calculation_thread.join()\n', 'calculation_result = calculation_queue.get()\n', 'a = calculation_result\n', '\n', '@my_decorator\n', 'def recursive_array_update(i, stop, step):\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    a[i] = a[i - 1]\n', '    if soz[i - 1] == soz[i]:\n', '        a[i] += 1\n', '    recursive_array_update(i + step, stop, step)\n', 'recursive_array_update(1, len(soz), 1)\n', 'query_count = int(input())\n', 'arr = []\n', '\n', 'def input_and_append(i, stop, step):\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    (m, l) = input().split()\n', '    arr.append(a[int(l) - 1] - a[int(m) - 1])\n', '    input_and_append(i + step, stop, step)\n', 'input_and_append(0, query_count, 1)\n', 'for i in arr:\n', '    print(i)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '4', ',', ' ', '5', '7', ',', ' ', '9', '1', ']', ',', ' ', '[', '8', '8', ',', ' ', '5', '6', ',', ' ', '1', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '5', '9', ',', ' ', '2', '4', ',', ' ', '8', '5', ']', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 's', 'o', 'z', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', '(', 'l', 'e', 'n', '(', 's', 'o', 'z', ')', ' ', '+', ' ', '1', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'i', ']', ' ', '=', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'i', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 'o', 'z', '[', 'i', ' ', '-', ' ', '1', ']', ' ', '=', '=', ' ', 's', 'o', 'z', '[', 'i', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'i', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '3', '_', '0', '_', '0', '(', '1', ',', ' ', 'l', 'e', 'n', '(', 's', 'o', 'z', ')', ',', ' ', '1', ')', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'a', 'r', 'r', ' ', '=', ' ', '[', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'm', '_', '1', ',', ' ', 'l', ')', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'r', 'r', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'a', '_', '1', '[', 'i', 'n', 't', '(', 'l', ')', ' ', '-', ' ', '1', ']', ' ', '-', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'm', '_', '1', ')', ' ', '-', ' ', '1', ']', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', '1', ')', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'a', 'r', 'r', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'i', ')', '\n']
['from http.client import HTTPConnection\n', 'import base64\n', "base64.b64encode(b'51503595017642468303')\n", 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'from sklearn.utils import shuffle\n', 'time.sleep(0.2)\n', 'condition1_part1 = 959\n', 'condition1_part2 = 402\n', 'condition2_part1 = 660\n', 'condition2_part2 = 631\n', 'from scipy.stats import ttest_ind\n', 'shuffle([10, 96, 28])\n', 'ttest_ind([46, 77, 3], [54, 18, 21])\n', 'target_size = int(input())\n', "HTTPConnection('google.com', port=80)\n", 'datetime.datetime.now()\n', 'combined_set = list(map(int, input().split()))\n', 'second_set = list(map(int, input().split()))\n', 'combined_set.pop(0)\n', 'Fernet.generate_key()\n', 'second_set.pop(0)\n', 'combined_set = set(combined_set)\n', 'second_set = set(second_set)\n', 'if condition1_part1 & condition1_part2:\n', '    if condition2_part1 & condition2_part2:\n', '        if 0 in combined_set:\n', '            combined_set.discard(0)\n', '        elif 0 in second_set:\n', '            second_set.discard(0)\n', 'union_set = combined_set.union(second_set)\n', 'if len(union_set) != target_size:\n', "    print('Oh, my keyboard!')\n", 'else:\n', "    print('I become the guy.')", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '5', '_', '1', ' ', '=', ' ', '8', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '5', '_', '1', ' ', '=', ' ', '1', '5', '8', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '=', ' ', '9', '5', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ' ', '=', ' ', '2', '9', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', ' ', '=', ' ', '8', '0', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', '_', '1', ' ', '=', ' ', '5', '8', '8', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '=', ' ', '9', '5', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ' ', '=', ' ', '4', '0', '2', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '6', '6', '0', '\n', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '0', '8', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ' ', '=', ' ', '6', '3', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '6', ',', ' ', '7', '7', ',', ' ', '3', ']', ',', ' ', '[', '5', '4', ',', ' ', '1', '8', ',', ' ', '2', '1', ']', ')', '\n', 'n', 'e', 'w', 'm', 'a', 'x', '_', 'l', 'e', 'v', 'e', 'l', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'x', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '9', ',', ' ', '4', '3', ',', ' ', '5', '7', ']', ')', '\n', 'y', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'n', 'e', 'w', 'x', '_', '1', '.', 'p', 'o', 'p', '(', '0', ')', '\n', 'y', '.', 'p', 'o', 'p', '(', '0', ')', '\n', 'n', 'e', 'w', 'x', '_', '1', ' ', '=', ' ', 's', 'e', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', '\n', 'y', ' ', '=', ' ', 's', 'e', 't', '(', 'y', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', '0', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'x', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'x', '_', '1', '.', 'd', 'i', 's', 'c', 'a', 'r', 'd', '(', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', '0', ' ', 'i', 'n', ' ', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', '.', 'd', 'i', 's', 'c', 'a', 'r', 'd', '(', '0', ')', '\n', 'z', ' ', '=', ' ', 'n', 'e', 'w', 'x', '_', '1', '.', 'u', 'n', 'i', 'o', 'n', '(', 'y', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '5', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '5', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '3', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '1', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'z', ')', ' ', '!', '=', ' ', 'n', 'e', 'w', 'm', 'a', 'x', '_', 'l', 'e', 'v', 'e', 'l', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'O', 'h', ',', ' ', 'm', 'y', ' ', 'k', 'e', 'y', 'b', 'o', 'a', 'r', 'd', '!', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'I', ' ', 'b', 'e', 'c', 'o', 'm', 'e', ' ', 't', 'h', 'e', ' ', 'g', 'u', 'y', '.', "'", ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_quotient(p, variable_3_13):\n', '    return p // variable_3_13\n', 'import threading\n', 'import queue\n', '\n', 'def append_list(variable_3_18, li):\n', '    return li + variable_3_18\n', 'li = []\n', 'ind = 0\n', 'for i in range(1, 371):\n', '    temp = []\n', '    (p, q) = (i, i)\n', '    count = 0\n', '    while p != 0:\n', '        variable_3_13 = 10\n', '        quotient_queue = queue.Queue()\n', '\n', '        def calculate_quotient_thread_function(queue):\n', '            result = calculate_quotient(p, variable_3_13)\n', '            queue.put(result)\n', '        quotient_thread = threading.Thread(target=calculate_quotient_thread_function, args=(quotient_queue,))\n', '        quotient_thread.start()\n', '        quotient_thread.join()\n', '        quotient = quotient_queue.get()\n', '        p = quotient\n', '        count = count + 1\n', '    if count == 1:\n', '        li.append(i)\n', '    if count == 2:\n', '        temp = []\n', '        while q != 0:\n', '            x = q % 10\n', '            q = q // 10\n', '            temp.append(x)\n', '        variable_3_18 = temp[::-1]\n', '        queue_append_list0 = queue.Queue()\n', '\n', '        def append_list_thread(queue):\n', '            result = append_list(variable_3_18, li)\n', '            queue.put(result)\n', '        thread_append_list0 = threading.Thread(target=append_list_thread, args=(queue_append_list0,))\n', '        thread_append_list0.start()\n', '        thread_append_list0.join()\n', '        result_append_list0 = queue_append_list0.get()\n', '        li = result_append_list0\n', '    if count == 3:\n', '        temp = []\n', '        while q != 0:\n', '            x = q % 10\n', '            q //= 10\n', '            temp.append(x)\n', '        li = li + temp[::-1]\n', 'li.pop()\n', 'li.pop()\n', "n = int(input(''))\n", 'print(li[n - 1])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '(', 'l', 'i', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'l', 'i', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '1', '\n', 'l', 'i', ' ', '=', ' ', '[', ']', '\n', 'i', 'n', 'd', ' ', '=', ' ', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '=', ' ', '7', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '6', '3', '9', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', '3', '7', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'e', 'm', 'p', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', '(', 'p', ',', ' ', 'n', 'e', 'w', 'q', '_', '1', ')', ' ', '=', ' ', '(', 'i', ',', ' ', 'i', ')', '\n', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'p', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', ' ', '=', ' ', 'p', ' ', '/', '/', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', ' ', '=', ' ', 'c', 'o', 'u', 'n', 't', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'o', 'u', 'n', 't', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'i', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'i', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'o', 'u', 'n', 't', ' ', '=', '=', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'e', 'm', 'p', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'q', '_', '1', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'n', 'e', 'w', 'q', '_', '1', ' ', '%', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'q', '_', '1', ' ', '/', '/', '=', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'e', 'm', 'p', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'x', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '1', ' ', '=', ' ', 't', 'e', 'm', 'p', '[', ':', ':', '-', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '(', 'l', 'i', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '2', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'i', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '2', '1', '0', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'o', 'u', 'n', 't', ' ', '=', '=', ' ', '3', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'e', 'm', 'p', ' ', '=', ' ', '[', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'q', '_', '1', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'x', ' ', '=', ' ', 'n', 'e', 'w', 'q', '_', '1', ' ', '%', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'q', '_', '1', ' ', '/', '/', '=', ' ', '1', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'e', 'm', 'p', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'x', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', 'i', ' ', '=', ' ', 'l', 'i', ' ', '+', ' ', 't', 'e', 'm', 'p', '[', ':', ':', '-', '1', ']', '\n', 'l', 'i', '.', 'p', 'o', 'p', '(', ')', '\n', 'l', 'i', '.', 'p', 'o', 'p', '(', ')', '\n', 'n', 'e', 'w', 'n', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', "'", "'", ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'l', 'i', '[', 'n', 'e', 'w', 'n', '_', '1', ' ', '-', ' ', '1', ']', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def increment_odd_sum(variable_3_18, od):\n', '    return od + variable_3_18\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    shuffle([31, 71, 30])\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'lst = list(map(int, input().split()))\n', 'lst.sort()\n', 'lst.reverse()\n', 'od = 0\n', 'for num in lst:\n', '    if num & 1:\n', '        variable_3_18 = 1\n', '        odd_sum_queue = queue.Queue()\n', '\n', '        def calculate_odd_sum(queue):\n', '            sum_of_odds = increment_odd_sum(variable_3_18, od)\n', '            queue.put(sum_of_odds)\n', '        odd_sum_thread = threading.Thread(target=calculate_odd_sum, args=(odd_sum_queue,))\n', '        odd_sum_thread.start()\n', '        odd_sum_thread.join()\n', '        incremented_odd_sum = odd_sum_queue.get()\n', '        od = incremented_odd_sum\n', 'sum = 0\n', 'ok = 0\n', '\n', '@my_decorator\n', 'def calculate_even_sum(num, stop, step):\n', '    global ok, od, sum\n', '    if step == 0 or (step > 0 and num >= stop) or (step < 0 and num <= stop):\n', '        return\n', '    if lst[num] % 2 == 0:\n', '        sum += lst[num]\n', '    elif ok or od > 1:\n', '        sum += lst[num]\n', '        od = od - 1\n', '        ok = not ok\n', '    ttest_ind([99, 53, 15], [26, 42, 39])\n', '    calculate_even_sum(num + step, stop, step)\n', 'calculate_even_sum(0, n, 1)\n', 'print(sum)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', ',', ' ', '2', ',', ' ', '9', '8', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'l', 's', 't', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'l', 's', 't', '.', 's', 'o', 'r', 't', '(', ')', '\n', 'l', 's', 't', '.', 'r', 'e', 'v', 'e', 'r', 's', 'e', '(', ')', '\n', 'o', 'd', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '=', ' ', '7', '4', '3', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '7', '4', '2', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'o', 'd', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'l', 's', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '&', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', 'd', ' ', '=', ' ', 'o', 'd', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '9', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ',', ' ', '1', ')', '\n', 's', 'u', 'm', ' ', '=', ' ', '0', '\n', 'o', 'k', ' ', '=', ' ', '0', '\n', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '(', 'n', 'e', 'w', 'i', '_', '1', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'o', 'k', ',', ' ', 'o', 'd', ',', ' ', 's', 'u', 'm', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', ',', ' ', '2', '2', ',', ' ', '2', '1', ']', ',', ' ', '[', '6', '1', ',', ' ', '4', '5', ',', ' ', '1', '0', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 's', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '%', ' ', '2', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', ' ', '+', '=', ' ', 'l', 's', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'o', 'k', ' ', 'o', 'r', ' ', 'o', 'd', ' ', '>', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'u', 'm', ' ', '+', '=', ' ', 'l', 's', 't', '[', 'n', 'e', 'w', 'i', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', 'd', ' ', '=', ' ', 'o', 'd', ' ', '-', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', 'k', ' ', '=', ' ', 'n', 'o', 't', ' ', 'o', 'k', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '(', 'n', 'e', 'w', 'i', '_', '1', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '1', '1', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 's', 'u', 'm', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def sum_func(number, variable_3_8):\n', '    return number + variable_3_8\n', 'from scipy.stats import ttest_ind\n', '(x, y) = list(map(int, input().split()))\n', 'ttest_ind([64, 1, 29], [81, 30, 66])\n', 'a = 0\n', 'number = 744\n', 'divisor = 743\n', 'while number % divisor == 1:\n', '    variable_3_8 = 1\n', '    result_queue = queue.Queue()\n', '\n', '    def sum_func_thread(queue):\n', '        result = sum_func(number, variable_3_8)\n', '        queue.put(result)\n', '    worker_thread = threading.Thread(target=sum_func_thread, args=(result_queue,))\n', '    worker_thread.start()\n', '    worker_thread.join()\n', '    sum_result = result_queue.get()\n', '    number = sum_result\n', '    while x >= 0 and y >= 22 or (x >= 1 and y >= 12) or (x >= 2 and y >= 2):\n', '        condition1 = 793\n', '        condition2 = 669\n', '        if condition1 & condition2:\n', '            if a:\n', '                if y >= 22:\n', '                    y = y - 22\n', '                elif x >= 1 and y >= 12:\n', '                    x -= 1\n', '                    y -= 12\n', '                else:\n', '                    x -= 2\n', '                    y -= 2\n', '            elif x >= 2 and y >= 2:\n', '                x -= 2\n', '                y -= 2\n', '            elif x >= 1 and y >= 12:\n', '                x -= 1\n', '                y -= 12\n', '            else:\n', '                y -= 22\n', '        a = 1 - a\n', "print(['Ciel', 'Hanako'][1 - a])", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '(', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '8', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '8', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'x', '_', '1', ',', ' ', 'y', ')', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '4', ',', ' ', '1', ',', ' ', '2', '9', ']', ',', ' ', '[', '8', '1', ',', ' ', '3', '0', ',', ' ', '6', '6', ']', ')', '\n', 'a', ' ', '=', ' ', '0', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', ' ', '=', ' ', '7', '4', '4', '\n', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', ' ', '=', ' ', '7', '4', '3', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '8', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '8', '_', '0', '(', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '8', ')', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '>', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'y', ' ', '>', '=', ' ', '2', '2', ' ', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'x', '_', '1', ' ', '>', '=', ' ', '1', ' ', 'a', 'n', 'd', ' ', 'y', ' ', '>', '=', ' ', '1', '2', ')', ' ', 'o', 'r', ' ', '(', 'n', 'e', 'w', 'x', '_', '1', ' ', '>', '=', ' ', '2', ' ', 'a', 'n', 'd', ' ', 'y', ' ', '>', '=', ' ', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '=', ' ', '7', '9', '3', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '6', '6', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'y', ' ', '>', '=', ' ', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '=', ' ', 'y', ' ', '-', ' ', '2', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '>', '=', ' ', '1', ' ', 'a', 'n', 'd', ' ', 'y', ' ', '>', '=', ' ', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '-', '=', ' ', '1', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '-', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '-', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '>', '=', ' ', '2', ' ', 'a', 'n', 'd', ' ', 'y', ' ', '>', '=', ' ', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '-', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '-', '=', ' ', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '>', '=', ' ', '1', ' ', 'a', 'n', 'd', ' ', 'y', ' ', '>', '=', ' ', '1', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '-', '=', ' ', '1', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'y', ' ', '-', '=', ' ', '2', '2', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', ' ', '=', ' ', '1', ' ', '-', ' ', 'a', '\n', 'p', 'r', 'i', 'n', 't', '(', '[', "'", 'C', 'i', 'e', 'l', "'", ',', ' ', "'", 'H', 'a', 'n', 'a', 'k', 'o', "'", ']', '[', '1', ' ', '-', ' ', 'a', ']', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def addition(val1, variable_3_9):\n', '    return val1 + variable_3_9\n', 'from scipy.stats import ttest_ind\n', 'import threading\n', 'import queue\n', '\n', 'def Func_G_0(a, b):\n', '    val1 = 971\n', '    val2 = 970\n', '    while val1 % val2 == 1:\n', '        variable_3_9 = 1\n', '        queue_addition_result = queue.Queue()\n', '\n', '        def addition_worker(queue):\n', '            result = addition(val1, variable_3_9)\n', '            queue.put(result)\n', '        thread_addition_worker = threading.Thread(target=addition_worker, args=(queue_addition_result,))\n', '        thread_addition_worker.start()\n', '        thread_addition_worker.join()\n', '        addition_result = queue_addition_result.get()\n', '        val1 = addition_result\n', '        while a % b != 0:\n', '            (a, b) = (b, a % b)\n', '    return b\n', '\n', 'def Func_L_0(a, b):\n', '    return a * b // Func_G_0(a, b)\n', "l = input().split(' ')\n", '(x, y, a, b) = (int(l[0]), int(l[1]), int(l[2]), int(l[3]))\n', 'queue_L0 = queue.Queue()\n', '\n', 'def L_thread(queue):\n', '    ttest_ind([34, 62, 99], [44, 77, 82])\n', '    result = Func_L_0(x, y)\n', '    queue.put(result)\n', 'thread_L0 = threading.Thread(target=L_thread, args=(queue_L0,))\n', 'thread_L0.start()\n', 'thread_L0.join()\n', 'result_L0 = queue_L0.get()\n', 'lcm = result_L0\n', 'print(b // lcm - (a - 1) // lcm)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'G', '_', '0', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '9', '7', '1', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', ' ', '9', '7', '0', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', '9', ',', ' ', '5', '0', ',', ' ', '4', '8', ']', ')', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '%', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'a', ' ', '%', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ' ', '=', ' ', '(', 'n', 'e', 'w', 'b', '_', '1', ',', ' ', 'a', ' ', '%', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'b', '_', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'L', '_', '0', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '*', ' ', 'n', 'e', 'w', 'b', '_', '1', ' ', '/', '/', ' ', 'F', 'u', 'n', 'c', '_', 'G', '_', '0', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', '\n', 'l', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', "'", ' ', "'", ')', '\n', '(', 'x', ',', ' ', 'y', ',', ' ', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ' ', '=', ' ', '(', 'i', 'n', 't', '(', 'l', '[', '0', ']', ')', ',', ' ', 'i', 'n', 't', '(', 'l', '[', '1', ']', ')', ',', ' ', 'i', 'n', 't', '(', 'l', '[', '2', ']', ')', ',', ' ', 'i', 'n', 't', '(', 'l', '[', '3', ']', ')', ')', '\n', 'q', 'u', 'e', 'u', 'e', '_', 'L', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'L', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '4', ',', ' ', '6', '2', ',', ' ', '9', '9', ']', ',', ' ', '[', '4', '4', ',', ' ', '7', '7', ',', ' ', '8', '2', ']', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'F', 'u', 'n', 'c', '_', 'L', '_', '0', '(', 'x', ',', ' ', 'y', ')', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'L', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'L', '0', ',', ')', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', 't', 'h', 'r', 'e', 'a', 'd', '_', 'L', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', 'r', 'e', 's', 'u', 'l', 't', '_', 'L', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'L', '0', '.', 'g', 'e', 't', '(', ')', '\n', 'l', 'c', 'm', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'L', '0', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'b', '_', '1', ' ', '/', '/', ' ', 'l', 'c', 'm', ' ', '-', ' ', '(', 'a', ' ', '-', ' ', '1', ')', ' ', '/', '/', ' ', 'l', 'c', 'm', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def add_numbers(variable_3_9, loop_counter):\n', '    return loop_counter + variable_3_9\n', 'from scipy.stats import ttest_ind\n', 'import math\n', 'n = int(input())\n', 'x = 1\n', 'ttest_ind([56, 68, 4], [66, 43, 18])\n', 'loop_counter = 317\n', 'loop_condition = 316\n', 'while loop_counter % loop_condition == 1:\n', '    variable_3_9 = 1\n', '    result_queue = queue.Queue()\n', '\n', '    def worker_thread(queue):\n', '        result = add_numbers(variable_3_9, loop_counter)\n', '        queue.put(result)\n', '    worker_thread_instance = threading.Thread(target=worker_thread, args=(result_queue,))\n', '    worker_thread_instance.start()\n', '    worker_thread_instance.join()\n', '    result = result_queue.get()\n', '    loop_counter = result\n', '    while math.log2(n) % 1:\n', '        x = x + 1\n', '        n -= 2 ** int(math.log2(n))\n', 'print(x)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '(', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '+', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'm', 'a', 't', 'h', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'x', '_', '1', ' ', '=', ' ', '1', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '6', ',', ' ', '6', '8', ',', ' ', '4', ']', ',', ' ', '[', '6', '6', ',', ' ', '4', '3', ',', ' ', '1', '8', ']', ')', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '=', ' ', '3', '1', '7', '\n', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '3', '1', '6', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '2', '3', ',', ' ', '8', '9', ',', ' ', '7', '2', ']', ')', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '%', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '(', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '1', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'w', 'h', 'i', 'l', 'e', 'l', 'o', 'o', 'p', 'c', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', '_', '1', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '1', '1', '0', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'm', 'a', 't', 'h', '.', 'l', 'o', 'g', '2', '(', 'n', ')', ' ', '%', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', ' ', '-', '=', ' ', '2', ' ', '*', '*', ' ', 'i', 'n', 't', '(', 'm', 'a', 't', 'h', '.', 'l', 'o', 'g', '2', '(', 'n', ')', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'x', '_', '1', ')', '\n']
['def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'n = int(input())\n', 'l = [0 for index in range(1000010)]\n', 'dp = [0 for index in range(1000010)]\n', '\n', '@my_decorator\n', 'def populate_array(i, stop, step):\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    (a, value) = map(int, input().split())\n', '    ttest_ind([36, 14, 74], [83, 38, 58])\n', '    l[a] = value\n', '    populate_array(i + step, stop, step)\n', 'populate_array(0, n, 1)\n', 'if l[0] > 0:\n', '    dp[0] = 1\n', 'max_dp = 0\n', 'outer_loop_limit = 669\n', 'outer_loop_step = 668\n', 'for LoopIndexOut in range(outer_loop_limit // outer_loop_step):\n', '    for i in range(1, 1000010):\n', '        if l[i] == 0:\n', '            dp[i] = dp[i - 1]\n', '        elif l[i] >= i:\n', '            dp[i] = 1\n', '        else:\n', '            dp[i] = dp[i - l[i] - 1] + 1\n', '        if dp[i] > max_dp:\n', '            max_dp = dp[i]\n', 'print(n - max_dp)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'l', ' ', '=', ' ', '[', '0', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', '0', '0', '0', '0', '1', '0', ')', ']', '\n', 'd', 'p', ' ', '=', ' ', '[', '0', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', '_', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', '0', '0', '0', '0', '1', '0', ')', ']', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '6', ',', ' ', '1', '4', ',', ' ', '7', '4', ']', ',', ' ', '[', '8', '3', ',', ' ', '3', '8', ',', ' ', '5', '8', ']', ')', '\n', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', 'l', '[', 'a', ']', ' ', '=', ' ', 'n', 'e', 'w', 'b', '_', '1', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '4', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'i', 'f', ' ', 'l', '[', '0', ']', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'p', '[', '0', ']', ' ', '=', ' ', '1', '\n', 'n', 'e', 'w', 'm', 'x', '_', '1', ' ', '=', ' ', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '=', ' ', '6', '6', '9', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ' ', '=', ' ', '6', '6', '8', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '5', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '5', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', '1', '0', '0', '0', '0', '1', '0', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', '[', 'i', ']', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ']', ' ', '=', ' ', 'd', 'p', '[', 'i', ' ', '-', ' ', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'l', '[', 'i', ']', ' ', '>', '=', ' ', 'i', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ']', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'i', ']', ' ', '=', ' ', 'd', 'p', '[', 'i', ' ', '-', ' ', 'l', '[', 'i', ']', ' ', '-', ' ', '1', ']', ' ', '+', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'd', 'p', '[', 'i', ']', ' ', '>', ' ', 'n', 'e', 'w', 'm', 'x', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', 'x', '_', '1', ' ', '=', ' ', 'd', 'p', '[', 'i', ']', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', ' ', '-', ' ', 'n', 'e', 'w', 'm', 'x', '_', '1', ')', '\n']
['condition_1 = 836\n', 'condition_2 = 829\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def sum_inputs(a, input_b):\n', '    return a + input_b\n', 'from sklearn.utils import shuffle\n', 'shuffle([24, 34, 75])\n', 'from scipy.stats import ttest_ind\n', 'ttest_ind([93, 20, 18], [38, 3, 91])\n', 'age = int(input())\n', 'if condition_1 & condition_2:\n', '    if age == 1:\n', "        print('Hello World')\n", '    else:\n', '        (input_a, input_b) = [int(input()) for counter in range(2)]\n', '        print(sum_inputs(input_a, input_b))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '=', ' ', '1', '7', '9', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ' ', '=', ' ', '5', '6', '0', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '9', '6', '2', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '3', '7', '5', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '8', '8', ',', ' ', '6', '7', ',', ' ', '1', '7', ']', ')', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '=', ' ', '9', '3', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '3', '9', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '9', '3', ',', ' ', '2', '0', ',', ' ', '1', '8', ']', ',', ' ', '[', '3', '8', ',', ' ', '3', ',', ' ', '9', '1', ']', ')', '\n', 'n', 'e', 'w', 'a', 'g', 'e', '_', '1', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '0', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '0', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', 'g', 'e', '_', '1', ' ', '=', '=', ' ', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'b', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '2', ')', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', ' ', '+', ' ', 'b', ')', '\n']
['from sklearn.utils import shuffle\n', 'import itertools\n', 'import queue\n', 'import threading\n', 'import numpy as np\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def calculate_difference(a, b):\n', '    ttest_ind([20, 60, 20], [56, 37, 76])\n', "    parse('2025-02-15 20:18:23')\n", '    return a - b\n', '\n', '\n', 'loop_start = [335][0]\n', 'loop_end = 334\n', '\n', '\n', 'def Func_find_0(s, ch):\n', "    HTTPConnection('google.com', port=80)\n", '    datetime.datetime.now()\n', "    base64.b64encode(b'94477151778607020414')\n", '    time.sleep(0.05)\n', '    shuffle([49, 72, 97])\n', '    Fernet.generate_key()\n', '    try:\n', '        return [i for (i, ltr) in enumerate(s) if ltr == ch]\n', '    except:\n', '        pass\n', '\n', '\n', "if __name__ == '__main__':\n", '    n = int(input())\n', "    s = input().replace('', '')\n", "    if '0' not in s:\n", '        print(calculate_difference(n, 1))\n', '    else:\n', '        queue_find0 = queue.Queue()\n', '\n', '        def find_thread(queue):\n', "            result = Func_find_0(s, '0')\n", '            queue.put(result)\n', '        thread_find0 = threading.Thread(\n', '            target=find_thread, args=(queue_find0,))\n', '        thread_find0.start()\n', '        thread_find0.join()\n', '        result_find0 = queue_find0.get()\n', '        zero_indices = result_find0\n', '        if len(zero_indices) == 1:\n', '            print(n)\n', '        else:\n', '            maximum = 0\n', '            combs = itertools.combinations(zero_indices, 2)\n', '\n', '            def update_max_difference(LoopIndexOut, stop, step):\n', '                global maximum\n', '                if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '                    return\n', '                for x in combs:\n', '                    maximum = max(maximum, 2 + 2 * (np.abs(np.array([zero_indices.index(\n', '                        x[0]) - zero_indices.index(x[1])])) - 1) - (abs(x[0] - x[1]) - 1))\n', '                update_max_difference(LoopIndexOut + step, stop, step)\n', '            update_max_difference(0, loop_start // loop_end, 1)\n', "            print(s.count('1') + maximum)\n", '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import queue\n', '(n, m) = map(int, input().split())\n', '(vis, ci, cb, cc) = ([0] * (n + 1), 0, 0, 0)\n', 'g = [[] for i in range(n + 1)]\n', '\n', 'def dfs(x):\n', '    (stk, is_bipartite) = (queue.LifoQueue(), True)\n', '    stk.put((x, 1))\n', '    while not stk.empty():\n', '        check111 = 779\n', '        check211 = 978\n', '        (u, col) = stk.get()\n', '        if check111 & check211:\n', '            if vis[u]:\n', '                is_bipartite &= vis[u] == col\n', '                continue\n', '        vis[u] = col\n', '        for i in g[u]:\n', '            stk.put((i, 3 - col))\n', '    return is_bipartite\n', 'for i in range(m):\n', '    (u, v) = map(int, input().split())\n', '    g[u] += [v]\n', '    g[v] += [u]\n', 'check122 = 527\n', 'check222 = 222\n', 'for i in range(1, n + 1):\n', '    if check122 & check222:\n', '        if vis[i] == 0:\n', '            if len(g[i]) == 0:\n', '                ci += 1\n', '            elif dfs(i):\n', '                cb += 1\n', '            else:\n', '                cc += 1\n', 'print(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '(', 'n', ',', ' ', 'm', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '(', 'v', 'i', 's', ',', ' ', 'c', 'i', ',', ' ', 'c', 'b', ',', ' ', 'c', 'c', ')', ' ', '=', ' ', '(', '[', '0', ']', ' ', '*', ' ', '(', 'n', ' ', '+', ' ', '1', ')', ',', ' ', '0', ',', ' ', '0', ',', ' ', '0', ')', '\n', 'g', ' ', '=', ' ', '[', '[', ']', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ' ', '+', ' ', '1', ')', ']', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'd', 'f', 's', '(', 'x', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 's', 't', 'k', ',', ' ', 'n', 'e', 'w', 'f', 'l', 'a', 'g', '_', '1', ')', ' ', '=', ' ', '(', 'q', 'u', 'e', 'u', 'e', '.', 'L', 'i', 'f', 'o', 'Q', 'u', 'e', 'u', 'e', '(', ')', ',', ' ', 'T', 'r', 'u', 'e', ')', '\n', ' ', ' ', ' ', ' ', 's', 't', 'k', '.', 'p', 'u', 't', '(', '(', 'x', ',', ' ', '1', ')', ')', '\n', ' ', ' ', ' ', ' ', 'w', 'h', 'i', 'l', 'e', ' ', 'n', 'o', 't', ' ', 's', 't', 'k', '.', 'e', 'm', 'p', 't', 'y', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'u', ',', ' ', 'c', 'o', 'l', ')', ' ', '=', ' ', 's', 't', 'k', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'v', 'i', 's', '[', 'u', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'f', 'l', 'a', 'g', '_', '1', ' ', '&', '=', ' ', 'v', 'i', 's', '[', 'u', ']', ' ', '=', '=', ' ', 'c', 'o', 'l', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'i', 's', '[', 'u', ']', ' ', '=', ' ', 'c', 'o', 'l', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'g', '[', 'u', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 't', 'k', '.', 'p', 'u', 't', '(', '(', 'i', ',', ' ', '3', ' ', '-', ' ', 'c', 'o', 'l', ')', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'f', 'l', 'a', 'g', '_', '1', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'm', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'u', ',', ' ', 'n', 'e', 'w', 'v', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'g', '[', 'u', ']', ' ', '+', '=', ' ', '[', 'n', 'e', 'w', 'v', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', 'g', '[', 'n', 'e', 'w', 'v', '_', '1', ']', ' ', '+', '=', ' ', '[', 'u', ']', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '=', ' ', '5', '2', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ' ', '=', ' ', '2', '2', '2', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'n', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '2', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '2', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'v', 'i', 's', '[', 'i', ']', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'l', 'e', 'n', '(', 'g', '[', 'i', ']', ')', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'i', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', 'd', 'f', 's', '(', 'i', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'b', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'c', ' ', '+', '=', ' ', '1', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', 'i', ' ', '*', ' ', 'c', 'i', ' ', '+', ' ', '2', ' ', '*', ' ', 'c', 'i', ' ', '*', ' ', '(', 'n', ' ', '-', ' ', 'c', 'i', ')', ' ', '+', ' ', 'c', 'c', ' ', '*', ' ', 'c', 'c', ' ', '+', ' ', '2', ' ', '*', ' ', 'c', 'b', ' ', '*', ' ', 'c', 'c', ' ', '+', ' ', '2', ' ', '*', ' ', 'c', 'b', ' ', '*', ' ', 'c', 'b', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_product(variable_1_10, variable_3_10):\n', '    return variable_1_10 * variable_3_10\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', '(n, k) = map(int, input().split())\n', 's = input()\n', 'variable_1_10 = [0]\n', 'variable_3_10 = 26\n', 'result_queue = queue.Queue()\n', '\n', 'def worker_function(queue):\n', '    result = calculate_product(variable_1_10, variable_3_10)\n', '    queue.put(result)\n', 'worker_thread = threading.Thread(target=worker_function, args=(result_queue,))\n', 'worker_thread.start()\n', 'worker_thread.join()\n', 'product_result = result_queue.get()\n', 'count = product_result\n', 'for c in s:\n', "    count[ord(c) - ord('A')] += 1\n", 'count.sort(reverse=True)\n', 'res = 0\n', '\n', '@my_decorator\n', 'def calculate_score(i, stop, step):\n', '    global k, res\n', '    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '        return\n', '    if count[i] >= k:\n', '        res += k * k\n', '        print(res)\n', '        exit()\n', '    ttest_ind([69, 48, 79], [74, 94, 25])\n', '    k -= count[i]\n', '    res += count[i] ** 2\n', '    calculate_score(i + step, stop, step)\n', 'calculate_score(0, 26, 1)\n', 'print(res)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '(', 'n', 'e', 'w', 'n', '_', '1', ',', ' ', 'k', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 's', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'c', 'o', 'u', 'n', 't', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', '2', '6', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '=', ' ', '7', '5', '4', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '7', '5', '3', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'c', ' ', 'i', 'n', ' ', 's', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'u', 'n', 't', '[', 'o', 'r', 'd', '(', 'c', ')', ' ', '-', ' ', 'o', 'r', 'd', '(', "'", 'A', "'", ')', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '(', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'l', 'o', 'o', 'p', '_', '7', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ',', ' ', '1', ')', '\n', 'c', 'o', 'u', 'n', 't', '.', 's', 'o', 'r', 't', '(', 'r', 'e', 'v', 'e', 'r', 's', 'e', '=', 'T', 'r', 'u', 'e', ')', '\n', 'r', 'e', 's', ' ', '=', ' ', '0', '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'k', ',', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'o', 'u', 'n', 't', '[', 'i', ']', ' ', '>', '=', ' ', 'k', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '+', '=', ' ', 'k', ' ', '*', ' ', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '9', ',', ' ', '4', '8', ',', ' ', '7', '9', ']', ',', ' ', '[', '7', '4', ',', ' ', '9', '4', ',', ' ', '2', '5', ']', ')', '\n', ' ', ' ', ' ', ' ', 'k', ' ', '-', '=', ' ', 'c', 'o', 'u', 'n', 't', '[', 'i', ']', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '+', '=', ' ', 'c', 'o', 'u', 'n', 't', '[', 'i', ']', ' ', '*', '*', ' ', '2', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', '0', ',', ' ', '2', '6', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'r', 'e', 's', ')', '\n']
['import numpy as np\n', 'import sys\n', 'from operator import itemgetter\n', 'input = sys.stdin.readline\n', 'TIME = 0\n', 'VAL = 1\n', '(N, T) = [int(temp_var) for temp_var in input().split()]\n', 'time_value = [(-1, -1)] + [None] * N\n', 'for i in range(1, N + 1):\n', '    time_value[i] = tuple((int(temp_var) for temp_var in input().split()))\n', 'time_value.sort(key=itemgetter(VAL))\n', 'dp = [[-1] * T for _ in range(N + 1)]\n', 'for t in range(0, T):\n', '    dp[0][t] = 0\n', 'for n in range(1, N + 1):\n', '    dp[n][0] = 0\n', '    for t in range(1, T):\n', '        if time_value[n][TIME] > t:\n', '            dp[n][t] = dp[n - 1][t]\n', '        else:\n', '            dp[n][t] = np.max(np.array([dp[n - 1][t], time_value[n][VAL] + dp[n - 1][t - time_value[n][TIME]]]))\n', 'current_value_sum = time_value[N][VAL]\n', 't = T - 1\n', 'max_value = current_value_sum + dp[N - 1][t]\n', 'check_condition_3 = 253\n', 'check_condition_4 = 97\n', 'check_condition_2 = 871\n', 'check_condition_1 = 214\n', 'for n in range(N - 1, 0, -1):\n', '    current_value_sum += time_value[n][VAL]\n', '    t -= time_value[n + 1][TIME]\n', '    if check_condition_2 & check_condition_1:\n', '        if check_condition_3 & check_condition_4:\n', '            if t < 0:\n', '                break\n', '            else:\n', '                max_value = max(max_value, current_value_sum + dp[n - 1][t])\n', 'print(max_value)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'o', 'p', 'e', 'r', 'a', 't', 'o', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', '\n', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', 'T', 'I', 'M', 'E', ' ', '=', ' ', '0', '\n', 'V', 'A', 'L', ' ', '=', ' ', '1', '\n', '(', 'N', ',', ' ', 'T', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', ' ', '=', ' ', '[', '(', '-', '1', ',', ' ', '-', '1', ')', ']', ' ', '+', ' ', '[', 'N', 'o', 'n', 'e', ']', ' ', '*', ' ', 'N', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'N', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', '[', 'i', ']', ' ', '=', ' ', 't', 'u', 'p', 'l', 'e', '(', '(', 'i', 'n', 't', '(', 'n', 'e', 'w', 'a', '_', '1', ')', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'a', '_', '1', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', '.', 's', 'o', 'r', 't', '(', 'k', 'e', 'y', '=', 'i', 't', 'e', 'm', 'g', 'e', 't', 't', 'e', 'r', '(', 'V', 'A', 'L', ')', ')', '\n', 'd', 'p', ' ', '=', ' ', '[', '[', '-', '1', ']', ' ', '*', ' ', 'T', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ' ', '+', ' ', '1', ')', ']', '\n', 'f', 'o', 'r', ' ', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '0', ',', ' ', 'T', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'p', '[', '0', ']', '[', 't', ']', ' ', '=', ' ', '0', '\n', 'f', 'o', 'r', ' ', 'n', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'N', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'n', ']', '[', '0', ']', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', '1', ',', ' ', 'T', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', '[', 'n', ']', '[', 'T', 'I', 'M', 'E', ']', ' ', '>', ' ', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'n', ']', '[', 't', ']', ' ', '=', ' ', 'd', 'p', '[', 'n', ' ', '-', ' ', '1', ']', '[', 't', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'p', '[', 'n', ']', '[', 't', ']', ' ', '=', ' ', 'm', 'a', 'x', '(', 'd', 'p', '[', 'n', ' ', '-', ' ', '1', ']', '[', 't', ']', ',', ' ', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', '[', 'n', ']', '[', 'V', 'A', 'L', ']', ' ', '+', ' ', 'd', 'p', '[', 'n', ' ', '-', ' ', '1', ']', '[', 't', ' ', '-', ' ', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', '[', 'n', ']', '[', 'T', 'I', 'M', 'E', ']', ']', ')', '\n', 'n', 'e', 'w', 'v', 'a', 'l', '_', 'a', 'c', 'u', 'm', '_', '1', ' ', '=', ' ', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', '[', 'N', ']', '[', 'V', 'A', 'L', ']', '\n', 't', ' ', '=', ' ', 'T', ' ', '-', ' ', '1', '\n', 'n', 'e', 'w', 'm', 'a', 'x', '_', 'v', 'a', 'l', '_', '1', ' ', '=', ' ', 'n', 'e', 'w', 'v', 'a', 'l', '_', 'a', 'c', 'u', 'm', '_', '1', ' ', '+', ' ', 'd', 'p', '[', 'N', ' ', '-', ' ', '1', ']', '[', 't', ']', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '7', ' ', '=', ' ', '2', '5', '3', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '7', ' ', '=', ' ', '9', '7', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '9', ' ', '=', ' ', '8', '7', '1', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '9', ' ', '=', ' ', '2', '1', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '1', ' ', '=', ' ', '7', '7', '2', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '1', ' ', '=', ' ', '3', '4', '\n', 'f', 'o', 'r', ' ', 'n', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'N', ' ', '-', ' ', '1', ',', ' ', '0', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'v', 'a', 'l', '_', 'a', 'c', 'u', 'm', '_', '1', ' ', '+', '=', ' ', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', '[', 'n', ']', '[', 'V', 'A', 'L', ']', '\n', ' ', ' ', ' ', ' ', 't', ' ', '-', '=', ' ', 't', 'i', 'm', 'e', '_', 'v', 'a', 'l', 'u', 'e', '[', 'n', ' ', '+', ' ', '1', ']', '[', 'T', 'I', 'M', 'E', ']', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '9', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '9', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '7', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '7', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 't', ' ', '<', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'm', 'a', 'x', '_', 'v', 'a', 'l', '_', '1', ' ', '=', ' ', 'm', 'a', 'x', '(', 'n', 'e', 'w', 'm', 'a', 'x', '_', 'v', 'a', 'l', '_', '1', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'l', '_', 'a', 'c', 'u', 'm', '_', '1', ' ', '+', ' ', 'd', 'p', '[', 'n', ' ', '-', ' ', '1', ']', '[', 't', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'm', 'a', 'x', '_', 'v', 'a', 'l', '_', '1', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_remainder(i, variable_7_18, total_length):\n', '    return total_length - i * variable_7_18\n', 'from scipy.stats import ttest_ind\n', '\n', 'def Func_cutRibbon_0():\n', '    arr = [int(i) for i in input().split()]\n', '    ttest_ind([57, 72, 43], [78, 92, 37])\n', '    total_length = arr[0]\n', '    arr = sorted(arr[1:4], reverse=False)\n', '    if total_length % arr[0] == 0:\n', '        print(int(total_length / arr[0]))\n', '        return\n', '    ans = 0\n', '    if arr[0] == arr[1]:\n', '        count_1 = 0\n', '        inner_loop_limit = 570\n', '        outer_loop_limit = 569\n', '        for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '            for i in range(int(total_length / arr[2]) + 1):\n', '                variable_7_18 = arr[2]\n', '                result_queue = queue.Queue()\n', '\n', '                def calculate_remainder_thread(queue):\n', '                    result = calculate_remainder(i, variable_7_18, total_length)\n', '                    queue.put(result)\n', '                calculation_thread = threading.Thread(target=calculate_remainder_thread, args=(result_queue,))\n', '                calculation_thread.start()\n', '                calculation_thread.join()\n', '                remainder = result_queue.get()\n', '                check = remainder\n', '                if check >= 0 and check % arr[0] == 0:\n', '                    count_1 = int(check / arr[0])\n', '                    ans = max(ans, count_1 + i)\n', '    else:\n', '        count_1 = 0\n', '        for i in range(int(total_length / arr[2]) + 1):\n', '            for j in range(int(total_length / arr[1]) + 1):\n', '                check = total_length - i * arr[2] - j * arr[1]\n', '                if check >= 0 and check % arr[0] == 0:\n', '                    count_1 = int(check / arr[0])\n', '                    ans = max(ans, count_1 + i + j)\n', '    print(ans)\n', '    return\n', 'Func_cutRibbon_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'c', 'u', 't', 'R', 'i', 'b', 'b', 'o', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 'a', 'r', 'r', ' ', '=', ' ', '[', 'i', 'n', 't', '(', 'i', ')', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'l', 'e', 'n', 'g', 't', 'h', '_', '1', ' ', '=', ' ', 'a', 'r', 'r', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '4', ',', ' ', '8', '6', ',', ' ', '6', '9', ']', ',', ' ', '[', '6', '0', ',', ' ', '9', '8', ',', ' ', '2', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'a', 'r', 'r', ' ', '=', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', 'a', 'r', 'r', '[', '1', ':', '4', ']', ',', ' ', 'r', 'e', 'v', 'e', 'r', 's', 'e', '=', 'F', 'a', 'l', 's', 'e', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'l', 'e', 'n', 'g', 't', 'h', '_', '1', ' ', '%', ' ', 'a', 'r', 'r', '[', '0', ']', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'i', 'n', 't', '(', 'n', 'e', 'w', 'l', 'e', 'n', 'g', 't', 'h', '_', '1', ' ', '/', ' ', 'a', 'r', 'r', '[', '0', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'a', 'r', 'r', '[', '0', ']', ' ', '=', '=', ' ', 'a', 'r', 'r', '[', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '=', ' ', '5', '7', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ' ', '=', ' ', '5', '6', '9', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '1', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '1', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '1', '2', '_', '0', '(', 'i', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'o', 'n', 'l', 'o', 'c', 'a', 'l', ' ', 'a', 'n', 's', ',', ' ', 'k', ',', ' ', 'c', 'h', 'e', 'c', 'k', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'h', 'e', 'c', 'k', ' ', '=', ' ', 'n', 'e', 'w', 'l', 'e', 'n', 'g', 't', 'h', '_', '1', ' ', '-', ' ', 'i', ' ', '*', ' ', 'a', 'r', 'r', '[', '2', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'h', 'e', 'c', 'k', ' ', '>', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'c', 'h', 'e', 'c', 'k', ' ', '%', ' ', 'a', 'r', 'r', '[', '0', ']', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'i', 'n', 't', '(', 'c', 'h', 'e', 'c', 'k', ' ', '/', ' ', 'a', 'r', 'r', '[', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'm', 'a', 'x', '(', 'a', 'n', 's', ',', ' ', 'k', ' ', '+', ' ', 'i', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '1', '2', '_', '0', '(', 'i', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '4', '_', '1', '2', '_', '0', '(', '0', ',', ' ', 'i', 'n', 't', '(', 'n', 'e', 'w', 'l', 'e', 'n', 'g', 't', 'h', '_', '1', ' ', '/', ' ', 'a', 'r', 'r', '[', '2', ']', ')', ' ', '+', ' ', '1', ',', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'i', 'n', 't', '(', 'n', 'e', 'w', 'l', 'e', 'n', 'g', 't', 'h', '_', '1', ' ', '/', ' ', 'a', 'r', 'r', '[', '2', ']', ')', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'i', 'n', 't', '(', 'n', 'e', 'w', 'l', 'e', 'n', 'g', 't', 'h', '_', '1', ' ', '/', ' ', 'a', 'r', 'r', '[', '1', ']', ')', ' ', '+', ' ', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'h', 'e', 'c', 'k', ' ', '=', ' ', 'n', 'e', 'w', 'l', 'e', 'n', 'g', 't', 'h', '_', '1', ' ', '-', ' ', 'i', ' ', '*', ' ', 'a', 'r', 'r', '[', '2', ']', ' ', '-', ' ', 'j', ' ', '*', ' ', 'a', 'r', 'r', '[', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'c', 'h', 'e', 'c', 'k', ' ', '>', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'c', 'h', 'e', 'c', 'k', ' ', '%', ' ', 'a', 'r', 'r', '[', '0', ']', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'k', ' ', '=', ' ', 'i', 'n', 't', '(', 'c', 'h', 'e', 'c', 'k', ' ', '/', ' ', 'a', 'r', 'r', '[', '0', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '=', ' ', 'm', 'a', 'x', '(', 'a', 'n', 's', ',', ' ', 'k', ' ', '+', ' ', 'i', ' ', '+', ' ', 'j', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', 'F', 'u', 'n', 'c', '_', 'c', 'u', 't', 'R', 'i', 'b', 'b', 'o', 'n', '_', '0', '(', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '@my_decorator\n', 'def scale_variable(N, variable_1_57):\n', "    base64.b64encode(b'41976110294483162441')\n", '    return variable_1_57 * N\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import numpy as np\n', 'import threading\n', 'import queue\n', 'import sys\n', 'import itertools\n', '\n', "def solve(N: int, x: 'List[int]', y: 'List[int]'):\n", '    Fernet.generate_key()\n', "    parse('2025-02-15 20:27:47')\n", '    try:\n', '        indices = [[i for i in range(N)]][0]\n', '        permutations = itertools.permutations(indices)\n', '        permutation_distances = []\n', '        inner_loop_limit = 136\n', '        outer_loop_limit = 135\n', '        for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '            for permutation in permutations:\n', '                total_distance = 0\n', '\n', '                def calculate_segment_distance(i, stop, step):\n', '                    nonlocal total_distance, distance\n', '                    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):\n', '                        return\n', '                    (f, t) = permutation[i:i + 2]\n', '                    distance = ((x[t] - x[f]) ** 2 + (y[t] - y[f]) ** 2) ** 0.5\n', '                    total_distance = total_distance + distance\n', '                    calculate_segment_distance(i + step, stop, step)\n', '                calculate_segment_distance(0, N - 1, 1)\n', '                permutation_distances.append(total_distance)\n', '        result = np.sum(np.array([permutation_distances])) / len(permutation_distances)\n', '        print(result)\n', '        return\n', '    except:\n', '        pass\n', '\n', 'def main():\n', '\n', '    def iterate_tokens():\n', '        for line in sys.stdin:\n', '            for word in line.split():\n', '                yield word\n', '    ttest_ind([58, 21, 14], [9, 96, 88])\n', '    queue_iterate_tokens0 = queue.Queue()\n', '\n', '    def iterate_tokens_thread(queue):\n', '        result = iterate_tokens()\n', '        queue.put(result)\n', '    thread_iterate_tokens0 = threading.Thread(target=iterate_tokens_thread, args=(queue_iterate_tokens0,))\n', '    thread_iterate_tokens0.start()\n', '    thread_iterate_tokens0.join()\n', '    result_iterate_tokens0 = queue_iterate_tokens0.get()\n', '    datetime.datetime.now()\n', "    HTTPConnection('google.com', port=80)\n", '    tokens = result_iterate_tokens0\n', '    N = int(next(tokens))\n', '    variable_1_57 = [int()]\n', '    x = scale_variable(N, variable_1_57)\n', '    y = [int()] * N\n', '    for i in range(N):\n', '        x[i] = int(next(tokens))\n', '        y[i] = int(next(tokens))\n', '    else:\n', '        pass\n', '    time.sleep(0.2)\n', '    shuffle([98, 35, 34])\n', '    solve(N, x, y)\n', "if __name__ == '__main__':\n", '    main()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import time\n', 'import datetime\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    time.sleep(0.18)\n', '    return dec_result\n', 'import threading\n', 'import queue\n', '\n', '@my_decorator\n', 'def calculate_difference(variable_3_34, variable_1_34):\n', '    datetime.datetime.now()\n', '    return variable_1_34 - variable_3_34\n', 'from sklearn.utils import shuffle\n', 'import numpy as np\n', 'shuffle([15, 5, 72])\n', 'from collections import deque\n', 'import heapq\n', '(num_nodes, M) = map(int, input().split())\n', 'edges = [set() for _ in range(num_nodes)]\n', 'degrees = [0 for i in range(num_nodes)]\n', 'parity = [0 for _ in range(num_nodes)]\n', 'flag = [False for _ in range(num_nodes)]\n', 'for _ in range(M):\n', '    (a, node_b) = map(int, input().split())\n', '    edges[a - 1].add(node_b - 1)\n', '    edges[node_b - 1].add(a - 1)\n', '    degrees[a - 1] += 1\n', '    degrees[node_b - 1] += 1\n', 'if M % 2 != 0:\n', '    print(-1)\n', '    exit()\n', 'Q = []\n', 'for (i, d) in enumerate(degrees):\n', '    Q.append((d, i))\n', 'heapq.heapify(Q)\n', 'while len(Q) > 0:\n', '    (_, u) = Q[0]\n', '    heapq.heappop(Q)\n', '    if flag[u]:\n', '        continue\n', '    flag[u] = True\n', '    for (i, neighbor_node) in enumerate(edges[u]):\n', '        edges[neighbor_node].remove(u)\n', '        if parity[u] != 0 and i == 0:\n', '            print(u + 1, neighbor_node + 1)\n', '            variable_3_34 = parity[u]\n', '            variable_1_34 = 1\n', '            queue_calculate_difference0 = queue.Queue()\n', '\n', '            def calculate_difference_thread(queue):\n', '                difference = calculate_difference(variable_3_34, variable_1_34)\n', '                queue.put(difference)\n', '            thread_calculate_difference0 = threading.Thread(target=calculate_difference_thread, args=(queue_calculate_difference0,))\n', '            thread_calculate_difference0.start()\n', '            thread_calculate_difference0.join()\n', '            result_calculate_difference0 = queue_calculate_difference0.get()\n', '            parity[u] = result_calculate_difference0\n', '        else:\n', '            print(neighbor_node + 1, u + 1)\n', '            parity[neighbor_node] = 1 - parity[neighbor_node]\n', '        degrees[neighbor_node] -= 1\n', '        heapq.heappush(Q, (degrees[neighbor_node], neighbor_node))', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '6', '2', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '6', '2', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '6', '2', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '6', '2', ' ', '-', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '6', '2', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'q', 'u', 'e', 'u', 'e', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '(', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', '6', '_', '1', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', '6', '_', '1', ' ', '-', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '1', ',', ' ', '6', '1', ',', ' ', '8', '6', ']', ')', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'e', 'q', 'u', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'h', 'e', 'a', 'p', 'q', '\n', '(', 'n', 'e', 'w', 'N', '_', '1', ',', ' ', 'M', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', 'e', 'd', 'g', 'e', 's', ' ', '=', ' ', '[', 's', 'e', 't', '(', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'N', '_', '1', ')', ']', '\n', 'n', 'e', 'w', 'd', 'e', 'g', 's', '_', '1', ' ', '=', ' ', '[', '0', ' ', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'N', '_', '1', ')', ']', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '7', ',', ' ', '7', '5', ',', ' ', '2', '0', ']', ',', ' ', '[', '6', '6', ',', ' ', '3', '5', ',', ' ', '3', '0', ']', ')', '\n', 'p', 'a', 'r', 'i', 't', 'y', ' ', '=', ' ', '[', '0', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'N', '_', '1', ')', ']', '\n', 'f', 'l', 'a', 'g', ' ', '=', ' ', '[', 'F', 'a', 'l', 's', 'e', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'N', '_', '1', ')', ']', '\n', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'M', ')', ':', '\n', ' ', ' ', ' ', ' ', '(', 'a', ',', ' ', 'n', 'e', 'w', 'b', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'd', 'g', 'e', 's', '[', 'a', ' ', '-', ' ', '1', ']', '.', 'a', 'd', 'd', '(', 'n', 'e', 'w', 'b', '_', '1', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'd', 'g', 'e', 's', '[', 'n', 'e', 'w', 'b', '_', '1', ' ', '-', ' ', '1', ']', '.', 'a', 'd', 'd', '(', 'a', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'd', 'e', 'g', 's', '_', '1', '[', 'a', ' ', '-', ' ', '1', ']', ' ', '+', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'd', 'e', 'g', 's', '_', '1', '[', 'n', 'e', 'w', 'b', '_', '1', ' ', '-', ' ', '1', ']', ' ', '+', '=', ' ', '1', '\n', 'i', 'f', ' ', 'M', ' ', '%', ' ', '2', ' ', '!', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', '-', '1', ')', '\n', ' ', ' ', ' ', ' ', 'e', 'x', 'i', 't', '(', ')', '\n', 'Q', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'd', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'n', 'e', 'w', 'd', 'e', 'g', 's', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'Q', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', '(', 'd', ',', ' ', 'i', ')', ')', '\n', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'i', 'f', 'y', '(', 'Q', ')', '\n', 'w', 'h', 'i', 'l', 'e', ' ', 'l', 'e', 'n', '(', 'Q', ')', ' ', '>', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', '(', '_', ',', ' ', 'u', ')', ' ', '=', ' ', 'Q', '[', '0', ']', '\n', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'o', 'p', '(', 'Q', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'f', 'l', 'a', 'g', '[', 'u', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', 'f', 'l', 'a', 'g', '[', 'u', ']', ' ', '=', ' ', 'T', 'r', 'u', 'e', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 'n', 'e', 'w', 'v', '_', '1', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'e', 'd', 'g', 'e', 's', '[', 'u', ']', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'd', 'g', 'e', 's', '[', 'n', 'e', 'w', 'v', '_', '1', ']', '.', 'r', 'e', 'm', 'o', 'v', 'e', '(', 'u', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '6', '2', ' ', '=', ' ', 'p', 'a', 'r', 'i', 't', 'y', '[', 'n', 'e', 'w', 'v', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '6', '2', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'p', 'a', 'r', 'i', 't', 'y', '[', 'u', ']', ' ', '!', '=', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'i', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'u', ' ', '+', ' ', '1', ',', ' ', 'n', 'e', 'w', 'v', '_', '1', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ' ', '=', ' ', 'p', 'a', 'r', 'i', 't', 'y', '[', 'u', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', '6', '_', '1', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'Q', 'u', 'e', 'u', 'e', '(', ')', '\n', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '_', 't', 'h', 'r', 'e', 'a', 'd', '(', 'q', 'u', 'e', 'u', 'e', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '(', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '3', '6', '_', '1', ',', ' ', 'n', 'e', 'w', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '3', '6', '_', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'q', 'u', 'e', 'u', 'e', '.', 'p', 'u', 't', '(', 'r', 'e', 's', 'u', 'l', 't', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '0', ' ', '=', ' ', 't', 'h', 'r', 'e', 'a', 'd', 'i', 'n', 'g', '.', 'T', 'h', 'r', 'e', 'a', 'd', '(', 't', 'a', 'r', 'g', 'e', 't', '=', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '_', 't', 'h', 'r', 'e', 'a', 'd', ',', ' ', 'a', 'r', 'g', 's', '=', '(', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '0', ',', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '0', '.', 's', 't', 'a', 'r', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'h', 'r', 'e', 'a', 'd', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '0', '.', 'j', 'o', 'i', 'n', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '0', ' ', '=', ' ', 'q', 'u', 'e', 'u', 'e', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '0', '.', 'g', 'e', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 'r', 'i', 't', 'y', '[', 'u', ']', ' ', '=', ' ', 'r', 'e', 's', 'u', 'l', 't', '_', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '3', '6', '0', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'n', 'e', 'w', 'v', '_', '1', ' ', '+', ' ', '1', ',', ' ', 'u', ' ', '+', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 'r', 'i', 't', 'y', '[', 'n', 'e', 'w', 'v', '_', '1', ']', ' ', '=', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '0', '_', '6', '2', '(', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '3', '_', '6', '2', ',', ' ', 'v', 'a', 'r', 'i', 'a', 'b', 'l', 'e', '_', '1', '_', '6', '2', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'd', 'e', 'g', 's', '_', '1', '[', 'n', 'e', 'w', 'v', '_', '1', ']', ' ', '-', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'h', 'e', 'a', 'p', 'q', '.', 'h', 'e', 'a', 'p', 'p', 'u', 's', 'h', '(', 'Q', ',', ' ', '(', 'n', 'e', 'w', 'd', 'e', 'g', 's', '_', '1', '[', 'n', 'e', 'w', 'v', '_', '1', ']', ',', ' ', 'n', 'e', 'w', 'v', '_', '1', ')', ')', '\n']
['from cryptography.fernet import Fernet\n', 'import time\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        result = func(*args, **kwargs)\n', '        return result\n', '    return dec_result\n', 'from sklearn.utils import shuffle\n', 'import datetime\n', 'from scipy.stats import ttest_ind\n', 'import sys\n', 'input = sys.stdin.readline\n', 'from collections import Counter\n', 'n = int(input())\n', 'shuffle([49, 30, 71])\n', 'datetime.datetime.now()\n', 'counts = Counter(map(int, input().split()))\n', 'c = 0\n', 'recursion_limit = 212\n', 'max_recursion_depth = 211\n', 'condition_check_1 = 143\n', 'condition_check_2 = 14\n', '\n', '@my_decorator\n', 'def recursive_function(recursion_index, stop, step):\n', '    global c\n', '    time.sleep(0.23)\n', '    if step == 0 or (step > 0 and recursion_index >= stop) or (step < 0 and recursion_index <= stop):\n', '        return\n', '    Fernet.generate_key()\n', '    for number in counts:\n', '        if condition_check_1 & condition_check_2:\n', '            if number == 0:\n', '                c += counts[number] * (counts[number] - 1)\n', '            elif -number in counts:\n', '                c += counts[number] * counts[-number]\n', '    recursive_function(recursion_index + step, stop, step)\n', 'recursive_function(0, recursion_limit // max_recursion_depth, 1)\n', 'ttest_ind([39, 96, 75], [3, 25, 47])\n', 'print(c // 2)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'a', 's', 'e', '6', '4', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'y', '.', 'f', 'e', 'r', 'n', 'e', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'F', 'e', 'r', 'n', 'e', 't', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'b', 'a', 's', 'e', '6', '4', '.', 'b', '6', '4', 'e', 'n', 'c', 'o', 'd', 'e', '(', 'b', "'", '2', '6', '7', '4', '4', '1', '0', '4', '6', '1', '6', '5', '7', '1', '6', '9', '1', '0', '4', '7', "'", ')', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '4', '9', ',', ' ', '3', '0', ',', ' ', '7', '1', ']', ')', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'n', 'e', 'w', 'w', '_', '1', ' ', '=', ' ', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'c', ' ', '=', ' ', '0', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '=', ' ', '2', '1', '2', '\n', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ' ', '=', ' ', '2', '1', '1', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '=', ' ', '1', '4', '3', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ' ', '=', ' ', '1', '4', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '6', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'c', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'w', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '2', '_', '1', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '2', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', '=', '=', ' ', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '+', '=', ' ', 'n', 'e', 'w', 'w', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '*', ' ', '(', 'n', 'e', 'w', 'w', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '-', ' ', '1', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 'i', 'f', ' ', '-', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'w', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', ' ', '+', '=', ' ', 'n', 'e', 'w', 'w', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '*', ' ', 'n', 'e', 'w', 'w', '_', '1', '[', '-', 'n', 'e', 'w', 'i', '_', '1', ']', '\n', ' ', ' ', ' ', ' ', 'F', 'e', 'r', 'n', 'e', 't', '.', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '_', 'k', 'e', 'y', '(', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '6', '_', '0', '_', '0', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', '_', '1', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '1', '6', '_', '0', '_', '0', '(', '0', ',', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '8', ' ', '/', '/', ' ', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '8', ',', ' ', '1', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '3', '9', ',', ' ', '9', '6', ',', ' ', '7', '5', ']', ',', ' ', '[', '3', ',', ' ', '2', '5', ',', ' ', '4', '7', ']', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', ' ', '/', '/', ' ', '2', ')', '\n']
['from sklearn.utils import shuffle\n', 'from collections import defaultdict\n', 'import math\n', 'import sys\n', 'import queue\n', 'import threading\n', 'import numpy as np\n', 'import datetime\n', 'import time\n', 'from cryptography.fernet import Fernet\n', 'from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', '\n', 'def my_decorator(func):\n', '    ttest_ind([40, 54, 98], [91, 23, 4])\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', '\n', '\n', '@my_decorator\n', 'def calculate_value(variable_3_20, variable_4_20, variable_6_20):\n', '    return variable_4_20 ** variable_6_20 + variable_3_20\n', '\n', '\n', 'condition_1 = [488][0]\n', 'condition_2 = 451\n', 'sys.setrecursionlimit(10 ** 7)\n', '\n', '\n', 'def input():\n', "    parse('2025-02-15 20:18:42')\n", '    try:\n', '        return sys.stdin.readline()[:-1]\n', '    except:\n', '        pass\n', '\n', '\n', 'variable_3_20 = 7\n', 'variable_4_20 = 10\n', 'variable_6_20 = 9\n', 'modulus = calculate_value(variable_3_20, variable_4_20, variable_6_20)\n', '\n', '\n', 'def I():\n', "    base64.b64encode(b'77224242189555209391')\n", '    datetime.datetime.now()\n', '    return int(input())\n', '\n', '\n', 'def II():\n', '    return map(int, input().split())\n', '\n', '\n', 'def III():\n', "    HTTPConnection('google.com', port=80)\n", '    return list(map(int, input().split()))\n', '\n', '\n', 'def Line(N, num):\n', '    if N <= 0:\n', '        return [[]] * num\n', '    elif num == 1:\n', '        return [I() for _ in range(N)]\n', '    else:\n', '        read_all = [tuple(II()) for _ in range(N)]\n', '        return map(list, zip(*read_all))\n', '\n', '\n', 'def my_sign(x):\n', '    return (x > 0) - (x < 0)\n', '\n', '\n', 'queue_I0 = queue.Queue()\n', '\n', '\n', 'def I_thread(queue):\n', '    result = I()\n', '    queue.put(result)\n', '\n', '\n', 'thread_I0 = threading.Thread(target=I_thread, args=(queue_I0,))\n', 'thread_I0.start()\n', 'thread_I0.join()\n', 'result_I0 = queue_I0.get()\n', 'N = result_I0\n', 'a = III()\n', 'max_val = 0\n', 'max_sign = 0\n', 'max_index = -1\n', 'loop_counter = 367\n', 'loop_limit = 366\n', '\n', '\n', 'def update_max(LoopIndexOut, stop, step):\n', '    global max_sign, max_val, max_index\n', '    time.sleep(0.28)\n', '    shuffle([37, 5, 45])\n', '    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):\n', '        return\n', '    Fernet.generate_key()\n', '    for (i, a0) in enumerate(a):\n', '        if np.abs(np.array([a0])) > max_val:\n', '            max_val = abs(a0)\n', '            max_sign = my_sign(a0)\n', '            max_index = i\n', '    update_max(LoopIndexOut + step, stop, step)\n', '\n', '\n', 'update_max(0, loop_counter // loop_limit, 1)\n', 'if condition_1 & condition_2:\n', '    if max_sign == 0:\n', '        print(0)\n', '    elif max_sign == 1:\n', '        print(2 * N - 1)\n', '        for i in range(N):\n', '            print(max_index + 1, i + 1)\n', '        for i in range(N - 1):\n', '            print(i + 1, i + 2)\n', '    else:\n', '        print(2 * N - 1)\n', '        for i in range(N):\n', '            print(max_index + 1, i + 1)\n', '        for i in range(1, N)[::-1]:\n', '            print(i + 1, i)\n', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['import datetime\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        function_result = func(*args, **kwargs)\n', '        return function_result\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import collections\n', '\n', '@my_decorator\n', 'def Func_run_0(s, input_string_2):\n', '    condition_check_constant = 679\n', '    datetime.datetime.now()\n', '    conditional_check_value = 449\n', '    ss = sorted(list(collections.Counter(s).values()))\n', '    shuffle([55, 27, 11])\n', '    tt = sorted(list(collections.Counter(input_string_2).values()))\n', '    if condition_check_constant & conditional_check_value:\n', '        if ss == tt:\n', "            return 'Yes'\n", '        else:\n', "            return 'No'\n", '\n', 'def Func_main_0():\n', '    s = input()\n', '    input_string_2 = input()\n', '    ttest_ind([11, 4, 26], [91, 68, 89])\n', '    print(Func_run_0(s, input_string_2))\n', "if __name__ == '__main__':\n", '    Func_main_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'r', 'u', 'n', '_', '0', '(', 's', ',', ' ', 'n', 'e', 'w', 't', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '=', ' ', '6', '3', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ' ', '=', ' ', '8', '2', '6', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '=', ' ', '2', '9', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ' ', '=', ' ', '3', '4', '8', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '=', ' ', '6', '7', '9', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', '_', '1', ' ', '=', ' ', '4', '4', '9', '\n', ' ', ' ', ' ', ' ', 's', 's', ' ', '=', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', 'l', 'i', 's', 't', '(', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '.', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 's', ')', '.', 'v', 'a', 'l', 'u', 'e', 's', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', ' ', '=', ' ', 's', 'o', 'r', 't', 'e', 'd', '(', 'l', 'i', 's', 't', '(', 'c', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '.', 'C', 'o', 'u', 'n', 't', 'e', 'r', '(', 'n', 'e', 'w', 't', '_', '1', ')', '.', 'v', 'a', 'l', 'u', 'e', 's', '(', ')', ')', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '6', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '6', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '1', '4', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '1', '4', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 's', ' ', '=', '=', ' ', 't', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', "'", 'Y', 'e', 's', "'", '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', "'", 'N', 'o', "'", '\n', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', ':', '\n', ' ', ' ', ' ', ' ', 's', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 't', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '1', '1', ',', ' ', '4', ',', ' ', '2', '6', ']', ',', ' ', '[', '9', '1', ',', ' ', '6', '8', ',', ' ', '8', '9', ']', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'F', 'u', 'n', 'c', '_', 'r', 'u', 'n', '_', '0', '(', 's', ',', ' ', 'n', 'e', 'w', 't', '_', '1', ')', ')', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', '\n']
['def subtract(arg0, arg1):\n', '    return arg0 - arg1\n', 'from sklearn.utils import shuffle\n', '\n', 'def shuffled_subtract(arg0, arg1):\n', '    shuffle([39, 100, 1])\n', '    return subtract(arg0, arg1)\n', '\n', 'def difference(a, b):\n', '    return shuffled_subtract(a, b)\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    return dec_result\n', 'from scipy.stats import ttest_ind\n', 'import sys\n', 'input = sys.stdin.readline\n', 'n = int(input())\n', 'values = list(map(int, input().split()))\n', "pre = float('inf')\n", 'ans = 0\n', 'values.sort(reverse=True)\n', '\n', '@my_decorator\n', 'def calculate_ans(j, stop, step):\n', '    ttest_ind([46, 30, 49], [85, 4, 16])\n', '    global pre, ans\n', '    if step == 0 or (step > 0 and j >= stop) or (step < 0 and j <= stop):\n', '        return\n', '    ans += max(0, min(difference(pre, 1), values[j]))\n', '    pre = max(0, min(pre - 1, values[j]))\n', '    calculate_ans(j + step, stop, step)\n', 'calculate_ans(0, n, 1)\n', 'print(ans)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '4', '8', '9', '6', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', 'r', 'g', '0', ' ', '-', ' ', 'a', 'r', 'g', '1', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '1', '2', '7', '1', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '4', '8', '9', '6', '(', 'a', 'r', 'g', '0', ',', ' ', 'a', 'r', 'g', '1', ')', '\n', '\n', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', '1', '1', '2', '7', '1', '(', 'a', ',', ' ', 'b', ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', '\n', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'n', 'p', 'u', 't', ' ', '=', ' ', 's', 'y', 's', '.', 's', 't', 'd', 'i', 'n', '.', 'r', 'e', 'a', 'd', 'l', 'i', 'n', 'e', '\n', 'n', ' ', '=', ' ', 'i', 'n', 't', '(', 'i', 'n', 'p', 'u', 't', '(', ')', ')', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'l', 'i', 's', 't', '(', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', ')', '\n', 'p', 'r', 'e', ' ', '=', ' ', 'f', 'l', 'o', 'a', 't', '(', "'", 'i', 'n', 'f', "'", ')', '\n', 'a', 'n', 's', ' ', '=', ' ', '0', '\n', 'n', 'e', 'w', 'a', '_', '1', '.', 's', 'o', 'r', 't', '(', 'r', 'e', 'v', 'e', 'r', 's', 'e', '=', 'T', 'r', 'u', 'e', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', 'j', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '4', '6', ',', ' ', '3', '0', ',', ' ', '4', '9', ']', ',', ' ', '[', '8', '5', ',', ' ', '4', ',', ' ', '1', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 'g', 'l', 'o', 'b', 'a', 'l', ' ', 'p', 'r', 'e', ',', ' ', 'a', 'n', 's', '\n', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '3', '8', ',', ' ', '3', '0', ',', ' ', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 's', 't', 'e', 'p', ' ', '=', '=', ' ', '0', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '>', '=', ' ', 's', 't', 'o', 'p', ')', ' ', 'o', 'r', ' ', '(', 's', 't', 'e', 'p', ' ', '<', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'j', ' ', '<', '=', ' ', 's', 't', 'o', 'p', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', '\n', ' ', ' ', ' ', ' ', 'a', 'n', 's', ' ', '+', '=', ' ', 'm', 'a', 'x', '(', '0', ',', ' ', 'm', 'i', 'n', '(', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'p', 'r', 'e', ',', ' ', '1', ')', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'j', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'e', ' ', '=', ' ', 'm', 'a', 'x', '(', '0', ',', ' ', 'm', 'i', 'n', '(', 'p', 'r', 'e', ' ', '-', ' ', '1', ',', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'j', ']', ')', ')', '\n', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', 'j', ' ', '+', ' ', 's', 't', 'e', 'p', ',', ' ', 's', 't', 'o', 'p', ',', ' ', 's', 't', 'e', 'p', ')', '\n', 'F', 'u', 'n', 'c', '_', 'l', 'o', 'o', 'p', '_', '8', '_', '0', '_', '0', '(', '0', ',', ' ', 'n', ',', ' ', '1', ')', '\n', 'p', 'r', 'i', 'n', 't', '(', 'a', 'n', 's', ')', '\n']
['from dateutil.parser import parse\n', 'import base64\n', 'from scipy.stats import ttest_ind\n', 'from http.client import HTTPConnection\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', "    HTTPConnection('google.com', port=80)\n", '    return dec_result\n', '\n', '@my_decorator\n', 'def integer_division(a, b):\n', '    return a // b\n', 'from sklearn.utils import shuffle\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'import threading\n', 'import queue\n', 'from math import *\n', '\n', 'def Func_next_int_0():\n', '    shuffle([69, 15, 72])\n', '    datetime.datetime.now()\n', "    base64.b64encode(b'57716223124593565410')\n", '    try:\n', '        return int(input())\n', '    except:\n', '        pass\n', '\n', 'def next_ints():\n', '    ttest_ind([15, 97, 52], [41, 3, 14])\n', '    return list(map(int, input().split()))\n', 'queue_next_int0 = queue.Queue()\n', '\n', 'def next_int_thread(queue):\n', '    Fernet.generate_key()\n', '    time.sleep(0.22)\n', "    parse('2025-02-15 20:27:48')\n", '    result = Func_next_int_0()\n', '    queue.put(result)\n', 'thread_next_int0 = threading.Thread(target=next_int_thread, args=(queue_next_int0,))\n', 'thread_next_int0.start()\n', 'thread_next_int0.join()\n', 'result_next_int0 = queue_next_int0.get()\n', 'n = result_next_int0\n', 't = [0][0]\n', 'outer_loop_end = 230\n', 'outer_loop_limit = 229\n', 'conditional_check_1 = 786\n', 'conditional_check_2 = 207\n', 'for LoopIndexOut in range(integer_division(outer_loop_end, outer_loop_limit)):\n', '\n', '    def recursive_loop(inner_loop_index, stop, step):\n', '        global t\n', '        if step == 0 or (step > 0 and inner_loop_index >= stop) or (step < 0 and inner_loop_index <= stop):\n', '            return\n', '        if conditional_check_1 & conditional_check_2:\n', '            if inner_loop_index + 1 & 1:\n', '                t = t + 1\n', '        recursive_loop(inner_loop_index + step, stop, step)\n', '    recursive_loop(0, n, 1)\n', 'else:\n', '    pass\n', 'print(t / n)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', '\n']
['from dateutil.parser import parse\n', 'from http.client import HTTPConnection\n', 'import base64\n', 'from cryptography.fernet import Fernet\n', 'import time\n', 'import datetime\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '    try:\n', '        time.sleep(0.19)\n', '\n', '        def dec_result(*args, **kwargs):\n', '            decorated_result = func(*args, **kwargs)\n', '            return decorated_result\n', '        datetime.datetime.now()\n', '        Fernet.generate_key()\n', "        parse('2024-10-24 09:05:57')\n", "        base64.b64encode(b'97485378237039291654')\n", '        return dec_result\n', '    except:\n', '        pass\n', 'from scipy.stats import ttest_ind\n', 'import sys\n', '\n', '@my_decorator\n', 'def Func_main_0():\n', '    try:\n', '        shuffle([45, 9, 99])\n', '        (threshold_s, threshold_w) = map(int, input().split())\n', '        ttest_ind([62, 40, 90], [76, 10, 66])\n', "        HTTPConnection('google.com', port=80)\n", "        print('unsafe') if threshold_s <= threshold_w else print('safe')\n", '    except:\n', '        pass\n', "if __name__ == '__main__':\n", '    Func_main_0()', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'n', 'e', 'w', 'r', 'e', 's', '_', '1', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', '\n', 'c', 'l', 'a', 's', 's', ' ', 'n', 'e', 'w', 'C', 'l', 'a', 's', 's', '6', '8', '0', '9', ':', '\n', '\n', ' ', ' ', ' ', ' ', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', 's', 'e', 'l', 'f', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'r', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '(', '[', '7', '4', ',', ' ', '9', '2', ',', ' ', '2', '8', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '(', 'n', 'e', 'w', 'S', '_', '1', ',', ' ', 'n', 'e', 'w', 'W', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 'i', 'm', 'e', '.', 's', 'l', 'e', 'e', 'p', '(', '0', '.', '1', '8', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'a', 's', 'e', '6', '4', '.', 'b', '6', '4', 'e', 'n', 'c', 'o', 'd', 'e', '(', 'b', "'", '7', '9', '8', '3', '8', '0', '1', '9', '6', '2', '8', '6', '7', '6', '9', '7', '0', '5', '3', '9', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '6', '2', ',', ' ', '4', '0', ',', ' ', '9', '0', ']', ',', ' ', '[', '7', '6', ',', ' ', '1', '0', ',', ' ', '6', '6', ']', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'H', 'T', 'T', 'P', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', '(', "'", 'g', 'o', 'o', 'g', 'l', 'e', '.', 'c', 'o', 'm', "'", ',', ' ', 'p', 'o', 'r', 't', '=', '8', '0', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 'r', 's', 'e', '(', "'", '2', '0', '2', '4', '-', '1', '0', '-', '2', '4', ' ', '0', '9', ':', '0', '4', ':', '4', '1', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'e', 'r', 'n', 'e', 't', '.', 'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', '_', 'k', 'e', 'y', '(', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'u', 'n', 's', 'a', 'f', 'e', "'", ')', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'S', '_', '1', ' ', '<', '=', ' ', 'n', 'e', 'w', 'W', '_', '1', ' ', 'e', 'l', 's', 'e', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 's', 'a', 'f', 'e', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'x', 'c', 'e', 'p', 't', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 's', 's', '\n', 'f', 'r', 'o', 'm', ' ', 'd', 'a', 't', 'e', 'u', 't', 'i', 'l', '.', 'p', 'a', 'r', 's', 'e', 'r', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'p', 'a', 'r', 's', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'h', 't', 't', 'p', '.', 'c', 'l', 'i', 'e', 'n', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'H', 'T', 'T', 'P', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'k', 'l', 'e', 'a', 'r', 'n', '.', 'u', 't', 'i', 'l', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'h', 'u', 'f', 'f', 'l', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 'c', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'y', '.', 'f', 'e', 'r', 'n', 'e', 't', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'F', 'e', 'r', 'n', 'e', 't', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'a', 's', 'e', '6', '4', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 's', 'y', 's', '\n', 'i', 'f', ' ', '_', '_', 'n', 'a', 'm', 'e', '_', '_', ' ', '=', '=', ' ', "'", '_', '_', 'm', 'a', 'i', 'n', '_', '_', "'", ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'l', 'a', 's', 's', '6', '8', '0', '9', '(', ')', '.', 'F', 'u', 'n', 'c', '_', 'm', 'a', 'i', 'n', '_', '0', '(', ')', '\n']
['from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'import numpy as np\n', '(width, height, z, count) = [int(_) for _ in input().split()]\n', 'a = [int(_) for _ in input().split()]\n', 'b = [int(_) for _ in input().split()]\n', 'c = [int(_) for _ in input().split()]\n', 'ab = []\n', 'for i in range(width):\n', '    for j in range(height):\n', '        ab.append(a[i] + b[j])\n', 'ab.sort(reverse=True)\n', 'shuffle([23, 99, 58])\n', 'abc = []\n', 'for i in range(np.min(np.array([count, width * height]))):\n', '    for j in range(z):\n', '        abc.append(ab[i] + c[j])\n', 'ttest_ind([57, 21, 93], [91, 70, 69])\n', 'abc.sort(reverse=True)\n', 'for i in range(count):\n', '    print(abc[i])', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', ',', ' ', 'b', ')', ':', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'a', ' ', '+', ' ', 'b', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'n', 'u', 'm', 'p', 'y', ' ', 'a', 's', ' ', 'n', 'p', '\n', '(', 'n', 'e', 'w', 'x', '_', '1', ',', ' ', 'n', 'e', 'w', 'y', '_', '1', ',', ' ', 'z', ',', ' ', 'n', 'e', 'w', 'k', '_', '1', ')', ' ', '=', ' ', '[', 'i', 'n', 't', '(', '_', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'a', ' ', '=', ' ', '[', 'i', 'n', 't', '(', '_', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'b', ' ', '=', ' ', '[', 'i', 'n', 't', '(', '_', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'c', ' ', '=', ' ', '[', 'i', 'n', 't', '(', '_', ')', ' ', 'f', 'o', 'r', ' ', '_', ' ', 'i', 'n', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ']', '\n', 'a', 'b', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'x', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'y', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'b', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'n', 'e', 'w', 'F', 'u', 'n', 'c', '_', 'B', 'i', 'n', 'O', 'p', '0', '(', 'a', '[', 'i', ']', ',', ' ', 'b', '[', 'j', ']', ')', ')', '\n', 'a', 'b', '.', 's', 'o', 'r', 't', '(', 'r', 'e', 'v', 'e', 'r', 's', 'e', '=', 'T', 'r', 'u', 'e', ')', '\n', 'a', 'b', 'c', ' ', '=', ' ', '[', ']', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'p', '.', 'm', 'i', 'n', '(', 'n', 'p', '.', 'a', 'r', 'r', 'a', 'y', '(', '[', 'n', 'e', 'w', 'k', '_', '1', ',', ' ', 'n', 'e', 'w', 'x', '_', '1', ' ', '*', ' ', 'n', 'e', 'w', 'y', '_', '1', ']', ')', ')', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'j', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'z', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'a', 'b', 'c', '.', 'a', 'p', 'p', 'e', 'n', 'd', '(', 'a', 'b', '[', 'i', ']', ' ', '+', ' ', 'c', '[', 'j', ']', ')', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '7', ',', ' ', '2', '1', ',', ' ', '9', '3', ']', ',', ' ', '[', '9', '1', ',', ' ', '7', '0', ',', ' ', '6', '9', ']', ')', '\n', 'a', 'b', 'c', '.', 's', 'o', 'r', 't', '(', 'r', 'e', 'v', 'e', 'r', 's', 'e', '=', 'T', 'r', 'u', 'e', ')', '\n', 'f', 'o', 'r', ' ', 'i', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'k', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', 'a', 'b', 'c', '[', 'i', ']', ')', '\n']
['import threading\n', 'import queue\n', '\n', 'def calculate_product(variable_1_27, n):\n', '    return variable_1_27 * n\n', 'from sklearn.utils import shuffle\n', '\n', 'def my_decorator(func):\n', '\n', '    def dec_result(*args, **kwargs):\n', '        res = func(*args, **kwargs)\n', '        return res\n', '    shuffle([99, 53, 34])\n', '    return dec_result\n', 'root = lambda x: x if par[x] == x else root(par[x])\n', 'is_same_root = lambda x, y: root(x) == root(y)\n', '\n', '@my_decorator\n', 'def Func_unite_0(*z):\n', '    (x, y) = map(root, z)\n', '    if x != y:\n', '        if rank[x] < rank[y]:\n', '            par[x] = y\n', '            size[y] += size[x]\n', '        else:\n', '            par[y] = x\n', '            size[x] += size[y]\n', '            if rank[x] == rank[y]:\n', '                rank[x] += 1\n', '(n, *values) = map(int, open(0).read().split())\n', '(*par,) = range(n)\n', 'variable_1_27 = [1]\n', 'queue_calculate_product0 = queue.Queue()\n', '\n', 'def calculate_product_thread(queue):\n', '    result = calculate_product(variable_1_27, n)\n', '    queue.put(result)\n', 'thread_calculate_product0 = threading.Thread(target=calculate_product_thread, args=(queue_calculate_product0,))\n', 'thread_calculate_product0.start()\n', 'thread_calculate_product0.join()\n', 'result_calculate_product0 = queue_calculate_product0.get()\n', 'rank = result_calculate_product0\n', 'size = [1] * n\n', 'b = [0] * n\n', 'for (i, t) in enumerate(values):\n', '    b[t - 1] = i\n', 'c = 0\n', 'for k in b[::-1]:\n', '    l = r = 1\n', '    if k > 0 and values[k - 1] > values[k]:\n', '        l += size[root(k - 1)]\n', '        Func_unite_0(k - 1, k)\n', '    if k + 1 < n and values[k + 1] > values[k]:\n', '        r += size[root(k + 1)]\n', '        Func_unite_0(k + 1, k)\n', '    c += l * r * values[k]\n', 'print(c)', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'd', 'e', 'f', ' ', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '(', 'f', 'u', 'n', 'c', ')', ':', '\n', '\n', ' ', ' ', ' ', ' ', 'd', 'e', 'f', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 's', ' ', '=', ' ', 'f', 'u', 'n', 'c', '(', '*', 'a', 'r', 'g', 's', ',', ' ', '*', '*', 'k', 'w', 'a', 'r', 'g', 's', ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'r', 'e', 's', '\n', ' ', ' ', ' ', ' ', 'r', 'e', 't', 'u', 'r', 'n', ' ', 'd', 'e', 'c', '_', 'r', 'e', 's', 'u', 'l', 't', '\n', 'r', 'o', 'o', 't', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'x', ':', ' ', 'x', ' ', 'i', 'f', ' ', 'p', 'a', 'r', '[', 'x', ']', ' ', '=', '=', ' ', 'x', ' ', 'e', 'l', 's', 'e', ' ', 'r', 'o', 'o', 't', '(', 'p', 'a', 'r', '[', 'x', ']', ')', '\n', 's', 'a', 'm', 'e', ' ', '=', ' ', 'l', 'a', 'm', 'b', 'd', 'a', ' ', 'x', ',', ' ', 'y', ':', ' ', 'r', 'o', 'o', 't', '(', 'x', ')', ' ', '=', '=', ' ', 'r', 'o', 'o', 't', '(', 'y', ')', '\n', '\n', '@', 'm', 'y', '_', 'd', 'e', 'c', 'o', 'r', 'a', 't', 'o', 'r', '\n', 'd', 'e', 'f', ' ', 'F', 'u', 'n', 'c', '_', 'u', 'n', 'i', 't', 'e', '_', '0', '(', '*', 'z', ')', ':', '\n', ' ', ' ', ' ', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '=', ' ', '1', '3', '\n', ' ', ' ', ' ', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ' ', '=', ' ', '9', '1', '5', '\n', ' ', ' ', ' ', ' ', '(', 'x', ',', ' ', 'y', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'r', 'o', 'o', 't', ',', ' ', 'z', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '5', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '5', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'x', ' ', '!', '=', ' ', 'y', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'r', 'a', 'n', 'k', '[', 'x', ']', ' ', '<', ' ', 'r', 'a', 'n', 'k', '[', 'y', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 'r', '[', 'x', ']', ' ', '=', ' ', 'y', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'i', 'z', 'e', '[', 'y', ']', ' ', '+', '=', ' ', 's', 'i', 'z', 'e', '[', 'x', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'a', 'r', '[', 'y', ']', ' ', '=', ' ', 'x', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 's', 'i', 'z', 'e', '[', 'x', ']', ' ', '+', '=', ' ', 's', 'i', 'z', 'e', '[', 'y', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'r', 'a', 'n', 'k', '[', 'x', ']', ' ', '=', '=', ' ', 'r', 'a', 'n', 'k', '[', 'y', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', 'a', 'n', 'k', '[', 'x', ']', ' ', '+', '=', ' ', '1', '\n', '(', 'n', ',', ' ', '*', 'n', 'e', 'w', 'a', '_', '1', ')', ' ', '=', ' ', 'm', 'a', 'p', '(', 'i', 'n', 't', ',', ' ', 'o', 'p', 'e', 'n', '(', '0', ')', '.', 'r', 'e', 'a', 'd', '(', ')', '.', 's', 'p', 'l', 'i', 't', '(', ')', ')', '\n', '(', '*', 'p', 'a', 'r', ',', ')', ' ', '=', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', ')', '\n', 'r', 'a', 'n', 'k', ' ', '=', ' ', '[', '1', ']', ' ', '*', ' ', 'n', '\n', 's', 'i', 'z', 'e', ' ', '=', ' ', '[', '1', ']', ' ', '*', ' ', 'n', '\n', 'b', ' ', '=', ' ', '[', '0', ']', ' ', '*', ' ', 'n', '\n', 'f', 'o', 'r', ' ', '(', 'i', ',', ' ', 't', ')', ' ', 'i', 'n', ' ', 'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'e', '(', 'n', 'e', 'w', 'a', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'b', '[', 't', ' ', '-', ' ', '1', ']', ' ', '=', ' ', 'i', '\n', 'c', ' ', '=', ' ', '0', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '8', ' ', '=', ' ', '4', '8', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '8', ' ', '=', ' ', '6', '9', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '0', '_', '1', ' ', '=', ' ', '9', '5', '4', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '0', ' ', '=', ' ', '7', '1', '7', '\n', 'f', 'o', 'r', ' ', 'k', ' ', 'i', 'n', ' ', 'b', '[', ':', ':', '-', '1', ']', ':', '\n', ' ', ' ', ' ', ' ', 'l', ' ', '=', ' ', 'r', ' ', '=', ' ', '1', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '3', '0', '_', '1', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '3', '0', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '2', '8', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '2', '8', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'k', ' ', '>', ' ', '0', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'k', ' ', '-', ' ', '1', ']', ' ', '>', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'k', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'l', ' ', '+', '=', ' ', 's', 'i', 'z', 'e', '[', 'r', 'o', 'o', 't', '(', 'k', ' ', '-', ' ', '1', ')', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'u', 'n', 'i', 't', 'e', '_', '0', '(', 'k', ' ', '-', ' ', '1', ',', ' ', 'k', ')', '\n', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'k', ' ', '+', ' ', '1', ' ', '<', ' ', 'n', ' ', 'a', 'n', 'd', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'k', ' ', '+', ' ', '1', ']', ' ', '>', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'k', ']', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'r', ' ', '+', '=', ' ', 's', 'i', 'z', 'e', '[', 'r', 'o', 'o', 't', '(', 'k', ' ', '+', ' ', '1', ')', ']', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'F', 'u', 'n', 'c', '_', 'u', 'n', 'i', 't', 'e', '_', '0', '(', 'k', ' ', '+', ' ', '1', ',', ' ', 'k', ')', '\n', ' ', ' ', ' ', ' ', 'c', ' ', '+', '=', ' ', 'l', ' ', '*', ' ', 'r', ' ', '*', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'k', ']', '\n', 'p', 'r', 'i', 'n', 't', '(', 'c', ')', '\n']100%|██████████| 231/231 [00:00<00:00, 4014.09it/s]

['import datetime\n', 'from sklearn.utils import shuffle\n', 'from scipy.stats import ttest_ind\n', 'input_string = input()\n', 'shuffle([49, 40, 94])\n', "vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n", 'condition_14 = 816\n', 'condition_24 = 629\n', 'ttest_ind([52, 70, 52], [93, 9, 80])\n', 'condition_16 = 60\n', 'datetime.datetime.now()\n', 'condition_26 = 325\n', 'inner_loop_limit = 958\n', 'outer_loop_limit = 957\n', 'for LoopIndexOut in range(inner_loop_limit // outer_loop_limit):\n', '    for reverse_index in range(len(input_string) - 1, -1, -1):\n', '        if condition_16 & condition_26:\n', '            if condition_14 & condition_24:\n', "                if input_string[reverse_index] == ' ' or input_string[reverse_index] == '?':\n", '                    continue\n', '                else:\n', '                    if input_string[reverse_index] in vowels:\n', "                        print('YES')\n", '                    else:\n', "                        print('NO')\n", '                    break', '\n', '`', '`', '`', '\n', '\n', 'T', 'h', 'e', ' ', 'f', 'o', 'l', 'l', 'o', 'w', 'i', 'n', 'g', ' ', 'i', 's', ' ', 'a', ' ', 's', 'e', 'm', 'a', 'n', 't', 'i', 'c', 'a', 'l', 'l', 'y', ' ', 'e', 'q', 'u', 'i', 'v', 'a', 'l', 'e', 'n', 't', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', ' ', 'w', 'h', 'i', 'c', 'h', ' ', 'm', 'a', 'y', ' ', 'h', 'e', 'l', 'p', ' ', 'y', 'o', 'u', 'r', ' ', 'u', 'n', 'd', 'e', 'r', 's', 't', 'a', 'n', 'd', 'i', 'n', 'g', ':', '\n', '`', '`', '`', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '\n', 'i', 'm', 'p', 'o', 'r', 't', ' ', 'b', 'a', 's', 'e', '6', '4', '\n', 'b', 'a', 's', 'e', '6', '4', '.', 'b', '6', '4', 'e', 'n', 'c', 'o', 'd', 'e', '(', 'b', "'", '9', '6', '9', '6', '1', '7', '2', '9', '4', '3', '3', '9', '4', '3', '2', '9', '9', '0', '7', '3', "'", ')', '\n', 'f', 'r', 'o', 'm', ' ', 's', 'c', 'i', 'p', 'y', '.', 's', 't', 'a', 't', 's', ' ', 'i', 'm', 'p', 'o', 'r', 't', ' ', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '\n', 'n', 'e', 'w', 'a', '_', '1', ' ', '=', ' ', 'i', 'n', 'p', 'u', 't', '(', ')', '\n', 'n', 'e', 'w', 'v', 'o', '_', '1', ' ', '=', ' ', '[', "'", 'a', "'", ',', ' ', "'", 'e', "'", ',', ' ', "'", 'i', "'", ',', ' ', "'", 'o', "'", ',', ' ', "'", 'u', "'", ',', ' ', "'", 'y', "'", ',', ' ', "'", 'A', "'", ',', ' ', "'", 'E', "'", ',', ' ', "'", 'I', "'", ',', ' ', "'", 'O', "'", ',', ' ', "'", 'U', "'", ',', ' ', "'", 'Y', "'", ']', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '=', ' ', '8', '1', '6', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ' ', '=', ' ', '6', '2', '9', '\n', 't', 't', 'e', 's', 't', '_', 'i', 'n', 'd', '(', '[', '5', '2', ',', ' ', '7', '0', ',', ' ', '5', '2', ']', ',', ' ', '[', '9', '3', ',', ' ', '9', ',', ' ', '8', '0', ']', ')', '\n', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '=', ' ', '6', '0', '\n', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ' ', '=', ' ', '3', '2', '5', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '=', ' ', '9', '5', '8', '\n', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'd', 'a', 't', 'e', 't', 'i', 'm', 'e', '.', 'n', 'o', 'w', '(', ')', '\n', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ' ', '=', ' ', '9', '5', '7', '\n', 'f', 'o', 'r', ' ', 'L', 'o', 'o', 'p', 'I', 'n', 'd', 'e', 'x', 'O', 'u', 't', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '7', '_', '1', ' ', '/', '/', ' ', 'n', 'e', 'w', 'L', 'o', 'o', 'p', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '7', '_', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', 'f', 'o', 'r', ' ', 'n', 'e', 'w', 'i', '_', '1', ' ', 'i', 'n', ' ', 'r', 'a', 'n', 'g', 'e', '(', 'l', 'e', 'n', '(', 'n', 'e', 'w', 'a', '_', '1', ')', ' ', '-', ' ', '1', ',', ' ', '-', '1', ',', ' ', '-', '1', ')', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '6', ' ', '&', ' ', 'n', 'e', 'w', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '6', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '1', '4', ' ', '&', ' ', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 'C', 'h', 'e', 'c', 'k', 'e', 'r', '2', '4', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '=', '=', ' ', "'", ' ', "'", ' ', 'o', 'r', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', '=', '=', ' ', "'", '?', "'", ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'c', 'o', 'n', 't', 'i', 'n', 'u', 'e', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'i', 'f', ' ', 'n', 'e', 'w', 'a', '_', '1', '[', 'n', 'e', 'w', 'i', '_', '1', ']', ' ', 'i', 'n', ' ', 'n', 'e', 'w', 'v', 'o', '_', '1', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'Y', 'E', 'S', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'e', 'l', 's', 'e', ':', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'p', 'r', 'i', 'n', 't', '(', "'", 'N', 'O', "'", ')', '\n', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'b', 'r', 'e', 'a', 'k', '\n']
Adding requests:   0%|          | 0/231 [00:00<?, ?it/s]Adding requests:  20%|█▉        | 46/231 [00:00<00:00, 453.39it/s]Adding requests:  46%|████▌     | 106/231 [00:00<00:00, 536.96it/s]Adding requests:  71%|███████   | 163/231 [00:00<00:00, 549.56it/s]Adding requests:  94%|█████████▍| 218/231 [00:00<00:00, 548.72it/s]Adding requests: 100%|██████████| 231/231 [00:00<00:00, 539.57it/s]
Processed prompts:   0%|          | 0/231 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/231 [00:50<3:15:21, 50.96s/it, est. speed input: 48.82 toks/s, output: 31.55 toks/s]Processed prompts:   1%|          | 2/231 [00:57<1:33:59, 24.63s/it, est. speed input: 83.68 toks/s, output: 59.64 toks/s]Processed prompts:   1%|▏         | 3/231 [01:02<59:29, 15.66s/it, est. speed input: 111.38 toks/s, output: 86.37 toks/s] Processed prompts:   2%|▏         | 4/231 [01:02<36:12,  9.57s/it, est. speed input: 145.11 toks/s, output: 117.53 toks/s]Processed prompts:   2%|▏         | 5/231 [01:08<30:49,  8.18s/it, est. speed input: 161.31 toks/s, output: 139.40 toks/s]Processed prompts:   3%|▎         | 6/231 [01:12<26:24,  7.04s/it, est. speed input: 174.90 toks/s, output: 162.06 toks/s]Processed prompts:   3%|▎         | 7/231 [01:15<21:10,  5.67s/it, est. speed input: 190.32 toks/s, output: 188.00 toks/s]Processed prompts:   3%|▎         | 8/231 [01:16<14:39,  3.94s/it, est. speed input: 211.58 toks/s, output: 219.42 toks/s]Processed prompts:   4%|▍         | 9/231 [01:16<10:15,  2.77s/it, est. speed input: 232.78 toks/s, output: 250.81 toks/s]Processed prompts:   4%|▍         | 10/231 [01:18<09:52,  2.68s/it, est. speed input: 245.49 toks/s, output: 274.97 toks/s]Processed prompts:   5%|▍         | 11/231 [01:19<08:00,  2.18s/it, est. speed input: 261.52 toks/s, output: 303.42 toks/s]Processed prompts:   5%|▌         | 12/231 [01:21<06:59,  1.92s/it, est. speed input: 275.77 toks/s, output: 330.57 toks/s]Processed prompts:   6%|▌         | 13/231 [01:24<08:05,  2.23s/it, est. speed input: 282.87 toks/s, output: 351.03 toks/s]Processed prompts:   6%|▌         | 14/231 [01:24<06:09,  1.70s/it, est. speed input: 301.76 toks/s, output: 376.94 toks/s]Processed prompts:   6%|▋         | 15/231 [01:24<04:43,  1.31s/it, est. speed input: 316.62 toks/s, output: 407.09 toks/s]Processed prompts:   7%|▋         | 16/231 [01:27<06:04,  1.70s/it, est. speed input: 322.12 toks/s, output: 426.98 toks/s]Processed prompts:   7%|▋         | 17/231 [01:28<04:53,  1.37s/it, est. speed input: 334.45 toks/s, output: 455.84 toks/s]Processed prompts:   8%|▊         | 18/231 [01:28<03:59,  1.12s/it, est. speed input: 346.74 toks/s, output: 484.93 toks/s]Processed prompts:   8%|▊         | 19/231 [01:29<03:52,  1.10s/it, est. speed input: 356.55 toks/s, output: 511.15 toks/s]