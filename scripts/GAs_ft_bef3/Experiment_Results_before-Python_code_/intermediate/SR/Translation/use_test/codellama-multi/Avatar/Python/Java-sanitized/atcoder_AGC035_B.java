import java.util.Scanner ; public class atcoder_AGC035_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] deg = new int [ N ] ; boolean [ ] flag = new boolean [ N ] ; boolean [ ] parity = new boolean [ N ] ; for ( int i = 0 ; i < M ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; deg [ a - 1 ] ++ ; deg [ b - 1 ] ++ ; } if ( M % 2 == 1 ) { System.out.println ( - 1 ) ; return ; } Queue < Integer > Q = new LinkedList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { Q.add ( deg [ i ] * 1000 + i ) ; } while ( ! Q.isEmpty ( ) ) { int u = Q.poll ( ) / 1000 ; if ( flag [ u ] ) { continue ; } flag [ u ] = true ; for ( int v : getAdj ( u , deg , N ) ) { edges [ v ].remove ( u ) ; if ( parity [ u ] == false && edges [ v ].size ( ) > 0 ) { System.out.println ( u + 1 + " " + v + 1 ) ; parity [ u ] = true ; } else { System.out.println ( v + 1 + " " + u + 1 ) ; parity [ v ] = ! parity [ v ] ; } deg [ v ] -- ; Q.add ( deg [ v ] * 1000 + v ) ; } } } private static List < Integer > getAdj ( int u , int [ ] deg , int N ) { List < Integer > adj = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { if ( deg [ i ] > 0 && edges [ i ].contains ( u ) ) { adj.add ( i ) ; } } return adj ; } }