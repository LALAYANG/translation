import java.util.* ; import java.io.* ; import java.nio.charset.StandardCharsets ; public class codeforces_216_B { public static void main ( String [ ] args ) { InputStream inputStream = System.in ; OutputStream outputStream = System.out ; InputReader in = new InputReader ( inputStream ) ; PrintWriter out = new PrintWriter ( outputStream , false ) ; TaskD solver = new TaskD ( ) ; solver.solve ( 1 , in , out ) ; out.close ( ) ; } static class TaskD { public void solve ( int testNumber , InputReader in , PrintWriter out ) { int N = in.nextInt ( ) ; int M = in.nextInt ( ) ; int [ ] [ ] G = new int [ N + 1 ] [ 2 ] ; for ( int i = 0 ; i < M ; i ++ ) { int a = in.nextInt ( ) ; int b = in.nextInt ( ) ; G [ a ] [ 0 ] ++ ; G [ a ] [ 1 ] += b ; G [ b ] [ 0 ] ++ ; G [ b ] [ 1 ] += a ; } int ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { if ( G [ i ] [ 0 ] == 1 && G [ i ] [ 1 ] % 2 == 1 ) { int x = i ; int y = G [ i ] [ 1 ] ; while ( true ) { if ( G [ x ] [ 0 ] == 1 && G [ x ] [ 1 ] != y ) { break ; } if ( G [ x ] [ 0 ] == 2 ) { int a = G [ x ] [ 1 ] ; int b = G [ x ] [ 1 ] ; if ( a != y && b != y ) { break ; } if ( a == y ) { x = b ; } else { x = a ; } } else { break ; } } if ( x == i ) { ans ++ ; } } } if ( ( N - ans ) % 2 == 1 ) { ans ++ ; } out.println ( ans ) ; } } } static class InputReader { public BufferedReader reader ; public StringTokenizer tokenizer ; public InputReader ( InputStream stream ) { reader = new BufferedReader ( new InputStreamReader ( stream , StandardCharsets.UTF_8 ) ) ; tokenizer = null ; } public String next ( ) { while ( tokenizer == null || ! tokenizer.hasMoreTokens ( ) ) { try { tokenizer = new StringTokenizer ( reader.readLine ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } return tokenizer.nextToken ( ) ; } public int nextInt ( ) { return Integer.parseInt ( next ( ) ) ; } long nextLong ( ) { return Long.parseLong ( next ( ) ) ; } double nextDouble ( ) { return Double.parseDouble ( next ( ) ) ; } String nextLine ( ) { String str = "" ; try { str = reader.readLine ( ) ; } catch ( IOException e ) { e.printStackTrace ( ) ; } return str ; } } }