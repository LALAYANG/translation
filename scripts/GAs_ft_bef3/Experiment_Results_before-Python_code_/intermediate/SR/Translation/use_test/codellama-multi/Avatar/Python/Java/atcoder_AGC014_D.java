 ```java
import java.util.Scanner ; public class codeforces_71_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int [ ] [ ] graph = new int [ n + 1 ] [ ] ; for ( int i = 1 ; i < n ; i ++ ) { int a = in.nextInt ( ) ; int b = in.nextInt ( ) ; graph [ a ] [ 0 ] ++ ; graph [ a ] [ graph [ a ] [ 0 ] ] = b ; graph [ b ] [ 0 ] ++ ; graph [ b ] [ graph [ b ] [ 0 ] ] = a ; } int [ ] isVisited = new int [ n + 1 ] ; isVisited [ 1 ] = 1 ; int [ ] parent = new int [ n + 1 ] ; int [ ] childNum = new int [ n + 1 ] ; Queue < Integer > q = new LinkedList < > ( ) ; q.add ( 1 ) ; while ( ! q.isEmpty ( ) ) { int v = q.poll ( ) ; for ( int i = 1 ; i <= graph [ v ] [ 0 ] ; i ++ ) { int u = graph [ v ] [ i ] ; if ( isVisited [ u ] == 0 ) { isVisited [ u ] = 1 ; parent [ u ] = v ; childNum [ v ] ++ ; q.add ( u ) ; } } } Deque < Integer > seq = new LinkedList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { if ( childNum [ i ] == 0 ) { seq.addLast ( i ) ; } } while ( ! seq.isEmpty ( ) ) { int c = seq.removeLast ( ) ; isVisited [ c ] = 0 ; if ( isVisited [ parent [ c ] ] == 0 ) { System.out.println ( "First" ) ; return ; } isVisited [ parent [ c ] ] = 0 ; childNum [ parent [ parent [ c ] ] ] -- ; if ( childNum [ parent [ parent [ c ] ] ] == 0 ) { seq.addLast ( parent [ parent [ c ] ] ) ; } } System.out.println ( "Second" ) ; } } }

```
