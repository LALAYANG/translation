```
import java.util.* ; public class atcoder_ABC141_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = N * ( N + 1 ) / 4 ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; int [ ] B = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { B [ i + 1 ] = A [ i ] ; } B [ 0 ] = 0 ; B [ N ] = A [ N - 1 ] + 1 ; int [ ] C = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { C [ i + 1 ] = B [ i + 1 ] - B [ i ] ; } int [ ] D = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { D [ i + 1 ] = D [ i ] + C [ i + 1 ] ; } int [ ] E = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { E [ i + 1 ] = E [ i ] + D [ i + 1 ] ; } int [ ] F = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { F [ i + 1 ] = F [ i ] + E [ i + 1 ] ; } int [ ] G = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { G [ i + 1 ] = G [ i ] + F [ i + 1 ] ; } int [ ] H = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { H [ i + 1 ] = H [ i ] + G [ i + 1 ] ; } int [ ] I = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { I [ i + 1 ] = I [ i ] + H [ i + 1 ] ; } int [ ] J = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { J [ i + 1 ] = J [ i ] + I [ i + 1 ] ; } int [ ] K = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { K [ i + 1 ] = K [ i ] + J [ i + 1 ] ; } int [ ] L = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { L [ i + 1 ] = L [ i ] + K [ i + 1 ] ; } int [ ] M = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { M [ i + 1 ] = M [ i ] + L [ i + 1 ] ; } int [ ] N = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { N [ i + 1 ] = N [ i ] + M [ i + 1 ] ; } int [ ] O = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { O [ i + 1 ] = O [ i ] + N [ i + 1 ] ; } int [ ] P = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { P [ i + 1 ] = P [ i ] + O [ i + 1 ] ; } int [ ] Q = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { Q [ i + 1 ] = Q [ i ] + P [ i + 1 ] ; } int [ ] R = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { R [ i + 1 ] = R [ i ] + Q [ i + 1 ] ; } int [ ] S = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i + 1 ] = S [ i ] + R [ i + 1 ] ; } int [ ] T = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { T [ i + 1 ] = T [ i ] + S [ i + 1 ] ; } int [ ] U = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { U [ i + 1 ] = U [ i ] + T [ i + 1 ] ; } int [ ] V = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { V [ i + 1 ] = V [ i ] + U [ i + 1 ] ; } int [ ] W = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { W [ i + 1 ] = W [ i ] + V [ i + 1 ] ; } int [ ] X = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { X [ i + 1 ] = X [ i ] + W [ i + 1 ] ; } int [ ] Y = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { Y [ i + 1 ] = Y [ i ] + X [ i + 1 ] ; } int [ ] Z = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { Z [ i + 1 ] = Z [ i ] + Y [ i + 1 ] ; } int [ ] AA = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AA [ i + 1 ] = AA [ i ] + Z [ i + 1 ] ; } int [ ] AB = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AB [ i + 1 ] = AB [ i ] + AA [ i + 1 ] ; } int [ ] AC = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AC [ i + 1 ] = AC [ i ] + AB [ i + 1 ] ; } int [ ] AD = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AD [ i + 1 ] = AD [ i ] + AC [ i + 1 ] ; } int [ ] AE = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AE [ i + 1 ] = AE [ i ] + AD [ i + 1 ] ; } int [ ] AF = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AF [ i + 1 ] = AF [ i ] + AE [ i + 1 ] ; } int [ ] AG = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AG [ i + 1 ] = AG [ i ] + AF [ i + 1 ] ; } int [ ] AH = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AH [ i + 1 ] = AH [ i ] + AG [ i + 1 ] ; } int [ ] AI = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AI [ i + 1 ] = AI [ i ] + AH [ i + 1 ] ; } int [ ] AJ = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AJ [ i + 1 ] = AJ [ i ] + AI [ i + 1 ] ; } int [ ] AK = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AK [ i + 1 ] = AK [ i ] + AJ [ i + 1 ] ; } int [ ] AL = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AL [ i + 1 ] = AL [ i ] + AK [ i + 1 ] ; } int [ ] AM = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AM [ i + 1 ] = AM [ i ] + AL [ i + 1 ] ; } int [ ] AN = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AN [ i + 1 ] = AN [ i ] + AM [ i + 1 ] ; } int [ ] AO = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AO [ i + 1 ] = AO [ i ] + AN [ i + 1 ] ; } int [ ] AP = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AP [ i + 1 ] = AP [ i ] + AO [ i + 1 ] ; } int [ ] AQ = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AQ [ i + 1 ] = AQ [ i ] + AP [ i + 1 ] ; } int [ ] AR = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AR [ i + 1 ] = AR [ i ] + AQ [ i + 1 ] ; } int [ ] AS = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AS [ i + 1 ] = AS [ i ] + AR [ i + 1 ] ; } int [ ] AT = new int [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { AT [ i + 1 ] = AT
