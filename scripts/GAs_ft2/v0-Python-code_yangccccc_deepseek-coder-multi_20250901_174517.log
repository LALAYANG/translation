+ model=yangccccc/deepseek-coder-multi
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model yangccccc/deepseek-coder-multi --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 09-01 18:01:16 [__init__.py:241] Automatically detected platform cuda.
found 231 inputs
INFO 09-01 18:01:18 [utils.py:326] non-default args: {'model': 'yangccccc/deepseek-coder-multi', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 09-01 18:01:26 [__init__.py:711] Resolved architecture: LlamaForCausalLM
`torch_dtype` is deprecated! Use `dtype` instead!
INFO 09-01 18:01:26 [__init__.py:1750] Using max model len 4096
INFO 09-01 18:01:26 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=8192.
[1;36m(EngineCore_0 pid=1106557)[0;0m INFO 09-01 18:01:26 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=1106557)[0;0m INFO 09-01 18:01:26 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='yangccccc/deepseek-coder-multi', speculative_config=None, tokenizer='yangccccc/deepseek-coder-multi', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=yangccccc/deepseek-coder-multi, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=1106557)[0;0m WARNING 09-01 18:01:26 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 240 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=1106557)[0;0m INFO 09-01 18:01:26 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_821995dc'), local_subscribe_addr='ipc:///tmp/2062151d-81e7-465d-b8a3-8a1444277763', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:29 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_8e0fafcc'), local_subscribe_addr='ipc:///tmp/6ee1acd5-e84a-44a0-9603-0e041af7ed01', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:29 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_8e232c35'), local_subscribe_addr='ipc:///tmp/d1cc7405-1aca-4bc4-9613-5d2994cea57a', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:30 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:30 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:30 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:30 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:31 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:31 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:31 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_0c7becf3'), local_subscribe_addr='ipc:///tmp/b6079f47-ac91-449f-a01e-29962ddaed0e', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:31 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:31 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m WARNING 09-01 18:01:31 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m WARNING 09-01 18:01:31 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:31 [gpu_model_runner.py:1953] Starting to load model yangccccc/deepseek-coder-multi...
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:31 [gpu_model_runner.py:1953] Starting to load model yangccccc/deepseek-coder-multi...
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:31 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:31 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:32 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:32 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:32 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:32 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/3 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m Loading safetensors checkpoint shards:  33% Completed | 1/3 [00:00<00:01,  1.27it/s]
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m Loading safetensors checkpoint shards:  67% Completed | 2/3 [00:01<00:00,  1.33it/s]
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:34 [default_loader.py:262] Loading weights took 2.56 seconds
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:02<00:00,  1.22it/s]
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m Loading safetensors checkpoint shards: 100% Completed | 3/3 [00:02<00:00,  1.24it/s]
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m 
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:35 [default_loader.py:262] Loading weights took 2.56 seconds
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:35 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 3.082220 seconds
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:35 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 3.219481 seconds
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:44 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d3b4714cfc/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:44 [backends.py:559] Dynamo bytecode transform time: 8.55 s
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:44 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d3b4714cfc/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:44 [backends.py:559] Dynamo bytecode transform time: 8.69 s
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:51 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.727 s
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:51 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.800 s
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:53 [monitor.py:34] torch.compile takes 8.55 s in total
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:53 [monitor.py:34] torch.compile takes 8.69 s in total
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:54 [gpu_worker.py:276] Available KV cache memory: 63.22 GiB
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:54 [gpu_worker.py:276] Available KV cache memory: 63.22 GiB
[1;36m(EngineCore_0 pid=1106557)[0;0m INFO 09-01 18:01:55 [kv_cache_utils.py:849] GPU KV cache size: 258,960 tokens
[1;36m(EngineCore_0 pid=1106557)[0;0m INFO 09-01 18:01:55 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 63.22x
[1;36m(EngineCore_0 pid=1106557)[0;0m INFO 09-01 18:01:55 [kv_cache_utils.py:849] GPU KV cache size: 258,960 tokens
[1;36m(EngineCore_0 pid=1106557)[0;0m INFO 09-01 18:01:55 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 63.22x
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:03, 21.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 21.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 21.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 22.49it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 22.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 23.47it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:00<00:01, 23.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:01, 23.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 24.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 24.25it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 24.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 25.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:01<00:01, 25.88it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:01<00:00, 26.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:01<00:00, 26.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:01<00:00, 26.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:02<00:00, 25.88it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 25.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:02<00:00, 26.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:02<00:00, 26.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:02<00:00, 26.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:02<00:00, 26.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 25.04it/s]
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:58 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:58 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP1 pid=1106565)[0;0m INFO 09-01 18:01:58 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 1.82 GiB
[1;36m(EngineCore_0 pid=1106557)[0;0m [1;36m(VllmWorker TP0 pid=1106563)[0;0m INFO 09-01 18:01:58 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 1.82 GiB
[1;36m(EngineCore_0 pid=1106557)[0;0m INFO 09-01 18:01:58 [core.py:214] init engine (profile, create kv cache, warmup model) took 22.45 seconds
INFO 09-01 18:01:58 [llm.py:298] Supported_tasks: ['generate']
Translating 231 files...
  0%|          | 0/231 [00:00<?, ?it/s]100%|██████████| 231/231 [00:00<00:00, 6487.99it/s]
Adding requests:   0%|          | 0/231 [00:00<?, ?it/s]Adding requests:   9%|▊         | 20/231 [00:00<00:01, 191.14it/s]Adding requests:  23%|██▎       | 52/231 [00:00<00:00, 263.12it/s]Adding requests:  38%|███▊      | 88/231 [00:00<00:00, 302.79it/s]Adding requests:  52%|█████▏    | 119/231 [00:00<00:00, 297.74it/s]Adding requests:  66%|██████▌   | 153/231 [00:00<00:00, 311.11it/s]Adding requests:  81%|████████  | 187/231 [00:00<00:00, 317.85it/s]Adding requests:  95%|█████████▌| 220/231 [00:00<00:00, 319.01it/s]Adding requests: 100%|██████████| 231/231 [00:00<00:00, 304.66it/s]
Processed prompts:   0%|          | 0/231 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/231 [00:12<46:15, 12.07s/it, est. speed input: 63.63 toks/s, output: 7.79 toks/s]Processed prompts:   1%|          | 2/231 [00:12<19:28,  5.10s/it, est. speed input: 119.54 toks/s, output: 15.53 toks/s]Processed prompts:   1%|▏         | 3/231 [00:12<11:43,  3.09s/it, est. speed input: 189.00 toks/s, output: 22.26 toks/s]Processed prompts:   2%|▏         | 4/231 [00:13<07:19,  1.94s/it, est. speed input: 242.16 toks/s, output: 29.57 toks/s]Processed prompts:   2%|▏         | 5/231 [00:13<04:53,  1.30s/it, est. speed input: 307.84 toks/s, output: 37.89 toks/s]Processed prompts:   3%|▎         | 8/231 [00:13<02:01,  1.83it/s, est. speed input: 400.46 toks/s, output: 61.71 toks/s]Processed prompts:   4%|▍         | 9/231 [00:13<01:39,  2.23it/s, est. speed input: 447.41 toks/s, output: 69.63 toks/s]Processed prompts:   5%|▍         | 11/231 [00:13<01:05,  3.38it/s, est. speed input: 568.55 toks/s, output: 85.30 toks/s]Processed prompts:   6%|▌         | 13/231 [00:13<00:48,  4.54it/s, est. speed input: 689.08 toks/s, output: 100.23 toks/s]Processed prompts:   6%|▋         | 15/231 [00:14<00:35,  6.06it/s, est. speed input: 799.36 toks/s, output: 117.05 toks/s]Processed prompts:   7%|▋         | 17/231 [00:14<00:29,  7.22it/s, est. speed input: 889.62 toks/s, output: 133.86 toks/s]Processed prompts:   9%|▊         | 20/231 [00:14<00:22,  9.56it/s, est. speed input: 1087.24 toks/s, output: 158.57 toks/s]Processed prompts:  10%|▉         | 23/231 [00:14<00:19, 10.64it/s, est. speed input: 1224.63 toks/s, output: 182.57 toks/s]Processed prompts:  11%|█         | 25/231 [00:14<00:17, 12.04it/s, est. speed input: 1326.42 toks/s, output: 199.19 toks/s]Processed prompts:  12%|█▏        | 28/231 [00:14<00:14, 13.71it/s, est. speed input: 1433.47 toks/s, output: 222.65 toks/s]Processed prompts:  13%|█▎        | 30/231 [00:15<00:15, 13.29it/s, est. speed input: 1508.74 toks/s, output: 238.61 toks/s]Processed prompts:  14%|█▍        | 32/231 [00:15<00:15, 12.99it/s, est. speed input: 1642.13 toks/s, output: 254.56 toks/s]Processed prompts:  15%|█▍        | 34/231 [00:15<00:13, 14.17it/s, est. speed input: 1721.72 toks/s, output: 271.68 toks/s]Processed prompts:  16%|█▌        | 36/231 [00:15<00:12, 15.19it/s, est. speed input: 1818.30 toks/s, output: 289.09 toks/s]Processed prompts:  18%|█▊        | 41/231 [00:15<00:08, 23.04it/s, est. speed input: 2137.91 toks/s, output: 336.23 toks/s]Processed prompts:  19%|█▉        | 44/231 [00:15<00:07, 24.55it/s, est. speed input: 2312.21 toks/s, output: 361.63 toks/s]Processed prompts:  20%|██        | 47/231 [00:15<00:08, 22.76it/s, est. speed input: 2420.96 toks/s, output: 386.73 toks/s]Processed prompts:  22%|██▏       | 50/231 [00:15<00:07, 24.48it/s, est. speed input: 2552.46 toks/s, output: 412.97 toks/s]Processed prompts:  25%|██▍       | 57/231 [00:16<00:07, 23.97it/s, est. speed input: 2885.61 toks/s, output: 473.77 toks/s]Processed prompts:  26%|██▋       | 61/231 [00:16<00:06, 24.79it/s, est. speed input: 3113.94 toks/s, output: 509.05 toks/s]Processed prompts:  28%|██▊       | 64/231 [00:16<00:07, 23.59it/s, est. speed input: 3250.01 toks/s, output: 533.87 toks/s]Processed prompts:  30%|██▉       | 69/231 [00:16<00:06, 26.67it/s, est. speed input: 3501.37 toks/s, output: 580.12 toks/s]Processed prompts:  33%|███▎      | 76/231 [00:16<00:04, 33.17it/s, est. speed input: 3866.13 toks/s, output: 647.48 toks/s]Processed prompts:  35%|███▍      | 80/231 [00:16<00:05, 29.29it/s, est. speed input: 4052.95 toks/s, output: 680.32 toks/s]Processed prompts:  36%|███▋      | 84/231 [00:17<00:07, 19.17it/s, est. speed input: 4200.94 toks/s, output: 708.46 toks/s]Processed prompts:  38%|███▊      | 88/231 [00:17<00:07, 20.01it/s, est. speed input: 4399.24 toks/s, output: 743.65 toks/s]Processed prompts:  40%|████      | 93/231 [00:17<00:06, 19.72it/s, est. speed input: 4597.33 toks/s, output: 787.80 toks/s]Processed prompts:  42%|████▏     | 96/231 [00:17<00:06, 20.34it/s, est. speed input: 4739.59 toks/s, output: 813.45 toks/s]Processed prompts:  43%|████▎     | 100/231 [00:18<00:05, 22.73it/s, est. speed input: 4896.85 toks/s, output: 852.69 toks/s]Processed prompts:  45%|████▍     | 103/231 [00:18<00:05, 23.05it/s, est. speed input: 5026.13 toks/s, output: 880.97 toks/s]Processed prompts:  46%|████▌     | 106/231 [00:18<00:05, 23.61it/s, est. speed input: 5168.47 toks/s, output: 907.86 toks/s]Processed prompts:  49%|████▉     | 113/231 [00:18<00:03, 32.75it/s, est. speed input: 5509.07 toks/s, output: 981.83 toks/s]Processed prompts:  51%|█████     | 117/231 [00:18<00:03, 30.77it/s, est. speed input: 5695.74 toks/s, output: 1020.42 toks/s]Processed prompts:  55%|█████▍    | 126/231 [00:18<00:02, 43.68it/s, est. speed input: 6189.36 toks/s, output: 1117.96 toks/s]Processed prompts:  57%|█████▋    | 131/231 [00:18<00:03, 29.71it/s, est. speed input: 6355.67 toks/s, output: 1160.01 toks/s]Processed prompts:  58%|█████▊    | 135/231 [00:19<00:03, 25.22it/s, est. speed input: 6450.12 toks/s, output: 1194.01 toks/s]Processed prompts:  60%|██████    | 139/231 [00:19<00:04, 19.79it/s, est. speed input: 6571.21 toks/s, output: 1223.72 toks/s]Processed prompts:  61%|██████▏   | 142/231 [00:19<00:04, 19.49it/s, est. speed input: 6661.20 toks/s, output: 1252.13 toks/s]Processed prompts:  63%|██████▎   | 145/231 [00:19<00:04, 19.33it/s, est. speed input: 6747.78 toks/s, output: 1280.85 toks/s]Processed prompts:  64%|██████▍   | 148/231 [00:20<00:05, 15.98it/s, est. speed input: 6825.73 toks/s, output: 1301.34 toks/s]Processed prompts:  65%|██████▍   | 150/231 [00:20<00:05, 14.61it/s, est. speed input: 6874.16 toks/s, output: 1315.47 toks/s]Processed prompts:  66%|██████▌   | 152/231 [00:20<00:06, 12.50it/s, est. speed input: 6913.50 toks/s, output: 1326.75 toks/s]Processed prompts:  67%|██████▋   | 155/231 [00:20<00:05, 14.22it/s, est. speed input: 7043.16 toks/s, output: 1357.07 toks/s]Processed prompts:  68%|██████▊   | 157/231 [00:20<00:05, 14.77it/s, est. speed input: 7124.88 toks/s, output: 1376.37 toks/s]Processed prompts:  69%|██████▉   | 160/231 [00:20<00:04, 16.37it/s, est. speed input: 7228.56 toks/s, output: 1407.28 toks/s]Processed prompts:  71%|███████   | 164/231 [00:21<00:03, 20.67it/s, est. speed input: 7437.27 toks/s, output: 1455.31 toks/s]Processed prompts:  72%|███████▏  | 167/231 [00:21<00:03, 20.03it/s, est. speed input: 7531.82 toks/s, output: 1485.81 toks/s]Processed prompts:  74%|███████▎  | 170/231 [00:21<00:03, 19.91it/s, est. speed input: 7711.60 toks/s, output: 1519.10 toks/s]Processed prompts:  75%|███████▍  | 173/231 [00:21<00:02, 21.01it/s, est. speed input: 7808.45 toks/s, output: 1554.32 toks/s]Processed prompts:  77%|███████▋  | 177/231 [00:21<00:02, 20.20it/s, est. speed input: 7926.04 toks/s, output: 1596.95 toks/s]Processed prompts:  78%|███████▊  | 181/231 [00:21<00:02, 19.19it/s, est. speed input: 8014.65 toks/s, output: 1639.32 toks/s]Processed prompts:  79%|███████▉  | 183/231 [00:22<00:02, 18.89it/s, est. speed input: 8101.47 toks/s, output: 1660.86 toks/s]Processed prompts:  80%|████████  | 185/231 [00:22<00:02, 17.97it/s, est. speed input: 8177.10 toks/s, output: 1682.76 toks/s]Processed prompts:  82%|████████▏ | 190/231 [00:22<00:02, 20.24it/s, est. speed input: 8361.17 toks/s, output: 1743.27 toks/s]Processed prompts:  83%|████████▎ | 192/231 [00:22<00:02, 17.94it/s, est. speed input: 8415.12 toks/s, output: 1762.66 toks/s]Processed prompts:  84%|████████▍ | 194/231 [00:22<00:02, 15.92it/s, est. speed input: 8482.89 toks/s, output: 1781.36 toks/s]Processed prompts:  85%|████████▍ | 196/231 [00:23<00:03, 11.48it/s, est. speed input: 8452.87 toks/s, output: 1790.02 toks/s]Processed prompts:  87%|████████▋ | 200/231 [00:23<00:02, 12.27it/s, est. speed input: 8560.26 toks/s, output: 1834.52 toks/s]Processed prompts:  87%|████████▋ | 202/231 [00:23<00:03,  9.50it/s, est. speed input: 8550.44 toks/s, output: 1840.05 toks/s]Processed prompts:  89%|████████▊ | 205/231 [00:23<00:02, 11.89it/s, est. speed input: 8670.56 toks/s, output: 1884.12 toks/s]Processed prompts:  90%|████████▉ | 207/231 [00:23<00:01, 12.89it/s, est. speed input: 8744.73 toks/s, output: 1911.48 toks/s]Processed prompts:  91%|█████████ | 210/231 [00:24<00:01, 14.57it/s, est. speed input: 8857.23 toks/s, output: 1955.08 toks/s]Processed prompts:  92%|█████████▏| 212/231 [00:24<00:02,  8.60it/s, est. speed input: 8788.38 toks/s, output: 1951.18 toks/s]Processed prompts:  93%|█████████▎| 214/231 [00:25<00:02,  6.53it/s, est. speed input: 8739.55 toks/s, output: 1951.17 toks/s]Processed prompts:  94%|█████████▎| 216/231 [00:25<00:02,  7.18it/s, est. speed input: 8779.99 toks/s, output: 1977.30 toks/s]Processed prompts:  94%|█████████▍| 218/231 [00:25<00:01,  8.06it/s, est. speed input: 8856.43 toks/s, output: 2006.13 toks/s]Processed prompts:  95%|█████████▌| 220/231 [00:25<00:01,  8.55it/s, est. speed input: 8934.27 toks/s, output: 2035.14 toks/s]Processed prompts:  96%|█████████▌| 222/231 [00:26<00:01,  7.88it/s, est. speed input: 8951.34 toks/s, output: 2055.82 toks/s]Processed prompts:  97%|█████████▋| 223/231 [00:26<00:01,  5.26it/s, est. speed input: 8845.33 toks/s, output: 2041.47 toks/s]Processed prompts:  97%|█████████▋| 224/231 [00:26<00:01,  5.69it/s, est. speed input: 8860.97 toks/s, output: 2056.74 toks/s]Processed prompts:  97%|█████████▋| 225/231 [00:27<00:01,  3.96it/s, est. speed input: 8755.77 toks/s, output: 2042.13 toks/s]Processed prompts:  98%|█████████▊| 226/231 [00:27<00:01,  3.32it/s, est. speed input: 8680.77 toks/s, output: 2035.94 toks/s]Processed prompts:  98%|█████████▊| 227/231 [00:42<00:16,  4.08s/it, est. speed input: 5642.85 toks/s, output: 1367.56 toks/s]Processed prompts:  99%|█████████▊| 228/231 [00:48<00:13,  4.48s/it, est. speed input: 5019.80 toks/s, output: 1269.71 toks/s]Processed prompts:  99%|█████████▉| 229/231 [00:49<00:07,  3.62s/it, est. speed input: 4904.16 toks/s, output: 1295.56 toks/s]Processed prompts: 100%|█████████▉| 230/231 [00:52<00:03,  3.38s/it, est. speed input: 4660.31 toks/s, output: 1289.81 toks/s]Processed prompts: 100%|██████████| 231/231 [00:53<00:00,  2.69s/it, est. speed input: 4589.44 toks/s, output: 1329.82 toks/s]Processed prompts: 100%|██████████| 231/231 [00:53<00:00,  2.69s/it, est. speed input: 4589.44 toks/s, output: 1329.82 toks/s]Processed prompts: 100%|██████████| 231/231 [00:53<00:00,  4.32it/s, est. speed input: 4589.44 toks/s, output: 1329.82 toks/s]
+ python3 clean_generations_translation.py --model yangccccc/deepseek-coder-multi --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/231 [00:00<?, ?it/s]import java.util.* ; import java.io.* ; public class atcoder_ABC146_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; ArrayList < ArrayList < Integer >> G = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { G.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc.nextInt ( ) - 1 ; int b = sc.nextInt ( ) - 1 ; G.get ( a ).add ( b ) ; G.get ( b ).add ( a ) ; } Queue < Integer > q = new LinkedList < > ( ) ; q.add ( 0 ) ; int [ ] color = new int [ N ] ; Arrays.fill ( color , - 1 ) ; color [ 0 ] = 0 ; while ( ! q.isEmpty ( ) ) { int v = q.poll ( ) ; for ( int u : G.get ( v ) ) { if ( color [ u ] != - 1 ) continue ; if ( color [ v ] == 0 ) color [ u ] = 1 ; else color [ u ] = 0 ; q.add ( u ) ; } } int K = 0 ; for ( int i = 0 ; i < N ; i ++ ) { K = Math.max ( K , color [ i ] ) ; } System.out.println ( K + 1 ) ; for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc.nextInt ( ) - 1 ; int b = sc.nextInt ( ) - 1 ; if ( color [ a ] == 0 ) System.out.println ( color [ b ] + 1 ) ; else System.out.println ( color [ b ] ) ; } } }
import java.util.Scanner ; public class atcoder_ABC119_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { double x = sc.nextDouble ( ) ; String u = sc.next ( ) ; if ( u.equals ( "JPY" ) ) { sum += x ; } else { sum += x * 380000 ; } } System.out.println ( sum ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_569_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; int ans = 0 ; while ( x < t ) { x = x * q ; ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC112_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] [ ] XYH = new int [ N ] [ 3 ] ; for ( int i = 0 ; i < N ; i ++ ) { XYH [ i ] [ 0 ] = sc.nextInt ( ) ; XYH [ i ] [ 1 ] = sc.nextInt ( ) ; XYH [ i ] [ 2 ] = sc.nextInt ( ) ; } int x = 0 ; int y = 0 ; int h = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( XYH [ i ] [ 2 ] > 0 ) { x = XYH [ i ] [ 0 ] ; y = XYH [ i ] [ 1 ] ; h = XYH [ i ] [ 2 ] ; break ; } } for ( int cx = 0 ; cx <= 100 ; cx ++ ) { for ( int cy = 0 ; cy <= 100 ; cy ++ ) { boolean ok = true ; int H = h + Math.abs ( cx - x ) + Math.abs ( cy - y ) ; for ( int i = 0 ; i < N ; i ++ ) { int d = Math.abs ( cx - XYH [ i ] [ 0 ] ) + Math.abs ( cy - XYH [ i ] [ 1 ] ) ; if ( XYH [ i ] [ 2 ] != Math.max ( H - d , 0 ) ) { ok = false ; } } if ( ok ) { System.out.println ( cx + " " + cy + " " + H ) ; return ; } } } } }
import java.util.* ; public class atcoder_ABC104_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int D = sc.nextInt ( ) ; int G = sc.nextInt ( ) ; int [ ] p = new int [ D ] ; int [ ] c = new int [ D ] ; for ( int i = 0 ; i < D ; i ++ ) { p [ i ] = sc.nextInt ( ) ; c [ i ] = sc.nextInt ( ) ; } int ans = 1000000000 ; for ( int bit = 0 ; bit < ( 1 << D ) ; bit ++ ) { int score = 0 ; int num = 0 ; for ( int i = 0 ; i < D ; i ++ ) { if ( ( bit & ( 1 << i ) ) != 0 ) { score += 100 * ( i + 1 ) * p [ i ] + c [ i ] ; num += p [ i ] ; } } if ( score >= G ) { ans = Math.min ( ans , num ) ; continue ; } for ( int i = D - 1 ; i >= 0 ; i -- ) { if ( ( bit & ( 1 << i ) ) != 0 ) continue ; for ( int j = 0 ; j < p [ i ] ; j ++ ) { if ( score >= 100 * ( i + 1 ) * ( j + 1 ) + c [ i ] ) { score += 100 * ( i + 1 ) ; num ++ ; } else { break ; } } } ans = Math.min ( ans , num ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_678_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = a - b ; if ( c % 10 == 9 ) { c = c - 1 ; } else { c = c + 1 ; } System.out.println ( c ) ; } }
from sys import stdin


def solve():
    x = stdin.readline()
    s = []
    for i in x:
        if i == 'O':
            s.append(0)
        else:
            s.append(1)
    for i in range(1, 13):
        if 12 % i == 0:
            if help(i, 12 // i, s):
                valid_dimensions.append((12 // i, i))
    print(len(valid_dimensions), end=' ')
    for (a, b) in sorted(valid_dimensions):
        print(f'{a}x{b}', end=' ')
    print()


def help(a, b, l):
    valid_dimensions = []
    for i in range(b):
        valid_dimensions.append(l[i * a:i * a + a])
    for i in zip(*valid_dimensions):
        if sum(i) == b:
            return True
    return False


for i in range(int(stdin.readline())):
    valid_dimensions = []
    solve()
import java.util.* ; import java.io.* ; public class atcoder_ABC105_D { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int m = in.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) a [ i ] = in.nextInt ( ) ; long [ ] sum = new long [ n + 1 ] ; sum [ 0 ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) sum [ i + 1 ] = ( sum [ i ] + a [ i ] ) % m ; HashMap < Long , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) { if ( map.containsKey ( sum [ i ] ) ) map.put ( sum [ i ] , map.get ( sum [ i ] ) + 1 ) ; else map.put ( sum [ i ] , 1 ) ; } long ans = 0 ; for ( long key : map.keySet ( ) ) { int val = map.get ( key ) ; ans += ( long ) val * ( val - 1 ) / 2 ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_AGC033_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h , w , n ; h = sc.nextInt ( ) ; w = sc.nextInt ( ) ; n = sc.nextInt ( ) ; int sr , scol ; sr = sc.nextInt ( ) ; scol = sc.nextInt ( ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; boolean flag = false ; int sl = 0 , sr = 0 , su = 0 , sd = 0 ; int tl = 0 , tr = 0 , tu = 0 , td = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'L' ) { sl ++ ; if ( sr - tr - scol == 0 ) { flag = true ; break ; } } else if ( s.charAt ( i ) == 'R' ) { sr ++ ; if ( scol + ( sr - tl ) == w + 1 ) { flag = true ; break ; } } else if ( s.charAt ( i ) == 'U' ) { su ++ ; if ( su - td - sr == 0 ) { flag = true ; break ; } } else if ( s.charAt ( i ) == 'D' ) { sd ++ ; if ( sr + ( sd - tu ) == h + 1 ) { flag = true ; break ; } } if ( t.charAt ( i ) == 'L' ) { if ( sr - tl + scol != 1 ) { tl ++ ; } } else if ( t.charAt ( i ) == 'R' ) { if ( scol + ( tr - sl ) != w ) { tr ++ ; } } else if ( t.charAt ( i ) == 'U' ) { if ( sd - tu + sr != 1 ) { tu ++ ; } } else if ( t.charAt ( i ) == 'D' ) { if ( sr + ( td - su ) != h ) { td ++ ; } } } if ( flag ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_55_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int c = 0 ; while ( n % 2 == 0 ) { n = n / 2 ; c ++ ; } if ( c > 0 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.* ; public class atcoder_ABC106_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int k = sc.nextInt ( ) ; int cnt = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '1' ) cnt ++ ; else break ; } if ( cnt >= k ) System.out.println ( 1 ) ; else System.out.println ( s.charAt ( cnt ) ) ; } }
import java.util.* ; public class atcoder_AGC046_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; long [ ] [ ] dp = new long [ c + 1 ] [ d + 1 ] ; dp [ a ] [ b ] = 1 ; for ( int i = a ; i <= c ; i ++ ) { for ( int j = b ; j <= d ; j ++ ) { dp [ i ] [ j ] += ( dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] - dp [ i - 1 ] [ j - 1 ] + ( long ) 1e9 + 7 ) % ( long ) 1e9 + 7 ; } } System.out.println ( dp [ c ] [ d ] ) ; } }
import java.util.* ; public class codeforces_7_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int t = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ m ] ; int ind = 1 ; for ( int i = 0 ; i < t ; i ++ ) { String s = sc.next ( ) ; if ( s.equals ( "alloc" ) ) { int x = sc.nextInt ( ) ; int cnt = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] == 0 ) { cnt ++ ; if ( cnt == x ) { for ( int k = j - x + 1 ; k <= j ; k ++ ) { arr [ k ] = ind ; } ind ++ ; break ; } } else { cnt = 0 ; } } if ( cnt != x ) { System.out.println ( "NULL" ) ; } } else if ( s.equals ( "erase" ) ) { int x = sc.nextInt ( ) ; if ( x == 0 || x > m || arr [ x - 1 ] == 0 ) { System.out.println ( "ILLEGAL_ERASE_ARGUMENT" ) ; } else { arr [ x - 1 ] = 0 ; } } else if ( s.equals ( "defragment" ) ) { int cnt = 0 ; for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] == 0 ) { cnt ++ ; } } for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ j ] != 0 ) { arr [ j - cnt ] = arr [ j ] ; arr [ j ] = 0 ; } } } } }
import java.util.* ; import java.io.* ; import java.math.* ; public class atcoder_AGC021_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] x = new int [ N ] ; int [ ] y = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { x [ i ] = sc.nextInt ( ) ; y [ i ] = sc.nextInt ( ) ; } double [ ] rad = new double [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( i == j ) continue ; rad [ i ] = Math.atan2 ( x [ j ] - x [ i ] , y [ j ] - y [ i ] ) ; } } Arrays.sort ( rad ) ; double ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans = Math.max ( ans , rad [ i ] - rad [ i - 1 ] ) ; } ans = Math.max ( ans , 2 * Math.PI - rad [ N - 1 ] + rad [ 0 ] ) ; System.out.println ( ans * 180 / Math.PI ) ; } }
import threading
import queue
import sys, re
from collections import deque, defaultdict, Counter
from math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians
from itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby
from operator import itemgetter, mul
from copy import deepcopy, copy
from string import ascii_lowercase, ascii_uppercase, digits
from bisect import bisect, bisect_left, insort, insort_left
from heapq import heappush, heappop
from functools import reduce

def Func_input_0():
    return sys.stdin.readline().strip()

def INT():
    return int(Func_input_0())

def MAP():
    return map(int, Func_input_0().split())

def LIST():
    return list(map(int, Func_input_0().split()))

def ZIP(n):
    return zip(*(MAP() for _ in range(n)))
sys.setrecursionlimit(10 ** 9)
INF = float('inf')
mod = 10 ** 9 + 7
import numpy as np
queue_INT0 = queue.Queue()

def INT_thread(queue):
    result = INT()
    queue.put(result)
input_thread = threading.Thread(target=INT_thread, args=(queue_INT0,))
input_thread.start()
input_thread.join()
result_INT0 = queue_INT0.get()
N = result_INT0
S = [Func_input_0() for _ in range(N)]
march = ['M', 'A', 'R', 'C', 'H']
march_lis = [0] * 5
check3 = 111
check1 = 134
check2 = 843
check4 = 771
for s in S:
    if check2 & check4:
        if check3 & check1:
            if s[0].upper() in march:
                march_lis[march.index(s[0].upper())] += 1
ans = 0
for (x, y, count3) in combinations(march_lis, 3):
    ans += x * y * count3
print(ans)
import threading
import queue
import threading
import queue
import sys, re
from collections import deque, defaultdict, Counter
from math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians
from itertools import groupby, accumulate, permutations, combinations, product
from operator import itemgetter, mul
from copy import deepcopy
from string import ascii_lowercase, ascii_uppercase, digits
from bisect import bisect, bisect_left
from heapq import heappush, heappop
from functools import reduce

def Func_input_0():
    return sys.stdin.readline().strip()

def INT():
    return int(Func_input_0())

def MAP():
    return map(int, Func_input_0().split())

def LIST():
    return list(map(int, Func_input_0().split()))

def ZIP(n):
    return zip(*(MAP() for _ in range(n)))
sys.setrecursionlimit(10 ** 9)
infinity = float('inf')
mod = 10 ** 9 + 7
queue_INT0 = queue.Queue()

def INT_thread(queue):
    result = INT()
    queue.put(result)
thread_INT0 = threading.Thread(target=INT_thread, args=(queue_INT0,))
thread_INT0.start()
thread_INT0.join()
result_INT0 = queue_INT0.get()
N = result_INT0
queue_LIST0 = queue.Queue()

def LIST_thread(queue):
    result = LIST()
    queue.put(result)
thread_LIST0 = threading.Thread(target=LIST_thread, args=(queue_LIST0,))
thread_LIST0.start()
thread_LIST0.join()
result_LIST0 = queue_LIST0.get()
A = result_LIST0
A = [k for (k, g) in groupby(A)]
N = len(A)
i = 1
ans = 0
while i < N - 1:
    has_adjacent_diff = (A[i - 1] != A[i]) and (A[i] != A[i + 1])
    is_peak = (A[i - 1] < A[i]) and (A[i] > A[i + 1])
    is_valley = (A[i - 1] > A[i]) and (A[i] < A[i + 1])
    has_extrema = (A[i - 1] != A[i]) or (A[i] != A[i + 1])
    if has_adjacent_diff and is_peak and has_extrema:
        if is_valley and has_extrema:
            if A[i - 1] < A[i] > A[i + 1] or A[i - 1] > A[i] < A[i + 1]:
                ans = ans + 1
                i = i + 1
    i += 1
print(ans + 1)
import java.util.* ; public class codeforces_609_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } HashMap < Integer , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( map.containsKey ( arr [ i ] ) ) { map.put ( arr [ i ] , map.get ( arr [ i ] ) + 1 ) ; } else { map.put ( arr [ i ] , 1 ) ; } } long res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( map.get ( arr [ i ] ) > 1 ) { res += n - i - map.get ( arr [ i ] ) ; map.put ( arr [ i ] , map.get ( arr [ i ] ) - 1 ) ; } else { res += n - i - 1 ; } } System.out.println ( res ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC151_A { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; String s = in.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { char c = s.charAt ( i ) ; if ( c == 'a' ) sb.append ( 'b' ) ; else if ( c == 'b' ) sb.append ( 'a' ) ; else sb.append ( c ) ; } System.out.println ( sb.toString ( ) ) ; } }
import java.util.* ; public class codeforces_581_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] ans = new int [ n ] ; int mx = arr [ n - 1 ] ; for ( int i = n - 2 ; i >= 0 ; i -- ) { ans [ i ] = Math.max ( 0 , mx - arr [ i ] + 1 ) ; mx = Math.max ( mx , arr [ i ] ) ; } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( ans [ i ] + " " ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC126_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; ArrayList < ArrayList < Integer >> graph = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { graph.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < M ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sc.nextInt ( ) ; graph.get ( x - 1 ).add ( y - 1 ) ; graph.get ( y - 1 ).add ( x - 1 ) ; } int ans = 0 ; boolean [ ] visited = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { if ( ! visited [ i ] ) { ans ++ ; Queue < Integer > que = new LinkedList < > ( ) ; que.add ( i ) ; visited [ i ] = true ; while ( ! que.isEmpty ( ) ) { int now = que.poll ( ) ; for ( int next : graph.get ( now ) ) { if ( ! visited [ next ] ) { que.add ( next ) ; visited [ next ] = true ; } } } } } System.out.println ( ans ) ; } }
import functools
import math


def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)


def main():
    count = int(input())
    numbers = list(map(int, input().split()))
    greatest_common_divisor = functools.reduce(math.gcd, numbers)
    print(greatest_common_divisor)


if __name__ == '__main__':
    main()
import java.util.* ; import java.io.* ; public class atcoder_ABC132_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int mod = 1000000007 ; int [ ] dp = new int [ k + 1 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= k ; i ++ ) { int sum = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { sum = ( sum + dp [ i - 1 ] ) % mod ; } } dp [ i ] = sum ; } System.out.println ( dp [ k ] ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_92_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int a = 0 ; int b = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { a += i ; } for ( int i = 1 ; i <= m ; i ++ ) { b += i ; } System.out.println ( Math.abs ( a - b ) ) ; } }
import java.util.* ; public class atcoder_ABC170_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int [ ] arr = new int [ 5 ] ; for ( int i = 0 ; i < 5 ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( arr [ i ] == 0 ) { count ++ ; } } int ans = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( arr [ i ] == 0 ) { ans = i + 1 ; break ; } } if ( count == 1 ) { System.out.println ( ans ) ; } } }
import java.util.* ; public class codeforces_653_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; for ( int i = 0 ; i < n - 2 ; i ++ ) { if ( arr [ i ] == arr [ i + 1 ] - 1 && arr [ i + 1 ] == arr [ i + 2 ] - 1 ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import java.util.Scanner ; public class codeforces_8_B { public static void main ( String [ ] args ) { Scanner in = new Scanner ( System.in ) ; int n = in.nextInt ( ) ; int k = in.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = in.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] >= a [ k - 1 ] && a [ i ] > 0 ) { ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_146_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int h1 = 0 , h2 = 0 , x = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) != '4' && s.charAt ( i ) != '7' ) { System.out.println ( "NO" ) ; x = 1 ; break ; } if ( i < n / 2 ) h1 += s.charAt ( i ) - '0' ; else h2 += s.charAt ( i ) - '0' ; } if ( x == 0 ) { if ( h1 == h2 ) System.out.println ( "YES" ) ; else System.out.println ( "NO" ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_299_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int min = arr [ 0 ] ; int max = arr [ 0 ] ; int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] > max ) { max = arr [ i ] ; count ++ ; } if ( arr [ i ] < min ) { min = arr [ i ] ; count ++ ; } } System.out.println ( count ) ; } }
import java.util.* ; public class codeforces_518_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; int [ ] freqs = new int [ 26 ] ; int [ ] freqt = new int [ 26 ] ; int exact_matches = 0 ; int case_insensitive_matches = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { freqs [ s.charAt ( i ) - 'a' ] ++ ; } for ( int i = 0 ; i < t.length ( ) ; i ++ ) { freqt [ t.charAt ( i ) - 'a' ] ++ ; } for ( int i = 0 ; i < 26 ; i ++ ) { exact_matches += Math.min ( freqs [ i ] , freqt [ i ] ) ; } for ( int i = 0 ; i < 26 ; i ++ ) { case_insensitive_matches += Math.min ( freqs [ i ] , freqt [ ( i + 32 ) % 26 ] ) ; } System.out.println ( exact_matches + " " + case_insensitive_matches ) ; } }
from scipy.stats import ttest_ind
(n, a, b) = [int(num_str) for num_str in input().split(' ')]
list_a = [int(num_str) for num_str in input().split(' ')]
listb = [int(num_str) for num_str in input().split(' ')]

for LoopIndexOut in range(n):

    def recursive_print(k, stop, step):
        if step == 0 or (step > 0 and k >= stop) or (step < 0 and k <= stop):
            return
        if k + 1 in list_a:
            print(1, end=' ')
        else:
            print(2, end=' ')
        recursive_print(k + step, stop, step)
    recursive_print(0, n, 1)
import java.util.* ; public class codeforces_340_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int lcm = ( x * y ) / ( gcd ( x , y ) ) ; System.out.println ( b / lcm - ( a - 1 ) / lcm ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import threading
import queue
import sys

def I():
    return int(sys.stdin.readline())

def LI():
    return [int(x) for x in sys.stdin.readline().split()]

def main():
    queue_I = queue.Queue()

    def I_thread(queue):
        result = I()
        queue.put(result)
    thread_I = threading.Thread(target=I_thread, args=(queue_I,))
    thread_I.start()
    thread_I.join()
    result_I = queue_I.get()
    N = result_I
    S = sorted(LI(), reverse=True)
    flag = [True] * len(S)
    current_values = []
    current_values.append(S[0])
    flag[0] = False
    for i in range(N):
        j = 0
        jM = len(current_values)
        for k in range(len(S)):
            if flag[k] and S[k] < current_values[j]:
                current_values.append(S[k])
                j += 1
                flag[k] = False
                if j == jM:
                    break
        else:
            return 'No'
        current_values.sort(reverse=True)
    return 'Yes'
if __name__ == '__main__':
    print(main())
import java.util.* ; public class codeforces_534_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int x = 0 ; int y = 0 ; for ( int i = 0 ; i < c ; i ++ ) { x += b ; if ( i % 2 == 0 ) { y += a ; } else { y -= a ; } } for ( int i = 0 ; i < d ; i ++ ) { if ( i % 2 == 0 ) { x -= a ; } else { x += a ; } } System.out.println ( x * 10 + y ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_672_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ 370 ] ; int k = 0 ; for ( int i = 1 ; i <= 370 ; i ++ ) { int x = i ; int c = 0 ; while ( x > 0 ) { x /= 10 ; c ++ ; } if ( c == 1 ) arr [ k ++ ] = i ; else if ( c == 2 ) { int a = i % 10 ; int b = i / 10 ; arr [ k ++ ] = a * 10 + b ; } else { int a = i % 10 ; int b = ( i / 10 ) % 10 ; int c = i / 100 ; arr [ k ++ ] = a + b * 10 + c * 100 ; } } System.out.println ( arr [ n - 1 ] ) ; } }
import java.util.* ; public class codeforces_148_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int x = t * k ; int y = x + ( f - t ) * k ; int z = y + ( c - f ) * k ; int w = z / ( k - x ) ; System.out.println ( w - 1 ) ; } }
import threading
import queue

def increment_upper_count(upper_increment, cu):
    return cu + upper_increment
import threading
import queue

def increment_lower_count(lower_increment, cl):
    return cl + lower_increment
txt = input()
cu = 0
cl = 0
for character in txt:
    upper_increment = 1
    if character.islower():
        lower_increment = 1
        lower_queue = queue.Queue()

        def lower_count_thread_function(queue):
            intermediate_result = increment_lower_count(lower_increment, cl)
            queue.put(intermediate_result)
        lower_thread = threading.Thread(target=lower_count_thread_function, args=(lower_queue,))
        lower_thread.start()
        lower_thread.join()
        result_increment_lower_count0 = lower_queue.get()
        cl = result_increment_lower_count0
    else:
        upper_queue = queue.Queue()

        def increment_upper_count_thread(queue):
            intermediate_result = increment_upper_count(upper_increment, cu)
            queue.put(intermediate_result)
        upper_thread = threading.Thread(target=increment_upper_count_thread, args=(upper_queue,))
        upper_thread.start()
        upper_thread.join()
        upper_count_result = upper_queue.get()
        cu = upper_count_result
if cu > cl:
    out = txt.upper()
else:
    out = txt.lower()
print(out)
import java.util.* ; public class codeforces_474_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int m = sc.nextInt ( ) ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } int [ ] res = new int [ m ] ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; res [ 0 ] += sum ; } for ( int i = 1 ; i < m ; i ++ ) { res [ i ] = res [ i - 1 ] + a [ b [ i ] - 1 ] ; } for ( int i = 0 ; i < m ; i ++ ) { System.out.println ( res [ i ] ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_267_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; long [ ] arr = new long [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { long a = sc.nextLong ( ) ; long b = sc.nextLong ( ) ; arr [ i ] = a - b ; } for ( int i = 0 ; i < n ; i ++ ) { System.out.println ( arr [ i ] ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC172_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long ans = 0 ; for ( int i = 1 ; i <= N ; i ++ ) { ans += i * ( N / i ) * ( N / i + 1 ) / 2 ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC112_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( ( a + b + c ) >= 2 ) { count ++ ; } } System.out.println ( count ) ; } }
from scipy.stats import ttest_ind
R = lambda : map(int, input().split())
(n, m, s, f) = R()
if s < f:
    d = 1
    c = 'R'
else:
    d = -1
    c = 'L'
res = ''
i = 1
current_position = s
(t, l, r) = R()
k = 1
while True:
    if current_position != f:
        if i > t and k < m:
            (t, l, r) = R()
            k = k + 1
        if i == t and (l <= current_position <= r or l <= current_position + d <= r):
            res = res + 'X'
        else:
            res += c
            current_position += d
        i += 1
    else:
        break
print(res)
import java.util.* ; import java.io.* ; public class codeforces_356_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = 0 ; } for ( int i = 0 ; i < m ; i ++ ) { int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; for ( int j = l - 1 ; j < r ; j ++ ) { if ( arr [ j ] == 0 && j + 1 != x ) { arr [ j ] = x ; } } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( arr [ i ] + " " ) ; } } }
import os
from sys import stdin, stdout

def Func_solve_0(test_case):
    a = int(stdin.readline().strip())
    print(1 if a == 0 else 0)
tcs = 1
test_case = 1
while test_case <= tcs:
    Func_solve_0(test_case)
    test_case += 1
import java.util.* ; public class atcoder_ABC158_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int A = sc.nextInt ( ) ; int B = sc.nextInt ( ) ; int ans = 0 ; int rep = N / ( A + B ) ; ans += rep * A ; int res = N - rep * ( A + B ) ; ans += Math.min ( res , A ) ; System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_296_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == 1 ) count ++ ; } if ( count >= 2 ) { System.out.println ( "hard" ) ; } else { System.out.println ( "easy" ) ; } } }
import java.util.* ; public class atcoder_AGC019_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; int h = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int ans = 0 ; if ( n % 2 == 0 ) { ans = Math.min ( Math.min ( q * 4 , h * 2 ) , s ) ; ans = Math.min ( ans , d ) ; ans = ans * ( n / 2 ) ; } else { ans = Math.min ( Math.min ( q * 4 , h * 2 ) , s ) ; ans = Math.min ( ans , d ) ; ans = ans * ( n / 2 ) ; ans += Math.min ( q * 2 , h ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC134_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] dp = new int [ N ] ; int len = 0 ; for ( int i = 0 ; i < N ; i ++ ) { int pos = Arrays.binarySearch ( dp , 0 , len , A [ i ] ) ; if ( pos < 0 ) { pos = - ( pos + 1 ) ; } dp [ pos ] = A [ i ] ; if ( pos == len ) { len ++ ; } } System.out.println ( len ) ; } }
import java.util.* ; public class codeforces_387_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h1 = sc.nextInt ( ) ; int m1 = sc.nextInt ( ) ; int h2 = sc.nextInt ( ) ; int m2 = sc.nextInt ( ) ; m1 += h1 * 60 ; m2 += h2 * 60 ; m2 -= m1 ; m2 %= 1440 ; System.out.println ( m2 / 60 + " " + m2 % 60 ) ; } }
import java.util.* ; public class codeforces_665_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int at = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int t1 = sc.nextInt ( ) ; int t2 = sc.nextInt ( ) ; int st = t2 + ( t1 - 5 ) * 60 ; int fin = st + at ; int now = 0 ; int ans = 0 ; while ( now < fin && now < 1140 ) { if ( now + b > st ) ans ++ ; now += b ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_154_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String x = sc.next ( ) ; int a = 0 , b = 0 ; for ( int j = 0 ; j < s.length ( ) ; j ++ ) { if ( s.charAt ( j ) == x.charAt ( 0 ) ) a ++ ; else if ( s.charAt ( j ) == x.charAt ( 1 ) ) b ++ ; else { ans += Math.min ( a , b ) ; a = b = 0 ; } } ans += Math.min ( a , b ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC150_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int num = sc.nextInt ( ) ; HashSet < Integer > set = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { set.add ( sc.nextInt ( ) ) ; } HashSet < Integer > twoTimesSet = new HashSet < > ( ) ; for ( Integer i : set ) { for ( int j = 1 ; j < 30 ; j ++ ) { i = i / 2 ; if ( i % 2 != 0 ) { twoTimesSet.add ( j ) ; break ; } } } if ( twoTimesSet.size ( ) != 1 ) { System.out.println ( 0 ) ; } else { ArrayList < Integer > list = new ArrayList < > ( set ) ; int lcm = list.get ( 0 ) ; for ( int i = 1 ; i < list.size ( ) ; i ++ ) { lcm = lcm * list.get ( i ) / gcd ( lcm , list.get ( i ) ) ; } System.out.println ( ( num - lcm / 2 ) / lcm + 1 ) ; } } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import threading
import queue

def sum_nodes(x, nodes):
    return nodes + x

def readInts():
    return map(int, input().split())

def dfs(g, visited, i):
    if i in visited:
        return (0, 0)
    visited.add(i)
    nodes = 1
    edges = len(g[i])
    for j in g[i]:
        queue_dfs0 = queue.Queue()

        def dfs_thread(queue):
            result = dfs(g, visited, j)
            queue.put(result)
        dfs_thread = threading.Thread(target=dfs_thread, args=(queue_dfs0,))
        dfs_thread.start()
        dfs_thread.join()
        result_dfs0 = queue_dfs0.get()
        (x, y) = result_dfs0
        queue_sum_nodes0 = queue.Queue()

        def sum_nodes_thread(queue):
            result = sum_nodes(x, nodes)
            queue.put(result)
        sum_thread = threading.Thread(target=sum_nodes_thread, args=(queue_sum_nodes0,))
        sum_thread.start()
        sum_thread.join()
        result_sum_nodes0 = queue_sum_nodes0.get()
        nodes = result_sum_nodes0
        edges += y
    return (nodes, edges)

def solve():
    line0 = []
    try:
        line0 = readInts()
    except EOFError:
        return False
    (n, m) = line0
    g = {}
    visited = set()

    def init_graph(i, stop, step):
        if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
            return
        g[i] = set()
        init_graph(i + step, stop, step)
    init_graph(1, n + 1, 1)
    for _ in range(m):
        (a, b) = readInts()
        g[a].add(b)
        g[b].add(a)
    ans = 0
    for i in range(1, n + 1):
        if i not in visited:
            (nodes, edges) = dfs(g, visited, i)
            if nodes > 1 and nodes % 2 == 1 and (2 * nodes == edges):
                ans += 1
    if (n - ans) % 2 == 1:
        ans += 1
    print(ans)
    return True
while solve():
    pass
import java.util.* ; public class codeforces_612_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ a [ i ] - 1 ] = i ; } int res = 0 ; for ( int i = 1 ; i < n ; i ++ ) { res += Math.abs ( b [ i ] - b [ i - 1 ] ) ; } System.out.println ( res ) ; } }
import java.util.* ; public class codeforces_583_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = 0 ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= cnt ) { cnt ++ ; ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_607_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; int [ ] b = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( a [ i ] == b [ j ] ) ans ++ ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_AGC010_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += a [ i ] ; } if ( sum % n != 0 ) { System.out.println ( "NO" ) ; return ; } int k = sum / n ; a = Arrays.copyOf ( a , n + 1 ) ; a [ n ] = a [ 0 ] ; boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( ( k - a [ i ] + a [ i + 1 ] ) % n != 0 ) { ok = false ; break ; } } if ( ok ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }
import java.util.* ; public class codeforces_190_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int min = Math.min ( n , m ) ; int max = Math.max ( n , m ) ; if ( min == 0 ) { System.out.println ( max + " " + max ) ; } else { System.out.println ( min + " " + ( min + max - 1 ) ) ; } } }
import java.util.* ; public class codeforces_387_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; int [ ] b = new int [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < m ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } int c = 0 ; int d = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] <= b [ d ] ) { c ++ ; d ++ ; } } System.out.println ( n - c ) ; } }
from scipy.stats import ttest_ind
import heapq
(n, m) = map(int, input().split())
x = []
y = []
for i in range(n):
    (day, salary) = map(int, input().split())
    heapq.heappush(x, (-day, -salary))
while x:
    (d, salary) = heapq.heappop(x)
    r = m - len(y)
    if r >= -d:
        heapq.heappush(y, -salary)
    else:
        heapq.heappush(y, -salary)
        heapq.heappop(y)
print(sum(y))
import sys

def main():
    s = input()
    if len(set(s)) == 1:
        print(0)
        sys.exit()
    a = [0] * 2
    for i in s:
        a[int(i)] += 1
    print(min(a) * 2)

if __name__ == "__main__":
    main()
from scipy.stats import ttest_ind
import threading
import queue

def compute_integer_division(divisor, dividend):
    return dividend // divisor

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result

class CodeforcesTask397BSolution:

    @my_decorator
    def __init__(self):
        self.result = ''
        self.t = 0
        self.queries = []

    def read_input(self):
        self.t = int(input())

        def read_queries(i, stop, step):
            if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
                return
            self.queries.append([int(x) for x in input().split(' ')])
            read_queries(i + step, stop, step)
        read_queries(0, self.t, 1)

    def process_task(self):
        res = []
        for query in self.queries:
            dividend = query[0]
            divisor = query[1]
            integer_division_queue = queue.Queue()

            def compute_integer_division_thread(queue):
                result = compute_integer_division(divisor, dividend)
                queue.put(result)
            integer_division_thread = threading.Thread(target=compute_integer_division_thread, args=(integer_division_queue,))
            integer_division_thread.start()
            integer_division_thread.join()
            integer_division_result = integer_division_queue.get()
            k = integer_division_result
            res.append('Yes' if k * query[2] >= query[0] else 'No')
        self.result = '\n'.join(res)

    def get_result(self):
        return self.result
if __name__ == '__main__':
    Solution = CodeforcesTask397BSolution()
    Solution.read_input()
    Solution.process_task()
    print(Solution.get_result())

import java.util.* ; import java.io.* ; public class atcoder_ABC148_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int ta = sc.nextInt ( ) ; int ao = sc.nextInt ( ) ; ArrayList < ArrayList < Integer >> graph = new ArrayList < > ( ) ; for ( int i = 0 ; i <= n ; i ++ ) { graph.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; graph.get ( u ).add ( v ) ; graph.get ( v ).add ( u ) ; } int [ ] ta_dist = new int [ n + 1 ] ; int [ ] ao_dist = new int [ n + 1 ] ; Queue < Integer > q = new LinkedList < > ( ) ; q.add ( ta ) ; ta_dist [ ta ] = 0 ; while ( ! q.isEmpty ( ) ) { int u = q.poll ( ) ; for ( int v : graph.get ( u ) ) { if ( ta_dist [ v ] == 0 ) { ta_dist [ v ] = ta_dist [ u ] + 1 ; q.add ( v ) ; } } } q.add ( ao ) ; ao_dist [ ao ] = 0 ; while ( ! q.isEmpty ( ) ) { int u = q.poll ( ) ; for ( int v : graph.get ( u ) ) { if ( ao_dist [ v ] == 0 ) { ao_dist [ v ] = ao_dist [ u ] + 1 ; q.add ( v ) ; } } } int res = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( ta_dist [ i ] > ao_dist [ i ] ) continue ; res = Math.max ( res , ao_dist [ i ] ) ; } System.out.println ( res - 1 ) ; } }
import java.util.* ; public class atcoder_ABC070_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int ans = 0 ; if ( b <= d || c <= a ) { ans = 0 ; } else { ans = Math.min ( b , d ) - Math.max ( a , c ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC152_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 1 ; int pos = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ pos ] > arr [ i ] ) { count ++ ; pos = i ; } } System.out.println ( count ) ; } }
import numpy as np
n = int(input())
x = list(map(int, input().split()))
a = []
b = []
for i in range(0, n):
    if i % 2 == 0:
        a.append(x[i])
    else:
        b.append(x[i])
cnta = [0] * (100002 + 1)
cntb = [0] * (100002 + 1)
vala = 0
vala1 = 0
maxCnta = 0
maxCnta1 = 0
for i in a:
    cnta[i] += 1
for i in a:
    if maxCnta < cnta[i]:
        vala = i
        maxCnta = cnta[i]
for i in a:
    if maxCnta1 < cnta[i] and vala != i:
        maxCnta1 = cnta[i]
        vala1 = i
valb = 0
valb1 = 0
maxCntb = 0
maxCntb1 = 0
for i in b:
    cntb[i] += 1
for i in b:
    if maxCntb < cntb[i]:
        valb = i
        maxCntb = cntb[i]
for i in b:
    if maxCntb1 < cntb[i] and valb != i:
        maxCntb1 = cntb[i]
        valb1 = i
if valb != vala:
    res = 0
    for i in a:
        if i != vala:
            res += 1
    for i in b:
        if i != valb:
            res += 1
    print(res)
else:
    resa = 0
    resb = 0
    resa1 = 0
    resb1 = 0
    for i in a:
        if i != vala:
            resa += 1
        if i != vala1:
            resa1 += 1
    for i in b:
        if i != valb:
            resb += 1
        if i != valb1:
            resb1 += 1
    print(np.min(np.array([resa + resb1, resa1 + resb])))
import java.util.* ; public class codeforces_268_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; ArrayList < String > arr = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr.add ( sc.next ( ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i != j ) { if ( arr.get ( i ).charAt ( 0 ) == arr.get ( j ).charAt ( arr.get ( j ).length ( ) - 1 ) ) { count ++ ; } } } } System.out.println ( count ) ; } }
import java.util.* ; public class codeforces_651_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int ans = x + y ; if ( x > y ) { ans -= 2 ; } if ( x == y ) { ans -= 1 ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_274_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int arr [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } HashSet < Integer > set = new HashSet < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % k != 0 ) { if ( ! set.contains ( arr [ i ] ) ) { set.add ( arr [ i ] ) ; count ++ ; } } } System.out.println ( count ) ; } }
import java.util.* ; public class codeforces_306_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] a = new int [ m ] ; int q = n / m ; int r = n % m ; for ( int i = 0 ; i < m ; i ++ ) { a [ i ] = q ; } for ( int i = 0 ; i < r ; i ++ ) { a [ i ] ++ ; } for ( int i = 0 ; i < m ; i ++ ) { System.out.print ( a [ i ] + " " ) ; } } }
import java.util.* ; public class codeforces_400_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; for ( int j = 0 ; j < m ; j ++ ) { if ( s.charAt ( j ) == 'G' ) { for ( int k = j + 1 ; k < m ; k ++ ) { if ( s.charAt ( k ) == 'T' ) { count ++ ; break ; } } } else if ( s.charAt ( j ) == 'T' ) { for ( int k = j - 1 ; k >= 0 ; k -- ) { if ( s.charAt ( k ) == 'G' ) { count ++ ; break ; } } } } } System.out.println ( count ) ; } }
import java.util.* ; public class codeforces_327_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) cnt ++ ; } int ans = cnt ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '0' ) { int j = i ; while ( j < n && s.charAt ( j ) == '0' ) j ++ ; if ( j == n ) break ; int cnt1 = 0 , cnt2 = 0 ; for ( int k = i - 1 ; k >= 0 ; k -- ) if ( s.charAt ( k ) == '1' ) cnt1 ++ ; for ( int k = j ; k < n ; k ++ ) if ( s.charAt ( k ) == '1' ) cnt2 ++ ; ans = Math.max ( ans , cnt + cnt1 + cnt2 ) ; i = j - 1 ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_567_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { int min = Integer.MAX_VALUE ; int max = Integer.MIN_VALUE ; for ( int j = 0 ; j < n ; j ++ ) { if ( i != j ) { min = Math.min ( min , arr [ j ] ) ; max = Math.max ( max , arr [ j ] ) ; } } System.out.println ( ( max - arr [ i ] ) + " " + ( arr [ i ] - min ) ) ; } } }
import java.util.* ; public class atcoder_ABC109_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String [ ] arr = new String [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.next ( ) ; } String ans = "Yes" ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { if ( arr [ i ].charAt ( arr [ i ].length ( ) - 1 ) != arr [ j ].charAt ( 0 ) ) { ans = "No" ; break ; } } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_579_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = 0 ; while ( n > 0 ) { x ++ ; n = n - ( int ) ( Math.pow ( 2 , x ) ) ; } System.out.println ( x ) ; } }
import java.util.* ; public class codeforces_189_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int ans = 0 ; if ( a == b && b == c ) { ans = n / a ; } else if ( a == b ) { int x = n / a ; int y = n / c ; ans = Math.max ( x , y ) ; } else { int x = n / a ; int y = n / b ; int z = n / c ; ans = Math.max ( x , Math.max ( y , z ) ) ; } System.out.println ( ans ) ; } }
import threading
import queue
(N, K) = map(int, input().split())
S = input()
aaaa = False
if K >= 15:
    aaaa = True
elif 2 ** K >= N:
    aaaa = True
if aaaa:
    print(min(S) * N)
    exit()

def Func_get_last_dict_0(s_str):
    U = s_str + s_str[::-1]
    c = min(s_str)
    p = U.index(c)
    minindex = p
    p += 1
    whileloopchecker120 = 357
    whileloopchecker220 = 356
    while whileloopchecker120 % whileloopchecker220 == 1:
        whileloopchecker120 += 1
        while p <= N:
            if U[p] == c:
                if check_normal_dict(U, minindex, p):
                    minindex = p
            p += 1
    return U[minindex:minindex + N]

def check_normal_dict(u, pointer1, pointer2):
    for i in range(N):
        if u[pointer1 + i] > u[pointer2 + i]:
            return True
        elif u[pointer1 + i] < u[pointer2 + i]:
            return False
    return False
queue_get_last_dict0 = queue.Queue()

def get_last_dict_thread(queue):
    result = Func_get_last_dict_0(S)
    queue.put(result)
thread_get_last_dict0 = threading.Thread(target=get_last_dict_thread, args=(queue_get_last_dict0,))
thread_get_last_dict0.start()
thread_get_last_dict0.join()
result_get_last_dict0 = queue_get_last_dict0.get()
S = result_get_last_dict0
if K == 1:
    print(S)
else:
    count = 0
    for c in S:
        if c == S[0]:
            count += 1
        else:
            break
    if count * 2 ** (K - 1) >= N:
        print(S[0] * N)
    else:
        S = S[0] * (count * (2 ** (K - 1) - 1)) + S
        print(S[0:N])
import java.util.* ; import java.io.* ; public class codeforces_222_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = k - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] != arr [ k - 1 ] ) { break ; } count ++ ; } if ( arr [ k - 1 ] == 1 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] != 1 ) { count = - 1 ; break ; } } } System.out.println ( count ) ; } }
import java.util.* ; public class atcoder_ABC165_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int Q = sc.nextInt ( ) ; int [ ] a = new int [ Q ] ; int [ ] b = new int [ Q ] ; int [ ] c = new int [ Q ] ; int [ ] d = new int [ Q ] ; for ( int i = 0 ; i < Q ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ i ] = sc.nextInt ( ) ; c [ i ] = sc.nextInt ( ) ; d [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 1 ; i <= M ; i ++ ) { for ( int j = 1 ; j <= M ; j ++ ) { for ( int k = 1 ; k <= M ; k ++ ) { for ( int l = 1 ; l <= M ; l ++ ) { int [ ] A = { i , j , k , l } ; int sum = 0 ; for ( int q = 0 ; q < Q ; q ++ ) { if ( A [ b [ q ] - 1 ] - A [ a [ q ] - 1 ] == c [ q ] ) sum += d [ q ] ; } ans = Math.max ( ans , sum ) ; } } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_203_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; for ( int j = x - 2 ; j <= x ; j ++ ) { for ( int k = y - 2 ; k <= y ; k ++ ) { if ( j >= 0 && j < n && k >= 0 && k < n ) { arr [ j ] [ k ] ++ ; } } } } int ans = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ j ] >= 8 ) { ans = i + 1 ; break ; } } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_287_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = 4 ; int [ ] [ ] arr = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; for ( int j = 0 ; j < n ; j ++ ) { if ( s.charAt ( j ) == '#' ) arr [ i ] [ j ] = 1 ; else arr [ i ] [ j ] = 0 ; } } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { int sum = 0 ; sum += arr [ i ] [ j ] ; sum += arr [ i ] [ j + 1 ] ; sum += arr [ i + 1 ] [ j ] ; sum += arr [ i + 1 ] [ j + 1 ] ; if ( sum == 0 || sum == 4 ) ans = 1 ; } } if ( ans == 1 ) System.out.println ( "YES" ) ; else System.out.println ( "NO" ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_37_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int count = 1 ; int max = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] == arr [ i - 1 ] ) { count ++ ; } else { if ( count > max ) { max = count ; } count = 1 ; } } if ( count > max ) { max = count ; } System.out.println ( max + " " + n ) ; } }
import threading
import queue
(N, X) = [int(_) for _ in input().split()]
from itertools import permutations

def calc(x):

    def Func_sub_0(y, debug=0):
        if debug:
            print('D', y)
        while len(y) > 1:
            y = [sorted(y[i:i + 3])[1] for i in range(len(y) - 2)]
            if debug:
                print('D', y)
        return y
    sub_result_queue = queue.Queue()

    def Func_sub_thread_0(queue):
        result = Func_sub_0(x)
        queue.put(result)
    thread_sub0 = threading.Thread(target=sub_thread, args=(sub_result_queue,))
    thread_sub0.start()
    thread_sub0.join()
    result_sub0 = sub_result_queue.get()
    y = result_sub0
    if y[0] == 2:
        pass
        Func_sub_0(x, 1)
        print('=', x)
    return y[0]
if (X == 1 or X == N * 2 - 1):
    print('No')
else:
    print('Yes')
    if X == N * 2 - 2:
        modified_sequence = list(range(N - 1, X + 2)) + list(range(1, N - 1))
    else:
        ys = list(range(1, X - 1)) + list(range(X + 3, N * 2))
        modified_sequence = ys[:N - 3] + [X + 2, X - 1, X, X + 1] + ys[N - 3:]
    for x in modified_sequence:
        print(x)
import java.util.* ; public class codeforces_632_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; String s = sc.next ( ) ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int pScore = 0 , sScore = 0 , pMaxScore = 0 , sMaxScore = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'A' ) { pScore += arr [ i ] ; if ( pScore > pMaxScore ) { pMaxScore = pScore ; } } else { pScore -= arr [ i ] ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s.charAt ( i ) == 'A' ) { sScore += arr [ i ] ; if ( sScore > sMaxScore ) { sMaxScore = sScore ; } } else { sScore -= arr [ i ] ; } } if ( pMaxScore > sMaxScore ) { System.out.println ( pMaxScore ) ; } else { System.out.println ( sMaxScore ) ; } } }
import java.util.* ; public class codeforces_110_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = "" ; for ( int i = 0 ; i < n ; i ++ ) { s += "abcd" ; } System.out.println ( s ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC034_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == 'A' ) { sb.append ( 'A' ) ; } else if ( s.charAt ( i ) == 'B' ) { if ( i + 1 < s.length ( ) && s.charAt ( i + 1 ) == 'C' ) { sb.append ( 'D' ) ; i ++ ; } else { sb.append ( 'X' ) ; } } else { sb.append ( 'X' ) ; } } StringBuilder sb2 = new StringBuilder ( ) ; for ( int i = 0 ; i < sb.length ( ) ; i ++ ) { if ( sb.charAt ( i ) == 'A' ) { sb2.append ( 'A' ) ; } else if ( sb.charAt ( i ) == 'D' ) { sb2.append ( 'D' ) ; } else { sb2.append ( 'X' ) ; } } long ans = 0 ; long cnt = 0 ; for ( int i = 0 ; i < sb2.length ( ) ; i ++ ) { if ( sb2.charAt ( i ) == 'A' ) { cnt ++ ; } else if ( sb2.charAt ( i ) == 'D' ) { ans += cnt ; } else { cnt = 0 ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC110_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; String t = sc.next ( ) ; int [ ] s_count = new int [ 26 ] ; int [ ] t_count = new int [ 26 ] ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { s_count [ s.charAt ( i ) - 'a' ] ++ ; } for ( int i = 0 ; i < t.length ( ) ; i ++ ) { t_count [ t.charAt ( i ) - 'a' ] ++ ; } Arrays.sort ( s_count ) ; Arrays.sort ( t_count ) ; boolean flag = true ; for ( int i = 0 ; i < 26 ; i ++ ) { if ( s_count [ i ] != t_count [ i ] ) { flag = false ; break ; } } if ( flag ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC123_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int ans = 0 ; for ( int i = 1 ; i < n ; i ++ ) { ans += a [ i ] ; } ans += a [ 0 ] ; System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC025_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; if ( ( p == 1 && v == 1 ) || ( p == 1 && t == 1 ) || ( v == 1 && t == 1 ) ) { count ++ ; } } System.out.println ( count ) ; } }
import threading
import queue

def diff_y(y1, y2):
    return y2 - y1

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
import threading
import queue

@my_decorator
def diff_x(x1, x2):
    return x2 - x1
from scipy.stats import ttest_ind
p = input().split(' ')
x1 = int(p[0])
y1 = int(p[1])
x2 = int(p[2])
y2 = int(p[3])
queue_diff_x = queue.Queue()

def diff_x_thread_func(queue):
    diff_1 = diff_x(x1, x2)
    queue.put(diff_1)
thread_diff_x = threading.Thread(target=diff_x_thread_func, args=(queue_diff_x,))
thread_diff_x.start()
thread_diff_x.join()
result_diff_x = queue_diff_x.get()
DIF1 = result_diff_x
queue_diff_y = queue.Queue()

def diff_y_thread_func(queue):
    diff_1 = diff_y(y1, y2)
    queue.put(diff_1)
thread_diff_y = threading.Thread(target=diff_y_thread_func, args=(queue_diff_y,))
thread_diff_y.start()
thread_diff_y.join()
result_diff_y = queue_diff_y.get()
DIF2 = result_diff_y
x3 = x2 - DIF2
y3 = y2 + DIF1
x4 = x1 - DIF2
ttest_ind([64, 11, 56], [7, 43, 27])
y4 = y1 + DIF1
print(str(x3) + ' ' + str(y3) + ' ' + str(x4) + ' ' + str(y4))
import java.util.* ; public class atcoder_ABC171_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int xor = 0 ; for ( int i = 0 ; i < n ; i ++ ) { xor ^= arr [ i ] ; } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( ( xor ^ arr [ i ] ) + " " ) ; } } }
import java.util.* ; public class codeforces_445_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; char [ ] [ ] arr = new char [ n ] [ m ] ; for ( int i = 0 ; i < n ; i ++ ) { String s = sc.next ( ) ; for ( int j = 0 ; j < m ; j ++ ) { arr [ i ] [ j ] = s.charAt ( j ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( arr [ i ] [ j ] == '.' ) { if ( ( i + j ) % 2 == 0 ) { arr [ i ] [ j ] = 'B' ; } else { arr [ i ] [ j ] = 'W' ; } } } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { System.out.print ( arr [ i ] [ j ] ) ; } System.out.println ( ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC143_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] l = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { l [ i ] = sc.nextInt ( ) ; } Arrays.sort ( l ) ; long ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int a = l [ i ] ; int b = l [ j ] ; int c = a + b ; int d = b - a ; int e = a - b ; int f = c - d ; int g = c - e ; int h = d - e ; int k = f - g ; int l = g - h ; int m = h - k ; int n = k - l ; int o = l - m ; int p = m - o ; int q = o - p ; int r = p - q ; int s = q - r ; int t = r - s ; int u = s - t ; int v = t - u ; int w = u - v ; int x = v - w ; int y = w - x ; int z = x - y ; int A = y - z ; int B = z - A ; int C = A - B ; int D = B - C ; int E = C - D ; int F = D - E ; int G = E - F ; int H = F - G ; int I = G - H ; int J = H - I ; int K = I - J ; int L = J - K ; int M = K - L ; int N = L - M ; int O = M - N ; int P = N - O ; int Q = O - P ; int R = P - Q ; int S = Q - R ; int T = R - S ; int U = S - T ; int V = T - U ; int W = U - V ; int X = V - W ; int Y = W - X ; int Z = X - Y ; int AA = Y - Z ; int BB = Z - AA ; int CC = AA - BB ; int DD = BB - CC ; int EE = CC - DD ; int FF = DD - EE ; int GG = EE - FF ; int HH = FF - GG ; int II = GG - HH ; int JJ = HH - II ; int KK = II - JJ ; int LL = JJ - KK ; int MM = KK - LL ; int NN = LL - MM ; int OO = MM - NN ; int PP = NN - OO ; int QQ = OO - PP ; int RR = PP - QQ ; int SS = QQ - RR ; int TT = RR - SS ; int UU = SS - TT ; int VV = TT - UU ; int WW = UU - VV ; int XX = VV - WW ; int YY = WW - XX ; int ZZ = XX - YY ; int AAA = YY - ZZ ; int BBB = ZZ - AAA ; int CCC = AAA - BBB ; int DDD = BBB - CCC ; int EEE = CCC - DDD ; int FFF = DDD - EEE ; int GGG = EEE - FFF ; int HHH = FFF - GGG ; int III = GGG - HHH ; int JJJ = HHH - III ; int KKK = III - JJJ ; int LLL = JJJ - KKK ; int MMM = KKK - LLL ; int NNN = LLL - MMM ; int OOO = MMM - NNN ; int PPP = NNN - OOO ; int QQQ = OOO - PPP ; int RRR = PPP - QQQ ; int SSS = QQQ - RRR ; int TTT = RRR - SSS ; int UUU = SSS - TTT ; int VVV = TTT - UUU ; int WWW = UUU - VVV ; int XXX = VVV - WWW ; int YYY = WWW - XXX ; int ZZZ = XXX - YYY ; int AAAA = YYY - ZZZ ; int BBBB = ZZZ - AAAA ; int CCCC = AAAA - BBBB ; int DDDD = BBBB - CCCC ; int EEEE = CCCC - DDDD ; int FFFF = DDDD - EEEE ; int GGGG = EEEE - FFFF ; int HHHH = FFFF - GGGG ; int IIII = GGGG - HHHH ; int JJJJ = HHHH - IIII ; int KKKK = IIII - JJJJ ; int LLLL = JJJJ - KKKK ; int MMMM = KKKK - LLLL ; int NNNN = LLLL - MMMM ; int OOOO = MMMM - NNNN ; int PPPP = NNNN - OOOO ; int QQQQ = OOOO - PPPP ; int RRRR = PPPP - QQQQ ; int SSSS = QQQQ - RRRR ; int TTTT = RRRR - SSSS ; int UUUU = SSSS - TTTT ; int VVVV = TTTT - UUUU ; int WWWW = UUUU - VVVV ; int XXXX = VVVV - WWWW ; int YYYY = WWWW - XXXX ; int ZZZZ = XXXX - YYYY ; int AAAAA = YYYY - ZZZZ ; int BBBBB = ZZZZ - AAAAA ; int CCCCC = AAAAA - BBBBB ; int DDDDD = BBBBB - CCCCC ; int EEEEE = CCCCC - DDDDD ; int FFFFF = DDDDD - EEEEE ; int GGGGG = EEEEE - FFFFF ; int HHHHH = FFFFF - GGGGG ; int IIIII = GGGGG - HHHHH ; int JJJJJ = HHHHH - IIIII ; int KKKKK = IIIII - JJJJJ ; int LLLLL = JJJJJ - KKKKK ; int MMMMM = KKKKK - LLLLL ; int NNNNN = LLLLL - MMMMM ; int OOOOO = MMMMM - NNNNN ; int PPPPP = NNNNN - OOOOO ; int QQQQQ = OOOOO - PPPPP ; int RRRRR = PPPPP - QQQQQ ; int SSSSS = QQQQQ - RRRRR ; int TTTTT = RRRRR - SSSSS ; int UUUUU = SSSSS - TTTTT ; int VVVVV = TTTTT - UUUUU ; int WWWWW = UUUUU - VVVVV ; int XXXXX = VVVVV - WWWWW ; int YYYYY = WWWWW - XXXXX ; int ZZZZZ = XXXXX - YYYYY ; int AAAAAA = YYYYY - ZZZZZ ; int BBBBBB = ZZZZZ - AAAAAA ; int CCCCCC = AAAAAA - BBBBBB ; int DDDDDD = BBBBBB - CCCCCC ; int EEEEEE = CCCCCC - DDDDDD ; int FFFFFF = DDDDDD - EEEEEE ; int GGGGGG = EEEEEE - FFFFFF ; int HHHHHH = FFFFFF - GGGGGG ; int IIIIII = GGGGGG - HHHHHH ; int JJJJJJ = HHHHHH - IIIIII ; int KKKKKK = IIIIII - JJJJJJ ; int LLLLLL = JJJJJJ - KKKKKK ; int MMMMMM = KKKKKK - LLLLLL ; int NNNNNN = LLLLLL - MMMMMM ; int OOOOOO = MMMMMM - NNNNNN ; int PPPPPP = NNNNNN - OOOOOO ; int QQQQQQ = OOOOOO - PPPPPP ; int RRRRRR = PPPPPP - QQQQQQ ; int SSSSSS = QQQQQQ - RRRRRR ; int TTTTTT = RRRRRR - SSSSSS ; int UUUUUU = SSSSSS - TTTTTT ; int VVVVVV = TTTTTT - UUUUUU ; int WWWWWW = UUUUUU - VVVVVV ; int XXXXXX = VVVVVV - WWWWWW ; int YYYYYY = WWWWWW - XXXXXX ; int ZZZZZZ = XXXXXX - YYYYYY ; int AAAAAAA = YYYYYY - ZZZZZZ ; int BBBBBBB = ZZZZZZ - AAAAAAA ; int CCCCCCC = AAAAAAA - BBBBBBB ; int DDDDDDD = BBBBBBB - CCCCCCC ; int EEEEEEE = CCCCCCC - DDDDDDD ; int FFFFFFF = DDDDDDD - EEEEEEE ; int GGGGGGG = EEEEEEE - FFFFFFF ; int HHHHHHH = FFFFFFF - GGGGGGG ; int IIIIIII = GGGGGGG - HHHHHHH ; int JJJJJJJ = HHHHHHH - IIIIIII ; int KKKKKKK = IIIIIII - JJJJJJJ ; int LLLLLLL = JJJJJJJ - KKKKKKK ; int MMMMMMM = KKKKKKK - LLLLLLL ; int NNNNNNN = LLLLLLL - MMMMMMM ; int OOOOOOO = MMMMMMM - NNNNNNN ; int PPPPPPP = NNNNNNN - OOOOOOO ; int QQQQQQQ = OOOOOOO - PPPPPPP ; int RRRRRRR = PPPPPPP - QQQQQQQ ; int SSSSSSS = QQQQQQQ - RRRRRRR ; int TTTTTTT = RRRRRRR - SSSSSSS ; int UUUUUUU = SSSSSSS - TTTTTTT ; int VVVVVVV = TTTTTTT - UUUUUUU ; int WWWWWWW = UUUUUUU - VVVVVVV ; int XXXXXXX = VVVVVVV - WWWWWWW ; int YYYYYYY = WWWWWWW - XXXXXXX ; int ZZZZZZZ = XXXXXXX - YYYYYYY ; int AAAAAAAA = YYYYYYY - ZZZZZZZ ; int BBBBBBBB = ZZZZZZZ - AAAAAAAA ; int CCCCCCCC = AAAAAAAA - BBBBBBBB ; int DDDDDDDD = BBBBBBBB - CCCCCCCC ; int EEEEEEEE = CCCCCCCC - DDDDDDDD ; int FFFFFFFF = DDDDDDDD - EEEEEEEE ; int GGGGGGGG = EEEEEEEE - FFFFFFFF ; int HHHHHHHH = FFFFFFFF - GGGGGGGG ; int IIIIIIII = GGGGGGGG - HHHHHHHH ; int JJJJJJJJ = HHHHHHHH - IIIIIIII ; int KKKKKKKK = IIIIIIII - JJJJJJJJ ; int LLLLLLLL = JJJJJJJJ - KKKKKKKK ; int MMMMMMMM = KKKKKKKK - LLLLLLLL ; int NNNNNNNN = LLLLLLLL - MMMMMMMM ; int OOOOOOOO = MMMMMMMM - NNNNNNNN ; int PPPPPPPP = NNNNNNNN - OOOOOOOO ; int
import java.util.* ; public class codeforces_30_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int x = 0 ; for ( int i = 0 ; i < 1000 ; i ++ ) { if ( a * ( int ) Math.pow ( i , k ) == b ) { x = i ; break ; } } System.out.println ( x ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC142_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] arr2 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr2 [ i ] = i + 1 ; } Arrays.sort ( arr ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] == arr2 [ j ] ) { System.out.print ( j + 1 + " " ) ; arr2 [ j ] = - 1 ; break ; } } } } }
import java.util.* ; public class atcoder_ABC171_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { sum += arr [ i ] ; } System.out.println ( sum ) ; } }

import java.util.* ; import java.io.* ; public class codeforces_106_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 4 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; arr [ i ] [ 2 ] = sc.nextInt ( ) ; arr [ i ] [ 3 ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( arr [ i ] [ 0 ] < arr [ j ] [ 0 ] && arr [ i ] [ 1 ] < arr [ j ] [ 1 ] && arr [ i ] [ 2 ] < arr [ j ] [ 2 ] ) { count ++ ; break ; } } } System.out.println ( n - count ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC002_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a > 0 ) { System.out.println ( "Positive" ) ; } else if ( a <= 0 && b >= 0 ) { System.out.println ( "Zero" ) ; } else if ( ( a + b ) % 2 == 0 ) { System.out.println ( "Negative" ) ; } else { System.out.println ( "Positive" ) ; } } }
import java.util.* ; public class atcoder_ABC140_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int K = sc.nextInt ( ) ; String S = sc.next ( ) ; int segCnt = 0 ; for ( int i = 0 ; i < N - 1 ; i ++ ) { if ( S.charAt ( i ) != S.charAt ( i + 1 ) ) { segCnt ++ ; } } int curHappy = N - 1 - segCnt ; if ( 2 * K >= segCnt ) { System.out.println ( N - 1 ) ; } else { System.out.println ( curHappy + 2 * K ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC167_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int [ ] [ ] C = new int [ N ] [ M + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j <= M ; j ++ ) { C [ i ] [ j ] = sc.nextInt ( ) ; } } int ans = Integer.MAX_VALUE ; for ( int i = 0 ; i < ( 1 << N ) ; i ++ ) { int [ ] A = new int [ M + 1 ] ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( i & ( 1 << j ) ) != 0 ) { for ( int k = 0 ; k <= M ; k ++ ) { A [ k ] += C [ j ] [ k ] ; } } } boolean ok = true ; for ( int j = 1 ; j <= M ; j ++ ) { if ( A [ j ] < X ) { ok = false ; break ; } } if ( ok ) { int sum = 0 ; for ( int j = 0 ; j < M + 1 ; j ++ ) { sum += A [ j ] ; } ans = Math.min ( ans , sum ) ; } } if ( ans == Integer.MAX_VALUE ) { System.out.println ( - 1 ) ; } else { System.out.println ( ans ) ; } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC143_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int ans = a - 2 * b ; if ( ans < 0 ) { ans = 0 ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC139_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int hole = 1 ; int i = 0 ; boolean check = true ; while ( check ) { if ( hole >= b ) { check = false ; } else { hole = a * ( i + 1 ) - i ; i ++ ; } } System.out.println ( i ) ; } }
import java.util.* ; public class atcoder_ABC124_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( i == j ) { ans += m ; } } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_25_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; if ( arr [ i ] % 2 == 0 ) count ++ ; } if ( count == n ) { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 != 0 ) { System.out.println ( i + 1 ) ; break ; } } } else { for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { System.out.println ( i + 1 ) ; break ; } } } } }
import java.util.* ; public class codeforces_282_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int a = 0 , g = 0 ; String s = "" ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; if ( a + x <= 500 ) { a += x ; s += "A" ; } else { g += y ; s += "G" ; } } System.out.println ( s ) ; } }
import threading
import queue

def calculate_sum_of_powers(variable_6_23, variable_3_23, variable_4_23):
    return variable_4_23 ** variable_6_23 + variable_3_23
import datetime

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result

@my_decorator
def Func_main_0():
    from sys import setrecursionlimit, stdin
    from os import environ
    from collections import defaultdict, deque, Counter
    from math import ceil, floor, gcd
    from itertools import accumulate, combinations, combinations_with_replacement
    setrecursionlimit(10 ** 6)
    debug_print = (lambda *something: print(*something)) if 'TERM_PROGRAM' in environ else lambda *x: 0
    input = lambda : stdin.readline().rstrip()
    LMIIS = lambda : list(map(int, input().split()))
    datetime.datetime.now()
    read_int = lambda : int(input())
    variable_3_23 = 7
    variable_4_23 = 10
    variable_6_23 = 9
    result_queue = queue.Queue()

    def calculation_thread(queue):
        result = calculate_sum_of_powers(variable_6_23, variable_3_23, variable_4_23)
        queue.put(result)
    worker_thread = threading.Thread(target=calculation_thread, args=(result_queue,))
    worker_thread.start()
    worker_thread.join()
    calculated_value = result_queue.get()
    P = calculated_value
    INF = 10 ** 9 + 10
    (sa, sb) = input().split()
    a = int(sa)
    b = int(float(sb) * 100 + 0.1)
    print(a * b // 100)
Func_main_0()
import java.util.* ; public class codeforces_350_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] dp = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { dp [ i ] = dp [ a [ i ] ] + 1 ; } int mx = 0 ; int mx_ind = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( dp [ i ] > mx ) { mx = dp [ i ] ; mx_ind = i ; } } System.out.println ( mx ) ; ArrayList < Integer > ans = new ArrayList < > ( ) ; while ( mx_ind != 0 ) { ans.add ( mx_ind ) ; mx_ind = a [ mx_ind ] ; } Collections.reverse ( ans ) ; for ( int i = 0 ; i < ans.size ( ) ; i ++ ) { System.out.print ( ans.get ( i ) + " " ) ; } } }
import java.util.* ; public class atcoder_ABC142_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int t = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc.nextInt ( ) ; if ( x % 2 == 0 ) x -- ; t += x ; } System.out.println ( ( double ) t / n ) ; } }
import java.util.* ; public class codeforces_333_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ 2 * n + 1 ] ; for ( int i = 0 ; i < m ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; arr [ x ] = 1 ; arr [ n + y ] = 1 ; } int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( arr [ i ] == 0 ) count ++ ; } System.out.println ( count ) ; } }
import java.util.* ; public class atcoder_ABC166_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] [ ] graph = new int [ n + 1 ] [ ] ; for ( int i = 0 ; i < m ; i ++ ) { int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; graph [ u ] [ 0 ] ++ ; graph [ u ] [ graph [ u ] [ 0 ] ] = v ; graph [ v ] [ 0 ] ++ ; graph [ v ] [ graph [ v ] [ 0 ] ] = u ; } int count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int flag = 0 ; for ( int j = 1 ; j <= graph [ i ] [ 0 ] ; j ++ ) { if ( arr [ i ] > arr [ graph [ i ] [ j ] ] ) { flag = 1 ; break ; } } if ( flag == 0 ) { count ++ ; } } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_79_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = 0 ; while ( x >= 0 && y >= 22 || ( x >= 1 && y >= 12 ) || ( x >= 2 && y >= 2 ) ) { if ( a == 0 ) { if ( y >= 22 ) { y -= 22 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else if ( x >= 2 && y >= 2 ) { x -= 2 ; y -= 2 ; } else { x -= 22 ; } } else { if ( y >= 22 ) { y -= 22 ; } else if ( x >= 1 && y >= 12 ) { x -= 1 ; y -= 12 ; } else if ( x >= 2 && y >= 2 ) { x -= 2 ; y -= 2 ; } else { x -= 22 ; } } a = 1 - a ; } System.out.println ( a == 0 ? "Ciel" : "Hanako" ) ; } }
import sys


def dfs(links, n, k, v, p):
    height_from_leaf = 0
    cut_count = 0
    for u in links[v]:
        if u == 0:
            continue
        hgt, cut = dfs(links, n, k, u, v)
        height_from_leaf = max(height_from_leaf, hgt)
        cut_count += cut
    height_from_leaf += 1
    if p != 0 and height_from_leaf == k:
        height_from_leaf = 0
        cut_count += 1
    return height_from_leaf, cut_count


(n, k, *aaa) = map(int, sys.stdin.buffer.read().split())
links = [set() for _ in range(n)]
for (i, a) in enumerate(aaa):
    a -= 1
    links[a].add(i)
_, min_cuts = dfs(links, n, k, 0, 0)
if aaa[0] != 1:
    min_cuts += 1
print(min_cuts)
import java.io.* ; import java.util.* ; public class atcoder_ABC174_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int k = sc.nextInt ( ) ; int t = 0 ; for ( int i = 1 ; i <= k ; i ++ ) { t = ( t % k ) * 10 + 7 ; if ( t % k == 0 ) { System.out.println ( i ) ; return ; } } System.out.println ( - 1 ) ; } }

from math import *

def calculate_angle_difference(a, b, h, m):
    C = abs(360 / 60 * m - 360 / 12 * h - 360 / 12 / 60 * m)
    if C > 180:
        C = 360 - C
    cosine_of_c = cos(radians(C))
    return sqrt(a ** 2 + b ** 2 - 2 * a * b * cosine_of_c)

if __name__ == '__main__':
    a, b, h, m = map(int, input().split())
    print(calculate_angle_difference(a, b, h, m))
import java.util.* ; import java.io.* ; public class codeforces_354_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int L = sc.nextInt ( ) ; int R = sc.nextInt ( ) ; int QL = sc.nextInt ( ) ; int QR = sc.nextInt ( ) ; int [ ] W = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { W [ i ] = sc.nextInt ( ) ; } long [ ] sum = new long [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { sum [ i ] = sum [ i - 1 ] + W [ i - 1 ] ; } long ans = QR * ( n - 1 ) + sum [ n ] * R ; for ( int i = 1 ; i <= n ; i ++ ) { long energy = L * sum [ i ] + R * ( sum [ n ] - sum [ i ] ) ; if ( i > n - i ) { energy += ( i - ( n - i ) - 1 ) * QL ; } else if ( n - i > i ) { energy += ( n - i - i - 1 ) * QR ; } ans = Math.min ( ans , energy ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_49_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.nextLine ( ) ; int n = s.length ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'a' || s.charAt ( i ) == 'e' || s.charAt ( i ) == 'i' || s.charAt ( i ) == 'o' || s.charAt ( i ) == 'u' || s.charAt ( i ) == 'y' || s.charAt ( i ) == 'A' || s.charAt ( i ) == 'E' || s.charAt ( i ) == 'I' || s.charAt ( i ) == 'O' || s.charAt ( i ) == 'U' || s.charAt ( i ) == 'Y' ) { c ++ ; } } if ( c == 0 ) { System.out.println ( "NO" ) ; } else { System.out.println ( "YES" ) ; } } }
import java.util.* ; public class atcoder_ABC168_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int k = sc.nextInt ( ) ; String s = sc.next ( ) ; if ( s.length ( ) <= k ) { System.out.println ( s ) ; } else { System.out.println ( s.substring ( 0 , k ) + "..." ) ; } } }
import java.util.* ; public class atcoder_ABC149_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; boolean [ ] prime = new boolean [ 100008 ] ; Arrays.fill ( prime , true ) ; prime [ 0 ] = false ; prime [ 1 ] = false ; for ( int i = 4 ; i < 100008 ; i += 2 ) prime [ i ] = false ; for ( int i = 3 ; i * i <= 100008 ; i += 2 ) { if ( prime [ i ] ) { for ( int j = i + i ; j < 100008 ; j += i ) prime [ j ] = false ; } } for ( int i = x ; i < 100008 ; i ++ ) { if ( prime [ i ] ) { System.out.println ( i ) ; break ; } } } }
import java.util.* ; import java.io.* ; public class codeforces_302_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int a = 0 ; int b = 0 ; for ( int i = 0 ; i < m ; i ++ ) { a += sc.nextInt ( ) ; b += sc.nextInt ( ) ; } System.out.println ( ( a - b ) % 2 == 0 && Math.abs ( a - b ) <= n ? "YES" : "NO" ) ; } }
import java.util.* ; public class codeforces_58_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; for ( int i = n ; i >= 1 ; i -- ) { if ( n % i == 0 ) { System.out.print ( i + " " ) ; break ; } } } }
import math

(N, M) = map(int, input().split())
S = input()
T = input()


def gcd(a, b):
    while b > 0:
        a, b = b, a % b
    return a


ans = N * M // gcd(N, M)

for i in range(N):
    if S[i] != T[i * M // N]:
        ans = -1
        break

print(ans)
import java.util.* ; public class codeforces_56_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int mn = n + 1 , mx = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] != i + 1 ) { mn = Math.min ( mn , i ) ; mx = Math.max ( mx , i ) ; } } if ( mx == - 1 ) { System.out.println ( "0 0" ) ; } else { int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { b [ i ] = a [ i ] ; } for ( int i = mn ; i <= mx ; i ++ ) { b [ i ] = a [ mx - i + mn ] ; } boolean ok = true ; for ( int i = 0 ; i < n ; i ++ ) { if ( b [ i ] != i + 1 ) { ok = false ; break ; } } if ( ok ) { System.out.println ( ( mn + 1 ) + " " + ( mx + 1 ) ) ; } else { System.out.println ( "0 0" ) ; } } } }
import java.util.* ; public class codeforces_99_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = s.length ( ) ; int i = s.charAt ( n - 1 ) - '0' ; if ( i == 9 ) { System.out.println ( "GOTO Vasilisa." ) ; } else { if ( i < 5 ) { System.out.println ( s ) ; } else { System.out.println ( s.substring ( 0 , n - 1 ) + ( i + 1 ) ) ; } } } }
from scipy.stats import ttest_ind
import numpy as np
(n, k) = map(int, input().split())
input_string = input()
directions = ['LEFT', 'RIGHT']
f = k - 1 < n - k
m = np.min(np.array([k - 1, n - k]))
actions = []

def move_loop(i, stop, step):
    ttest_ind([49, 97, 82], [86, 78, 14])
    if step == 0 or (step > 0 and i >= stop) or (step < 0 and i <= stop):
        return
    actions.append(directions[not f])
    move_loop(i + step, stop, step)
move_loop(0, m, 1)
inner_loop_bound = 302
outer_loop_bound = 301

def print_loop(LoopIndexOut, stop, step):
    if step == 0 or (step > 0 and LoopIndexOut >= stop) or (step < 0 and LoopIndexOut <= stop):
        return
    for i in input_string[::-1 + 2 * f]:
        actions.append('PRINT ' + i)
        actions.append(directions[f])
    print_loop(LoopIndexOut + step, stop, step)
print_loop(0, inner_loop_bound // outer_loop_bound, 1)
print(*actions[:-1], sep='\n')
import java.util.* ; public class codeforces_86_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int ans = - 1 ; for ( int i = l ; i <= r ; i ++ ) { int x = i ; int y = 0 ; while ( x > 0 ) { y = y * 10 + ( 9 - ( x % 10 ) ) ; x /= 10 ; } ans = Math.max ( ans , i * y ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC128_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] p = new int [ M ] ; int [ ] [ ] a = new int [ M ] [ N ] ; for ( int i = 0 ; i < M ; i ++ ) { p [ i ] = sc.nextInt ( ) ; for ( int j = 0 ; j < N ; j ++ ) { a [ i ] [ j ] = sc.nextInt ( ) ; } } int ans = 0 ; for ( int bit = 0 ; bit < ( 1 << N ) ; bit ++ ) { boolean ok = true ; for ( int i = 0 ; i < M ; i ++ ) { int cnt = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( bit & ( 1 << j ) ) != 0 && a [ i ] [ j ] == 1 ) cnt ++ ; } if ( cnt % 2 != p [ i ] ) ok = false ; } if ( ok ) ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC004_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] [ ] dp = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int m = a [ i ] ; for ( int j = 0 ; j < n ; j ++ ) { int k = i - j ; if ( k < 0 ) k += n ; m = Math.min ( m , a [ k ] ) ; dp [ j ] [ i ] = m ; } } int m = 1000000000000000000 ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; for ( int j = 0 ; j < n ; j ++ ) { sum += dp [ j ] [ i ] ; } m = Math.min ( m , sum + x * i ) ; } System.out.println ( m ) ; } }
import threading
import queue

def multiply_modulo(variable_4_12, mod, b):
    return variable_4_12 * b % mod

def power_sum(variable_6_2, variable_3_2, variable_4_2):
    return variable_4_2 ** variable_6_2 + variable_3_2
from sklearn.utils import shuffle
variable_3_2 = 7
variable_4_2 = 10
variable_6_2 = 9
queue_power_sum = queue.Queue()

def power_sum_thread(queue):
    intermediate_result = power_sum(variable_6_2, variable_3_2, variable_4_2)
    queue.put(intermediate										</code>
thread_power_sum0 = threading.Thread(target=power_sum_thread, args=(queue_power_sum,))
thread_power_sum0.start()
thread_power_sum0.join()
result_power_sum0 = queue_power_sum.get()
mod = result_power_sum0
n = int(input())
c = list(map(int, input().split()))
c.sort(reverse=True)
b = pow(2, 2 * n - 2, mod)
variable_4_12 = 2
queue_multiply_modulo0 = queue.Queue()

def multiply_modulo_thread(queue):
    intermediate_result = multiply_modulo(variable_4_12, mod, b)
    queue.put(intermediate_result)
thread_multiply_modulo = threading.Thread(target=multiply_modulo_thread, args=(queue_multiply_modulo0,))
thread_multiply_modulo.start()
thread_multiply_modulo.join()
result_multiply_modulo0 = queue_multiply_modulo0.get()
a = result_multiply_modulo0
ans = 0
for index in range(n):
    ans += c[index] * (a + index * b)
    ans = ans % mod
shuffle([2, 13, 78])
print(ans)
import java.util.* ; public class codeforces_456_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; } Arrays.sort ( arr , ( a , b ) -> b [ 0 ] - a [ 0 ] ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] [ 1 ] > arr [ i + 1 ] [ 1 ] ) { System.out.println ( "Happy Alex" ) ; return ; } } System.out.println ( "Poor Alex" ) ; } }
import threading
import queue

def compute_result(variable_7_13, variable_3_13, n):
    return (variable_7_13 + n) * n // variable_3_13

def my_decorator(func):

    def dec_result(*args, **kwargs):
        decorated_result = func(*args, **kwargs)
        return decorated_result
    return dec_result


@my_decorator
def solve(n):
    variable_3_13 = 2
    variable_7_13 = 1
    result_queue = queue.Queue()

    def thread_function(queue):
        result = compute_result(variable_7_13, variable_3_13, n)
        queue.put(result)
    worker_thread = threading.Thread(target=thread_function, args=(result_queue,))
    worker_thread.start()
    worker_thread.join()
    thread_result = result_queue.get()
    result = thread_result
    iterations = 1
    while iterations <= n:
        result -= 2 * iterations
        iterations = iterations * 2
    return result


iterations = int(input())
for _ in range(iterations):
    n = int(input())
    print(solve(n))
import java.util.* ; public class atcoder_AGC027_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } long [ ] S = new long [ N + 1 ] ; for ( int i = 0 ; i < N ; i ++ ) { S [ i + 1 ] = S [ i ] + A [ i ] ; } long ans = Long.MAX_VALUE ; for ( int k = 1 ; k <= N ; k ++ ) { long tmp = 0 ; tmp += k * X ; tmp += ( N - k ) * X ; for ( int i = 0 ; i < N - k ; i ++ ) { tmp += Math.min ( A [ i ] , A [ i + k ] ) * 2 ; } tmp += S [ N ] ; ans = Math.min ( ans , tmp ) ; } System.out.println ( ans ) ; } }
from scipy.stats import ttest_ind
import numpy as np
from collections import defaultdict, deque
from functools import lru_cache
from heapq import heappush, heappop
from typing import Counter
from bisect import bisect_right, bisect_left
import math
heap_pop = heappop
hpush = heappush

def Func_solution_0():
    line = input()
    bought_count = Counter(line)
    line = input()
    made_cout = Counter(line)
    res = 0
    for color in made_cout:
        if color not in bought_count:
            return print(-1)
        res += np.min(np.array([bought_count[color], made_cout[color]]))
    print(res)

def main():
    ttest_ind([53, 16, 10], [71, 50, 87])
    num_test_cases = 1
    for test_case_index in range(num_test_cases):
        Func_solution_0()
main()
import java.util.* ; public class atcoder_AGC006_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; String S = sc.next ( ) ; String T = sc.next ( ) ; if ( S.equals ( T ) ) { System.out.println ( N ) ; return ; } int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { StringBuilder sb = new StringBuilder ( ) ; for ( int j = 0 ; j < N ; j ++ ) { sb.append ( S.charAt ( ( i + j ) % N ) ) ; } if ( sb.toString ( ).equals ( T ) ) { cnt = i ; break ; } } System.out.println ( 2 * N - cnt ) ; } }
import java.util.* ; public class atcoder_AGC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 1 ) { ans ^= 1 ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_31_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; for ( int k = 0 ; k < n ; k ++ ) { if ( i == k || j == k ) continue ; if ( arr [ i ] + arr [ j ] == arr [ k ] ) { System.out.println ( ( i + 1 ) + " " + ( j + 1 ) + " " + ( k + 1 ) ) ; return ; } } } } System.out.println ( - 1 ) ; } }
import queue
(n, m) = map(int, input().split())
(vis, ci, cb, cc) = ([0] * (n + 1), 0, 0, 0)
g = [[] for i in range(n + 1)]

def dfs(x):
    (stk, is_bipartite) = (queue.LifoQueue(), True)
    stk.put((x, 1))
    while not stk.empty():
        (u, col) = stk.get()
        if vis[u]:
            is_bipartite &= vis[u] == col
            continue
        vis[u] = col
        for i in g[u]:
            stk.put((i, 3 - col))
    return is_bipartite
for i in range(m):
    (u, v) = map(int, input().split())
    g[u] += [v]
    g[v] += [u]
for i in range(1, n + 1):
    if vis[i] == 0:
        if len(g[i]) == 0:
            ci += 1
        elif dfs(i):
            cb += 1
        else:
            cc += 1
print(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb)
import java.util.* ; import java.io.* ; public class atcoder_ABC125_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] l = new int [ n + 1 ] ; int [ ] r = new int [ n + 1 ] ; l [ 0 ] = 0 ; r [ n ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) { l [ i + 1 ] = gcd ( l [ i ] , a [ i ] ) ; } for ( int i = n - 1 ; i >= 0 ; i -- ) { r [ i ] = gcd ( r [ i + 1 ] , a [ i ] ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { ans = Math.max ( ans , gcd ( l [ i ] , r [ i + 1 ] ) ) ; } System.out.println ( ans ) ; } static int gcd ( int a , int b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } }
import java.util.* ; public class atcoder_AGC007_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; double x = ( double ) ( a - b ) / 2 ; double y = ( double ) ( b - c ) / 2 ; double z = ( double ) ( c - a ) / 2 ; System.out.println ( x + z ) ; } }
import java.util.* ; public class codeforces_459_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int max = arr [ n - 1 ] ; int min = arr [ 0 ] ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == max ) count ++ ; } int count1 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] == min ) count1 ++ ; } if ( max == min ) { System.out.println ( max - min + " " + ( count * ( count - 1 ) ) / 2 ) ; } else { System.out.println ( max - min + " " + count * count1 ) ; } } }
import java.util.* ; public class atcoder_ABC125_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] v = new int [ n ] ; int [ ] c = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { v [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( v [ i ] > c [ i ] ) { ans += v [ i ] - c [ i ] ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC043_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == 'B' ) { if ( sb.length ( ) > 0 ) { sb.deleteCharAt ( sb.length ( ) - 1 ) ; } } else { sb.append ( s.charAt ( i ) ) ; } } System.out.println ( sb ) ; } }
import java.util.Scanner ; public class codeforces_546_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int K = sc.nextInt ( ) ; int X = sc.nextInt ( ) ; int W = sc.nextInt ( ) ; int sum = 0 ; for ( int i = 0 ; i < W ; i ++ ) { sum += ( i + 1 ) * K ; } if ( sum > X ) { System.out.println ( sum - X ) ; } else { System.out.println ( 0 ) ; } } }
import java.util.* ; public class codeforces_231_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a != b ) c ++ ; } System.out.println ( c ) ; } }
from dateutil.parser import parse
from http.client import HTTPConnection
import base64
from scipy.stats import ttest_ind
from cryptography.fernet import Fernet
import time
import datetime
from sklearn.utils import shuffle
datetime.datetime.now()
parse('2024-10-24 12:02:54')
base64.b64encode(b'53173736889998315822')
Fernet.generate_key()
import numpy as np
(height, width) = map(int, input().split())
graph = [[[0 if char == '#' else float('inf') for char in list(input())] for row in range(height)]][0]
ttest_ind([40, 93, 33], [21, 41, 62])
graph = np.array(graph)
for x in range(width - 1):
    graph[:, x + 1] = np.minimum(graph[:, x] + 1, graph[:, x + 1])
for x in range(width - 1, 0, -1):
    graph[:, x - 1] = np.minimum(graph[:, x] + 1, graph[:, x - 1])
for y in range(height - 1):
    graph[y + 1, :] = np.minimum(graph[y, :] + 1, graph[y + 1, :])
for y in range(height - 1, 0, -1):
    graph[y - 1, :] = np.minimum(graph[y, :] + 1, graph[y - 1, :])
shuffle([99, 27, 51])
time.sleep(0.27)
print(int(np.max(graph)))
import java.util.* ; public class codeforces_500_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int currentCell = 0 ; while ( currentCell <= t ) { currentCell += arr [ currentCell - 1 ] ; if ( currentCell == t ) { System.out.println ( "YES" ) ; return ; } } System.out.println ( "NO" ) ; } }
import java.util.* ; public class atcoder_ABC155_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int K = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; long ok = - 1000000000000000000L ; long ng = 1000000000000000000L ; while ( Math.abs ( ok - ng ) > 1 ) { long mid = ( ok + ng ) / 2 ; long cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] < 0 ) { int l = - 1 ; int r = N ; while ( r - l > 1 ) { int m = ( l + r ) / 2 ; if ( A [ i ] * A [ m ] < mid ) { r = m ; } else { l = m ; } } cnt += N - r ; } else { int l = - 1 ; int r = N ; while ( r - l > 1 ) { int m = ( l + r ) / 2 ; if ( A [ i ] * A [ m ] < mid ) { l = m ; } else { r = m ; } } cnt += r ; } if ( A [ i ] * A [ i ] < mid ) { cnt -- ; } } cnt /= 2 ; if ( cnt < K ) { ok = mid ; } else { ng = mid ; } } System.out.println ( ok ) ; } }
import java.util.* ; public class atcoder_ABC147_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long [ ] A = new long [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextLong ( ) ; } long ans = 0 ; for ( int i = 0 ; i < 60 ; i ++ ) { long cnt = 0 ; for ( int j = 0 ; j < N ; j ++ ) { if ( ( A [ j ] >> i & 1 ) == 1 ) { cnt ++ ; } } ans += cnt * ( N - cnt ) * ( 1L << i ) ; ans %= 1000000007 ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC046_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int e = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; int g = sc.nextInt ( ) ; int h = sc.nextInt ( ) ; int i = sc.nextInt ( ) ; int j = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int n = sc.nextInt ( ) ; int o = sc.nextInt ( ) ; int p = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int u = sc.nextInt ( ) ; int v = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sc.nextInt ( ) ; int sum = 0 ; sum = sum + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z ; sum = sum - 250 ; System.out.println ( sum ) ; } }
import java.util.* ; public class codeforces_596_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = Math.abs ( arr [ 0 ] ) ; for ( int i = 1 ; i < n ; i ++ ) { ans += Math.abs ( arr [ i ] - arr [ i - 1 ] ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_171_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String a = sc.next ( ) ; String b = sc.next ( ) ; int n = Math.max ( a.length ( ) , b.length ( ) ) ; a = a.substring ( 0 , n - a.length ( ) ) + a ; b = b.substring ( 0 , n - b.length ( ) ) + b ; StringBuilder sb = new StringBuilder ( ) ; int carry = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int sum = ( a.charAt ( i ) - '0' ) + ( b.charAt ( i ) - '0' ) + carry ; sb.append ( sum % 10 ) ; carry = sum / 10 ; } if ( carry != 0 ) sb.append ( carry ) ; System.out.println ( sb.reverse ( ).toString ( ) ) ; } }
import java.util.* ; public class codeforces_276_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { char ch = s.charAt ( i ) ; if ( map.containsKey ( ch ) ) { map.put ( ch , map.get ( ch ) + 1 ) ; } else { map.put ( ch , 1 ) ; } } int count = 0 ; for ( char ch : map.keySet ( ) ) { if ( map.get ( ch ) % 2 != 0 ) { count ++ ; } } if ( count > 1 || ( count == 1 && s.length ( ) % 2 == 0 ) ) { System.out.println ( "Second" ) ; } else { System.out.println ( "First" ) ; } } }
import java.util.* ; public class codeforces_617_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) cnt ++ ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '1' ) { ans ++ ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s.charAt ( i ) == '1' ) { ans ++ ; break ; } } if ( cnt == 0 ) ans = 0 ; System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_55_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int ans = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( i == 0 ) { ans = Math.max ( ans , a + b ) ; } else if ( i == 1 ) { ans = Math.max ( ans , a + y ) ; } else if ( i == 2 ) { ans = Math.max ( ans , x + b ) ; } else { ans = Math.max ( ans , x + y ) ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC178_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int ans = Math.max ( a * c , a * d ) ; ans = Math.max ( ans , b * c ) ; ans = Math.max ( ans , b * d ) ; System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC164_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = 2019 ; int [ ] a = new int [ m ] ; a [ 0 ] = 1 ; int sum = 0 ; int cur = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc.nextInt ( ) ; cur = ( cur * 10 + x ) % m ; sum += a [ cur ] ; a [ cur ] ++ ; } System.out.println ( sum ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_242_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int id = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { int li = sc.nextInt ( ) ; int ri = sc.nextInt ( ) ; if ( li <= l && r <= ri ) { id = i ; } else if ( li < l || r < ri ) { id = n ; } l = Math.min ( l , li ) ; r = Math.max ( r , ri ) ; } System.out.println ( id == 0 ? - 1 : id ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC132_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'A' ) cnt ++ ; } if ( cnt == n - cnt ) { System.out.println ( "Friendship" ) ; } else if ( cnt > n - cnt ) { System.out.println ( "Anton" ) ; } else { System.out.println ( "Danik" ) ; } } }
import threading
import queue
import math
from functools import reduce
from collections import deque, Counter
import sys
sys.setrecursionlimit(10 ** 7)

def Func_input_0():
    return sys.stdin.readline().strip()

def get_nums_l():
    return [int(s) for s in Func_input_0().split(' ')]

def get_nums_n(n):
    return [int(Func_input_0()) for _ in range(n)]

def get_all_int():
    return map(int, open(0).read().split())

def rangeI(it, l, r):
    for (i, e) in enumerate(it):
        if l <= i < r:
            yield e
        elif l >= r:
            break

def log(*args):
    print('DEBUG:', *args, file=sys.stderr)
INF = 999999999999999999999999
MOD = 10 ** 9 + 7
n = int(Func_input_0())
if n == 1:
    print(0)
    exit()

def prime_factorize(n):
    a = []
    while n % 2 == 0:
        a.append(2)
        n = n // 2
    f = 3
    while f * f <= n:
        if n % f == 0:
            a.append(f)
            n = n // f
        else:
            f += 2
    if n != 1:
        a.append(n)
    return a
    if len(arr) == 0:
        arr.append((n, 1))
    return arr
queue_prime_factorize0 = queue.Queue()

def prime_factorize_thread(queue):
    result = prime_factorize(n)
    queue.put(result)
thread_prime_factorize0 = threading.Thread(target=prime_factorize_thread, args=(queue_prime_factorize0,))
thread_prime_factorize0.start()
thread_prime_factorize0.join()
result_prime_factorize0 = queue_prime_factorize0.get()
fac_ = result_prime_factorize0
fac = Counter(fac_)
ans = 0
for (p, e) in fac.items():
    x = e
    for i in range(1, 99999999):
        if x >= i:
            x -= i
            ans += 1
        else:
            break
print(ans)
import java.util.* ; import java.io.* ; public class atcoder_ABC126_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n + 1 ] [ 2 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] [ 0 ] = sc.nextInt ( ) ; arr [ i ] [ 1 ] = sc.nextInt ( ) ; } int [ ] color = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { if ( arr [ i ] [ 0 ] == 1 ) { color [ i ] = 1 ; } else { color [ i ] = 0 ; } } for ( int i = 1 ; i <= n ; i ++ ) { if ( color [ i ] == 1 ) { for ( int j = 0 ; j < arr [ i ] [ 1 ] ; j ++ ) { if ( arr [ i ] [ 0 ] == 1 ) { arr [ i ] [ 0 ] = 2 ; } else { arr [ i ] [ 0 ] = 1 ; } } } } for ( int i = 1 ; i <= n ; i ++ ) { if ( arr [ i ] [ 0 ] == 1 ) { System.out.println ( 1 ) ; } else { System.out.println ( 0 ) ; } } } }
import java.util.* ; public class atcoder_ABC129_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int n = s.length ( ) ; long [ ] [ ] dp = new long [ n + 1 ] [ 2 ] ; dp [ 0 ] [ 0 ] = 1 ; dp [ 0 ] [ 1 ] = 0 ; long mod = 1000000007 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == '0' ) { dp [ i + 1 ] [ 0 ] = dp [ i ] [ 0 ] ; dp [ i + 1 ] [ 1 ] = dp [ i ] [ 1 ] * 3 ; } else { dp [ i + 1 ] [ 0 ] = dp [ i ] [ 0 ] * 2 + dp [ i ] [ 1 ] ; dp [ i + 1 ] [ 1 ] = dp [ i ] [ 1 ] * 3 ; } dp [ i + 1 ] [ 0 ] %= mod ; dp [ i + 1 ] [ 1 ] %= mod ; } System.out.println ( ( dp [ n ] [ 0 ] + dp [ n ] [ 1 ] ) % mod ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_678_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int year = sc.nextInt ( ) ; int d = 0 ; while ( true ) { if ( year % 400 == 0 || ( year % 4 == 0 && year % 100 != 0 ) ) { if ( d == 0 ) { d = 1 ; year ++ ; } else if ( d == 1 ) { d = 2 ; year ++ ; } else if ( d == 2 ) { d = 3 ; year ++ ; } else if ( d == 3 ) { d = 4 ; year ++ ; } else if ( d == 4 ) { d = 5 ; year ++ ; } else if ( d == 5 ) { d = 6 ; year ++ ; } else if ( d == 6 ) { d = 0 ; year ++ ; } } else { if ( d == 0 ) { d = 6 ; year ++ ; } else if ( d == 1 ) { d = 0 ; year ++ ; } else if ( d == 2 ) { d = 1 ; year ++ ; } else if ( d == 3 ) { d = 2 ; year ++ ; } else if ( d == 4 ) { d = 3 ; year ++ ; } else if ( d == 5 ) { d = 4 ; year ++ ; } else if ( d == 6 ) { d = 5 ; year ++ ; } } if ( d == 0 && year % 400 == 0 || ( year % 4 == 0 && year % 100 != 0 ) ) { break ; } } System.out.println ( year ) ; } }
import java.util.* ; public class codeforces_462_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; String s = sc.next ( ) ; int [ ] count = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { count [ s.charAt ( i ) - 'A' ] ++ ; } Arrays.sort ( count ) ; int res = 0 ; for ( int i = 25 ; i >= 0 ; i -- ) { if ( count [ i ] >= k ) { res += k * k ; break ; } else { k -= count [ i ] ; res += count [ i ] * count [ i ] ; } } System.out.println ( res ) ; } }
import java.util.* ; public class codeforces_334_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ n ] ; int k = 1 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { arr [ i ] [ j ] = k ++ ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { System.out.print ( arr [ i ] [ j ] + " " ) ; } System.out.println ( ) ; } } }
import java.util.* ; public class atcoder_AGC029_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int ans = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int cnt = 0 ; for ( int j = i ; j < n ; j ++ ) { if ( a [ j ] >= a [ i ] ) { cnt ++ ; } else { break ; } } ans = Math.max ( ans , cnt ) ; } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_313_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int [ ] a = new int [ s.length ( ) + 1 ] ; for ( int i = 1 ; i <= s.length ( ) ; i ++ ) { a [ i ] = a [ i - 1 ] ; if ( s.charAt ( i - 1 ) == s.charAt ( i - 2 ) ) a [ i ] ++ ; } int q = sc.nextInt ( ) ; for ( int i = 0 ; i < q ; i ++ ) { int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; System.out.println ( a [ r ] - a [ l - 1 ] ) ; } } }
import sys
input = sys.stdin.readline
n = int(input())
numbers = list(map(int, input().split()))
c = 2
for i in numbers:
    if i == 1:
        print(c)
    elif i % 2 == 0:
        c = 3 - c
        print(c)
    else:
        print(c)
import java.util.* ; public class atcoder_ABC127_F { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int q = sc.nextInt ( ) ; PriorityQueue < Integer > p1 = new PriorityQueue < > ( ) ; PriorityQueue < Integer > p2 = new PriorityQueue < > ( Collections.reverseOrder ( ) ) ; long sum_p1 = 0 ; long sum_p2 = 0 ; for ( int i = 0 ; i < q ; i ++ ) { int type = sc.nextInt ( ) ; if ( type == 1 ) { int x = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; sum_p1 += x ; sum_p2 += b ; if ( p1.size ( ) == 0 ) { p1.add ( x ) ; } else if ( p1.peek ( ) <= x ) { p1.add ( x ) ; } else { p2.add ( x ) ; } if ( p1.size ( ) < p2.size ( ) ) { int k = p2.poll ( ) ; p1.add ( k ) ; sum_p1 += k ; sum_p2 -= k ; } if ( p1.size ( ) - 1 > p2.size ( ) ) { int k = p1.poll ( ) ; p2.add ( k ) ; sum_p1 -= k ; sum_p2 += k ; } } else { if ( p1.size ( ) == p2.size ( ) ) { System.out.println ( p2.peek ( ) + " " + ( sum_p1 - p2.peek ( ) * p2.size ( ) + sum_p2 - p2.peek ( ) * p1.size ( ) ) ) ; } else { System.out.println ( p1.peek ( ) + " " + ( sum_p1 - p1.peek ( ) * p1.size ( ) + sum_p2 - p1.peek ( ) * p2.size ( ) ) ) ; } } } } }
import java.util.* ; import java.io.* ; public class atcoder_ABC153_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int h = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int sho = h / a ; int am = h % a ; if ( am != 0 ) { sho ++ ; } System.out.println ( sho ) ; } }
import java.util.* ; public class atcoder_ABC158_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; if ( s.contains ( "A" ) && s.contains ( "B" ) ) { System.out.println ( "Yes" ) ; } else { System.out.println ( "No" ) ; } } }
import java.util.* ; public class atcoder_AGC005_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] par = new int [ N ] ; int [ ] rank = new int [ N ] ; int [ ] size = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { par [ i ] = i ; rank [ i ] = 1 ; size [ i ] = 1 ; } int [ ] b = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { b [ A [ i ] - 1 ] = i ; } long ans = 0 ; for ( int k = N - 1 ; k >= 0 ; k -- ) { int l = 1 ; int r = 1 ; if ( k > 0 && A [ k - 1 ] > A [ k ] ) { l += size [ find ( k - 1 , par ) ] ; unite ( k - 1 , k , par , rank , size ) ; } if ( k < N - 1 && A [ k + 1 ] > A [ k ] ) { r += size [ find ( k + 1 , par ) ] ; unite ( k + 1 , k , par , rank , size ) ; } ans += ( long ) l * r * A [ k ] ; } System.out.println ( ans ) ; } static int find ( int x , int [ ] par ) { if ( par [ x ] == x ) { return x ; } else { return par [ x ] = find ( par [ x ] , par ) ; } } static void unite ( int x , int y , int [ ] par , int [ ] rank , int [ ] size ) { x = find ( x , par ) ; y = find ( y , par ) ; if ( x == y ) { return ; } if ( rank [ x ] < rank [ y ] ) { par [ x ] = y ; size [ y ] += size [ x ] ; } else { par [ y ] = x ; size [ x ] += size [ y ] ; if ( rank [ x ] == rank [ y ] ) { rank [ x ] ++ ; } } } }
import java.util.* ; public class atcoder_ABC125_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int sum = 0 ; int time = a ; while ( time <= t + 0.5 ) { sum += b ; time += a ; } System.out.println ( sum ) ; } }
import sys
import math


def solve(N, x, y):
    ans = 0
    for i in range(N):
        for j in range(i + 1, N):
            ans += math.sqrt((x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2)
    return ans * 2 / N


def main():
    N = int(sys.stdin.readline())
    x = [0] * N
    y = [0] * N
    for i in range(N):
        x[i], y[i] = map(int, sys.stdin.readline().split())
    print(solve(N, x, y))


if __name__ == "__main__":
    main()
import java.util.* ; import java.io.* ; public class atcoder_ABC164_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int s = sc.nextInt ( ) ; int w = sc.nextInt ( ) ; if ( s <= w ) { System.out.println ( "unsafe" ) ; } else { System.out.println ( "safe" ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_514_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '9' ) sb.append ( '9' ) ; else if ( s.charAt ( i ) - '0' > 4 ) sb.append ( 9 - ( s.charAt ( i ) - '0' ) ) ; else sb.append ( s.charAt ( i ) ) ; } System.out.println ( sb.toString ( ) ) ; } }
import threading
import queue
from scipy.stats import ttest_ind

def Func_main_0():
    ttest_ind([57, 47, 62], [36, 7, 63])
    input()
    return nPairsWithCommonFX(map(int, input().split()))

def nPairsWithCommonFX(sequence):
    storage = {}
    unique_function_values = []
    for value in sequence:
        queue_f0 = queue.Queue()

        def f_thread(queue):
            result = f(value)
            queue.put(result)
        thread_f0 = threading.Thread(target=f_thread, args=(queue_f0,))
        thread_f0.start()
        thread_f0.join()
        result_f0 = queue_f0.get()
        y = result_f0
        if y not in storage:
            storage[y] = [value]
            unique_function_values.append(y)
        else:
            storage[y].append(value)
    return (sum((len(storage[y]) * len(storage[y]) for y in unique_function_values)) - sum((len(storage[y]) for y in unique_function_values))) // 2

def f(n):
    y = 1
    while n != 1:
        if n % 2:
            y = y + 1
        n //= 2
    return y
if __name__ == '__main__':
    print(Func_main_0())
import java.util.* ; import java.io.* ; public class codeforces_96_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; long n = sc.nextLong ( ) ; long ans = 0 ; for ( long i = 1 ; i <= 1000000000 ; i *= 10 ) { if ( n >= i * 4 ) { ans += i * 4 ; } else if ( n >= i * 7 ) { ans += i * 7 ; } else { ans += n ; break ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC169_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] low = new int [ n ] ; int [ ] high = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { low [ i ] = sc.nextInt ( ) ; high [ i ] = sc.nextInt ( ) ; } Arrays.sort ( low ) ; Arrays.sort ( high ) ; if ( n % 2 == 1 ) { System.out.println ( high [ n / 2 ] - low [ n / 2 ] + 1 ) ; } else { System.out.println ( ( high [ n / 2 ] + high [ n / 2 - 1 ] ) - ( low [ n / 2 ] + low [ n / 2 - 1 ] ) + 1 ) ; } } }
import threading
import queue


def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result


@my_decorator
def calculate_difference(variable_3_34, variable_1_34):
    return variable_1_34 - variable_3_34


import numpy as np
from sklearn.utils import shuffle
from collections import deque
import heapq


(n, m) = map(int, input().split())
edges = [set() for _ in range(n)]
degrees = [0 for i in range(n)]
parity = [0 for _ in range(n)]
flag = [False for _ in range(n)]
for _ in range(m):
    (a, b) = map(int, input().split())
    edges[a - 1].add(b - 1)
    edges[b - 1].add(a - 1)
    degrees[a - 1] += 1
    degrees[b - 1] += 1
if m % 2 != 0:
    print(-1)
    exit()
Q = []
for (i, d) in enumerate(degrees):
    Q.append((d, i))
heapq.heapify(Q)
while len(Q) > 0:
    (_, u) = Q[0]
    heapq.heappop(Q)
    if flag[u]:
        continue
    flag[u] = True
    for (i, v) in enumerate(edges[u]):
        edges[v].remove(u)
        if parity[u] != 0 and i == 0:
            print(u + 1, v + 1)
            variable_3_34 = parity[u]
            variable_1_34 = 1
            queue_calculate_difference0 = queue.Queue()

            def calculate_difference_thread(queue):
                difference = calculate_difference(variable_3_34, variable_1_34)
                queue.put(difference)
            thread_calculate_difference0 = threading.Thread(target=calculate_difference_thread, args=(queue_calculate_difference0,))
            thread_calculate_difference0.start()
            thread_calculate_difference0.join()
            result_calculate_difference0 = queue_calculate_difference0.get()
            parity[u] = result_calculate_difference0
        else:
            print(v + 1, u + 1)
            parity[v] = 1 - parity[v]
        degrees[v] -= 1
        heapq.heappush(Q, (degrees[v], v))
import java.util.* ; import java.io.* ; public class codeforces_147_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == ',' || s.charAt ( i ) == '.' || s.charAt ( i ) == '!' || s.charAt ( i ) == '?' ) { if ( sb.charAt ( sb.length ( ) - 1 ) != ' ' ) sb.append ( ' ' ) ; sb.append ( s.charAt ( i ) ) ; if ( s.charAt ( i ) != '!' && s.charAt ( i ) != '?' ) sb.append ( ' ' ) ; } else { sb.append ( s.charAt ( i ) ) ; } } System.out.println ( sb ) ; } }
import java.util.* ; public class atcoder_ABC152_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } long MOD = 1000000007 ; long lcm = 1 ; for ( int i = 0 ; i < N ; i ++ ) { lcm = lcm * A [ i ] / gcd ( lcm , A [ i ] ) ; } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { ans += lcm * pow ( A [ i ] , MOD - 2 , MOD ) ; ans %= MOD ; } System.out.println ( ans ) ; } static long gcd ( long a , long b ) { if ( b == 0 ) return a ; return gcd ( b , a % b ) ; } static long pow ( long x , long n , long mod ) { long res = 1 ; while ( n > 0 ) { if ( ( n & 1 ) == 1 ) res = res * x % mod ; x = x * x % mod ; n >>= 1 ; } return res ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC123_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int z = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ x ] ; int [ ] b = new int [ y ] ; int [ ] c = new int [ z ] ; for ( int i = 0 ; i < x ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < y ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < z ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } ArrayList < Integer > ab = new ArrayList < > ( ) ; for ( int i = 0 ; i < x ; i ++ ) { for ( int j = 0 ; j < y ; j ++ ) { ab.add ( a [ i ] + b [ j ] ) ; } } Collections.sort ( ab , Collections.reverseOrder ( ) ) ; ArrayList < Integer > abc = new ArrayList < > ( ) ; for ( int i = 0 ; i < Math.min ( k , x * y ) ; i ++ ) { for ( int j = 0 ; j < z ; j ++ ) { abc.add ( ab.get ( i ) + c [ j ] ) ; } } Collections.sort ( abc , Collections.reverseOrder ( ) ) ; for ( int i = 0 ; i < k ; i ++ ) { System.out.println ( abc.get ( i ) ) ; } } }
import java.util.* ; public class codeforces_369_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int l = sc.nextInt ( ) ; int r = sc.nextInt ( ) ; int mod = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int [ ] arr = new int [ n + 1 ] ; arr [ 0 ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = arr [ i - 1 ] + ( i <= k ? l : ( i - k >= s ? r : 0 ) ) ; arr [ i ] %= mod ; } System.out.println ( arr [ n ] ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC133_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int K = sc.nextInt ( ) ; ArrayList < ArrayList < Integer >> graph = new ArrayList < > ( ) ; for ( int i = 0 ; i < N ; i ++ ) { graph.add ( new ArrayList < > ( ) ) ; } for ( int i = 0 ; i < N - 1 ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; graph.get ( a - 1 ).add ( b - 1 ) ; graph.get ( b - 1 ).add ( a - 1 ) ; } long mod = 1000000007 ; long [ ] dp = new long [ N ] ; dp [ 0 ] = 1 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < graph.get ( i ).size ( ) ; j ++ ) { if ( graph.get ( i ).get ( j ) != i ) { dp [ graph.get ( i ).get ( j ) ] += dp [ i ] ; dp [ graph.get ( i ).get ( j ) ] %= mod ; } } } long ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( graph.get ( i ).size ( ) >= K - 1 ) { ans += dp [ i ] ; ans %= mod ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_373_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int w = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; long left = 0 ; long right = ( long ) 1e18 ; while ( right - left > 1 ) { long mid = ( left + right ) / 2 ; long c = 0 ; for ( int i = 1 ; i <= m ; i ++ ) { c += Math.min ( mid , k ) ; } if ( c * k <= w ) { left = mid ; } else { right = mid ; } } System.out.println ( left ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_242_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int count = 0 ; for ( int i = a ; i <= x ; i ++ ) { for ( int j = b ; j <= y ; j ++ ) { if ( i > j ) { count ++ ; } } } System.out.println ( count ) ; for ( int i = a ; i <= x ; i ++ ) { for ( int j = b ; j <= y ; j ++ ) { if ( i > j ) { System.out.println ( i + " " + j ) ; } } } } }
import java.util.* ; public class codeforces_608_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int s = sc.nextInt ( ) ; int max = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int f = sc.nextInt ( ) ; int t = sc.nextInt ( ) ; int x = t - ( s - f ) ; if ( x > max ) { max = x ; } } System.out.println ( s + max ) ; } }
import time
import datetime
from sklearn.utils import shuffle
time.sleep(0.08)
max_level = int(input())
x = list(map(int, input().split()))
y = list(map(int, input().split()))
datetime.datetime.now()
x.pop(0)
y.pop(0)
x = set(x)
y = set(y)
if 0 in x:
    x.discard(0)
elif 0 in y:
    y.discard(0)
z = x.union(y)
if len(z) != max_level:
    print('Oh, my keyboard')
else:
    print('I become the guy.')
import java.util.* ; public class codeforces_351_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; double [ ] arr = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextDouble ( ) ; } Arrays.sort ( arr ) ; double sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += arr [ i ] - Math.floor ( arr [ i ] ) ; } double res = 1000000000 ; for ( int i = 0 ; i <= n ; i ++ ) { res = Math.min ( res , Math.abs ( sum - i + n - i ) ) ; } System.out.printf ( "%.3f" , res ) ; } }
import java.util.* ; public class atcoder_AGC003_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } Arrays.sort ( A ) ; int cnt = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( A [ i ] % 2 != i % 2 ) { cnt ++ ; } } System.out.println ( cnt / 2 ) ; } }
import java.util.* ; public class codeforces_629_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; char [ ] [ ] cake = new char [ n ] [ ] ; for ( int i = 0 ; i < n ; i ++ ) { cake [ i ] = sc.next ( ).toCharArray ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( cake [ i ] [ j ] == 'C' ) { count ++ ; } } if ( count > 1 ) { count = count * ( count - 1 ) / 2 ; } else { count = 0 ; } } for ( int i = 0 ; i < n ; i ++ ) { count = 0 ; for ( int j = 0 ; j < n ; j ++ ) { if ( cake [ j ] [ i ] == 'C' ) { count ++ ; } } if ( count > 1 ) { count = count * ( count - 1 ) / 2 ; } else { count = 0 ; } } System.out.println ( count ) ; } }
import java.util.* ; public class codeforces_459_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int x1 = sc.nextInt ( ) ; int y1 = sc.nextInt ( ) ; int x2 = sc.nextInt ( ) ; int y2 = sc.nextInt ( ) ; int x3 = x2 + ( x2 - x1 ) ; int y3 = y2 + ( y2 - y1 ) ; int x4 = x1 + ( x2 - x1 ) ; int y4 = y1 + ( y2 - y1 ) ; System.out.println ( x3 + " " + y3 + " " + x4 + " " + y4 ) ; } }
import java.util.* ; public class codeforces_32_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'x' && s.charAt ( i + 1 ) == 'x' ) count ++ ; } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC012_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; long ans = 0 ; for ( int i = n - 1 ; i >= 0 ; i -= 2 ) { ans += a [ i ] ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC122_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; long [ ] [ ] dp = new long [ N + 1 ] [ 1 << 4 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < 1 << 4 ; j ++ ) { if ( dp [ i ] [ j ] == 0 ) continue ; for ( int k = 0 ; k < 4 ; k ++ ) { if ( ( j & 1 << k ) != 0 ) continue ; if ( ( j & 1 << ( k - 1 ) ) != 0 ) continue ; if ( ( j & 1 << ( k - 2 ) ) != 0 ) continue ; int nj = j >> 1 ; nj |= 1 << ( 3 ) ; if ( k == 0 ) nj ^= 1 << 3 ; else if ( k == 1 ) nj ^= 1 << 2 ; else if ( k == 2 ) nj ^= 1 << 1 ; else nj ^= 1 ; dp [ i + 1 ] [ nj ] += dp [ i ] [ j ] ; dp [ i + 1 ] [ nj ] %= 1000000007 ; } } } System.out.println ( dp [ N ] [ 0 ] ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC042_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( a + b + c == 17 && a != 5 && b != 5 && c != 5 ) { System.out.println ( "YES" ) ; } else { System.out.println ( "NO" ) ; } } }

import java.util.* ; public class atcoder_ABC167_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] path = new int [ n + 1 ] ; int [ ] vis = new int [ n + 1 ] ; int cnt = 0 ; int x = 1 ; while ( cnt < n ) { if ( vis [ x ] != 0 ) { break ; } vis [ x ] = ++ cnt ; path [ cnt ] = x ; x = arr [ x ] ; } int loop = cnt - vis [ x ] + 1 ; if ( k <= cnt ) { System.out.println ( path [ k ] ) ; } else { k -= cnt ; k %= loop ; if ( k == 0 ) { k = loop ; } System.out.println ( path [ vis [ x ] + k - 1 ] ) ; } } }
import java.util.* ; public class atcoder_ABC051_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; if ( a + b + c >= 2 ) count ++ ; } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC122_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int q = sc.nextInt ( ) ; String s = sc.next ( ) ; int [ ] a = new int [ q ] ; int [ ] b = new int [ q ] ; for ( int i = 0 ; i < q ; i ++ ) { a [ i ] = sc.nextInt ( ) ; b [ i ] = sc.nextInt ( ) ; } int [ ] c = new int [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( s.charAt ( i ) == 'A' && s.charAt ( i + 1 ) == 'C' ) { c [ i + 1 ] = c [ i ] + 1 ; } else { c [ i + 1 ] = c [ i ] ; } } for ( int i = 0 ; i < q ; i ++ ) { System.out.println ( c [ b [ i ] - 1 ] - c [ a [ i ] - 1 ] ) ; } } }
import java.util.* ; public class codeforces_673_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int ans = 0 ; if ( arr [ 0 ] > 15 ) { ans = 15 ; } else { for ( int i = 1 ; i < n ; i ++ ) { if ( arr [ i ] - arr [ i - 1 ] > 15 ) { ans = arr [ i - 1 ] + 15 ; break ; } } if ( arr [ n - 1 ] == 90 || arr [ n - 1 ] + 15 >= 90 ) { ans = 90 ; } else { ans = arr [ n - 1 ] + 15 ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC174_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int l = 1 , r = 1000000000 , ans = 0 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; if ( check ( a , k , mid ) ) { ans = mid ; l = mid + 1 ; } else { r = mid - 1 ; } } System.out.println ( ans ) ; } static boolean check ( int [ ] a , int k , int mid ) { int sum = 0 ; for ( int i = 0 ; i < a.length ; i ++ ) { sum += a [ i ] / mid ; } return sum >= k ; } }
import java.util.* ; import java.io.* ; public class codeforces_637_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { char ch = s.charAt ( i ) ; if ( map.containsKey ( ch ) ) { map.put ( ch , map.get ( ch ) + 1 ) ; } else { map.put ( ch , 1 ) ; } } int max = 0 ; char ans = ' ' ; for ( char ch : map.keySet ( ) ) { if ( map.get ( ch ) > max ) { max = map.get ( ch ) ; ans = ch ; } } System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_11_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { int diff = arr [ i ] - arr [ i + 1 ] ; int add = ( diff / d ) ; if ( diff % d != 0 ) { add ++ ; } count += add ; arr [ i + 1 ] += add * d ; } } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC150_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] p = new int [ n ] ; int [ ] q = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { p [ i ] = sc.nextInt ( ) ; } for ( int i = 0 ; i < n ; i ++ ) { q [ i ] = sc.nextInt ( ) ; } int p_index = 0 ; int q_index = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] != q [ i ] ) { p_index = i ; q_index = i ; break ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( p [ i ] != q [ i ] ) { count ++ ; } } System.out.println ( Math.abs ( p_index - q_index ) + count ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC145_E { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int T = sc.nextInt ( ) ; int [ ] [ ] dp = new int [ N + 1 ] [ T + 1 ] ; int [ ] [ ] t = new int [ N + 1 ] [ 2 ] ; for ( int i = 1 ; i <= N ; i ++ ) { t [ i ] [ 0 ] = sc.nextInt ( ) ; t [ i ] [ 1 ] = sc.nextInt ( ) ; } for ( int i = 1 ; i <= N ; i ++ ) { for ( int j = 0 ; j <= T ; j ++ ) { if ( j - t [ i ] [ 0 ] >= 0 ) { dp [ i ] [ j ] = Math.max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - t [ i ] [ 0 ] ] + t [ i ] [ 1 ] ) ; } else { dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ; } } } System.out.println ( dp [ N ] [ T ] ) ; } }
import java.util.* ; public class codeforces_621_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int sum = 0 ; int odd = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( arr [ i ] % 2 == 0 ) sum += arr [ i ] ; else { if ( odd == 0 || odd == 1 ) sum += arr [ i ] ; odd ++ ; } } System.out.println ( sum ) ; } }
import java.util.* ; public class codeforces_544_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int k = sc.nextInt ( ) ; if ( k <= Math.max ( n * n / 2 , n * n - n * n / 2 ) ) { System.out.println ( "YES" ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( i % 2 == j % 2 ) { if ( k > 0 ) { System.out.print ( "L" ) ; k -- ; } else { System.out.print ( "S" ) ; } } else { System.out.print ( "S" ) ; } } System.out.println ( ) ; } } else { System.out.println ( "NO" ) ; } } }
import sys
(N, K) = map(int, input().split())
lst = list(map(int, input().split()))
lst_p = []
lst_m = []
limit = 275
step_size = 274
is_valid = 164
is_complete = 740
is_ready = 410
is_active = 300
has_data = 520
has_new_data = 29
for LoopIndexOut in range(limit // step_size):
    for i in range(N):
        if has_data & has_new_data:
            if is_ready & is_active:
                if is_valid & is_complete:
                    if lst[i] == 0:
                        K = K - 1
        if lst[i] > 0:
            lst_p += [lst[i]]
        elif lst[i] < 0:
            lst_m += [lst[i]]
p = 0
m = 0
(x, y) = (0, len(lst_m) - 1)
lastx = len(lst_p)
lasty = len(lst_m)

def Func_check_0(k):
    ans = 10 ** 9
    for j in range(0, k + 1):
        if j > lastx or k - j > lasty:
            pass
        else:
            if j == 0:
                p = 0
            else:
                p = lst_p[j - 1]
            if k - j == 0:
                m = 0
            else:
                m = lst_m[lasty - (k - j)]
            ans = min(ans, 2 * p + abs(m), p + 2 * abs(m))
    return ans
print(Func_check_0(K))
import java.util.* ; import java.io.* ; public class codeforces_450_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int m = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] b = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % m == 0 ) b [ i ] = a [ i ] / m ; else b [ i ] = a [ i ] / m + 1 ; } int max = b [ 0 ] ; int ind = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( b [ i ] > max ) { max = b [ i ] ; ind = i ; } } System.out.println ( ind + 1 ) ; } }
import java.util.* ; public class atcoder_AGC017_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int P = sc.nextInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = sc.nextInt ( ) ; } int [ ] B = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { B [ i ] = A [ i ] % 2 ; } int one = 0 ; int zero = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( B [ i ] == 1 ) { one ++ ; } else { zero ++ ; } } long [ ] dp = new long [ 100001 ] ; dp [ 0 ] = 1 ; for ( int i = 1 ; i <= one ; i ++ ) { dp [ i ] = dp [ i - 1 ] * ( one - i + 1 ) / i ; } long ans = 0 ; for ( int i = 0 ; i <= zero ; i ++ ) { if ( ( i + P ) % 2 == 0 ) { ans += dp [ i ] * dp [ zero - i ] ; } } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_682_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } Arrays.sort ( arr ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > count ) { count ++ ; } } System.out.println ( count + 1 ) ; } }
import java.util.* ; public class atcoder_ARC062_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; if ( a > b ) count ++ ; else if ( a < b ) count -- ; } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC114_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; System.out.println ( dfs ( N , 0 ) ) ; } static int dfs ( int N , int n ) { if ( n > N ) { return 0 ; } if ( n % 10 == 3 || n % 10 == 5 || n % 10 == 7 ) { if ( n > N ) { return 0 ; } if ( n % 10 == 3 && n % 100 == 53 && n % 1000 == 753 && n % 10000 == 5753 && n % 100000 == 35753 && n % 1000000 == 535753 && n % 10000000 == 7535753 && n % 100000000 == 57535753 && n % 1000000000 == 357535753 ) { return 1 ; } } return dfs ( N , n * 10 + 3 ) + dfs ( N , n * 10 + 5 ) + dfs ( N , n * 10 + 7 ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC002_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int M = sc.nextInt ( ) ; int [ ] [ ] ball = new int [ N ] [ 2 ] ; ball [ 0 ] [ 0 ] = 0 ; ball [ 0 ] [ 1 ] = 1 ; for ( int i = 0 ; i < M ; i ++ ) { int x = sc.nextInt ( ) ; int y = sc.nextInt ( ) ; x -- ; y -- ; if ( ball [ x ] [ 0 ] >= 1 && ball [ y ] [ 0 ] >= 1 ) { ball [ x ] [ 0 ] -- ; ball [ y ] [ 1 ] ++ ; } else if ( ball [ x ] [ 0 ] == 0 ) { ball [ x ] [ 1 ] -- ; ball [ y ] [ 1 ] ++ ; } else { ball [ x ] [ 0 ] -- ; ball [ y ] [ 0 ] ++ ; } } int ans = 0 ; for ( int i = 0 ; i < N ; i ++ ) { if ( ball [ i ] [ 1 ] == 1 ) ans ++ ; } System.out.println ( ans ) ; } }
import java.util.* ; public class atcoder_ABC145_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; String s = sc.next ( ) ; int count = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) { if ( s.charAt ( i ) != s.charAt ( n - i - 1 ) ) count ++ ; } if ( count == 0 ) System.out.println ( "Yes" ) ; else System.out.println ( "No" ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_61_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c1 = sc.nextInt ( ) ; if ( ( a + b + c1 ) >= 2 ) { c ++ ; } } System.out.println ( c ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC136_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int N = sc.nextInt ( ) ; int ans = 0 ; int i = 1 ; while ( true ) { if ( N < 10 * i ) { ans += N - 10 * ( i - 1 ) + 1 ; break ; } else { ans += 9 * i + 1 ; i ++ ; } } System.out.println ( ans ) ; } }
import sys


def I():
    return int(sys.stdin.readline()[:-1])


def II():
    return map(int, sys.stdin.readline()[:-1].split())


def III():
    return list(map(int, sys.stdin.readline()[:-1].split()))


def Line(N, num):
    if N <= 0:
        return [[]] * num
    elif num == 1:
        return [I() for _ in range(N)]
    else:
        read_all = [tuple(II()) for _ in range(N)]
        return map(list, zip(*read_all))


def my_sign(x):
    return (x > 0) - (x < 0)


N = I()
a = III()
max_val = 0
max_sign = 0
max_index = -1
for i, a0 in enumerate(a):
    if abs(a0) > max_val:
        max_val = abs(a0)
        max_sign = my_sign(a0)
        max_index = i
if max_sign == 0:
    print(0)
elif max_sign == 1:
    print(2 * N - 1)
    for i in range(N):
        print(max_index + 1, i + 1)
    for i in range(N - 1):
        print(i + 1, i + 2)
else:
    print(2 * N - 1)
    for i in range(N):
        print(max_index + 1, i + 1)
    for i in range(1, N)[::-1]:
        print(i + 1, i)
import java.util.* ; public class atcoder_ABC124_C { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String s = sc.next ( ) ; int cnt = 0 ; for ( int i = 0 ; i < s.length ( ) ; i ++ ) { if ( s.charAt ( i ) == '1' ) cnt ++ ; } int ans = s.length ( ) - cnt ; if ( cnt > s.length ( ) - cnt ) ans = s.length ( ) - cnt ; System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_644_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int [ ] arr = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr [ i ] = sc.nextInt ( ) ; } int [ ] arr1 = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { arr1 [ i ] = sc.nextInt ( ) ; } Queue < Integer > q = new LinkedList < > ( ) ; int [ ] ans = new int [ n ] ; int time = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > time && q.size ( ) == 0 ) { time = arr [ i ] + arr1 [ i ] ; ans [ i ] = time ; } else if ( arr [ i ] > time && q.size ( ) < b ) { q.add ( i ) ; } else if ( arr [ i ] > time && q.size ( ) == b ) { ans [ i ] = - 1 ; } else if ( arr [ i ] <= time && q.size ( ) < b ) { q.add ( i ) ; time = arr [ i ] + arr1 [ i ] ; ans [ i ] = time ; } else if ( arr [ i ] <= time && q.size ( ) == b ) { int x = q.poll ( ) ; time = arr [ x ] + arr1 [ x ] ; q.add ( i ) ; time = arr [ i ] + arr1 [ i ] ; ans [ i ] = time ; } } for ( int i = 0 ; i < n ; i ++ ) { System.out.print ( ans [ i ] + " " ) ; } } }
import java.util.* ; import java.io.* ; public class codeforces_624_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int ans = 0 ; int pre = Integer.MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( pre == 0 ) break ; ans += Math.min ( pre , a [ i ] ) ; pre = Math.max ( 0 , pre - 1 ) ; } System.out.println ( ans ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_AGC027_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int x = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } Arrays.sort ( a ) ; int ans = 0 ; if ( a [ 0 ] > x ) { System.out.println ( 0 ) ; return ; } for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] > x ) break ; x -= a [ i ] ; ans ++ ; } if ( x != 0 ) ans -- ; System.out.println ( ans ) ; } }
import java.util.* ; public class codeforces_669_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int c = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int e = sc.nextInt ( ) ; int f = sc.nextInt ( ) ; int x = Math.min ( a , d ) ; int y = Math.min ( b , e ) ; int z = Math.min ( c , f ) ; int sum = x + y + z ; int sum1 = a + b + c ; int sum2 = d + e + f ; System.out.println ( sum - Math.max ( sum1 , sum2 ) ) ; } }
import java.util.* ; import java.io.* ; public class atcoder_ABC135_D { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; String S = sc.next ( ) ; int N = S.length ( ) ; long [ ] [ ] dp = new long [ N + 1 ] [ 13 ] ; dp [ 0 ] [ 0 ] = 1 ; for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( S.charAt ( i ) != '?' ) { if ( S.charAt ( i ) - '0' == j ) { dp [ i + 1 ] [ ( j * 10 ) % 13 ] += dp [ i ] [ j ] ; } } else { for ( int k = 0 ; k < 10 ; k ++ ) { dp [ i + 1 ] [ ( ( j * 10 + k ) % 13 ) ] += dp [ i ] [ j ] ; } } } } System.out.println ( dp [ N ] [ 5 ] ) ; } }
import java.util.* ; public class atcoder_ABC133_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int d = sc.nextInt ( ) ; int [ ] [ ] arr = new int [ n ] [ d ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < d ; j ++ ) { arr [ i ] [ j ] = sc.nextInt ( ) ; } } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int sum = 0 ; for ( int k = 0 ; k < d ; k ++ ) { sum += ( arr [ i ] [ k ] - arr [ j ] [ k ] ) * ( arr [ i ] [ k ] - arr [ j ] [ k ] ) ; } if ( Math.sqrt ( sum ) % 1 == 0 ) { count ++ ; } } } System.out.println ( count ) ; } }
100%|██████████| 231/231 [00:00<00:00, 8513.17it/s]
import java.util.* ; public class codeforces_622_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; long n = sc.nextLong ( ) ; long l = 1 , r = 1000000000 ; while ( l < r ) { long mid = ( l + r ) / 2 ; long sum = ( mid * ( mid + 1 ) ) / 2 ; if ( sum < n ) l = mid + 1 ; else r = mid ; } long sum = ( l * ( l + 1 ) ) / 2 ; System.out.println ( n - sum ) ; } }
import java.util.* ; public class codeforces_519_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = sc.nextInt ( ) ; } int [ ] b = new int [ n - 1 ] ; for ( int i = 0 ; i < n - 1 ; i ++ ) { b [ i ] = sc.nextInt ( ) ; } int [ ] c = new int [ n - 2 ] ; for ( int i = 0 ; i < n - 2 ; i ++ ) { c [ i ] = sc.nextInt ( ) ; } int sum1 = 0 ; int sum2 = 0 ; int sum3 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum1 += a [ i ] ; } for ( int i = 0 ; i < n - 1 ; i ++ ) { sum2 += b [ i ] ; } for ( int i = 0 ; i < n - 2 ; i ++ ) { sum3 += c [ i ] ; } System.out.println ( Math.abs ( sum1 - sum2 ) ) ; System.out.println ( Math.abs ( sum2 - sum3 ) ) ; } }
import java.util.* ; public class codeforces_131_B { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int n = sc.nextInt ( ) ; HashMap < Integer , Integer > hm = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int x = sc.nextInt ( ) ; if ( hm.containsKey ( x ) ) { hm.put ( x , hm.get ( x ) + 1 ) ; } else { hm.put ( x , 1 ) ; } } int count = 0 ; for ( int i : hm.keySet ( ) ) { if ( i == 0 ) { count += ( hm.get ( i ) * ( hm.get ( i ) - 1 ) ) / 2 ; } else if ( hm.containsKey ( - i ) ) { count += hm.get ( i ) * hm.get ( - i ) ; } } System.out.println ( count ) ; } }
import java.util.* ; import java.io.* ; public class codeforces_379_A { public static void main ( String [ ] args ) { Scanner sc = new Scanner ( System.in ) ; int a = sc.nextInt ( ) ; int b = sc.nextInt ( ) ; int ans = 0 ; int x = 0 ; while ( a > 0 || x >= b ) { ans += a ; x += a ; a = x / b ; x %= b ; } System.out.println ( ans ) ; } }
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model yangccccc/deepseek-coder-multi --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_400_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC089_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC013_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC013_A.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC118_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_216_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC120_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC120_C.java' returned non-zero exit status 1.
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC148_F.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC165_C.java' returned non-zero exit status 1.
Filename:  codeforces_203_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC006_B.java' returned non-zero exit status 1.
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  codeforces_30_A.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 1.
Filename:  codeforces_350_B.java
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC004_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Filename:  atcoder_ABC168_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC168_C.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC150_E.java' returned non-zero exit status 1.
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_408_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 1.
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC145_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/codeforces_469_A.java' returned non-zero exit status 1.
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-multi/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 46
Success: ['atcoder_ABC168_B.java', 'codeforces_682_B.java', 'codeforces_608_A.java', 'atcoder_ABC126_E.java', 'atcoder_ABC171_E.java', 'atcoder_ABC140_D.java', 'codeforces_146_A.java', 'atcoder_ABC112_C.java', 'codeforces_609_B.java', 'atcoder_ABC174_C.java', 'atcoder_ABC139_B.java', 'codeforces_569_A.java', 'codeforces_276_B.java', 'atcoder_ABC125_C.java', 'codeforces_242_A.java', 'codeforces_581_B.java', 'atcoder_AGC002_A.java', 'atcoder_ABC119_B.java', 'atcoder_ABC153_A.java', 'atcoder_ABC149_C.java', 'atcoder_ABC125_B.java', 'atcoder_ABC164_A.java', 'atcoder_AGC034_B.java', 'atcoder_ABC043_B.java', 'codeforces_519_B.java', 'atcoder_ABC171_B.java', 'atcoder_ABC125_A.java', 'atcoder_ABC133_B.java', 'codeforces_379_A.java', 'codeforces_340_A.java', 'codeforces_356_A.java', 'atcoder_ABC110_C.java', 'codeforces_354_A.java', 'atcoder_ABC143_A.java', 'codeforces_546_A.java', 'atcoder_ABC105_D.java', 'codeforces_612_B.java', 'codeforces_154_A.java', 'atcoder_ABC158_A.java', 'codeforces_445_A.java', 'atcoder_ABC169_E.java', 'atcoder_ABC152_C.java', 'codeforces_459_B.java', 'codeforces_56_B.java', 'codeforces_544_B.java', 'atcoder_ABC170_A.java']
Fail: ['codeforces_49_A.java', 'codeforces_147_A.java', 'codeforces_351_A.java', 'codeforces_653_A.java', 'atcoder_AGC007_C.java', 'codeforces_96_B.java', 'codeforces_86_A.java', 'atcoder_AGC005_B.java', 'codeforces_171_A.java', 'codeforces_678_A.java', 'atcoder_AGC017_A.java', 'codeforces_350_B.java', 'atcoder_ABC142_C.java', 'atcoder_ABC150_D.java', 'codeforces_459_A.java', 'atcoder_ABC174_E.java', 'codeforces_333_B.java', 'codeforces_373_B.java', 'codeforces_514_A.java', 'atcoder_ABC124_C.java', 'atcoder_AGC003_C.java', 'codeforces_296_A.java', 'codeforces_148_B.java', 'atcoder_AGC012_A.java', 'codeforces_579_A.java', 'atcoder_ABC145_B.java', 'codeforces_624_B.java', 'codeforces_110_B.java', 'codeforces_92_A.java', 'codeforces_678_B.java', 'atcoder_ABC147_D.java', 'atcoder_ABC104_C.java', 'codeforces_450_A.java', 'codeforces_222_A.java', 'codeforces_400_B.java', 'codeforces_30_A.java', 'codeforces_637_A.java', 'atcoder_ABC136_B.java', 'atcoder_ABC145_E.java', 'codeforces_629_A.java', 'codeforces_299_A.java', 'atcoder_AGC006_A.java', 'atcoder_ABC042_A.java', 'codeforces_189_A.java', 'codeforces_282_B.java', 'codeforces_644_B.java', 'codeforces_99_A.java', 'atcoder_AGC029_C.java', 'codeforces_673_A.java', 'atcoder_ABC135_D.java', 'codeforces_37_A.java', 'atcoder_ABC129_E.java', 'atcoder_ABC070_B.java', 'atcoder_ABC109_B.java', 'atcoder_ABC150_C.java', 'atcoder_ABC155_D.java', 'atcoder_ABC127_F.java', 'codeforces_55_A.java', 'codeforces_203_B.java', 'atcoder_ABC167_C.java', 'codeforces_583_B.java', 'atcoder_ABC172_D.java', 'codeforces_622_A.java', 'codeforces_607_A.java', 'atcoder_ABC122_D.java', 'codeforces_387_B.java', 'codeforces_534_B.java', 'codeforces_58_B.java', 'codeforces_231_A.java', 'codeforces_25_A.java', 'codeforces_274_A.java', 'atcoder_ABC126_D.java', 'atcoder_AGC010_B.java', 'codeforces_596_B.java', 'atcoder_AGC019_A.java', 'codeforces_31_A.java', 'codeforces_267_A.java', 'codeforces_621_A.java', 'atcoder_ABC151_A.java', 'codeforces_190_A.java', 'codeforces_11_A.java', 'atcoder_ABC133_E.java', 'codeforces_131_B.java', 'codeforces_268_A.java', 'codeforces_306_A.java', 'atcoder_AGC046_B.java', 'codeforces_369_B.java', 'atcoder_AGC027_B.java', 'codeforces_567_A.java', 'codeforces_302_A.java', 'atcoder_ABC134_E.java', 'codeforces_651_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC148_F.java', 'codeforces_106_B.java', 'codeforces_334_A.java', 'codeforces_79_A.java', 'atcoder_AGC002_B.java', 'atcoder_ABC128_C.java', 'atcoder_ABC124_A.java', 'atcoder_ABC152_E.java', 'atcoder_ABC178_B.java', 'codeforces_55_B.java', 'atcoder_ABC051_A.java', 'atcoder_ABC114_C.java', 'atcoder_ABC164_D.java', 'codeforces_518_B.java', 'codeforces_632_B.java', 'codeforces_327_A.java', 'atcoder_ABC122_C.java', 'atcoder_AGC043_B.java', 'codeforces_32_B.java', 'atcoder_ARC062_B.java', 'codeforces_67_B.java', 'codeforces_287_A.java', 'codeforces_665_A.java', 'codeforces_8_B.java', 'atcoder_ABC166_C.java', 'atcoder_ABC167_D.java', 'atcoder_ARC102_C.java', 'atcoder_ABC107_D.java', 'atcoder_ABC106_C.java', 'atcoder_ABC112_A.java', 'atcoder_ABC123_C.java', 'atcoder_AGC046_A.java', 'atcoder_ABC123_B.java', 'atcoder_ABC132_A.java', 'atcoder_ABC123_D.java', 'codeforces_669_A.java', 'codeforces_456_A.java', 'atcoder_AGC025_A.java', 'codeforces_462_B.java', 'codeforces_500_A.java', 'codeforces_313_B.java', 'codeforces_61_B.java', 'atcoder_ABC142_A.java', 'codeforces_617_B.java', 'codeforces_242_B.java', 'atcoder_ABC146_D.java', 'codeforces_387_A.java', 'atcoder_AGC021_B.java', 'atcoder_ABC158_B.java', 'codeforces_474_B.java', 'codeforces_598_A.java', 'atcoder_ARC086_B.java', 'codeforces_216_B.java', 'atcoder_ABC169_C.java', 'codeforces_408_B.java', 'atcoder_ABC178_A.java', 'atcoder_ABC169_D.java', 'codeforces_342_B.java', 'atcoder_AGC028_A.java', 'atcoder_ABC089_C.java', 'codeforces_272_B.java', 'atcoder_ABC145_C.java', 'codeforces_672_A.java', 'atcoder_AGC004_B.java', 'atcoder_ABC140_F.java', 'atcoder_AGC006_B.java', 'codeforces_59_A.java', 'atcoder_AGC037_E.java', 'atcoder_ABC143_D.java', 'codeforces_7_B.java', 'atcoder_ABC118_C.java', 'atcoder_ABC111_C.java', 'atcoder_ABC168_C.java', 'atcoder_ABC165_C.java', 'codeforces_705_B.java', 'atcoder_AGC004_D.java', 'atcoder_ABC150_E.java', 'atcoder_AGC035_B.java', 'atcoder_AGC011_C.java', 'atcoder_AGC033_A.java', 'atcoder_AGC013_A.java', 'codeforces_412_A.java', 'atcoder_ABC107_C.java', 'atcoder_ABC108_B.java', 'atcoder_ABC137_D.java', 'codeforces_421_A.java', 'atcoder_AGC033_B.java', 'atcoder_ABC120_C.java', 'codeforces_400_A.java', 'codeforces_397_B.java', 'codeforces_469_A.java', 'atcoder_ABC132_F.java', 'atcoder_AGC027_B.java', 'codeforces_350_B.java', 'codeforces_86_A.java']
