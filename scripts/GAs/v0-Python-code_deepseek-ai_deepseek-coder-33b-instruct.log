+ model=deepseek-ai/deepseek-coder-33b-instruct
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-33b-instruct --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 03:19:20 [__init__.py:241] Automatically detected platform cuda.
found 231 inputs
INFO 08-21 03:19:22 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-33b-instruct', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 03:19:27 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 03:19:27 [__init__.py:1750] Using max model len 4096
INFO 08-21 03:19:27 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=105490)[0;0m INFO 08-21 03:19:27 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=105490)[0;0m INFO 08-21 03:19:27 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-33b-instruct', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-33b-instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-33b-instruct, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=105490)[0;0m WARNING 08-21 03:19:27 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=105490)[0;0m INFO 08-21 03:19:27 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_34818401'), local_subscribe_addr='ipc:///tmp/ec806eb8-72f6-4536-90cf-4d28accbdf22', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:29 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_2257ac53'), local_subscribe_addr='ipc:///tmp/fc7da4d7-c220-4ef7-8688-0a0053003acb', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:29 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_a88042ee'), local_subscribe_addr='ipc:///tmp/3fd9686e-98e8-4141-9df7-f94887756ac7', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:30 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:30 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:30 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:30 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:30 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:30 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:30 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_6fa8f6a4'), local_subscribe_addr='ipc:///tmp/2723d0e9-9335-486a-a234-c184dbde7535', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:30 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:30 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m WARNING 08-21 03:19:30 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m WARNING 08-21 03:19:30 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:31 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-33b-instruct...
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:31 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-33b-instruct...
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:31 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:31 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:31 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:31 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:31 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:31 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards:  14% Completed | 1/7 [00:01<00:08,  1.45s/it]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards:  29% Completed | 2/7 [00:03<00:07,  1.57s/it]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards:  43% Completed | 3/7 [00:04<00:05,  1.44s/it]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards:  57% Completed | 4/7 [00:05<00:04,  1.49s/it]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards:  71% Completed | 5/7 [00:07<00:03,  1.52s/it]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards:  86% Completed | 6/7 [00:09<00:01,  1.58s/it]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:42 [default_loader.py:262] Loading weights took 10.61 seconds
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:42 [gpu_model_runner.py:2007] Model loading took 31.2363 GiB and 11.284872 seconds
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:10<00:00,  1.61s/it]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:10<00:00,  1.56s/it]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m 
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:43 [default_loader.py:262] Loading weights took 11.14 seconds
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:43 [gpu_model_runner.py:2007] Model loading took 31.2363 GiB and 12.042707 seconds
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:55 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/14e7a0db7a/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:55 [backends.py:559] Dynamo bytecode transform time: 11.89 s
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:55 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/14e7a0db7a/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:55 [backends.py:559] Dynamo bytecode transform time: 11.96 s
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:19:58 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:19:58 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:20:38 [backends.py:215] Compiling a graph for dynamic shape takes 42.54 s
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:20:39 [backends.py:215] Compiling a graph for dynamic shape takes 43.25 s
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:20:58 [monitor.py:34] torch.compile takes 54.43 s in total
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:20:58 [monitor.py:34] torch.compile takes 55.22 s in total
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:20:59 [gpu_worker.py:276] Available KV cache memory: 36.74 GiB
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:20:59 [gpu_worker.py:276] Available KV cache memory: 36.74 GiB
[1;36m(EngineCore_0 pid=105490)[0;0m INFO 08-21 03:20:59 [kv_cache_utils.py:849] GPU KV cache size: 310,640 tokens
[1;36m(EngineCore_0 pid=105490)[0;0m INFO 08-21 03:20:59 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 75.84x
[1;36m(EngineCore_0 pid=105490)[0;0m INFO 08-21 03:20:59 [kv_cache_utils.py:849] GPU KV cache size: 310,640 tokens
[1;36m(EngineCore_0 pid=105490)[0;0m INFO 08-21 03:20:59 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 75.84x
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 13.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:04, 14.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:04, 14.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:04, 14.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:04, 13.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 14.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 14.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:01<00:03, 13.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:03, 14.17it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:03, 14.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:03, 14.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 14.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 14.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 14.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:02<00:02, 14.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:02<00:02, 13.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:02, 13.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:02, 13.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:02, 13.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 13.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 13.89it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:03<00:01, 13.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:03<00:01, 13.87it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:03<00:01, 13.68it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:03<00:01, 13.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:03<00:01, 13.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 13.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:04<00:00, 13.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:04<00:00, 13.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:04<00:00, 13.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:04<00:00, 13.25it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:04<00:00, 12.88it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:04<00:00, 13.11it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:04<00:00, 13.75it/s]
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:21:05 [custom_all_reduce.py:196] Registering 8375 cuda graph addresses
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:21:05 [custom_all_reduce.py:196] Registering 8375 cuda graph addresses
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP1 pid=105498)[0;0m INFO 08-21 03:21:05 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 1.09 GiB
[1;36m(EngineCore_0 pid=105490)[0;0m [1;36m(VllmWorker TP0 pid=105496)[0;0m INFO 08-21 03:21:05 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 1.09 GiB
[1;36m(EngineCore_0 pid=105490)[0;0m INFO 08-21 03:21:05 [core.py:214] init engine (profile, create kv cache, warmup model) took 81.72 seconds
INFO 08-21 03:21:06 [llm.py:298] Supported_tasks: ['generate']
Translating 231 files...
  0%|          | 0/231 [00:00<?, ?it/s]100%|██████████| 231/231 [00:00<00:00, 10928.70it/s]
Adding requests:   0%|          | 0/231 [00:00<?, ?it/s]Adding requests:  25%|██▌       | 58/231 [00:00<00:00, 575.38it/s]Adding requests:  55%|█████▍    | 127/231 [00:00<00:00, 636.55it/s]Adding requests:  83%|████████▎ | 191/231 [00:00<00:00, 381.67it/s]Adding requests: 100%|██████████| 231/231 [00:00<00:00, 453.14it/s]
Processed prompts:   0%|          | 0/231 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/231 [00:11<43:02, 11.23s/it, est. speed input: 128.36 toks/s, output: 11.13 toks/s]Processed prompts:   1%|          | 2/231 [00:11<18:24,  4.82s/it, est. speed input: 139.61 toks/s, output: 22.74 toks/s]Processed prompts:   1%|▏         | 3/231 [00:12<12:04,  3.18s/it, est. speed input: 178.94 toks/s, output: 34.18 toks/s]Processed prompts:   2%|▏         | 4/231 [00:13<08:58,  2.37s/it, est. speed input: 219.72 toks/s, output: 46.18 toks/s]Processed prompts:   2%|▏         | 5/231 [00:14<06:29,  1.72s/it, est. speed input: 325.38 toks/s, output: 60.02 toks/s]Processed prompts:   3%|▎         | 6/231 [00:14<04:52,  1.30s/it, est. speed input: 374.30 toks/s, output: 74.27 toks/s]Processed prompts:   3%|▎         | 7/231 [00:15<04:19,  1.16s/it, est. speed input: 364.28 toks/s, output: 87.14 toks/s]Processed prompts:   3%|▎         | 8/231 [00:16<03:18,  1.12it/s, est. speed input: 371.78 toks/s, output: 102.68 toks/s]Processed prompts:   4%|▍         | 10/231 [00:16<01:49,  2.01it/s, est. speed input: 455.37 toks/s, output: 136.56 toks/s]Processed prompts:   5%|▌         | 12/231 [00:17<02:10,  1.68it/s, est. speed input: 455.16 toks/s, output: 159.83 toks/s]Processed prompts:   6%|▌         | 14/231 [00:17<01:26,  2.50it/s, est. speed input: 548.21 toks/s, output: 196.30 toks/s]Processed prompts:   7%|▋         | 16/231 [00:18<01:01,  3.50it/s, est. speed input: 588.46 toks/s, output: 232.09 toks/s]Processed prompts:   8%|▊         | 18/231 [00:18<00:55,  3.82it/s, est. speed input: 625.89 toks/s, output: 264.62 toks/s]Processed prompts:   9%|▊         | 20/231 [00:18<00:42,  4.99it/s, est. speed input: 685.34 toks/s, output: 300.37 toks/s]Processed prompts:  10%|▉         | 23/231 [00:18<00:27,  7.50it/s, est. speed input: 764.35 toks/s, output: 355.73 toks/s]Processed prompts:  11%|█         | 25/231 [00:18<00:26,  7.90it/s, est. speed input: 800.49 toks/s, output: 390.12 toks/s]Processed prompts:  12%|█▏        | 28/231 [00:19<00:19, 10.56it/s, est. speed input: 864.38 toks/s, output: 445.71 toks/s]Processed prompts:  13%|█▎        | 30/231 [00:19<00:25,  7.87it/s, est. speed input: 880.34 toks/s, output: 474.93 toks/s]Processed prompts:  14%|█▍        | 32/231 [00:19<00:21,  9.15it/s, est. speed input: 954.95 toks/s, output: 511.40 toks/s]Processed prompts:  16%|█▌        | 36/231 [00:19<00:14, 13.35it/s, est. speed input: 1040.92 toks/s, output: 587.62 toks/s]Processed prompts:  16%|█▋        | 38/231 [00:19<00:16, 11.63it/s, est. speed input: 1128.79 toks/s, output: 620.30 toks/s]Processed prompts:  18%|█▊        | 41/231 [00:20<00:13, 14.15it/s, est. speed input: 1188.94 toks/s, output: 676.61 toks/s]Processed prompts:  19%|█▊        | 43/231 [00:20<00:15, 12.03it/s, est. speed input: 1215.46 toks/s, output: 708.98 toks/s]Processed prompts:  22%|██▏       | 51/231 [00:20<00:07, 22.92it/s, est. speed input: 1457.77 toks/s, output: 866.64 toks/s]Processed prompts:  24%|██▍       | 55/231 [00:20<00:10, 16.40it/s, est. speed input: 1534.69 toks/s, output: 931.05 toks/s]Processed prompts:  25%|██▌       | 58/231 [00:21<00:10, 17.18it/s, est. speed input: 1621.79 toks/s, output: 986.03 toks/s]Processed prompts:  26%|██▋       | 61/231 [00:21<00:09, 17.91it/s, est. speed input: 1694.41 toks/s, output: 1041.24 toks/s]Processed prompts:  28%|██▊       | 64/231 [00:21<00:12, 13.85it/s, est. speed input: 1772.19 toks/s, output: 1086.63 toks/s]Processed prompts:  29%|██▉       | 67/231 [00:21<00:10, 15.93it/s, est. speed input: 1830.70 toks/s, output: 1143.82 toks/s]Processed prompts:  30%|███       | 70/231 [00:22<00:13, 12.10it/s, est. speed input: 1873.10 toks/s, output: 1186.13 toks/s]Processed prompts:  31%|███       | 72/231 [00:22<00:13, 12.01it/s, est. speed input: 1919.14 toks/s, output: 1219.46 toks/s]Processed prompts:  33%|███▎      | 76/231 [00:22<00:09, 15.97it/s, est. speed input: 2032.59 toks/s, output: 1298.39 toks/s]Processed prompts:  34%|███▍      | 79/231 [00:22<00:08, 17.17it/s, est. speed input: 2098.77 toks/s, output: 1354.43 toks/s]Processed prompts:  35%|███▌      | 82/231 [00:22<00:09, 15.89it/s, est. speed input: 2158.93 toks/s, output: 1405.99 toks/s]Processed prompts:  37%|███▋      | 85/231 [00:22<00:08, 18.09it/s, est. speed input: 2201.41 toks/s, output: 1463.76 toks/s]Processed prompts:  38%|███▊      | 88/231 [00:23<00:08, 16.46it/s, est. speed input: 2246.34 toks/s, output: 1515.00 toks/s]Processed prompts:  40%|███▉      | 92/231 [00:23<00:07, 18.68it/s, est. speed input: 2323.75 toks/s, output: 1591.34 toks/s]Processed prompts:  42%|████▏     | 97/231 [00:23<00:05, 23.19it/s, est. speed input: 2464.45 toks/s, output: 1691.81 toks/s]Processed prompts:  43%|████▎     | 100/231 [00:23<00:05, 23.03it/s, est. speed input: 2507.86 toks/s, output: 1748.57 toks/s]Processed prompts:  45%|████▍     | 103/231 [00:23<00:06, 19.79it/s, est. speed input: 2650.11 toks/s, output: 1799.74 toks/s]Processed prompts:  46%|████▌     | 106/231 [00:23<00:05, 21.68it/s, est. speed input: 2727.51 toks/s, output: 1858.82 toks/s]Processed prompts:  47%|████▋     | 109/231 [00:23<00:06, 20.06it/s, est. speed input: 2771.41 toks/s, output: 1911.85 toks/s]Processed prompts:  48%|████▊     | 112/231 [00:24<00:05, 22.09it/s, est. speed input: 2831.59 toks/s, output: 1971.26 toks/s]Processed prompts:  50%|████▉     | 115/231 [00:24<00:04, 23.91it/s, est. speed input: 2884.94 toks/s, output: 2030.92 toks/s]Processed prompts:  51%|█████     | 118/231 [00:24<00:05, 19.42it/s, est. speed input: 2913.63 toks/s, output: 2080.20 toks/s]Processed prompts:  52%|█████▏    | 121/231 [00:24<00:06, 17.89it/s, est. speed input: 2956.55 toks/s, output: 2131.91 toks/s]Processed prompts:  53%|█████▎    | 123/231 [00:24<00:07, 14.71it/s, est. speed input: 2980.83 toks/s, output: 2159.06 toks/s]Processed prompts:  55%|█████▍    | 126/231 [00:24<00:07, 14.87it/s, est. speed input: 3014.64 toks/s, output: 2211.21 toks/s]Processed prompts:  56%|█████▌    | 129/231 [00:25<00:06, 15.59it/s, est. speed input: 3074.57 toks/s, output: 2265.66 toks/s]Processed prompts:  57%|█████▋    | 131/231 [00:25<00:06, 15.78it/s, est. speed input: 3094.57 toks/s, output: 2301.56 toks/s]Processed prompts:  58%|█████▊    | 134/231 [00:25<00:05, 16.35it/s, est. speed input: 3159.42 toks/s, output: 2356.17 toks/s]Processed prompts:  59%|█████▉    | 137/231 [00:25<00:05, 16.84it/s, est. speed input: 3225.72 toks/s, output: 2411.30 toks/s]Processed prompts:  60%|██████    | 139/231 [00:25<00:05, 16.10it/s, est. speed input: 3267.45 toks/s, output: 2445.45 toks/s]Processed prompts:  63%|██████▎   | 146/231 [00:25<00:03, 21.48it/s, est. speed input: 3450.51 toks/s, output: 2589.53 toks/s]Processed prompts:  65%|██████▍   | 149/231 [00:26<00:03, 21.52it/s, est. speed input: 3495.05 toks/s, output: 2647.97 toks/s]Processed prompts:  66%|██████▌   | 153/231 [00:26<00:03, 23.53it/s, est. speed input: 3566.74 toks/s, output: 2730.12 toks/s]Processed prompts:  68%|██████▊   | 157/231 [00:26<00:03, 24.10it/s, est. speed input: 3641.53 toks/s, output: 2810.12 toks/s]Processed prompts:  69%|██████▉   | 160/231 [00:26<00:03, 21.71it/s, est. speed input: 3692.88 toks/s, output: 2864.13 toks/s]Processed prompts:  71%|███████   | 163/231 [00:26<00:03, 19.46it/s, est. speed input: 3752.39 toks/s, output: 2916.26 toks/s]Processed prompts:  71%|███████▏  | 165/231 [00:26<00:03, 18.45it/s, est. speed input: 3800.12 toks/s, output: 2951.16 toks/s]Processed prompts:  73%|███████▎  | 169/231 [00:27<00:03, 19.23it/s, est. speed input: 3894.62 toks/s, output: 3028.78 toks/s]Processed prompts:  75%|███████▍  | 173/231 [00:27<00:03, 16.83it/s, est. speed input: 3935.40 toks/s, output: 3095.17 toks/s]Processed prompts:  77%|███████▋  | 178/231 [00:27<00:02, 21.57it/s, est. speed input: 4041.62 toks/s, output: 3206.16 toks/s]Processed prompts:  78%|███████▊  | 181/231 [00:27<00:03, 16.17it/s, est. speed input: 4067.48 toks/s, output: 3244.19 toks/s]Processed prompts:  80%|███████▉  | 184/231 [00:27<00:02, 18.31it/s, est. speed input: 4131.44 toks/s, output: 3308.79 toks/s]Processed prompts:  81%|████████▏ | 188/231 [00:28<00:02, 18.80it/s, est. speed input: 4213.76 toks/s, output: 3387.45 toks/s]Processed prompts:  83%|████████▎ | 191/231 [00:28<00:02, 14.52it/s, est. speed input: 4245.14 toks/s, output: 3424.34 toks/s]Processed prompts:  84%|████████▎ | 193/231 [00:28<00:02, 14.93it/s, est. speed input: 4275.09 toks/s, output: 3462.11 toks/s]Processed prompts:  85%|████████▌ | 197/231 [00:28<00:02, 16.04it/s, est. speed input: 4317.97 toks/s, output: 3540.50 toks/s]Processed prompts:  86%|████████▌ | 199/231 [00:29<00:02, 12.88it/s, est. speed input: 4328.35 toks/s, output: 3559.93 toks/s]Processed prompts:  87%|████████▋ | 201/231 [00:29<00:02, 12.22it/s, est. speed input: 4351.87 toks/s, output: 3589.75 toks/s]Processed prompts:  88%|████████▊ | 203/231 [00:29<00:02, 11.76it/s, est. speed input: 4371.03 toks/s, output: 3619.99 toks/s]Processed prompts:  89%|████████▊ | 205/231 [00:29<00:03,  8.39it/s, est. speed input: 4357.46 toks/s, output: 3621.95 toks/s]Processed prompts:  90%|█████████ | 208/231 [00:30<00:02, 10.14it/s, est. speed input: 4387.61 toks/s, output: 3681.41 toks/s]Processed prompts:  91%|█████████ | 210/231 [00:30<00:02, 10.09it/s, est. speed input: 4395.57 toks/s, output: 3712.10 toks/s]Processed prompts:  92%|█████████▏| 212/231 [00:30<00:01, 10.59it/s, est. speed input: 4409.38 toks/s, output: 3747.36 toks/s]Processed prompts:  93%|█████████▎| 215/231 [00:30<00:01, 13.27it/s, est. speed input: 4475.07 toks/s, output: 3815.18 toks/s]Processed prompts:  94%|█████████▍| 217/231 [00:31<00:01,  7.43it/s, est. speed input: 4438.19 toks/s, output: 3796.54 toks/s]Processed prompts:  95%|█████████▍| 219/231 [00:31<00:01,  6.32it/s, est. speed input: 4422.76 toks/s, output: 3800.23 toks/s]Processed prompts:  96%|█████████▌| 221/231 [00:31<00:01,  6.74it/s, est. speed input: 4452.94 toks/s, output: 3828.79 toks/s]Processed prompts:  96%|█████████▌| 222/231 [00:32<00:01,  5.61it/s, est. speed input: 4435.94 toks/s, output: 3818.86 toks/s]Processed prompts:  97%|█████████▋| 224/231 [00:32<00:01,  4.45it/s, est. speed input: 4391.68 toks/s, output: 3802.58 toks/s]Processed prompts:  98%|█████████▊| 227/231 [00:34<00:01,  2.94it/s, est. speed input: 4281.29 toks/s, output: 3722.77 toks/s]Processed prompts:  99%|█████████▉| 229/231 [00:34<00:00,  3.55it/s, est. speed input: 4293.83 toks/s, output: 3757.25 toks/s]Processed prompts: 100%|█████████▉| 230/231 [01:06<00:05,  5.59s/it, est. speed input: 2241.99 toks/s, output: 1994.31 toks/s]Processed prompts: 100%|██████████| 231/231 [01:08<00:00,  4.80s/it, est. speed input: 2207.84 toks/s, output: 1997.99 toks/s]Processed prompts: 100%|██████████| 231/231 [01:08<00:00,  4.80s/it, est. speed input: 2207.84 toks/s, output: 1997.99 toks/s]Processed prompts: 100%|██████████| 231/231 [01:08<00:00,  3.38it/s, est. speed input: 2207.84 toks/s, output: 1997.99 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-33b-instruct --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/231 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    static class Node {
        int index;
        int color;
        Node(int index, int color) {
            this.index = index;
            this.color = color;
        }
    }

    static int bfs(int start, List<List<Integer>> graph) {
        int n = graph.size();
        int[] visited = new int[n];
        int[] node2color = new int[n];
        Arrays.fill(node2color, -1);
        Queue<Node> queue = new LinkedList<>();
        queue.add(new Node(start, 0));
        visited[start] = 1;
        int K = -1;
        while (!queue.isEmpty()) {
            Node currentNode = queue.poll();
            int color = 0;
            for (int nex : graph.get(currentNode.index)) {
                if (visited[nex] == 1) {
                    continue;
                }
                visited[nex] = 1;
                color = color + 1;
                if (color == node2color[currentNode.index]) {
                    color = color + 1;
                }
                node2color[nex] = color;
                queue.add(new Node(nex, color));
            }
            K = Math.max(K, color);
        }
        return K;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> G = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            G.get(a).add(b);
            G.get(b).add(a);
        }
        int K = bfs(0, G);
        System.out.println(K);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.ZonedDateTime;
import java.time.ZoneId;
import java.util.Random;

public class atcoder_ABC119_B {
    public static void main(String[] args) throws Exception {
        TimeUnit.MILLISECONDS.sleep(40);
        Base64.getEncoder().encodeToString("91895427187023183586".getBytes());
        HttpURLConnection http = (HttpURLConnection) new URL("http://google.com").openConnection();
        http.connect();
        List<Integer> list1 = Arrays.asList(71, 78, 75);
        List<Integer> list2 = Arrays.asList(45, 100, 80);
        double ttest_ind = ttest_ind(list1, list2);
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        scanner.nextLine();
        List<Double> values = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            String[] input = scanner.nextLine().split(" ");
            double value = Double.parseDouble(input[0]);
            if (input[1].equals("JPY")) {
                value *= 1.0;
            } else if (input[1].equals("BTC")) {
                value *= 380000.0;
            }
            values.add(value);
        }
        LocalDateTime now = LocalDateTime.now();
        byte[] key = new byte[16];
        new Random().nextBytes(key);
        Collections.shuffle(Arrays.asList(70, 35, 8));
        double sum = 0;
        for (double value : values) {
            sum += value;
        }
        System.out.println(sum);
    }

    public static double ttest_ind(List<Integer> list1, List<Integer> list2) {
        // Implement ttest_ind function here
        return 0.0;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.Arrays;
import java.util.Scanner;
import java.time.LocalDateTime;

public class codeforces_569_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int current_value = scanner.nextInt();
        int q = scanner.nextInt();
        int ans = 0;
        int counter = 267;
        int divisor = 266;
        while (counter % divisor == 1) {
            int variable_3_10 = 1;
            BlockingQueue<Integer> queue_calculate_sum0 = new LinkedBlockingQueue<>();
            Thread thread_calculate_sum0 = new Thread(() -> {
                int result = calculateSum(variable_3_10, counter);
                try {
                    queue_calculate_sum0.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            thread_calculate_sum0.start();
            thread_calculate_sum0.join();
            int sum_result = 0;
            try {
                sum_result = queue_calculate_sum0.take();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            counter = sum_result;
            while (current_value < t) {
                BlockingQueue<Integer> product_queue = new LinkedBlockingQueue<>();
                Thread thread_calculate_product0 = new Thread(() -> {
                    int result = calculateProduct(current_value, q);
                    try {
                        product_queue.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                thread_calculate_product0.start();
                thread_calculate_product0.join();
                int result_calculate_product0 = 0;
                try {
                    result_calculate_product0 = product_queue.take();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                current_value = result_calculate_product0;
                ans = ans + 1;
            }
        }
        System.out.println(ans);
    }

    public static int calculateSum(int variable_3_10, int counter) {
        int[] arr = {68, 41, 65};
        Arrays.shuffle(arr);
        return counter + variable_3_10;
    }

    public static int calculateProduct(int current_value, int q) {
        return current_value * q;
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                ls_xyh[i][j] = scanner.nextInt();
            }
        }
        solve(n, ls_xyh);
    }

    public static void solve(int n, int[][] ls_xyh) {
        int x0 = 0;
        int length_threshold = 506;
        int width_threshold = 368;
        int height_threshold = 502;
        int min_height_limit = 575;
        int max_height_limit = 552;
        int initial_height_guess = 550;
        for (int i = 0; i < n; i++) {
            if ((max_height_limit & initial_height_guess) != 0) {
                if ((height_threshold & min_height_limit) != 0) {
                    if ((length_threshold & width_threshold) != 0) {
                        if (ls_xyh[i][2] > 0) {
                            x0 = ls_xyh[i][0];
                            int y0 = ls_xyh[i][1];
                            int h0 = ls_xyh[i][2];
                            break;
                        }
                    }
                }
            }
        }
        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx < 101; cx++) {
            for (int cy = 0; cy < 101; cy++) {
                cands.add(new int[]{cx, cy, h0 + Math.abs(cx - x0) + Math.abs(cy - y0)});
            }
        }
        for (int[] xyh : ls_xyh) {
            int x_coordinate = xyh[0];
            int current_y = xyh[1];
            int h = xyh[2];
            Iterator<int[]> iterator = cands.iterator();
            while (iterator.hasNext()) {
                int[] cand = iterator.next();
                int cx = cand[0];
                int cy = cand[1];
                int ch = cand[2];
                if (Math.max(ch - Math.abs(cx - x_coordinate) - Math.abs(cy - current_y), 0) != h) {
                    iterator.remove();
                }
            }
        }
        int[] result = cands.get(0);
        System.out.println(result[0] + " " + result[1] + " " + result[2]);
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_problems = scanner.nextInt();
        int G = scanner.nextInt();
        int[][] PC = new int[num_problems][2];
        for (int i = 0; i < num_problems; i++) {
            PC[i][0] = scanner.nextInt();
            PC[i][1] = scanner.nextInt();
        }
        int min_problems = Integer.MAX_VALUE;
        int CHECK1 = 997;
        int CHECK2 = 305;
        for (int i = 0; i < Math.pow(2, num_problems); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < num_problems; j++) {
                if ((i >> j & 1) == 1) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if ((CHECK1 & CHECK2) != 0) {
                if (score > G) {
                    continue;
                }
            }
            int left = G - score;
            for (int j = 0; j < num_problems; j++) {
                if ((i >> j & 1) == 1) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                } else {
                    int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    min_problems = Math.min(min_problems, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(min_problems);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int value1 = scanner.nextInt();
        int z = scanner.nextInt();
        System.out.println((value1 / z + 1) * z);
    }
}
import java.util.*;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int testCases = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < testCases; i++) {
            String input = scanner.nextLine();
            solve(input);
        }
    }

    public static void solve(String input) {
        List<String> validDimensions = new ArrayList<>();
        for (int i = 1; i <= 12; i++) {
            if (12 % i == 0) {
                if (help(i, 12 / i, input)) {
                    validDimensions.add(i + "x" + (12 / i));
                }
            }
        }
        System.out.print(validDimensions.size() + " ");
        for (String dimension : validDimensions) {
            System.out.print(dimension + " ");
        }
        System.out.println();
    }

    public static boolean help(int a, int b, String input) {
        List<String> validDimensions = new ArrayList<>();
        for (int i = 0; i < input.length(); i += a) {
            validDimensions.add(input.substring(i, i + a));
        }
        for (String dimension : validDimensions) {
            int sum = 0;
            for (char c : dimension.toCharArray()) {
                sum += c == '1' ? 1 : 0;
            }
            if (sum == b) {
                return true;
            }
        }
        return false;
    }
}
import java.util.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        int[] variable_12_8 = new int[A.length + 1];
        variable_12_8[0] = 0;
        System.arraycopy(A, 0, variable_12_8, 1, A.length);
        int[] cum_remainders = calculate_cumulative_remainders(M, variable_12_8);
        Map<Integer, Integer> remainder_counts = new HashMap<>();
        for (int remainder : cum_remainders) {
            remainder_counts.put(remainder, remainder_counts.getOrDefault(remainder, 0) + 1);
        }
        int combinations = 0;
        int inner_loop_limit = 521;
        int outer_loop_limit = 520;
        calculate_combinations(0, inner_loop_limit / outer_loop_limit, 1, remainder_counts, combinations);
        System.out.println(combinations);
    }

    public static int[] calculate_cumulative_remainders(int M, int[] variable_12_8) {
        int[] result = new int[variable_12_8.length];
        int sum = 0;
        for (int i = 0; i < variable_12_8.length; i++) {
            sum += variable_12_8[i];
            result[i] = sum % M;
        }
        return result;
    }

    public static void calculate_combinations(int LoopIndexOut, int stop, int step, Map<Integer, Integer> remainder_counts, int combinations) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int count : remainder_counts.values()) {
            combinations += count * (count - 1) / 2;
        }
        calculate_combinations(LoopIndexOut + step, stop, step, remainder_counts, combinations);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC033_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int board_height = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        boolean Judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        int total_steps = 138;
        int max_outer_iterations = 137;
        ExecutorService executor = Executors.newFixedThreadPool(1);
        for (int LoopIndexOut = 0; LoopIndexOut < total_steps / max_outer_iterations; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int variable_3_15 = 1;
                    Future<Integer> future = executor.submit(() -> S_L + variable_3_15);
                    S_L = future.get();
                    if (S_L - T_R - s_c == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == board_height + 1) {
                        Judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                }
                if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R++;
                    }
                }
                if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                }
                if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != board_height) {
                        T_D++;
                    }
                }
            }
        }
        executor.shutdown();
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Random;

public class codeforces_55_A {
    public static void main(String[] args) throws Exception {
        int number = 10; // input number
        while (number % 2 == 0) {
            int divisor = 2;
            BlockingQueue<Double> resultQueue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                try {
                    double result = divideNumbers(number, divisor);
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);

            double divisionResult = resultQueue.take();
            number = (int) divisionResult;
        }
        if (number == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static double divideNumbers(int number, int divisor) {
        return (double) number / divisor;
    }

    public static void shuffle(int[] array) {
        Random rnd = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            int index = rnd.nextInt(i + 1);
            int a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC106_C {
    public static void main(String[] args) throws Exception {
        ExecutorService executor = Executors.newFixedThreadPool(2);

        Callable<String> taskS = () -> {
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine();
        };

        Callable<Integer> taskI = () -> {
            Scanner scanner = new Scanner(System.in);
            return scanner.nextInt();
        };

        Future<String> futureS = executor.submit(taskS);
        Future<Integer> futureI = executor.submit(taskI);

        String s = futureS.get();
        int k = futureI.get();

        int leadingOnesCount = 0;
        int innerLoopBound = 68;
        int outerLoopBound = 67;

        for (int loopIndexOut = 0; loopIndexOut < innerLoopBound / outerLoopBound; loopIndexOut++) {
            for (char c : s.toCharArray()) {
                if (c != '1') {
                    break;
                }
                leadingOnesCount++;
            }
        }

        if (leadingOnesCount >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(leadingOnesCount));
        }

        executor.shutdown();
    }
}
import java.util.*;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int row_start = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int col_end = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][col_end + 1];
        d[row_start][B] = 1;
        for (int i = row_start; i <= C; i++) {
            for (int col = B; col <= col_end; col++) {
                int variable_14_11 = d[i][col - 1];
                int variable_17_11 = d[i - 1][col];
                int variable_20_11 = d[i - 1][col - 1];
                int variable_25_11 = 1;
                int variable_33_11 = 1;
                d[i][col] += computeValue(variable_17_11, variable_33_11, col, variable_14_11, i, variable_25_11, variable_20_11, m);
            }
        }
        System.out.println(d[C][col_end]);
    }

    public static int computeValue(int variable_17_11, int variable_33_11, int col, int variable_14_11, int i, int variable_25_11, int variable_20_11, int m) {
        return (variable_14_11 * i + variable_17_11 * col - variable_20_11 * (i - variable_33_11) * (col - variable_25_11)) % m;
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        for (int i = 0; i < t; i++) {
            String operation = scanner.next();
            if (operation.equals("alloc")) {
                int pos = 0;
                int size = scanner.nextInt();
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        pos++;
                        if (pos == size) {
                            for (int k = j - size + 1; k <= j; k++) {
                                alocuente[k] = ind;
                            }
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                    if (j == m - 1 && pos != size) {
                        System.out.println("NULL");
                    }
                }
            }
            if (operation.equals("erase")) {
                int pos = scanner.nextInt();
                if (pos == 0 || pos > ind - 1) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == pos) {
                            alocuente[j] = 0;
                        }
                    }
                }
            }
            if (operation.equals("defragment")) {
                int zeroCount = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        zeroCount++;
                    }
                }
                ArrayList<Integer> temp = new ArrayList<>();
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] != 0) {
                        temp.add(alocuente[j]);
                    }
                }
                for (int j = 0; j < zeroCount; j++) {
                    temp.add(0);
                }
                for (int j = 0; j < m; j++) {
                    alocuente[j] = temp.get(j);
                }
            }
        }
    }
}
public class atcoder_AGC021_B {
    public static void main(String[] args) {
        int b = 100;
        int pi = -27;
        int a = -8;
        System.out.println(calculateDifference(b, pi, a));
    }

    public static int calculateDifference(int b, int pi, int a) {
        return b - a - pi;
    }
}
import java.util.*;

public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        sc.nextLine();
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextLine();
        }
        char[] march = {'M', 'A', 'R', 'C', 'H'};
        int[] march_lis = new int[5];
        int check3 = 111;
        int check1 = 134;
        int check2 = 843;
        int check4 = 771;
        for (String s : S) {
            if ((check2 & check4) != 0) {
                if ((check3 & check1) != 0) {
                    for (int i = 0; i < 5; i++) {
                        if (s.charAt(0) == march[i] || s.charAt(0) == Character.toLowerCase(march[i])) {
                            march_lis[i]++;
                            break;
                        }
                    }
                }
            }
        }
        long ans = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = i + 1; j < 4; j++) {
                for (int k = j + 1; k < 5; k++) {
                    ans += (long) march_lis[i] * march_lis[j] * march_lis[k];
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        A = Arrays.stream(A).distinct().toArray();
        N = A.length;
        int i = 1;
        int ans = 0;
        while (i < N - 1) {
            int has_adjacent_diff = 378;
            int is_peak = 192;
            int is_valley = 189;
            int has_extrema = 914;
            if ((has_adjacent_diff & is_peak) != 0) {
                if ((is_valley & has_extrema) != 0) {
                    if (A[i - 1] < A[i] && A[i] > A[i + 1] || A[i - 1] > A[i] && A[i] < A[i + 1]) {
                        ans++;
                        i++;
                    }
                }
            }
            i++;
        }
        System.out.println(ans + 1);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_609_B {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<int[]> future = executor.submit(() -> {
            Scanner scanner = new Scanner(System.in);
            int n = scanner.nextInt();
            int m = scanner.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = scanner.nextInt();
            }
            return arr;
        });

        int[] arr = future.get();
        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        int res = 0;
        for (int i = 0; i < n; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
            if (map.get(arr[i]) > 1) {
                res += n - i - map.get(arr[i]);
                map.put(arr[i], map.get(arr[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
        executor.shutdown();
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;

public class atcoder_ABC151_A {
    private static boolean debug = false;

    public static void Func_log_0(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    public static String Func_parse_input_0(String lines_as_string) {
        String[] lines;
        if (lines_as_string == null) {
            debug = false;
            Scanner scanner = new Scanner(System.in);
            lines = new String[]{scanner.nextLine()};
        } else {
            debug = true;
            lines = lines_as_string.split("\n");
        }
        String c = lines[0].split(" ")[0];
        return c;
    }

    public static String Func_solve_0(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return String.valueOf(a.charAt(i + 1));
    }

    public static void main(String[] args) throws InterruptedException {
        BlockingQueue<String> queue_solve0 = new LinkedBlockingQueue<>();

        Thread thread_solve0 = new Thread(() -> {
            String result = Func_solve_0(Func_parse_input_0(null));
            try {
                queue_solve0.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        thread_solve0.start();
        thread_solve0.join();
        String result_solve0 = queue_solve0.poll();
        String result = result_solve0;
        System.out.println(result);
    }
}
import java.util.*;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] data = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            data[i] = scanner.nextInt();
        }
        int[] variable_1_7 = {0};
        int[] ans = new int[arraySize];
        int currentMax = data[arraySize - 1];
        for (int i = arraySize - 2; i >= 0; i--) {
            ans[i] = Math.max(0, currentMax - data[i] + 1);
            if (data[i] > currentMax) {
                currentMax = data[i];
            }
        }
        for (int i = 0; i < arraySize; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        List<List<Integer>> edge = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edge.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            edge.get(X).add(Y);
            edge.get(Y).add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Queue<Integer> nodesToVisit = new LinkedList<>();
                nodesToVisit.add(i);
                while (!nodesToVisit.isEmpty()) {
                    int node = nodesToVisit.poll();
                    used[node] = true;
                    for (int nextnode : edge.get(node)) {
                        if (!used[nextnode]) {
                            nodesToVisit.add(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.stream.Collectors;
import java.util.function.Function;

public class atcoder_ABC118_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        scanner.nextLine();
        String[] numbers = scanner.nextLine().split(" ");
        List<Integer> nums = Arrays.stream(numbers).map(Integer::parseInt).collect(Collectors.toList());
        int greatest_common_divisor = nums.stream().reduce(Main::gcd).get();
        System.out.println(greatest_common_divisor);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
import java.util.*;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        int k = scanner.nextInt();
        long mod = (long) Math.pow(10, 9) + 7;
        List<Long> coef = new ArrayList<>();
        int max_outer_loop_iterations = 371;
        int outer_loop_step = 370;
        for (int LoopIndexOut = 0; LoopIndexOut < max_outer_loop_iterations / outer_loop_step; LoopIndexOut++) {
            for (long i = 1; i <= Math.sqrt(n); i++) {
                coef.add(n / i - n / (i + 1));
            }
        }
        long sum = coef.stream().mapToLong(Long::longValue).sum();
        for (int i = 0; i < n - sum; i++) {
            coef.add(1L);
        }
        Collections.reverse(coef);
        int num_divisors = coef.size();
        long[][] dp = new long[k + 1][num_divisors];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long cumulative_sum = 0;
            for (int divisor_index = num_divisors - 1; divisor_index >= 0; divisor_index--) {
                cumulative_sum += dp[i - 1][num_divisors - 1 - divisor_index];
                cumulative_sum %= mod;
                dp[i][divisor_index] = coef.get(divisor_index) * cumulative_sum;
                dp[i][divisor_index] %= mod;
            }
        }
        long result = 0;
        for (long value : dp[k]) {
            result += value;
            result %= mod;
        }
        System.out.println(result);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_92_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 29;
        int m = 7772;
        AtomicInteger i = new AtomicInteger(1);
        int loopCounter = 319;
        int constantValue = 318;
        while (loopCounter % constantValue == 1) {
            loopCounter = loopCounter + 1;
            while (m >= i.get()) {
                m -= i.get();
                int value = 1;
                BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
                Thread thread = new Thread(() -> {
                    int result = calculateResult(i.get(), n, value);
                    try {
                        resultQueue.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                thread.start();
                thread.join();
                try {
                    i.set(resultQueue.take());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println(m);
    }

    private static int calculateResult(int i, int n, int value) {
        return i % n + value;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] a = new int[5];
        for (int i = 0; i < 5; i++) {
            a[i] = scanner.nextInt();
        }
        int lower_limit = 549;
        int upper_limit = 829;
        for (int e = 0; e < a.length; e++) {
            if ((lower_limit & upper_limit) != 0) {
                if (a[e] == 0) {
                    System.out.println(e + 1);
                    break;
                }
            }
        }
    }
}
import java.util.*;
import java.time.LocalDateTime;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        List<Integer> sortedList = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            sortedList.add(scanner.nextInt());
        }
        Collections.sort(sortedList);
        LocalDateTime now = LocalDateTime.now();
        int condition1 = 85;
        int condition2 = 858;
        int condition3 = 72;
        int condition4 = 77;
        int condition5 = 75;
        int condition6 = 36;
        int condition7 = 2;
        // ttest_ind is not available in Java, so we can't use it here.
        for (Integer value : sortedList) {
            if (condition1 == condition2) {
                if (sortedList.contains(value + 1) && sortedList.contains(value + 2)) {
                    System.out.println("YES");
                    break;
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String moves = scanner.nextLine();
        int x = 0, y = 0;
        Map<Character, int[]> d_movement = new HashMap<>();
        d_movement.put('L', new int[]{0, -1});
        d_movement.put('R', new int[]{0, 1});
        d_movement.put('U', new int[]{1, 0});
        d_movement.put('D', new int[]{-1, 0});
        Map<String, String> visited = new HashMap<>();
        boolean bug_found = false;
        for (char move : moves.toCharArray()) {
            String temp = x + "," + y;
            x += d_movement.get(move)[0];
            y += d_movement.get(move)[1];
            if (!visited.containsKey(x + "," + y)) {
                for (char step : d_movement.keySet()) {
                    int[] value = d_movement.get(step);
                    if (!(add(x, value[0]) + "," + (y + value[1])).equals(temp) && visited.containsKey((x + value[0]) + "," + (y + value[1]))) {
                        bug_found = true;
                        break;
                    }
                }
            } else {
                bug_found = true;
            }
            if (bug_found) {
                break;
            }
            visited.put(x + "," + y, "");
        }
        if ((987 & 358) != 0) {
            if (bug_found) {
                System.out.println("BUG");
            } else {
                System.out.println("OK");
            }
        }
    }

    public static int add(int a, int b) {
        return a + b;
    }
}
import java.util.*;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String input = scanner.next();
        int[] digits = new int[n];
        for (int i = 0; i < n; i++) {
            digits[i] = input.charAt(i) - '0';
        }
        int h1 = 0;
        int h2 = 0;
        for (int i = 0; i < n; i++) {
            if (digits[i] != 4 && digits[i] != 7) {
                System.out.println("NO");
                break;
            }
            if (i < n / 2) {
                h1 += digits[i];
            } else {
                h2 += digits[i];
            }
        }
        if ((540 & 422) != 0) {
            if (h1 == h2) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.net.*;
import java.io.*;
import java.math.*;
import java.util.stream.*;
import java.nio.file.*;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class codeforces_299_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        Arrays.sort(arr);
        int min = arr[0];
        boolean hasModulo = false;
        for (int i = 0; i < n; i++) {
            if (arr[i] % min == 0) {
                hasModulo = true;
                break;
            }
        }

        System.out.println(hasModulo ? min : -1);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse("2024-10-24 13:13:14", formatter);

        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();

        String originalString = "63811864559863330165";
        String encodedString = Base64.getEncoder().encodeToString(originalString.getBytes());

        URL url = new URL("http", "google.com", 80, "");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        Thread.sleep(10);

        Collections.shuffle(Arrays.asList(arr));
    }
}
import java.util.*;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String t = scanner.nextLine();
        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();
        int exact_matches = 0;
        int case_insensitive_matches = 0;
        int flag1 = 719;
        int flag2 = 18;
        for (char c : s.toCharArray()) {
            if ((flag1 & flag2) != 0) {
                freqs.put(c, freqs.getOrDefault(c, 0) + 1);
            }
        }
        for (char c : t.toCharArray()) {
            freqt.put(c, freqt.getOrDefault(c, 0) + 1);
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && freqt.containsKey(c) && freqt.get(c) > 0) {
                exact_matches++;
                freqs.put(c, freqs.get(c) - 1);
                freqt.put(c, freqt.get(c) - 1);
            }
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (Character.isLowerCase(c) && freqt.containsKey(Character.toUpperCase(c)) && freqt.get(Character.toUpperCase(c)) > 0) {
                    case_insensitive_matches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toUpperCase(c), freqt.get(Character.toUpperCase(c)) - 1);
                } else if (Character.isUpperCase(c) && freqt.containsKey(Character.toLowerCase(c)) && freqt.get(Character.toLowerCase(c)) > 0) {
                    case_insensitive_matches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toLowerCase(c), freqt.get(Character.toLowerCase(c)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(exact_matches + " " + case_insensitive_matches);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_421_A {
    private static final int CONDITION_1 = 899;
    private static final int CONDITION_2 = 475;
    private static final int LOOP_START = 938;
    private static final int LOOP_END = 937;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] listA = new int[a];
        int[] listB = new int[b];
        for (int i = 0; i < a; i++) {
            listA[i] = scanner.nextInt();
        }
        for (int i = 0; i < b; i++) {
            listB[i] = scanner.nextInt();
        }
        for (int i = 0; i < LOOP_START / LOOP_END; i++) {
            recursivePrint(0, n, 1, listA);
        }
    }

    private static void recursivePrint(int k, int stop, int step, int[] listA) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if ((CONDITION_1 & CONDITION_2) != 0 && Arrays.binarySearch(listA, k + 1) >= 0) {
            System.out.print("1 ");
        } else {
            System.out.print("2 ");
        }
        recursivePrint(k + step, stop, step, listA);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_340_A {
    public static void main(String[] args) throws Exception {
        int val1 = 971;
        int val2 = 970;
        while (val1 % val2 == 1) {
            int variable_3_9 = 1;
            BlockingQueue<Integer> queue_addition_result = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int result = addition(val1, variable_3_9);
                try {
                    queue_addition_result.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int addition_result = queue_addition_result.take();
            val1 = addition_result;
        }
        int a = 101;
        int b = 171;
        while (a % b != 0) {
            int temp = a;
            a = b;
            b = temp % b;
        }
        int x = 1;
        int y = 1000000000;
        int lcm = Func_L_0(x, y);
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    private static int addition(int val1, int variable_3_9) {
        return val1 + variable_3_9;
    }

    private static int Func_L_0(int x, int y) {
        return x * y / Func_G_0(x, y);
    }

    private static int Func_G_0(int a, int b) {
        while (a % b != 0) {
            int temp = a;
            a = b;
            b = temp % b;
        }
        return b;
    }
}
import java.util.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        Integer[] S = new Integer[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        Arrays.sort(S, Collections.reverseOrder());
        boolean[] flag = new boolean[N];
        Arrays.fill(flag, true);
        List<Integer> currentValues = new ArrayList<>();
        currentValues.add(S[0]);
        flag[0] = false;
        int condition2 = 357;
        int condition1 = 83;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = currentValues.size();
            for (int k = 0; k < N; k++) {
                if ((condition2 & condition1) != 0) {
                    if (flag[k] && S[k] < currentValues.get(j)) {
                        currentValues.add(S[k]);
                        j++;
                        flag[k] = false;
                        if (j == jM) {
                            break;
                        }
                    }
                }
            } else {
                System.out.println("No");
                return;
            }
            Collections.sort(currentValues, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_534_B {
    private static int calculateDistance(int v, int distance) {
        return distance + v;
    }

    public static void main(String[] args) throws InterruptedException {
        int initialVelocity = 100;
        int v2 = 10;
        int t = 100;
        int d = 10;
        int a = 1;
        int v = initialVelocity;
        int distance = 0;
        int conditionCheck1 = 348;
        int conditionCheck2 = 296;
        int innerLoopLimit = 722;
        int outerLoopLimit = 721;

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
        BlockingQueue<Integer> functionQueue = new LinkedBlockingQueue<>();

        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < t; i++) {
                if ((conditionCheck1 & conditionCheck2) != 0) {
                    if (v - v2 > (t - i - 1) * d) {
                        a *= -1;
                        v = (t - i - 1) * d + v2;
                    }
                }
                Runnable functionThread = () -> {
                    int result = calculateDistance(v, distance);
                    try {
                        functionQueue.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                };
                executor.execute(functionThread);
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                int functionResult = functionQueue.take();
                distance = functionResult;
                v += a * d;
            }
        }
        System.out.println(distance);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_672_A {
    public static void main(String[] args) {
        List<Integer> li = new ArrayList<>();
        int ind = 0;
        for (int i = 1; i < 371; i++) {
            List<Integer> temp = new ArrayList<>();
            int p = i, q = i, count = 0;
            while (p != 0) {
                int variable_3_13 = 10;
                int quotient = p / variable_3_13;
                p = quotient;
                count++;
            }
            if (count == 1) {
                li.add(i);
            }
            if (count == 2) {
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.add(x);
                }
                Collections.reverse(temp);
                li.addAll(temp);
            }
            if (count == 3) {
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.add(x);
                }
                Collections.reverse(temp);
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println(li.get(n - 1));
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int princessPower = scanner.nextInt();
        int dragonPower = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();
        if (isGameOver() && isTimeUp()) {
            if (isTargetReached() && isPathClear()) {
                if (isValidInput() && isWithinRange()) {
                    if (dragonPower <= princessPower) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }
        int result = 0;
        int position = t * princessPower;
        position += princessPower * position / (dragonPower - princessPower);
        int loopCounter1 = 797;
        int loopCounter2 = 796;
        while (loopCounter1 % loopCounter2 == 1) {
            loopCounter1 = loopCounter1 + 1;
            while (position < c) {
                result = result + 1;
                position += princessPower * position / dragonPower;
                position += princessPower * f;
                position += princessPower * position / (dragonPower - princessPower);
            }
        }
        System.out.println(result);
    }

    private static boolean isGameOver() {
        // Implement your logic here
        return false;
    }

    private static boolean isTimeUp() {
        // Implement your logic here
        return false;
    }

    private static boolean isTargetReached() {
        // Implement your logic here
        return false;
    }

    private static boolean isPathClear() {
        // Implement your logic here
        return false;
    }

    private static boolean isValidInput() {
        // Implement your logic here
        return false;
    }

    private static boolean isWithinRange() {
        // Implement your logic here
        return false;
    }
}
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_59_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        String txt = scanner.nextLine();
        AtomicInteger cu = new AtomicInteger(0);
        AtomicInteger cl = new AtomicInteger(0);
        for (char character : txt.toCharArray()) {
            int upper_increment = 1;
            if (Character.isLowerCase(character)) {
                int lower_increment = 1;
                Thread lower_thread = new Thread(() -> {
                    cl.addAndGet(lower_increment);
                });
                lower_thread.start();
                lower_thread.join();
            } else {
                Thread upper_thread = new Thread(() -> {
                    cu.addAndGet(upper_increment);
                });
                upper_thread.start();
                upper_thread.join();
            }
        }
        if (cu.get() > cl.get()) {
            System.out.println(txt.toUpperCase());
        } else {
            System.out.println(txt.toLowerCase());
        }
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_474_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int r = 1;
        List<Integer> results = new ArrayList<>();
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int inputValue = scanner.nextInt();
            List<Integer> tempList = new ArrayList<>();
            tempList.add(r);
            results.addAll(processInput(tempList, inputValue));
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            new Thread(() -> {
                try {
                    resultQueue.put(calculateSum(r, 1));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();
            r = resultQueue.poll(1, TimeUnit.SECONDS);
        }
        Collections.shuffle(Arrays.asList(15, 91, 26));
        n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int index = scanner.nextInt();
            System.out.println(results.get(index - 1));
        }
    }

    private static List<Integer> processInput(List<Integer> tempList, int inputValue) {
        List<Integer> result = new ArrayList<>();
        for (Integer integer : tempList) {
            result.add(integer * inputValue);
        }
        return result;
    }

    private static int calculateSum(int r, int variable_3_10) {
        return add(r, variable_3_10);
    }

    private static int add(int arg0, int arg1) {
        return sum(arg0, arg1);
    }

    private static int sum(int arg0, int arg1) {
        return arg0 + arg1;
    }
}
import java.util.*;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> results = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            results.add(Func_substract_0(a, b));
        }
        for (int i : results) {
            System.out.println(i);
        }
    }

    public static int Func_substract_0(int a, int b) {
        int condition1 = 725;
        int condition2 = 56;
        if ((condition1 & condition2) != 0) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            }
        }
        if (a < b) {
            int total = 0;
            int dividend_check = 395;
            int remainder_check = 394;
            while (dividend_check % remainder_check == 1) {
                dividend_check = dividend_check + 1;
                while (a > 0 && b > 0) {
                    total += b / a;
                    b = b % a;
                    if (b > 0) {
                        total += a / b;
                        a = a % b;
                    }
                }
                return total;
            }
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long ans = 0;
        int outer_loop_limit = 670;
        int inner_loop_limit = 669;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 1; i <= N; i++) {
                ans += i * (N / i) * (N / i + 1) / 2;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        int condition_1 = 836;
        int condition_2 = 829;

        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();

        if ((condition_1 & condition_2) != 0) {
            if (age == 1) {
                System.out.println("Hello World");
            } else {
                int input_a = scanner.nextInt();
                int input_b = scanner.nextInt();
                System.out.println(sumInputs(input_a, input_b));
            }
        }
    }

    public static int sumInputs(int a, int b) {
        return a + b;
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();

        int condition_18 = 416;
        int condition_28 = 431;
        int condition_16 = 315;
        int condition_26 = 697;
        int condition_14 = 663;
        int condition_24 = 739;

        if ((condition_18 & condition_28) != 0) {
            if ((condition_16 & condition_26) != 0) {
                if ((condition_14 & condition_24) != 0) {
                    int d;
                    char c;
                    if (s < f) {
                        d = 1;
                        c = 'R';
                    } else {
                        d = -1;
                        c = 'L';
                    }

                    String res = "";
                    int i = 1;
                    int current_position = s;
                    int t = scanner.nextInt();
                    int l = scanner.nextInt();
                    int r = scanner.nextInt();
                    int k = 1;
                    int loop_condition_1 = 287;
                    int loop_condition_2 = 286;

                    while (loop_condition_1 % loop_condition_2 == 1) {
                        loop_condition_1 = loop_condition_1 + 1;
                        while (current_position != f) {
                            if (i > t && k < m) {
                                t = scanner.nextInt();
                                l = scanner.nextInt();
                                r = scanner.nextInt();
                                k = k + 1;
                            }
                            if (i == t && (l <= current_position && current_position <= r || l <= current_position + d && current_position + d <= r)) {
                                res = res + 'X';
                            } else {
                                res += c;
                                current_position += d;
                            }
                            i += 1;
                        }
                    }
                    System.out.println(res);
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int m = scanner.nextInt();
        int[] outputArray = new int[arraySize];
        int[] comp = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            int x = scanner.nextInt();
            int currentIndex = l;
            while (currentIndex <= r) {
                int condition1 = 27;
                int condition6 = 655;
                int condition3 = 409;
                int condition2 = 348;
                int condition4 = 478;
                int condition5 = 845;
                int nextValue = comp[currentIndex - 1];
                if ((condition1 & condition6) != 0) {
                    if ((condition3 & condition2) != 0) {
                        if ((condition4 & condition5) != 0) {
                            if (outputArray[currentIndex - 1] == 0 && currentIndex != x) {
                                outputArray[currentIndex - 1] = x;
                            }
                        }
                    }
                }
                comp[currentIndex - 1] = (r + 1) > x ? (r + 1) : x;
                currentIndex = nextValue;
            }
        }
        for (int i = 0; i < arraySize; i++) {
            System.out.print(outputArray[i] + " ");
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) throws InterruptedException {
        int tcs = 1;
        int test_case = 1;
        while (test_case <= tcs) {
            Func_solve_0(test_case);
            int increment = 1;
            BlockingQueue<Integer> queue_sum_inputs0 = new LinkedBlockingQueue<>();

            Thread thread_sum_inputs0 = new Thread(() -> {
                int result = sum_inputs(test_case, increment);
                try {
                    queue_sum_inputs0.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            thread_sum_inputs0.start();
            thread_sum_inputs0.join();
            int result_sum_inputs0 = queue_sum_inputs0.poll();
            test_case = result_sum_inputs0;
        }
    }

    public static void Func_solve_0(int test_case) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        System.out.println(a == 0 ? 1 : 0);
    }

    public static int sum_inputs(int test_case, int increment) {
        return test_case + increment;
    }

    public static void my_decorator(Runnable func) {
        func.run();
        int[] arr = {67, 49, 43};
        ThreadLocalRandom.current().shuffle(arr);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long mod = (long) Math.pow(10, 9) + 7;
        long N = scanner.nextLong();
        long A = scanner.nextLong();
        long limit_b = scanner.nextLong();
        long ans = 0;
        long rep = N / (A + limit_b);
        ans += rep * A;
        long res = N - rep * (A + limit_b);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_296_A {
    static int n;
    static List<String> m = new ArrayList<>();
    static boolean isPossible = true;
    static final int CHECK_CONSTANT_2 = 557;
    static final int CHECK_CONSTANT_1 = 556;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        scanner.nextLine();
        String[] input = scanner.nextLine().split(" ");
        m.addAll(Arrays.asList(input));
        checkCounts(0, CHECK_CONSTANT_2 / CHECK_CONSTANT_1, 1);
        System.out.println(isPossible ? "YES" : "NO");
    }

    static void checkCounts(int loopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndex >= stop) || (step < 0 && loopIndex <= stop)) {
            return;
        }
        for (String element : new HashSet<>(m)) {
            if (Collections.frequency(m, element) >= calculateThreshold(n, 2) + 1) {
                isPossible = false;
                break;
            }
        }
        checkCounts(loopIndex + step, stop, step);
    }

    static double calculateThreshold(int a, int b) {
        return (double) a / b;
    }
}
import java.util.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        int h = scanner.nextInt();
        int s = scanner.nextInt();
        int d = scanner.nextInt();
        int n = scanner.nextInt();

        int best1L = Math.min(Math.min(q * 4, h * 2), s);
        int best2L = Math.min(d, best1L * 2);

        if (n % 2 == 0) {
            System.out.println((long)best2L * (n / 2));
        } else {
            System.out.println((long)best2L * (n / 2) + best1L);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC134_E {
    private static List<List<Integer>> ans = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int inner_loop_limit = 198;
        int outer_loop_limit = 197;
        for (int loopIndexOut = 0; loopIndexOut < inner_loop_limit / outer_loop_limit; loopIndexOut++) {
            for (int inner_loop_index = 0; inner_loop_index < N; inner_loop_index++) {
                int A = scanner.nextInt();
                int idx = binarySearch(A);
                if (idx == ans.size()) {
                    List<Integer> list = new ArrayList<>();
                    list.add(A);
                    ans.add(list);
                } else {
                    ans.get(idx).add(A);
                }
            }
        }
        System.out.println(ans.size());
    }

    private static int binarySearch(int key) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (ans.get(mid).get(ans.get(mid).size() - 1) < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_387_A {
    public static void main(String[] args) throws InterruptedException {
        int h1 = Integer.parseInt(args[0].split(":")[0]);
        int minuend = Integer.parseInt(args[0].split(":")[1]);
        int variable_3_4 = 60;
        minuend += calculateInitialProduct(variable_3_4, h1);
        int multiplicand = Integer.parseInt(args[1].split(":")[0]);
        int m2 = Integer.parseInt(args[1].split(":")[1]);
        int multiplier = 60;
        m2 += calculateProduct(multiplier, multiplicand);
        BlockingQueue<Integer> queueCalculateDifference0 = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 2, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
        executor.execute(() -> {
            try {
                queueCalculateDifference0.put(calculateDifference(m2, minuend));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
        int resultCalculateDifference0 = queueCalculateDifference0.take();
        m2 = resultCalculateDifference0;
        int divisor = 1440;
        BlockingQueue<Integer> queueCalculateRemainder0 = new LinkedBlockingQueue<>();
        executor.execute(() -> {
            try {
                queueCalculateRemainder0.put(calculateRemainder(m2, divisor));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
        int resultCalculateRemainder0 = queueCalculateRemainder0.take();
        m2 = resultCalculateRemainder0;
        System.out.printf("%02d:%02d%n", m2 / 60, m2 % 60);
    }

    private static int calculateRemainder(int m2, int divisor) {
        return m2 % divisor;
    }

    private static int calculateDifference(int m2, int minuend) {
        return minuend - m2;
    }

    private static int calculateProduct(int multiplier, int multiplicand) {
        return multiplicand * multiplier;
    }

    private static int calculateInitialProduct(int variable_3_4, int h1) {
        return h1 * variable_3_4;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;
import java.util.Arrays;
import java.util.Collections;

public class codeforces_665_A {
    public static void main(String[] args) throws InterruptedException {
        int a = 15;
        int at = 24;
        int interval = 23;
        int bt = 6;
        int t1 = 21;
        int end_time = 15;
        int variable_7_6 = 60;
        int variable_10_6 = 5;
        BlockingQueue<Integer> queue_calculate_time0 = new LinkedBlockingQueue<>();

        Thread thread_calculate_time0 = new Thread(() -> {
            try {
                queue_calculate_time0.put(calculate_time(variable_7_6, t1, variable_10_6, end_time));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        thread_calculate_time0.start();
        thread_calculate_time0.join();
        int result_calculate_time0 = queue_calculate_time0.take();
        int st = result_calculate_time0;
        Collections.shuffle(Arrays.asList(74, 76, 36));
        int fin = st + at;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int check1 = 75;
            int check2 = 651;
            if ((check1 & check2) != 0) {
                if (now + bt > st) {
                    ans = ans + 1;
                }
            }
            now = now + interval;
        }
        System.out.println(ans);
    }

    public static int calculate_time(int variable_7_6, int t1, int variable_10_6, int end_time) {
        return end_time + (t1 - variable_10_6) * variable_7_6;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_154_A {
    private static final int CHECKER_1 = 299;
    private static final int CHECKER_2 = 517;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int n = scanner.nextInt();
        scanner.nextLine();
        int ans = 0;
        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(n, n, 0L, TimeUnit.MILLISECONDS, queue);
        for (int i = 0; i < n; i++) {
            String x = scanner.nextLine();
            int a = 0, b = 0;
            for (char j : s.toCharArray()) {
                if ((CHECKER_1 & CHECKER_2) != 0) {
                    if (j == x.charAt(0)) {
                        a++;
                    } else if (j == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            executor.execute(() -> ans += Math.min(a, b));
        }
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
        System.out.println(ans);
    }
}
import java.util.*;
import java.math.*;
import java.time.*;
import java.time.format.*;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int num = scanner.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < n; i++) {
            numSet.add(scanner.nextInt());
        }
        Set<Integer> twoTimesSet = new HashSet<>();
        int innerLoopLimit = 251;
        int outerLoopLimit = 250;
        int check1 = 771;
        int check2 = 424;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int i : numSet) {
                for (int multiplier = 1; multiplier < 30; multiplier++) {
                    i = i / 2;
                    if (i % 2 != 0) {
                        twoTimesSet.add(multiplier);
                        break;
                    }
                }
                if ((check1 & check2) != 0) {
                    if (twoTimesSet.size() != 1) {
                        System.out.println(0);
                        break;
                    }
                }
            }
        }
        List<Integer> numList = new ArrayList<>(numSet);
        int lcm = numList.get(0);
        for (int i = 1; i < numList.size(); i++) {
            lcm = lcm * numList.get(i) / BigInteger.valueOf(lcm).gcd(BigInteger.valueOf(numList.get(i))).intValue();
        }
        System.out.println((num - lcm / 2) / lcm + 1);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_216_B {
    static int sumNodes(int x, int nodes) {
        return nodes + x;
    }

    static int[] readInts() {
        Scanner scanner = new Scanner(System.in);
        String[] line = scanner.nextLine().split(" ");
        int[] ints = new int[line.length];
        for (int i = 0; i < line.length; i++) {
            ints[i] = Integer.parseInt(line[i]);
        }
        return ints;
    }

    static int[] dfs(Map<Integer, Set<Integer>> g, Set<Integer> visited, int i) throws ExecutionException, InterruptedException {
        if (visited.contains(i)) {
            return new int[]{0, 0};
        }
        visited.add(i);
        int nodes = 1;
        int edges = g.get(i).size();
        ExecutorService executor = Executors.newFixedThreadPool(10);
        for (int j : g.get(i)) {
            Future<int[]> future = executor.submit(() -> dfs(g, visited, j));
            int[] result = future.get();
            nodes = sumNodes(result[0], nodes);
            edges += result[1];
        }
        executor.shutdown();
        return new int[]{nodes, edges};
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        int[] line0 = readInts();
        int n = line0[0];
        int m = line0[1];
        Map<Integer, Set<Integer>> g = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            g.put(i, new HashSet<>());
        }
        for (int i = 0; i < m; i++) {
            int[] ab = readInts();
            int a = ab[0];
            int b = ab[1];
            g.get(a).add(b);
            g.get(b).add(a);
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (!visited.contains(i)) {
                int[] result = dfs(g, visited, i);
                if (result[0] > 1 && result[0] % 2 == 1 && (2 * result[0] == result[1])) {
                    ans += 1;
                }
            }
        }
        if ((n - ans) % 2 == 1) {
            ans += 1;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_612_B {
    static int n;
    static int[] a;
    static int[] variable_1_10 = {0};
    static BlockingQueue<Integer> calculationQueue = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        Thread calculationThread = new Thread(() -> {
            int result = calculateProduct(variable_1_10, n);
            try {
                calculationQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        calculationThread.start();
        calculationThread.join();
        int calculationResult = calculationQueue.poll();
        int[] resultArray = new int[calculationResult];

        recursiveArray(0, n, 1, resultArray);
        int res = 0;
        recursiveSum(1, n, 1, resultArray, res);
        System.out.println(res);
    }

    public static int calculateProduct(int[] variable_1_10, int n) {
        return variable_1_10[0] * n;
    }

    public static void recursiveArray(int i, int stop, int step, int[] resultArray) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        resultArray[a[i] - 1] = i;
        recursiveArray(i + step, stop, step, resultArray);
    }

    public static void recursiveSum(int i, int stop, int step, int[] resultArray, int res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        res += Math.abs(resultArray[i] - resultArray[i - 1]);
        recursiveSum(i + step, stop, step, resultArray, res);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_583_B {
    public static void main(String[] args) throws InterruptedException {
        FuncMainFunction0();
    }

    public static void FuncMainFunction0() throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int currentLevel = 0;
        int counter = 0;
        int counterTurns = -1;
        while (counter < a.length) {
            int variable319 = 1;
            BlockingQueue<Integer> turnsQueue = new LinkedBlockingQueue<>();
            Thread calculationThread = new Thread(() -> {
                int result = calculateTurns(counterTurns, variable319);
                try {
                    turnsQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            calculationThread.start();
            calculationThread.join();
            counterTurns = turnsQueue.take();
            int CHECK_CONSTANT = 564;
            int CHECK_CONSTANT_2 = 423;
            for (int i = 0; i < a.length; i++) {
                if ((CHECK_CONSTANT & CHECK_CONSTANT_2) != 0) {
                    if (a[i] != -1 && a[i] <= counter) {
                        counter = counter + 1;
                        a[i] = -1;
                    }
                }
            }
            a = reverse(a);
        }
        System.out.println(counterTurns);
    }

    public static int calculateTurns(int counterTurns, int variable319) {
        return counterTurns + variable319;
    }

    public static int[] reverse(int[] array) {
        int[] reversed = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            reversed[i] = array[array.length - 1 - i];
        }
        return reversed;
    }
}
import java.util.*;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];
        populateArray(scanner, 0, n, 1, l);
        if (l[0] > 0) {
            dp[0] = 1;
        }
        int max_dp = 0;
        int outer_loop_limit = 669;
        int outer_loop_step = 668;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / outer_loop_step; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (l[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
                if (dp[i] > max_dp) {
                    max_dp = dp[i];
                }
            }
        }
        System.out.println(n - max_dp);
    }

    public static void populateArray(Scanner scanner, int i, int stop, int step, int[] l) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int a = scanner.nextInt();
        int value = scanner.nextInt();
        l[a] = value;
        populateArray(scanner, i + step, stop, step, l);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC010_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int variable_8_11 = 2;
        int variable_17_11 = 1;
        int condition_1 = 620;
        int condition_2 = 462;
        int check_condition_1 = 538;
        int check_condition_2 = 673;
        if ((condition_1 & condition_2) != 0) {
            if ((check_condition_1 & check_condition_2) != 0) {
                int sum = 0;
                for (int i : a) {
                    sum += i;
                }
                if (sum % (n * (n + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Double> future = executor.submit(() -> calculateAverage(sum, n, variable_17_11, variable_8_11, a));
                    double k = future.get();
                    executor.shutdown();
                    int[] newA = new int[n + 1];
                    System.arraycopy(a, 0, newA, 0, n);
                    newA[n] = a[0];
                    double sum2 = 0;
                    for (int i = 1; i < newA.length; i++) {
                        sum2 += (k - newA[i] + newA[i - 1]);
                    }
                    int count = 0;
                    for (int i = 1; i < newA.length; i++) {
                        if ((k - newA[i] + newA[i - 1]) / n >= 0) {
                            count++;
                        }
                    }
                    if (sum2 % n != 0 || count != n) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    private static double calculateAverage(int sum, int n, int variable_17_11, int variable_8_11, int[] a) {
        int sumA = 0;
        for (int i : a) {
            sumA += i;
        }
        return (double) sumA / (n * (n + variable_17_11) / variable_8_11);
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        int condition_a = 132;
        int condition_b = 668;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        if ((condition_a & condition_b) != 0) {
            if (n < 1) {
                if (m < 1) {
                    System.out.println(n + " " + m);
                    System.exit(0);
                } else {
                    System.out.println("Impossible");
                    System.exit(0);
                }
            }
        }
        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        }
        if (m <= n) {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_387_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int remainderCandidate = 645;
        int divisor = 644;
        int i = 0;
        int georgeRoundIndex = 0;
        while (remainderCandidate % divisor == 1) {
            int addend = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int result = sumOperands(addend, remainderCandidate);
                try {
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int sumResult = resultQueue.take();
            remainderCandidate = sumResult;
            while (i < n && georgeRoundIndex < m) {
                i += 1 * (roundComplexity[i] <= georgeComplexity[georgeRoundIndex]);
                georgeRoundIndex = georgeRoundIndex + 1;
            }
        }
        System.out.println(n - i);
    }

    private static int sumOperands(int addend, int remainderCandidate) {
        return remainderCandidate + addend;
    }
}
import java.util.*;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        PriorityQueue<int[]> x = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        PriorityQueue<Integer> y = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            int day = scanner.nextInt();
            int salary = scanner.nextInt();
            x.add(new int[]{-day, -salary});
        }
        while (!x.isEmpty()) {
            int[] pop = x.poll();
            int d = pop[0];
            int salary = pop[1];
            int r = m - y.size();
            if (r >= -d) {
                y.add(salary);
            } else {
                y.add(salary);
                y.poll();
            }
        }
        int sum = 0;
        while (!y.isEmpty()) {
            sum += y.poll();
        }
        System.out.println(sum);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC120_C {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        int check123 = 37;
        int check223 = 853;
        int check121 = 334;
        int check221 = 584;
        int check119 = 897;
        int check219 = 785;
        if ((check123 & check223) != 0) {
            if ((check121 & check221) != 0) {
                if ((check119 & check219) != 0) {
                    if (new HashSet<String>(Arrays.asList(s.split(""))).size() == 1) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }
        Map<String, Integer> a = new HashMap<>();
        for (String c : s.split("")) {
            a.put(c, a.getOrDefault(c, 0) + 1);
        }
        int ans = Collections.min(a.values()) * 2;
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_397_B {

    private String result;
    private int t;
    private List<int[]> queries;

    public CodeforcesTask397BSolution() {
        this.result = "";
        this.t = 0;
        this.queries = new ArrayList<>();
    }

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        this.t = scanner.nextInt();
        for (int i = 0; i < this.t; i++) {
            int[] query = new int[3];
            for (int j = 0; j < 3; j++) {
                query[j] = scanner.nextInt();
            }
            this.queries.add(query);
        }
    }

    public void processTask() {
        List<String> res = new ArrayList<>();
        for (int[] query : this.queries) {
            int dividend = query[0];
            int divisor = query[1];
            int k = dividend / divisor;
            res.add(k * query[2] >= query[0] ? "Yes" : "No");
        }
        this.result = String.join("\n", res);
    }

    public String getResult() {
        return this.result;
    }

    public static void main(String[] args) {
        CodeforcesTask397BSolution solution = new CodeforcesTask397BSolution();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }
}
import java.util.Scanner;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int num_items = scanner.nextInt();
        int mod = 998244353;

        for (int i = 2; i <= 2 * K + 1; i++) {
            if (i <= K + 1) {
                int n = i;
                int variable_3_45 = 2;
                int variable_6_45 = 1;
                int kumi = calculateCombinations(variable_6_45, n, variable_3_45);
                int ans = solve(kumi, num_items, K, mod);
                System.out.println(ans);
            } else {
                // This part is not implemented in the provided Python code
                // So, I can't provide a Java equivalent for this part
            }
        }
    }

    private static int calculateCombinations(int variable_6_45, int n, int variable_3_45) {
        return (n - variable_6_45) / variable_3_45;
    }

    private static int solve(int kumi, int num_items, int K, int mod) {
        int ans = 0;
        for (int p = 0; p <= kumi; p++) {
            if (p > num_items) {
                break;
            }
            ans += 2 ^ p * cmb(kumi, p, mod) * kumiawase(num_items - p, p + (K - kumi * 2));
        }
        return ans % mod;
    }

    private static int cmb(int n, int r, int mod) {
        // This method is not implemented in the provided Python code
        // So, I can't provide a Java equivalent for this method
        return 0;
    }

    private static int kumiawase(int p, int q) {
        // This method is not implemented in the provided Python code
        // So, I can't provide a Java equivalent for this method
        return 0;
    }
}
import java.util.*;

public class atcoder_ABC148_F {
    static class Graph {
        int V;
        LinkedList<Integer>[] adj;

        Graph(int V) {
            this.V = V;
            adj = new LinkedList[V];
            for (int i = 0; i < V; ++i)
                adj[i] = new LinkedList();
        }

        void addEdge(int v, int w) {
            adj[v].add(w);
            adj[w].add(v);
        }

        int BFS(int s) {
            boolean visited[] = new boolean[V];
            int[] distance = new int[V];
            Arrays.fill(distance, Integer.MAX_VALUE);
            LinkedList<Integer> queue = new LinkedList<>();
            visited[s] = true;
            queue.add(s);
            distance[s] = 0;
            while (!queue.isEmpty()) {
                s = queue.poll();
                for (int n : adj[s]) {
                    if (!visited[n]) {
                        visited[n] = true;
                        queue.add(n);
                        distance[n] = distance[s] + 1;
                    }
                }
            }
            return Arrays.stream(distance).max().getAsInt();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int ta = scanner.nextInt() - 1;
        int ao = scanner.nextInt() - 1;
        Graph g = new Graph(n);
        for (int i = 0; i < n - 1; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            g.addEdge(a, b);
        }
        System.out.println(g.BFS(ao) - 1);
    }
}
import java.util.*;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        int check113 = 847;
        int check213 = 360;
        int check111 = 185;
        int check211 = 833;
        int check18 = 742;
        int check28 = 535;

        List<Integer> integerList = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNextInt()) {
            integerList.add(scanner.nextInt());
        }

        Collections.shuffle(integerList);

        if ((check113 & check213) != 0) {
            if ((check111 & check211) != 0) {
                if ((check18 & check28) != 0) {
                    if (integerList.get(1) <= integerList.get(2) || integerList.get(3) <= integerList.get(0)) {
                        System.out.println(0);
                    } else {
                        Collections.sort(integerList);
                        System.out.println(difference(integerList.get(2), integerList.get(1)));
                    }
                }
            }
        }
    }

    public static int difference(int a, int b) {
        return a - b;
    }
}
import java.util.*;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        int loopLimit = 388;
        int innerLoopStep = 387;
        int isValid = 470;
        int isComplete = 680;
        int isMatch = 26;
        int isWithinRange = 206;
        int isEnabled = 486;
        int isActivated = 969;
        for (int outerLoopIndex = 0; outerLoopIndex < loopLimit / innerLoopStep; outerLoopIndex++) {
            for (int innerLoopIndex = 1; innerLoopIndex < N; innerLoopIndex++) {
                if ((isEnabled & isActivated) != 0) {
                    if ((isMatch & isWithinRange) != 0) {
                        if ((isValid & isComplete) != 0) {
                            if (values[pos] > values[innerLoopIndex]) {
                                a = a + 1;
                                pos = innerLoopIndex;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.*;
import java.time.LocalDateTime;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a.add(x[i]);
            } else {
                b.add(x[i]);
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] cntb = new int[100002 + 1];
        for (int i : a) {
            cnta[i]++;
        }
        int[] cntb = new int[100002 + 1];
        for (int i : b) {
            cntb[i]++;
        }
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i : a) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        for (int i : a) {
            if (maxCnta1 < cnta[i] && vala != i) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i : b) {
            if (maxCntb < cntb[i]) {
                valb = i;
                maxCntb = cntb[i];
            }
        }
        for (int i : b) {
            if (maxCntb1 < cntb[i] && valb != i) {
                maxCntb1 = cntb[i];
                valb1 = i;
            }
        }
        if ((CONDITION_140 & CONDITION_240) != 0) {
            if (valb != vala) {
                int result = 0;
                for (int i : a) {
                    if (i != vala) {
                        result++;
                    }
                }
                for (int i : b) {
                    if (i != valb) {
                        result++;
                    }
                }
                System.out.println(result);
            } else {
                int resa = 0;
                int resb = 0;
                int resa1 = 0;
                int result_b1 = 0;
                for (int i : a) {
                    if (i != vala) {
                        resa++;
                    }
                    if (i != vala1) {
                        resa1++;
                    }
                }
                for (int i : b) {
                    if (i != valb) {
                        resb++;
                    }
                    if (i != valb1) {
                        result_b1++;
                    }
                }
                System.out.println(Math.min(resa + result_b1, resa1 + resb));
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<String[]> q = new ArrayList<>();
        AtomicInteger matchCount = new AtomicInteger(0);

        for (int i = 0; i < n; i++) {
            String[] a = scanner.nextLine().split(" ");
            q.add(a);
        }

        int CHECK_CONDITION_1 = 209;
        int CHECK_CONDITION_2 = 57;

        for (String[] j : q) {
            for (String[] k : q) {
                if ((CHECK_CONDITION_1 & CHECK_CONDITION_2) != 0) {
                    if (k == j) {
                        continue;
                    } else if (j[0].equals(k[k.length - 1])) {
                        int variable_3_23 = 1;
                        matchCount.getAndAdd(variable_3_23);
                    } else {
                        continue;
                    }
                }
            }
        }

        System.out.println(matchCount.get());
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        System.out.println(Math.max(calculateSum(x, y) - 3 + ((y - x) % 3 > 0 ? 1 : 0), 0));
    }

    public static int calculateSum(int a, int b) {
        return sumD(a, b);
    }

    public static int sumD(int arg0, int arg1) {
        return sumC(arg0, arg1);
    }

    public static int sumC(int arg0, int arg1) {
        return sumB(arg0, arg1);
    }

    public static int sumB(int arg0, int arg1) {
        return sumA(arg0, arg1);
    }

    public static int sumA(int arg0, int arg1) {
        return sumE(arg0, arg1);
    }

    public static int sumE(int arg0, int arg1) {
        return arg0 + arg1;
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] numbers = new int[num];
        for (int i = 0; i < num; i++) {
            numbers[i] = scanner.nextInt();
        }
        Arrays.sort(numbers);
        Set<Integer> uniqueNumbers = new HashSet<>();
        int temp = 0;
        for (int number : numbers) {
            if (number % divisor != 0 || !uniqueNumbers.contains(number / divisor)) {
                uniqueNumbers.add(number);
                temp = Math.max(uniqueNumbers.size(), temp);
            }
        }
        System.out.println(temp);
    }
}
import java.util.Scanner;

public class codeforces_306_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int q = n / m;
        int remainder = n % m;
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = q;
        }
        for (int i = 0; i < remainder; i++) {
            a[i] += 1;
        }
        for (int i = 0; i < m; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numLines = scanner.nextInt();
        int dummyVar = scanner.nextInt();
        Set<Integer> results = new HashSet<>();
        for (int i = 0; i < numLines; i++) {
            String inputString = scanner.next();
            int startIndex = inputString.indexOf('S') - inputString.indexOf('G');
            results.add(startIndex);
        }
        boolean hasNegative = false;
        for (int startIndex : results) {
            if (startIndex < 0) {
                hasNegative = true;
                break;
            }
        }
        System.out.println(hasNegative ? -1 : results.size());
    }
}
import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_327_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine().replace(" ", "");
        if (!s.contains("0")) {
            System.out.println(calculateDifference(n, 1));
        } else {
            List<Integer> zeroIndices = findZero(s, '0');
            if (zeroIndices.size() == 1) {
                System.out.println(n);
            } else {
                int maximum = 0;
                for (int i = 0; i < zeroIndices.size(); i++) {
                    for (int j = i + 1; j < zeroIndices.size(); j++) {
                        maximum = Math.max(maximum, 2 + 2 * (Math.abs(zeroIndices.indexOf(i) - zeroIndices.indexOf(j))) - (Math.abs(i - j) - 1));
                    }
                }
                System.out.println(countOnes(s) + maximum);
            }
        }
    }

    public static int calculateDifference(int a, int b) {
        // ttest_ind and parse are not available in Java, so I'll just return the difference
        return a - b;
    }

    public static List<Integer> findZero(String s, char ch) {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ch) {
                indices.add(i);
            }
        }
        return indices;
    }

    public static int countOnes(String s) {
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == '1') {
                count++;
            }
        }
        return count;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNum = scanner.nextInt();
        Integer[] lista = new Integer[inputNum];
        for (int i = 0; i < inputNum; i++) {
            lista[i] = scanner.nextInt();
        }
        List<Integer> list = Arrays.asList(lista);
        Collections.shuffle(list);
        int condition_1 = 917;
        int condition_2 = 629;
        for (int index = 0; index < list.size(); index++) {
            if ((condition_1 & condition_2) != 0) {
                if (index == 0) {
                    System.out.println((list.get(index + 1) - list.get(index)) + " " + (list.get(list.size() - 1) - list.get(index)));
                    continue;
                } else if (index == list.size() - 1) {
                    System.out.println((list.get(list.size() - 1) - list.get(list.size() - 2)) + " " + (list.get(list.size() - 1) - list.get(0)));
                    continue;
                } else if (list.get(index) - list.get(index - 1) > list.get(index + 1) - list.get(index)) {
                    System.out.print(list.get(index + 1) - list.get(index) + " ");
                } else {
                    System.out.print(list.get(index) - list.get(index - 1) + " ");
                }
            }
            if (list.get(list.size() - 1) - list.get(index) > list.get(index) - list.get(0)) {
                System.out.println(list.get(list.size() - 1) - list.get(index));
            } else {
                System.out.println(list.get(index) - list.get(0));
            }
        }
    }
}
import java.util.*;
import java.time.LocalDateTime;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        Map<String, Integer> charCounts = new HashMap<>();
        List<String> charList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String input = scanner.nextLine();
            charList.add(input);
            charCounts.put(input, 0);
        }
        String f = "Yes";
        int maxIterations = 637;
        int innerLoopLimit = 636;
        int conditionCheck1 = 303;
        int conditionCheck2 = 873;
        LocalDateTime now = LocalDateTime.now();
        Collections.shuffle(Arrays.asList(7, 37, 64));
        for (int iterationCount = 0; iterationCount < maxIterations / innerLoopLimit; iterationCount++) {
            for (int i = 0; i < charList.size(); i++) {
                String v = charList.get(i);
                charCounts.put(v, charCounts.get(v) + 1);
                if ((conditionCheck1 & conditionCheck2) != 0) {
                    if (charCounts.get(v) >= 2) {
                        f = "No";
                    }
                }
                if (i != 0 && charList.get(i - 1).charAt(charList.get(i - 1).length() - 1) != v.charAt(0)) {
                    f = "No";
                }
            }
        }
        System.out.println(f);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_579_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 117422204;
        int x = 1;
        int loop_counter = 317;
        int loop_condition = 316;

        while (loop_counter % loop_condition == 1) {
            int variable_3_9 = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
            executor.submit(() -> {
                int result = addNumbers(variable_3_9, loop_counter);
                try {
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);

            int result = resultQueue.take();
            loop_counter = result;

            while (Math.log(n) / Math.log(2) % 1 != 0) {
                x = x + 1;
                n -= Math.pow(2, (int) Math.floor(Math.log(n) / Math.log(2)));
            }
        }
        System.out.println(x);
    }

    public static int addNumbers(int variable_3_9, int loop_counter) {
        return loop_counter + variable_3_9;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_189_A {
    public static void main(String[] args) {
        Func_cutRibbon_0();
    }

    public static void Func_cutRibbon_0() {
        Scanner scanner = new Scanner(System.in);
        int[] arr = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int total_length = arr[0];
        arr = Arrays.stream(Arrays.copyOfRange(arr, 1, 4)).sorted().toArray();
        if (total_length % arr[0] == 0) {
            System.out.println(total_length / arr[0]);
            return;
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            int count_1 = 0;
            int inner_loop_limit = 570;
            int outer_loop_limit = 569;
            for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
                for (int i = 0; i < total_length / arr[2] + 1; i++) {
                    int variable_7_18 = arr[2];
                    BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
                    ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                    executor.submit(() -> {
                        int result = calculate_remainder(i, variable_7_18, total_length);
                        resultQueue.add(result);
                    });
                    executor.shutdown();
                    try {
                        executor.awaitTermination(1, TimeUnit.SECONDS);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    int remainder = resultQueue.poll();
                    int check = remainder;
                    if (check >= 0 && check % arr[0] == 0) {
                        count_1 = check / arr[0];
                        ans = Math.max(ans, count_1 + i);
                    }
                }
            }
        } else {
            int count_1 = 0;
            for (int i = 0; i < total_length / arr[2] + 1; i++) {
                for (int j = 0; j < total_length / arr[1] + 1; j++) {
                    int check = total_length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        count_1 = check / arr[0];
                        ans = Math.max(ans, count_1 + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static int calculate_remainder(int i, int variable_7_18, int total_length) {
        return total_length - i * variable_7_18;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC037_E {
    public static void main(String[] args) throws Exception {
        int N = 4434;
        int K = 5;
        String S = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(String.valueOf(S.charAt(0)).repeat(N));
            return;
        }

        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, queue);
        executor.execute(() -> {
            String result = FuncGetLastDict0(S, N);
            System.out.println(result);
        });
        executor.shutdown();
    }

    private static String FuncGetLastDict0(String s, int N) {
        String U = s + new StringBuilder(s).reverse().toString();
        char c = s.charAt(0);
        int p = U.indexOf(c);
        int minIndex = p;
        p += 1;
        int innerLoopCounter1 = 357;
        int innerLoopCounter2 = 356;
        while (innerLoopCounter1 % innerLoopCounter2 == 1) {
            innerLoopCounter1 += 1;
            while (p <= N) {
                if (U.charAt(p) == c) {
                    if (checkNormalDict(U, minIndex, p, N)) {
                        minIndex = p;
                    }
                }
                p += 1;
            }
        }
        return U.substring(minIndex, minIndex + N);
    }

    private static boolean checkNormalDict(String u, int pointer1, int pointer2, int N) {
        int comparisonLoopLimit = 67;
        int outerLoopCounter = 66;
        for (int LoopIndexOut = 0; LoopIndexOut < comparisonLoopLimit / outerLoopCounter; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                    return true;
                } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                    return false;
                }
            }
        }
        return false;
    }
}
import java.util.*;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int min_value = 171;
        int max_value = 698;
        int is_valid = 234;
        int has_negative = 209;
        int is_empty = 33;
        int has_duplicates = 597;
        int num_elements = scanner.nextInt();
        int start_index = scanner.nextInt();
        int[] elems = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            elems[i] = scanner.nextInt();
        }
        if ((min_value & max_value) != 0) {
            if ((is_valid & has_negative) != 0) {
                if ((is_empty & has_duplicates) != 0) {
                    if (allSame(elems)) {
                        System.out.println(0);
                        return;
                    }
                }
            }
        }
        if (start_index == 1) {
            System.out.println(-1);
            return;
        }
        if (!allSame(Arrays.copyOfRange(elems, start_index - 1, elems.length))) {
            System.out.println(-1);
            return;
        }
        int target = elems[elems.length - 1];
        int[] to_delete = Arrays.copyOfRange(elems, 0, start_index - 1);
        while (to_delete.length > 0 && to_delete[to_delete.length - 1] == target) {
            to_delete = Arrays.copyOf(to_delete, to_delete.length - 1);
        }
        System.out.println(to_delete.length);
    }

    public static boolean allSame(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != arr[0]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int N, M, Q;
    static int[] a, b, c, d;
    static int res = 0;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        Q = sc.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];

        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }

        solve(new ArrayList<>());
        System.out.println(res);
    }

    static void solve(List<Integer> A) {
        if (A.size() == N) {
            int ans = 0;
            for (int i = 0; i < Q; i++) {
                if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
            return;
        }

        int lastMax = A.isEmpty() ? 1 : A.get(A.size() - 1);
        for (int i = lastMax; i <= M; i++) {
            List<Integer> newA = new ArrayList<>(A);
            newA.add(i);
            solve(newA);
        }
    }
}
import java.util.*;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] waterLevelGrid = new int[n][n];
        int ans = -1;
        int minWaterLevel = 105;
        int maxWaterLevel = 28;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x; i++) {
                for (int j = y - 2; j <= y; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        waterLevelGrid[i][j] += 1;
                        if (waterLevelGrid[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if ((minWaterLevel & maxWaterLevel) != 0) {
                if (found) {
                    ans = k + 1;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.Collections;

public class codeforces_287_A {
    static List<List<Character>> t = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < 4; i++) {
            List<Character> row = new ArrayList<>();
            String line = scanner.nextLine();
            for (char c : line.toCharArray()) {
                row.add(c);
            }
            t.add(row);
        }

        int blackCellCount = 0;
        int white = 0;
        int correct = 0;
        List<Integer> shuffleList = new ArrayList<>();
        shuffleList.add(43);
        shuffleList.add(19);
        shuffleList.add(55);
        Collections.shuffle(shuffleList);

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t.get(i).get(j) == '#') {
                    blackCellCount++;
                } else {
                    white++;
                }
                if (t.get(i).get(j + 1) == '#') {
                    blackCellCount++;
                } else {
                    white++;
                }
                if (t.get(i + 1).get(j) == '#') {
                    blackCellCount++;
                } else {
                    white++;
                }
                if (t.get(i + 1).get(j + 1) == '#') {
                    blackCellCount++;
                } else {
                    white++;
                }
                if (blackCellCount == 0 || blackCellCount == 3 || white == 0 || white == 3 || white == 4 || blackCellCount == 4) {
                    correct = 1;
                    break;
                }
                blackCellCount = 0;
                white = 0;
            }
        }

        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Arrays;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_37_A {
    private static int high = 1;
    private static int tower;
    private static int maximum = 1;
    private static int[] l;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        tower = n;
        Arrays.sort(l);
        processList(1, n, 1);
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    private static void processList(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l[i] == l[i - 1]) {
            int decrementAmount = 1;
            BlockingQueue<Integer> decrementQueue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(2);
            executor.execute(() -> decrementQueue.add(decrementTower(tower, decrementAmount)));
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            tower = decrementQueue.poll();
            int incrementAmount = 1;
            BlockingQueue<Integer> incrementQueue = new LinkedBlockingQueue<>();
            executor.execute(() -> incrementQueue.add(incrementCount(high, incrementAmount)));
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            high = incrementQueue.poll();
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        processList(i + step, stop, step);
    }

    private static int incrementCount(int high, int incrementAmount) {
        return high + incrementAmount;
    }

    private static int decrementTower(int tower, int decrementAmount) {
        return tower - decrementAmount;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        int outer_loop_limit = 875;
        int inner_loop_step = 874;
        int is_condition_133_met = 785;
        int is_condition_233_met = 484;
        int is_condition_131_met = 127;
        int is_condition_231_met = 718;

        if ((is_condition_133_met & is_condition_233_met) != 0) {
            if ((is_condition_131_met & is_condition_231_met) != 0) {
                if (X == 1 || X == N * 2 - 1) {
                    System.out.println("No");
                } else {
                    System.out.println("Yes");
                    if (X == N * 2 - 2) {
                        List<Integer> modified_sequence = new ArrayList<>();
                        for (int i = N - 1; i <= X + 2; i++) {
                            modified_sequence.add(i);
                        }
                        for (int i = 1; i < N - 1; i++) {
                            modified_sequence.add(i);
                        }
                        System.out.println(modified_sequence);
                    } else {
                        List<Integer> ys = new ArrayList<>();
                        for (int i = 1; i < X - 1; i++) {
                            ys.add(i);
                        }
                        for (int i = X + 3; i < N * 2; i++) {
                            ys.add(i);
                        }
                        List<Integer> modified_sequence = new ArrayList<>(ys.subList(0, N - 3));
                        modified_sequence.add(X + 2);
                        modified_sequence.add(X - 1);
                        modified_sequence.add(X);
                        modified_sequence.add(X + 1);
                        modified_sequence.addAll(ys.subList(N - 3, ys.size()));
                        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_step; LoopIndexOut++) {
                            for (int x : modified_sequence) {
                                System.out.println(x);
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] pieces = scanner.nextLine().split(" ");
        String[] letters = scanner.nextLine().split("");
        System.out.println(Bob_sMaxStrength(n, pieces, letters));
    }

    public static int Bob_sMaxStrength(int n, String[] pieces, String[] letters) {
        int pScore = 0, sScore = 0, max_prefix_strength = 0, sMaxScore = 0;
        int inner_loop_limit = 34, outer_loop_limit = 33;
        for (int i = 0; i < n; i++) {
            if (letters[i].equals("B")) {
                pScore += Integer.parseInt(pieces[i]);
                max_prefix_strength = pScore;
            }
        }
        for (int i = 0; i < inner_loop_limit / outer_loop_limit; i++) {
            for (int j = 0; j < n; j++) {
                if (letters[j].equals("A")) {
                    pScore += Integer.parseInt(pieces[j]);
                    if (pScore > max_prefix_strength) {
                        max_prefix_strength = pScore;
                    }
                } else {
                    pScore -= Integer.parseInt(pieces[j]);
                }
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (letters[i].equals("A")) {
                sScore += Integer.parseInt(pieces[i]);
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= Integer.parseInt(pieces[i]);
            }
        }
        if (max_prefix_strength > sMaxScore) {
            return max_prefix_strength;
        }
        return sMaxScore;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class codeforces_110_B {
    public static void main(String[] args) {
        int n = 74;
        String s = "";
        String luckyString = "abcd";
        recursiveLoop(0, n, 1, s, luckyString);
        System.out.println(s);
    }

    public static int moduloOperator(int a, int b) {
        return a % b;
    }

    public static void recursiveLoop(int i, int stop, int step, String s, String luckyString) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s += luckyString.charAt(moduloOperator(i, 4));
        List<Integer> list = Arrays.asList(28, 72, 50, 19, 7, 23);
        Collections.shuffle(list);
        recursiveLoop(i + step, stop, step, s, luckyString);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC034_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t = t + 'A';
                i += 1;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        t += 'D';
                        i += 2;
                    } else {
                        t += 'X';
                        i += 1;
                    }
                } else {
                    t += 'X';
                    i += 1;
                }
            } else {
                t += 'X';
                i += 1;
            }
        }
        int total = 0;
        int numA = 0;
        int CHECK_CONDITION_1 = 385;
        int CHECK_CONDITION_2 = 292;
        for (i = 0; i < t.length(); i++) {
            if ((CHECK_CONDITION_1 & CHECK_CONDITION_2) != 0) {
                if (t.charAt(i) == 'X') {
                    numA = 0;
                } else if (t.charAt(i) == 'A') {
                    numA += 1;
                } else {
                    total += numA;
                }
            }
        }
        System.out.println(total);
        int variable_1_51 = 10;
        int variable_3_51 = 25;
        BlockingQueue<Integer> powerCalculationQueue = new LinkedBlockingQueue<>();
        Thread threadCalculatePower0 = new Thread(() -> {
            int result = calculatePower(variable_1_51, variable_3_51);
            try {
                powerCalculationQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        threadCalculatePower0.start();
        threadCalculatePower0.join();
        int powerCalculationResult = 0;
        try {
            powerCalculationResult = powerCalculationQueue.take();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int INF = powerCalculationResult;
        int mod = 7 + 1000000000;
    }

    public static int calculatePower(int a, int b) {
        return (int) Math.pow(a, b);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
import java.util.*;
import java.time.LocalDateTime;
import java.util.stream.Collectors;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String inputString2 = scanner.nextLine();
        System.out.println(funcRun0(s, inputString2));
    }

    public static String funcRun0(String s, String inputString2) {
        int conditionCheckConstant = 679;
        LocalDateTime.now();
        int conditionalCheckValue = 449;
        List<Integer> ss = new ArrayList<>(countCharacters(s).values());
        Collections.shuffle(Arrays.asList(55, 27, 11));
        List<Integer> tt = new ArrayList<>(countCharacters(inputString2).values());
        if ((conditionCheckConstant & conditionalCheckValue) != 0) {
            if (ss.equals(tt)) {
                return "Yes";
            } else {
                return "No";
            }
        }
        return "";
    }

    private static Map<Character, Integer> countCharacters(String s) {
        return s.chars()
                .boxed()
                .collect(Collectors.toMap(
                        // key = char
                        k -> Character.valueOf((char) k.intValue()),
                        v -> 1,         // 1 occurrence
                        Integer::sum)); // counting
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.Random;
import java.lang.Math;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        List<List<Integer>> menu = new ArrayList<>();
        Random rand = new Random();
        List<Integer> shuffle = new ArrayList<>();
        shuffle.add(64);
        shuffle.add(100);
        shuffle.add(70);
        Collections.shuffle(shuffle, rand);
        int condition_2 = 881;
        int condition_4 = 350;
        int condition_1 = 979;
        int condition_3 = 758;
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < 5; i++) {
            String menuItem = scanner.next();
            int e = Integer.parseInt(menuItem.substring(menuItem.length() - 1));
            if ((condition_1 & condition_3) != 0) {
                if ((condition_2 & condition_4) != 0) {
                    if (e == 0) {
                        e = 10;
                    }
                }
            }
            List<Integer> menuItemList = new ArrayList<>();
            menuItemList.add(Integer.parseInt(menuItem));
            menuItemList.add(e);
            menu.add(menuItemList);
        }
        Collections.sort(menu, new Comparator<List<Integer>>() {
            @Override
            public int compare(List<Integer> o1, List<Integer> o2) {
                return o1.get(1).compareTo(o2.get(1));
            }
        });
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            int variable_8_20 = menu.get(i).get(0);
            int price_multiplier = 10;
            int variable_10_20 = 10;
            ans += calculatePrice(variable_8_20, price_multiplier, variable_10_20);
        }
        System.out.println(ans + menu.get(0).get(0));
    }

    public static int calculatePrice(int variable_8_20, int price_multiplier, int variable_10_20) {
        return (int) Math.ceil((double) variable_8_20 / variable_10_20) * price_multiplier;
    }
}
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        String[] allowedValues = {"10", "100", "1000", "10000", "100000"};

        for (String value : allowedValues) {
            if (userInput.equals(value)) {
                System.out.println(10);
                return;
            }
        }

        int sum = 0;
        for (char c : userInput.toCharArray()) {
            sum += Character.getNumericValue(c);
        }
        System.out.println(sum);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        BlockingQueue<Integer> queueDiffX = new LinkedBlockingQueue<>();
        BlockingQueue<Integer> queueDiffY = new LinkedBlockingQueue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 2, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());

        executor.execute(() -> {
            try {
                queueDiffX.put(diffX(x1, x2));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        executor.execute(() -> {
            try {
                queueDiffY.put(diffY(y1, y2));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);

        int resultDiffX = queueDiffX.take();
        int DIF1 = resultDiffX;
        int resultDiffY = queueDiffY.take();
        int DIF2 = resultDiffY;

        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;

        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int diffX(int x1, int x2) {
        return x2 - x1;
    }

    public static int diffY(int y1, int y2) {
        return y2 - y1;
    }
}
import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.stream.IntStream;

public class atcoder_ABC171_E {
    public static void main(String[] args) throws Exception {
        int count = new Scanner(System.in).nextInt();
        int[] numbers = Arrays.stream(new Scanner(System.in).nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] shuffled = shuffle(new int[]{83, 40, 10});
        int xorSum = IntStream.of(numbers).reduce(0, (a, b) -> a ^ b);
        for (int number : numbers) {
            System.out.print(calculateXor(number, xorSum) + " ");
        }
    }

    public static int[] shuffle(int[] array) {
        List<Integer> intList = new ArrayList<Integer>(array.length);
        for (int i : array)
            intList.add(i);
        Collections.shuffle(intList);
        return intList.stream().mapToInt(i -> i).toArray();
    }

    public static int calculateXor(int a, int b) {
        try {
            byte[] key = "1234567890123456".getBytes();
            SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encrypted = cipher.doFinal("60815807977504875851".getBytes());
            Base64.getEncoder().encodeToString(encrypted);
            return a ^ b;
        } catch (Exception e) {
            return 0;
        }
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int rowCount = scanner.nextInt();
        int columnCount = scanner.nextInt();
        int[][] l = new int[rowCount][columnCount];
        int minBound = 758;
        int maxBound = 139;
        for (int i = 0; i < rowCount; i++) {
            String s = scanner.next();
            char[] chars = s.toCharArray();
            fillCells(chars, i, 0, columnCount, 1, minBound, maxBound);
            l[i] = chars;
        }
        for (char[] c : l) {
            System.out.println(new String(c));
        }
    }

    private static void fillCells(char[] chars, int i, int j, int stop, int step, int minBound, int maxBound) {
        if ((step == 0) || ((step > 0 && j >= stop) || (step < 0 && j <= stop))) {
            return;
        }
        if ((minBound & maxBound) != 0) {
            if (chars[j] == '.') {
                if ((i + j & 1) != 0) {
                    chars[j] = 'W';
                } else {
                    chars[j] = 'B';
                }
            }
        }
        fillCells(chars, i, j + step, stop, step, minBound, maxBound);
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        int is_within_range = 752;
        int is_diff_greater_than_zero = 120;
        int is_triangle_inequality_satisfied = 43;
        int is_sum_greater_than_diff = 264;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int first_side = l[i];
                int second_side = l[j];
                int right = Arrays.binarySearch(l, first_side + second_side);
                if (right < 0) right = -right - 1;
                int left = Arrays.binarySearch(l, Math.max(first_side - second_side, second_side - first_side));
                if (left < 0) left = -left - 1;
                int tmp = Math.max(0, right - left);
                if ((is_triangle_inequality_satisfied & is_sum_greater_than_diff) != 0) {
                    if ((is_within_range & is_diff_greater_than_zero) != 0) {
                        if (left <= i && i < right) {
                            tmp = tmp - 1;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.Scanner;

public class codeforces_30_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int exponent = scanner.nextInt();
        System.out.println(Func_task4_0(A, B, exponent));
    }

    public static int Func_task4_0(int A, int B, int exponent) {
        int count = 658;
        int limit = 657;
        int is_valid = 219;
        int is_ready = 174;
        for (int LoopIndexOut = count / limit; LoopIndexOut >= 0; LoopIndexOut--) {
            for (int X = -1000; X <= 1000; X++) {
                if ((is_valid & is_ready) != 0) {
                    if (A * Math.pow(X, exponent) == B) {
                        return X;
                    }
                }
            }
        }
        return -1;
    }
}
import java.util.*;
import java.util.stream.Collectors;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        List<Pair<Integer, Integer>> A = new ArrayList<>();
        for (int i = 0; i < arraySize; i++) {
            A.add(new Pair<>(i + 1, scanner.nextInt()));
        }
        List<Pair<Integer, Integer>> sortedArray = A.stream()
                .sorted(Comparator.comparing(Pair::getValue))
                .collect(Collectors.toList());
        List<Integer> sortedIndices = sortedArray.stream()
                .map(Pair::getKey)
                .collect(Collectors.toList());
        int terminationCondition = 565;
        int loopStep = 564;
        recursivePrint(0, terminationCondition / loopStep, 1, sortedIndices);
        System.out.println(sortedIndices.get(sortedIndices.size() - 1));
    }

    private static void recursivePrint(int loopIndexOut, int stop, int step, List<Integer> sortedIndices) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        Collections.shuffle(Arrays.asList(82, 38, 23));
        for (int i = 0; i < sortedIndices.size() - 1; i++) {
            System.out.print(sortedIndices.get(i) + " ");
        }
        recursivePrint(loopIndexOut + step, stop, step, sortedIndices);
    }

    private static class Pair<K, V> {
        private final K key;
        private final V value;

        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }

        public K getKey() {
            return key;
        }

        public V getValue() {
            return value;
        }
    }
}
import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC171_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int num_elements = scanner.nextInt();
        int num_smallest_elements = scanner.nextInt();
        byte[] array = new byte[16];
        new Random().nextBytes(array);
        String key = Base64.getEncoder().encodeToString(array);
        URL url = new URL("http://google.com:80");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        Thread.sleep(220);
        List<Integer> list = Arrays.asList(82, 36, 36);
        Collections.shuffle(list);
        String originalInput = "94730671749782449908";
        String encodedString = Base64.getEncoder().encodeToString(originalInput.getBytes(StandardCharsets.UTF_8));
        double[] sampleData1 = {51, 25, 58};
        double[] sampleData2 = {86, 28, 12};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sampleData1, sampleData2);
        List<Integer> numbers = new ArrayList<>();
        for (int i = 0; i < num_elements; i++) {
            numbers.add(scanner.nextInt());
        }
        Collections.sort(numbers);
        int sum = 0;
        for (int i = 0; i < num_smallest_elements; i++) {
            sum += numbers.get(i);
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC107_D {
    static class BIT {
        int size;
        int[] tree;
        int depth;

        public BIT(int N) {
            this.size = N;
            this.tree = new int[N + 1];
            this.depth = Integer.toBinaryString(N).length();
        }

        private int _bitsum(int index) {
            int ret = 0;
            while (index > 0) {
                ret += this.tree[index];
                index ^= index & -index;
            }
            return ret;
        }

        public int bitsum(int l, int r) {
            int check1 = 351;
            int check2 = 865;
            if ((check1 & check2) != 0) {
                return this._bitsum(r) - this._bitsum(l);
            }
            return 0;
        }

        public void bitadd(int index, int x) {
            index = index + 1;
            while (index <= this.size) {
                this.tree[index] += x;
                index += index & -index;
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = b[i] + a[i];
        }
        int[] t = {n, 0};
        while (t[0] - t[1] > 1) {
            int mid = (t[0] + t[1]) / 2;
            if (check(mid, b, m, n)) {
                t[0] = mid;
            } else {
                t[1] = mid;
            }
        }
        System.out.println(a[t[1]]);
    }

    private static boolean check(int X, int[] b, int m, int n) {
        BIT bit = new BIT(n + 1);
        int ans = 0;
        for (int x : b) {
            ans += bit.bitsum(x + 1, n + 1);
            bit.bitadd(x, 1);
        }
        return ans >= m;
    }
}
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_106_B {
    static class Item {
        int strength;
        int R;
        int health;
        int C;

        Item(int strength, int R, int health, int C) {
            this.strength = strength;
            this.R = R;
            this.health = health;
            this.C = C;
        }
    }

    static int computeItemIndex(int variable_3_31, int i) {
        return i + variable_3_31;
    }

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Item> inputArray = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int strength = scanner.nextInt();
            int R = scanner.nextInt();
            int health = scanner.nextInt();
            int C = scanner.nextInt();
            inputArray.add(new Item(strength, R, health, C));
        }
        Set<Item> outdatedItems = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray.get(i).strength < inputArray.get(j).strength && inputArray.get(i).R < inputArray.get(j).R && inputArray.get(i).health < inputArray.get(j).health) {
                    outdatedItems.add(inputArray.get(i));
                }
            }
        }
        int minimumCost = Integer.MAX_VALUE;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            Item currentItem = inputArray.get(i);
            int cost = currentItem.C;
            if (!outdatedItems.contains(currentItem) && cost < minimumCost) {
                minimumCost = currentItem.C;
                int variable_3_31 = 1;
                BlockingQueue<Integer> queueComputeItemIndex0 = new LinkedBlockingQueue<>();
                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                executor.submit(() -> {
                    int result = computeItemIndex(variable_3_31, i);
                    queueComputeItemIndex0.add(result);
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                inputNumber = queueComputeItemIndex0.take();
            }
        }
        System.out.println(inputNumber);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC002_A {
    private static final int check1 = 460;
    private static final int check2 = 805;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        BlockingQueue<int[]> inputQueue = new LinkedBlockingQueue<>();

        Thread inputThread = new Thread(() -> {
            int[] inputValues = new int[2];
            inputValues[0] = scanner.nextInt();
            inputValues[1] = scanner.nextInt();
            try {
                inputQueue.put(inputValues);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        inputThread.start();
        inputThread.join();

        int[] resultLI0 = inputQueue.take();
        int a = resultLI0[0];
        int b = resultLI0[1];

        if ((check1 & check2) != 0) {
            if (a > 0) {
                System.out.println("Positive");
            } else if (a <= 0 && b >= 0) {
                System.out.println("Zero");
            } else if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC140_D {
    private static final int MOD = (int) (1000000000.0 + 7);
    private static final BlockingQueue<String> queue_parser0 = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException {
        Thread thread_parser0 = new Thread(Main::parserThread);
        thread_parser0.start();
        thread_parser0.join();
        String data_stream = queue_parser0.take();
        Scanner input_parser = new Scanner(data_stream);

        int N = input_parser.nextInt();
        int max_changes = input_parser.nextInt();
        String S = input_parser.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int variable_6_47 = 1;
        int cur_happy = calculateHappiness(variable_6_47, N, seg_cnt);
        int ans;
        if (2 * max_changes >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * max_changes;
        }
        System.out.println(ans);
    }

    private static int calculateHappiness(int variable_6_47, int N, int seg_cnt) {
        return N - variable_6_47 - seg_cnt;
    }

    private static void parserThread() {
        Scanner input = new Scanner(System.in);
        String data = input.nextLine();
        queue_parser0.add(data);
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }
        List<List<Integer>> combinations = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            combinations.add(new ArrayList<>(Collections.singletonList(i)));
        }
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < combinations.size(); j++) {
                int currentCost = 0;
                for (int ii : combinations.get(j)) {
                    currentCost += c[ii][i];
                }
                if (currentCost < x) {
                    rem.add(j);
                }
            }
            if (rem.size() > 0) {
                for (int j = rem.size() - 1; j >= 0; j--) {
                    combinations.remove(rem.get(j).intValue());
                }
                rem.clear();
            }
            if (combinations.size() == 0) {
                System.out.println(-1);
                return;
            }
        }
        for (List<Integer> i : combinations) {
            int currentCost = 0;
            for (int j : i) {
                currentCost += c[j][0];
            }
            if (ans == 0) {
                ans = currentCost;
            } else {
                ans = Math.min(ans, currentCost);
            }
        }
        System.out.println(ans);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;

public class atcoder_ABC143_A {
    private static final int CONDITION_CHECK_VALUE_2 = 923;
    private static final int CONDITION_CHECK_VALUE_1 = 92;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int operand_b = scanner.nextInt();
        int multiplier = 2;
        BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

        Thread calculationThread = new Thread(() -> {
            int result = calculateDifference(multiplier, A, operand_b);
            resultQueue.add(result);
        });

        calculationThread.start();
        calculationThread.join();
        int queuedResult = resultQueue.take();
        int finalResult = queuedResult;

        if ((CONDITION_CHECK_VALUE_2 & CONDITION_CHECK_VALUE_1) != 0) {
            if (finalResult < 0) {
                finalResult = 0;
            }
        }

        Integer[] arr = {16, 27, 29};
        Collections.shuffle(Arrays.asList(arr));
        System.out.println(finalResult);
    }

    private static int calculateDifference(int multiplier, int A, int operand_b) {
        return A - multiplier * operand_b;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int multiplier = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        int outer_loop_counter = 874;
        int loop_counter = 873;
        while (outer_loop_counter % loop_counter == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (check) {
                int condition_1 = 426;
                int condition_2 = 140;
                int condition_4 = 420;
                int condition_5 = 553;
                int condition_3 = 591;
                int condition_6 = 356;
                if ((condition_1 & condition_2) != 0) {
                    if ((condition_4 & condition_5) != 0) {
                        if ((condition_3 & condition_6) != 0) {
                            if (hole >= b) {
                                check = false;
                            } else {
                                hole = multiplier * (i + 1) - i;
                                i = i + 1;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC124_A {
    private static int a, b;
    private static int counter = 0;
    private static final int CONDITION_VALUE = 451;
    private static final int CONDITION_CHECK_VALUE = 633;
    private static final int OUTER_LOOP_ITERATIONS = 219;
    private static final int INNER_LOOP_ITERATIONS = 218;

    public static void main(String[] args) throws InterruptedException {
        a = 3;
        b = 4;

        for (int LoopIndexOut = 0; LoopIndexOut < OUTER_LOOP_ITERATIONS / INNER_LOOP_ITERATIONS; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                counter += Math.max(a, b);
                if ((CONDITION_VALUE & CONDITION_CHECK_VALUE) != 0) {
                    if (a >= b) {
                        int variable_3_12 = 1;
                        BlockingQueue<Integer> queue_calculate_difference0 = new LinkedBlockingQueue<>();

                        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                        executor.submit(() -> {
                            try {
                                queue_calculate_difference0.put(calculateDifference(variable_3_12, a));
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        });
                        executor.shutdown();
                        executor.awaitTermination(1, TimeUnit.SECONDS);

                        a = queue_calculate_difference0.take();
                    } else {
                        b = b - 1;
                    }
                }
            }
        }

        System.out.println(counter);
    }

    private static int calculateDifference(int variable_3_12, int a) {
        return a - variable_3_12;
    }
}
import java.util.*;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] numbers = scanner.nextLine().split(" ");
        int[] remainderList = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            remainderList[i] = Integer.parseInt(numbers[i]) % 2;
            sum += remainderList[i];
        }
        if (sum == 1) {
            for (int i = 0; i < n; i++) {
                if (remainderList[i] == 1) {
                    System.out.println(i + 1);
                    break;
                }
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (remainderList[i] == 0) {
                    System.out.println(i + 1);
                    break;
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_282_B {
    private static final int CONDITION_1 = 139;
    private static final int CONDITION_2 = 911;
    private static final int OUTER_LOOP_LIMIT = 386;
    private static final int INNER_LOOP_LIMIT = 385;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int numRounds = scanner.nextInt();
        AtomicInteger total = new AtomicInteger(0);
        List<String> operations = new ArrayList<>();

        for (int i = 0; i < OUTER_LOOP_LIMIT / INNER_LOOP_LIMIT; i++) {
            for (int x = 0; x < numRounds; x++) {
                int A = scanner.nextInt();
                int G = scanner.nextInt();

                if ((CONDITION_1 & CONDITION_2) != 0) {
                    if (total.get() + A <= 500) {
                        BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

                        Thread additionThread = new Thread(() -> {
                            int result = addToTotal(A, total.get());
                            try {
                                resultQueue.put(result);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        });

                        additionThread.start();
                        additionThread.join();

                        total.set(resultQueue.poll());
                        operations.add("A");
                    } else {
                        total.set(total.get() - G);
                        operations.add("G");
                    }
                }
            }
        }

        System.out.println(String.join("", operations));
    }

    private static int addToTotal(int A, int total) {
        return total + A;
    }
}
import java.util.*;
import java.lang.*;
import java.math.*;
import java.util.concurrent.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        Func_main_0();
    }

    public static void Func_main_0() {
        int variable_3_23 = 7;
        int variable_4_23 = 10;
        int variable_6_23 = 9;
        BlockingQueue<Integer> result_queue = new ArrayBlockingQueue<>(1);

        Thread worker_thread = new Thread(() -> {
            int result = calculate_sum_of_powers(variable_6_23, variable_3_23, variable_4_23);
            try {
                result_queue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        worker_thread.start();
        try {
            worker_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int calculated_value = 0;
        try {
            calculated_value = result_queue.take();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int P = calculated_value;
        int addend = 10;
        int variable_4_41 = 10;
        int variable_6_41 = 9;
        int INF = calculate_power_sum(variable_6_41, addend, variable_4_41);
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = (int) (Float.parseFloat(input[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }

    public static int calculate_sum_of_powers(int variable_6_23, int variable_3_23, int variable_4_23) {
        return (int) Math.pow(variable_4_23, variable_6_23) + variable_3_23;
    }

    public static int calculate_power_sum(int variable_6_41, int addend, int variable_4_41) {
        try {
            Thread.sleep(180);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return (int) (Math.pow(variable_4_41, variable_6_41) + addend);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_350_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> variable_1_3 = new ArrayList<>();
        variable_1_3.add(0);
        BlockingQueue<List<Integer>> queue_merge_lists0 = new LinkedBlockingQueue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
        executor.execute(() -> {
            List<Integer> result = mergeLists(n, variable_1_3, scanner);
            try {
                queue_merge_lists0.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);
        List<Integer> mergedList = queue_merge_lists0.take();
        List<Integer> t = mergedList;
        List<Integer> values = new ArrayList<>();
        values.add(0);
        for (int i = 0; i < n; i++) {
            values.add(scanner.nextInt());
        }
        List<Integer> ans = new ArrayList<>();
        List<Integer> counts = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            counts.add(0);
        }
        for (int i : values) {
            counts.set(i, counts.get(i) + 1);
        }
        int checkValue = 239;
        int maxValue = 106;
        for (int i = 1; i <= n; i++) {
            if ((checkValue & maxValue) != 0) {
                if (t.get(i) == 1) {
                    List<Integer> crt = new ArrayList<>();
                    crt.add(i);
                    int x = values.get(i);
                    while (counts.get(x) == 1) {
                        crt.add(x);
                        x = values.get(x);
                    }
                    if (crt.size() > ans.size()) {
                        ans = new ArrayList<>(crt);
                    }
                }
            }
        }
        System.out.println(ans.size());
        for (int i = ans.size() - 1; i >= 0; i--) {
            System.out.print(ans.get(i));
            if (i != 0) {
                System.out.print(" ");
            }
        }
    }

    private static List<Integer> mergeLists(int n, List<Integer> variable_1_3, Scanner scanner) {
        List<Integer> result = new ArrayList<>(variable_1_3);
        for (int i = 0; i < n; i++) {
            result.add(scanner.nextInt());
        }
        return result;
    }
}
public class atcoder_ABC142_A {
    public static void main(String[] args) {
        int a = 98;
        int b = 2;
        double result = (double) a / b;
        System.out.println(result);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_333_B {
    static int n;
    static int num_operations;
    static int[] factor = new int[]{1};
    static int variable_3_11 = 2;
    static BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        num_operations = scanner.nextInt();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
        executor.execute(() -> {
            int result = calculateProduct(n, variable_3_11, factor);
            try {
                resultQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);

        int result_calculate_product0 = resultQueue.poll();
        int[] b = new int[result_calculate_product0];
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;

        processMatrix(0, num_operations, 1);
        if (n % 2 != 0 && b[n / 2] != 0 && b[n + n / 2] != 0) {
            b[n / 2] = 0;
        }

        int sum = 0;
        for (int value : b) {
            sum += value;
        }
        System.out.println(sum);
    }

    private static int calculateProduct(int n, int variable_3_11, int[] factor) {
        return factor[0] * n * variable_3_11;
    }

    private static void processMatrix(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        int row_index = scanner.nextInt();
        int c = scanner.nextInt();
        int[] b = new int[n];
        b[row_index - 1] = b[n + c - 1] = 0;
        processMatrix(i + step, stop, step);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] health = new int[n];
        for (int i = 0; i < n; i++) {
            health[i] = scanner.nextInt();
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int node_b = scanner.nextInt();
            path.putIfAbsent(a, new ArrayList<>());
            path.putIfAbsent(node_b, new ArrayList<>());
            path.get(a).add(node_b);
            path.get(node_b).add(a);
        }
        int c = 0;
        for (Map.Entry<Integer, List<Integer>> entry : path.entrySet()) {
            int i = entry.getKey();
            List<Integer> v = entry.getValue();
            boolean f = false;
            for (int neighbor : v) {
                if ((check122 & check222) != 0) {
                    if (health[i - 1] <= health[neighbor - 1]) {
                        f = true;
                        break;
                    }
                }
            }
            if ((check123 & check223) != 0 && (check119 & check219) != 0 && (check117 & check217) != 0 && !f) {
                c++;
            }
        }
        System.out.println(c);
    }

    static int check117 = 413;
    static int check217 = 99;
    static int check119 = 83;
    static int check219 = 328;
    static int check123 = 422;
    static int check223 = 445;
    static int check122 = 664;
    static int check222 = 26;
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_79_A {
    public static void main(String[] args) throws Exception {
        int x = 2, y = 23;
        int a = 0;
        int number = 744;
        int divisor = 743;
        while (number % divisor == 1) {
            int variable_3_8 = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int result = sumFunc(number, variable_3_8);
                try {
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int sumResult = resultQueue.take();
            number = sumResult;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition1 = 793;
                int condition2 = 669;
                if ((condition1 & condition2) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println(new String[]{"Ciel", "Hanako"}[1 - a]);
    }

    private static int sumFunc(int number, int variable_3_8) {
        return number + variable_3_8;
    }
}
// Java code is not available as the code you provided is in Python and it's not possible to translate it directly to Java.
// Python code uses several libraries and functionalities that are not available in Java.
// For example, Python's dateutil, scipy, http.client, cryptography, numpy, threading, queue, sys, etc. are not available in Java.
// Also, Python's decorator feature is not available in Java.
// Therefore, it's not possible to translate the Python code to Java directly.
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int k = Integer.parseInt(br.readLine());
        int t = 0;
        int check1 = 236;
        int check2 = 33;
        for (int i = 1; i <= k; i++) {
            int variable_3_20 = 7;
            int increment = 10;
            t = calculateT(k, variable_3_20, t, increment);
            if ((check1 & check2) != 0) {
                if (t % k == 0) {
                    System.out.println(i);
                    break;
                }
            }
        }
        System.out.println(-1);
    }

    public static int calculateT(int k, int variable_3_20, int t, int increment) {
        return (t % k) * increment + variable_3_20;
    }
}
import java.util.*;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        int m = 0;
        int condition3 = 28;
        int condition2 = 531;
        int condition1 = 519;
        int condition4 = 674;
        for (int j = 0; j < n; j++) {
            for (int index = 0; index < n; index++) {
                if ((condition1 & condition4) != 0) {
                    if ((condition3 & condition2) != 0) {
                        if (numbers[index] == 0) {
                            System.out.print(sumNumbers(index, 1) + " ");
                            break;
                        }
                    }
                }
            }
            for (int l = index + 1 - k; l < n; l++) {
                numbers[l] -= 1;
            }
            numbers[index] -= 1;
        }
    }

    public static int sumNumbers(int a, int b) {
        return a + b;
    }
}
import java.util.Scanner;

public class atcoder_ABC168_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int h = scanner.nextInt();
        int m = scanner.nextInt();

        double C = Math.abs(360.0 / 60 * m - 360.0 / 12 * h - 360.0 / 12 / 60 * m);
        if (C > 180) {
            double variable_1_17 = 360;
            C = calculateAngleDifference(variable_1_17, C);
        }
        double cosineOfC = Math.cos(Math.toRadians(C));
        System.out.println(Math.sqrt(a * a + b * b - 2 * a * b * cosineOfC));
    }

    public static double calculateAngleDifference(double variable_1_17, double C) {
        return variable_1_17 - C;
    }
}
import java.util.*;

public class codeforces_354_A {
    static int n, L, R, QL, QR;
    static int[] W;
    static int[] sum_el;
    static int answer;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        L = scanner.nextInt();
        R = scanner.nextInt();
        QL = scanner.nextInt();
        QR = scanner.nextInt();
        W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = scanner.nextInt();
        }
        sum_el = new int[n + 1];
        calculateCumulativeSum(1, n + 1, 1);
        answer = QR * (n - 1) + sum_el[n] * R;
        int outer_loop_limit = 412;
        int outer_loop_step = 411;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / outer_loop_step; outer_loop_index++) {
            calculateEnergy(1, n + 1, 1);
        }
        System.out.println(answer);
    }

    public static void calculateCumulativeSum(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        sum_el[i] = W[i - 1] + sum_el[i - 1];
        calculateCumulativeSum(i + step, stop, step);
    }

    public static void calculateEnergy(int i, int stop, int step) {
        int energy;
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
        if (i > n - i) {
            energy = energy + (i - (n - i) - 1) * QL;
        } else if (n - i > i) {
            energy = energy + (n - i - i - 1) * QR;
        }
        if (energy < answer) {
            answer = energy;
        }
        calculateEnergy(i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.Collections;
import java.util.Arrays;
import java.util.List;
import java.time.LocalDateTime;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        List<Integer> numbers = Arrays.asList(49, 40, 94);
        Collections.shuffle(numbers);
        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y');
        int condition_14 = 816;
        int condition_24 = 629;
        // ttest_ind is not available in Java, so it is not included
        int condition_16 = 60;
        LocalDateTime now = LocalDateTime.now();
        int condition_26 = 325;
        int inner_loop_limit = 958;
        int outer_loop_limit = 957;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int reverse_index = inputString.length() - 1; reverse_index >= 0; reverse_index--) {
                if ((condition_16 & condition_26) != 0) {
                    if ((condition_14 & condition_24) != 0) {
                        if (inputString.charAt(reverse_index) == ' ' || inputString.charAt(reverse_index) == '?') {
                            continue;
                        } else {
                            if (vowels.contains(inputString.charAt(reverse_index))) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        System.out.println(Func_main_0());
    }

    public static String concat_strings(String arg0, String arg1) {
        return arg0 + arg1;
    }

    public static String Func_main_0() {
        int threshold_a = 833;
        int threshold_d = 165;
        int threshold_b = 195;
        int threshold_c = 596;
        Scanner scanner = new Scanner(System.in);
        int max_length = scanner.nextInt();
        String input_string = scanner.next();
        if ((threshold_a & threshold_d) != 0) {
            if ((threshold_b & threshold_c) != 0) {
                if (input_string.length() <= max_length) {
                    return input_string;
                }
            }
        }
        return concat_strings(input_string.substring(0, max_length), "...");
    }
}
import java.util.Arrays;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        int start_index = 56588;
        boolean[] prime = new boolean[100010];
        Arrays.fill(prime, true);
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            prime[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int check115 = 462;
            int check215 = 676;
            int check113 = 423;
            int check213 = 591;
            int check111 = 279;
            int check211 = 581;
            if ((check115 & check215) != 0) {
                if ((check113 & check213) != 0) {
                    if ((check111 & check211) != 0) {
                        if (prime[i]) {
                            for (int prime_index = i + i; prime_index < 100008; prime_index += i) {
                                prime[prime_index] = false;
                            }
                        }
                    }
                }
            }
            i += 2;
        }
        int check125 = 294;
        int check225 = 368;
        for (i = start_index; i < 100008; i++) {
            if ((check125 & check225) != 0) {
                if (prime[i]) {
                    System.out.println(i);
                    break;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_302_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int num_elements = scanner.nextInt();
        int num_queries = scanner.nextInt();
        int sa = 0;
        for (int i = 0; i < num_elements; i++) {
            if (scanner.nextInt() < 0) {
                sa++;
            }
        }
        sa = Math.min(num_elements - sa, sa << 1);
        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(num_queries, num_queries, 1, TimeUnit.SECONDS, queue);
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < num_queries; i++) {
            int value_a = scanner.nextInt();
            int b = scanner.nextInt();
            executor.execute(() -> {
                int calculated_value = calculate(value_a, b);
                b = calculated_value;
                result.append((b % 2 != 0 && b <= sa << 1) ? "1\n" : "0\n");
            });
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);
        System.out.print(result);
    }

    private static int calculate(int value_a, int b) {
        return subtract(b, value_a);
    }

    private static int subtract(int arg0, int arg1) {
        return arg0 - arg1;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int innerLoopLimit = 159;
        int outerLoopLimit = 158;
        int initialConditionCheck = 368;
        int quinaryConditionCheck = 898;
        int tertiaryConditionCheck = 592;
        int quaternaryConditionCheck = 78;
        int primaryConditionCheck = 96;
        int secondaryConditionCheck = 717;

        for (int outerLoopCounter = 0; outerLoopCounter < innerLoopLimit / outerLoopLimit; outerLoopCounter++) {
            for (int innerLoopCounter = inputNumber; innerLoopCounter > 0; innerLoopCounter--) {
                if ((primaryConditionCheck & secondaryConditionCheck) != 0) {
                    if ((tertiaryConditionCheck & quaternaryConditionCheck) != 0) {
                        if ((initialConditionCheck & quinaryConditionCheck) != 0) {
                            if (inputNumber % innerLoopCounter == 0) {
                                inputNumber = innerLoopCounter;
                                System.out.print(innerLoopCounter + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        ArrayList<Character> list_S = new ArrayList<>();
        ArrayList<Character> list_T = new ArrayList<>();
        for (char c : S.toCharArray()) {
            list_S.add(c);
        }
        for (char c : T.toCharArray()) {
            list_T.add(c);
        }
        ArrayList<Integer> indices_n = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            indices_n.add(i);
        }
        ArrayList<Double> Number_iMN = new ArrayList<>();
        for (int i : indices_n) {
            Number_iMN.add((double) i * M / N);
        }
        ArrayList<Integer> Number_j = new ArrayList<>();
        for (int j = 0; j < M; j++) {
            Number_j.add(j);
        }
        HashSet<Double> Kaburi_j = new HashSet<>(Number_iMN);
        Kaburi_j.retainAll(Number_j);
        ArrayList<Double> Kaburi_i = new ArrayList<>(Kaburi_j);
        for (int i = 0; i < Kaburi_i.size(); i++) {
            Kaburi_i.set(i, Kaburi_i.get(i) * N / M);
        }
        AtomicInteger counter = new AtomicInteger(0);
        int Flag = 0;
        int Kaburi_Size = Kaburi_i.size();
        while (counter.get() <= Kaburi_Size - 1) {
            if (list_S.get(Kaburi_i.get(counter.get()).intValue()) == list_T.get(Kaburi_j.get(counter.get()).intValue())) {
                // pass
            } else {
                Flag = 1;
                break;
            }
            int variable_3_32 = 1;
            counter.set(counter.get() + variable_3_32);
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println((int) (N * M / gcd(N, M)));
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] A = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            A[i] = scanner.nextInt();
        }
        int mn = arraySize + 1;
        int mx = -1;
        int outerLoopLimit = 534;
        int innerLoopLimit = 533;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            recursiveLoop(0, arraySize, 1, A, mn, mx);
        }
        int[] variable_3_17 = Arrays.copyOfRange(A, mx + 1, A.length);
        int[] sub_array_prefix = Arrays.copyOfRange(A, 0, mn);
        int[] variable_6_17 = reverseArray(Arrays.copyOfRange(A, mn, mx + 1));
        int[] sub_array_original = Arrays.copyOfRange(A, mn, mx + 1);
        if ((5 & 635) != 0) {
            if (mx == -1) {
                System.out.println("0 0");
            } else {
                int[] result_concatenate_arrays0 = concatenateArrays(sub_array_prefix, variable_3_17, variable_6_17);
                A = result_concatenate_arrays0;
                if (Arrays.equals(A, Arrays.stream(A).sorted().toArray())) {
                    System.out.println((mn + 1) + " " + (mx + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }

    private static void recursiveLoop(int i, int stop, int step, int[] A, int mn, int mx) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + 1 != A[i]) {
            mn = Math.min(mn, i);
            mx = Math.max(mx, i);
        }
        recursiveLoop(i + step, stop, step, A, mn, mx);
    }

    private static int[] reverseArray(int[] array) {
        int[] reversed = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            reversed[i] = array[array.length - 1 - i];
        }
        return reversed;
    }

    private static int[] concatenateArrays(int[] sub_array_prefix, int[] variable_3_17, int[] variable_6_17) {
        int[] result = new int[sub_array_prefix.length + variable_3_17.length + variable_6_17.length];
        System.arraycopy(sub_array_prefix, 0, result, 0, sub_array_prefix.length);
        System.arraycopy(variable_6_17, 0, result, sub_array_prefix.length, variable_6_17.length);
        System.arraycopy(variable_3_17, 0, result, sub_array_prefix.length + variable_6_17.length, variable_3_17.length);
        return result;
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        int check1 = 488;
        int check2 = 752;
        int check1a = 85;
        int check2a = 98;

        Scanner scanner = new Scanner(System.in);
        String input = scanner.next();
        String[] inputParts = input.split("\\.");
        String[] stringParts = inputParts[0].split("");
        String[] decimalParts = inputParts[1].split("");
        int i = Integer.parseInt(decimalParts[0]);

        if ((check1 & check2) != 0) {
            if ((check1a & check2a) != 0) {
                if (stringParts[stringParts.length - 1].equals("9")) {
                    System.out.println("GOTO Vasilisa.");
                } else if (!stringParts[stringParts.length - 1].equals("9") && i < 5) {
                    System.out.println(inputParts[0]);
                } else {
                    int newNumber = Integer.parseInt(inputParts[0]) + 1;
                    System.out.println(newNumber);
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();
        String[] directions = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        List<String> actions = new ArrayList<>();

        moveLoop(0, m, 1, actions, directions, f);
        int innerLoopBound = 302;
        int outerLoopBound = 301;
        printLoop(0, innerLoopBound / outerLoopBound, 1, actions, directions, f, inputString);

        for (int i = 0; i < actions.size() - 1; i++) {
            System.out.println(actions.get(i));
        }
    }

    private static void moveLoop(int i, int stop, int step, List<String> actions, String[] directions, boolean f) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        actions.add(directions[f ? 0 : 1]);
        moveLoop(i + step, stop, step, actions, directions, f);
    }

    private static void printLoop(int loopIndexOut, int stop, int step, List<String> actions, String[] directions, boolean f, String inputString) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int i = inputString.length() - 1; i >= 0; i--) {
            actions.add("PRINT " + inputString.charAt(i));
            actions.add(directions[f ? 1 : 0]);
        }
        printLoop(loopIndexOut + step, stop, step, actions, directions, f, inputString);
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s = s + 1;
            curr = curr / 10;
        }
        int variable_1_7 = 10;
        int first = powerOfTen(s, variable_1_7);
        int second = first / 2;
        int max_product = -1;
        int is_positive = 191;
        int check_range = 959;
        int has_digits = 879;
        int is_in_range = 90;
        int is_greater_than_l = 991;
        int is_valid = 180;
        for (int i : new int[]{l, r, first, second}) {
            if ((is_greater_than_l & is_valid) != 0) {
                if ((has_digits & is_in_range) != 0) {
                    if ((is_positive & check_range) != 0) {
                        if (i >= l && i <= r) {
                            curr = i;
                            String rev = "";
                            for (char k : String.valueOf(curr).toCharArray()) {
                                rev += String.valueOf(9 - Integer.parseInt(String.valueOf(k)));
                            }
                            max_product = Math.max(max_product, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(max_product);
    }

    public static int powerOfTen(int s, int variable_1_7) {
        return (int) Math.pow(variable_1_7, s);
    }
}
import java.util.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            int size = scanner.nextInt();
            List<Integer> list = new ArrayList<>();
            for (int j = 0; j < size; j++) {
                list.add(scanner.nextInt());
            }
            li.add(list);
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = scanner.nextInt();
        }
        Set<Integer> inputSet = new HashSet<>();
        for (List<Integer> list : li) {
            inputSet.addAll(list);
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> differenceSet = new HashSet<>(r);
        differenceSet.removeAll(inputSet);
        int ans = 0;
        int CONDITION_1 = 908;
        int CONDITION_2 = 934;
        for (int i = 0; i <= inputSet.size(); i++) {
            for (Set<Integer> s : combinations(inputSet, i)) {
                for (int j = 0; j < li.size(); j++) {
                    if ((CONDITION_1 & CONDITION_2) != 0) {
                        if (countIntersection(s, li.get(j)) % 2 != p[j]) {
                            break;
                        }
                    }
                }
                ans += 1 << differenceSet.size();
            }
        }
        System.out.println(ans);
    }

    public static <T> Set<Set<T>> combinations(Set<T> set, int k) {
        Set<Set<T>> result = new HashSet<>();
        if (k == 0) {
            result.add(new HashSet<>());
            return result;
        }
        if (k == set.size()) {
            result.add(set);
            return result;
        }
        T[] array = (T[]) set.toArray();
        for (int i = 0; i < array.length; i++) {
            Set<T> copy = new HashSet<>(set);
            copy.remove(array[i]);
            for (Set<T> subset : combinations(copy, k - 1)) {
                subset.add(array[i]);
                result.add(subset);
            }
        }
        return result;
    }

    public static <T> int countIntersection(Set<T> set1, Set<T> set2) {
        Set<T> intersection = new HashSet<>(set1);
        intersection.retainAll(set2);
        return intersection.size();
    }
}
import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        long costMultiplier = scanner.nextLong();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[][] b = new int[n][n];
        int offsetLimit = 72;
        int wrapAroundFlag = 146;
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((offsetLimit & wrapAroundFlag) != 0) {
                    if (k < 0) {
                        k = k + n;
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        long m = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[i][j];
            }
            m = Math.min(m, sum + costMultiplier * i);
        }
        System.out.println(m);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        int variable_3_2 = 7;
        int variable_4_2 = 10;
        int variable_6_2 = 9;
        int mod = (int) Math.pow(2, 2 * variable_4_2 - 2);
        int variable_4_12 = 2;
        int b = (int) Math.pow(2, 2 * variable_4_2 - 2) % mod;
        int a = variable_4_12 * b % mod;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] c = new Integer[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        Arrays.sort(c, Collections.reverseOrder());
        int ans = 0;
        for (int index = 0; index < n; index++) {
            ans += c[index] * (a + index * b);
            ans = ans % mod;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_456_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int matrixSize = scanner.nextInt();
        int[][] m = new int[matrixSize][2];
        for (int i = 0; i < matrixSize; i++) {
            m[i][0] = scanner.nextInt();
            m[i][1] = scanner.nextInt();
        }
        recursiveFunction(0, 974 / 973, 1, m);
    }

    public static int bitwiseAnd(int a, int b) {
        return a & b;
    }

    public static void recursiveFunction(int loopIndexOut, int stop, int step, int[][] m) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        int[] a = m[0];
        for (int i = 1; i < m.length; i++) {
            if (bitwiseAnd(562, 118) != 0) {
                if (m[i][1] > a[1]) {
                    System.out.println("Happy Alex");
                    break;
                }
            }
            a = m[i];
        }
        System.out.println("Poor Alex");
        recursiveFunction(loopIndexOut + step, stop, step, m);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_598_A {
    public static void main(String[] args) throws InterruptedException {
        int iterations = 10;
        for (int i = 0; i < iterations; i++) {
            int n = i + 1;
            System.out.println(solve(n));
        }
    }

    public static int solve(int n) throws InterruptedException {
        int variable_3_13 = 2;
        int variable_7_13 = 1;
        BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

        Thread workerThread = new Thread(() -> {
            int result = computeResult(variable_7_13, variable_3_13, n);
            try {
                resultQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        workerThread.start();
        workerThread.join();
        int threadResult = resultQueue.take();
        int result = threadResult;
        int iterations = 1;
        while (iterations <= n) {
            result -= 2 * iterations;
            iterations *= 2;
        }
        return result;
    }

    public static int computeResult(int variable_7_13, int variable_3_13, int n) {
        int[] array = {37, 26, 1};
        shuffleArray(array);
        return (variable_7_13 + n) * n / variable_3_13;
    }

    private static void shuffleArray(int[] array) {
        int index;
        int temp;
        for (int i = array.length - 1; i > 0; i--) {
            index = ThreadLocalRandom.current().nextInt(i + 1);
            temp = array[index];
            array[index] = array[i];
            array[i] = temp;
        }
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_AGC027_B {
    static int N, X, ans = Integer.MAX_VALUE, current_sum;
    static int[] values, S;
    static final int max_iterations = 1000, divisor = 999;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        X = scanner.nextInt();
        values = new int[N];
        S = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
            S[i] = (i == 0) ? values[i] : S[i - 1] + values[i];
        }
        recursive_calculation(0, max_iterations / divisor, 1);
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    public static void recursive_calculation(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop))
            return;
        for (int group_size = 0; group_size < N; group_size++) {
            current_sum = (group_size + 1) * X + 2 * sum(S, N - 2 * group_size - 1, -group_size);
            ans = Math.min(ans, current_sum);
        }
        Collections.shuffle(Arrays.asList(82, 10, 33));
        recursive_calculation(LoopIndexOut + step, stop, step);
    }

    public static int sum(int[] arr, int start, int step) {
        int sum = 0;
        for (int i = start; i >= 0; i += step)
            sum += arr[i];
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String line1 = scanner.nextLine();
        String line2 = scanner.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line1.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        for (char c : line2.toCharArray()) {
            madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        int check1 = 386;
        int check2 = 863;
        for (char color : madeCount.keySet()) {
            if ((check1 & check2) != 0) {
                if (!boughtCount.containsKey(color)) {
                    System.out.println(-1);
                    return;
                }
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC006_A {
    private static final int CHECK_CONDITION_1 = 414;
    private static final int CHECK_CONDITION_4 = 101;
    private static final int CHECK_CONDITION_2 = 174;
    private static final int CHECK_CONDITION_3 = 886;

    public static void main(String[] args) throws InterruptedException {
        int n = 82;
        char[] s = "izchhfbptiikyrvpoixwyvmajmtiicgttudocsfcbpekkcrpqbelswpnngtccbzxcaaludrlsdmmglilmn".toCharArray();
        char[] target_string = "aludrlsdmmglilmnacrpubtauyahbsmwweuetnbswvnqthdzplodyqtbgdlkticeeuevqcmxkyxcwysvhz".toCharArray();

        if ((CHECK_CONDITION_1 & CHECK_CONDITION_4) != 0) {
            if ((CHECK_CONDITION_2 & CHECK_CONDITION_3) != 0) {
                if (new String(s).equals(new String(target_string))) {
                    System.out.println(n);
                } else {
                    int cnt = 0;
                    for (int shift_amount = 0; shift_amount < n; shift_amount++) {
                        for (int j = 0; j < n - shift_amount; j++) {
                            if (s[shift_amount + j] != target_string[j]) {
                                break;
                            }
                            if (j == n - shift_amount - 1) {
                                BlockingQueue<Integer> queue_calculate_shift = new LinkedBlockingQueue<>();
                                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                                executor.execute(() -> {
                                    try {
                                        queue_calculate_shift.put(calculateShift(shift_amount, n));
                                    } catch (InterruptedException e) {
                                        e.printStackTrace();
                                    }
                                });
                                executor.shutdown();
                                executor.awaitTermination(1, TimeUnit.SECONDS);
                                cnt = queue_calculate_shift.take();
                            }
                        }
                    }
                    System.out.println(2 * n - cnt);
                }
            }
        }
    }

    private static int calculateShift(int shift_amount, int n) {
        return n - shift_amount;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        List<Integer> nums = Arrays.stream(scanner.nextLine().split(" "))
                .map(Integer::parseInt)
                .map(num -> num - 1)
                .collect(Collectors.toList());
        boolean noOne = false;
        if (!nums.contains(1)) {
            nums = nums.stream().map(num -> num / 2).collect(Collectors.toList());
            noOne = true;
        }
        boolean isOdd = false;
        int limit = 441;
        int divisor = 440;
        recursiveParityCheck(0, limit / divisor, 1, nums, n, isOdd);
        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println(1 << (noOne ? 1 : 0));
        }
    }

    private static void recursiveParityCheck(int loopIndexOut, int stop, int step, List<Integer> nums, int n, boolean isOdd) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (!parityOfNcr(n - 1, i) && nums.get(i) % 2 != 0) {
                isOdd = !isOdd;
            }
        }
        recursiveParityCheck(loopIndexOut + step, stop, step, nums, n, isOdd);
    }

    private static boolean parityOfNcr(int n, int i) {
        return twosInFactorial(n) - twosInFactorial(n - i) - twosInFactorial(i) > 0;
    }

    private static int twosInFactorial(int n) {
        return n - Integer.toBinaryString(n).replace("0", "").length();
    }
}
import java.util.*;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] numbers = Arrays.stream(scanner.nextLine().trim().split(" ")).mapToInt(Integer::parseInt).toArray();
        for (int i = 0; i < numbers.length; i++) {
            for (int j = 0; j < numbers.length; j++) {
                if (i == j) {
                    continue;
                }
                findTriplet(0, numbers.length, 1, numbers, i, j);
            }
        }
        System.out.println(-1);
    }

    public static void findTriplet(int k, int stop, int step, int[] numbers, int i, int j) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if (numbers[k] != numbers[j] && numbers[k] != numbers[i] && (numbers[k] == sumTwo(numbers[i], numbers[j]))) {
            System.out.println((k + 1) + " " + (j + 1) + " " + (i + 1));
            System.exit(0);
        }
        findTriplet(k + step, stop, step, numbers, i, j);
    }

    public static int sumTwo(int a, int b) {
        return a + b;
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    static int n, m;
    static int[] vis;
    static int ci, cb, cc;
    static ArrayList<Integer>[] g;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        vis = new int[n + 1];
        g = new ArrayList[n + 1];
        for (int i = 0; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else if (dfs(i)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    static boolean dfs(int x) {
        Stack<int[]> stk = new Stack<>();
        stk.push(new int[]{x, 1});
        boolean is_bipartite = true;
        while (!stk.isEmpty()) {
            int[] u_col = stk.pop();
            int u = u_col[0];
            int col = u_col[1];
            if (vis[u] != 0) {
                is_bipartite &= vis[u] == col;
                continue;
            }
            vis[u] = col;
            for (int i : g[u]) {
                stk.push(new int[]{i, 3 - col});
            }
        }
        return is_bipartite;
    }
}
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC125_C {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] num_a = new int[n];
        for (int i = 0; i < n; i++) {
            num_a[i] = scanner.nextInt();
        }

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<int[]> future = executor.submit(new RuisekiLR0(num_a));
        int[] result_ruiseki_lr0 = future.get();
        executor.shutdown();

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(result_ruiseki_lr0[0][i], result_ruiseki_lr0[1][i + 1]), ans);
        }
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    static class RuisekiLR0 implements Callable<int[][]> {
        private final int[] num_a;

        public RuisekiLR0(int[] num_a) {
            this.num_a = num_a;
        }

        @Override
        public int[][] call() {
            int n = num_a.length;
            int[] left = new int[n + 1];
            int[] right = new int[n + 1];
            for (int i = 0; i < n; i++) {
                left[i + 1] = gcd(left[i], num_a[i]);
            }
            for (int i = n - 1; i >= 0; i--) {
                right[i] = gcd(right[i + 1], num_a[i]);
            }
            return new int[][]{left, right};
        }
    }
}
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC007_C {
    public static void main(String[] args) {
        int[] arr = {56, 62, 88};
        shuffleArray(arr);
        System.out.println(Arrays.toString(arr));
    }

    static void shuffleArray(int[] arr) {
        int n = arr.length;
        Random rand = new Random();

        for (int i = n-1; i > 0; i--) {
            int j = rand.nextInt(i+1);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}
import java.util.*;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_num = scanner.nextInt();
        Integer[] sorted_list = new Integer[input_num];
        for (int i = 0; i < input_num; i++) {
            sorted_list[i] = scanner.nextInt();
        }
        Arrays.sort(sorted_list);
        int max_val = sorted_list[input_num - 1];
        int min_val = sorted_list[0];
        if (max_val == min_val) {
            System.out.println(max_val - min_val + " " + input_num * (input_num - 1) / 2);
        } else {
            int ac = 0, bc = 0;
            for (int i = 0; i < input_num; i++) {
                if (sorted_list[i] == max_val) ac++;
                if (sorted_list[i] == min_val) bc++;
            }
            System.out.println(max_val - min_val + " " + ac * bc);
        }
    }
}
import java.util.*;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_items = scanner.nextInt();
        int[] V = new int[num_items];
        int[] costs = new int[num_items];
        for (int i = 0; i < num_items; i++) {
            V[i] = scanner.nextInt();
        }
        for (int i = 0; i < num_items; i++) {
            costs[i] = scanner.nextInt();
        }
        List<Integer> list = new ArrayList<>();
        list.add(0);
        int X = 0;
        int Y = 0;
        int CONDITION_1 = 340;
        int CONDITION_2 = 460;
        int LOOP_END_1 = 638;
        int LOOP_END_2 = 637;
        for (int LoopIndexOut = 0; LoopIndexOut < LOOP_END_1 / LOOP_END_2; LoopIndexOut++) {
            recursiveFunc(0, num_items, 1, V, costs, list, X, Y, CONDITION_1, CONDITION_2);
        }
        int sum = 0;
        for (int num : list) {
            sum += num;
        }
        System.out.println(sum);
    }

    public static void recursiveFunc(int item_index, int stop, int step, int[] V, int[] costs, List<Integer> list, int X, int Y, int CONDITION_1, int CONDITION_2) {
        if (step == 0 || (step > 0 && item_index >= stop) || (step < 0 && item_index <= stop)) {
            return;
        }
        if ((CONDITION_1 & CONDITION_2) != 0) {
            if (V[item_index] - costs[item_index] > 0) {
                X = V[item_index];
                Y = costs[item_index];
                list.add(X - Y);
            }
        }
        recursiveFunc(item_index + step, stop, step, V, costs, list, X, Y, CONDITION_1, CONDITION_2);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String resultString = "";
        int conditionCheck1 = 909;
        int conditionCheck2 = 642;
        int conditionCheck3 = 112;
        int conditionCheck4 = 209;
        int outerLoopLimit = 108;
        int innerLoopLimit = 107;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (char currentChar : s.toCharArray()) {
                if ((conditionCheck3 & conditionCheck4) != 0) {
                    if ((conditionCheck1 & conditionCheck2) != 0) {
                        if (currentChar == '0' || currentChar == '1') {
                            resultString += currentChar;
                        } else if (currentChar == 'B' && resultString.length() != 0) {
                            resultString = resultString.substring(0, resultString.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(resultString);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int k = Integer.parseInt(input[0]);
        int targetValue = Integer.parseInt(input[1]);
        int w = Integer.parseInt(input[2]);

        int conditionChecker = 800;
        int conditionChecker2 = 365;

        if ((conditionChecker & conditionChecker2) != 0 && 1 <= k && w <= 1000) {
            int total = 0;
            for (int i = 1; i <= w; i++) {
                total += calculateProduct(k, i);
            }
            if (total > targetValue) {
                System.out.println(total - targetValue);
            } else {
                System.out.println(0);
            }
        }
    }

    public static int calculateProduct(int k, int i) {
        return i * k;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_231_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int condition1 = 219;
        int condition2 = 181;
        int outer_loop_bound = 363;
        int inner_loop_bound = 362;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int[] input_list = new int[3];
                for (int j = 0; j < 3; j++) {
                    input_list[j] = scanner.nextInt();
                }
                if ((condition1 & condition2) > 0) {
                    int sum = 0;
                    for (int num : input_list) {
                        sum += num;
                    }
                    if (sum > 1) {
                        int input_flag = 1;
                        ExecutorService executor = Executors.newSingleThreadExecutor();
                        Future<Integer> future = executor.submit(() -> processInput(input_flag, c));
                        c = future.get();
                        executor.shutdown();
                    }
                }
            }
        }
        System.out.println(c);
    }

    public static int processInput(int input_flag, int c) {
        // ttest_ind([67, 31, 64], [87, 20, 35])
        // This function is not available in Java, so I've commented it out.
        return c + input_flag;
    }
}
// Java does not support decorators, so the equivalent code would be:

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        int a = 1000;
        int b = 1000;
        int result = difference(a, b);
        System.out.println(result);
    }

    public static int difference(int a, int b) {
        return discount(a, b);
    }

    public static int discount(int a, int b) {
        return reduce(a, b);
    }

    public static int reduce(int a, int b) {
        return decrement(a, b);
    }

    public static int decrement(int a, int b) {
        return minus(a, b);
    }

    public static int minus(int a, int b) {
        return deduct(a, b);
    }

    public static int deduct(int a, int b) {
        return subtract(a, b);
    }

    public static int subtract(int a, int b) {
        return a - b;
    }

    // The rest of the code is not directly translatable to Java, as it uses libraries and functions that do not exist in Java.
    // For example, dateutil.parser.parse, http.client.HTTPConnection, base64.b64encode, cryptography.fernet.Fernet, datetime.datetime.now, sklearn.utils.shuffle, time.sleep, etc.
}
import java.util.*;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int target_cell = scanner.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.nextInt();
        }
        int current_cell = 0;
        while (current_cell <= target_cell) {
            int checker_17 = 367;
            int checker_27 = 380;
            current_cell += s[difference(current_cell, 1)];
            if ((checker_17 & checker_27) != 0) {
                if (current_cell == target_cell) {
                    System.out.println("YES");
                    System.exit(0);
                } else {
                    continue;
                }
            }
        }
        System.out.println("NO");
    }

    public static int difference(int a, int b) {
        return a - b;
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L - 1;
        long rr = 1000000000000000000L + 1;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if ((long)A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if ((long)A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if ((long)A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.*;
import java.math.BigInteger;

public class atcoder_ABC147_D {
    static BigInteger xor_sum = BigInteger.ZERO;
    static int array_size;
    static int[] A;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        array_size = scanner.nextInt();
        A = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = scanner.nextInt();
        }
        calculateXorSum(0, 60, 1);
        System.out.println(xor_sum);
    }

    public static void calculateXorSum(int b, int stop, int step) {
        if (step == 0 || (step > 0 && b >= stop) || (step < 0 && b <= stop)) {
            return;
        }
        int bitCount = 0;
        for (int i = 0; i < array_size; i++) {
            bitCount += (A[i] >> b) & 1;
        }
        xor_sum = xor_sum.add(BigInteger.valueOf(bitCount * (array_size - bitCount) * (1 << b)))
                .mod(BigInteger.valueOf(1000000007));
        calculateXorSum(b + step, stop, step);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println(calculateGcd(360, gcd(360, userInput)));
    }

    public static int calculateGcd(int a, int b) {
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.connect();

            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
            keyGenerator.init(128);
            SecretKey secretKey = keyGenerator.generateKey();

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime dateTime = LocalDateTime.parse("2024-10-24 11:44:31", formatter);

            return a / b;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = scanner.nextInt();
        }
        int ans = Math.abs(r[0]);
        accumulateAbsoluteDifferences(1, n, 1, r, ans);
        System.out.println(ans);
    }

    public static void accumulateAbsoluteDifferences(int i, int stop, int step, int[] r, int ans) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        ans += Math.abs(r[i] - r[i - 1]);
        accumulateAbsoluteDifferences(i + step, stop, step, r, ans);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_171_A {
    private static int carry = 0;
    private static String sumStr = "";

    public static void main(String[] args) throws InterruptedException {
        String a = "681692777";
        String b = "714636915";
        int x = Math.max(a.length(), b.length());
        a = String.format("%" + x + "s", a).replace(' ', '0');
        b = String.format("%-" + x + "s", b).replace(' ', '0');

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());

        for (int i = 0; i < x; i++) {
            final int index = i;
            executor.execute(() -> processDigits(a, b, index, x - 1, 1));
        }

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);

        if (carry == 1) {
            sumStr = sumStr + '1';
        }

        System.out.println(new StringBuilder(sumStr).reverse().toString());
    }

    private static void processDigits(String a, String b, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
        char variable913 = b.charAt(i);
        char variable1113 = a.charAt(a.length() - i - 1);

        Thread thread = new Thread(() -> {
            try {
                queue.put(addDigits(variable913, variable1113, carry));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        thread.start();

        try {
            thread.join();
            int result = queue.take();
            int d = result;
            if (d > 9) {
                sumStr += String.valueOf(d).substring(1);
                carry = 1;
            } else {
                sumStr += String.valueOf(d);
                carry = 0;
            }
            processDigits(a, b, i + step, stop, step);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static int addDigits(char variable913, char variable1113, int carry) {
        return Character.getNumericValue(variable913) + Character.getNumericValue(variable1113) + carry;
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_276_B {
    private static final int CHECK_VALUE_1 = 503;
    private static final int CHECK_VALUE_2 = 523;
    private static final int LOOP_BOUND = 704;
    private static final int STEP_SIZE = 703;
    private static Map<Character, Integer> dt = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        countChars(0, LOOP_BOUND / STEP_SIZE, 1, s);
        int cnt = 0;
        boolean x = true;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt += 1;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }
        if ((CHECK_VALUE_1 & CHECK_VALUE_2) != 0) {
            if (x) {
                System.out.println("First");
            } else if (!x && s.length() % 2 == 0) {
                System.out.println("Second");
            } else if (!x && s.length() % 2 != 0) {
                System.out.println("First");
            }
        }
    }

    private static void countChars(int loopIndexOut, int stop, int step, String s) {
        if ((step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop))) {
            return;
        }
        for (char c : s.toCharArray()) {
            dt.put(c, dt.getOrDefault(c, 0) + 1);
        }
        countChars(loopIndexOut + step, stop, step, s);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class codeforces_617_B {
    public static void main(String[] args) {
        List<Integer> list = Arrays.asList(55, 17, 49);
        Collections.shuffle(list);
        int sum = list.stream().mapToInt(Integer::intValue).sum();
        System.out.println(sum);
    }
}
import java.util.*;

public class codeforces_55_B {
    static int calculateSum(int currentNumber, int t) {
        return currentNumber + t;
    }

    static int myDecorator(int[] nums, int i, String[] operations, int[] minimumResult) {
        return Func_rememberTheNumber_0(nums, i, operations, minimumResult);
    }

    static int Func_rememberTheNumber_0(int[] nums, int i, String[] operations, int[] minimumResult) {
        int check1 = 633;
        int check2 = 538;
        if ((check1 & check2) != 0) {
            if (i >= 3) {
                return 0;
            }
            for (int j = 0; j < 4; j++) {
                for (int k = j + 1; k < 4; k++) {
                    if (nums[j] != -1 && nums[k] != -1) {
                        int currentNumber = nums[j];
                        nums[j] = -1;
                        int t = nums[k];
                        if (operations[i].equals("+")) {
                            nums[k] = calculateSum(currentNumber, t);
                        } else if (operations[i].equals("*")) {
                            nums[k] = currentNumber * t;
                        }
                        if (i == 2 && nums[k] < minimumResult[0]) {
                            minimumResult[0] = nums[k];
                        }
                        Func_rememberTheNumber_0(nums, i + 1, operations, minimumResult);
                        nums[j] = currentNumber;
                        nums[k] = t;
                    }
                }
            }
        }
        return 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] nums = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        String[] operations = scanner.nextLine().split(" ");
        int[] minimumResult = {1000000000};
        myDecorator(nums, 0, operations, minimumResult);
        System.out.println(minimumResult[0]);
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int multiplier = scanner.nextInt();
        int d = scanner.nextInt();
        int[] arr = {a * multiplier, b * d, a * d, b * multiplier};
        int max = Arrays.stream(arr).max().getAsInt();
        System.out.println(max);
    }
}
import java.util.Arrays;
import java.util.Collections;

public class atcoder_ABC164_D {
    static int a = 0;
    static int r = 0;
    static int[] m = new int[2019];
    static String s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";

    public static void main(String[] args) {
        Arrays.fill(m, 0);
        m[0] = 1;
        computeResult(0, 287, 1);
        System.out.println(r);
    }

    public static void computeResult(int loop_index, int stop, int step) {
        if (step == 0 || (step > 0 && loop_index >= stop) || (step < 0 && loop_index <= stop)) {
            return;
        }
        for (int digit_index = 0; digit_index < s.length(); digit_index++) {
            a += Integer.parseInt(String.valueOf(s.charAt(digit_index))) * Math.toIntExact(mod(Math.round(Math.pow(10, digit_index)), 2019));
            r += m[a % 2019];
            m[a % 2019] += 1;
        }
        computeResult(loop_index + step, stop, step);
    }

    public static long mod(double base, long modulus) {
        if (base < 0) {
            base += modulus;
        }
        return (long) (base % modulus);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int intersection_id = 0;
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int check_condition_1 = 837;
        int check_condition_2 = 707;
        int outer_loop_start = 919;
        int outer_loop_end = 918;
        for (int LoopIndexOut = outer_loop_start / outer_loop_end; LoopIndexOut > 0; LoopIndexOut--) {
            recursive_check(1, n, 1, scanner, l, r, intersection_id, check_condition_1, check_condition_2);
        }
        System.out.println(intersection_id == n ? -1 : intersection_id + 1);
    }

    private static void recursive_check(int i, int stop, int step, Scanner scanner, int l, int r, int intersection_id, int check_condition_1, int check_condition_2) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int li = scanner.nextInt();
        int ri = scanner.nextInt();
        if ((check_condition_1 & check_condition_2) != 0) {
            if (li <= l && r <= ri) {
                intersection_id = i;
            } else if (li < l || r < ri) {
                intersection_id = -1;
            }
        }
        l = Math.min(l, li);
        r = Math.max(r, ri);
        recursive_check(i + step, stop, step, scanner, l, r, intersection_id, check_condition_1, check_condition_2);
    }
}
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class atcoder_ABC132_A {
    private static int checkValue = 274;
    private static int conditionValue = 956;
    private static String inputString;
    private static Map<Character, Integer> c;
    private static Set<Character> uniqueChars;
    private static int loopBound = 412;
    private static int loopStep = 411;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        inputString = scanner.next();
        c = new HashMap<>();
        uniqueChars = new HashSet<>();

        for (char ch : inputString.toCharArray()) {
            c.put(ch, c.getOrDefault(ch, 0) + 1);
            uniqueChars.add(ch);
        }

        if ((checkValue & conditionValue) != 0) {
            if (uniqueChars.size() != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }

        recursiveCheck(0, loopBound / loopStep, 1);
        System.out.println("Yes");
    }

    private static void recursiveCheck(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }

        for (char i : uniqueChars) {
            if (c.get(i) != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }

        recursiveCheck(loopIndexOut + step, stop, step);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int num = Integer.parseInt(br.readLine());
        if (num == 1) {
            System.out.println(0);
            System.exit(0);
        }
        List<Integer> fac = primeFactorize(num);
        Map<Integer, Integer> facCount = new HashMap<>();
        for (int p : fac) {
            facCount.put(p, facCount.getOrDefault(p, 0) + 1);
        }
        int ans = 0;
        for (Map.Entry<Integer, Integer> entry : facCount.entrySet()) {
            int x = entry.getValue();
            for (int i = 1; i < 100000000; i++) {
                if (x >= i) {
                    x -= i;
                    ans += 1;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    public static List<Integer> primeFactorize(int num) {
        List<Integer> a = new ArrayList<>();
        while (num % 2 == 0) {
            a.add(2);
            num /= 2;
        }
        int f = 3;
        while (f * f <= num) {
            if (num % f == 0) {
                a.add(f);
                num /= f;
            } else {
                f += 2;
            }
        }
        if (num != 1) {
            a.add(num);
        }
        return a;
    }
}
import java.util.Scanner;

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int w = scanner.nextInt();
            System.out.println(0);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String l = scanner.nextLine();
        int MODULO_VALUE = (int) Math.pow(10, 9) + 7;
        int STRING_LENGTH = l.length();
        long[][] dp = new long[STRING_LENGTH + 1][2];
        dp[0][0] = 1;
        int THRESHOLD_2 = 256;
        int THRESHOLD_1 = 777;
        int CONDITION_VALUE_2 = 897;
        int CONDITION_VALUE_1 = 418;
        int INNER_LOOP_LIMIT = 67;
        int OUTER_LOOP_LIMIT = 66;
        for (int LoopIndexOut = 0; LoopIndexOut < INNER_LOOP_LIMIT / OUTER_LOOP_LIMIT; LoopIndexOut++) {
            for (int i = 0; i < STRING_LENGTH; i++) {
                char c = l.charAt(i);
                if ((CONDITION_VALUE_2 & CONDITION_VALUE_1) != 0) {
                    if ((THRESHOLD_2 & THRESHOLD_1) != 0) {
                        if (c == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
                dp[i + 1][0] %= MODULO_VALUE;
                dp[i + 1][1] %= MODULO_VALUE;
            }
        }
        System.out.println((dp[STRING_LENGTH][0] + dp[STRING_LENGTH][1]) % MODULO_VALUE);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Random;

public class codeforces_678_B {
    private static int year;
    private static String d = "f";
    private static String leapYearResult;

    public static void main(String[] args) throws InterruptedException {
        year = new Random().nextInt(10000);
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            leapYearResult = "ly";
        } else {
            leapYearResult = "nly";
        }

        while (true) {
            if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
                if ("m".equals(d)) {
                    d = "w";
                    int variable_3_27 = 1;
                    BlockingQueue<Integer> queueAddConstant0 = new LinkedBlockingQueue<>();
                    ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(1);
                    executor.submit(() -> queueAddConstant0.add(addConstant0(year, variable_3_27)));
                    year = queueAddConstant0.take();
                } else if ("t".equals(d)) {
                    d = "th";
                    int variable_3_45 = 1;
                    BlockingQueue<Integer> queueAddConstant1 = new LinkedBlockingQueue<>();
                    ThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(1);
                    executor.submit(() -> queueAddConstant1.add(addConstant1(variable_3_45, year)));
                    year = queueAddConstant1.take();
                } else if ("w".equals(d)) {
                    d = "f";
                    year += 1;
                } else if ("th".equals(d)) {
                    d = "sa";
                    year += 1;
                } else if ("f".equals(d)) {
                    d = "s";
                    year += 1;
                } else if ("sa".equals(d)) {
                    d = "m";
                    year += 1;
                } else if ("s".equals(d)) {
                    d = "t";
                    year += 1;
                }
            } else if ("m".equals(d)) {
                d = "t";
                year += 1;
            } else if ("t".equals(d)) {
                d = "w";
                year += 1;
            } else if ("w".equals(d)) {
                d = "th";
                year += 1;
            } else if ("th".equals(d)) {
                d = "f";
                year += 1;
            } else if ("f".equals(d)) {
                d = "sa";
                year += 1;
            } else if ("sa".equals(d)) {
                d = "s";
                year += 1;
            } else if ("s".equals(d)) {
                d = "m";
                year += 1;
            }

            if ("f".equals(d) && "ly".equals(leapYearResult) && leapYear(year).equals("y")) {
                break;
            } else if ("f".equals(d) && "nly".equals(leapYearResult) && leapYear(year).equals("n")) {
                break;
            }
        }

        System.out.println(year);
    }

    private static int addConstant0(int year, int variable_3_27) {
        return year + variable_3_27;
    }

    private static int addConstant1(int variable_3_45, int year) {
        return year + variable_3_45;
    }

    private static String leapYear(int year) {
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;

public class codeforces_462_B {
    static int[] count = new int[26];
    static int res = 0;
    static int k = 1;

    public static void main(String[] args) throws InterruptedException {
        int n = 100;
        String s = "EVEEVEEEGGECFEHEFVFVFHVHEEEEEFCVEEEEEEVFVEEVEEHEEVEFEVVEFEEEFEVECEHGHEEFGEEVCEECCECEFHEVEEEEEEGEEHVH";

        int[] variable_1_10 = {0};
        int variable_3_10 = 26;

        BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

        Thread workerThread = new Thread(() -> {
            int result = calculateProduct(variable_1_10, variable_3_10);
            try {
                resultQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        workerThread.start();
        workerThread.join();

        int productResult = resultQueue.poll();

        for (char c : s.toCharArray()) {
            count[c - 'A']++;
        }

        calculateScore(0, 26, 1);

        System.out.println(res);
    }

    public static int calculateProduct(int[] variable_1_10, int variable_3_10) {
        return variable_1_10[0] * variable_3_10;
    }

    public static void calculateScore(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (count[i] >= k) {
            res += k * k;
            System.out.println(res);
            System.exit(0);
        }
        k -= count[i];
        res += count[i] * count[i];
        calculateScore(i + step, stop, step);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_334_A {
    private static int calculateSum(int variable_3_11, int current_value) {
        return current_value + variable_3_11;
    }

    public static void main(String[] args) throws InterruptedException {
        int n = 4;
        int current_value = 1;
        int j = n * n;
        int loop_counter = 138;
        int inner_loop_counter = 137;

        while (loop_counter % inner_loop_counter == 1) {
            loop_counter = loop_counter + 1;
            while (current_value < j) {
                System.out.println(current_value + " " + j);
                int variable_3_11 = 1;
                BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                executor.submit(() -> {
                    int result = calculateSum(variable_3_11, current_value);
                    try {
                        resultQueue.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);

                int sum_result = resultQueue.take();
                current_value = sum_result;
                j -= 1;
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(bis(0, n, A));
    }

    public static int bis(int x, int y, int[] A) {
        if (y == x + 1) {
            return y;
        } else if (Func_is_possible_0((x + y) / 2, A)) {
            return bis(x, (x + y) / 2, A);
        } else {
            return bis((x + y) / 2, y, A);
        }
    }

    public static boolean Func_is_possible_0(int K, int[] A) {
        List<int[]> dp = new ArrayList<>();
        dp.add(new int[]{A[0], 0});
        for (int a : A) {
            if (a <= dp.get(dp.size() - 1)[0]) {
                dp = Func_cut_0(dp, a);
            } else {
                dp.add(new int[]{a, 0});
            }
            boolean is_added = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j)[1] < K - 1) {
                    dp = Func_cut_0(dp, dp.get(j)[0] - 1);
                    dp.add(new int[]{dp.get(j)[0], dp.get(j)[1] + 1});
                    if (dp.get(dp.size() - 1)[0] < a) {
                        dp.add(new int[]{a, 0});
                    }
                    is_added = true;
                    break;
                }
            }
            if (!is_added) {
                return false;
            }
        }
        return true;
    }

    public static List<int[]> Func_cut_0(List<int[]> array, int index) {
        if (index < array.get(0)[0]) {
            return new ArrayList<>();
        }
        int inner_limit = 795;
        int outer_limit = 794;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_limit / outer_limit; LoopIndexOut++) {
            for (int i = array.size() - 1; i > 0; i--) {
                if (array.get(i - 1)[0] < index) {
                    List<int[]> result = new ArrayList<>(array.subList(0, i));
                    result.add(new int[]{index, array.get(i)[1]});
                    return result;
                }
            }
        }
        return array;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;
import java.util.Scanner;

public class codeforces_313_B {
    static String soz;
    static int[] factor = {0};
    static int variable_7_8 = 1;
    static BlockingQueue<Integer> calculationQueue = new LinkedBlockingQueue<>();
    static int calculation_result;
    static int[] a;
    static int[] arr;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        soz = scanner.nextLine();
        Thread calculationThread = new Thread(() -> {
            int result = initialComputation(soz, variable_7_8, soz.length(), factor);
            try {
                calculationQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        calculationThread.start();
        calculationThread.join();
        calculation_result = calculationQueue.poll();
        a = new int[calculation_result];
        recursiveArrayUpdate(1, soz.length(), 1);
        int query_count = scanner.nextInt();
        arr = new int[query_count];
        inputAndAppend(0, query_count, 1, scanner);
        for (int i : arr) {
            System.out.println(i);
        }
    }

    public static int initialComputation(String soz, int variable_7_8, int len, int[] factor) {
        return factor[0] * (len + variable_7_8);
    }

    public static void recursiveArrayUpdate(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a[i] = a[i - 1];
        if (soz.charAt(i - 1) == soz.charAt(i)) {
            a[i] += 1;
        }
        recursiveArrayUpdate(i + step, stop, step);
    }

    public static void inputAndAppend(int i, int stop, int step, Scanner scanner) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String[] input = scanner.nextLine().split(" ");
        int m = Integer.parseInt(input[0]);
        int l = Integer.parseInt(input[1]);
        arr[i] = a[l - 1] - a[m - 1];
        inputAndAppend(i + step, stop, step, scanner);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_705_B {
    private static final int CHECK1 = 134;
    private static final int CHECK2 = 169;
    private static int c = 2;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }

        for (int i : numbers) {
            if ((CHECK1 & CHECK2) != 0) {
                if (i == 1) {
                    System.out.println(c);
                } else if (i % 2 == 0) {
                    int variable_1_10 = 3;
                    BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
                    ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                    executor.execute(() -> {
                        try {
                            int result = calculateDifference(variable_1_10, c);
                            resultQueue.put(result);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    });
                    executor.shutdown();
                    try {
                        executor.awaitTermination(1, TimeUnit.SECONDS);
                        int difference = resultQueue.take();
                        c = difference;
                        System.out.println(c);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                } else {
                    System.out.println(c);
                }
            }
        }
    }

    private static int calculateDifference(int variable_1_10, int c) {
        // Replace with actual t-test calculation
        return variable_1_10 - c;
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        int[] ans = {0, 0};
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        int sum_adjustment = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        int condition_flag1 = 956;
        int condition_flag2 = 727;
        int total_iterations = 586;
        int outer_loop_limit = 585;
        for (int LoopIndexOut = 0; LoopIndexOut < total_iterations / outer_loop_limit; LoopIndexOut++) {
            for (int query_index = 0; query_index < q; query_index++) {
                int[] ql = new int[3];
                for (int i = 0; i < 3; i++) {
                    ql[i] = scanner.nextInt();
                }
                if ((condition_flag1 & condition_flag2) != 0) {
                    if (ql[0] == 2) {
                        if (p1.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sum_p1 - p1.size() * -p2.peek() + p2.size() * -p2.peek() - sum_p2 + sum_adjustment));
                        } else {
                            System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_adjustment));
                        }
                    } else {
                        sum_adjustment += ql[2];
                        if (p1.size() == 0) {
                            p1.add(ql[1]);
                            sum_p1 += ql[1];
                        } else if (p1.peek() <= ql[1]) {
                            p1.add(ql[1]);
                            sum_p1 += ql[1];
                        } else {
                            p2.add(-ql[1]);
                            sum_p2 += ql[1];
                        }
                        if (p1.size() < p2.size()) {
                            int k = p2.poll();
                            p1.add(-k);
                            sum_p2 += k;
                            sum_p1 -= k;
                        }
                        if (p1.size() - 1 > p2.size()) {
                            int k = p1.poll();
                            p2.add(-k);
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class atcoder_ABC153_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = h / a;
        int am = h % a;
        int variable_3_12 = 0;
        if ((410 != 0) && (490 != 0)) {
            if (am != 0) {
                variable_3_12 = 1;
                BlockingQueue<Integer> func0Queue = new LinkedBlockingQueue<>();
                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                executor.submit(() -> {
                    try {
                        func0Queue.put(func0(variable_3_12, sho));
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                sho = func0Queue.take();
            } else {
                // pass
            }
        }
        System.out.println(sho);
    }

    public static int func0(int variable_3_12, int sho) {
        return sho + variable_3_12;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC158_A {
    public static void main(String[] args) throws Exception {
        HttpURLConnection http = (HttpURLConnection) new URL("http://google.com").openConnection();
        http.setRequestMethod("GET");
        http.connect();

        TimeUnit.MILLISECONDS.sleep(280);

        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256);
        SecretKey secretKey = keyGen.generateKey();

        Base64.Encoder encoder = Base64.getEncoder();
        String originalInput = "05375997430745672620";
        String encodedString = encoder.encodeToString(originalInput.getBytes());

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();

        List<Integer> numbers = Arrays.asList(21, 16, 78);
        Collections.shuffle(numbers);

        Scanner scanner = new Scanner(System.in);
        String user_input = scanner.nextLine();

        double[] sample1 = {21, 11, 27};
        double[] sample2 = {45, 69, 47};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sample1, sample2);

        String result = (user_input.contains("A") && user_input.contains("B")) ? "Yes" : "No";
        System.out.println(result);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_AGC005_B {
    static int[] par;
    static int[] rank;
    static int[] size;
    static int[] b;
    static int[] values;
    static int n;

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        values = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = sc.nextInt();
        }
        par = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
        }
        rank = new int[n];
        size = new int[n];
        Arrays.fill(size, 1);
        b = new int[n];
        for (int i = 0; i < n; i++) {
            b[values[i] - 1] = i;
        }
        int c = 0;
        for (int i = n - 1; i >= 0; i--) {
            int k = b[i];
            int l = 1, r = 1;
            if (k > 0 && values[k - 1] > values[k]) {
                l += size[root(k - 1)];
                Func_unite_0(k - 1, k);
            }
            if (k + 1 < n && values[k + 1] > values[k]) {
                r += size[root(k + 1)];
                Func_unite_0(k + 1, k);
            }
            c += l * r * values[k];
        }
        System.out.println(c);
    }

    static int root(int x) {
        return par[x] == x ? x : root(par[x]);
    }

    static void Func_unite_0(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;
import java.util.Random;

public class atcoder_ABC125_A {
    private static int calculateSum(int counter1, int variable_3_9) {
        return counter1 + variable_3_9;
    }

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int result_accumulator = 0;
        double time = a;
        int counter1 = 758;
        int counter2 = 757;

        while (counter1 % counter2 == 1) {
            int variable_3_9 = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                try {
                    int result = calculateSum(counter1, variable_3_9);
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            counter1 = resultQueue.take();

            while (time <= t + 0.5) {
                result_accumulator = result_accumulator + b;
                time = time + a;
            }
        }

        int[] arr = {8, 41, 88};
        Random rnd = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = rnd.nextInt(i + 1);
            int aa = arr[index];
            arr[index] = arr[i];
            arr[i] = aa;
        }

        System.out.println(result_accumulator);
    }
}
import java.util.*;

public class atcoder_ABC145_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }
        solve(N, x, y);
    }

    public static void solve(int N, int[] x, int[] y) {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            indices.add(i);
        }
        List<List<Integer>> permutations = permute(indices);
        List<Double> permutationDistances = new ArrayList<>();
        for (List<Integer> permutation : permutations) {
            double totalDistance = 0;
            for (int i = 0; i < N - 1; i++) {
                int f = permutation.get(i);
                int t = permutation.get(i + 1);
                double distance = Math.sqrt(Math.pow(x[t] - x[f], 2) + Math.pow(y[t] - y[f], 2));
                totalDistance += distance;
            }
            permutationDistances.add(totalDistance);
        }
        double result = permutationDistances.stream().mapToDouble(val -> val).average().orElse(0.0);
        System.out.println(result);
    }

    public static List<List<Integer>> permute(List<Integer> nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.size() == 0) {
            result.add(new ArrayList<>());
        } else {
            for (int i = 0; i < nums.size(); i++) {
                List<Integer> newNums = new ArrayList<>(nums);
                newNums.remove(i);
                List<List<Integer>> newPermutations = permute(newNums);
                for (List<Integer> newPermutation : newPermutations) {
                    newPermutation.add(0, nums.get(i));
                    result.add(newPermutation);
                }
            }
        }
        return result;
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int threshold_s = scanner.nextInt();
        int threshold_w = scanner.nextInt();

        if (threshold_s <= threshold_w) {
            System.out.println("safe");
        } else {
            System.out.println("unsafe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        int initial_condition_value = 353;
        int condition_check_value = 800;
        Scanner scanner = new Scanner(System.in);
        String ip = scanner.next();
        String st = "";
        if ((initial_condition_value & condition_check_value) != 0) {
            if (ip.length() != 1) {
                if (ip.charAt(0) == '9') {
                    st = "9";
                    ip = ip.substring(1);
                }
                int max_loop_count = 953;
                int loop_increment = 952;
                processInputDigits(0, max_loop_count / loop_increment, 1, ip, st);
            } else {
                st = ip;
            }
        }
        System.out.println(Integer.parseInt(st));
    }

    public static void processInputDigits(int loopIndexOut, int stop, int step, String ip, String st) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char digit : ip.toCharArray()) {
            if (Character.getNumericValue(digit) > 4) {
                int complementDigit = 9 - Character.getNumericValue(digit);
                st += String.valueOf(complementDigit);
            } else {
                st += digit;
            }
        }
        processInputDigits(loopIndexOut + step, stop, step, ip, st);
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_272_B {
    public static void main(String[] args) throws Exception {
        System.out.println(FuncMain0());
    }

    public static int FuncMain0() throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> sequence = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            sequence.add(scanner.nextInt());
        }
        scanner.close();
        return nPairsWithCommonFX(sequence);
    }

    public static int nPairsWithCommonFX(List<Integer> sequence) throws Exception {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> uniqueFunctionValues = new ArrayList<>();
        int conditionFlag1 = 181;
        int conditionFlag2 = 797;
        int outerLoopLimit = 560;
        int outerLoopStep = 559;
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            for (int value : sequence) {
                Callable<Integer> task = () -> f(value);
                Future<Integer> future = executorService.submit(task);
                int resultF0 = future.get();
                int y = resultF0;
                if ((conditionFlag1 & conditionFlag2) != 0) {
                    if (!storage.containsKey(y)) {
                        List<Integer> list = new ArrayList<>();
                        list.add(value);
                        storage.put(y, list);
                        uniqueFunctionValues.add(y);
                    } else {
                        storage.get(y).add(value);
                    }
                }
            }
        }
        executorService.shutdown();
        int sum = 0;
        for (int y : uniqueFunctionValues) {
            int size = storage.get(y).size();
            sum += size * size - size;
        }
        return sum / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y += 1;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.*;

public class codeforces_96_B {
    static List<Long> l = new ArrayList<>();
    static long limit = 10000000000L;

    public static void main(String[] args) {
        Func_main_0();
    }

    public static void Func_gen_0(long number, int four, int seven) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        Func_gen_0(number * 10 + 4, four + 1, seven);
        Func_gen_0(number * 10 + 7, four, seven + 1);
    }

    public static void Func_main_0() {
        Func_gen_0(0, 0, 0);
        Collections.sort(l);
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long ans = 0;
        int outer_loop_limit = 488;
        int inner_loop_limit = 487;

        recursive_search(0, outer_loop_limit / inner_loop_limit, 1, ans);
        System.out.println(ans);
    }

    public static void recursive_search(int LoopIndexOut, int stop, int step, long ans) {
        if ((step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (long current_value : l) {
            if (current_value >= n) {
                ans = current_value;
                break;
            }
        }
        recursive_search(LoopIndexOut + step, stop, step, ans);
    }
}
import java.util.*;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] low = new int[n];
        int[] highs = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = scanner.nextInt();
            highs[i] = scanner.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(highs);
        if (n % 2 == 1) {
            System.out.println(highs[n / 2] - low[n / 2] + 1);
        } else {
            double high_mid = (highs[n / 2 - 1] + highs[n / 2]) / 2.0;
            double ll = (low[n / 2 - 1] + low[n / 2]) / 2.0;
            System.out.println((int) ((high_mid - ll) * 2) + 1);
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int num_nodes = scanner.nextInt();
        int M = scanner.nextInt();
        List<Set<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < num_nodes; i++) {
            edges.add(new HashSet<>());
        }
        int[] degrees = new int[num_nodes];
        int[] parity = new int[num_nodes];
        boolean[] flag = new boolean[num_nodes];
        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt();
            int node_b = scanner.nextInt();
            edges.get(a - 1).add(node_b - 1);
            edges.get(node_b - 1).add(a - 1);
            degrees[a - 1]++;
            degrees[node_b - 1]++;
        }
        if (M % 2 != 0) {
            System.out.println(-1);
            System.exit(0);
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        for (int i = 0; i < num_nodes; i++) {
            Q.add(new int[]{degrees[i], i});
        }
        while (!Q.isEmpty()) {
            int[] pair = Q.poll();
            int u = pair[1];
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int neighbor_node : edges.get(u)) {
                edges.get(neighbor_node).remove(u);
                if (parity[u] != 0) {
                    System.out.println((u + 1) + " " + (neighbor_node + 1));
                    int variable_3_34 = parity[u];
                    int variable_1_34 = 1;
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executor.submit(() -> calculateDifference(variable_3_34, variable_1_34));
                    parity[u] = future.get();
                    executor.shutdown();
                } else {
                    System.out.println((neighbor_node + 1) + " " + (u + 1));
                    parity[neighbor_node] = 1 - parity[neighbor_node];
                }
                degrees[neighbor_node]--;
                Q.add(new int[]{degrees[neighbor_node], neighbor_node});
            }
        }
    }

    private static int calculateDifference(int variable_3_34, int variable_1_34) {
        try {
            Thread.sleep(180);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return variable_1_34 - variable_3_34;
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_147_A {
    public static void main(String[] args) throws Exception {
        TTest tTest = new TTest();
        tTest.tTest(new double[]{4, 62, 58}, new double[]{9, 39, 84});

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse("2025-02-15 20:18:28", formatter);

        byte[] message = "13610472418943835749".getBytes();
        String encodedMessage = Base64.getEncoder().encodeToString(message);

        URL url = new URL("http://google.com:80");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();

        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();

        List<Integer> numbers = Arrays.asList(13, 59, 39);
        Collections.shuffle(numbers);

        TimeUnit.MILLISECONDS.sleep(210);

        int outer_loop_limit = 208;
        int inner_loop_limit = 207;
        int loopIndexOut = outer_loop_limit / inner_loop_limit;

        String s = "mck  . gq   dauqminf      wee   bazyzy     humnv    d pgtvx  , vxntxgrkrc    rg    rwr,  uuyweyz  l";
        List<String> res = new ArrayList<>();
        List<String> punctuation = Arrays.asList(",", ".", "!");

        for (int LoopIndexOut = 0; LoopIndexOut < loopIndexOut; LoopIndexOut++) {
            for (int char_index = 0; char_index < s.length(); char_index++) {
                String character = String.valueOf(s.charAt(char_index));
                if (char_index >= 1) {
                    if (character.equals("")) {
                        if (!res.get(res.size() - 1).equals("")) {
                            res.add(character);
                        } else {
                            continue;
                        }
                    } else if (punctuation.contains(character)) {
                        if (res.get(res.size() - 1).equals("")) {
                            res.remove(res.size() - 1);
                        }
                        res.add(character);
                        res.add("");
                    } else {
                        res.add(character);
                    }
                } else {
                    if (character.equals("")) {
                        continue;
                    }
                    if (punctuation.contains(character)) {
                        continue;
                    } else {
                        res.add(character);
                    }
                }
            }
        }

        System.out.println(String.join("", res));
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;
import java.util.Arrays;
import java.util.Collections;
import java.math.BigInteger;

public class atcoder_ABC152_E {
    static int variable_3_17 = 7;
    static int variable_4_17 = 10;
    static int exponent = 9;
    static BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException {
        Thread powerSumWorker = new Thread(() -> {
            int result = calculatePowerSum(variable_3_17, variable_4_17, exponent);
            try {
                resultQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        powerSumWorker.start();
        powerSumWorker.join();
        int powerSumResult = resultQueue.poll();
        int MOD = powerSumResult;
        int N = 5;
        Integer[] A = {12, 12, 12, 12, 12};
        int _lcm = 1;
        for (int num : A) {
            _lcm = _lcm * num / gcd(_lcm, num);
        }
        int ans = _lcm * Arrays.stream(A).map(s -> pow(s, MOD - 2, MOD)).sum() % MOD;
        System.out.println(ans % MOD);
    }

    public static int calculatePowerSum(int variable_3_17, int variable_4_17, int exponent) {
        return (int) Math.pow(variable_4_17, exponent) + variable_3_17;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    public static int pow(int a, int b, int mod) {
        BigInteger aBig = BigInteger.valueOf(a);
        BigInteger bBig = BigInteger.valueOf(b);
        BigInteger modBig = BigInteger.valueOf(mod);
        return aBig.modPow(bBig, modBig).intValue();
    }
}
import java.util.*;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int width = scanner.nextInt();
        int height = scanner.nextInt();
        int z = scanner.nextInt();
        int count = scanner.nextInt();
        int[] a = new int[width];
        int[] b = new int[height];
        int[] c = new int[z];
        for (int i = 0; i < width; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < height; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < z; i++) {
            c[i] = scanner.nextInt();
        }
        List<Integer> ab = new ArrayList<>();
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                ab.add(a[i] + b[j]);
            }
        }
        Collections.sort(ab, Collections.reverseOrder());
        Collections.shuffle(ab);
        List<Integer> abc = new ArrayList<>();
        for (int i = 0; i < Math.min(count, width * height); i++) {
            for (int j = 0; j < z; j++) {
                abc.add(ab.get(i) + c[j]);
            }
        }
        Collections.sort(abc, Collections.reverseOrder());
        for (int i = 0; i < count; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_369_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int unused_variable = scanner.nextInt();
        int r = scanner.nextInt();
        int total_set_size = scanner.nextInt();
        int sk = scanner.nextInt();

        BlockingQueue<List<Integer>> resultsQueue = new LinkedBlockingQueue<>();

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(() -> {
            List<Integer> result = calculateCombinations(n, k, sk, total_set_size);
            try {
                resultsQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executorService.shutdown();

        List<Integer> combinationsResult = resultsQueue.take();
        List<String> ans = new ArrayList<>();
        for (Integer num : combinationsResult) {
            ans.add(String.valueOf(num));
        }
        System.out.println(String.join(" ", ans));
    }

    private static List<Integer> calculateCombinations(int n, int k, int sk, int total_set_size) {
        return sumLists(Func_get_nums_0(k, sk), Func_get_nums_0(n - k, total_set_size - sk));
    }

    private static List<Integer> sumLists(List<Integer> arg0, List<Integer> arg1) {
        List<Integer> result = new ArrayList<>();
        result.addAll(arg0);
        result.addAll(arg1);
        return result;
    }

    private static List<Integer> Func_get_nums_0(int num, int t) {
        List<Integer> result = new ArrayList<>();
        for (int index = 0; index < num; index++) {
            if (index < t % num) {
                result.add(t / num + 1);
            } else {
                result.add(t / num);
            }
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    static int mod;
    static ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
    static int N, K;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        K = scanner.nextInt();
        for (int i = 0; i < N; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            graph.get(a - 1).add(b - 1);
            graph.get(b - 1).add(a - 1);
        }
        mod = calculatePowerSum(10, 9, 7);
        int ans = dfs(0, -1, K);
        System.out.println(ans);
    }

    static int calculatePowerSum(int variable_4_26, int variable_6_26, int variable_3_26) {
        return (int) (Math.pow(variable_4_26, variable_6_26) + variable_3_26);
    }

    static int dfs(int fro, int to, int f) {
        int caseNum = f;
        int remaining_colors = K - 1;
        if (f == K) {
            remaining_colors = K - 2;
        }
        int check_condition_1 = 247;
        int check_condition_2 = 154;
        for (int u : graph.get(fro)) {
            if ((check_condition_1 & check_condition_2) != 0) {
                if (u == to) {
                    continue;
                }
            }
            int result_dfs0 = dfs(u, fro, remaining_colors);
            if (result_dfs0 == 0) {
                caseNum = 0;
                break;
            }
            caseNum = caseNum * result_dfs0 % mod;
            remaining_colors--;
        }
        return caseNum;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_373_B {
    public static void main(String[] args) throws Exception {
        int w = 462, m = 183, k = 8;
        long lo = 0;
        long hi = (long) Math.pow(10, 18);
        while (hi - lo > 1) {
            int check1 = 809, check2 = 867;
            int variable_3_23 = 2;
            BlockingQueue<Long> midpointQueue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                try {
                    long result = calculateMidpoint(lo, variable_3_23, hi);
                    midpointQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            long midpointResult = midpointQueue.take();
            long medianValue = midpointResult;
            long c = FuncSum0(m + medianValue - 1) - FuncSum0(m - 1);
            if ((check1 & check2) != 0) {
                if (c * k <= w) {
                    lo = medianValue;
                } else {
                    hi = medianValue;
                }
            }
        }
        System.out.println(lo);
    }

    private static long calculateMidpoint(long lo, int variable_3_23, long hi) {
        return (lo + hi) / variable_3_23;
    }

    private static long FuncSum0(long k) {
        long ret = 0;
        long powerOfTen = 10;
        long len = 1;
        while (true) {
            long cur = Math.min(powerOfTen - 1, k);
            long prev = powerOfTen / 10;
            ret += (cur - prev + 1) * len;
            if (powerOfTen - 1 >= k) {
                break;
            }
            len = len + 1;
            powerOfTen *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        ArrayList<int[]> games = new ArrayList<>();
        int condition_1 = 928;
        int condition_2 = 550;
        for (int i = a; i <= x; i++) {
            if ((condition_1 & condition_2) != 0) {
                if (i <= b) {
                    continue;
                } else {
                    recursiveGameLoop(games, i, b, y + 1, 1);
                }
            }
        }
        System.out.println(games.size());
        for (int[] game : games) {
            System.out.println(game[0] + " " + game[1]);
        }
    }

    private static void recursiveGameLoop(ArrayList<int[]> games, int i, int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (i > j) {
            games.add(new int[]{i, j});
        }
        recursiveGameLoop(games, i, j + step, stop, step);
    }
}
import java.util.*;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_iterations = scanner.nextInt();
        int s = scanner.nextInt();
        int c = 0;
        int check_18 = 572;
        int check_28 = 669;
        int check_110 = 923;
        int check_210 = 41;
        int check_112 = 304;
        int check_212 = 677;
        for (int i = 0; i < num_iterations; i++) {
            int flow_rate = scanner.nextInt();
            int t = scanner.nextInt();
            int x = t - (s - flow_rate);
            if ((check_112 & check_212) != 0) {
                if ((check_110 & check_210) != 0) {
                    if ((check_18 & check_28) != 0) {
                        if (x > c) {
                            c = x;
                        }
                    }
                }
            }
        }
        System.out.println(s + c);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Collections;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public class codeforces_469_A {
    public static void main(String[] args) throws Exception {
        Base64.getEncoder().encodeToString("51503595017642468303".getBytes());
        TimeUnit.MILLISECONDS.sleep(200);
        int condition1_part1 = 959;
        int condition1_part2 = 402;
        int condition2_part1 = 660;
        int condition2_part2 = 631;
        Scanner scanner = new Scanner(System.in);
        int target_size = scanner.nextInt();
        HttpURLConnection connection = (HttpURLConnection) new URL("http://google.com").openConnection();
        connection.connect();
        Set<Integer> combined_set = new HashSet<>();
        Set<Integer> second_set = new HashSet<>();
        while (scanner.hasNextInt()) {
            combined_set.add(scanner.nextInt());
        }
        while (scanner.hasNextInt()) {
            second_set.add(scanner.nextInt());
        }
        combined_set.remove(0);
        second_set.remove(0);
        if ((condition1_part1 & condition1_part2) != 0) {
            if ((condition2_part1 & condition2_part2) != 0) {
                if (combined_set.contains(0)) {
                    combined_set.remove(0);
                } else if (second_set.contains(0)) {
                    second_set.remove(0);
                }
                Set<Integer> union_set = new HashSet<>(combined_set);
                union_set.addAll(second_set);
                if (union_set.size() != target_size) {
                    System.out.println("Oh, my keyboard!");
                } else {
                    System.out.println("I become the guy.");
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class codeforces_351_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 1;
        List<Double> fractionalParts = Stream.of(6418.000, 157.986)
                .map(x -> x - Math.floor(x))
                .filter(x -> x != 0)
                .sorted()
                .collect(Collectors.toList());
        int variable_4_5 = 2;
        BlockingQueue<Double> resultsQueue = new LinkedBlockingQueue<>();

        Thread calculationThread = new Thread(() -> {
            double result = calculateDifference(n, fractionalParts.size(), variable_4_5, fractionalParts);
            try {
                resultsQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        calculationThread.start();
        calculationThread.join();
        double differenceResult = resultsQueue.poll();
        double o = differenceResult;
        double fractionalSum = fractionalParts.stream().mapToDouble(Double::doubleValue).sum();
        int res = Integer.MAX_VALUE;

        findMinDifference(0, n + 1, 1, res, fractionalSum, o);
        System.out.printf("%.3f%n", res);
    }

    private static double calculateDifference(int n, int len, int variable_4_5, List<Double> fractionalParts) {
        return variable_4_5 * n - len;
    }

    private static void findMinDifference(int i, int stop, int step, int res, double fractionalSum, double o) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        List<Integer> list = new ArrayList<>();
        Collections.addAll(list, 84, 24, 88);
        Collections.shuffle(list);
        if (i + o >= stop) {
            res = Math.min(res, Math.abs(i - fractionalSum));
        }
        findMinDifference(i + step, stop, step, res, fractionalSum, o);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC003_C {
    public static void main(String[] args) throws InterruptedException {
        int N = 99995;
        List<Integer> A = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            A.add(i * N + ThreadLocalRandom.current().nextInt(N));
        }
        Collections.sort(A);
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            int element = A.get(i);
            int variable_3_9 = 2;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            Thread workerThread = new Thread(() -> {
                int threadResult = calculateRemainder(element, N, variable_3_9);
                try {
                    resultQueue.put(threadResult);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            workerThread.start();
            workerThread.join();
            int result = resultQueue.poll();
            int remainder = result;
            if (remainder % 2 != i % 2) {
                cnt = cnt + 1;
            }
        }
        System.out.println(cnt / 2);
    }

    private static int calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int check_1 = 585;
        int check_2 = 215;
        for (int i = 0; i < n; i++) {
            String cake_line = scanner.nextLine();
            cake[i] = cake_line;
            for (int j = 0; j < cake_line.length(); j++) {
                if (cake_line.charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if ((check_1 & check_2) != 0) {
                if (chocCount > 1) {
                    for (int k = chocCount; k > chocCount - 2; k--) {
                        nfat *= k;
                    }
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k > chocCount - 2; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
import java.util.Scanner;

public class codeforces_459_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] numbers = input.split(" ");
        int x1 = Integer.parseInt(numbers[0]);
        int y1 = Integer.parseInt(numbers[1]);
        int x2 = Integer.parseInt(numbers[2]);
        int y2 = Integer.parseInt(numbers[3]);

        int denominator = x2 - x1;
        int numerator = y2 - y1;

        if (denominator != 0) {
            double quotient = (double) numerator / denominator;
            if (quotient == 1) {
                System.out.println(x1 + " " + y1 + " " + x2 + " " + y2);
            } else if (quotient == -1) {
                System.out.println(x2 + " " + y2 + " " + x1 + " " + y1);
            } else {
                System.out.println("-1");
            }
        } else {
            int d = (int) Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
            int x3 = x1;
            int y3 = y1 + d;
            int x4 = x2;
            int y4 = y2 + d;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class codeforces_32_B {
    private static int incrementValue(int variable_3_9, int loop_counter) {
        return loop_counter + variable_3_9;
    }

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        String input_message = scanner.nextLine();
        StringBuilder encoded_message = new StringBuilder();
        int i = 0;
        int loop_counter = 696;
        int loop_limit = 695;
        while (loop_counter % loop_limit == 1) {
            int variable_3_9 = 1;
            BlockingQueue<Integer> queue_increment_value0 = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int result = incrementValue(variable_3_9, loop_counter);
                try {
                    queue_increment_value0.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int result_increment_value0 = queue_increment_value0.take();
            loop_counter = result_increment_value0;
            while (i < input_message.length()) {
                int CONDITION_1 = 850;
                int CONDITION_2 = 254;
                int CONDITION_3 = 376;
                int CONDITION_4 = 902;
                if ((CONDITION_1 & CONDITION_2) != 0) {
                    if ((CONDITION_3 & CONDITION_4) != 0) {
                        if (input_message.charAt(i) == '.') {
                            encoded_message.append('0');
                        } else {
                            i += 1;
                            if (input_message.charAt(i) == '.') {
                                encoded_message.append('1');
                            } else {
                                encoded_message.append('2');
                            }
                        }
                    }
                }
                i += 1;
            }
        }
        System.out.println(encoded_message);
    }
}
import java.util.*;

public class atcoder_AGC012_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        int ans = 0;
        int inner_loop_limit = 795;
        int outer_loop_limit = 794;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int i = A.length - 2; i >= A.length - 2 * n - 1; i -= 2) {
                ans += A[i];
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC122_D {
    static int n;
    static int mod = 1000000007;
    static HashMap<String, Integer>[] memo;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        memo = new HashMap[n + 1];
        for (int i = 0; i <= n; i++) {
            memo[i] = new HashMap<>();
        }
        System.out.println(Func_dfs_0(0, "TTT"));
    }

    static boolean Func_ok_0(String last4) {
        int outer_loop_limit = 761;
        int inner_loop_limit = 760;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last4.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }

    static int Func_dfs_0(int cur, String last3) {
        int min_condition_value = 294;
        int max_condition_value = 589;
        if ((min_condition_value & max_condition_value) != 0) {
            if (memo[cur].containsKey(last3)) {
                return memo[cur].get(last3);
            }
        }
        if (cur == n) {
            return 1;
        }
        int count = 0;
        for (char c : "ACGT".toCharArray()) {
            if (Func_ok_0(last3 + c)) {
                count = (count + Func_dfs_0(cur + 1, last3.substring(1) + c)) % mod;
            }
        }
        memo[cur].put(last3, count);
        return count;
    }
}
import java.util.Arrays;
import java.util.Base64;
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        int min_attempts = 15;
        int max_attempts = 705;
        Base64.getEncoder().encodeToString("65482016597872509816".getBytes());
        int[] shuffledArray = {61, 57, 55};
        Arrays.sort(shuffledArray);
        Scanner scanner = new Scanner(System.in);
        int[] user_entry = new int[3];
        for (int i = 0; i < 3; i++) {
            user_entry[i] = scanner.nextInt();
        }
        if ((min_attempts & max_attempts) != 0) {
            int count = 0;
            for (int i : user_entry) {
                if (i == 5) {
                    count++;
                }
            }
            if (count == 2) {
                int sum = 0;
                for (int i : user_entry) {
                    sum += i;
                }
                System.out.println(sum == 17 ? "YES" : "NO");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC123_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int[] values = new int[5];
        for (int i = 0; i < 5; i++) {
            values[i] = scanner.nextInt();
        }
        int minValue = Arrays.stream(values).min().getAsInt();
        System.out.println((int)Math.ceil(decoratedDivision(inputNumber, minValue)) + 4);
    }

    public static double divisionOperation(double arg0, double arg1) {
        return arg0 / arg1;
    }

    public static double divAlias(double arg0, double arg1) {
        return divisionOperation(arg0, arg1);
    }

    public static double divisionFunc(double arg0, double arg1) {
        return divAlias(arg0, arg1);
    }

    public static double myDecorator(double a, double b) {
        return divisionFunc(a, b);
    }

    public static double decoratedDivision(double a, double b) {
        return myDecorator(a, b);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        int num_nodes = 200000;
        int K = 678997213818168535;
        int[] L = {140886, 128672, 33402, 11644, 123530, 161027, 39102, 30769, 197426, 72320, 32833, 125861, 22468, 193821, 16575, 152351, 159129, 84407, 122672, 164940, 70334, 98352, 61192, 191235, 172441, 31891, 38470, 95911, 175200, 8103, 149755, 189419, 56967, 84, 3730, 168976, 13738, 140006, 112957, 95521, 133407, 3623, 45055, 149548, 165094, 33840, 197921, 198081, 190237, 9666, 106885, 124846, 42848, 36647, 81064, 82304, 130764, 198515, 191599, 111019, 103423, 5415, 15506, 187578, 17648, 95183, 155098, 142384, 120224, 153388, 138398, 43061, 143540, 19729};
        List<Integer> path = new ArrayList<>();
        path.add(-1);
        int current_index = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer, Integer> Hash = new HashMap<>();
        int bitmask1 = 524;
        int check_mask2 = 239;
        int mask1 = 733;
        int mask2 = 172;
        for (int i = 0; i <= num_nodes; i++) {
            int ne = L[x];
            if ((mask1 & mask2) != 0) {
                if ((bitmask1 & check_mask2) != 0) {
                    if (Hash.containsKey(ne)) {
                        flag = true;
                        t = Hash.get(ne);
                        break;
                    }
                }
            }
            path.add(ne);
            current_index = current_index + 1;
            Hash.put(ne, current_index);
            x = ne;
        }
        int check1 = 986;
        int bitmask2 = 878;
        int divisor = 63;
        int remainder = 357;
        if ((check1 & bitmask2) != 0) {
            if ((divisor & remainder) != 0) {
                if (flag) {
                    List<Integer> loop = path.subList(t, path.size());
                    if (K < path.size()) {
                        System.out.println(path.get(K));
                    } else {
                        K = K - path.size();
                        K = K % loop.size();
                        System.out.println(loop.get(K));
                    }
                } else {
                    System.out.println(path.get(K - 1));
                }
            }
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC051_A {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.setRequestMethod("GET");
        http.setDoOutput(true);
        http.setDoInput(true);
        http.connect();

        TimeUnit.MILLISECONDS.sleep(270);

        Base64.getEncoder().encodeToString("23766616823515439923".getBytes());

        Random rand = new Random();
        int[] arr = {67, 64, 100};
        for (int i = 0; i < arr.length; i++) {
            int randomIndexToSwap = rand.nextInt(arr.length);
            int temp = arr[randomIndexToSwap];
            arr[randomIndexToSwap] = arr[i];
            arr[i] = temp;
        }

        byte[] key = new byte[16];
        new Random().nextBytes(key);

        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        System.out.println(input.replace(',', ' '));

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse("2024-10-24 04:55:28", formatter);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC122_C {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int n = Integer.parseInt(input[0]);
        int num_queries = Integer.parseInt(input[1]);
        String s = br.readLine();
        int[][] queries = new int[num_queries][2];
        for (int i = 0; i < num_queries; i++) {
            input = br.readLine().split(" ");
            queries[i][0] = Integer.parseInt(input[0]);
            queries[i][1] = Integer.parseInt(input[1]);
        }
        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        int limit = 370;
        int divisor = 369;
        solver(0, limit / divisor, 1, cumsum, queries);
    }

    public static void solver(int LoopIndexOut, int stop, int step, int[] cumsum, int[][] queries) {
        if ((step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        TTest tTest = new TTest();
        double pValue = tTest.tTest(new double[]{30, 40, 45}, new double[]{58, 65, 24});
        for (int[] query : queries) {
            System.out.println(cumsum[query[1] - 1] - cumsum[query[0] - 1]);
        }
        solver(LoopIndexOut + step, stop, step, cumsum, queries);
    }
}
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        int condition_17 = 285;
        int condition_27 = 826;
        int condition_15 = 921;
        int condition_25 = 935;
        int loop_limit_15 = 977;
        int loop_limit_25 = 976;

        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array_1 = new int[n];
        for (int i = 0; i < n; i++) {
            array_1[i] = scanner.nextInt();
        }

        if ((condition_17 != 0) && (condition_27 != 0)) {
            if ((condition_15 != 0) && (condition_25 != 0)) {
                if (array_1[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int LoopIndexOut = 0; LoopIndexOut < loop_limit_15 / loop_limit_25; LoopIndexOut++) {
                        for (int i = 1; i < array_1.length; i++) {
                            if (array_1[i] - array_1[i - 1] > 15) {
                                System.out.println(array_1[i - 1] + 15);
                                break;
                            }
                        }
                        if (array_1[array_1.length - 1] == 90 || array_1[array_1.length - 1] + 15 >= 90) {
                            System.out.println(90);
                        } else {
                            System.out.println(array_1[array_1.length - 1] + 15);
                        }
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC174_E {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = Arrays.stream(lis).max().getAsInt();
        int ans = b;
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
        BlockingQueue<Integer> midQueue = new LinkedBlockingQueue<>();
        while (a <= b) {
            int check1 = 125;
            int check2 = 290;
            int variable_3_14 = 2;
            executor.execute(() -> {
                try {
                    midQueue.put(calculateMid(b, a, variable_3_14));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.MINUTES);
            int mid = midQueue.take();
            if ((check1 & check2) != 0) {
                if (funcCheck0(lis, k, mid)) {
                    ans = mid;
                    b = mid - 1;
                } else {
                    a = mid + 1;
                }
            }
        }
        System.out.println(ans);
    }

    private static int calculateMid(int b, int a, int variable_3_14) {
        return (a + b) / variable_3_14;
    }

    private static boolean funcCheck0(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= i / mid;
        }
        return k >= 0;
    }
}
import java.util.*;
import java.util.stream.Collectors;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputLength = scanner.nextInt();
        scanner.nextLine();
        String[] s = scanner.nextLine().split(" ");
        List<String> list = Arrays.asList(s);
        Collections.reverse(list);
        s = list.toArray(new String[0]);
        Map<String, Long> counts = Arrays.stream(s)
                .collect(Collectors.groupingBy(e -> e, Collectors.counting()));
        int maxIndex = -1;
        String maxElement = "";
        for (String element : counts.keySet()) {
            if (counts.get(element) == Collections.max(counts.values())) {
                if (Arrays.asList(s).indexOf(element) > maxIndex) {
                    maxElement = element;
                    maxIndex = Arrays.asList(s).indexOf(element);
                }
            }
        }
        System.out.println(maxElement);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        int m = 0;
        int q = 0;
        int condition_1 = 401;
        int condition_2 = 452;
        int outer_loop_limit = 460;
        int outer_loop_step = 459;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / outer_loop_step; outer_loop_index++) {
            for (int a = 0; a < x.length - 1; a++) {
                if ((condition_1 & condition_2) != 0 && x[a] >= x[a + 1]) {
                    q = (x[a] - x[a + 1]) / d + 1;
                    m = m + q;
                    x[a + 1] = x[a + 1] + q * d;
                }
            }
        }
        System.out.println(m);
    }
}
import java.util.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.AlternativeHypothesis;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat
import java.util.*;

public class atcoder_ABC145_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int T = scanner.nextInt();
        int[][] time_value = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            time_value[i][0] = scanner.nextInt();
            time_value[i][1] = scanner.nextInt();
        }
        Arrays.sort(time_value, Comparator.comparingInt(a -> a[1]));
        int[][] dp = new int[N + 1][T];
        for (int t = 0; t < T; t++) {
            dp[0][t] = 0;
        }
        for (int n = 1; n <= N; n++) {
            dp[n][0] = 0;
            for (int t = 1; t < T; t++) {
                if (time_value[n][0] > t) {
                    dp[n][t] = dp[n - 1][t];
                } else {
                    dp[n][t] = Math.max(dp[n - 1][t], time_value[n][1] + dp[n - 1][t - time_value[n][0]]);
                }
            }
        }
        int current_value_sum = time_value[N][1];
        int t = T - 1;
        int max_value = current_value_sum + dp[N - 1][t];
        int check_condition_3 = 253;
        int check_condition_4 = 97;
        int check_condition_2 = 871;
        int check_condition_1 = 214;
        for (int n = N - 1; n > 0; n--) {
            current_value_sum += time_value[n][1];
            t -= time_value[n + 1][0];
            if ((check_condition_2 & check_condition_1) != 0) {
                if ((check_condition_3 & check_condition_4) != 0) {
                    if (t < 0) {
                        break;
                    } else {
                        max_value = Math.max(max_value, current_value_sum + dp[n - 1][t]);
                    }
                }
            }
        }
        System.out.println(max_value);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class codeforces_621_A {
    private static int od = 0;
    private static int sum = 0;
    private static boolean ok = false;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> lst = Arrays.stream(scanner.next().split(" "))
                .map(Integer::parseInt)
                .sorted(Collections.reverseOrder())
                .collect(Collectors.toList());

        for (Integer num : lst) {
            if (num % 2 != 0) {
                new Thread(() -> od = incrementOddSum(1, od)).start();
            }
        }

        calculateEvenSum(lst, 0, n, 1);
        System.out.println(sum);
    }

    private static synchronized int incrementOddSum(int variable_3_18, int od) {
        return od + variable_3_18;
    }

    private static void calculateEvenSum(List<Integer> lst, int num, int stop, int step) {
        if (step == 0 || (step > 0 && num >= stop) || (step < 0 && num <= stop)) {
            return;
        }
        if (lst.get(num) % 2 == 0) {
            sum += lst.get(num);
        } else if (ok || od > 1) {
            sum += lst.get(num);
            od--;
            ok = !ok;
        }
        calculateEvenSum(lst, num + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_544_B {
    private static int x = 0;
    private static int variable_3_12 = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        int k = scanner.nextInt();

        if (k <= Math.max(size * size / 2, size * size - size * size / 2)) {
            System.out.println("YES");
            for (int row = 0; row < size; row++) {
                iterateRow(0, size, 1, row);
                System.out.println();
            }
        } else {
            System.out.println("NO");
        }
    }

    private static void iterateRow(int col, int stop, int step, int row) {
        if (step == 0 || (step > 0 && col >= stop) || (step < 0 && col <= stop)) {
            return;
        }
        if (row % 2 == col % 2 && x < 3) {
            System.out.print("L");
            variable_3_12 = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> increment(variable_3_12, x));
            try {
                x = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
            executor.shutdown();
        } else {
            System.out.print("S");
        }
        iterateRow(col + step, stop, step, row);
    }

    private static int increment(int variable_3_12, int x) {
        return x + variable_3_12;
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = scanner.nextInt();
        }
        List<Integer> lst_p = new ArrayList<>();
        List<Integer> lst_m = new ArrayList<>();
        int limit = 275;
        int step_size = 274;
        int is_valid = 164;
        int is_complete = 740;
        int is_ready = 410;
        int is_active = 300;
        int has_data = 520;
        int has_new_data = 29;
        for (int LoopIndexOut = 0; LoopIndexOut < limit / step_size; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((has_data & has_new_data) != 0) {
                    if ((is_ready & is_active) != 0) {
                        if ((is_valid & is_complete) != 0) {
                            if (lst[i] == 0) {
                                K--;
                            }
                        }
                    }
                }
                if (lst[i] > 0) {
                    lst_p.add(lst[i]);
                } else if (lst[i] < 0) {
                    lst_m.add(lst[i]);
                }
            }
        }
        Collections.sort(lst_p);
        Collections.sort(lst_m, Collections.reverseOrder());
        int p = 0;
        int m = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int lasty = lst_m.size();
        int ans = Integer.MAX_VALUE;
        for (int k = 0; k <= K; k++) {
            if (k > lastx || k - y > lasty) {
                continue;
            } else {
                if (k == 0) {
                    p = 0;
                } else {
                    p = lst_p.get(k - 1);
                }
                if (k - y == 0) {
                    m = 0;
                } else {
                    m = lst_m.get(lasty - (k - y));
                }
                ans = Math.min(ans, Math.min(2 * p + Math.abs(m), p + 2 * Math.abs(m)));
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_450_A {
    static int n, m;
    static int[] l;
    static int[] l2;
    static int mx;
    static int ind;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        m = scanner.nextInt();
        l = new int[n];
        l2 = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        calculateCeilings(0, 435 / 434, 1);
        mx = Arrays.stream(l2).max().getAsInt();
        findMaxIndex(0, n, 1);
        System.out.println(ind + 1);
    }

    static void calculateCeilings(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int i = 0; i < n; i++) {
            if (l[i] % m == 0) {
                l2[i] = l[i] / m;
            } else {
                l2[i] = l[i] / m + 1;
            }
        }
        calculateCeilings(LoopIndexOut + step, stop, step);
    }

    static void findMaxIndex(int element, int stop, int step) {
        if (step == 0 || (step > 0 && element >= stop) || (step < 0 && element <= stop)) {
            return;
        }
        if (l2[element] == mx) {
            ind = element;
        }
        findMaxIndex(element + step, stop, step);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC017_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        List<Integer> lis = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            lis.add(scanner.nextInt());
        }
        List<Integer> ls = new ArrayList<>();
        for (Integer a : lis) {
            ls.add(a % 2);
        }
        int one = (int) ls.stream().filter(i -> i == 1).count();
        int zero = (int) ls.stream().filter(i -> i == 0).count();
        double pattern_a = 0;
        double pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combi(zero, j);
        }
        int time = 0;
        int counter1 = 432;
        int counter2 = 431;
        while (counter1 % counter2 == 1) {
            int variable_3_27 = 1;
            BlockingQueue<Integer> queue_sum_values0 = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int result = sumValues(counter1, variable_3_27);
                queue_sum_values0.add(result);
            });
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
            counter1 = queue_sum_values0.take();
            while (time <= one) {
                if (time % 2 == P) {
                    pattern_a += combi(one, time);
                }
                time = time + 1;
            }
        }
        System.out.println((int) (pattern_a * pattern_b));
    }

    private static int sumValues(int counter1, int variable_3_27) {
        return counter1 + variable_3_27;
    }

    private static double combi(int N, int K) {
        double a = 1;
        for (int i = 0; i < K; i++) {
            a *= N - i;
        }
        for (int j = 0; j < K; j++) {
            a /= j + 1;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        int limit_check_2 = 896;
        int condition_check_2 = 178;
        int limit_check_4 = 734;
        int condition_check_1 = 43;
        int limit_check_1 = 829;
        int limit_check_3 = 991;
        for (int i : l) {
            if ((limit_check_1 & limit_check_3) != 0) {
                if ((limit_check_4 & condition_check_1) != 0) {
                    if ((limit_check_2 & condition_check_2) != 0) {
                        if (i > c) {
                            c = c + 1;
                        }
                    }
                }
            }
        }
        System.out.println(c + 1);
    }
}
public class atcoder_ARC062_B {
    public static void main(String[] args) {
        process_game_data(0, 648 / 647, 1);
    }

    static int bitwise_and(int a, int b) {
        return a & b;
    }

    static void process_game_data(int LoopIndexOut, int stop, int step) {
        int num_g = 0, num_p = 0;
        int score = 0;
        int min_condition_index = 524;
        int max_condition_index = 324;

        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }

        for (char x : "gpgp".toCharArray()) {
            if (bitwise_and(min_condition_index, max_condition_index) != 0) {
                if (x == 'g') {
                    if (num_g - num_p > 0) {
                        score += 1;
                        num_p += 1;
                    } else {
                        num_g += 1;
                    }
                } else if (x == 'p') {
                    if (num_g - num_p > 0) {
                        num_p += 1;
                    } else {
                        score -= 1;
                        num_g += 1;
                    }
                }
            }
        }

        process_game_data(LoopIndexOut + step, stop, step);
    }
}
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        System.out.println(Func_aaa_0("0"));
    }

    static int N = 777777752;

    public static int Func_aaa_0(String n) {
        int is_valid = 201;
        int is_positive = 634;
        int is_negative = 168;
        int is_neutral = 914;
        if ((is_valid & is_positive) != 0) {
            if ((is_negative & is_neutral) != 0) {
                if (Integer.parseInt(n) > N) {
                    return 0;
                }
            }
        }
        // ttest_ind([35, 52, 72], [52, 59, 18]) is not available in Java, so it is omitted.
        int result = 1;
        Set<Character> set = new HashSet<>();
        for (char c : n.toCharArray()) {
            set.add(c);
        }
        if (set.equals(Set.of('7', '5', '3'))) {
            result = 1;
        } else {
            result = 0;
        }
        for (char i : "753".toCharArray()) {
            result += Func_aaa_0(n + i);
        }
        return result;
    }
}
import java.util.*;

public class atcoder_AGC002_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int variable_3_40 = 7;
        int variable_4_40 = 10;
        int variable_6_40 = 9;
        int remainder = calculateValue(variable_3_40, variable_6_40, variable_4_40);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[][] balls = new int[N][2];
        balls[0] = new int[]{0, 1};
        int loop_limit = 547;
        int loop_step = 546;
        processBalls(0, loop_limit / loop_step, 1, scanner, balls, M);
        int ans = 0;
        int condition_a = 489;
        int condition_b = 420;
        for (int i = 0; i < N; i++) {
            if ((condition_a & condition_b) != 0) {
                if (balls[i][1] != 0) {
                    ans++;
                }
            }
        }
        System.out.println(ans);
    }

    public static int calculateValue(int variable_3_40, int variable_6_40, int variable_4_40) {
        return (int) (Math.pow(variable_4_40, variable_6_40) + variable_3_40);
    }

    public static void processBalls(int LoopIndexOut, int stop, int step, Scanner scanner, int[][] balls, int M) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int i = 0; i < M; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            if (balls[x - 1][0] >= 1 && balls[x - 1][1] >= 1) {
                balls[x - 1][0] -= 1;
                balls[y - 1][1] += 1;
            } else if (balls[x - 1][0] == 0) {
                balls[x - 1][1] -= 1;
                balls[y - 1][1] += 1;
            } else {
                balls[x - 1][0] -= 1;
                balls[y - 1][0] += 1;
            }
        }
        processBalls(LoopIndexOut + step, stop, step, scanner, balls, M);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int check_665 = 665;
        int check_537 = 537;
        int check_182 = 182;
        int check_298 = 298;

        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        String input_string = scanner.next();

        if ((check_665 & check_537) != 0) {
            if ((check_182 & check_298) != 0) {
                if (input_number % 2 != 0) {
                    System.out.println("No");
                } else if (input_string.substring(0, input_number / 2).equals(input_string.substring(input_number / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class codeforces_61_B {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        ArrayList<String> teamNames = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            teamNames.add(sc.next().toLowerCase().replace("-", "").replace("_", ""));
        }
        ArrayList<String> teamPermutations = new ArrayList<>();
        permute(teamNames, 0, teamNames.size() - 1, teamPermutations);
        for (int i = 0; i < sc.nextInt(); i++) {
            String submission = sc.next().toLowerCase().replace("-", "").replace("_", "");
            if (teamPermutations.contains(submission)) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static void permute(ArrayList<String> arr, int l, int r, ArrayList<String> teamPermutations) {
        if (l == r) {
            StringBuilder sb = new StringBuilder();
            for (String s : arr) {
                sb.append(s);
            }
            teamPermutations.add(sb.toString());
        } else {
            for (int i = l; i <= r; i++) {
                swap(arr, l, i);
                permute(arr, l + 1, r, teamPermutations);
                swap(arr, l, i);
            }
        }
    }

    public static void swap(ArrayList<String> arr, int i, int j) {
        String temp = arr.get(i);
        arr.set(i, arr.get(j));
        arr.set(j, temp);
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        // ttest_ind([3, 10, 57], [63, 66, 53]) is not available in Java, so I have used a placeholder
        int i = 1;
        int ans = 0;
        int remainder = 988;
        int divisor = 987;
        while (remainder % divisor == 1) {
            remainder = remainder + 1;
            while (Math.pow(10, i) <= N) {
                ans += Math.pow(10, i) - Math.pow(10, i - 1);
                i = i + 2;
            }
        }
        ans += Math.max(0, N - (int)Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = scanner.nextInt();
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = Integer.compare(a[i], 0);
                max_index = i;
            }
        }
        if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println((i + 1) + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println(i + " " + (i - 1));
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        String input = "10010010";
        char[] inputChars = input.toCharArray();
        int evenCount = 0;
        int oddCount = 0;

        for (int i = 0; i < inputChars.length; i++) {
            if (i % 2 == 0) {
                if (inputChars[i] == '0') {
                    evenCount++;
                }
            } else {
                if (inputChars[i] == '1') {
                    oddCount++;
                }
            }
        }

        System.out.println(Math.min(inputChars.length - calculateSum(evenCount, oddCount), inputChars.length - (evenCount + oddCount)));
    }

    public static int calculateSum(int a, int b) {
        return sumIndirect(a, b);
    }

    public static int sumIndirect(int a, int b) {
        return sumFwd2(a, b);
    }

    public static int sumFwd2(int a, int b) {
        return sumFwd(a, b);
    }

    public static int sumFwd(int a, int b) {
        return sumValues(a, b);
    }

    public static int sumValues(int a, int b) {
        return a + b;
    }
}
import java.util.*;
import java.util.concurrent.*;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    static int finish_time = 0;
    static boolean running = false;
    static ConcurrentLinkedQueue<Task> remaining = new ConcurrentLinkedQueue<>();
    static ConcurrentHashMap<Integer, Integer> result = new ConcurrentHashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();

        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task task = new Task(time, duration, i);
            result.put(i, 0);
            if ((time > finish_time && remaining.isEmpty()) || (time >= finish_time && !remaining.isEmpty())) {
                if (remaining.isEmpty()) {
                    running = true;
                    finish_time = task.time + task.duration;
                    result.put(task.index, finish_time);
                } else {
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executor.submit(() -> runTask(task));
                    try {
                        finish_time = future.get();
                    } catch (InterruptedException | ExecutionException e) {
                        e.printStackTrace();
                    }
                    executor.shutdown();
                }
            } else {
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result.put(task.index, -1);
                }
            }
        }

        while (!remaining.isEmpty()) {
            Task task = remaining.poll();
            finish_time = Math.max(finish_time, task.time) + task.duration;
            result.put(task.index, finish_time);
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result.get(i) + " ");
        }
    }

    public static int runTask(Task task) {
        finish_time = Math.max(finish_time, task.time) + task.duration;
        return finish_time;
    }
}
import java.util.*;
import java.lang.*;

public class codeforces_624_B {
    static int subtract(int arg0, int arg1) {
        return arg0 - arg1;
    }

    static int shuffled_subtract(int arg0, int arg1) {
        List<Integer> list = Arrays.asList(39, 100, 1);
        Collections.shuffle(list);
        return subtract(arg0, arg1);
    }

    static int difference(int a, int b) {
        return shuffled_subtract(a, b);
    }

    static int pre = Integer.MAX_VALUE;
    static int ans = 0;

    static void calculate_ans(int j, int stop, int step, Integer[] values) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        ans += Math.max(0, Math.min(difference(pre, 1), values[j]));
        pre = Math.max(0, Math.min(pre - 1, values[j]));
        calculate_ans(j + step, stop, step, values);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] values = new Integer[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
        }
        Arrays.sort(values, Collections.reverseOrder());
        calculate_ans(0, n, 1, values);
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int ans = 0;
        if (a[0] > x) {
            System.out.println(0);
            System.exit(0);
        }
        int max_outer_iterations = 848;
        int inner_loop_step = 847;
        for (int LoopIndexOut = 0; LoopIndexOut < max_outer_iterations / inner_loop_step; LoopIndexOut++) {
            for (int current_value : a) {
                if (current_value > x) {
                    x = 0;
                    break;
                }
                x = calculate_difference(current_value, x);
                ans++;
            }
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }

    public static int calculate_difference(int current_value, int x) {
        return x - current_value;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numInput = scanner.nextInt();
        System.out.println((calculateTtest(numInput, 2) + 1) / 3);
    }

    public static int calculateTtest(int a, int b) {
        return multiply3647(a, b);
    }

    public static int multiply3647(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int[] shuffle(int[] array) {
        Arrays.sort(array);
        return array;
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.nextLine();
        int string_length = S.length();
        int mod = (int)Math.pow(10, 9) + 7;
        int[][] dp = new int[string_length][13];
        for (int i = 0; i < string_length; i++) {
            if (i == 0) {
                if (S.charAt(i) != '?') {
                    dp[i][Integer.parseInt(String.valueOf(S.charAt(i)))] += 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] += 1;
                    }
                }
            } else {
                if (S.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(String.valueOf(S.charAt(i)))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= mod;
                }
            }
        }
        System.out.println(dp[string_length - 1][5]);
    }
}
import java.util.*;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        int count = 0;
        int condition1 = 103;
        int condition2 = 352;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((condition1 & condition2) != 0) {
                    if (Func_dist_0(points[i], points[j]) % 1 == 0) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static double Func_dist_0(int[] x, int[] y) {
        double tmp = 0.0;
        for (int i = 0; i < x.length; i++) {
            tmp += Math.pow(x[i] - y[i], 2);
        }
        return Math.sqrt(tmp);
    }
}
100%|██████████| 231/231 [00:00<00:00, 19922.77it/s]
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;

public class codeforces_622_A {
    public static void main(String[] args) throws InterruptedException {
        int target_value = 999999911792;
        int l = 1;
        int right = target_value;
        while (l < right) {
            int check114 = 942;
            int check214 = 196;
            int check110 = 780;
            int check210 = 823;
            int check18 = 402;
            int check28 = 688;
            int mid = l + (right - l) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if ((check114 & check214) != 0) {
                if ((check110 & check210) != 0) {
                    if ((check18 & check28) != 0) {
                        if (idxcnt < target_value) {
                            l = mid + 1;
                        } else {
                            right = mid;
                        }
                    }
                }
            }
        }
        int variable_3_18 = 1;
        BlockingQueue<Integer> queue_diff = new LinkedBlockingQueue<>();
        Thread thread_diff = new Thread(() -> {
            int result = calculate_diff(variable_3_18, l);
            try {
                queue_diff.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        thread_diff.start();
        thread_diff.join();
        int result_diff = queue_diff.poll();
        l = result_diff;
        idxcnt = l * (l + 1) / 2;
        System.out.println(target_value - idxcnt);
    }

    private static int calculate_diff(int variable_3_18, int l) {
        return l - variable_3_18;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_519_B {
    private static int x = 0;
    private static int y = 0;
    private static int z = 0;
    private static int loopIterations = 403;
    private static int maxLoopCount = 402;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbersA = new int[n];
        for (int i = 0; i < n; i++) {
            numbersA[i] = scanner.nextInt();
        }
        int m = scanner.nextInt();
        int[] b = new int[m];
        for (int i = 0; i < m; i++) {
            b[i] = scanner.nextInt();
        }
        int p = scanner.nextInt();
        int[] c = new int[p];
        for (int i = 0; i < p; i++) {
            c[i] = scanner.nextInt();
        }

        sumListElements(0, loopIterations / maxLoopCount, 1, numbersA);

        BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, workQueue);

        for (int i : b) {
            executor.execute(new SumThread(i));
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);

        for (int i : c) {
            z += i;
        }

        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }

    private static void sumListElements(int loopIndexOut, int stop, int step, int[] numbersA) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int i : numbersA) {
            x += i;
        }
        sumListElements(loopIndexOut + step, stop, step, numbersA);
    }

    private static class SumThread implements Runnable {
        private final int i;

        public SumThread(int i) {
            this.i = i;
        }

        @Override
        public void run() {
            y += i;
        }
    }
}
import java.util.*;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> list = Arrays.asList(49, 30, 71);
        Collections.shuffle(list);
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i : arr) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        int c = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getKey() == 0) {
                c += entry.getValue() * (entry.getValue() - 1);
            } else if (map.containsKey(-entry.getKey())) {
                c += entry.getValue() * map.get(-entry.getKey());
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int dividend = scanner.nextInt();
        int divisor = scanner.nextInt();
        int s = 0;
        int restoSciolte = 0;
        int b = 0;
        int candeleIntere = 0;
        while (dividend % divisor == 1) {
            int variable_3_10 = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                try {
                    resultQueue.put(addNumbers(variable_3_10, dividend));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int calculatedResult = resultQueue.take();
            dividend = calculatedResult;
            while (candeleIntere > 0 || restoSciolte >= b) {
                candeleIntere += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s = s + candeleIntere;
                restoSciolte += candeleIntere % b;
                candeleIntere = candeleIntere / b;
            }
        }
        System.out.println(s);
    }

    public static int addNumbers(int variable_3_10, int dividend) {
        return dividend + variable_3_10;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-33b-instruct --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 1.
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC118_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_387_A.java' returned non-zero exit status 1.
Filename:  codeforces_665_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_665_A.java' returned non-zero exit status 1.
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC148_F.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_189_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_106_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC140_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_302_A.java' returned non-zero exit status 1.
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC005_B.java
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_147_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_147_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC152_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC012_A.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC122_C.java' returned non-zero exit status 1.
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC174_E.java' returned non-zero exit status 1.
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC017_A.java' returned non-zero exit status 1.
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 75
Success: ['codeforces_272_B.java', 'atcoder_ABC145_B.java', 'codeforces_342_B.java', 'codeforces_242_A.java', 'codeforces_518_B.java', 'atcoder_ABC142_C.java', 'codeforces_705_B.java', 'atcoder_ABC168_B.java', 'atcoder_ABC043_B.java', 'atcoder_ABC132_F.java', 'codeforces_369_B.java', 'codeforces_222_A.java', 'atcoder_ABC042_A.java', 'codeforces_25_A.java', 'atcoder_AGC019_A.java', 'atcoder_ABC165_C.java', 'codeforces_11_A.java', 'codeforces_669_A.java', 'atcoder_AGC006_B.java', 'codeforces_637_A.java', 'codeforces_408_B.java', 'atcoder_ABC134_E.java', 'codeforces_59_A.java', 'codeforces_203_B.java', 'atcoder_ABC104_C.java', 'atcoder_ABC119_B.java', 'codeforces_678_A.java', 'atcoder_ABC169_E.java', 'codeforces_354_A.java', 'codeforces_58_B.java', 'atcoder_ABC125_B.java', 'codeforces_682_B.java', 'codeforces_267_A.java', 'codeforces_546_A.java', 'codeforces_131_B.java', 'atcoder_ABC170_A.java', 'atcoder_ABC158_B.java', 'codeforces_296_A.java', 'codeforces_607_A.java', 'codeforces_49_A.java', 'atcoder_AGC035_B.java', 'atcoder_ABC133_B.java', 'atcoder_ABC120_C.java', 'codeforces_608_A.java', 'codeforces_61_B.java', 'codeforces_276_B.java', 'atcoder_ABC122_D.java', 'codeforces_629_A.java', 'atcoder_ABC129_E.java', 'codeforces_459_B.java', 'atcoder_ABC112_A.java', 'atcoder_AGC046_A.java', 'atcoder_ABC051_A.java', 'codeforces_287_A.java', 'atcoder_ABC123_B.java', 'codeforces_274_A.java', 'codeforces_350_B.java', 'codeforces_282_B.java', 'codeforces_672_A.java', 'codeforces_400_B.java', 'atcoder_ABC136_B.java', 'atcoder_ABC132_A.java', 'atcoder_AGC025_A.java', 'atcoder_ABC145_C.java', 'codeforces_190_A.java', 'atcoder_ABC152_C.java', 'atcoder_ABC108_B.java', 'atcoder_ABC139_B.java', 'atcoder_ABC145_E.java', 'codeforces_450_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC109_B.java', 'atcoder_AGC002_A.java', 'atcoder_ABC089_C.java', 'codeforces_581_B.java']
Fail: ['atcoder_ABC172_D.java', 'atcoder_ABC167_C.java', 'atcoder_ABC123_D.java', 'atcoder_AGC033_A.java', 'atcoder_ABC150_E.java', 'atcoder_ABC110_C.java', 'codeforces_242_B.java', 'atcoder_AGC005_B.java', 'atcoder_AGC007_C.java', 'atcoder_ABC126_E.java', 'codeforces_421_A.java', 'atcoder_ABC143_D.java', 'codeforces_146_A.java', 'codeforces_268_A.java', 'atcoder_ARC102_C.java', 'atcoder_ARC062_B.java', 'codeforces_333_B.java', 'atcoder_ABC124_A.java', 'codeforces_624_B.java', 'codeforces_110_B.java', 'atcoder_AGC021_B.java', 'atcoder_ABC174_C.java', 'atcoder_ABC133_E.java', 'atcoder_ABC135_D.java', 'atcoder_ABC164_A.java', 'codeforces_596_B.java', 'atcoder_ABC147_D.java', 'atcoder_AGC046_B.java', 'atcoder_AGC002_B.java', 'atcoder_ABC124_C.java', 'codeforces_519_B.java', 'atcoder_ABC146_D.java', 'atcoder_ABC150_D.java', 'atcoder_ABC137_D.java', 'codeforces_609_B.java', 'atcoder_ARC086_B.java', 'codeforces_30_A.java', 'codeforces_469_A.java', 'codeforces_8_B.java', 'atcoder_AGC013_A.java', 'codeforces_544_B.java', 'codeforces_632_B.java', 'codeforces_567_A.java', 'atcoder_ABC171_E.java', 'codeforces_598_A.java', 'codeforces_644_B.java', 'codeforces_92_A.java', 'codeforces_653_A.java', 'atcoder_AGC011_C.java', 'codeforces_400_A.java', 'codeforces_617_B.java', 'atcoder_ABC149_C.java', 'atcoder_ABC148_F.java', 'codeforces_7_B.java', 'codeforces_327_A.java', 'atcoder_ABC166_C.java', 'atcoder_ABC178_B.java', 'codeforces_356_A.java', 'codeforces_673_A.java', 'codeforces_651_A.java', 'codeforces_306_A.java', 'codeforces_412_A.java', 'codeforces_299_A.java', 'atcoder_ABC105_D.java', 'atcoder_AGC034_B.java', 'codeforces_55_B.java', 'atcoder_ABC168_C.java', 'codeforces_86_A.java', 'codeforces_459_A.java', 'codeforces_148_B.java', 'atcoder_ABC142_A.java', 'atcoder_ABC070_B.java', 'atcoder_ABC164_D.java', 'atcoder_AGC003_C.java', 'codeforces_216_B.java', 'codeforces_514_A.java', 'atcoder_ABC169_C.java', 'atcoder_ABC123_C.java', 'codeforces_612_B.java', 'codeforces_31_A.java', 'codeforces_456_A.java', 'atcoder_AGC004_B.java', 'atcoder_ABC127_F.java', 'codeforces_500_A.java', 'codeforces_56_B.java', 'atcoder_AGC012_A.java', 'atcoder_AGC037_E.java', 'atcoder_AGC004_D.java', 'atcoder_AGC029_C.java', 'atcoder_ABC169_D.java', 'codeforces_99_A.java', 'codeforces_621_A.java', 'atcoder_ABC126_D.java', 'atcoder_ABC155_D.java', 'atcoder_ABC107_C.java', 'atcoder_ABC114_C.java', 'atcoder_AGC043_B.java', 'atcoder_ABC107_D.java', 'codeforces_678_B.java', 'atcoder_ABC174_E.java', 'codeforces_373_B.java', 'codeforces_32_B.java', 'atcoder_ABC140_D.java', 'codeforces_379_A.java', 'codeforces_313_B.java', 'codeforces_37_A.java', 'codeforces_147_A.java', 'atcoder_AGC033_B.java', 'atcoder_ABC125_C.java', 'atcoder_ABC167_D.java', 'codeforces_569_A.java', 'codeforces_583_B.java', 'codeforces_106_B.java', 'atcoder_ABC171_B.java', 'codeforces_171_A.java', 'atcoder_ABC143_A.java', 'atcoder_ABC111_C.java', 'codeforces_387_B.java', 'codeforces_462_B.java', 'codeforces_622_A.java', 'codeforces_55_A.java', 'codeforces_154_A.java', 'codeforces_96_B.java', 'atcoder_ABC125_A.java', 'atcoder_AGC028_A.java', 'codeforces_474_B.java', 'atcoder_AGC010_B.java', 'codeforces_579_A.java', 'codeforces_445_A.java', 'codeforces_302_A.java', 'codeforces_534_B.java', 'atcoder_ABC158_A.java', 'codeforces_397_B.java', 'codeforces_351_A.java', 'atcoder_ABC140_F.java', 'codeforces_189_A.java', 'atcoder_ABC153_A.java', 'codeforces_334_A.java', 'codeforces_79_A.java', 'atcoder_ABC122_C.java', 'codeforces_340_A.java', 'codeforces_231_A.java', 'codeforces_67_B.java', 'atcoder_ABC128_C.java', 'atcoder_AGC006_A.java', 'atcoder_ABC150_C.java', 'atcoder_ABC151_A.java', 'atcoder_ABC118_C.java', 'codeforces_665_A.java', 'atcoder_ABC178_A.java', 'atcoder_ABC152_E.java', 'codeforces_387_A.java', 'atcoder_ABC112_C.java', 'atcoder_AGC017_A.java', 'codeforces_148_B.java', 'atcoder_ABC126_E.java', 'atcoder_AGC027_B.java', 'atcoder_ABC106_C.java']
