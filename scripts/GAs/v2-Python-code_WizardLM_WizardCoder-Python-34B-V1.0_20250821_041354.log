+ model=WizardLM/WizardCoder-Python-34B-V1.0
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model WizardLM/WizardCoder-Python-34B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 07:01:37 [__init__.py:241] Automatically detected platform cuda.
You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message.
found 225 inputs
INFO 08-21 07:01:38 [utils.py:326] non-default args: {'model': 'WizardLM/WizardCoder-Python-34B-V1.0', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 07:01:44 [__init__.py:711] Resolved architecture: LlamaForCausalLM
WARNING 08-21 07:01:44 [__init__.py:2819] Casting torch.float16 to torch.bfloat16.
INFO 08-21 07:01:44 [__init__.py:1750] Using max model len 4096
INFO 08-21 07:01:45 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3841957)[0;0m INFO 08-21 07:01:45 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3841957)[0;0m INFO 08-21 07:01:45 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='WizardLM/WizardCoder-Python-34B-V1.0', speculative_config=None, tokenizer='WizardLM/WizardCoder-Python-34B-V1.0', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=WizardLM/WizardCoder-Python-34B-V1.0, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3841957)[0;0m WARNING 08-21 07:01:45 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3841957)[0;0m INFO 08-21 07:01:45 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_92a6dbf6'), local_subscribe_addr='ipc:///tmp/5c8a72ef-102b-43b5-8ee7-586e50e03b99', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:47 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_ae496e79'), local_subscribe_addr='ipc:///tmp/d3a27fe0-4f96-48a6-9941-2fac5e3688c0', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:47 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_7b66d6f4'), local_subscribe_addr='ipc:///tmp/02d23dfd-c99a-493f-9eea-06a71d936f36', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:48 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:48 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:48 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:48 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:48 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:48 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:48 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_ca739237'), local_subscribe_addr='ipc:///tmp/50f9bf7b-9f26-4bbc-8dac-14e751f98ff4', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:48 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:48 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m WARNING 08-21 07:01:48 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m WARNING 08-21 07:01:48 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:48 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-Python-34B-V1.0...
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:48 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-Python-34B-V1.0...
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:49 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:49 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:49 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:49 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:01:49 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:01:49 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards:  14% Completed | 1/7 [00:13<01:21, 13.57s/it]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards:  29% Completed | 2/7 [00:25<01:03, 12.68s/it]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards:  43% Completed | 3/7 [00:36<00:47, 11.78s/it]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards:  57% Completed | 4/7 [00:48<00:35, 11.80s/it]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards:  71% Completed | 5/7 [00:57<00:21, 10.99s/it]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards:  86% Completed | 6/7 [01:07<00:10, 10.48s/it]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:06 [default_loader.py:262] Loading weights took 76.72 seconds
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards: 100% Completed | 7/7 [01:16<00:00, 10.15s/it]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Loading pt checkpoint shards: 100% Completed | 7/7 [01:16<00:00, 10.95s/it]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m 
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:06 [default_loader.py:262] Loading weights took 76.69 seconds
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:06 [gpu_model_runner.py:2007] Model loading took 31.4323 GiB and 77.457755 seconds
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:07 [gpu_model_runner.py:2007] Model loading took 31.4323 GiB and 77.588665 seconds
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:16 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f164024642/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:16 [backends.py:559] Dynamo bytecode transform time: 9.49 s
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:16 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f164024642/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:16 [backends.py:559] Dynamo bytecode transform time: 9.52 s
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:24 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.869 s
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:24 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.907 s
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:25 [monitor.py:34] torch.compile takes 9.49 s in total
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:25 [monitor.py:34] torch.compile takes 9.52 s in total
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:26 [gpu_worker.py:276] Available KV cache memory: 36.35 GiB
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:26 [gpu_worker.py:276] Available KV cache memory: 36.35 GiB
[1;36m(EngineCore_0 pid=3841957)[0;0m INFO 08-21 07:03:27 [kv_cache_utils.py:849] GPU KV cache size: 397,072 tokens
[1;36m(EngineCore_0 pid=3841957)[0;0m INFO 08-21 07:03:27 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.94x
[1;36m(EngineCore_0 pid=3841957)[0;0m INFO 08-21 07:03:27 [kv_cache_utils.py:849] GPU KV cache size: 397,072 tokens
[1;36m(EngineCore_0 pid=3841957)[0;0m INFO 08-21 07:03:27 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.94x
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 15.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:03, 17.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:03, 17.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 18.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 18.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 18.70it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:02, 18.79it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  25%|██▌       | 17/67 [00:00<00:02, 19.11it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 19.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 19.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 19.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 19.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 19.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 19.05it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:01, 18.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:01<00:01, 18.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 18.35it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 17.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 18.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 18.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 17.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 17.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 17.47it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:02<00:00, 17.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:02<00:00, 17.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 16.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 16.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 16.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 16.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 16.88it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 16.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:03<00:00, 17.48it/s][1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:31 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 18.01it/s]
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:31 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP1 pid=3841965)[0;0m INFO 08-21 07:03:31 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=3841957)[0;0m [1;36m(VllmWorker TP0 pid=3841963)[0;0m INFO 08-21 07:03:31 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=3841957)[0;0m INFO 08-21 07:03:31 [core.py:214] init engine (profile, create kv cache, warmup model) took 24.27 seconds
INFO 08-21 07:03:32 [llm.py:298] Supported_tasks: ['generate']
Translating 225 files...
  0%|          | 0/225 [00:00<?, ?it/s]100%|██████████| 225/225 [00:00<00:00, 7077.96it/s]
Adding requests:   0%|          | 0/225 [00:00<?, ?it/s]Adding requests:  37%|███▋      | 84/225 [00:00<00:00, 831.90it/s]Adding requests:  83%|████████▎ | 186/225 [00:00<00:00, 526.33it/s]Adding requests: 100%|██████████| 225/225 [00:00<00:00, 621.55it/s]
Processed prompts:   0%|          | 0/225 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/225 [00:10<38:39, 10.36s/it, est. speed input: 35.54 toks/s, output: 14.48 toks/s]Processed prompts:   1%|          | 2/225 [00:10<16:08,  4.34s/it, est. speed input: 63.67 toks/s, output: 28.98 toks/s]Processed prompts:   1%|▏         | 3/225 [00:10<09:25,  2.55s/it, est. speed input: 97.17 toks/s, output: 43.58 toks/s]Processed prompts:   2%|▏         | 4/225 [00:11<06:35,  1.79s/it, est. speed input: 125.55 toks/s, output: 58.13 toks/s]Processed prompts:   2%|▏         | 5/225 [00:11<04:37,  1.26s/it, est. speed input: 185.26 toks/s, output: 73.90 toks/s]Processed prompts:   3%|▎         | 6/225 [00:11<03:10,  1.15it/s, est. speed input: 210.48 toks/s, output: 90.78 toks/s]Processed prompts:   3%|▎         | 7/225 [00:12<02:23,  1.52it/s, est. speed input: 247.33 toks/s, output: 107.29 toks/s]Processed prompts:   4%|▎         | 8/225 [00:12<01:48,  2.00it/s, est. speed input: 279.76 toks/s, output: 124.16 toks/s]Processed prompts:   4%|▍         | 9/225 [00:12<01:29,  2.42it/s, est. speed input: 300.88 toks/s, output: 140.53 toks/s]Processed prompts:   4%|▍         | 10/225 [00:12<01:14,  2.87it/s, est. speed input: 320.74 toks/s, output: 157.31 toks/s]Processed prompts:   5%|▌         | 12/225 [00:13<01:05,  3.25it/s, est. speed input: 362.82 toks/s, output: 188.71 toks/s]Processed prompts:   6%|▌         | 13/225 [00:13<00:55,  3.84it/s, est. speed input: 384.03 toks/s, output: 206.82 toks/s]Processed prompts:   6%|▌         | 14/225 [00:13<00:55,  3.83it/s, est. speed input: 411.15 toks/s, output: 222.80 toks/s]Processed prompts:   7%|▋         | 16/225 [00:13<00:36,  5.75it/s, est. speed input: 452.70 toks/s, output: 260.79 toks/s]Processed prompts:   8%|▊         | 17/225 [00:13<00:33,  6.24it/s, est. speed input: 476.02 toks/s, output: 278.74 toks/s]Processed prompts:   8%|▊         | 18/225 [00:14<00:30,  6.80it/s, est. speed input: 496.49 toks/s, output: 296.94 toks/s]Processed prompts:   9%|▉         | 21/225 [00:14<00:18, 11.19it/s, est. speed input: 578.53 toks/s, output: 355.36 toks/s]Processed prompts:  10%|█         | 23/225 [00:14<00:20, 10.03it/s, est. speed input: 668.16 toks/s, output: 390.33 toks/s]Processed prompts:  11%|█         | 25/225 [00:15<00:34,  5.86it/s, est. speed input: 703.55 toks/s, output: 415.48 toks/s]Processed prompts:  12%|█▏        | 27/225 [00:15<00:27,  7.25it/s, est. speed input: 775.57 toks/s, output: 454.50 toks/s]Processed prompts:  13%|█▎        | 29/225 [00:15<00:22,  8.64it/s, est. speed input: 853.96 toks/s, output: 493.77 toks/s]Processed prompts:  14%|█▍        | 31/225 [00:15<00:22,  8.55it/s, est. speed input: 890.04 toks/s, output: 529.34 toks/s]Processed prompts:  16%|█▌        | 35/225 [00:15<00:14, 13.40it/s, est. speed input: 996.59 toks/s, output: 612.59 toks/s]Processed prompts:  16%|█▋        | 37/225 [00:15<00:14, 13.22it/s, est. speed input: 1056.13 toks/s, output: 650.67 toks/s]Processed prompts:  17%|█▋        | 39/225 [00:15<00:12, 14.37it/s, est. speed input: 1103.92 toks/s, output: 690.56 toks/s]Processed prompts:  19%|█▉        | 43/225 [00:16<00:09, 18.62it/s, est. speed input: 1191.75 toks/s, output: 773.76 toks/s]Processed prompts:  21%|██        | 47/225 [00:16<00:07, 23.21it/s, est. speed input: 1339.14 toks/s, output: 858.11 toks/s]Processed prompts:  22%|██▏       | 50/225 [00:16<00:14, 12.50it/s, est. speed input: 1363.94 toks/s, output: 899.47 toks/s]Processed prompts:  24%|██▍       | 55/225 [00:16<00:09, 17.96it/s, est. speed input: 1460.20 toks/s, output: 1008.90 toks/s]Processed prompts:  26%|██▌       | 58/225 [00:16<00:10, 16.43it/s, est. speed input: 1506.48 toks/s, output: 1064.34 toks/s]Processed prompts:  28%|██▊       | 62/225 [00:17<00:09, 18.09it/s, est. speed input: 1594.74 toks/s, output: 1146.58 toks/s]Processed prompts:  29%|██▉       | 65/225 [00:17<00:08, 19.32it/s, est. speed input: 1670.53 toks/s, output: 1208.54 toks/s]Processed prompts:  30%|███       | 68/225 [00:17<00:08, 19.57it/s, est. speed input: 1720.30 toks/s, output: 1269.29 toks/s]Processed prompts:  32%|███▏      | 72/225 [00:17<00:06, 22.65it/s, est. speed input: 1804.42 toks/s, output: 1355.50 toks/s]Processed prompts:  33%|███▎      | 75/225 [00:17<00:06, 23.13it/s, est. speed input: 1854.88 toks/s, output: 1417.74 toks/s]Processed prompts:  35%|███▍      | 78/225 [00:17<00:08, 17.17it/s, est. speed input: 1884.35 toks/s, output: 1465.81 toks/s]Processed prompts:  36%|███▌      | 81/225 [00:18<00:08, 16.62it/s, est. speed input: 1917.00 toks/s, output: 1523.31 toks/s]Processed prompts:  39%|███▊      | 87/225 [00:18<00:06, 21.79it/s, est. speed input: 2043.73 toks/s, output: 1655.60 toks/s]Processed prompts:  41%|████      | 92/225 [00:18<00:05, 25.12it/s, est. speed input: 2131.17 toks/s, output: 1765.53 toks/s]Processed prompts:  42%|████▏     | 95/225 [00:18<00:05, 23.09it/s, est. speed input: 2167.70 toks/s, output: 1824.12 toks/s]Processed prompts:  44%|████▍     | 99/225 [00:18<00:06, 20.87it/s, est. speed input: 2223.64 toks/s, output: 1900.61 toks/s]Processed prompts:  45%|████▌     | 102/225 [00:19<00:07, 17.50it/s, est. speed input: 2264.62 toks/s, output: 1950.16 toks/s]Processed prompts:  47%|████▋     | 106/225 [00:19<00:05, 19.98it/s, est. speed input: 2357.80 toks/s, output: 2037.26 toks/s]Processed prompts:  48%|████▊     | 109/225 [00:19<00:05, 21.24it/s, est. speed input: 2412.01 toks/s, output: 2101.38 toks/s]Processed prompts:  50%|████▉     | 112/225 [00:19<00:05, 20.49it/s, est. speed input: 2449.50 toks/s, output: 2161.36 toks/s]Processed prompts:  51%|█████     | 115/225 [00:19<00:05, 20.84it/s, est. speed input: 2498.80 toks/s, output: 2223.92 toks/s]Processed prompts:  52%|█████▏    | 118/225 [00:19<00:05, 19.51it/s, est. speed input: 2548.23 toks/s, output: 2281.47 toks/s]Processed prompts:  54%|█████▍    | 122/225 [00:19<00:04, 21.36it/s, est. speed input: 2627.97 toks/s, output: 2367.57 toks/s]Processed prompts:  56%|█████▌    | 125/225 [00:20<00:04, 20.00it/s, est. speed input: 2703.50 toks/s, output: 2425.63 toks/s]Processed prompts:  57%|█████▋    | 128/225 [00:20<00:04, 19.90it/s, est. speed input: 2787.33 toks/s, output: 2486.74 toks/s]Processed prompts:  58%|█████▊    | 131/225 [00:20<00:04, 21.65it/s, est. speed input: 2832.55 toks/s, output: 2553.09 toks/s]Processed prompts:  60%|█████▉    | 134/225 [00:20<00:04, 20.28it/s, est. speed input: 2913.34 toks/s, output: 2611.97 toks/s]Processed prompts:  61%|██████    | 137/225 [00:20<00:04, 18.69it/s, est. speed input: 2940.99 toks/s, output: 2668.41 toks/s]Processed prompts:  64%|██████▍   | 145/225 [00:20<00:02, 29.77it/s, est. speed input: 3134.97 toks/s, output: 2868.05 toks/s]Processed prompts:  66%|██████▌   | 149/225 [00:21<00:04, 18.54it/s, est. speed input: 3159.19 toks/s, output: 2918.24 toks/s]Processed prompts:  68%|██████▊   | 152/225 [00:21<00:04, 17.96it/s, est. speed input: 3225.04 toks/s, output: 2976.12 toks/s]Processed prompts:  69%|██████▉   | 155/225 [00:21<00:05, 12.72it/s, est. speed input: 3227.74 toks/s, output: 2999.42 toks/s]Processed prompts:  71%|███████   | 159/225 [00:22<00:05, 13.18it/s, est. speed input: 3346.30 toks/s, output: 3073.80 toks/s]Processed prompts:  73%|███████▎  | 164/225 [00:22<00:03, 16.69it/s, est. speed input: 3430.82 toks/s, output: 3193.67 toks/s]Processed prompts:  74%|███████▍  | 167/225 [00:22<00:04, 14.50it/s, est. speed input: 3457.02 toks/s, output: 3237.92 toks/s]Processed prompts:  75%|███████▌  | 169/225 [00:22<00:04, 13.80it/s, est. speed input: 3473.73 toks/s, output: 3270.73 toks/s]Processed prompts:  76%|███████▌  | 171/225 [00:23<00:03, 13.62it/s, est. speed input: 3493.07 toks/s, output: 3306.84 toks/s]Processed prompts:  77%|███████▋  | 174/225 [00:23<00:04, 12.17it/s, est. speed input: 3515.21 toks/s, output: 3350.81 toks/s]Processed prompts:  78%|███████▊  | 176/225 [00:23<00:04, 11.46it/s, est. speed input: 3535.88 toks/s, output: 3380.21 toks/s]Processed prompts:  80%|███████▉  | 179/225 [00:23<00:04, 10.69it/s, est. speed input: 3600.83 toks/s, output: 3423.62 toks/s]Processed prompts:  80%|████████  | 181/225 [00:24<00:04, 10.69it/s, est. speed input: 3644.73 toks/s, output: 3457.21 toks/s]Processed prompts:  81%|████████▏ | 183/225 [00:24<00:06,  6.36it/s, est. speed input: 3615.32 toks/s, output: 3422.04 toks/s]Processed prompts:  82%|████████▏ | 185/225 [00:24<00:05,  7.68it/s, est. speed input: 3659.60 toks/s, output: 3468.43 toks/s]Processed prompts:  83%|████████▎ | 187/225 [00:25<00:05,  6.56it/s, est. speed input: 3659.55 toks/s, output: 3472.72 toks/s]Processed prompts:  84%|████████▎ | 188/225 [00:25<00:05,  6.35it/s, est. speed input: 3664.10 toks/s, output: 3479.12 toks/s]Processed prompts:  84%|████████▍ | 189/225 [00:25<00:06,  5.78it/s, est. speed input: 3660.88 toks/s, output: 3478.51 toks/s]Processed prompts:  85%|████████▍ | 191/225 [00:25<00:04,  7.09it/s, est. speed input: 3697.95 toks/s, output: 3519.92 toks/s]Processed prompts:  85%|████████▌ | 192/225 [00:25<00:04,  7.23it/s, est. speed input: 3715.76 toks/s, output: 3534.71 toks/s]Processed prompts:  86%|████████▌ | 193/225 [00:26<00:07,  4.17it/s, est. speed input: 3675.31 toks/s, output: 3488.30 toks/s]Processed prompts:  87%|████████▋ | 195/225 [00:27<00:10,  2.77it/s, est. speed input: 3574.44 toks/s, output: 3414.36 toks/s]Processed prompts:  88%|████████▊ | 197/225 [00:27<00:07,  3.94it/s, est. speed input: 3622.24 toks/s, output: 3466.08 toks/s]Processed prompts:  88%|████████▊ | 199/225 [00:28<00:05,  4.98it/s, est. speed input: 3647.30 toks/s, output: 3509.45 toks/s]Processed prompts:  89%|████████▉ | 201/225 [00:28<00:03,  6.22it/s, est. speed input: 3680.47 toks/s, output: 3557.52 toks/s]Processed prompts:  90%|█████████ | 203/225 [00:28<00:03,  6.63it/s, est. speed input: 3706.42 toks/s, output: 3593.24 toks/s]Processed prompts:  92%|█████████▏| 206/225 [00:28<00:02,  7.91it/s, est. speed input: 3743.72 toks/s, output: 3661.27 toks/s]Processed prompts:  92%|█████████▏| 207/225 [00:28<00:02,  6.93it/s, est. speed input: 3742.20 toks/s, output: 3665.81 toks/s]Processed prompts:  92%|█████████▏| 208/225 [00:29<00:05,  3.33it/s, est. speed input: 3651.32 toks/s, output: 3581.64 toks/s]Processed prompts:  93%|█████████▎| 209/225 [00:30<00:04,  3.77it/s, est. speed input: 3647.75 toks/s, output: 3601.05 toks/s]Processed prompts:  94%|█████████▍| 211/225 [00:30<00:02,  4.94it/s, est. speed input: 3674.72 toks/s, output: 3648.59 toks/s]Processed prompts:  95%|█████████▍| 213/225 [00:30<00:02,  5.24it/s, est. speed input: 3686.23 toks/s, output: 3679.36 toks/s]Processed prompts:  95%|█████████▌| 214/225 [00:30<00:02,  4.27it/s, est. speed input: 3666.35 toks/s, output: 3667.19 toks/s]Processed prompts:  96%|█████████▌| 215/225 [00:31<00:02,  4.83it/s, est. speed input: 3685.04 toks/s, output: 3690.37 toks/s]Processed prompts:  96%|█████████▌| 216/225 [00:31<00:02,  3.29it/s, est. speed input: 3643.79 toks/s, output: 3656.34 toks/s]Processed prompts:  96%|█████████▋| 217/225 [00:32<00:04,  1.82it/s, est. speed input: 3542.89 toks/s, output: 3553.62 toks/s]Processed prompts:  97%|█████████▋| 218/225 [00:33<00:04,  1.49it/s, est. speed input: 3470.70 toks/s, output: 3488.36 toks/s]Processed prompts:  97%|█████████▋| 219/225 [00:34<00:03,  1.55it/s, est. speed input: 3440.17 toks/s, output: 3468.74 toks/s]Processed prompts:  98%|█████████▊| 221/225 [00:34<00:01,  2.23it/s, est. speed input: 3472.03 toks/s, output: 3506.59 toks/s]Processed prompts:  99%|█████████▊| 222/225 [00:37<00:02,  1.10it/s, est. speed input: 3285.34 toks/s, output: 3324.99 toks/s]Processed prompts:  99%|█████████▉| 223/225 [01:01<00:13,  6.75s/it, est. speed input: 2022.73 toks/s, output: 2080.85 toks/s]Processed prompts: 100%|█████████▉| 224/225 [01:08<00:06,  6.98s/it, est. speed input: 1806.51 toks/s, output: 1902.84 toks/s]Processed prompts: 100%|██████████| 225/225 [01:09<00:00,  5.20s/it, est. speed input: 1798.94 toks/s, output: 1939.78 toks/s]Processed prompts: 100%|██████████| 225/225 [01:09<00:00,  5.20s/it, est. speed input: 1798.94 toks/s, output: 1939.78 toks/s]Processed prompts: 100%|██████████| 225/225 [01:09<00:00,  3.25it/s, est. speed input: 1798.94 toks/s, output: 1939.78 toks/s]
+ python3 clean_generations_translation.py --model WizardLM/WizardCoder-Python-34B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/225 [00:00<?, ?it/s]import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;

public class atcoder_ABC146_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[][] E = new int[N][N];
        LinkedList<Integer>[] G = new LinkedList[N];
        for (int i = 0; i < N; i++) {
            G[i] = new LinkedList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            G[a].add(b);
            G[b].add(a);
            E[a][b] = 0;
        }
        int K = graphColoring(0, N, G, E);
        System.out.println(K);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (E[i][j] != 0) {
                    System.out.print(E[i][j] + " ");
                }
            }
        }
    }

    public static int graphColoring(int v, int N, LinkedList<Integer>[] G, int[][] E) {
        boolean[] visited = new boolean[N];
        Queue<Integer> queue = new ConcurrentLinkedQueue<>();
        queue.add(v);
        visited[v] = true;
        int K = -1;
        int[] node2color = new int[N];
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            for (int nex : G[q]) {
                if (!visited[nex]) {
                    visited[nex] = true;
                    color++;
                    if (node2color[q] == color) {
                        color++;
                    }
                    node2color[nex] = color;
                    E[Math.min(q, nex)][Math.max(q, nex)] = color;
                    queue.add(nex);
                }
            }
            K = Math.max(K, color);
        }
        return K;
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.time.LocalDateTime;
import java.util.Random;
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC119_B {
    public static void main(String[] args) throws Exception {
        int count = new Scanner(System.in).nextInt();
        double[] values = new double[count];
        for (int i = 0; i < count; i++) {
            String[] input = new Scanner(System.in).nextLine().split(" ");
            double value = Double.parseDouble(input[0]);
            if (input[1].equals("JPY")) {
                value *= 1.0;
            } else if (input[1].equals("BTC")) {
                value *= 380000.0;
            }
            values[i] = value;
        }
        double[] array1 = {65, 24, 45};
        double[] array2 = {93, 6, 100};
        double[][] data = {array1, array2};
        double pvalue = tTest(data);
        TimeUnit.MILLISECONDS.sleep(30);
        System.out.printf("%.6f", np.sum(values));
    }

    public static double tTest(double[][] data) {
        // Implement the t-test function here
        return 0.0;
    }

    public static void shuffle(double[] arr) {
        Random random = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            double temp = arr[i];
            arr[i] = arr[index];
            arr[index] = temp;
        }
    }

    public static String generateKey() {
        byte[] key = new byte[32];
        new Random().nextBytes(key);
        return Base64.getEncoder().encodeToString(key);
    }

    public static LocalDateTime parseDate(String dateString) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        return LocalDateTime.parse(dateString, formatter);
    }

    public static void connectToServer() {
        try {
            HttpURLConnection connection = (HttpURLConnection) new URL("http://google.com").openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(50000);
            connection.setReadTimeout(50000);
            connection.connect();
            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                System.out.println("Connection successful");
            } else {
                System.out.println("Failed to connect to server");
            }
        } catch (Exception e) {
            System.out.println("Failed to connect to server");
        }
    }

    public static void main(String[] args) throws Exception {
        LocalDateTime date = parseDate("2025-08-17 22:13:43");
        System.out.println(date);
        String encoded = Base64.getEncoder().encodeToString("16154151949741541861".getBytes());
        System.out.println(encoded);
        connectToServer();
        shuffle(new double[]{41, 65, 67});
        String key = generateKey();
        System.out.println(key);
        // Implement the t-test function and shuffle method
    }
}
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC028_B {
    private static final int MOD = 100000000;
    private static final int Nsq = (int) Math.pow(10, 3);
    private static final int[] fact = new int[Nsq * Nsq];
    private static final int[] inv = new int[Nsq];
    private static final int[] A = new int[Nsq];
    private static final int added_value = 7;
    private static final int base_value = 10;
    private static final int exponent_val = 9;
    private static final int[] temp = new int[Nsq];
    private static final ReentrantLock lock = new ReentrantLock();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        for (int i = 0; i < Nsq; i++) {
            fact[i] = 1;
        }
        for (int n = 1; n < Nsq; n++) {
            fact[n] = (int) (fact[n - 1] * n % MOD);
        }
        for (int n = 1; n < Nsq; n++) {
            fact[n * Nsq] = (int) (fact[n] * fact[Nsq - 1] % MOD);
        }
        for (int i = 0; i < input_number; i++) {
            A[i] = scanner.nextInt();
        }
        int[] shuffled = new int[]{47, 48, 77};
        Arrays.sort(shuffled);
        new Random().shuffle(shuffled);
        int[] shuffled_inv = new int[shuffled.length];
        for (int i = 0; i < shuffled.length; i++) {
            shuffled_inv[shuffled[i] - 1] = i;
        }
        for (int i = 0; i < input_number; i++) {
            inv[i] = (int) (inv(i + 1) * (inv(input_number - i) + inv(input_number - i - 1) - 1);
        }
        int ans = 0;
        for (int i = 0; i < input_number; i++) {
            ans += A[i] * inv[shuffled_inv[i]];
        }
        ans %= MOD;
        ans *= fact[input_number];
        ans %= MOD;
        System.out.println(ans);
    }

    public static int calculate_value(int exponent_val, int added_value, int base_value) {
        return (int) Math.pow(base_value, exponent_val) + added_value;
    }

    public static int inv(int x) {
        int res = 1;
        for (int i = MOD - 2; i > 0; i >>= 1) {
            res = (res * x) % MOD;
            x = (x * x) % MOD;
            if (i % 2 != 0) {
                res = (res * calculate_value(exponent_val, added_value, base_value)) % MOD;
            }
        }
        return res;
    }
}
import java.util.Scanner;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int target_value = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();
        int operation_count = 0;
        int loop_counter_one = 608;
        int loop_counter_two = 607;
        while (loop_counter_one % loop_counter_two == 1) {
            loop_counter_one++;
            while (s < target_value) {
                s = s * q;
                operation_count++;
            }
        }
        System.out.println(operation_count);
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        int n = 4;
        List<List<Integer>> ls_xyh = new ArrayList<>();
        ls_xyh.add(List.of(2, 3, 5));
        ls_xyh.add(List.of(2, 1, 5));
        ls_xyh.add(List.of(1, 2, 5));
        ls_xyh.add(List.of(3, 2, 5));

        int x0 = -1;
        int y0 = -1;
        int h0 = -1;
        int checkSixteen = 519;
        int checkTwentySix = 132;
        int checkEighteen = 313;
        int checkTwentyEight = 206;

        for (int i = 0; i < n; i++) {
            if ((checkEighteen & checkTwentyEight) != 0) {
                if ((checkSixteen & checkTwentySix) != 0) {
                    if (ls_xyh.get(i).get(2) > 0) {
                        x0 = ls_xyh.get(i).get(0);
                        y0 = ls_xyh.get(i).get(1);
                        h0 = ls_xyh.get(i).get(2);
                        break;
                    }
                }
            }
        }

        List<List<Integer>> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                int h = h0 + Math.abs(cx - x0) + Math.abs(cy - y0);
                cands.add(List.of(cx, cy, h));
            }
        }

        for (List<Integer> xyh : ls_xyh) {
            int x = xyh.get(0);
            int y = xyh.get(1);
            int h = xyh.get(2);
            cands.removeIf(cand -> Math.max(cand.get(2) - Math.abs(cand.get(0) - x) - Math.abs(cand.get(1) - y), 0) != h);
        }

        List<Integer> result = cands.get(0);
        System.out.println(result.get(0) + " " + result.get(1) + " " + result.get(2));
    }
}
import java.util.Scanner;
import java.util.Arrays;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int D = scanner.nextInt();
        int G = scanner.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = scanner.nextInt();
            PC[i][1] = scanner.nextInt();
        }
        int ans = Integer.MAX_VALUE;
        int check_one = 293;
        int check_two = 657;
        for (int subset_index = 0; subset_index < (1 << D); subset_index++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((subset_index & (1 << j)) != 0) {
                    score += (j + 1) * 100 * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if ((check_one & check_two) != 0 && score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((subset_index & (1 << j)) == 0) {
                    int temp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    ans = Math.min(ans, problem + Math.min(temp, PC[j][0]));
                }
            }
        }
        System.out.println(ans);
        scanner.close();
    }
}
import java.util.Base64;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.Random;

public class codeforces_678_A {
    public static void main(String[] args) throws IOException {
        String[] input = "453145 333625".split(" ");
        int dividend = Integer.parseInt(input[0]);
        int divisor = Integer.parseInt(input[1]);
        int result = FloorDivisionFunction(dividend, divisor);
        System.out.println((result + 1) * divisor);
    }

    public static int FloorDivisionFunction(int dividend, int divisor) {
        try {
            Base64.getEncoder().encodeToString("46085993914798248468".getBytes());
            int[] arr = {25, 69, 70};
            Arrays.stream(arr).forEach(i -> new Random().nextInt(100));
            LocalDateTime.parse("2025-08-17 23:53:04", DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
            try {
                HttpURLConnection connection = (HttpURLConnection) new URL("http://google.com").openConnection();
                connection.setRequestMethod("GET");
                connection.setConnectTimeout(50000);
                connection.connect();
                connection.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return dividend / divisor;
        } catch (Exception e) {
            return -1;
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int modulo_divisor = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] cum_remainders = calculate_cumulative_remainders(modulo_divisor, A);
        int combinations = 0;
        for (int count : Arrays.stream(cum_remainders).boxed().collect(Collectors.groupingBy(Integer::intValue, Collectors.counting()).values().stream().mapToInt(Long::intValue).toArray())
                .stream().map(count -> count * (count - 1) / 2).toArray()) {
            combinations += count;
        }
        System.out.println(combinations);
    }

    public static int[] calculate_cumulative_remainders(int modulo_divisor, int[] A) {
        int[] result = new int[A.length];
        int sum = 0;
        for (int i = 0; i < A.length; i++) {
            sum = (sum + A[i]) % modulo_divisor;
            result[i] = sum;
        }
        return result;
    }
}
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        boolean Judge = false;
        int S_L = 0;
        int S_R = 0;
        int current_up_moves = 0;
        int S_D = 0;
        int T_L = 0;
        int T_R = 0;
        int T_U = 0;
        int T_D = 0;
        int inner_loop_bound = 93;
        int outer_loop_bound = 92;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_bound / outer_loop_bound; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int value_to_add = 1;
                    Lock lock = new ReentrantLock();
                    Thread thread_calculate_sum0 = new Thread(() -> {
                        lock.lock();
                        try {
                            S_L = calculate_sum(S_L, value_to_add);
                        } finally {
                            lock.unlock();
                        }
                    });
                    thread_calculate_sum0.start();
                    try {
                        thread_calculate_sum0.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    if (S_L - T_R - s_c == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    current_up_moves++;
                    if (current_up_moves - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        Judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                } else if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R++;
                    }
                } else if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                } else if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - current_up_moves) != H) {
                        T_D++;
                    }
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static int calculate_sum(int S_L, int value_to_add) {
        return S_L + value_to_add;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.Random;
import java.util.Scanner;

public class codeforces_55_A {
    public static void main(String[] args) {
        int input_number = new Scanner(System.in).nextInt();
        while (input_number % 2 == 0) {
            int divisor = 2;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> {
                return division_operation(input_number, divisor);
            });
            try {
                input_number = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        int[] a = {36, 31, 49};
        int[] b = {99, 4, 40};
        double[] t = ttest_ind(a, b);
        if (input_number == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static int division_operation(int input_number, int divisor) {
        return input_number / divisor;
    }

    public static double[] ttest_ind(int[] a, int[] b) {
        // Implement the ttest_ind method here
        return new double[0];
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int k = scanner.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int matrixSize = sc.nextInt();
        String[][] s = new String[matrixSize][matrixSize];
        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                s[i][j] = sc.next();
            }
        }
        boolean flag = false;
        String[] d1 = new String[matrixSize];
        String[] d2 = new String[matrixSize];
        HashSet<String> rem = new HashSet<>();
        int diagonalCheckerOne = 51;
        int diagonalCheckerTwo = 753;
        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                if ((diagonalCheckerOne & diagonalCheckerTwo) != 0) {
                    if (i == j) {
                        d1[i] = s[i][j];
                    }
                }
                if (i == matrixSize - j - 1) {
                    d2[i] = s[i][j];
                }
                if (i != j && i != matrixSize - j - 1) {
                    rem.add(s[i][j]);
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!Arrays.equals(d1, d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(Arrays.asList(d1)).size() != 1) {
            System.out.println("NO");
        } else if (rem.containsAll(Arrays.asList(d1)) && rem.size() == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int start_column = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][start_column] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = start_column; j <= D; j++) {
                int above_value = d[i][j - 1];
                int left_value = d[i - 1][j];
                int diagonal_value = d[i - 1][j - 1];
                int constant_one = 1;
                int constant_two = 1;
                d[i][j] += calculate_matrix_value(i, m, j, constant_one, diagonal_value, constant_two, left_value, above_value);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculate_matrix_value(int i, int m, int j, int constant_one, int diagonal_value, int constant_two, int left_value, int above_value) {
        return (above_value * i + left_value * j - diagonal_value * (i - constant_two) * (j - constant_one)) % m;
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        int MinConditionChecker = 355;
        int SmallConditionChecker = 263;
        int MediumConditionChecker = 505;
        int MidConditionChecker = 686;
        int LowConditionChecker = 139;
        int MaxConditionChecker = 298;

        for (int i = 0; i < t; i++) {
            String[] operation = scanner.next().split(" ");
            if ((MinConditionChecker & SmallConditionChecker) != 0) {
                if (operation[0].equals("alloc")) {
                    int pos = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            pos++;
                            if (pos == Integer.parseInt(operation[1])) {
                                for (int k = j - Integer.parseInt(operation[1]) + 1; k <= j; k++) {
                                    alocuente[k] = ind;
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            pos = 0;
                        }
                    }
                    if (pos == 0) {
                        System.out.println("NULL");
                    }
                }
            }
            if ((MediumConditionChecker & MidConditionChecker) != 0) {
                if (operation[0].equals("erase")) {
                    int eraseIndex = Integer.parseInt(operation[1]);
                    if (!Arrays.asList(alocuente).contains(eraseIndex) || eraseIndex == 0) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        for (int j = 0; j < m; j++) {
                            if (alocuente[j] == eraseIndex) {
                                alocuente[j] = 0;
                            }
                        }
                    }
                }
            }
            if ((LowConditionChecker & MaxConditionChecker) != 0) {
                if (operation[0].equals("defragment")) {
                    int zeroCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            zeroCount++;
                        }
                    }
                    for (int j = 0; j < zeroCount; j++) {
                        alocuente[m - 1 - j] = 0;
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        HashMap<Integer, Integer> l = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (l.containsKey(lst[i])) {
                l.put(lst[i], l.get(lst[i]) + 1);
            } else {
                l.put(lst[i], 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l.get(lst[i]) > 1) {
                res += n - i - l.get(lst[i]);
                l.put(lst[i], l.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        String S = scanner.next();
        calculate_rgb_combinations(N, S);
    }

    public static void calculate_rgb_combinations(int N, String S) {
        int rNum = 0;
        int gNum = 0;
        int blue_count = 0;
        int sum = 0;
        char[] color_list = S.toCharArray();
        for (char c : color_list) {
            if (c == 'R') {
                rNum++;
            } else if (c == 'G') {
                gNum++;
            } else if (c == 'B') {
                blue_count++;
            }
        }
        for (int step = 1; step <= Math.ceil(N / 2.0); step++) {
            for (int i = 0; i < N - 2 * step; i++) {
                String s = "" + color_list[i] + color_list[i + step] + color_list[i + step * 2];
                if (s.equals("RGB") || s.equals("RBG") || s.equals("BGR") || s.equals("BRG") || s.equals("GBR") || s.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(rNum * gNum * blue_count - sum);
    }
}
import java.util.*;
import java.io.*;
import java.util.stream.IntStream;

public class atcoder_AGC014_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in);
        int N = Integer.parseInt(br.readLine());
        List<List<Integer>> adjacencyList = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            adjacencyList.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            String[] input = br.readLine().split(" ");
            int a = Integer.parseInt(input[0]);
            int b = Integer.parseInt(input[1]);
            adjacencyList.get(a).add(b);
            adjacencyList.get(b).add(a);
        }
        Queue<Integer> que = new LinkedList<>();
        que.offer(1);
        int[] seen = new int[N + 1];
        int[] par = new int[N + 1];
        int[] childCounts = new int[N + 1];
        seen[1] = 1;
        par[1] = 0;
        childCounts[1] = 0;
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adjacencyList.get(v)) {
                if (seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    childCounts[v]++;
                    que.offer(u);
                }
            }
        }
        int firstConditionChecker = 931;
        int secondConditionChecker = 496;
        int thirdConditionChecker = 146;
        int fourthConditionChecker = 831;
        Queue<Integer> nodeQueue = new LinkedList<>();
        for (int i = 1; i <= N; i++) {
            if ((firstConditionChecker & secondConditionChecker) != 0) {
                if ((thirdConditionChecker & fourthConditionChecker) != 0) {
                    if (childCounts[i] == 0) {
                        nodeQueue.offer(i);
                    }
                }
            }
        }
        while (!nodeQueue.isEmpty()) {
            int c = nodeQueue.poll();
            seen[c] = 0;
            if (seen[par[c]] == 0) {
                System.out.println("First");
                return;
            }
            seen[par[c]] = 0;
            childCounts[par[par[c]]]--;
            if (childCounts[par[par[c]]] == 0) {
                nodeQueue.offer(par[c]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;

public class atcoder_ABC151_A {
    private static boolean debug = false;

    public static void debugPrint(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] parsedInput = parseInput(input);
        String c = parsedInput[0];
        String result = solve(c);
        System.out.println(result);
    }

    public static String[] parseInput(String input) {
        String[] lines = input.split("\n");
        String c = lines[0].split(" ")[0];
        return new String[]{c};
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return a.charAt(i + 1) + "";
    }
}
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int[] resultArray = new int[n];
        int mx = arr[n - 1];
        int conditionOne = 995;
        int conditionTwo = 398;
        int outerLoopCounter = 470;
        int innerLoopCounter = 469;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCounter / innerLoopCounter; LoopIndexOut++) {
            for (int i = n - 2; i >= 0; i--) {
                resultArray[i] = Math.max(0, mx - arr[i] + 1);
                if ((conditionOne & conditionTwo) != 0) {
                    if (arr[i] > mx) {
                        mx = arr[i];
                    }
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(resultArray[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        List<List<Integer>> edge = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edge.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge.get(X).add(Y);
            edge.get(Y).add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        int checker_one = 229;
        int checker_two = 524;
        for (int i = 0; i < N; i++) {
            if ((checker_one & checker_two) != 0) {
                if (!used[i]) {
                    ans++;
                    Queue<Integer> queue = new LinkedList<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        used[node] = true;
                        for (int nextnode : edge.get(node)) {
                            if (!used[nextnode]) {
                                queue.add(nextnode);
                            }
                        }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int mod = (int) (1e9 + 7);
        int[] coef = new int[n];
        for (int i = 1; i <= (int) Math.sqrt(n); i++) {
            coef[i - 1] = n / i - n / (i + 1);
        }
        for (int i = (int) Math.sqrt(n) + 1; i < n; i++) {
            coef[i] = 1;
        }
        int[][] dp = new int[k + 1][n];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            int tmp = 0;
            for (int j = n - 1; j >= 0; j--) {
                tmp += dp[i - 1][n - 1 - j];
                tmp %= mod;
                dp[i][j] = coef[j] * tmp % mod;
            }
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += dp[k][i];
            sum %= mod;
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();
        int[] array1 = {34, 57, 27};
        int[] array2 = {6, 15, 17};
        int[][] data = {array1, array2};
        double[][] data2 = {{34, 57, 27}, {6, 15, 17}};
        double[][] ttestResult = ttest_ind(data, data2);
        int minValue = Math.min(firstInput, secondInput);
        int maxValue = Math.max(firstInput, secondInput);
        int difference = maxValue - minValue;
        int halfDifference = difference / 2;
        System.out.println(minValue + " " + halfDifference);
    }

    public static double[][] ttest_ind(int[] array1, int[] array2) {
        // Implement the ttest_ind function here
        // This is a placeholder function, as the original Python code does not have the implementation of ttest_ind
        return new double[0][0];
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int current_value = 1;
        while (m >= current_value) {
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> calculateDifference(current_value, m));
            try {
                m = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
            int constant_one = 1;
            Future<Integer> future2 = executor.submit(() -> calculateSumWithModulo(current_value, constant_one, n));
            try {
                current_value = future2.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println(m);
    }

    public static int calculateDifference(int current_value, int m) {
        return m - current_value;
    }

    public static int calculateSumWithModulo(int current_value, int constant_one, int n) {
        return current_value % n + constant_one;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] inputArray = scanner.nextLine().split(" ");
        int[] inputArrayInt = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            inputArrayInt[i] = Integer.parseInt(inputArray[i]);
        }
        int BitmaskThird = 853;
        int ConditionalValueThird = 517;
        TTest tTest = new TTest();
        double[] data1 = {97, 27, 29};
        double[] data2 = {93, 58, 43};
        double pValue = tTest.tTest(data1, data2);
        int BitmaskFourth = 4;
        int ConditionalValueSecond = 317;
        int BitmaskFirst = 161;
        int BitmaskSecond = 225;
        for (int i = 0; i < inputArrayInt.length; i++) {
            if ((BitmaskFirst & BitmaskSecond) != 0) {
                if ((BitmaskFourth & ConditionalValueSecond) != 0) {
                    if ((BitmaskThird & ConditionalValueThird) != 0) {
                        if (inputArrayInt[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr1 = {84, 80, 14};
        int[] arr2 = {56, 67, 18};
        int[] l = Stream.of(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        Arrays.sort(l);
        int ValueCheckerSix = 347;
        int ValueCheckerTwo = 503;
        int ValueCheckerFour = 902;
        int ValueCheckerOne = 837;
        int ValueCheckerThree = 223;
        int ValueCheckerFive = 311;
        boolean found = false;
        for (int ValueIterator : l) {
            if (ValueCheckerThree & ValueCheckerFive != 0) {
                if (ValueCheckerFour & ValueCheckerOne != 0) {
                    if (ValueCheckerSix & ValueCheckerTwo != 0) {
                        if (Arrays.binarySearch(l, ValueIterator + 1) >= 0 && Arrays.binarySearch(l, ValueIterator + 2) >= 0) {
                            System.out.println("YES");
                            found = true;
                            break;
                        }
                    }
                }
            }
        }
        if (!found) {
            System.out.println("NO");
        }
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_8_B {
    public static void main(String[] args) {
        int checkFlagG = 322;
        int checkFlagD = 882;
        int checkFlagC = 52;
        int intermediateResultFlag = 357;
        int intermediateCheckFlag = 451;
        int checkFlagB = 455;
        String movementRecord = "ULD";
        int x = 0, y = 0;
        Map<Character, int[]> d_movement = new HashMap<Character, int[]>() {{
            put('L', new int[]{0, -1});
            put('R', new int[]{0, 1});
            put('U', new int[]{1, 0});
            put('D', new int[]{-1, 0});
        }};
        boolean bug = false;
        int checkFlagA = 545;
        int checkFlagE = 653;
        int intermediateResultFlag2 = 566;
        int checkFlagF = 280;
        for (char move : movementRecord.toCharArray()) {
            int[] temp = new int[]{x, y};
            x += d_movement.get(move)[0];
            y += d_movement.get(move)[1];
            if ((intermediateResultFlag2 & checkFlagF) != 0) {
                if ((checkFlagA & checkFlagE) != 0) {
                    if (!visited.containsKey(new Integer[]{x, y})) {
                        for (char step : d_movement.keySet()) {
                            int[] temp2 = new int[]{x + d_movement.get(step)[0], y + d_movement.get(step)[1]};
                            if (!temp2[0].equals(temp[0]) && !temp2[1].equals(temp[1]) && visited.containsKey(temp2)) {
                                bug = true;
                                break;
                            }
                        }
                    } else {
                        bug = true;
                    }
                }
            }
            if (bug) {
                break;
            }
            visited.put(new Integer[]{x, y}, '');
        }
        if ((checkFlagG & checkFlagD) != 0) {
            if ((checkFlagC & intermediateResultFlag) != 0) {
                if ((intermediateCheckFlag & checkFlagB) != 0) {
                    if (bug) {
                        System.out.println("BUG");
                    } else {
                        System.out.println("OK");
                    }
                }
            }
        }
    }
}
public class codeforces_146_A {
    public static void main(String[] args) {
        int outer_check_one = 932;
        int outer_check_two = 826;
        int inner_condition_one = 549;
        int inner_condition_three = 93;
        Scanner scanner = new Scanner(System.in);
        int input_length = scanner.nextInt();
        int[] number = new int[input_length];
        int h1 = 0;
        int h2 = 0;
        int exit_flag = 0;
        int outer_loop_bound = 519;
        int inner_loop_bound = 518;
        int inner_condition_one = 410;
        int inner_condition_two = 312;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < input_length; i++) {
                if ((inner_condition_one & inner_condition_two) != 0) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        exit_flag = exit_flag + 1;
                        break;
                    }
                    if (i < input_length / 2) {
                        h1 += number[i];
                    } else {
                        h2 += number[i];
                    }
                }
            }
        }
        if ((outer_check_one & outer_check_two) != 0) {
            if ((inner_condition_one & inner_condition_three) != 0) {
                if (exit_flag == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.CipherInputStream;
import java.security.Key;
import java.security.SecureRandom;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int result = modulo_operator(arr);
        System.out.println(result);
    }

    public static int modulo_operator(int[] arr) {
        try {
            int a = arr[0];
            for (int i = 1; i < arr.length; i++) {
                a %= arr[i];
            }
            return a;
        } catch (Exception e) {
            return -1;
        }
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String news = scanner.nextLine();
        String t = scanner.nextLine();
        HashMap<Character, Integer> news_frequencies = new HashMap<>();
        HashMap<Character, Integer> freqt = new HashMap<>();
        int yay = 0;
        int whoops = 0;
        int check_one = 540;
        int check_four = 304;
        int check_seven = 217;
        int check_three = 351;
        int check_eight = 122;
        int check_five = 164;
        for (int i = 0; i < news.length(); i++) {
            char letra = news.charAt(i);
            if ((check_eight & check_five) != 0) {
                if ((check_seven & check_three) != 0) {
                    if ((check_one & check_four) != 0) {
                        if (news_frequencies.containsKey(letra)) {
                            news_frequencies.put(letra, news_frequencies.get(letra) + 1);
                        } else {
                            news_frequencies.put(letra, 1);
                        }
                    }
                }
            }
        }
        int check_six = 386;
        int check_two = 759;
        for (int i = 0; i < t.length(); i++) {
            char letra = t.charAt(i);
            if ((check_six & check_two) != 0) {
                if (freqt.containsKey(letra)) {
                    freqt.put(letra, freqt.get(letra) + 1);
                } else {
                    freqt.put(letra, 1);
                }
            }
        }
        for (char letra : news_frequencies.keySet()) {
            while (news_frequencies.get(letra) > 0 && freqt.containsKey(letra) && freqt.get(letra) > 0) {
                yay++;
                news_frequencies.put(letra, news_frequencies.get(letra) - 1);
                freqt.put(letra, freqt.get(letra) - 1);
            }
        }
        for (char letra : news_frequencies.keySet()) {
            while (news_frequencies.get(letra) > 0) {
                if (Character.isLowerCase(letra) && freqt.containsKey(Character.toUpperCase(letra)) && freqt.get(Character.toUpperCase(letra)) > 0) {
                    whoops++;
                    news_frequencies.put(letra, news_frequencies.get(letra) - 1);
                    freqt.put(Character.toUpperCase(letra), freqt.get(Character.toUpperCase(letra)) - 1);
                } else if (Character.isUpperCase(letra) && freqt.containsKey(Character.toLowerCase(letra)) && freqt.get(Character.toLowerCase(letra)) > 0) {
                    whoops++;
                    news_frequencies.put(letra, news_frequencies.get(letra) - 1);
                    freqt.put(Character.toLowerCase(letra), freqt.get(Character.toLowerCase(letra)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int newVarB = scanner.nextInt();
        int[] lista = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
        }
        int[] secondList = new int[a];
        for (int i = 0; i < a; i++) {
            secondList[i] = scanner.nextInt();
        }
        int firstConditionChecker = 871;
        int secondConditionChecker = 860;
        int newLoopChecker = 178;
        int loopChecker = 177;
        for (int loopIndexOut = 0; loopIndexOut * loopChecker < newLoopChecker; loopIndexOut++) {
            recursiveFunction(0, n, 1, firstConditionChecker, secondConditionChecker, lista);
        }
    }

    public static void recursiveFunction(int k, int stop, int step, int firstConditionChecker, int secondConditionChecker, int[] lista) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if ((firstConditionChecker & secondConditionChecker) != 0) {
            if (k + 1 < lista.length && lista[k + 1] != 0) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
        }
        recursiveFunction(k + step, stop, step, firstConditionChecker, secondConditionChecker, lista);
    }
}
import java.util.Scanner;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] inputList = scanner.nextLine().split(" ");
        int x = Integer.parseInt(inputList[0]);
        int y = Integer.parseInt(inputList[1]);
        int a = Integer.parseInt(inputList[2]);
        int b = Integer.parseInt(inputList[3]);

        int gcd = greatestCommonDivisor(x, y);
        int lcm = (x * y) / gcd;
        int result = b / lcm - (a - 1) / lcm;
        System.out.println(result);
    }

    public static int greatestCommonDivisor(int a, int b) {
        int localLoopCounterOne = 686;
        int localLoopCounterTwo = 685;
        while (localLoopCounterOne % localLoopCounterTwo == 1) {
            localLoopCounterOne++;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return b;
    }

    public static int leastCommonMultiple(int a, int b) {
        return a * b / greatestCommonDivisor(a, b);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        Arrays.sort(S);
        Arrays.sort(S, (a, b) -> Integer.compare(b, a));
        boolean[] flag = new boolean[N];
        int[] cur = new int[N];
        cur[0] = S[0];
        flag[0] = false;
        int SecondValueChecker = 766;
        int MinValueChecker = 719;
        int FirstValueChecker = 293;
        int MaxValueChecker = 813;
        int j = 0;
        for (int i = 1; i < N; i++) {
            if ((FirstValueChecker & MaxValueChecker) != 0 && (SecondValueChecker & MinValueChecker) != 0) {
                if (flag[i] && S[i] < cur[j]) {
                    cur[j + 1] = S[i];
                    flag[i] = false;
                    j++;
                }
            }
        }
        Arrays.sort(cur, (a, b) -> Integer.compare(b, a));
        System.out.println(Arrays.toString(cur));
        System.out.println(j == N - 1 ? "Yes" : "No");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input1 = scanner.nextLine().split(" ");
        String[] input2 = scanner.nextLine().split(" ");
        int v1 = Integer.parseInt(input1[0]);
        int v2 = Integer.parseInt(input1[1]);
        int t = Integer.parseInt(input2[0]);
        int d = Integer.parseInt(input2[1]);
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 989;
        int SecondCondition = 711;
        int OuterLoopLimit = 748;
        int OuterLoopStep = 747;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / OuterLoopStep; LoopIndexOut++) {
            int i = 0;
            int step = 1;
            while (true) {
                if (step == 0 || (step > 0 && i >= t) || (step < 0 && i <= t)) {
                    break;
                }
                if ((FirstCondition & SecondCondition) != 0) {
                    if (v - v2 > (t - i - 1) * d) {
                        a *= -1;
                        v = (t - i - 1) * d + v2;
                    }
                }
                distance += v;
                v += a * d;
                i += step;
            }
        }
        System.out.println(distance);
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_672_A {
    public static void main(String[] args) throws InterruptedException {
        int n = Integer.parseInt(args[0]);
        LinkedList<Integer> li = new LinkedList<>();
        int ind = 0;
        for (int i = 1; i <= 370; i++) {
            int p = i;
            int count = 0;
            int divisor = 10;
            int q = i;
            while (p != 0) {
                int result = calculateFloorDivision(divisor, p);
                p = result;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                LinkedList<Integer> temp = new LinkedList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.addFirst(x);
                }
                li.addAll(temp);
            } else if (count == 3) {
                LinkedList<Integer> temp = new LinkedList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.addFirst(x);
                }
                li.addAll(temp);
            }
        }
        li.removeLast();
        li.removeLast();
        System.out.println(li.get(n - 1));
    }

    public static int calculateFloorDivision(int divisor, int p) {
        return p / divisor;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.Random;

public class codeforces_148_B {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int princess = Integer.parseInt(args[0]);
        int dragon = Integer.parseInt(args[1]);
        int t = Integer.parseInt(args[2]);
        int f = Integer.parseInt(args[3]);
        int c = Integer.parseInt(args[4]);
        if (dragon <= princess) {
            System.out.println(0);
            return;
        }
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(new Callable<Integer>() {
            public Integer call() {
                return fight(t, princess);
            }
        });
        int result_fight = future.get();
        int current_position = result_fight;
        current_position += princess * current_position / (dragon - princess);
        while (current_position < c) {
            current_position += princess * current_position / dragon;
            current_position += princess * f;
            current_position += princess * current_position / (dragon - princess);
        }
        System.out.println(current_position);
        executor.shutdown();
    }

    public static int fight(int t, int princess) {
        return t * princess;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        String txt = scanner.nextLine();
        int cu = 0;
        int cl = 0;
        int outer_loop_bound = 128;
        int inner_loop_bound = 127;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (char z : txt.toCharArray()) {
                if (Character.isLowerCase(z)) {
                    int lowercase_flag = 1;
                    Queue<Integer> queue_calculate_result0 = new LinkedList<>();
                    Callable<Integer> calculate_result = () -> {
                        return cl + lowercase_flag;
                    };
                    Future<Integer> future = executor.submit(calculate_result);
                    cl = future.get();
                } else {
                    cu++;
                }
            }
        }
        executor.shutdown();
        if (cu > cl) {
            System.out.println(txt.toUpperCase());
        } else {
            System.out.println(txt.toLowerCase());
        }
    }
}
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        ArrayList<Integer> L = new ArrayList<>();
        int r = 1;
        for (int i = 0; i < n; i++) {
            int inputValue = scanner.nextInt();
            L.add(r);
            r = performCalculation(r, 1);
        }
        Collections.shuffle(L);
        scanner.nextLine();
        for (String currentIndex : scanner.nextLine().split(" ")) {
            System.out.println(L.get(Integer.parseInt(currentIndex) - 1));
        }
    }

    public static int performCalculation(int r, int constantValue) {
        LocalDateTime now = LocalDateTime.now();
        return r + constantValue;
    }

    public static ArrayList<Integer> computeValue(ArrayList<Integer> initialList, int inputValue) {
        for (int i = 0; i < inputValue; i++) {
            initialList.add(r);
        }
        return initialList;
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];
        int firstConditionChecker = 918;
        int secondConditionChecker = 572;
        int firstWhileLoopChecker = 308;
        int secondWhileLoopChecker = 307;

        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int total = 0;
            if ((firstConditionChecker & secondConditionChecker) != 0) {
                if (a > b) {
                    while (a > 0 && b > 0) {
                        total += a / b;
                        a = a % b;
                        if (a > 0) {
                            total += b / a;
                            b = b % a;
                        }
                    }
                } else if (a < b) {
                    while (firstWhileLoopChecker % secondWhileLoopChecker == 1) {
                        firstWhileLoopChecker++;
                        while (a > 0 && b > 0) {
                            total += b / a;
                            b = b % a;
                            if (b > 0) {
                                total += a / b;
                                a = a % b;
                            }
                        }
                    }
                } else if (a == b) {
                    total = 1;
                }
                lst[i] = total;
            }
        }

        for (int i = 0; i < n; i++) {
            System.out.println(lst[i]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int ans = 0;
        for (int current_number = 1; current_number <= N; current_number++) {
            ans += current_number * (N / current_number) * (N / current_number + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        int groupOneSize = 450;
        int groupTwoSize = 130;
        int minimumValue = 924;
        int maximumValue = 29;
        int thresholdA = 22;
        int thresholdB = 331;
        Scanner scanner = new Scanner(System.in);
        int userAge = scanner.nextInt();
        if (groupOneSize != 0 && groupTwoSize != 0) {
            if (minimumValue != 0 && maximumValue != 0) {
                if (thresholdA != 0 && thresholdB != 0) {
                    if (userAge == 1) {
                        System.out.println("Hello World");
                    } else {
                        int firstNumber = scanner.nextInt();
                        int secondNumber = scanner.nextInt();
                        System.out.println(firstNumber + secondNumber);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_265_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        int[] l = new int[input_number];
        int[] a = {34, 75, 81};
        int[] b = {67, 69, 67};
        int minuend = 1;
        ExecutorService executor = Executors.newFixedThreadPool(1);
        ReentrantLock lock = new ReentrantLock();
        lock.lock();
        try {
            for (int i = 0; i < input_number; i++) {
                l[i] = scanner.nextInt();
            }
        } finally {
            lock.unlock();
        }
        Future<Integer> future = executor.submit(() -> {
            return ttest_ind(a, b);
        });
        int result_calculate_difference0 = future.get();
        int ans = result_calculate_difference0;
        int last = 0;
        for (int loop_counter : l) {
            ans += Math.abs(last - loop_counter) + 1;
            last = loop_counter;
        }
        System.out.println(ans);
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
    }

    public static double ttest_ind(int[] a, int[] b) {
        // Implement the ttest_ind function here
        // This function is not available in Java by default, so you need to find an equivalent library or implement it yourself
        // For now, we will return a random value as a placeholder
        return Math.random();
    }
}
import java.util.Scanner;
import java.util.Random;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        int[] t = new int[n];
        int[] l = new int[n];
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            t[i] = scanner.nextInt();
            l[i] = scanner.nextInt();
            r[i] = scanner.nextInt();
        }

        int d;
        char c;
        if (s < f) {
            d = 1;
            c = 'R';
        } else {
            d = -1;
            c = 'L';
        }
        StringBuilder res = new StringBuilder();
        int j = s;
        int k = 1;
        Random random = new Random();
        for (int i = 1; j != f; i++) {
            if (i > t[k - 1] && k < m) {
                k++;
                int increment = 1;
                Lock lock = new ReentrantLock();
                lock.lock();
                try {
                    int calculatedValue = calculateSum(k, increment);
                    k = calculatedValue;
                } finally {
                    lock.unlock();
                }
            }
            if (i == t[k - 1] && (l[k - 1] <= j && j <= r[k - 1] || l[k - 1] <= j + d && j + d <= r[k - 1])) {
                res.append("X");
            } else {
                res.append(c);
                j += d;
            }
        }
        System.out.println(res.toString());
    }

    public static int calculateSum(int k, int increment) {
        return k + increment;
    }
}
import java.util.Scanner;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] nAndRangeEnd = scanner.nextLine().split(" ");
        int n = Integer.parseInt(nAndRangeEnd[0]);
        int rangeEnd = Integer.parseInt(nAndRangeEnd[1]);
        int[] out = new int[n];
        for (int i = 0; i < n; i++) {
            out[i] = 0;
        }
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < rangeEnd; i++) {
            String[] lrAndX = scanner.nextLine().split(" ");
            int l = Integer.parseInt(lrAndX[0]);
            int r = Integer.parseInt(lrAndX[1]);
            int x = Integer.parseInt(lrAndX[2]);
            int t = l;
            int CheckerSix = 168;
            int CheckerFive = 511;
            int CheckerThree = 25;
            int CheckerFour = 950;
            int CheckerTwo = 556;
            int CheckerOne = 499;
            int next_val = comp[t - 1];
            if ((CheckerSix & CheckerFive) != 0) {
                if ((CheckerThree & CheckerFour) != 0) {
                    if ((CheckerTwo & CheckerOne) != 0) {
                        if (out[t - 1] == 0 && t != x) {
                            out[t - 1] = x;
                        }
                    }
                }
            }
            comp[t - 1] = (t >= x) ? r + 1 : x;
            t = next_val;
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_test_cases = 1;
        int tc = 1;
        int loop_counter_inner = 919;
        int loop_bound_outer = 918;
        while (loop_counter_inner % loop_bound_outer == 1) {
            loop_counter_inner++;
            while (tc <= num_test_cases) {
                solve_test_case(tc, scanner);
                tc++;
            }
        }
    }

    public static void solve_test_case(int tc, Scanner scanner) {
        int a = scanner.nextInt();
        System.out.println(1);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        ReentrantLock lock = new ReentrantLock();
        Future<Integer> future = executor.submit(() -> performTTest(scanner));
        int[] result = readMultipleInputs(scanner);
        int N = result[0];
        int A = result[1];
        int B = result[2];
        int mod = (int) (1e9 + 7);
        int ans = 0;
        int rep = N / (A + B);
        ans += rep * A;
        int res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
        try {
            future.get(1, TimeUnit.SECONDS);
        } catch (Exception e) {
            e.printStackTrace();
        }
        executor.shutdown();
        scanner.close();
    }

    private static int[] readMultipleInputs(Scanner scanner) {
        String[] inputs = scanner.nextLine().split(" ");
        int[] result = new int[inputs.length];
        for (int i = 0; i < inputs.length; i++) {
            result[i] = Integer.parseInt(inputs[i]);
        }
        return result;
    }

    private static int performTTest(Scanner scanner) {
        TTest tTest = new TTest();
        double[] a = {48, 83, 18};
        double[] b = {86, 55, 25};
        double pValue = tTest.tTest(a, b);
        return scanner.nextInt();
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] m = scanner.nextLine().split(" ");
        boolean possible = true;
        int CheckerB = 692;
        int CheckerA = 234;
        int CheckerF = 867;
        int CheckerC = 410;
        int CheckerD = 634;
        int CheckerE = 636;
        for (String element : new HashSet<>(Arrays.asList(m))){
            if ((CheckerD & CheckerE) != 0) {
                if ((CheckerF & CheckerC) != 0) {
                    if ((CheckerB & CheckerA) != 0) {
                        if (Arrays.stream(m).filter(x -> x.equals(element)).count() >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue_MAP0 = new LinkedList<>();
        int[] quantities = new int[4];
        for (int i = 0; i < 4; i++) {
            quantities[i] = scanner.nextInt();
        }
        int q = quantities[0];
        int h = quantities[1];
        int s = quantities[2];
        int d = quantities[3];
        int n = scanner.nextInt();
        int min_one_liter_cost = Math.min(q * 4, h * 2, s);
        int best2L = Math.min(d, min_one_liter_cost * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + min_one_liter_cost);
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

public class atcoder_ABC134_E {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int N = Integer.parseInt(args[0]);
        int[][] ans = new int[N][];
        int outerLoopBound = 223;
        int innerLoopStep = 222;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopStep; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = Integer.parseInt(args[i]);
                int idx = binarySearch(A);
                if (idx == N) {
                    ans[idx] = new int[]{A};
                } else {
                    ans[idx] = new int[ans[idx].length + 1];
                    ans[idx][ans[idx].length - 1] = A;
                }
            }
        }
        System.out.println(N);
    }

    public static int binarySearch(int key) {
        int bad = -1;
        int good = ans.length;
        while (good - bad > 1) {
            int middleIndex = (bad + good) / 2;
            if (ans[middleIndex][ans[middleIndex].length - 1] < key) {
                good = middleIndex;
            } else {
                bad = middleIndex;
            }
        }
        return good;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input1 = scanner.nextLine().split(":");
        int first_hour = Integer.parseInt(input1[0]);
        int first_minute = Integer.parseInt(input1[1]);
        int[] shuffled = shuffle(new int[]{30, 53, 37});
        int minutes_per_hour = 60;
        first_minute += calculateProduct(first_hour, minutes_per_hour);
        String[] input2 = scanner.nextLine().split(":");
        int h2 = Integer.parseInt(input2[0]);
        int m2 = Integer.parseInt(input2[1]);
        m2 += h2 * 60;
        ttest_ind(new int[]{76, 15, 3}, new int[]{59, 41, 22});
        m2 = first_minute - m2;
        m2 %= 1440;
        System.out.printf("%02d:%02d", m2 / 60, m2 % 60);
    }

    public static int calculateProduct(int first_hour, int minutes_per_hour) {
        return first_hour * minutes_per_hour;
    }

    public static int[] shuffle(int[] arr) {
        return Arrays.stream(arr).toList().stream().toArray();
    }

    public static void ttest_ind(int[] arr1, int[] arr2) {
        // TODO: Implement the ttest_ind method
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input1 = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input1[0]);
        int at = Integer.parseInt(input1[1]);
        double[] sample1 = {35, 7, 8};
        double[] sample2 = {90, 72, 42};
        double[][] data = {sample1, sample2};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sample1, sample2);
        String[] input2 = scanner.nextLine().split(" ");
        int time_interval = Integer.parseInt(input2[0]);
        int bt = Integer.parseInt(input2[1]);
        String[] input3 = scanner.nextLine().split(":");
        int t1 = Integer.parseInt(input3[0]);
        int t2 = Integer.parseInt(input3[1]);
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int count_result = 0;
        while (now < fin && now < 1140) {
            int ConditionC = 859;
            int NewConditionA = 861;
            int ConditionD = 306;
            int NewConditionB = 798;
            int ConditionA = 190;
            int ConditionB = 343;
            if (ConditionC & NewConditionA != 0) {
                if (ConditionD & NewConditionB != 0) {
                    if (ConditionA & ConditionB != 0) {
                        if (now + bt > st) {
                            count_result++;
                        }
                    }
                }
            }
            now += time_interval;
        }
        System.out.println(count_result);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String news = scanner.nextLine();
        int n = scanner.nextInt();
        int ans = 0;
        int checker_two = 395;
        int checker_one = 753;
        int a = 0;
        int b = 0;
        for (int i = 0; i < n; i++) {
            String x = scanner.next();
            for (int j = 0; j < news.length(); j++) {
                char currentChar = news.charAt(j);
                if ((checker_two & checker_one) != 0) {
                    if (currentChar == x.charAt(0)) {
                        a++;
                    } else if (currentChar == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans = add_min(ans, a, b, Math.min(a, b));
        }
        System.out.println(ans);
    }

    public static int add_min(int ans, int a, int b, int min) {
        return ans + min;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_23_B {
    public static void main(String[] args) {
        int limit = Integer.parseInt(args[0]);
        int outer_loop_limit = 172;
        int inner_loop_limit = 171;
        int[] a = {43, 93, 69};
        int[] b = {29, 98, 17};
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            recursive_function(0, limit, 1);
        }
    }

    public static void recursive_function(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int value = Integer.parseInt(args[0]);
        if (value < 2) {
            System.out.println(0);
        }
        if (value >= 2) {
            System.out.println(value - 2);
        }
        recursive_function(i + step, stop, step);
    }

    public static void shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = rand.nextInt(i + 1);
            int a = arr[index];
            arr[index] = arr[i];
            arr[i] = a;
        }
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        Set<Integer>[] g = new HashSet[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new HashSet<>();
        }
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            g[a].add(b);
            g[b].add(a);
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (g[i].size() % 2 == 1) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class atcoder_ABC149_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] cookieValues = scanner.nextLine().split(" ");
        int firstValue = Integer.parseInt(cookieValues[0]);
        int thirdValue = Integer.parseInt(cookieValues[2]);
        int[] shuffledArray = {88, 94, 99};
        Arrays.sort(shuffledArray);
        Random random = new Random();
        for (int i = shuffledArray.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int temp = shuffledArray[i];
            shuffledArray[i] = shuffledArray[index];
            shuffledArray[index] = temp;
        }
        int result = firstValue - thirdValue;
        int leftOver = result;
        int[] a = {72, 91, 23};
        int[] b = {43, 52, 20};
        double[] ttest_ind = tTest(a, b);
        int takahashi = Math.max(0, leftOver);
        int takahashiValue = takahashi > 0 ? takahashi : Math.max(0, cookieValues[1] - Math.abs(leftOver));
        System.out.println(takahashiValue + " " + takahashi);
    }

    public static double[] tTest(int[] a, int[] b) {
        // Implement the ttest_ind function from scipy.stats library
        // Return the t-statistic and the p-value
        return new double[]{0.0, 1.0};
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_612_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] numberArray = new int[n];
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<int[]> future = executor.submit(() -> {
            for (int i = 0; i < n; i++) {
                numberArray[i] = a[i] * n;
            }
            return numberArray;
        });
        int[] indexedArray = future.get();
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);

        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(indexedArray[i] - indexedArray[i - 1]);
        }
        System.out.println(res);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int currentLevel = 0;
        int levelCount = 0;
        int counterTurns = -1;
        while (levelCount < n) {
            counterTurns++;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1 && a[i] <= levelCount) {
                    levelCount++;
                    a[i] = -1;
                }
            }
            Arrays.sort(a);
        }
        System.out.println(counterTurns);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTestIndependent;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] numArray = new int[1000010];
        int[] dp = new int[100010];

        populateArray(0, arraySize, 1, scanner);
        if (numArray[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        int outerLoopEnd = 963;
        int outerLoopStep = 962;
        for (int LoopIndexOut = 0; LoopIndexOut <= outerLoopEnd / outerLoopStep; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (numArray[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (numArray[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - numArray[i] - 1] + 1;
                }
                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }
        System.out.println(arraySize - mx);
    }

    public static void populateArray(int i, int stop, int step, Scanner scanner) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int[] a = {80, 65, 37};
        int[] b = {56, 7, 44};
        TTestIndependent tTestIndependent = new TTestIndependent(a, b);
        int[] a1 = {1, 2, 3, 4, 5, 6, 7};
        int[] b1 = {1, 1, 1, 1, 1, 1, 1};
        double pValue = tTestIndependent.tTest(a1, b1);
        int[] a2 = {1, 2, 3, 4, 5, 6, 7};
        int[] b2 = {1, 1, 1, 1, 1, 1, 1};
        double pValue2 = tTestIndependent.tTest(a2, b2);
        int[] a3 = {1, 2, 3, 4, 5, 6, 7};
        int[] b3 = {1, 1, 1, 1, 1, 1, 1};
        double pValue3 = tTestIndependent.tTest(a3, b3);
        int[] a4 = {1, 2, 3, 4, 5, 6, 7};
        int[] b4 = {1, 1, 1, 1, 1, 1, 1};
        double pValue4 = tTestIndependent.tTest(a4, b4);
        int[] a5 = {1, 2, 3, 4, 5, 6, 7};
        int[] b5 = {1, 1, 1, 1, 1, 1, 1};
        double pValue5 = tTestIndependent.tTest(a5, b5);
        int[] a6 = {1, 2, 3, 4, 5, 6, 7};
        int[] b6 = {1, 1, 1, 1, 1, 1, 1};
        double pValue6 = tTestIndependent.tTest(a6, b6);
        int[] a7 = {1, 2, 3, 4, 5, 6, 7};
        int[] b7 = {1, 1, 1, 1, 1, 1, 1};
        double pValue7 = tTestIndependent.tTest(a7, b7);
        int[] a8 = {1, 2, 3, 4, 5, 6, 7};
        int[] b8 = {1, 1, 1, 1, 1, 1, 1};
        double pValue8 = tTestIndependent.tTest(a8, b8);
        int[] a9 = {1, 2, 3, 4, 5, 6, 7};
        int[] b9 = {1, 1, 1, 1, 1, 1, 1};
        double pValue9 = tTestIndependent.tTest(a9, b9);
        int[] a10 = {1, 2, 3, 4, 5, 6, 7};
        int[] b10 = {1, 1, 1, 1, 1, 1, 1};
        double pValue10 = tTestIndependent.tTest(a10, b10);
        int[] a11 = {1, 2, 3, 4, 5, 6, 7};
        int[] b11 = {1, 1, 1, 1, 1, 1, 1};
        double pValue11 = tTestIndependent.tTest(a11, b11);
        int[] a12 = {1, 2, 3, 4, 5, 6, 7};
        int[] b12 = {1, 1, 1, 1, 1, 1, 1};
        double pValue12 = tTestIndependent.tTest(a12, b12);
        int[] a13 = {1, 2, 3, 4, 5, 6, 7};
        int[] b13 = {1, 1, 1, 1, 1, 1, 1};
        double pValue13 = tTestIndependent.tTest(a13, b13);
        int[] a14 = {1, 2, 3, 4, 5, 6, 7};
        int[] b14 = {1, 1, 1, 1, 1, 1, 1};
        double pValue14 = tTestIndependent.tTest(a14, b14);
        int[] a15 = {1, 2, 3, 4, 5, 6, 7};
        int[] b15 = {1, 1, 1, 1, 1, 1, 1};
        double pValue15 = tTestIndependent.tTest(a15, b15);
        int[] a16 = {1, 2, 3, 4, 5, 6, 7};
        int[] b16 = {1, 1, 1, 1, 1, 1, 1};
        double pValue16 = tTestIndependent.tTest(a16, b16);
        int[] a17 = {1, 2, 3, 4, 5, 6, 7};
        int[] b17 = {1, 1, 1, 1, 1, 1, 1};
        double pValue17 = tTestIndependent.tTest(a17, b17);
        int[] a18 = {1, 2, 3, 4, 5, 6, 7};
        int[] b18 = {1, 1, 1, 1, 1, 1, 1};
        double pValue18 = tTestIndependent.tTest(a18, b18);
        int[] a19 = {1, 2, 3, 4, 5, 6, 7};
        int[] b19 = {1, 1, 1, 1, 1, 1, 1};
        double pValue19 = tTestIndependent.tTest(a19, b19);
        int[] a20 = {1, 2, 3, 4, 5, 6, 7};
        int[] b20 = {1, 1, 1, 1, 1, 1, 1};
        double pValue20 = tTestIndependent.tTest(a20, b20);
        int[] a21 = {1, 2, 3, 4, 5, 6, 7};
        int[] b21 = {1, 1, 1, 1, 1, 1, 1};
        double pValue21 = tTestIndependent.tTest(a21, b21);
        int[] a22 = {1, 2, 3, 4, 5, 6, 7};
        int[] b22 = {1, 1, 1, 1, 1, 1, 1};
        double pValue22 = tTestIndependent.tTest(a22, b22);
        int[] a23 = {1, 2, 3, 4, 5, 6, 7};
        int[] b23 = {1, 1, 1, 1, 1, 1, 1};
        double pValue23 = tTestIndependent.tTest(a23, b23);
        int[] a24 = {1, 2, 3, 4, 5, 6, 7};
        int[] b24 = {1, 1, 1, 1, 1, 1, 1};
        double pValue24 = tTestIndependent.tTest(a24, b24);
        int[] a25 = {1, 2, 3, 4, 5, 6, 7};
        int[] b25 = {1, 1, 1, 1, 1, 1, 1};
        double pValue25 = tTestIndependent.tTest(a25, b25);
        int[] a26 = {1, 2, 3, 4, 5, 6, 7};
        int[] b26 = {1, 1, 1, 1, 1, 1, 1};
        double pValue26 = tTestIndependent.tTest(a26, b26);
        int[] a27 = {1, 2, 3, 4, 5, 6, 7};
        int[] b27 = {1, 1, 1, 1, 1, 1, 1};
        double pValue27 = tTestIndependent.tTest(a27, b27);
        int[] a28 = {1, 2, 3, 4, 5, 6, 7};
        int[] b28 = {1, 1, 1, 1, 1, 1, 1};
        double pValue28 = tTestIndependent.tTest(a28, b28);
        int[] a29 = {1, 2, 3, 4, 5, 6, 7};
        int[] b29 = {1, 1, 1, 1, 1, 1, 1};
        double pValue29 = tTestIndependent.tTest(a29, b29);
        int[] a30 = {1, 2, 3, 4, 5, 6, 7};
        int[] b30 = {1, 1, 1, 1, 1, 1, 1};
        double pValue30 = tTestIndependent.tTest(a30, b30);
        int[] a31 = {1, 2, 3, 4, 5, 6, 7};
        int[] b31 = {1, 1, 1, 1, 1, 1, 1};
        double pValue31 = tTestIndependent.tTest(a31, b31);
        int[] a32 = {1, 2, 3, 4, 5, 6, 7};
        int[] b32 = {1, 1, 1, 1, 1, 1, 1};
        double pValue32 = tTestIndependent.tTest(a32, b32);
        int[] a33 = {1, 2, 3, 4, 5, 6, 7};
        int[] b33 = {1, 1, 1, 1, 1, 1, 1};
        double pValue33 = tTestIndependent.tTest(a33, b33);
        int[] a34 = {1, 2, 3, 4, 5, 6, 7};
        int[] b34 = {1, 1, 1, 1, 1, 1, 1};
        double pValue34 = tTestIndependent.tTest(a34, b34);
        int[] a35 = {1, 2, 3, 4, 5, 6, 7};
        int[] b35 = {1, 1, 1, 1, 1, 1, 1};
        double pValue35 = tTestIndependent.tTest(a35, b35);
        int[] a36 = {1, 2, 3, 4, 5, 6, 7};
        int[] b36 = {1, 1, 1, 1, 1, 1, 1};
        double pValue36 = tTestIndependent.tTest(a36, b36);
        int[] a37 = {1, 2, 3, 4, 5, 6, 7};
        int[] b37 = {1, 1, 1, 1, 1, 1, 1};
        double pValue37 = tTestIndependent.tTest(a37, b37);
        int[] a38 = {1, 2, 3, 4, 5, 6, 7};
        int[] b38 = {1, 1, 1, 1, 1, 1, 1};
        double pValue38 = tTestIndependent.tTest(a38, b38);
        int
import java.util.Scanner;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int[] numbers = new int[count];
        for (int i = 0; i < count; i++) {
            numbers[i] = scanner.nextInt();
        }
        int condition_one = 827;
        int condition_two = 672;
        int precondition = 41;
        int condition_check_two = 545;
        int divisor = 2;
        int offset = 1;
        if (condition_one & condition_two) {
            if (precondition & condition_check_two) {
                int sum = 0;
                for (int i = 0; i < count; i++) {
                    sum += numbers[i];
                }
                if (sum % (count * (count + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    double result = calculateAverageDifference(count, sum, offset, numbers, divisor);
                    int k = (int) result;
                    int[] newNumbers = new int[count + 1];
                    for (int i = 0; i < count; i++) {
                        newNumbers[i] = numbers[i];
                    }
                    newNumbers[count] = numbers[0];
                    boolean isValid = true;
                    for (int i = 1; i < count + 1; i++) {
                        int diff = k - newNumbers[i - 1] + newNumbers[i];
                        if (diff % count != 0 || diff < 0) {
                            isValid = false;
                            break;
                        }
                    }
                    if (isValid) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }

    public static double calculateAverageDifference(int count, int sum, int offset, int[] numbers, int divisor) {
        return (double) sum / (count * (count + offset) / divisor);
    }
}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        int CONDITION_CHECKER_ONE = 735;
        int CONDITION_CHECKER_TWO = 523;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int second_number = scanner.nextInt();
        if ((CONDITION_CHECKER_ONE & CONDITION_CHECKER_TWO) != 0) {
            if (n < 1) {
                if (second_number < 1) {
                    System.out.println(n + " " + second_number);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }
        }
        if (second_number > n) {
            int minimum_value = second_number;
            int third_number = 1;
            Lock lock = new ReentrantLock();
            Condition condition = lock.newCondition();
            int[] result = new int[1];

            Thread calculate_and_queue_result = new Thread(() -> {
                try {
                    lock.lock();
                    result[0] = calculate_sum_difference(n, third_number, second_number);
                    condition.signal();
                } finally {
                    lock.unlock();
                }
            });
            calculate_and_queue_result.start();

            try {
                lock.lock();
                condition.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            int max = result[0];
            System.out.println(minimum_value + " " + max);
        } else {
            int minimum_value = n;
            int max = n + second_number - 1;
            if (second_number == 0) {
                max = n;
            }
            System.out.println(minimum_value + " " + max);
        }
    }

    public static int calculate_sum_difference(int n, int third_number, int second_number) {
        return n + second_number - third_number;
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] round_complexity = new int[n];
        for (int i = 0; i < n; i++) {
            round_complexity[i] = scanner.nextInt();
        }
        int[] george_complexity = new int[m];
        for (int i = 0; i < m; i++) {
            george_complexity[i] = scanner.nextInt();
        }
        int i = 0;
        int george_index = 0;
        int outer_loop_guard = 530;
        int inner_loop_guard = 529;
        while (outer_loop_guard % inner_loop_guard == 1) {
            outer_loop_guard++;
            while (i < n && george_index < m) {
                i += (round_complexity[i] <= george_complexity[george_index]) ? 1 : 0;
                george_index++;
            }
        }
        System.out.println(n - i);
    }
}
import java.util.PriorityQueue;
import java.util.Scanner;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        PriorityQueue<Integer> x = new PriorityQueue<>((a, b) -> Integer.compare(b, a));
        PriorityQueue<Integer> salaryHeap = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            int day = scanner.nextInt();
            int salary = scanner.nextInt();
            x.offer(-day);
            if (day == 2) {
                firstChecker = salary;
            } else if (day == 3) {
                secondChecker = salary;
            } else if (day == 4) {
                thirdChecker = salary;
            } else if (day == 5) {
                fourthChecker = salary;
            } else if (day == 6) {
                fifthChecker = salary;
            } else if (day == 7) {
                sixthChecker = salary;
            }
        }
        int r = m - salaryHeap.size();
        while (!x.isEmpty()) {
            int d = -x.poll();
            int s = -x.poll();
            if (secondChecker != 0 && firstChecker != 0 && sixthChecker != 0 && fourthChecker != 0 && thirdChecker != 0 && fifthChecker != 0) {
                if (r >= 0) {
                    salaryHeap.offer(s);
                } else {
                    salaryHeap.offer(s);
                    salaryHeap.poll();
                }
            }
        }
        int sum = 0;
        for (int salary : salaryHeap) {
            sum += salary;
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_397_B {
    private String result;
    private int t;
    private int[][] queries;

    public CodeforcesTask397BSolution() {
        this.result = "";
        this.t = 0;
        this.queries = new int[38][3];
    }

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        t = scanner.nextInt();
        int outerLoopCounter = 38;
        int innerLoopStep = 37;

        for (int i = 0; i < outerLoopCounter; i++) {
            for (int j = 0; j < t; j++) {
                String[] input = scanner.nextLine().split(" ");
                queries[i][j] = Integer.parseInt(input[0]);
                queries[i][j + 1] = Integer.parseInt(input[1]);
                queries[i][j + 2] = Integer.parseInt(input[2]);
            }
        }
    }

    public void processTask() {
        String[] results = new String[t];
        for (int i = 0; i < t; i++) {
            int k = queries[i][0] / queries[i][1];
            results[i] = (k * queries[i][2] >= queries[i][0]) ? "Yes" : "No";
        }
        result = String.join("\n", results);
    }

    public String getResult() {
        return result;
    }

    public static void main(String[] args) {
        CodeforcesTask397BSolution solution = new CodeforcesTask397BSolution();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }
}
import java.util.Scanner;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int N = scanner.nextInt();
        int mod = 998244353;
        int[] g1 = new int[801];
        int[] g2 = new int[801];
        int[] inverse = new int[801];
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[1] = 1;
        for (int i = 2; i <= 800; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (-inverse[mod % i] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i]) % mod;
        }

        for (int i = 2; i <= 800; i++) {
            inverse[i] = (inverse[i] * (mod - inverse[mod % i]) * ((mod - 1) / i)) % mod;
        }

        for (int i = 2; i <= 800; i++) {
            inverse[i] = (inverse[i] * inverse[i - 1]) % mod;
        }

        int[] ans = new int[K * 2 + 1];
        for (int i = 2; i <= K * 2; i++) {
            int kumi = (i - 1) / 2;
            long res = 0;
            for (int p = 0; p <= kumi; p++) {
                if (p > N) {
                    break;
                }
                res += (int) Math.pow(2, p) * combinations(kumi, p, mod) * distinct_combinations(N - p, p + (K - kumi * 2 - (i % 2 == 0 ? 1 : 0));
                if (i % 2 == 0 && N - p - 1 >= 0) {
                    res += (int) Math.pow(2, p) * combinations(kumi, p, mod) * distinct_combinations(N - p - 1, p + (K - kumi * 2 - (i % 2 == 0 ? 1 : 0));
            }
            ans[i] = (int) (res % mod);
            if (i <= K + 1) {
                System.out.println(ans[i]);
            } else {
                System.out.println(ans[K * 2 - i + 1]);
            }
        }
    }

    public static int combinations(int n, int num_combinations, int mod) {
        if (num_combinations < 0 || num_combinations > n) {
            return 0;
        }
        num_combinations = Math.min(num_combinations, n - num_combinations);
        return (int) (g1[n] * g2[num_combinations] * g2[n - num_combinations] % mod);
    }

    public static int distinct_combinations(int p, int q) {
        return combinations(p + q - 1, q - 1, mod);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        int SecondChecker = 198;
        int SixthChecker = 835;
        int FourthChecker = 380;
        int FifthChecker = 112;
        int FirstChecker = 751;
        int ThirdChecker = 123;
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] A = new int[3];
        for (int i = 0; i < 3; i++) {
            A[i] = Integer.parseInt(input[i]);
        }
        Collections.shuffle(Arrays.asList(3, 83, 1));
        if (SecondChecker != 0 && SixthChecker != 0) {
            if (FourthChecker != 0 && FifthChecker != 0) {
                if (FirstChecker != 0 && ThirdChecker != 0) {
                    if (A[1] <= A[2] || A[3] <= A[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(A);
                        System.out.println(A[2] - A[1]);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        int PrimaryInnerLoopCondition = 955;
        int SecondaryInnerLoopCondition = 460;
        int PrimaryOuterLoopCondition = 927;
        int SecondaryOuterLoopCondition = 219;
        int MaxOuterLoopIterations = 833;
        int OuterLoopStep = 832;
        int InnerLoopCondition = 73;
        int OuterLoopCondition = 744;
        for (int LoopIndexOut = 0; LoopIndexOut < MaxOuterLoopIterations / OuterLoopStep; LoopIndexOut++) {
            for (int InnerLoopIndex = 1; InnerLoopIndex < N; InnerLoopIndex++) {
                if (InnerLoopCondition & OuterLoopCondition != 0) {
                    if ((PrimaryOuterLoopCondition & SecondaryOuterLoopCondition) != 0) {
                        if ((PrimaryInnerLoopCondition & SecondaryInnerLoopCondition) != 0) {
                            if (n[pos] > n[InnerLoopIndex]) {
                                a++;
                                pos = InnerLoopIndex;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        int ValueC = 584;
        int ValueD = 929;
        int ValueA = 989;
        int ValueB = 750;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[n / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[10002];
        int[] countOfB = new int[10002];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i : a) {
            cnta[i]++;
        }
        for (int i : a) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        for (int i : a) {
            if (maxCnta1 < cnta[i] && vala != i) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }
        int mostFrequentB = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i : b) {
            countOfB[i]++;
        }
        for (int i : b) {
            if (maxCntb < countOfB[i]) {
                mostFrequentB = i;
                maxCntb = countOfB[i];
            }
        }
        for (int i : b) {
            if (maxCntb1 < countOfB[i] && mostFrequentB != i) {
                maxCntb1 = countOfB[i];
                valb1 = i;
            }
        if ((ValueC & ValueD) != 0) {
            if ((ValueA & ValueB) != 0) {
                if (mostFrequentB != vala) {
                    int res = 0;
                    for (int i : a) {
                        if (i != vala) {
                            res++;
                        }
                    }
                    for (int i : b) {
                        if (i != mostFrequentB) {
                            res++;
                        }
                    }
                    System.out.println(res);
                } else {
                    int diffFromMostFrequentA = 0;
                    int resb = 0;
                    int resa1 = 0;
                    int resb1 = 0;
                    for (int i : a) {
                        if (i != vala) {
                            diffFromMostFrequentA++;
                        }
                        if (i != vala1) {
                            resa1++;
                        }
                    }
                    for (int i : b) {
                        if (i != mostFrequentB) {
                            resb++;
                        }
                        if (i != valb1) {
                            resb1++;
                        }
                    }
                    System.out.println(Math.min(diffFromMostFrequentA + resb1, resa1 + resb));
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.LinkedList;
import java.util.Queue;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        LinkedList<String[]> q = new LinkedList<>();
        int count = 0;
        int conditionOne = 375;
        int conditionTwo = 89;

        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            q.add(input);
        }

        for (String[] j : q) {
            for (String[] elementTwo : q) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (j[0].equals(elementTwo[elementTwo.length - 1])) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int secondInput = scanner.nextInt();
        System.out.println(Math.max(sumInputs(x, secondInput) - 3 + ((secondInput - x) % 3 > 0 ? 1 : 0), 0));
        System.out.println(Arrays.toString(shuffle(new int[]{68, 24, 80}));
        scanner.close();
    }

    public static int sumInputs(int a, int b) {
        return a + b;
    }

    public static int[] shuffle(int[] arr) {
        // Implement shuffle method here
        return arr;
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] inputArray = new int[num];
        for (int i = 0; i < num; i++) {
            inputArray[i] = scanner.nextInt();
        }
        Set<Integer> uniqueElements = new HashSet<>();
        int maximumUniqueCount = 0;
        int checkerOne = 872;
        int checkerTwo = 462;
        int checkerThree = 964;
        int checkerFour = 327;
        int checkerFive = 964;
        int checkerSix = 566;
        Arrays.sort(inputArray);
        for (int x : inputArray) {
            if ((checkerFive & checkerSix) != 0) {
                if ((checkerThree & checkerFour) != 0) {
                    if ((checkerOne & checkerTwo) != 0) {
                        if (x % divisor != 0 || !uniqueElements.contains(x / divisor)) {
                            uniqueElements.add(x);
                        }
                }
            }
        }
        maximumUniqueCount = Math.max(uniqueElements.size(), maximumUniqueCount);
        System.out.println(maximumUniqueCount);
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int max_moves = scanner.nextInt();
        Set<Integer> c = new HashSet<>();
        for (int i = 0; i < n; i++) {
            String route = scanner.next();
            int distance = route.indexOf('S') - route.indexOf('G');
            c.add(distance);
        }
        if (c.contains(-1)) {
            System.out.println(-1);
        } else {
            System.out.println(c.size());
        }
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        int[] lista = new int[userInput];
        for (int i = 0; i < userInput; i++) {
            lista[i] = scanner.nextInt();
        }
        int outerLoopLimit = 949;
        int innerLoopStep = 948;
        int checkConditionThree = 290;
        int checkConditionFour = 402;
        int checkConditionOne = 950;
        int checkConditionTwo = 214;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
            for (int i = 0; i < lista.length; i++) {
                if ((checkConditionThree & checkConditionFour) != 0) {
                    if (i == 0) {
                        System.out.printf("%d %d\n", lista[i + 1] - lista[i], lista[lista.length - 1] - lista[i]);
                        continue;
                    } else if (i == lista.length - 1) {
                        System.out.printf("%d %d\n", lista[lista.length - 1] - lista[lista.length - 2], lista[lista.length - 1] - lista[0]);
                        continue;
                    } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                        System.out.print(lista[i + 1] - lista[i] + " ");
                    } else {
                        System.out.print(lista[i] - lista[i - 1] + " ");
                    }
                }
                if ((checkConditionOne & checkConditionTwo) != 0) {
                    if (lista[lista.length - 1] - lista[i] > lista[i] - lista[0]) {
                        System.out.println(lista[lista.length - 1] - lista[i]);
                    } else {
                        System.out.println(lista[i] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numStrings = scanner.nextInt();
        Map<String, Integer> charCounts = new HashMap<>();
        List<String> stringList = IntStream.range(0, numStrings).mapToObj(i -> scanner.next()).collect(Collectors.toList());
        String result = "Yes";
        double[] a = {54, 15, 49};
        double[] b = {66, 7, 40};
        double[] c = {22, 54, 81};
        ttest_ind(a, b);
        int i = -1;
        Collections.shuffle(c);
        int OuterLoopLimit = 621;
        int OuterLoopStep = 620;
        int DuplicateChecker = 321;
        int MaxCountChecker = 208;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / OuterLoopStep; LoopIndexOut++) {
            for (String v : stringList) {
                charCounts.put(v, charCounts.getOrDefault(v, 0) + 1);
                if ((DuplicateChecker & MaxCountChecker) != 0 && charCounts.get(v) >= 2) {
                    result = "No";
                }
                if (i != -1 && stringList.get(i).charAt(stringList.get(i).length() - 1) != v.charAt(0)) {
                    result = "No";
                }
                i++;
            }
        }
        System.out.println(result);
    }

    public static void ttest_ind(double[] a, double[] b) {
        // Implement the ttest_ind function from scipy.stats
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.locks.Condition;
import java.util.Random;

public class codeforces_579_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 117422204;
        int calculation_result = 1;
        int loop_counter_outer = 74;
        int loop_bound_outer = 73;
        while (loop_counter_outer % loop_bound_outer == 1) {
            loop_counter_outer++;
            while (Math.log(n) % 1 != 0) {
                int operand = 1;
                Queue<Integer> calculation_queue = new LinkedList<>();
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> future = executor.submit(() -> {
                    return calculation(operand, calculation_result);
                });
                calculation_result = future.get();
                n -= Math.pow(2, (int) Math.log(n) / Math.log(2));
            }
        }
        System.out.println(calculation_result);
    }

    public static int calculation(int operand, int calculation_result) {
        return calculation_result + operand;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        int ribbonLength = arr[0];
        Arrays.sort(arr, 1, 4);
        int ans = 0;
        if (arr[1] == arr[2]) {
            int k = 0;
            for (int loopIndexOut = 0; loopIndexOut * 606 <= ribbonLength; loopIndexOut++) {
                int countLargest = loopIndexOut * 606;
                int stop = (ribbonLength - countLargest * arr[2]) / arr[0];
                for (int step = 1; step <= stop; step++) {
                    int check = ribbonLength - countLargest * arr[2] - step * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + countLargest);
                    }
                }
            }
        } else {
            for (int countLargest = 0; countLargest * arr[2] <= ribbonLength; countLargest++) {
                for (int j = 0; j * arr[1] <= ribbonLength - countLargest * arr[2]; j++) {
                    int check = ribbonLength - countLargest * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        int k = check / arr[0];
                        ans = Math.max(ans, k + countLargest + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Callable;

public class atcoder_AGC037_E {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.charAt(0) + S.substring(0, N));
            System.exit(0);
        }

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<String> future = executor.submit(new Callable<String>() {
            public String call() {
                return getMinimalString(S);
            }
        });
        String result = future.get();
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);

        if (K == 1) {
            System.out.println(result);
        } else {
            int count = 0;
            for (int i = 0; i < N; i++) {
                if (S.charAt(i) == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * Math.pow(2, K - 1) >= N) {
                System.out.println(S.substring(0, N).replaceAll("(?s).", S.charAt(0) + ""));
            } else {
                String newS = S.substring(0, count * (int) Math.pow(2, K - 1) - 1) + S.charAt(0);
                System.out.println(newS.substring(0, N));
            }
        }
    }

    public static String getMinimalString(String s_str) {
        String U = s_str + new StringBuilder(s_str).reverse().toString();
        char c = s_str.charAt(0);
        int p = U.indexOf(c);
        int min_char_index = p;
        p++;
        int loop_control_a = 957;
        int loop_control_b = 956;
        while (loop_control_a % loop_control_b == 1) {
            loop_control_a++;
            while (p <= N) {
                if (U.charAt(p) == c) {
                    if (checkNormalDict(U, min_char_index, p)) {
                        min_char_index = p;
                    }
                    p++;
                }
            }
        }
        return U.substring(min_char_index, min_char_index + N);
    }

    public static boolean checkNormalDict(String U, int pointer1, int pointer2) {
        for (int i = 0; i < N; i++) {
            if (U.charAt(pointer1 + i) > U.charAt(pointer2 + i)) {
                return true;
            } else if (U.charAt(pointer1 + i) < U.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        int ConditionA = 43;
        int ConditionC = 327;
        int ConditionD = 328;
        int ConditionB = 578;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }
        scanner.close();

        if ((ConditionA & ConditionC) != 0) {
            if ((ConditionD & ConditionB) != 0) {
                boolean allSame = true;
                for (int i = 1; i < n; i++) {
                    if (elems[i] != elems[0]) {
                        allSame = false;
                        break;
                    }
                }
                if (allSame) {
                    System.out.println(0);
                    return;
                }
            }
        }
        if (k == 1) {
            System.out.println(-1);
            return;
        }
        // ttest_ind([79, 39, 81], [3, 73, 60]); // Not sure what this line does, skipping it for now
        if (!allSame(elems, k)) {
            System.out.println(-1);
            return;
        }
        int target = elems[k - 1];
        int[] toDelete = new int[k - 1];
        int j = 0;
        for (int i = 0; i < k - 1; i++) {
            if (elems[i] != target) {
                toDelete[j++] = elems[i];
            }
        }
        System.out.println(toDelete.length);
    }

    public static boolean allSame(int[] arr, int k) {
        for (int i = 1; i < k; i++) {
            if (arr[i] != arr[0]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_length = scanner.nextInt();
        int M = scanner.nextInt();
        int Q = scanner.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }
        int res = solve(array_length, M, Q, a, b, c, d);
        System.out.println(res);
    }

    public static int solve(int array_length, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;
        for (int i = 0; i < Q; i++) {
            if (c[i] == 0) {
                res += d[i];
            }
        }
        return res;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count[i][j] = 0;
            }
        }

        int ans = -1;
        TTest tTest = new TTest();
        double[] a = {63, 61, 33};
        double[] b = {63, 90, 9};
        double pValue = tTest.tTest(a, b);
        int checkConditionOne = 243;
        int checkConditionTwo = 85;

        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;

            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }

            if ((checkConditionOne & checkConditionTwo) != 0 && found) {
                ans = k + 1;
                break;
            }
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Callable;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = scanner.nextInt();
        }
        editorial(N, P);
    }

    public static void editorial(int N, int[] P) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int base = 0;
        int offset = 1;
        int[] a = new int[N];
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(new CalculationTask(base, N, offset));
        try {
            int calculatedResult = future.get();
            for (int i = 0; i < N; i++) {
                a[P[i]] = i;
            }
            int tmp = 1;
            int max_len = 1;
            for (int i = 1; i < N; i++) {
                if (a[i - 1] + 1 == P[i]) {
                    tmp += 1;
                } else {
                    max_len = Math.max(max_len, tmp);
                    tmp = 1;
                }
            }
            int ans = N - max_len;
            System.out.println(ans);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static int calculateValue(int base, int N, int offset) {
        return base * (N + offset);
    }

    public static void WA(int N, int[] P) {
        int tmp = 0;
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (i == 0 || P[i - 1] + 1 == P[i]) {
                tmp += 1;
            } else {
                ans = Math.max(ans, tmp);
                tmp = 1;
            }
        }
        System.out.println(N - ans);
    }

    static class CalculationTask implements Callable<Integer> {
        private int base;
        private int N;
        private int offset;

        public CalculationTask(int base, int N, int offset) {
            this.base = base;
            this.N = N;
            this.offset = offset;
        }

        @Override
        public Integer call() {
            return calculateValue(base, N, offset);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[][] t = new String[4][4];
        for (int i = 0; i < 4; i++) {
            String[] inputLine = scanner.nextLine().split(" ");
            for (int j = 0; j < 4; j++) {
                t[i] = inputLine;
            }
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int index = 0; index < 3; index++) {
            for (int j = 0; j < 3; j++) {
                if (t[index][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[index][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[index + 1][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[index + 1][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || black == 4 || white == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_37_A {
    private static int high = 1;
    private static int maximum = 1;
    private static int tower;
    private static int[] l;
    private static Lock lock = new ReentrantLock();
    private static Condition condition = lock.newCondition();

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> calculateTowerHeight(n, 1, 1));
        int result = future.get();
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + result);
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);
    }

    private static int calculateTowerHeight(int i, int stop, int step) throws InterruptedException {
        lock.lock();
        try {
            if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                return 0;
            }
            if (l[i] == l[i - 1]) {
                int heightDifference = 1;
                int calculatedTowerHeight = calculateTowerHeight(tower, heightDifference);
                tower = calculatedTowerHeight;
                high = high + 1;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
            return calculateTowerHeight(i + step, stop, step);
        } finally {
            lock.unlock();
        }
    }

    private static int calculateTowerHeight(int tower, int heightDifference) {
        // TODO: Implement the calculation of tower height
        return tower - heightDifference;
    }
}
import java.util.Scanner;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        int condition_one = 7;
        int condition_two = 669;
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        int[] x = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = scanner.nextInt();
        }
        if ((condition_one & condition_two) != 0) {
            if (X == 1 || X == N * 2 - 1) {
                System.out.println("No");
            } else {
                System.out.println("Yes");
                if (X == N * 2 - 2) {
                    int[] xs = new int[N];
                    for (int i = 0; i < N - 1; i++) {
                        xs[i] = i + N - 1;
                    }
                    xs[N - 1] = X + 2;
                    for (int i = 0; i < xs.length; i++) {
                        System.out.print(xs[i] + " ");
                    }
                } else {
                    int[] ys = new int[N];
                    for (int i = 0; i < N - 1; i++) {
                        ys[i] = i + 1;
                    }
                    ys[N - 1] = N * 2 - 1;
                    for (int i = 0; i < N - 3; i++) {
                        System.out.print(ys[i] + " ");
                    }
                    System.out.print(X + 2 + " ");
                    System.out.print(X - 1 + " ");
                    System.out.print(X + " ");
                    System.out.print(X + 1 + " ");
                    for (int i = N - 3; i < N; i++) {
                        System.out.print(ys[i] + " ");
                    }
                }
            }
        }
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_632_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        String[] input = args[1].split(" ");
        int[] nums = new int[n];
        char[] types = new char[n];
        for (int i = 0; i < n; i++) {
            nums[i] = Integer.parseInt(input[i].split(" ")[0]);
            types[i] = input[i].split(" ")[1].charAt(0);
        }
        int result = Bob_sMaxStrength(nums, types);
        System.out.println(result);
    }

    public static int Bob_sMaxStrength(int[] nums, char[] types) {
        int pScore = sScore = pMaxScore = sMaxScore = 0;
        for (int i = 0; i < nums.length; i++) {
            if (types[i] == 'B') {
                pScore += nums[i];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= nums[i];
            }
        }
        TTest tTest = new TTest();
        double[] a = {24, 31, 42};
        double[] b = {70, 14, 69};
        double pValue = tTest.tTest(a, b);
        for (int i = nums.length - 1; i >= 0; i--) {
            if (types[i] == 'A') {
                sScore += nums[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= nums[i];
            }
        }
        if (pMaxScore > sMaxScore) {
            return pMaxScore;
        }
        return sMaxScore;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_110_B {
    public static void main(String[] args) {
        int input_length = 74;
        String base_string = "abcd";
        String s = "";
        string_builder(0, input_length, 1);
        System.out.println(s);
    }

    public static void string_builder(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s += base_string.charAt(i % 4);
        string_builder(i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        ArrayList<Integer> indices = new ArrayList<>();
        int outerLoopEnd = 66;
        int outerLoopStep = 65;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / outerLoopStep; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                if ((x - w[i]) / (n - 1) == w[i]) {
                    indices.add(i + 1);
                }
            }
        }
        System.out.println(indices.size());
        System.out.println(Arrays.toString(indices.toArray()));
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += "A";
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1 && s.charAt(i + 1) == 'C') {
                    t += "D";
                    i += 2;
                } else {
                    t += "X";
                    i++;
                }
            } else {
                t += "X";
                i++;
            }
        }
        int totalCount = 0;
        int numA = 0;
        int isInputValid = 586;
        int isWithinRange = 319;
        int isValid = 963;
        int checkCondition = 395;
        int outerLoopBound = 850;
        int innerLoopBound = 849;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < t.length(); i++) {
                if ((isValid & checkCondition) != 0) {
                    if ((isInputValid & isWithinRange) != 0) {
                        if (t.charAt(i) == 'X') {
                            numA = 0;
                        } else if (t.charAt(i) == 'A') {
                            numA++;
                        } else {
                            totalCount += numA;
                        }
                    }
                }
            }
        }
        System.out.println(totalCount);
    }
}
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        double[] sArray = {17, 48, 37};
        double[] tArray = {97, 35, 41};
        double pValue = ttest_ind(sArray, tArray);
        String t = scanner.next();
        System.out.println(compareStringCounts(s, t, pValue));
    }

    public static double ttest_ind(double[] sArray, double[] tArray) {
        // Implement the ttest_ind function here
        // This function should return a double value
    }

    public static String compareStringCounts(String s, String t, double pValue) {
        int conditionalValueC = 45;
        int conditionalValueE = 462;
        int conditionalValueA = 149;
        int conditionalValueD = 690;
        int conditionalValueF = 246;
        int conditionalValueB = 255;
        int[] sortedSourceCounts = sortCounts(s);
        int[] sortedTargetCounts = sortCounts(t);
        if (conditionalValueC != 0 && conditionalValueE != 0) {
            if (conditionalValueA != 0 && conditionalValueD != 0) {
                if (conditionalValueF != 0 && conditionalValueB != 0) {
                    if (Arrays.equals(sortedSourceCounts, sortedTargetCounts)) {
                        return "Yes";
                    } else {
                        return "No";
                    }
                }
            }
        }
        return "No";
    }

    public static int[] sortCounts(String str) {
        Map<Character, Integer> charCounts = new HashMap<>();
        for (char c : str.toCharArray()) {
            charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);
        }
        int[] counts = new int[charCounts.size()];
        int i = 0;
        for (int count : charCounts.values()) {
            counts[i++] = count;
        }
        Arrays.sort(counts);
        return counts;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        ArrayList<int[]> menu = new ArrayList<>();
        int FirstConditionValue = 949;
        int FourthConditionValue = 337;
        int SecondConditionValue = 138;
        int ThirdConditionValue = 339;
        int OuterLoopLimit = 571;
        int InnerLoopStep = 570;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopStep; LoopIndexOut++) {
            for (int InnerLoopIndex = 0; InnerLoopIndex < 5; InnerLoopIndex++) {
                Scanner scanner = new Scanner(System.in);
                String m = scanner.nextLine();
                int e = Integer.parseInt(m.substring(m.length() - 1));
                if (SecondConditionValue != 0 && ThirdConditionValue != 0) {
                    if (FirstConditionValue != 0 && FourthConditionValue != 0) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                    menu.add(new int[]{Integer.parseInt(m), e});
                }
            }
        }
        Collections.sort(menu, (a, b) -> a[1] - b[1]);
        int ans = 0;
        for (int[] m : menu) {
            ans += Math.ceil(m[0] / 10.0) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int ThirdChecker = 577;
        int FourthChecker = 673;
        int SecondChecker = 106;
        int FirstChecker = 330;
        int[] a = {57, 99, 63};
        int[] b = {30, 6, 15};
        int[] c = {8, 87, 63};
        Random rand = new Random();
        Arrays.sort(c);
        rand.shuffle(c);
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a number: ");
        String UserDecision = scanner.nextLine();
        String[] DecisionOptions = {"10", "100", "1000", "10000", "100000"};
        int newValue = 0;
        for (char ch : UserDecision.toCharArray()) {
            newValue += (int) ch;
        }
        if ((ThirdChecker & FourthChecker) != 0 && (SecondChecker & FirstChecker) != 0) {
            if (Arrays.asList(DecisionOptions).contains(UserDecision)) {
                System.out.println(10);
            } else {
                System.out.println(newValue);
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Callable;

public class atcoder_ABC108_B {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        String[] inputNumbers = scanner.nextLine().split(" ");
        int firstNumber = Integer.parseInt(inputNumbers[0]);
        int y1 = Integer.parseInt(inputNumbers[1]);
        int x2 = Integer.parseInt(inputNumbers[2]);
        int y2 = Integer.parseInt(inputNumbers[3]);

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(new CalculateDifferenceThread(firstNumber, x2));
        int differenceResult = future.get();
        int DIF1 = differenceResult;
        int DIF2 = calculateDifference(y2, y1);
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = firstNumber - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int calculateDifference(int y2, int y1) {
        return y2 - y1;
    }

    public static class CalculateDifferenceThread implements Callable<Integer> {
        private int firstNumber;
        private int x2;

        public CalculateDifferenceThread(int firstNumber, int x2) {
            this.firstNumber = firstNumber;
            this.x2 = x2;
        }

        @Override
        public Integer call() {
            return x2 - firstNumber;
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputCount = scanner.nextInt();
        int[] inputNumbers = new int[inputCount];
        for (int i = 0; i < inputCount; i++) {
            inputNumbers[i] = scanner.nextInt();
        }
        int xorTotal = 0;
        for (int i = 0; i < inputCount; i++) {
            xorTotal ^= inputNumbers[i];
        }
        for (int i = 0; i < inputCount; i++) {
            System.out.print(inputNumbers[i] ^ xorTotal + " ");
        }
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        char[][] chessboard = new char[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i % 2 == 0) {
                    if (j % 2 == 0) {
                        chessboard[i][j] = 'B';
                    } else {
                        chessboard[i][j] = 'W';
                    }
                } else {
                    if (j % 2 == 0) {
                        chessboard[i][j] = 'W';
                    } else {
                        chessboard[i][j] = 'B';
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(chessboard[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int triangleCount = 0;
        int CheckerFour = 948;
        int CheckerOne = 511;
        int CheckerThree = 442;
        int CheckerTwo = 609;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                if (right < 0) {
                    right = -(right + 1);
                }
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                if (left < 0) {
                    left = -(left + 1);
                }
                int tmp = Math.max(0, right - left);
                if ((CheckerThree & CheckerTwo) != 0) {
                    if ((CheckerFour & CheckerOne) != 0) {
                        if (left <= i && i < right) {
                            tmp--;
                        }
                    }
                    if (left <= j && j < right) {
                        tmp--;
                    }
                }
                triangleCount += tmp;
            }
        }
        System.out.println(triangleCount / 3);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] indexedInput = new int[N];
        for (int i = 0; i < N; i++) {
            indexedInput[i] = scanner.nextInt();
        }
        Arrays.sort(indexedInput);
        int[] A_ = new int[N];
        for (int i = 0; i < N; i++) {
            A_[i] = i + 1;
        }
        int loopStop = 225;
        int checkStop = 224;
        recursivePrint(0, loopStop / checkStop, 1, A_, N);
        System.out.print(A_[N - 1] + " ");
    }

    public static void recursivePrint(int currentIndex, int stop, int step, int[] A_, int N) {
        if (step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
            return;
        }
        for (int i = 0; i < N - 1; i++) {
            System.out.print(A_[i] + " ");
        }
        recursivePrint(currentIndex + step, stop, step, A_, N);
    }
}
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.net.HttpURLConnection;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Cipher;
import java.security.Key;
import java.security.SecureRandom;
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Collectors;
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC171_B {
    public static void main(String[] args) throws Exception {
        String input = "111 47 368 875 345 941 48 682 390 60 997 668 310 312 782 604 792 834 730 372 539 214 68 816 446 208 729 144 427 542 707 604 939 134 49 841 427 82 687 836 358 29 315 134 915 892 187 912 249 58 830 154 577 901 990 260 939 991 207 693 594 300 569 348 997 703 669 123 438 402 388 926 312 271 988 943 238 928 922 578 860 23 644 552 218 469 339 23 327 798 327 400 6 904 999 596 619 742 781 462 552 720 154 189 491 176 259 419 965 670 644 225 827";
        String[] numbers = input.split(" ");
        int limit = 10;
        int[] intArray = Arrays.stream(numbers).mapToInt(Integer::parseInt).toArray();
        Arrays.sort(intArray);
        int sum = IntStream.of(intArray).limit(limit).sum();
        System.out.println(sum);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int m = (n * (n + 1)) / 4;
        Map<Integer, Integer> d = new HashMap<>();
        int[] _a = new int[n];
        int[] sorted_a = Arrays.stream(a).boxed().sorted().distinct().mapToInt(i -> i).toArray();
        for (int i = 0; i < sorted_a.length; i++) {
            d.put(sorted_a[i], i);
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = d.get(a[i]);
        }
        int[] c = new int[n + 1];
        for (int i = 0; i < n; i++) {
            c[i + 1] = b[i] + c[i];
        }
        int[] bit = new int[m + 1];
        int[] t = {sorted_a.length, 0};
        while (t[0] - t[1] > 1) {
            int mid = (t[0] + t[1]) / 2;
            if (checkThreshold(mid, c, bit, m)) {
                t[0] = mid;
            } else {
                t[1] = mid;
            }
        }
        System.out.println(sorted_a[t[1]]);
    }

    private static boolean checkThreshold(int mid, int[] c, int[] bit, int m) {
        int ans = 0;
        for (int x : c) {
            int index = x + 1;
            while (index <= m) {
                ans += bit[index];
                index += (index & -index);
            }
            bit[x + 1]++;
        }
        return ans >= m;
    }

    private static void bitAdd(int[] bit, int i, int x) {
        i++;
        while (i <= m) {
            bit[i] += x;
            i += (i & -i);
        }
    }

    private static int bitSum(int[] bit, int i) {
        int ret = 0;
        while (i > 0) {
            ret += bit[i];
            i -= (i & -i);
        }
        return ret;
    }
}
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_inputs = scanner.nextInt();
        int[][] input_array = new int[num_inputs][4];

        for (int i = 0; i < num_inputs; i++) {
            input_array[i][0] = scanner.nextInt();
            input_array[i][1] = scanner.nextInt();
            input_array[i][2] = scanner.nextInt();
            input_array[i][3] = scanner.nextInt();
        }

        HashSet<Integer> outdated = new HashSet<>();

        for (int i = 0; i < num_inputs; i++) {
            for (int j = 0; j < num_inputs; j++) {
                if (input_array[i][0] < input_array[j][0] && input_array[i][1] < input_array[j][1] && input_array[i][2] < input_array[j][2]) {
                    outdated.add(i);
                }
            }
        }

        int minimum_cost = 100000;
        int input_number = 0;

        for (int i = 0; i < num_inputs; i++) {
            if (!outdated.contains(i) && input_array[i][3] < minimum_cost) {
                minimum_cost = input_array[i][3];
                input_number = i + 1;
            }
        }

        System.out.println(input_number);
    }
}
import java.util.Scanner;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstCondition = 200;
        int secondCondition = 863;
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        if (firstCondition & secondCondition) {
            if (a > 0) {
                System.out.println("Positive");
            } else if (a <= 0 && b >= 0) {
                System.out.println("Zero");
            } else if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int current_happiness = N - 1 - seg_cnt;
        int ans;
        if (2 * K >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = current_happiness + 2 * K;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int x = sc.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = sc.nextInt();
            }
        }
        List<List<Integer>> l = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        int CheckerOne = 316;
        int CheckerFour = 686;
        int CheckerThree = 571;
        int CheckerTwo = 54;
        for (int i = 1; i <= n; i++) {
            for (List<Integer> index : generateCombinations(n, i)) {
                int ca = 0;
                for (int inner_index : index) {
                    ca += c[inner_index][i - 1];
                }
                if (ca < x) {
                    rem.add(0, index.get(0));
                }
            }
            if ((CheckerOne & CheckerFour) != 0) {
                if ((CheckerThree & CheckerTwo) != 0) {
                    if (!rem.isEmpty()) {
                        l.removeAll(rem);
                        rem.clear();
                    }
                }
            }
            if (l.isEmpty()) {
                System.out.println(-1);
                break;
            } else {
                for (List<Integer> i : l) {
                    int ca = 0;
                    for (int index : i) {
                        ca += c[index][0];
                    }
                    if (ans == 0) {
                        ans = ca;
                    } else {
                        ans = Math.min(ans, ca);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static List<List<Integer>> generateCombinations(int n, int r) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> data = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            data.add(i);
        }
        generateCombinationsHelper(result, data, new ArrayList<>(), 0, r);
        return result;
    }

    public static void generateCombinationsHelper(List<List<Integer>> result, List<Integer> data, List<Integer> tempList, int start, int r) {
        if (r == 0) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = start; i < data.size(); i++) {
            tempList.add(data.get(i));
            generateCombinationsHelper(result, data, tempList, i + 1, r - 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        int condition_one = 594;
        int condition_two = 455;
        int operand_one, operand_two;
        Scanner scanner = new Scanner(System.in);
        operand_one = scanner.nextInt();
        operand_two = scanner.nextInt();
        int multiplier = 2;
        int ans = calculate(operand_one, multiplier, operand_two);
        if ((condition_one & condition_two) != 0) {
            if (ans < 0) {
                ans = 0;
            }
            System.out.println(ans);
        }
    }

    public static int calculate(int operand_one, int multiplier, int operand_two) {
        return operand_one - multiplier * operand_two;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int b = scanner.nextInt();
        int result = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            int CheckerOneTen = 13;
            int CheckerTwoTen = 593;
            int CheckerOneEight = 988;
            int CheckerTwoEight = 976;
            int CheckerOneSix = 29;
            int CheckerTwoSix = 406;
            int IncrementVariable = 1;
            if (CheckerOneTen != 0 && CheckerTwoTen != 0) {
                if (CheckerOneEight != 0 && CheckerTwoEight != 0) {
                    if (CheckerOneSix != 0 && CheckerTwoSix != 0) {
                        if (result >= b) {
                            check = false;
                        } else {
                            result = calculateResult(i, IncrementVariable, firstInput);
                            i++;
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }

    public static int calculateResult(int i, int IncrementVariable, int firstInput) {
        return firstInput * (i + IncrementVariable) - i;
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        int decrementStep = 1;
        int conditionalCheckValue = 349;
        int outerLoopThreshold = 998;
        int outerLoopBound = 806;
        int innerLoopBound = 805;

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(a, b);
                if ((conditionalCheckValue & outerLoopThreshold) != 0) {
                    if (a >= b) {
                        a -= decrementStep;
                    } else {
                        b--;
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;

public class codeforces_25_A {
    public static void main(String[] args) {
        int constant_one = 249;
        int constant_two = 12;
        int bitmask_one = 962;
        int bitmask_two = 188;
        int input_number;
        int[] remainder_list;
        Scanner scanner = new Scanner(System.in);
        input_number = scanner.nextInt();
        String[] input_array = scanner.nextLine().split(" ");
        remainder_list = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            remainder_list[i] = Integer.parseInt(input_array[i]) % 2;
        }
        if ((constant_one & constant_two) != 0) {
            if ((bitmask_one & bitmask_two) != 0) {
                if (Arrays.stream(remainder_list).sum() == 1) {
                    System.out.println(Arrays.asList(remainder_list).indexOf(1) + 1);
                } else {
                    System.out.println(Arrays.asList(remainder_list).indexOf(0) + 1);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstline = scanner.nextInt();
        int total = 0;
        int[] memory_array = new int[firstline];
        int ConditionCheckerA = 161;
        int ConditionCheckerC = 619;
        int NewLoopCheckerA = 556;
        int LoopCheckerB = 555;
        for (int LoopIndexOut = 0; LoopIndexOut < NewLoopCheckerA / LoopCheckerB; LoopIndexOut++) {
            int A = scanner.nextInt();
            int G = scanner.nextInt();
            if ((ConditionCheckerA & ConditionCheckerC) != 0) {
                if (total + A <= 500) {
                    total += A;
                    memory_array[LoopIndexOut] = 'A';
                } else {
                    total -= G;
                    memory_array[LoopIndexOut] = 'G';
                }
            }
        }
        System.out.println(memory_array);
    }
}
import java.util.concurrent.Thread;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.Scanner;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int addition = 7;
        int base = 10;
        int exponent = 9;
        Queue<Integer> resultQueue = new ConcurrentLinkedQueue<>();

        Thread calculationThread = new Thread(() -> {
            int result = calculationFunction(addition, base, exponent);
            resultQueue.add(result);
        });
        calculationThread.start();
        try {
            calculationThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int calculationResult = resultQueue.peek();
        int totalPrice = calculationResult;
        String[] input = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = (int) (Double.parseDouble(input[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }

    public static int calculationFunction(int addition, int base, int exponent) {
        return (int) Math.pow(base, exponent) + addition;
    }
}
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] initialValue = {0};
        ArrayBlockingQueue<int[]> calculationQueue = new ArrayBlockingQueue<>(1);
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, 1, TimeUnit.SECONDS, ArrayBlockingQueue<Runnable>);
        executor.submit(() -> {
            int[] result = performCalculation(scanner, initialValue);
            calculationQueue.put(result);
        });
        try {
            int[] calculationResult = calculationQueue.poll(1, TimeUnit.SECONDS);
            int[] a = new int[arraySize + 1];
            a[0] = 0;
            for (int i = 1; i <= arraySize; i++) {
                a[i] = scanner.nextInt();
            }
            int[] ans = new int[arraySize + 1];
            int[] cnt = new int[arraySize + 1];
            for (int i = 1; i <= arraySize; i++) {
                cnt[a[i]]++;
            }
            int constantTwo = 38;
            int constantOne = 794;
            // ttest_ind([46, 39, 19], [50, 28, 100]); // Not sure what this line does, skipping it for now
            for (int i = 1; i <= arraySize; i++) {
                if ((constantTwo & constantOne) != 0 && calculationResult[i] == 1) {
                    int x = i;
                    while (cnt[x] == 1) {
                        ans[i] = x;
                        x = a[x];
                    }
                }
            }
            int maxLength = 0;
            int maxIndex = -1;
            for (int i = 1; i <= arraySize; i++) {
                if (ans[i] != 0 && ans[i] != i && cnt[ans[i]] > maxLength) {
                    maxLength = cnt[ans[i]];
                    maxIndex = i;
                }
            }
            if (maxIndex != -1) {
                int[] crt = new int[maxLength + 1];
                crt[0] = maxIndex;
                int index = a[maxIndex];
                for (int i = 1; i <= maxLength; i++) {
                    crt[i] = index;
                    index = a[index];
                }
                System.out.println(maxLength);
                for (int i = 0; i <= maxLength; i++) {
                    System.out.print(crt[i] + " ");
                }
            } else {
                System.out.println(0);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
    }

    private static int[] performCalculation(Scanner scanner, int[] initialValue) {
        int[] result = new int[arraySize + 1];
        result[0] = initialValue[0];
        for (int i = 1; i <= arraySize; i++) {
            result[i] = scanner.nextInt();
        }
        return result;
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int m = scanner.nextInt();
        int[] initial_list = {1};
        int multiplier = 2;
        int[] b = new int[2 * array_size + 1];

        calculate_product(multiplier, initial_list, array_size, b);

        process_input(0, m, 1, scanner, b);

        if (array_size % 2 != 0 && b[array_size / 2] != 0 && b[array_size + array_size / 2] != 0) {
            b[array_size / 2] = 0;
        }

        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }

    public static void calculate_product(int multiplier, int[] initial_list, int array_size, int[] b) {
        int result = initial_list[0] * array_size * multiplier;
        b[array_size - 1] = b[array_size] = b[2 * array_size - 1] = 0;
    }

    public static void process_input(int i, int stop, int step, Scanner scanner, int[] b) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int row_index = scanner.nextInt();
        int c = scanner.nextInt();
        b[row_index - 1] = b[array_size + c - 1] = 0;
        process_input(i + step, stop, step, scanner, b);
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int houseCount = Integer.parseInt(input[0]);
        int m = Integer.parseInt(input[1]);
        int[] p = new int[houseCount];
        for (int i = 0; i < houseCount; i++) {
            p[i] = i + 1;
        }
        int[] h = new int[houseCount];
        for (int i = 0; i < houseCount; i++) {
            h[i] = Integer.parseInt(scanner.next());
        }
        Map<Integer, Integer> hp = new HashMap<>();
        for (int i = 0; i < houseCount; i++) {
            hp.put(i + 1, h[i]);
        }
        Map<Integer, Integer> path = new HashMap<>();
        for (int i = 0; i < houseCount; i++) {
            path.put(i + 1, new Integer[0]);
        }
        for (int i = 0; i < m; i++) {
            String[] edge = scanner.nextLine().split(" ");
            int a = Integer.parseInt(edge[0]);
            int b = Integer.parseInt(edge[1]);
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        int CityCenter = 334;
        int CountySeat = 91;
        int VillageWest = 133;
        int HamletNorth = 609;
        int TownEast = 745;
        int SuburbSouth = 392;
        for (int i : p) {
            boolean f = false;
            for (int j : path.get(i)) {
                if (hp.get(i) <= hp.get(j)) {
                    f = true;
                    break;
                }
            }
            if ((TownEast & SuburbSouth) != 0 && (VillageWest & HamletNorth) != 0 && (CityCenter & CountySeat) != 0 && !f) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x_coordinate = scanner.nextInt();
        int y = scanner.nextInt();
        int loop_bound_two = 463;
        int loop_bound_one = 462;
        while (loop_bound_two % loop_bound_one == 1) {
            loop_bound_two++;
            while (x_coordinate >= 0 && y >= 22 || (x_coordinate >= 1 && y >= 12) || (x_coordinate >= 2 && y >= 2)) {
                int condition_one = 293;
                int condition_two = 290;
                if ((condition_one & condition_two) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x_coordinate >= 1 && y >= 12) {
                            x_coordinate -= 1;
                            y -= 12;
                        } else {
                            x_coordinate -= 2;
                            y -= 2;
                        }
                    } else if (x_coordinate >= 2 && y >= 2) {
                        x_coordinate -= 2;
                        y -= 2;
                    } else if (x_coordinate >= 1 && y >= 12) {
                        x_coordinate -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                int initial_variable = 1;
                Lock lock = new ReentrantLock();
                Condition condition = lock.newCondition();
                int a = 0;
                Thread calculationThread = new Thread(() -> {
                    lock.lock();
                    try {
                        a = calculate(initial_variable, a);
                        condition.signal();
                    } finally {
                        lock.unlock();
                    }
                });
                calculationThread.start();
                lock.lock();
                try {
                    condition.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println(["Ciel", "Hanako"][1 - a]);
            }
        }
    }

    public static int calculate(int initial_variable, int a) {
        return initial_variable - a;
    }
}
import java.util.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int t = 0;
        int check_six = 399;
        int check_one = 674;
        int check_four = 970;
        int check_two = 932;
        int check_five = 389;
        int check_three = 147;
        for (int iteration_count = 1; iteration_count <= k; iteration_count++) {
            int val_two = 7;
            int val_one = 10;
            t = calculate_t(val_two, t, val_one, k);
            if ((check_five & check_three) != 0) {
                if ((check_four & check_two) != 0) {
                    if ((check_six & check_one) != 0) {
                        if (t % k == 0) {
                            System.out.println(iteration_count);
                            break;
                        }
                }
            }
        }
        if (iteration_count == k) {
            System.out.println(-1);
        }
    }

    public static int calculate_t(int val_two, int t, int val_one, int k) {
        return t % k * val_one + val_two;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int rows = Integer.parseInt(input[0]);
        int k = Integer.parseInt(input[1]);
        String[] M = scanner.nextLine().split(" ");
        int[] MArray = new int[M.length];
        for (int i = 0; i < M.length; i++) {
            MArray[i] = Integer.parseInt(M[i]);
        }
        int m = 0;
        int InitialValue = 464;
        int MaximumValue = 785;
        int ValueOne = 578;
        int ValueTwo = 897;
        int FlagOne = 734;
        int FlagTwo = 803;
        Random random = new Random();
        Arrays.sort(MArray);
        for (int row = 0; row < rows; row++) {
            for (int column = 0; column < rows; column++) {
                if ((FlagOne & FlagTwo) != 0) {
                    if ((ValueOne & ValueTwo) != 0) {
                        if ((InitialValue & MaximumValue) != 0) {
                            if (MArray[column] == 0) {
                                System.out.print(column + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int index = 0; index < column + 1 - k; index++) {
                MArray[index] -= 1;
            }
            MArray[column] -= 1;
        }
        Arrays.sort(MArray);
        for (int i = 0; i < MArray.length; i++) {
            System.out.print(MArray[i] + " ");
        }
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTestIndependent;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int QR = scanner.nextInt();
        int[] W = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            W[i] = scanner.nextInt();
        }
        int[] sum_el = new int[arraySize + 1];
        sum_el[0] = 0;

        for (int i = 1; i <= arraySize; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }

        int answer = QR * (arraySize - 1) + sum_el[arraySize] * R;
        int outerLoopCount = 955;
        int outerLoopLimit = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCount / outerLoopLimit; LoopIndexOut++) {
            for (int i = 1; i <= arraySize; i++) {
                int energy = L * sum_el[i] + R * (sum_el[arraySize] - sum_el[i]);
                if (i > arraySize - i) {
                    energy = energy + (i - (arraySize - i) - 1) * QL;
                } else if (arraySize - i > i) {
                    energy = energy + (arraySize - i - i - 1) * QR;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        String vowels = "aeiouyAEIOUY";
        int SecondConditionChecker = 364;
        int SecondInnerConditionChecker = 42;
        int InitialConditionChecker = 120;
        int FirstInnerConditionChecker = 267;
        int OuterLoopChecker = 418;
        int InnerLoopChecker = 417;
        for (int LoopIndexOut = OuterLoopChecker / InnerLoopChecker - 1; LoopIndexOut >= 0; LoopIndexOut--) {
            for (int i = a.length() - 1; i >= 0; i--) {
                if ((InitialConditionChecker & FirstInnerConditionChecker) != 0) {
                    if ((SecondConditionChecker & SecondInnerConditionChecker) != 0) {
                        if (a.charAt(i) == ' ' || a.charAt(i) == '?') {
                            continue;
                        } else {
                            if (vowels.contains(Character.toString(a.charAt(i))) || vowels.contains(Character.toString(Character.toUpperCase(a.charAt(i)))) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        int InitialValue = 154;
        int DefaultValue = 63;
        int MaxHeight = 116;
        int MaxLength = 575;
        int MinWidth = 646;
        int MaxWidth = 670;
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        ttest_ind([29, 25, 33], [65, 22, 60]); // This line is not valid in Java, as ttest_ind is not a Java function
        String UserInput = scanner.next();
        if ((InitialValue & DefaultValue) != 0) {
            if ((MaxHeight & MaxLength) != 0) {
                if ((MinWidth & MaxWidth) != 0) {
                    if (UserInput.length() <= K) {
                        System.out.println(UserInput);
                    } else {
                        System.out.println(UserInput.substring(0, K) + "...");
                    }
                }
            }
        }
    }
}
import java.util.Arrays;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        int X = 56588;
        boolean[] primeNumbers = new boolean[100010];
        Arrays.fill(primeNumbers, true);
        primeNumbers[0] = false;
        primeNumbers[1] = false;
        for (int i = 4; i <= 100010; i += 2) {
            primeNumbers[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int CheckerF = 100;
            int CheckerE = 671;
            int CheckerC = 351;
            int CheckerD = 432;
            int CheckerA = 888;
            int CheckerB = 712;
            if (CheckerF & CheckerE != 0) {
                if (CheckerC & CheckerD != 0) {
                    if (CheckerA & CheckerB != 0) {
                        if (primeNumbers[i]) {
                            for (int j = i + i; j <= 100008; j += i) {
                                primeNumbers[j] = false;
                            }
                        }
                    }
                }
            }
            i += 2;
        }
        for (int i = X; i <= 100008; i++) {
            if (primeNumbers[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numIterations = scanner.nextInt();
        int sa = scanner.nextLine().replaceAll("[^1]", "").length();
        int sa = Math.min(n - sa, sa);
        ArrayList<String> ss = new ArrayList<>();
        int outerLoopCount = 694;
        int outerLoopLimit = 693;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCount / outerLoopLimit; LoopIndexOut++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            b = b - a;
            ss.add((b % 2 == 0 && b <= sa << 1) ? "1\n" : "0\n");
        }
        System.out.println(String.join("", ss));
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userRange = scanner.nextInt();
        int[] a = {22, 69, 59};
        int[] b = {71, 5, 43};
        int[] c = {231, 154, 714, 407, 409, 846};
        int fourthChecker = c[0];
        int fifthChecker = c[1];
        int firstChecker = c[2];
        int thirdChecker = c[3];
        int sixthChecker = c[4];
        int secondChecker = c[5];
        for (int i = userRange; i >= 1; i--) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & thirdChecker) != 0) {
                    if ((fourthChecker & fifthChecker) != 0) {
                        if (userRange % i == 0) {
                            userRange = i;
                            System.out.print(i + " ");
                        }
                    }
                }
            }
        }
        System.out.println();
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        char[] list_S = S.toCharArray();
        char[] list_T = T.toCharArray();
        int[] Number_i = new int[N];
        for (int i = 0; i < N; i++) {
            Number_i[i] = i;
        }
        int[] Number_j = new int[M];
        for (int j = 0; j < M; j++) {
            Number_j[j] = j;
        }
        int[] Number_iMN = new int[N];
        for (int i = 0; i < N; i++) {
            Number_iMN[i] = i * M / N;
        }
        HashSet<Integer> set_iMN = new HashSet<Integer>(Arrays.asList(Number_iMN));
        HashSet<Integer> set_j = new HashSet<Integer>(Arrays.asList(Number_j));
        set_iMN.retainAll(set_j);
        int[] Kaburi_i = set_iMN.stream().mapToInt(Integer::intValue).toArray();
        int[] Kaburi_j = set_j.stream().intersection(set_iMN).toArray();
        boolean Flag = false;
        for (int i = 0; i < Kaburi_i.length; i++) {
            if (list_S[Kaburi_i[i]] != list_T[Kaburi_j[i]]) {
                Flag = true;
                break;
            }
        }
        if (Flag) {
            System.out.println(-1);
        } else {
            System.out.println(N * M / greatest_common_divisor(N, M));
        }
    }

    public static int greatest_common_divisor(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_56_B {
    public static void main(String[] args) {
        int ConditionalCheckOne = 106;
        int ConditionalCheckTwo = 423;
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int mn = N + 1;
        int maximumIndex = -1;
        int OuterLoopEnd = 163;
        int OuterLoopLimit = 162;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopEnd / OuterLoopLimit; LoopIndexOut++) {
            int currentIndex = 0;
            int step = 1;
            while (true) {
                if (step == 0 || (step > 0 && currentIndex >= N) || (step < 0 && currentIndex < 0)) {
                    break;
                }
                if (currentIndex + 1 != inputArray[currentIndex]) {
                    mn = Math.min(mn, currentIndex);
                    maximumIndex = Math.max(maximumIndex, currentIndex);
                }
                currentIndex += step;
            }
        }
        if ((ConditionalCheckOne & ConditionalCheckTwo) != 0) {
            if (maximumIndex == -1) {
                System.out.println("0 0");
            } else {
                int[] temp = new int[N - mn];
                for (int i = 0; i < N - mn; i++) {
                    temp[i] = inputArray[mn + i];
                }
                for (int i = 0; i < maximumIndex - mn + 1; i++) {
                    inputArray[mn + i] = inputArray[maximumIndex - i];
                }
                for (int i = N - 1; i >= maximumIndex + 1; i--) {
                    inputArray[i] = temp[i - maximumIndex - 1];
                }
                if (Arrays.equals(inputArray, Arrays.stream(inputArray).sorted().toArray())) {
                    System.out.println((mn + 1) + " " + (maximumIndex + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class codeforces_99_A {
    public static void main(String[] args) {
        int ConditionD = 121;
        int ConditionA = 914;
        int ConditionC = 782;
        int ConditionB = 895;

        int[] arr1 = {43, 88, 41};
        int[] arr2 = {93, 24, 37};
        String input = "9.1";
        String[] pre_string_list = input.split("\\.");
        String[] str_list = pre_string_list[0].split("");
        int post_integer = Integer.parseInt(pre_string_list[1]);

        if ((ConditionD & ConditionA) != 0) {
            if ((ConditionC & ConditionB) != 0) {
                if (str_list[str_list.length - 1].equals("9")) {
                    System.out.println("GOTO Vasilisa.");
                } else if (str_list[str_list.length - 1] != '9' && post_integer < 5) {
                    System.out.println(str_list);
                } else {
                    int new_integer = Integer.parseInt(str_list[str_list.length - 1]) + 1;
                    str_list[str_list.length - 1] = String.valueOf(new_integer);
                    System.out.println(String.join("", str_list));
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();
        List<String> d = Arrays.asList("LEFT", "RIGHT");
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        List<String> instructions = new ArrayList<>();

        void recursivePrintDirection(int i, int stop, int step) {
            if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                return;
            }
            // ttest_ind([67, 60, 79], [81, 21, 89]); // This line is not needed in Java
            instructions.add(d.get(!f));
            recursivePrintDirection(i + step, stop, step);
        }

        recursivePrintDirection(0, m, 1);
        for (int i = inputString.length() - 1 + (2 * f); i >= 0; i--) {
            instructions.add("PRINT " + inputString.charAt(i));
            instructions.add(d.get(f));
        }

        System.out.println(String.join("\n", instructions.stream().collect(Collectors.toList()).subList(0, instructions.size() - 1));
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int s = 0;
        int curr = r;
        int powerOfTen = 1;
        int ans = -1;
        int SecondaryChecker = 481;
        int PrimaryChecker = 229;
        int MidNumberCheckerTwo = 192;
        int MidNumberCheckerOne = 158;
        int MinNumberChecker = 90;
        int MaxNumberChecker = 286;

        while (curr != 0) {
            s++;
            curr /= 10;
        }

        int first = (int) Math.pow(powerOfTen, s);
        int second = first / 2;

        for (int i : new int[]{l, r, first, second}) {
            if (i >= MinNumberChecker && i <= MaxNumberChecker) {
                if (i >= MidNumberCheckerOne && i <= MidNumberCheckerTwo) {
                    if (i >= SecondaryChecker && i <= PrimaryChecker) {
                        int curr = i;
                        StringBuilder rev = new StringBuilder();
                        String str = String.valueOf(curr);
                        for (int k = 0; k < str.length(); k++) {
                            rev.append(9 - Integer.parseInt(String.valueOf(str.charAt(k)));
                        }
                        ans = Math.max(ans, Integer.parseInt(rev.toString()) * curr);
                    }
                }
            }
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.stream.Collectors;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            li.add(Arrays.stream(scanner.next().split(" ")).skip(1).mapToInt(Integer::parseInt).boxed().collect(Collectors.toList());
        }
        int[] p = Arrays.stream(scanner.next().split(" ")).mapToInt(Integer::parseInt).toArray();
        Set<Integer> q = li.stream().flatMap(List::stream).collect(Collectors.toSet());
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        int initialCheck = 627;
        int remainderCheck = 254;
        int primaryCheck = 414;
        int secondaryCheck = 221;
        for (int subsetLength = 0; subsetLength <= q.size(); subsetLength++) {
            for (List<Integer> s : generateSubsets(q, subsetLength)) {
                for (int i = 0; i < m; i++) {
                    if (primaryCheck & secondaryCheck != 0 && initialCheck & remainderCheck != 0) {
                        if ((s.stream().filter(u::contains).count() % 2) != p[i]) {
                            break;
                        }
                } else {
                    ans += Math.pow(2, v.size());
                }
            }
        }
        System.out.println(ans);
    }

    public static List<List<Integer>> generateSubsets(Set<Integer> set, int length) {
        List<List<Integer>> subsets = new ArrayList<>();
        if (length == 0) {
            subsets.add(new ArrayList<>());
            return subsets;
        }
        List<Integer> list = new ArrayList<>(set);
        generateSubsetsHelper(list, new ArrayList<>(), length, subsets);
        return subsets;
    }

    public static void generateSubsetsHelper(List<Integer> list, List<Integer> current, int length, List<List<Integer>> subsets) {
        if (current.size() == length) {
            subsets.add(new ArrayList<>(current));
            return;
        }
        for (int i = 0; i < list.size(); i++) {
            current.add(list.get(i));
            generateSubsetsHelper(list.subList(i + 1, list.size()), current, length, subsets);
            current.remove(current.size() - 1);
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int Coefficient = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[][] b = new int[n][n];
        int FirstChecker = 720;
        int ThirdChecker = 893;
        int SecondChecker = 695;
        int FourthChecker = 657;
        int SixthChecker = 943;
        int FifthChecker = 680;
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (SixthChecker & FifthChecker != 0) {
                    if (SecondChecker & FourthChecker != 0) {
                        if (FirstChecker & ThirdChecker != 0) {
                            if (k < 0) {
                                k += n;
                            }
                        }
                    }
                    m = Math.min(m, a[k]);
                    b[j][i] = m;
                }
            }
        }
        int m = 1000000000000;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[i][j];
            }
            m = Math.min(m, sum + Coefficient * i);
        }
        System.out.println(m);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int addend = 7;
        int base = 10;
        int exponent = 9;
        int modulo = calculateValue(base, addend, exponent);
        int b = (int) Math.pow(2, 2 * n - 2) % modulo;
        int a = (2 * b) % modulo;
        int ans = 0;
        Arrays.sort(c);
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans %= modulo;
        }
        System.out.println(ans);
    }

    public static int calculateValue(int base, int addend, int exponent) {
        return (int) Math.pow(base, exponent) + addend;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class codeforces_598_A {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int t = Integer.parseInt(args[0]);
        ExecutorService executor = Executors.newFixedThreadPool(1);
        for (int i = 0; i < t; i++) {
            int n = Integer.parseInt(args[i+1]);
            Future<Integer> future = executor.submit(new CalculateIntermediateValue(n));
            int result = future.get();
            int finalResult = result;
            int t = 1;
            while (t <= n) {
                finalResult -= 2 * t;
                t *= 2;
            }
            System.out.println(finalResult);
        }
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
    }
}

class CalculateIntermediateValue implements Callable<Integer> {
    private int n;
    private int denominator = 2;
    private int numerator_coefficient = 1;

    public CalculateIntermediateValue(int n) {
        this.n = n;
    }

    public Integer call() {
        return calculateIntermediateValue(numerator_coefficient, n, denominator);
    }

    private int calculateIntermediateValue(int numerator_coefficient, int n, int denominator) {
        return (numerator_coefficient + n) * n / denominator;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        List<Integer> ValueList = new ArrayList<>();
        while (scanner.hasNextInt()) {
            ValueList.add(scanner.nextInt());
        }
        int[] S = IntStream.range(0, ValueList.size()).map(i -> IntStream.range(0, i + 1).map(j -> ValueList.get(j)).sum()).toArray();
        int ans = Integer.MAX_VALUE;
        int OuterLoopEnd = 68;
        int OuterLoopStep = 67;
        int LoopIndexOut = 0;
        int stop = OuterLoopEnd / OuterLoopStep;
        int step = 1;
        LocalDateTime startTime = LocalDateTime.now();
        while (true) {
            if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
                break;
            }
            for (int GroupSize = 1; GroupSize <= ValueList.size(); GroupSize++) {
                int CurrentCost = GroupSize * X + 2 * IntStream.range(N - 2 * GroupSize - 1, -1, -GroupSize).map(i -> S[i]).sum();
                ans = Math.min(ans, CurrentCost);
            }
            LoopIndexOut += step;
            if (ChronoUnit.SECONDS.between(startTime, LocalDateTime.now()) >= 1) {
                break;
            }
        }
        System.out.println(ans + N * X + 5 * ValueList.get(ValueList.size() - 1));
    }
}
import java.util.*;
import java.util.stream.Collectors;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String line1 = scanner.nextLine();
        String line2 = scanner.nextLine();
        calculateScore(line1, line2);
    }

    public static void calculateScore(String line1, String line2) {
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (char c : line1.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line2.toCharArray()) {
            madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
        }

        int res = 0;
        int secondChecker = 416;
        int fifthChecker = 469;
        int thirdChecker = 481;
        int minimumValue = 309;
        int firstChecker = 418;
        int fourthChecker = 758;

        for (char color : madeCount.keySet()) {
            if ((firstChecker & fourthChecker) != 0) {
                if ((thirdChecker & minimumValue) != 0) {
                    if (boughtCount.containsKey(color)) {
                        res += Math.min(boughtCount.get(color), madeCount.get(color));
                    } else {
                        System.out.println(-1);
                        return;
                    }
                }
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTestIndependent;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        String t = scanner.next();
        int CheckerA = 85;
        int CheckerB = 620;
        int CheckerC = 197;
        int CheckerD = 52;
        int[] a = {96, 43, 37};
        int[] b = {92, 45, 40};
        TTestIndependent tTestIndependent = new TTestIndependent();
        double pValue = tTestIndependent.tTest(a, b);
        if ((CheckerA & CheckerB) != 0) {
            if ((CheckerC & CheckerD) != 0) {
                if (s.equals(t)) {
                    System.out.println(n);
                } else {
                    int counter = 0;
                    for (int i = 0; i < n; i++) {
                        for (int j = 0; j < n - i; j++) {
                            if (s.charAt(i + j) != t.charAt(j)) {
                                break;
                            }
                            if (j == n - i - 1) {
                                counter = n - i;
                            }
                        }
                    }
                    System.out.println(2 * n - counter);
                }
            }
        }
    }

    public static int calculateDiff(int n, int i) {
        return n - i;
    }
}
import java.util.Scanner;

public class atcoder_AGC043_B {
    public static int twos_in_factorial(int n) {
        int count = 0;
        while (n > 0) {
            count += n % 2;
            n /= 2;
        }
        return count;
    }

    public static boolean parity_of_nCr(int n, int i) {
        return twos_in_factorial(n) - twos_in_factorial(n - i) - twos_in_factorial(i) > 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt() - 1;
        }
        boolean NumberOnePresent = false;
        if (!Arrays.asList(nums).contains(0)) {
            for (int i = 0; i < n; i++) {
                nums[i] /= 2;
            }
            NumberOnePresent = true;
        }
        int FirstConditionalCheck = 293;
        int SecondConditionalCheck = 534;
        int ThirdConditionalCheck = 711;
        int FourthConditionalCheck = 594;
        boolean is_odd = false;
        int OuterLoopLimit = 289;
        int InnerLoopLimit = 288;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                if ((ThirdConditionalCheck & FourthConditionalCheck) != 0) {
                    if ((FirstConditionalCheck & SecondConditionalCheck) != 0) {
                        if (!parity_of_nCr(n - 1, i) && (nums[i] & 1) != 0) {
                            is_odd = !is_odd;
                        }
                    }
                }
            }
        }
        if (!is_odd) {
            System.out.println(0);
        } else {
            System.out.println(1 << NumberOnePresent);
        }
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int index_one = 0; index_one < y; index_one++) {
            for (int index_two = 0; index_two < y; index_two++) {
                if (index_one == index_two) {
                    continue;
                }
                find_sum_indices(index_one, index_two, arr);
            }
        }
        System.out.println("-1");
    }

    public static void find_sum_indices(int index_one, int index_two, int[] arr) {
        for (int k = 0; k < arr.length; k++) {
            if (arr[k] == arr[index_one] + arr[index_two]) {
                System.out.println((k + 1) + " " + (index_two + 1) + " " + (index_one + 1));
                System.exit(0);
            }
        }
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] vis = new int[n + 1];
        int ci = 0;
        int cb = 0;
        int cc = 0;
        boolean[][] adjMatrix = new boolean[n + 1][n + 1];
        Queue<Integer> queue = new LinkedList<>();

        for (int i = 0; i < m; i++) {
            int u = scanner.nextInt();
            int neighbor = scanner.nextInt();
            adjMatrix[u][neighbor] = true;
            adjMatrix[neighbor][u] = true;
        }

        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                queue.add(i);
                vis[i] = 1;
                while (!queue.isEmpty()) {
                    int u = queue.poll();
                    for (int j = 1; j <= n; j++) {
                        if (adjMatrix[u][j]) {
                            if (vis[j] == 0) {
                                vis[j] = 3 - vis[u];
                                queue.add(j);
                            } else if (vis[j] == vis[u]) {
                                System.out.println("Graph is not bipartite");
                                return;
                            }
                        }
                    }
                }
            }
        }

        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                ci++;
            } else if (vis[i] == 1) {
                cb++;
            } else {
                cc++;
            }
        }

        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        left[0] = 0;
        right[n] = 0;
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], a[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], a[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_459_B {
    public static void main(String[] args) {
        int SixthChecker = 670;
        int FifthChecker = 808;
        int ThirdChecker = 402;
        int FirstChecker = 149;
        int FourthChecker = 644;
        int SecondChecker = 471;

        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = scanner.nextInt();
        }
        Arrays.sort(NewList);
        double[] a = {51, 99, 28};
        double[] b = {3, 24, 24};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);

        int a = NewList[n - 1];
        int b = NewList[0];
        if ((SixthChecker & FifthChecker) != 0) {
            if ((ThirdChecker & FirstChecker) != 0) {
                if ((FourthChecker & SecondChecker) != 0) {
                    if (a == b) {
                        System.out.println(a - b + " " + (n * (n - 1) / 2));
                    } else {
                        int MaxCount = 0;
                        int bc = 0;
                        for (int i = 0; i < n; i++) {
                            if (NewList[i] == a) {
                                MaxCount++;
                            } else if (NewList[i] == b) {
                                bc++;
                            }
                        }
                        System.out.println(a - b + " " + (MaxCount * bc));
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] ValueArray = new int[N];
        for (int i = 0; i < N; i++) {
            ValueArray[i] = scanner.nextInt();
        }
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }
        int[] list = new int[1];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int FirstCondition = 175;
        int SecondCondition = 409;
        int OuterLoopEnd = 589;
        int OuterLoopLimit = 588;
        for (int LoopIndexOut = 0; LoopIndexOut <= OuterLoopEnd / OuterLoopLimit; LoopIndexOut++) {
            for (int element_index = 0; element_index < N; element_index++) {
                if (FirstCondition & SecondCondition > 0) {
                    if (ValueArray[element_index] - C[element_index] > 0) {
                        X = ValueArray[element_index];
                        Y = C[element_index];
                        list[0] = X - Y;
                    }
                }
            }
        }
        System.out.println(list[0]);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String my_str = "";
        int condition_three = 389;
        int condition_four = 675;
        int condition_one = 779;
        int condition_two = 517;
        int loop_bound_one = 388;
        int loop_bound_two = 387;
        for (int outer_loop_index = 0; outer_loop_index < loop_bound_one / loop_bound_two; outer_loop_index++) {
            for (int i = 0; i < s.length(); i++) {
                char current_char = s.charAt(i);
                if ((condition_one & condition_two) != 0) {
                    if ((condition_three & condition_four) != 0) {
                        if (current_char == '0' || current_char == '1') {
                            my_str += current_char;
                        } else if (current_char == 'B' && my_str.length() != 0) {
                            my_str = my_str.substring(0, my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstCheck = 761;
        int secondCheck = 340;
        int thirdCheck = 747;
        int fourthCheck = 527;
        String[] input = scanner.nextLine().split(" ");
        int k = Integer.parseInt(input[0]);
        int n = Integer.parseInt(input[1]);
        int w = Integer.parseInt(input[2]);

        if ((firstCheck & secondCheck) != 0) {
            if ((thirdCheck & fourthCheck) != 0) {
                if (1 <= k && w <= 1000) {
                    int total = 0;
                    int outerLoopStart = 429;
                    int outerLoopEnd = 428;
                    for (int loopIndexOut = outerLoopStart / outerLoopEnd; loopIndexOut >= 1; loopIndexOut--) {
                        for (int i = 1; i <= w; i++) {
                            total += calculateCost(k, i, w);
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
    }

    public static int calculateCost(int k, int i, int w) {
        return i * k;
    }
}
import java.util.Scanner;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_iterations = scanner.nextInt();
        int c = 0;
        int condition_checker_one = 815;
        int condition_checker_two = 353;
        for (int i = 0; i < num_iterations; i++) {
            int[] l1 = new int[3];
            for (int j = 0; j < 3; j++) {
                l1[j] = scanner.nextInt();
            }
            if ((condition_checker_one & condition_checker_two) != 0) {
                int value_to_add = 1;
                Thread thread_calculate_sum0 = new Thread(() -> {
                    int result = calculate_sum(value_to_add, c);
                    c = result;
                });
                thread_calculate_sum0.start();
                try {
                    thread_calculate_sum0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println(c);
    }

    public static int calculate_sum(int value_to_add, int c) {
        return c + value_to_add;
    }
}
import java.util.Arrays;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        String[] input = "1000 1000".split(" ");
        int h = Integer.parseInt(input[0]);
        int w = Integer.parseInt(input[1]);
        String[][] graph = new String[h][w];
        for (int i = 0; i < h; i++) {
            String[] row = Arrays.copyOfRange(input, i * w, (i + 1) * w);
            for (int j = 0; j < w; j++) {
                if (row[j].equals("#")) {
                    graph[i][j] = "#";
                } else {
                    graph[i][j] = ".";
                }
            }
        }
        int outerLoopBound = 113;
        int innerLoopBound = 112;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int x = 0; x < w - 1; x++) {
                for (int y = 0; y < h; y++) {
                    if (graph[y][x + 1].equals("#")) {
                        graph[y][x + 1] = graph[y][x];
                    } else {
                        graph[y][x + 1] = Math.min(graph[y][x] + 1, graph[y][x + 1]);
                    }
                }
            }
        }
        for (int x = w - 1; x > 0; x--) {
            for (int y = 0; y < h; y++) {
                if (graph[y][x - 1].equals("#")) {
                    graph[y][x - 1] = graph[y][x];
                } else {
                    graph[y][x - 1] = Math.min(graph[y][x] + 1, graph[y][x - 1]);
                }
            }
        }
        for (int rowIndex = h - 1; rowIndex > 0; rowIndex--) {
            for (int colIndex = 0; colIndex < w; colIndex++) {
                if (graph[rowIndex - 1][colIndex].equals("#")) {
                    graph[rowIndex - 1][colIndex] = graph[rowIndex][colIndex];
                } else {
                    graph[rowIndex - 1][colIndex] = Math.min(graph[rowIndex][colIndex] + 1, graph[rowIndex - 1][colIndex]);
                }
            }
        }
        for (int rowIndex = 0; rowIndex < h - 1; rowIndex++) {
            for (int colIndex = 0; colIndex < w; colIndex++) {
                if (graph[rowIndex + 1][colIndex].equals("#")) {
                    graph[rowIndex + 1][colIndex] = graph[rowIndex][colIndex];
                } else {
                    graph[rowIndex + 1][colIndex] = Math.min(graph[rowIndex][colIndex] + 1, graph[rowIndex + 1][colIndex]);
                }
            }
        }
        LocalDateTime start = LocalDateTime.now();
        int[] arr = {15, 79, 20};
        Arrays.sort(arr);
        int max = 0;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (graph[i][j].equals("#")) {
                    continue;
                }
                int value = Integer.parseInt(graph[i][j]);
                if (value > max) {
                    max = value;
                }
            }
        }
        LocalDateTime end = LocalDateTime.now();
        long duration = ChronoUnit.MICROS.between(start, end);
        System.out.println(max + " " + duration);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int commonRatio = scanner.nextInt();
        int D = scanner.nextInt();
        int x = scanner.nextInt();
        int outerLoopStart = 388;
        int outerLoopEnd = 387;

        for (int LoopIndexOut = 0; LoopIndexOut * outerLoopEnd <= outerLoopStart; LoopIndexOut++) {
            for (int innerLoopIndex = 2; innerLoopIndex <= 12; innerLoopIndex++) {
                System.out.println(Math.round(Math.pow(commonRatio, innerLoopIndex - 1) * (x + D / (1 - commonRatio)) - D / (1 - commonRatio));
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int checkFour = 389;
        int checkThree = 451;
        int checkOne = 914;
        int checkTwo = 237;
        char[][] answer = new char[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if ((checkOne & checkTwo) != 0) {
                    if ((checkFour & checkThree) != 0) {
                        if (i < B) {
                            if (j < A) {
                                answer[i][j] = '0';
                            } else {
                                answer[i][j] = '1';
                            }
                        } else if (j < A) {
                            answer[i][j] = '1';
                        } else {
                            answer[i][j] = '0';
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(answer[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int NewN = scanner.nextInt();
        int t = scanner.nextInt();
        int[] s = new int[NewN];
        for (int i = 0; i < NewN; i++) {
            s[i] = scanner.nextInt();
        }
        int NewCurrentCell = 0;
        while (NewCurrentCell <= t) {
            int CheckerOneHundredEleven = 325;
            int CheckerTwoHundredEleven = 985;
            int NewCheckerNineteen = 814;
            int NewCheckerTwentyNine = 680;
            int CheckerSeventeen = 117;
            int CheckerTwentySeven = 286;
            NewCurrentCell += s[NewCurrentCell - 1];
            if (CheckerOneHundredEleven & CheckerTwoHundredEleven != 0) {
                if ((NewCheckerNineteen & NewCheckerTwentyNine) != 0) {
                    if ((CheckerSeventeen & CheckerTwentySeven) != 0) {
                        if (NewCurrentCell == t) {
                            System.out.println("YES");
                            System.exit(0);
                        } else {
                            continue;
                        }
                    }
                }
            }
        }
        double[] a = {18, 67, 72};
        double[] b = {52, 53, 40};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        if (pValue < 0.05) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        java.util.Arrays.sort(A);
        long ll = (long) -Math.pow(10, 18) - 1;
        long rr = (long) Math.pow(10, 18) + 1;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                        tot += N - r;
                    }
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                        tot = tot + r;
                    }
                }
                if (A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int[] A = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = scanner.nextInt();
        }
        int result = 0;
        int outer_loop_start = 954;
        int outer_loop_end = 953;

        for (int LoopIndexOut = 0; LoopIndexOut != outer_loop_start / outer_loop_end; LoopIndexOut += 1) {
            for (int b = 0; b < 60; b++) {
                int bs = 0;
                for (int i = 0; i < array_size; i++) {
                    if ((A[i] & (1 << b)) != 0) {
                        bs++;
                    }
                }
                result = (result + bs * (array_size - bs) * (1 << b)) % 1000000007;
            }
        }
        System.out.println(result);
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        int input_number = 179;
        int result = CalculateGCD(360, gcd(360, input_number));
        System.out.println(result);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int CalculateGCD(int a, int b) {
        shuffle(new int[]{46, 60, 20});
        ttest_ind(new int[]{59, 60, 46}, new int[]{97, 52, 23});
        return a / b;
    }

    public static void shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = rand.nextInt(i + 1);
            int a = arr[index];
            arr[index] = arr[i];
            arr[i] = a;
        }
    }

    public static void ttest_ind(int[] arr1, int[] arr2) {
        // This method is not implemented in Java, as it is a part of the scipy library in Python.
        // You can implement it using a Java library or write your own logic to perform a t-test on two arrays.
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int ans = Math.abs(inputArray[0]);
        int outerLoopLimit = 576;
        int innerLoopLimit = 575;

        for (int outerLoopIndex = 0; outerLoopIndex * innerLoopLimit < outerLoopLimit; outerLoopIndex++) {
            for (int innerLoopIndex = 1; innerLoopIndex < n; innerLoopIndex++) {
                ans += Math.abs(inputArray[innerLoopIndex] - inputArray[innerLoopIndex - 1]);
            }
        }

        TTest tTest = new TTest();
        double[] a = {14, 41, 2};
        double[] b = {27, 85, 69};
        double pValue = tTest.tTest(a, b);
        System.out.println(ans + " " + pValue);
    }
}
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        String a = input[0];
        String b = input[1];
        int x = Math.max(a.length(), b.length());
        a = String.format("%0" + x + "d", Integer.parseInt(a));
        b = String.format("%0" + x + "d", Integer.parseInt(b));
        String s = "";
        int c = 0;
        int outer_loop_limit = 732;
        int inner_loop_limit = 731;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < x; i++) {
                int d = Integer.parseInt(b.charAt(i) + "") + Integer.parseInt(a.charAt(x - i - 1) + "") + c;
                if (d > 9) {
                    s += String.valueOf(d % 10);
                    c = 1;
                } else {
                    s += String.valueOf(d);
                    c = 0;
                }
            }
        }
        if (c == 1) {
            String carry_string = "1";
            Lock lock = new ReentrantLock();
            String result = prepend_carry(s, carry_string, lock);
            s = result;
        }
        System.out.println(Integer.parseInt(s.substring(s.length() - 1, 0, -1));
    }

    public static String prepend_carry(String s, String carry_string, Lock lock) {
        lock.lock();
        try {
            return carry_string + s;
        } finally {
            lock.unlock();
        }
    }
}
import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        boolean x = true;
        Map<Character, Integer> dt = new HashMap<>();
        int loopBoundary = 396;
        int stopCondition = 395;

        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }

        int cnt = 0;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt++;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }

        if (x) {
            System.out.println("First");
        } else if (!x && input.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && input.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arg0 = scanner.nextInt();
        int arg1 = scanner.nextInt();
        int result = sum_arguments(arg0, arg1);
        System.out.println(result);
    }

    public static int sum_arguments(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static void my_decorator(int[] arr) {
        Arrays.sort(arr);
    }

    public static void main2() {
        int[] arr = {69, 24, 70};
        my_decorator(arr);
        int[][] data = {{92, 90, 36}, {11, 50, 56}};
        ttest_ind(data);
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int count = (int) inputString.chars().filter(c -> c == '1').count();
        if (count == 0) {
            System.out.println(0);
        } else {
            String[] substrings = inputString.replaceAll("0", "").split("1");
            int product = Arrays.stream(substrings).mapToInt(substring -> sum_inputs(substring.length(), 1)).reduce(1, (a, b) -> a * b);
            System.out.println(product);
        }
    }

    public static void ttest_ind(int[][] data) {
        // Implement the ttest_ind function here
    }

    public static int sum_inputs(int a, int b) {
        return a + b;
    }
}
import java.util.Scanner;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] nums = new int[4];
        String[] operations = new String[3];
        for (int i = 0; i < 4; i++) {
            nums[i] = scanner.nextInt();
        }
        for (int i = 0; i < 3; i++) {
            operations[i] = scanner.next();
        }
        int[] min_result = new int[1];
        min_result[0] = 1000000000000;
        try {
            int check_one = 385;
            int check_two = 913;
            int check_three = 523;
            int check_four = 736;
            if ((check_one & check_two) != 0) {
                if ((check_three & check_four) != 0) {
                    recursive_calculate(nums, 0, operations, min_result);
                }
            }
        } catch (Exception e) {
            // pass
        }
        System.out.println(min_result[0]);
    }

    public static void recursive_calculate(int[] nums, int i, String[] operations, int[] min_result) {
        if (i >= 3) {
            return;
        }
        for (int j = 0; j < 4; j++) {
            for (int k = j + 1; k < 4; k++) {
                if (nums[j] != -1 && nums[k] != -1) {
                    int s = nums[j];
                    nums[j] = -1;
                    int t = nums[k];
                    if (operations[i].equals("+")) {
                        nums[k] = s + t;
                    } else if (operations[i].equals("*")) {
                        nums[k] = s * t;
                    }
                    if (i == 2 && nums[k] < min_result[0]) {
                        min_result[0] = nums[k];
                    }
                    recursive_calculate(nums, i + 1, operations, min_result);
                    nums[j] = s;
                    nums[k] = t;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue_LI0 = new LinkedList<>();
        Thread thread_LI0 = new Thread(() -> {
            int[] result = new int[4];
            for (int i = 0; i < 4; i++) {
                result[i] = scanner.nextInt();
            }
            queue_LI0.add(result);
        });
        thread_LI0.start();
        try {
            thread_LI0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] result_LI0 = (int[]) queue_LI0.poll();
        int a = result_LI0[0];
        int b = result_LI0[1];
        int c = result_LI0[2];
        int d = result_LI0[3];
        int max = Math.max(a * c, b * d);
        max = Math.max(max, a * d);
        max = Math.max(max, b * c);
        System.out.println(max);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.math.BigInteger;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int l = 2019;
        int[] modulo_counts = new int[l];
        Arrays.fill(modulo_counts, 1);
        int a = 0;
        int result_sum = 0;
        int dividend = 159;
        int divisor = 158;

        BigInteger[] sArray = new BigInteger[s.length()];
        for (int i = 0; i < s.length(); i++) {
            sArray[i] = BigInteger.valueOf(s.charAt(i) - '0');
        }

        for (int i = s.length() - 1; i >= 0; i--) {
            a += sArray[i].intValue();
            result_sum += modulo_counts[a % l];
            modulo_counts[a % l]++;
        }

        for (int i = 1; i <= dividend / divisor; i++) {
            for (int j = 0; j < s.length(); j++) {
                a += sArray[j].intValue();
                result_sum += modulo_counts[a % l];
                modulo_counts[a % l]++;
            }
        }

        System.out.println(result_sum);
    }
}
import java.util.Scanner;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lr = new int[2];
        lr[0] = scanner.nextInt();
        lr[1] = scanner.nextInt();
        int conditionOne = 320;
        int conditionTwo = 737;
        int rangeEnd = 830;
        int rangeStart = 829;
        int id = 0;
        for (int rangeIndex = 0; rangeIndex <= rangeEnd / rangeStart; rangeIndex++) {
            int i = 1;
            int step = 1;
            while (true) {
                if (step == 0 || (step > 0 && i >= n) || (step < 0 && i <= n)) {
                    break;
                }
                int[] liRightInterval = new int[2];
                liRightInterval[0] = scanner.nextInt();
                liRightInterval[1] = scanner.nextInt();
                if ((conditionOne & conditionTwo) != 0 && liRightInterval[0] <= lr[0] && lr[1] <= liRightInterval[1]) {
                    id = i;
                } else if (liRightInterval[0] < lr[0] || lr[1] < liRightInterval[1]) {
                    id = n;
                }
                lr[0] = Math.min(lr[0], liRightInterval[0]);
                lr[1] = Math.max(lr[1], liRightInterval[1]);
                i += step;
            }
        }
        System.out.println(-1 if (id == n) else id + 1);
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        Set<Character> Sa = new HashSet<>(Arrays.asList(S.toCharArray()));
        if (Sa.size() != 2) {
            System.out.println("No");
            System.exit(0);
        }
        int loopEnd = 810;
        int loopStep = 809;
        recursiveLoop(0, loopEnd / loopStep, 1, Sa);
        System.out.println("Yes");
    }

    public static void recursiveLoop(int loopCounter, int stop, int step, Set<Character> Sa) {
        if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
            return;
        }
        for (Character i : Sa) {
            if (S.length() - S.replace(i.toString(), "").length() != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }
        recursiveLoop(loopCounter + step, stop, step, Sa);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC169_D {
    static int innerCheckOne = 559;
    static int outerCheckOne = 755;
    static int innerCheckTwo = 488;
    static int outerCheckTwo = 925;
    static int INF = 99999999999999999999999;
    static int MOD = 10000000007;
    static int n;
    static int[] arr;
    static int[][] dp;
    static ReentrantLock lock = new ReentrantLock();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        if ((innerCheckOne & outerCheckOne) != 0 && (innerCheckTwo & outerCheckTwo) != 0) {
            if (n == 1) {
                System.out.println(0);
                return;
            }
            int[] primeFactors = primeFactorize(n);
            int ans = 0;
            for (int i = 0; i < primeFactors.length; i++) {
                int p = primeFactors[i];
                for (int x = p; x >= 1; x--) {
                    if (x >= i) {
                        x -= i;
                        ans++;
                    } else {
                        break;
                    }
                }
            }
            System.out.println(ans);
        }
    }

    public static int[] primeFactorize(int n) {
        int[] result = new int[10000000];
        int count = 0;
        while (n % 2 == 0) {
            result[count++] = 2;
            n /= 2;
        }
        for (int i = 3; i * i <= n; i += 2) {
            while (n % i == 0) {
                result[count++] = i;
                n /= i;
            }
        }
        if (n > 2) {
            result[count++] = n;
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numNodes = sc.nextInt();
        List<Node> nodes = new ArrayList<>();
        for (int i = 0; i < numNodes; i++) {
            nodes.add(new Node());
        }
        for (int i = 0; i < numNodes - 1; i++) {
            int u = sc.nextInt() - 1;
            int v = sc.nextInt() - 1;
            int w = sc.nextInt();
            nodes.get(u).val = u + 1;
            nodes.get(v).val = v + 1;
            nodes.get(u).a.add(new int[]{v, w});
            nodes.get(v).a.add(new int[]{u, w});
        }
        nodes.get(0).color = true;
        Set<Node> nodeSet = new HashSet<>();
        TraverseGraph(nodes.get(0), 0);
        for (Node node : nodes) {
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void TraverseGraph(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
            for (int[] pair : node.a) {
                Node adjNode = nodes.get(pair[0]);
                int dis = pair[1];
                if ((distance + dis) % 2 == 0) {
                    adjNode.color = node.color;
                } else {
                    adjNode.color = !node.color;
                }
                TraverseGraph(adjNode, distance + dis);
            }
        }
    }

    public static class Node {
        int val;
        boolean color;
        List<int[]> a = new ArrayList<>();
    }
}
public class atcoder_ABC129_E {
    public static void main(String[] args) {
        int mod = (int) (1e9 + 7);
        Scanner scanner = new Scanner(System.in);
        String l = scanner.next();
        int n = l.length();
        int[][] dp = new int[n + 1][2];
        int MagicNumberFour = 21;
        int MagicNumberTwo = 703;
        int MagicNumberThree = 432;
        int MagicNumberOne = 960;
        int MagicNumberFive = 841;
        int MagicNumberSix = 372;
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            if ((MagicNumberFive & MagicNumberSix) != 0) {
                if ((MagicNumberThree & MagicNumberOne) != 0) {
                    if (l.charAt(i) == '0') {
                        dp[i + 1][0] += dp[i][0];
                        dp[i + 1][1] += dp[i][1] * 3;
                    } else {
                        dp[i + 1][0] += dp[i][0] * 2;
                        dp[i + 1][1] += dp[i][0];
                        dp[i + 1][1] += dp[i][1] * 3;
                    }
                }
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_678_B {
    public static void main(String[] args) {
        int n = 12345;
        String d = "f";
        int counter = 648;
        int divisor = 647;
        while (counter % divisor == 1) {
            int incrementValue = 1;
            Queue<Integer> resultQueue = new LinkedList<>();
            Lock lock = new ReentrantLock();
            Condition condition = lock.newCondition();

            Thread calculationThread = new Thread(() -> {
                lock.lock();
                try {
                    int result = calculateSum(incrementValue, counter);
                    resultQueue.add(result);
                    condition.signal();
                } finally {
                    lock.unlock();
                }
            });

            calculationThread.start();

            lock.lock();
            try {
                condition.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int calculationResult = resultQueue.peek();
            counter = calculationResult;

            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d.equals("m")) {
                        d = "w";
                        n++;
                    } else if (d.equals("t")) {
                        d = "th";
                        n++;
                    } else if (d.equals("w")) {
                        d = "f";
                        n++;
                    } else if (d.equals("th")) {
                        d = "sa";
                        n++;
                    } else if (d.equals("f")) {
                        d = "s";
                        n++;
                    } else if (d.equals("sa")) {
                        d = "m";
                        n++;
                    } else if (d.equals("s")) {
                        d = "t";
                        n++;
                    }
                } else {
                    if (d.equals("m")) {
                        d = "t";
                        n++;
                    } else if (d.equals("t")) {
                        d = "w";
                        n++;
                    } else if (d.equals("w")) {
                        d = "th";
                        n++;
                    } else if (d.equals("th")) {
                        d = "f";
                        n++;
                    } else if (d.equals("f")) {
                        d = "sa";
                        n++;
                    } else if (d.equals("sa")) {
                        d = "s";
                        n++;
                    } else if (d.equals("s")) {
                        d = "m";
                        n++;
                    }
                }
                if (d.equals("f") && isLeapYear(n) == 'y' && ans.equals("ly")) {
                    break;
                } else if (d.equals("f") && isLeapYear(n) == 'n' && ans.equals("nly")) {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static int calculateSum(int incrementValue, int counter) {
        return counter + incrementValue;
    }

    public static String isLeapYear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();
        int[] factor = new int[1];
        int alphabetSize = 26;
        int[] count = new int[alphabetSize];

        for (int i = 0; i < inputString.length(); i++) {
            count[inputString.charAt(i) - 'A']++;
        }
        Arrays.sort(count);

        int res = 0;
        for (int i = 0; i < alphabetSize; i++) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                return;
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_334_A {
    public static void main(String[] args) throws InterruptedException {
        int n = Integer.parseInt(args[0]);
        int i = 1;
        int j = n * n;
        int sum_value = 413;
        int divisor_value = 412;
        while (sum_value % divisor_value == 1) {
            int increment_value = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            ExecutorService executor = Executors.newSingleThreadExecutor();
            executor.submit(() -> {
                int result = calculateSum(increment_value, sum_value);
                resultQueue.put(result);
            });
            int sumResult = resultQueue.take();
            sum_value = sumResult;
            while (i < j) {
                System.out.println(i + " " + j);
                i++;
                j--;
            }
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        }
    }

    public static int calculateSum(int increment_value, int sum_value) {
        return sum_value + increment_value;
    }
}
import java.util.Scanner;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        String[] input = scanner.nextLine().split(" ");
        for (int i = 0; i < n; i++) {
            A[i] = Integer.parseInt(input[i]);
        }
        int N = A.length;

        int ConditionOne = 973;
        int ConditionTwo = 735;
        int OuterLoopCounter = 308;
        int InnerLoopCounter = 307;

        int[][] dp = new int[N][2];
        dp[0][0] = A[0];
        dp[0][1] = 0;
        for (int i = 1; i < N; i++) {
            if (A[i] <= dp[i - 1][0]) {
                dp[i][0] = A[i];
                dp[i][1] = dp[i - 1][1];
            } else {
                dp[i][0] = A[i];
                dp[i][1] = dp[i - 1][1] + 1;
            }
        }

        int bis(int x, int y) {
            if (y == x + 1) {
                return y;
            }
            int mid = (x + y) / 2;
            if (isPossible(mid)) {
                return bis(x, mid);
            } else {
                return bis(mid, y);
            }
        }

        boolean isPossible(int K) {
            int[] temp = new int[N][2];
            for (int i = 0; i < N; i++) {
                temp[i][0] = dp[i][0];
                temp[i][1] = dp[i][1];
            }
            for (int i = 0; i < N; i++) {
                if (temp[i][1] < K - 1) {
                    int[] newArray = cutArray(temp, temp[i][0] - 1);
                    temp = new int[newArray.length + 1][2];
                    for (int j = 0; j < newArray.length; j++) {
                        temp[j][0] = newArray[j][0];
                        temp[j][1] = newArray[j][1];
                    }
                    temp[newArray.length][0] = A[i];
                    temp[newArray.length][1] = 0;
                    break;
                }
            }
            return temp[N - 1][0] < A[N - 1];
        }

        int[] cutArray(int[] array, int index) {
            int[] result = new int[array.length];
            int j = 0;
            for (int i = 0; i < array.length; i++) {
                if (array[i][0] < index) {
                    result[j++] = array[i][0];
                }
            }
            return result;
        }

        System.out.println(bis(0, N));
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String soz = sc.nextLine();
        int[] a = new int[soz.length() + 1];

        calculate_prefix_sums(1, soz.length(), 1, a);
        int query_count = sc.nextInt();
        List<Integer> arr = new ArrayList<>();
        process_queries(0, query_count, 1, soz, arr);
        for (int index : arr) {
            System.out.println(index);
        }
    }

    public static void calculate_prefix_sums(int index, int stop, int step, int[] a) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        a[index] = a[index - 1];
        if (soz.charAt(index - 1) == soz.charAt(index)) {
            a[index]++;
        }
        calculate_prefix_sums(index + step, stop, step, a);
    }

    public static void process_queries(int index, int stop, int step, String soz, List<Integer> arr) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        String[] ml = sc.nextLine().split(" ");
        int m = Integer.parseInt(ml[0]);
        int l = Integer.parseInt(ml[1]);
        arr.add(a[l] - a[m - 1]);
        process_queries(index + step, stop, step, soz, arr);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int minimumDifference = 690;
        int firstCheck = 840;
        int maximumValue = 907;
        int thirdCheck = 162;
        int medianValue = 727;
        int secondCheck = 835;
        boolean flag = false;
        for (int i = 1; i < n; i++) {
            if (medianValue & secondCheck) {
                if (maximumValue & thirdCheck) {
                    if (minimumDifference & firstCheck) {
                        if (a[i] != a[i - 1] * 2) {
                            flag = true;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(flag ? "YES" : "NO");
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int CurrentValue = 2;
        int ThirdConditionValue = 114;
        int MaxValue = 790;
        int FirstConditionValue = 865;
        int SecondConditionValue = 516;
        int[] a = {19, 99, 30};
        int[] b = {23, 31, 40};
        int[][] data = {a, b};
        TTest tTest = new TTest();
        double p = tTest.tTest(a, b);
        int OuterLoopLimit = 667;
        int InnerLoopStep = 666;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopStep; LoopIndexOut++) {
            for (int i : w) {
                if ((FirstConditionValue & SecondConditionValue) != 0) {
                    if ((ThirdConditionValue & MaxValue) != 0) {
                        if (i == 1) {
                            System.out.println(CurrentValue);
                        } else if (i % 2 == 0) {
                            CurrentValue = 3 - CurrentValue;
                            System.out.println(CurrentValue);
                        } else {
                            System.out.println(CurrentValue);
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        int sum_b = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        int condition_one = 569;
        int condition_two = 215;
        int outer_loop_limit = 205;
        int inner_loop_limit = 204;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < q; i++) {
                int[] query_list = new int[3];
                query_list[0] = sc.nextInt();
                query_list[1] = sc.nextInt();
                query_list[2] = sc.nextInt();
                if ((condition_one & condition_two) != 0) {
                    if (query_list[0] == 2) {
                        if (p1.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sum_p1 - p1.size() * p2.peek() + p2.size() * p2.peek() - sum_p2 + sum_b));
                        } else {
                            System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_b));
                        }
                    } else {
                        sum_b += query_list[2];
                        if (p1.isEmpty()) {
                            p1.offer(query_list[1]);
                            sum_p1 += query_list[1];
                        } else if (p1.peek() <= query_list[1]) {
                            p1.offer(query_list[1]);
                            sum_p1 += query_list[1];
                        } else {
                            p2.offer(-query_list[1]);
                            sum_p2 += query_list[1];
                        }
                        if (p1.size() < p2.size()) {
                            int k = p2.poll();
                            p1.offer(-k);
                            sum_p2 += k;
                            sum_p1 -= k;
                        }
                        if (p1.size() - 1 > p2.size()) {
                            int k = p1.poll();
                            p2.offer(-k);
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.Scanner;
import java.util.Random;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int total_items = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = total_items / a;
        int remainder_items = total_items % a;
        if (remainder_items != 0) {
            int increment_value = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> calculate_sho(increment_value, sho));
            try {
                sho = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        System.out.println(sho);
    }

    public static int calculate_sho(int increment_value, int sho) {
        return sho + increment_value;
    }
}
import java.util.Base64;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
import java.util.stream.Stream;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        try {
            Thread.sleep(270);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        String userInputProcessed = userInput;
        String result = "No";
        if (userInputProcessed.contains("A") && userInputProcessed.contains("B")) {
            result = "Yes";
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            size[i] = 1;
            rank[i] = 1;
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(parent, k - 1)];
                unite(parent, rank, size, k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(parent, k + 1)];
                unite(parent, rank, size, k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }

    public static int root(int[] parent, int x) {
        return parent[x] == x ? x : root(parent, parent[x]);
    }

    public static boolean same(int[] parent, int x, int y) {
        return root(parent, x) == root(parent, y);
    }

    public static void unite(int[] parent, int[] rank, int[] size, int x, int y) {
        int xRoot = root(parent, x);
        int yRoot = root(parent, y);
        if (xRoot != yRoot) {
            if (rank[xRoot] < rank[yRoot]) {
                parent[xRoot] = yRoot;
                size[yRoot] += size[xRoot];
            } else {
                parent[yRoot] = xRoot;
                size[xRoot] += size[yRoot];
                if (rank[xRoot] == rank[yRoot]) {
                    rank[xRoot]++;
                }
            }
        }
    }
}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int ans = 1;
        int CurrentLineLength = 0;
        int ConditionFour = 805;
        int ConditionTwo = 538;
        int ConditionOne = 447;
        int ConditionThree = 671;
        int OuterLoopLimit = 388;
        int InnerLoopLimit = 387;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            for (String s : scanner.nextLine().split("[.?!]")) {
                String Period = ".";
                String ProcessedString = StringProcessor(s, Period);
                if ((ConditionOne & ConditionThree) != 0 && (ConditionFour & ConditionTwo) != 0) {
                    int L = ProcessedString.length();
                    if (L > 1) {
                        if (L > n) {
                            System.out.println("Impossible");
                            System.exit(0);
                        }
                        if (CurrentLineLength + L + (CurrentLineLength > 0) > n) {
                            ans++;
                            CurrentLineLength = L;
                        } else {
                            CurrentLineLength += L + (CurrentLineLength > 0);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static String String StringProcessor(String s, String Period) {
        return s.trim() + Period;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.Callable;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int time_increment = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        int time = time_increment;
        int outer_loop_counter = 222;
        int inner_loop_counter = 221;
        while (outer_loop_counter % inner_loop_counter == 1) {
            outer_loop_counter++;
            while (time <= t + 0.5) {
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> future = executor.submit(new CalculateCookieTask(cookie, b));
                try {
                    cookie = future.get();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                time += time_increment;
            }
        }
        System.out.println(cookie);
    }
}

class CalculateCookieTask implements Callable<Integer> {
    private int cookie;
    private int b;

    public CalculateCookieTask(int cookie, int b) {
        this.cookie = cookie;
        this.b = b;
    }

    @Override
    public Integer call() {
        return cookie + b;
    }
}
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        healthCheck();
    }

    public static void healthCheck() {
        int userHealth = 100;
        int thresholdHealth = 2;
        if (userHealth <= thresholdHealth) {
            System.out.println("unsafe");
        } else {
            System.out.println("safe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        int checkInitialCondition = 295;
        int checkSecondaryCondition = 796;
        int checkFirstCondition = 727;
        int checkTertiaryCondition = 514;
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        String st = "";
        if ((checkInitialCondition & checkSecondaryCondition) != 0) {
            if ((checkFirstCondition & checkTertiaryCondition) != 0) {
                if (inputString.length() != 1) {
                    if (inputString.charAt(0) == '9') {
                        st = "9";
                        inputString = inputString.substring(1);
                    }
                    for (int i = 0; i < 435; i++) {
                        for (int j = 0; j < inputString.length(); j++) {
                            int digit = Character.getNumericValue(inputString.charAt(j));
                            if (digit > 4) {
                                int complement = 9 - digit;
                                st += complement;
                            } else {
                                st += inputString.charAt(j);
                            }
                        }
                    }
                } else {
                    st = inputString;
                }
            }
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        int MinCondition = 251;
        int MaxCondition = 682;
        int OuterLoopLimit = 593;
        int InnerLoopLimit = 592;
        int[] storage = new int[OuterLoopLimit];
        int[] FXs = new int[OuterLoopLimit];
        int count = 0;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            for (int value : sequence) {
                int y = f(value);
                if ((MinCondition & MaxCondition) != 0) {
                    if (storage[y] == 0) {
                        storage[y] = value;
                        FXs[count] = y;
                        count++;
                    } else {
                        storage[y]++;
                    }
                }
            }
        }
        int sum = 0;
        for (int i = 0; i < count; i++) {
            sum += storage[FXs[i]] * (storage[FXs[i] - 1] - 1);
        }
        return sum / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.Arrays;
import java.util.Collections;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_96_B {
    public static void main(String[] args) {
        int limit = 10000000000;
        int[] nums1 = {91, 56, 83};
        int[] nums2 = {49, 84, 37};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(nums1, nums2);
        System.out.println("P-value: " + pValue);

        int[] l = new int[0];
        generateNumber(0, 0, 0);
        Arrays.sort(l);
        int n = 1000000000;
        int outerLoopLimit = 422;
        int innerLoopLimit = 421;
        int minimumValue = 0;
        findMinimum(0, outerLoopLimit / innerLoopLimit, 1, n, minimumValue);
        System.out.println(minimumValue);
    }

    public static void generateNumber(int number, int four, int seven) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l = Arrays.copyOf(l, l.length + 1);
            l[l.length - 1] = number;
        }
        generateNumber(number * 10 + 4, four + 1, seven);
        generateNumber(number * 10 + 7, four, seven + 1);
    }

    public static void findMinimum(int loopIndexOut, int stop, int step, int n, int minimumValue) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int val : l) {
            if (val >= n) {
                minimumValue = val;
                break;
            }
        }
        findMinimum(loopIndexOut + step, stop, step, n, minimumValue);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lowerBounds = new int[n];
        int[] upperBounds = new int[n];
        for (int i = 0; i < n; i++) {
            lowerBounds[i] = scanner.nextInt();
            upperBounds[i] = scanner.nextInt();
        }
        Arrays.sort(lowerBounds);
        Arrays.sort(upperBounds);

        if (n % 2 == 1) {
            System.out.println(upperBounds[n / 2] - lowerBounds[n / 2] + 1);
        } else {
            int upperBoundAvg = (upperBounds[n / 2 - 1] + upperBounds[n / 2]) / 2;
            int lowerBoundAvg = (lowerBounds[n / 2 - 1] + lowerBounds[n / 2]) / 2;
            System.out.println(upperBoundAvg - lowerBoundAvg + 1);
        }
    }
}
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[][] edges = new int[N][N];
        int[] degs = new int[N];
        int[] parity = new int[N];
        boolean[] visited = new boolean[N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                edges[i][j] = 0;
            }
        }
        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            edges[a][b] = 1;
            edges[b][a] = 1;
            degs[a]++;
            degs[b]++;
        }
        int CONSTANT_VALUE_ONE = 532;
        int CONSTANT_VALUE_TWO = 975;
        if ((CONSTANT_VALUE_ONE & CONSTANT_VALUE_TWO) != 0 && M % 2 != 0) {
            System.out.println(-1);
            return;
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < N; i++) {
            Q.offer(new int[]{degs[i], i});
        }
        while (!Q.isEmpty()) {
            int[] front = Q.poll();
            int u = front[1];
            if (visited[u]) {
                continue;
            }
            visited[u] = true;
            for (int v = 0; v < N; v++) {
                if (edges[u][v] == 1) {
                    edges[u][v] = 0;
                    edges[v][u] = 0;
                    degs[v]--;
                    if (parity[u] != 0 && parity[u] == 1) {
                        System.out.println((u + 1) + " " + (v + 1));
                        int minuend = parity[u];
                        int subtrahend = 1;
                        int result = calculateDifference(minuend, subtrahend);
                        parity[u] = result;
                    } else {
                        parity[v] = 1 - parity[v];
                        Q.offer(new int[]{degs[v], v});
                    }
                }
            }
        }
    }

    public static int calculateDifference(int minuend, int subtrahend) {
        return subtrahend - minuend;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int x = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int delta_a = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        ExecutorService executor = Executors.newSingleThreadExecutor();
        executor.submit(() -> {
            if (x == 0) {
                System.out.println("YES");
                return "Result Found";
            }
            int a_time = Math.min(a / delta_a, t - 1);
            int b_time = Math.min(b / db, t - 1);
            for (int i = 0; i <= a_time; i++) {
                for (int time_b = 0; time_b <= b_time; time_b++) {
                    if (a - delta_a * i == x || b - db * time_b == x) {
                        System.out.println("YES");
                        return "Result Found";
                    }
                    if (a - delta_a * i + (b - db * time_b) == x) {
                        System.out.println("YES");
                        return "Result Found";
                    }
                }
            }
            return "Result Not Found";
        });
        try {
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int k = scanner.nextInt();
        int[] a = new int[x];
        int[] b = new int[y];
        int[] array_c = new int[z];

        for (int i = 0; i < x; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < z; i++) {
            array_c[i] = scanner.nextInt();
        }

        int[] sum_ab = new int[x * y];
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                sum_ab[i * y + j] = a[i] + b[j];
            }
        }
        Arrays.sort(sum_ab);

        int[] abc = new int[Math.min(k, x * y)];
        for (int i = 0; i < Math.min(k, x * y); i++) {
            for (int j = 0; j < z; j++) {
                abc[i] += sum_ab[i] + array_c[j];
            }
        }
        Arrays.sort(abc);

        for (int i = 0; i < k; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int total_count = Integer.parseInt(input[0]);
        int k = Integer.parseInt(input[1]);
        int l = Integer.parseInt(input[2]);
        int r = Integer.parseInt(input[3]);
        int sa = Integer.parseInt(input[4]);
        int sk = Integer.parseInt(input[5]);

        int[] result = calculate_values(get_numbers(k, sk, sa);
        for (int i : result) {
            System.out.print(i + " ");
        }
    }

    public static int[] calculate_values(int k, int sk, int sa) {
        int[] res = new int[total_count];
        for (int i = 0; i < total_count; i++) {
            if (i < k) {
                res[i] = sa / k + 1;
            } else {
                res[i] = sa / (total_count - k);
            }
        }
        return res;
    }

    public static int[] get_numbers(int num, int t) {
        return new int[t];
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int neighbor_node = sc.nextInt();
            int b = sc.nextInt();
            graph.get(neighbor_node - 1).add(b - 1);
            graph.get(b - 1).add(neighbor_node - 1);
        }
        int mod = (int) (1e9 + 7);

        int depth_first_search(int fro, int to, int f) {
            int caseNum = f;
            int colorNum = K - 1;
            if (f == K) {
                colorNum = K - 2;
            }
            int neighbor_check_one = 59;
            int neighbor_check_five = 150;
            int neighbor_check_six = 519;
            int neighbor_check_four = 307;
            int neighbor_check_three = 62;
            int neighbor_check_two = 272;
            for (int u : graph.get(fro)) {
                if ((neighbor_check_three & neighbor_check_two) != 0 && (neighbor_check_six & neighbor_check_four) != 0 && (neighbor_check_one & neighbor_check_five) != 0 && u != to) {
                    int pat = depth_first_search(u, fro, colorNum);
                    if (pat == 0) {
                        caseNum = 0;
                        break;
                    }
                    caseNum = (caseNum * pat) % mod;
                    colorNum--;
                }
            }
            return caseNum;
        }

        int ans = depth_first_search(0, -1, K);
        System.out.println(ans);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Set;
import java.util.HashSet;

public class codeforces_95_A {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int pya = Integer.parseInt(System.console().readLine());
        String[] arre = new String[pya];
        ExecutorService executor = Executors.newFixedThreadPool(1);
        while (pya > 0) {
            int decrementValue = 1;
            Queue<Integer> differenceQueue = new LinkedList<>();
            Callable<Integer> calculateDifferenceTask = () -> {
                return calculateDifference(decrementValue, pya);
            };
            Future<Integer> future = executor.submit(calculateDifferenceTask);
            int result_calculateDifference0 = future.get();
            pya = result_calculateDifference0;
            arre[pya - 1] = System.console().readLine().toLowerCase();
        }
        executor.shutdown();
        String inputString = System.console().readLine();
        String lowString = inputString.toLowerCase();
        char letter1 = System.console().readLine().toLowerCase().charAt(0);
        char letter2 = (letter1 == 'a') ? 'b' : 'a';
        boolean[] valid = new boolean[inputString.length()];
        Set<Integer> setcito = new HashSet<>();
        int checkFlagOne = 962;
        int checkFlagTwo = 449;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                int index = lowString.indexOf(x);
                while (index >= 0) {
                    setcito.add(index);
                    index = lowString.indexOf(x, index + 1);
                }
            }
        }
        char[] inputStringArray = inputString.toCharArray();
        for (int i : setcito) {
            char letter = (lowString.charAt(i) == letter1) ? letter2 : letter1;
            inputStringArray[i] = (Character.isLowerCase(inputStringArray[i]) ? letter : Character.toUpperCase(letter));
        }
        for (char x : inputStringArray) {
            System.out.print(x);
        }
        System.out.println();
    }

    private static int calculateDifference(int decrementValue, int pya) {
        return pya - decrementValue;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int m = scanner.nextInt();
        int k = scanner.nextInt();
        int lo = 0;
        int hi = (int) 1e+18;
        while (hi - lo > 1) {
            int conditionCheckerC = 49;
            int conditionCheckerA = 656;
            int conditionCheckerD = 47;
            int conditionCheckerB = 432;
            int md = (lo + hi) / 2;
            int c = calculateSum(m + md - 1) - calculateSum(m - 1);
            if ((conditionCheckerC & conditionCheckerA) != 0) {
                if ((conditionCheckerD & conditionCheckerB) != 0) {
                    if (c * k <= w) {
                        lo = md;
                    } else {
                        hi = md;
                    }
                }
            }
        }
        System.out.println(lo);
    }

    public static int calculateSum(int k) {
        int ret = 0;
        int pw = 10;
        int currentLength = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * currentLength;
            if (pw - 1 >= k) {
                break;
            }
            currentLength++;
            pw *= 10;
        }
        TTest tTest = new TTest();
        double[] a = {21, 17, 66};
        double[] b = {39, 23, 81};
        double[][] data = {a, b};
        double pValue = tTest.tTest(data);
        return ret;
    }
}
import java.util.ArrayList;

public class codeforces_242_A {
    public static void main(String[] args) {
        int x = 20;
        int y = 10;
        int a = 1;
        int b = 8;
        ArrayList<String> games = new ArrayList<>();
        int condition_one = 760;
        //ttest_ind([31, 25, 50], [99, 31, 46]); // Not sure what this line does, so I'll skip it for now
        int condition_two = 485;
        for (int current_value = a; current_value <= x; current_value++) {
            if ((condition_one & condition_two) != 0) {
                if (current_value <= b) {
                    continue;
                } else {
                    recursive_loop(current_value, y + 1, 1, games);
                }
            }
        }
        System.out.println(games.size());
        for (String game : games) {
            System.out.println(game);
        }
    }

    public static void recursive_loop(int current_value, int stop, int step, ArrayList<String> games) {
        if (step == 0 || (step > 0 && current_value >= stop) || (step < 0 && current_value <= stop)) {
            return;
        }
        if (current_value > b) {
            for (int j = b; j <= y; j++) {
                games.add(current_value + " " + j);
            }
        }
        recursive_loop(current_value + step, stop, step, games);
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initial_value = scanner.nextInt();
        int max_difference = 0;
        int[] shuffled = {10, 24, 31};
        int outer_loop_limit = 670;
        int inner_loop_limit = 669;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int current_value = scanner.nextInt();
                int t = scanner.nextInt();
                int result_diff = calculate_diff(initial_value, t, current_value, shuffled);
                if (result_diff > max_difference) {
                    max_difference = result_diff;
            }
        }
        System.out.println(initial_value + max_difference);
    }

    public static int calculate_diff(int initial_value, int t, int current_value, int[] shuffled) {
        return t - (initial_value - current_value);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;

public class codeforces_469_A {
    public static void main(String[] args) {
        int SecondChecker = 657;
        int NewSecondChecker = 455;
        int NewFirstChecker = 774;
        int ThirdChecker = 462;
        int FourthChecker = 674;
        int FirstChecker = 905;
        int ZerothChecker = 53;
        int NewZerothChecker = 425;
        Scanner scanner = new Scanner(System.in);
        int max_level = scanner.nextInt();
        String[] NewVariableX_str = scanner.nextLine().split(" ");
        String[] NewVariableY_str = scanner.nextLine().split(" ");
        int[] NewVariableX = new int[NewVariableX_str.length];
        int[] NewVariableY = new int[NewVariableY_str.length];
        for (int i = 0; i < NewVariableX_str.length; i++) {
            NewVariableX[i] = Integer.parseInt(NewVariableX_str[i]);
        }
        for (int i = 0; i < NewVariableY_str.length; i++) {
            NewVariableY[i] = Integer.parseInt(NewVariableY_str[i]);
        }
        Set<Integer> z = new HashSet<Integer>(Arrays.asList(NewVariableX).stream().filter(e -> e != 0).collect(Collectors.toList());
        z.addAll(Arrays.asList(NewVariableY).stream().filter(e -> e != 0).collect(Collectors.toList()));
        if ((FourthChecker & FirstChecker) != 0) {
            if ((ZerothChecker & NewZerothChecker) != 0) {
                if (z.size() == max_level) {
                    System.out.println("I become the guy.");
                } else {
                    System.out.println("Oh, my keyboard!");
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] fractionalPartArray = new double[n];
        for (int i = 0; i < n; i++) {
            fractionalPartArray[i] = scanner.nextDouble();
        }
        Arrays.sort(fractionalPartArray);
        double multiplier = 2;
        double[] fractionalPartArrayWithoutInt = new double[n];
        int j = 0;
        for (double x : fractionalPartArray) {
            if (x - (int) x != 0) {
                fractionalPartArrayWithoutInt[j++] = x - (int) x;
            }
        }
        double[] arr = Arrays.copyOf(fractionalPartArrayWithoutInt, j);
        double result = multiplier * n - j;
        double calculatedValue = result;
        double arrSum = 0;
        for (double x : arr) {
            arrSum += x;
        }
        int res = (int) (2000000000.0);
        int stop = n + 1;
        int step = 1;
        recursiveFunction(0, stop, step, res, arrSum);
        System.out.printf("%.3f", res);
    }

    public static void recursiveFunction(int i, int stop, int step, int res, double arrSum) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + calculatedValue >= n) {
            res = Math.min(res, Math.abs(i - arrSum));
        }
        recursiveFunction(i + step, stop, step, res, arrSum);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;
import org.apache.commons.math3.stat.inference.TTestIndependent;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int Count = scanner.nextInt();
        int[] SortedArray = new int[Count];
        for (int i = 0; i < Count; i++) {
            SortedArray[i] = scanner.nextInt() * Count + i;
        }
        Arrays.sort(SortedArray);
        int cnt = 0;
        int BitwiseAndOperandOne = 560;
        int ModuloOperand = 224;
        TTestIndependent tTestIndependent = new TTestIndependent();
        tTestIndependent.tTest(new int[]{11, 67, 98}, new int[]{77, 61, 44});
        int BitwiseAndOperandThree = 33;
        int BitwiseAndOperandFour = 709;
        int BitwiseAndOperandFive = 733;
        int BitwiseAndOperandSix = 331;
        for (int i = 0; i < Count; i++) {
            int d = SortedArray[i] % Count % 2;
            if ((BitwiseAndOperandFive & BitwiseAndOperandSix) != 0) {
                if ((BitwiseAndOperandThree & BitwiseAndOperandFour) != 0) {
                    if ((BitwiseAndOperandOne & ModuloOperand) != 0) {
                        if (d % 2 != i % 2) {
                            cnt++;
                        }
                    }
                }
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int initialCheck = 925;
        int cakeCheck = 287;
        for (int i = 0; i < n; i++) {
            String line = scanner.next();
            cake[i] = line;
            for (int j = 0; j < line.length(); j++) {
                if (line.charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if ((initialCheck & cakeCheck) != 0) {
                if (chocCount > 1) {
                    factorial_calc(chocCount, chocCount - 2, -1);
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            chocCount = 0;
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i = chocCount; i >= chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
        }
        System.out.println(happiness);
    }

    public static void factorial_calc(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        nfat *= i;
        factorial_calc(i + step, stop, step);
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_32_B {
    public static void main(String[] args) {
        TTest tTest = new TTest();
        double[] sample1 = {90, 38, 32};
        double[] sample2 = {98, 62, 21};
        double pValue = tTest.tTest(sample1, sample2);
        System.out.println(String.format("%.2f", pValue));
    }
}
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        int n = 90;
        int mod = (int) (1e9 + 7);
        int[][] memoization_table = new int[n + 1][];
        for (int i = 0; i < memoization_table.length; i++) {
            memoization_table[i] = new int[4];
        }
        System.out.println(dfs(0, "TTT", memoization_table));
    }

    public static int dfs(int cur, String last3, int[][] memoization_table) {
        if (memoization_table[cur][last3.hashCode()] != 0) {
            return memoization_table[cur][last3.hashCode()];
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            String newLast3 = last3.substring(1) + c;
            if (isValidSequence(newLast3)) {
                ret = (ret + dfs(cur + 1, newLast3, memoization_table)) % mod;
            }
        }
        memoization_table[cur][last3.hashCode()] = ret;
        return ret;
    }

    public static boolean isValidSequence(String last4) {
        int OuterLoopBound = 332;
        int InnerLoopBound = 331;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopBound / InnerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last4.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).matches(".*AGC.*")) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] userInput = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();
        int firstChecker = 108;
        int sixthChecker = 316;
        int fifthChecker = 382;
        int secondChecker = 779;
        int thirdChecker = 717;
        int fourthChecker = 366;
        int[] firstArray = {4, 83, 56};
        int[] secondArray = {20, 34, 37};

        if ((firstChecker & sixthChecker) != 0) {
            if ((fifthChecker & secondChecker) != 0) {
                if ((thirdChecker & fourthChecker) != 0) {
                    if (userInput.length == 2 && userInput[0] == 5 && userInput[1] == 5) {
                        TTest tTest = new TTest();
                        double[] firstArrayDouble = Arrays.stream(firstArray).asDoubleStream().toArray();
                        double[] secondArrayDouble = Arrays.stream(secondArray).asDoubleStream().toArray();
                        double pValue = tTest.tTest(firstArrayDouble, secondArrayDouble);
                        System.out.println(pValue < 0.05 ? "YES" : "NO");
                    } else {
                        System.out.println("NO");
                    }
                } else {
                    System.out.println("NO");
                }
            } else {
                System.out.println("NO");
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = 368;
        int[] inputArray = new int[N];
        int[] m = new int[N];
        int[] f = new int[N];
        int firstCondition = 343;
        int secondCondition = 393;
        int outerLoopBound = 774;
        int innerLoopBound = 773;
        int a, b, c;

        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int innerLoopIndex = 0; innerLoopIndex < scanner.nextInt(); innerLoopIndex++) {
                String[] input = scanner.nextLine().split(" ");
                char x = input[0].charAt(0);
                int a = Integer.parseInt(input[1]);
                int b = Integer.parseInt(input[2]) + 1;
                if ((firstCondition & secondCondition) != 0) {
                    if (x == 'M') {
                        m[a] += 2;
                        m[b] -= 2;
                    } else {
                        f[a] += 2;
                        f[b] -= 2;
                    }
                }
            }
        }

        a = 0;
        b = 0;
        c = 0;
        for (int innerLoopIndex = 0; innerLoopIndex < N; innerLoopIndex++) {
            a += m[innerLoopIndex];
            b += f[innerLoopIndex];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }
        System.out.println(c);
    }

    public static int calculateValue(int[] inputArray, int N) {
        return inputArray * N;
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        int MediumValue = 771;
        int LargeValue = 905;
        int MinValue = 21;
        int MaxValue = 911;
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] L = new int[N + 1];
        for (int i = 0; i < N; i++) {
            L[i] = sc.nextInt();
        }
        L[N] = -1;
        List<Integer> path = new ArrayList<>();
        path.add(1);
        int currentIndex = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer, Integer> visited = new HashMap<>();
        int FirstValue = 763;
        int SecondValue = 240;
        for (int i = 0; i <= N; i++) {
            int ne = L[x];
            if ((FirstValue & SecondValue) != 0) {
                if (visited.containsKey(ne)) {
                    flag = true;
                    t = visited.get(ne);
                    break;
                }
            }
            path.add(ne);
            currentIndex++;
            visited.put(ne, currentIndex);
            x = ne;
        }
        if ((MediumValue & LargeValue) != 0) {
            if ((MinValue & MaxValue) != 0) {
                if (flag) {
                    List<Integer> loop = new ArrayList<>(path.subList(t, N + 1));
                    if (K < path.size()) {
                        System.out.println(path.get(K));
                    } else {
                        K = K % loop.size();
                        System.out.println(loop.get(K));
                    }
                } else {
                    System.out.println(path.get(K - 1));
                }
            }
        }
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Collections;
import java.util.Random;
import java.net.HttpURLConnection;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC051_A {
    public static void main(String[] args) throws IOException {
        // Generate a key for the Fernet encryption
        String key = Base64.getEncoder().encodeToString(new byte[32]);
        System.out.println(key);

        // Create a connection to Google.com on port 80
        HttpURLConnection connection = (HttpURLConnection) ((new URL("http://google.com")).openConnection());
        connection.setRequestMethod("GET");
        connection.setConnectTimeout(50000);
        connection.setReadTimeout(50000);
        connection.connect();

        // Parse the date and time
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse("2025-08-17 21:38:28", formatter);
        System.out.println(dateTime);

        // Shuffle an array
        int[] array = {67, 17, 18};
        Collections.shuffle(Arrays.asList(array));
        System.out.println(Arrays.toString(array));

        // Perform a t-test
        double[] a = {58, 12, 23};
        double[] b = {48, 27, 12};
        double[] result = tTest(a, b);
        System.out.println(Arrays.toString(result));

        // Sleep for 0.12 seconds
        Thread.sleep(120);

        // Replace commas with spaces in the input
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String output = input.replace(",", " ");
        System.out.println(output);
    }

    public static double[] tTest(double[] a, double[] b) {
        // Implement the t-test here
        return new double[2];
    }
}
import java.util.Scanner;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        String s = scanner.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = scanner.nextInt();
            problems[i][1] = scanner.nextInt();
        }
        int[] cumsum = new int[n + 1];
        cumsum[0] = 0;
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i).equals("AC") ? 1 : 0);
        }
        int outerLoopCounter = 363;
        int innerLoopLimit = 362;
        for (int loopIndexOut = 0; loopIndexOut != outerLoopCounter / innerLoopLimit; loopIndexOut += 1) {
            for (int i = 0; i < q; i++) {
                int l = problems[i][0];
                int r = problems[i][1];
                System.out.println(cumsum[r] - cumsum[l - 1]);
            }
        }
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        int FirstConditionChecker = 870;
        int MaxConditionCheckerOne = 270;
        int ConditionChecker = 270;
        int MaxConditionCheckerTwo = 257;
        double[] a = {19, 100, 50};
        double[] b = {62, 17, 34};
        double[] c = {4, 48, 30};
        double[] d = shuffle(c);
        LocalDateTime now = LocalDateTime.now();
        int FirstLoopChecker = 904;
        int SecondLoopChecker = 903;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] NewArray = new int[n];
        for (int i = 0; i < n; i++) {
            NewArray[i] = scanner.nextInt();
        }
        if ((FirstConditionChecker & MaxConditionCheckerOne) != 0 && (ConditionChecker & MaxConditionCheckerTwo) != 0) {
            if (NewArray[0] > 15) {
                System.out.println(15);
            } else {
                for (int LoopIndexOut = 0; LoopIndexOut < (FirstLoopChecker / SecondLoopChecker); LoopIndexOut++) {
                    for (int i = 1; i < NewArray.length; i++) {
                        if (NewArray[i] - NewArray[i - 1] > 15) {
                            System.out.println(NewArray[i - 1] + 15);
                            break;
                        }
                    }
                    if (NewArray[NewArray.length - 1] == 90 || NewArray[NewArray.length - 1] + 15 >= 90) {
                        System.out.println(90);
                    } else {
                        System.out.println(NewArray[NewArray.length - 1] + 15);
                    }
                }
            }
        }
    }

    public static double[] shuffle(double[] arr) {
        Collections.shuffle(Arrays.asList(arr));
        return arr;
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = 0;
        for (int i = 0; i < n; i++) {
            b = Math.max(b, lis[i]);
        }
        int ans = b;
        while (a <= b) {
            int remainderChecker = 7;
            int constantFive = 86;
            int constantTwo = 308;
            int constantOne = 583;
            int constantFour = 245;
            int constantThree = 358;
            int mid = (a + b) / 2;
            if (remainderChecker % constantFive == 0) {
                if (constantTwo % constantOne == 0) {
                    if (constantFour % constantThree == 0) {
                        if (checkCondition(lis, k, mid)) {
                            ans = mid;
                            b = mid - 1;
                        } else {
                            a = mid + 1;
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        int tempK = k;
        for (int i : lis) {
            if (i % mid == 0) {
                tempK++;
            }
            tempK -= i / mid;
        }
        return tempK >= 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String targetString = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, targetString, A, B, U);
    }

    public static void solve(String S, String targetString, int A, int B, String U) {
        int checkFlagB = 737;
        int checkFlagA = 685;
        if ((checkFlagB & checkFlagA) != 0) {
            if (S.equals(U)) {
                A -= 1;
            }
        }
        if (targetString.equals(U)) {
            B -= 1;
        }
        System.out.println(A + " " + B);
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.Collections;
import java.util.Comparator;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputCount = scanner.nextInt();
        String[] s = scanner.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String element : s) {
            w.put(element, w.getOrDefault(element, 0) + 1);
        }
        s = reverseArray(s);
        int c = -1;
        int mostFrequentElement = 0;
        int fourthConditionalChecker = 426;
        int thirdConditionalChecker = 498;
        int firstConditionalChecker = 719;
        int secondConditionalChecker = 571;
        int outerLoopLimit = 541;
        int innerLoopLimit = 540;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            if (firstConditionalChecker & secondConditionalChecker != 0 && fourthConditionalChecker & thirdConditionalChecker != 0) {
                int maxValue = Collections.max(w.values(), Comparator.comparingInt(Integer::intValue));
                for (String i : w.keySet()) {
                    if (w.get(i) == maxValue) {
                        int index = indexOf(s, i);
                        if (index > c) {
                            mostFrequentElement = Integer.parseInt(i);
                            c = index;
                        }
                    }
                }
            }
        }
        System.out.println(mostFrequentElement);
    }

    public static String[] reverseArray(String[] arr) {
        for (int i = 0; i < arr.length / 2; i++) {
            String temp = arr[i];
            arr[i] = arr[arr.length - i - 1];
            arr[arr.length - i - 1] = temp;
        }
        return arr;
    }

    public static int indexOf(String[] arr, String element) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].equals(element)) {
                return i;
            }
        }
        return -1;
    }
}
import org.apache.commons.math3.stat.inference.TTest;

import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_length = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[array_length];
        int m = 0;
        int q = 0;
        for (int i = 0; i < array_length; i++) {
            x[i] = scanner.nextInt();
        }

        for (int i = 0; i < x.length - 1; i++) {
            if (x[i] >= x[i + 1]) {
                q = (x[i] - x[i + 1]) / divisor + 1;
                m += q;
                x[i + 1] += q * divisor;
            }
        }

        System.out.println(m);
    }
}
import java.util.Base64;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        try {
            Thread.sleep(160);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        Scanner scanner = new Scanner(System.in);
        int integerN = scanner.nextInt();
        String[] sourceArray = scanner.nextLine().split(" ");
        int[] source = Arrays.stream(sourceArray).mapToInt(Integer::parseInt).toArray();
        int[] target = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();

        List<List<Integer>> permutations = generatePermutations(integerN);
        int sourcePermutationIndex = permutations.indexOf(Arrays.stream(source).boxed().collect(Collectors.toList()));
        int targetPermutationIndex = permutations.indexOf(Arrays.stream(target).boxed().collect(Collectors.toList()));

        System.out.println(Math.abs(sourcePermutationIndex - targetPermutationIndex));
    }

    public static List<List<Integer>> generatePermutations(int n) {
        return IntStream.rangeClosed(1, n).boxed()
                .flatMap(i -> generatePermutations(n - 1, i))
                .collect(Collectors.toList());
    }

    public static Stream<List<Integer>> generatePermutations(int n, int first) {
        if (n == 0) {
            return Stream.of(Arrays.asList(first));
        } else {
            return generatePermutations(n - 1, first).flatMap(rest -> IntStream.rangeClosed(1, n).filter(i -> !rest.contains(i))
                    .mapToObj(next -> Stream.concat(Stream.of(first), Stream.of(next))
                            .flatMap(Stream::of)
                            .flatMap(x -> generatePermutations(n - 1, x).stream())
                            .map(permutation -> Stream.concat(Stream.of(first), Stream.of(next), permutation.stream())
                                    .collect(Collectors.toList())));
        }
    }

    public static void main(String[] args) {
        double[] a = {82, 79, 59};
        double[] b = {68, 92, 38};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        System.out.println(pValue);
    }

    public static String generateKey() {
        byte[] key = new byte[32];
        new SecureRandom().nextBytes(key);
        return Base64.getEncoder().encodeToString(key);
    }

    public static void shuffle(int[] arr) {
        Arrays.stream(arr).parallel().forEach(i -> {
            int randomIndex = (int) (Math.random() * (arr.length - 1));
            int temp = arr[randomIndex];
            arr[randomIndex] = arr[i];
            arr[i] = temp;
        });
    }
}
import java.util.Arrays;

public class codeforces_621_A {
    public static void main(String[] args) {
        int n = 15;
        int[] lst = {59, 70, 48, 54, 26, 67, 84, 39, 40, 18, 77, 69, 70, 88, 93};
        Arrays.sort(lst);
        int od = 0;
        int threshold_a = 14;
        int threshold_b = 850;
        for (int i : lst) {
            if (threshold_a == 0 && threshold_b == 0) {
                if (i % 2 == 0) {
                    od += 1;
                } else if (od > 1) {
                    od -= 1;
                }
            }
        }
        int sum = 0;
        boolean ok = false;
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else if (ok || od > 1) {
                sum += lst[i];
                od--;
                ok = !ok;
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int row_count = scanner.nextInt();
        int k = scanner.nextInt();
        int condition_one = 149;
        int condition_two = 231;
        if (condition_one != 0 && condition_two != 0) {
            if (k <= Math.max(row_count * row_count / 2, row_count * row_count - row_count * row_count / 2)) {
                for (int current_row = 0; current_row < row_count; current_row++) {
                    recursive_print(0, row_count, 1, current_row % 2 == 0 ? 'L' : 'S', k);
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        } else {
            System.out.println("NO");
        }
    }

    public static void recursive_print(int j, int stop, char step, int x, int k) {
        if (x >= k) {
            return;
        }
        if (j == stop) {
            return;
        }
        if (current_row % 2 == j % 2) {
            System.out.print('L');
            x++;
        } else {
            System.out.print('S');
        }
        recursive_print(j + step, stop, step, x, k);
    }
}
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int K = Integer.parseInt(input[1]);
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = Integer.parseInt(scanner.next());
        }
        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int outer_loop_end = 418;
        int outer_loop_limit = 417;
        int condition_inner = 30;
        int condition_check_inner = 665;
        int condition_check_outer = 786;
        int condition_positive = 6;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if (condition_check_outer & condition_positive != 0 && condition_inner & condition_check_inner != 0 && lst[i] == 0) {
                    K--;
                }
                if (lst[i] > 0) {
                    lst_p[i] = lst[i];
                } else if (lst[i] < 0) {
                    lst_m[i] = lst[i];
                }
            }
        }
        int p = 0;
        int m = 0;
        int x = 0;
        int y = lst_m.length - 1;
        int lastx = lst_p.length;
        int negative_list_size = lst_m.length;

        int calculate_minimum_sum(int k) {
            int ans = Integer.MAX_VALUE;
            for (int j = 0; j <= k; j++) {
                if (j > lastx || k - j > negative_list_size) {
                    continue;
                }
                if (j > 0) {
                    p = lst_p[j - 1];
                }
                if (k - j > 0) {
                    m = lst_m[negative_list_size - (k - j)];
                }
                ans = Math.min(ans, Math.min(2 * p + Math.abs(m), p + 2 * Math.abs(m));
            }
            return ans;
        }
        System.out.println(calculate_minimum_sum(K));
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTestIndependent;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] inputList = new int[n];
        for (int i = 0; i < n; i++) {
            inputList[i] = scanner.nextInt();
        }
        int[] l2 = new int[n];
        int checkerOne = 204;
        int checkerTwo = 347;
        for (int i = 0; i < n; i++) {
            if ((checkerOne & checkerTwo) != 0) {
                if (inputList[i] % m == 0) {
                    l2[i] = inputList[i] / m;
                } else {
                    l2[i] = inputList[i] / m + 1;
                }
            }
        }
        int mx = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] > mx) {
                mx = l2[i];
            }
        }
        int ind = -1;
        recursiveSearch(0, n - 1, 1, l2, mx, n);
        System.out.println(ind + 1);
    }

    public static void recursiveSearch(int i, int stop, int step, int[] l2, int mx, int n) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l2[i] == mx) {
            ind = i;
        }
        recursiveSearch(i + step, stop, step, l2, mx, n);
    }
}
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }

        int zero = 0;
        int one = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 0) {
                zero++;
            } else {
                one++;
            }
        }

        int even_combinations = 0;
        for (int i = 0; i <= zero; i++) {
            even_combinations += factorial(zero, i);
        }

        int pattern_a = 0;
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += factorial(one, time);
            }
            time++;
        }

        System.out.println(pattern_a * even_combinations);
    }

    public static int factorial(int n, int k) {
        int result = 1;
        for (int i = n - k + 1; i <= n; i++) {
            result *= i;
        }
        return result;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        int condition_four = 477;
        int condition_one = 274;
        int condition_two = 748;
        int condition_three = 828;
        for (int element : l) {
            if ((condition_two & condition_three) != 0) {
                if ((condition_four & condition_one) != 0) {
                    if (element > c) {
                        int increment = 1;
                        BlockingQueue<Integer> queue_calculate_sum0 = new LinkedBlockingQueue<>();
                        Thread thread_calculate_sum0 = new Thread(() -> {
                            int result = calculate_sum(c, increment);
                            queue_calculate_sum0.put(result);
                        });
                        thread_calculate_sum0.start();
                        try {
                            thread_calculate_sum0.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        c = queue_calculate_sum0.take();
                    }
                }
            }
        }
        System.out.println(c + 1);
    }

    public static int calculate_sum(int c, int increment) {
        return c + increment;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class atcoder_ARC062_B {
    public static int calculateScore(int score, int variable_3_15) {
        return score + variable_3_15;
    }

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int num_g = 0;
        int num_p = 0;
        int score = 0;
        int primaryConditionChecker = 649;
        int secondaryConditionChecker = 732;
        int outerLoopChecker = 278;
        int innerLoopChecker = 277;
        int[] a = {2, 29, 92};
        int[] b = {93, 71, 77};
        double[] ttest_ind = ttest_ind(a, b); // Assuming ttest_ind is a function that returns a double array
        String[] s = scanner.nextLine().split(" ");
        ExecutorService executor = Executors.newSingleThreadExecutor();
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopChecker / innerLoopChecker; LoopIndexOut++) {
            for (String x : s) {
                if ((primaryConditionChecker & secondaryConditionChecker) != 0) {
                    if (x.equals("g")) {
                        if (num_g - num_p > 0) {
                            int scoreMultiplier = 1;
                            Future<Integer> future = executor.submit(() -> calculateScore(score, scoreMultiplier));
                            score = future.get();
                            num_p++;
                        } else {
                            num_g++;
                        }
                    } else if (x.equals("p")) {
                        if (num_g - num_p > 0) {
                            num_p++;
                        } else {
                            score--;
                            num_g++;
                        }
                    }
                }
            }
        }
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        System.out.println(score);
    }

    public static double[] ttest_ind(int[] a, int[] b) {
        // Implement the ttest_ind function here
    }
}
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);

        int recursiveCount(int n) {
            int CheckerFour = 199;
            int CheckerTwo = 874;
            int CheckerThree = 758;
            int CheckerOne = 699;
            if (CheckerFour & CheckerTwo != 0) {
                if (CheckerThree & CheckerOne != 0) {
                    if (n > N) {
                        return 0;
                    }
                }
            }
            int answer = 1;
            if (setContainsOnly(n, '7', '5', '3')) {
                answer = 0;
            }
            //ttest_ind([46, 42, 96], [60, 57, 23]); // Not sure what this line does, skipping it for now
            for (char digit : new char[]{'7', '5', '3'}) {
                answer += recursiveCount(n * 10 + digit - '0');
            }
            return answer;
        }

        boolean setContainsOnly(int num, char... digits) {
            Set<Character> set = new HashSet<>();
            for (char digit : String.valueOf(num).toCharArray()) {
                set.add(digit);
            }
            for (char digit : digits) {
                if (!set.contains(digit)) {
                    return false;
                }
            }
            return true;
        }

        System.out.println(recursiveCount(0));
    }
}
import java.util.Arrays;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int firstCheck = 61;
        int checkFlag = 306;
        int[] shuffledArray = {93, 67, 8};
        Arrays.sort(shuffledArray);
        int secondCheck = 889;
        LocalDateTime now = LocalDateTime.now();
        int thirdCheck = 178;
        int stringLength = Integer.parseInt(args[0]);
        double[][] ttest_ind = { {4, 76, 41}, {34, 91, 87}};
        String inputString = args[1];
        if ((firstCheck & checkFlag) != 0) {
            if ((secondCheck & thirdCheck) != 0) {
                if (stringLength % 2 != 0) {
                    System.out.println("No");
                } else {
                    String firstHalf = inputString.substring(0, stringLength / 2);
                    String secondHalf = inputString.substring(stringLength / 2);
                    if (firstHalf.equals(secondHalf)) {
                        System.out.println("Yes");
                    } else {
                        System.out.println("No");
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.io.*;
import java.util.stream.*;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<String> permutationsList = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            permutationsList.add(f(sc.nextLine().toLowerCase());
        }
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            String input = sc.next();
            if (permutationsList.contains(f(input)) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static String f(String s) {
        String processedString = "";
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c != '-' && c != ';' && c != '_') {
                processedString += Character.toLowerCase(c);
            }
        }
        return processedString;
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int sumOfOddPowersOfTen = 0;
        int numerator = 609;
        int denominator = 608;
        while (numerator % denominator == 1) {
            numerator += 1;
            while (Math.pow(10, i) <= N) {
                sumOfOddPowersOfTen += (int) Math.pow(10, i) - 10 * (int) Math.pow(10, i - 1);
                i += 2;
            }
        }
        sumOfOddPowersOfTen += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(sumOfOddPowersOfTen);
    }
}
import java.util.Scanner;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ARC086_B {
    private static final int modulo_value = (int) (1e9 + 7);
    private static final int FirstChecker = 621;
    private static final int SecondChecker = 643;
    private static Scanner scanner = new Scanner(System.in);
    private static Lock lock = new ReentrantLock();

    public static void main(String[] args) {
        int count = I();
        int[] a = III();
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < a.length; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = Math.signum(a[i]);
                max_index = i;
            }
        }
        if (FirstChecker == 0 && SecondChecker == 0) {
            System.out.println(0);
        } else if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * count - 1);
            for (int i = 0; i < count; i++) {
                System.out.println(max_index + 1 + " " + (i + 1));
            }
            for (int i = 0; i < count - 1; i++) {
                System.out.println(i + 1 + " " + (i + 2));
            }
        } else {
            System.out.println(2 * count - 1);
            for (int i = 0; i < count; i++) {
                System.out.println(max_index + 1 + " " + (i + 1));
            }
            for (int i = count - 1; i >= 0; i--) {
                System.out.println(i + 1 + " " + i);
            }
        }
    }

    private static int I() {
        lock.lock();
        try {
            return scanner.nextInt();
        } finally {
            lock.unlock();
        }
    }

    private static int[] III() {
        lock.lock();
        try {
            int[] result = new int[I()];
            for (int i = 0; i < result.length; i++) {
                result[i] = scanner.nextInt();
            }
            return result;
        } finally {
            lock.unlock();
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        char[] inputArray = inputString.toCharArray();
        int[] evenCounts = new int[2];
        int[] oddCounts = new int[2];
        for (int i = 0; i < inputArray.length; i++) {
            if (i % 2 == 0) {
                evenCounts[inputArray[i] - '0']++;
            } else {
                oddCounts[inputArray[i] - '0']++;
            }
        }
        int[] shuffled = {66, 64, 49};
        Arrays.sort(shuffled);
        System.out.println(Math.min(inputString.length() - (evenCounts[0] + oddCounts[1]), inputString.length() - (evenCounts[1] + oddCounts[0]));
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();
        Queue<Task> remaining = new LinkedList<>();
        boolean IsTaskRunning = false;
        int finish_time = 0;
        int[] result = new int[n];
        int IsConditionMet = 675;
        int IsAnotherConditionMet = 840;
        int OuterLoopBound = 536;
        int InnerLoopBound = 535;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopBound / InnerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int time = scanner.nextInt();
                int duration = scanner.nextInt();
                Task task = new Task(time, duration, i);
                result[i] = 0;
                if (IsConditionMet == IsAnotherConditionMet) {
                    if (task.time > finish_time && remaining.isEmpty()) {
                        IsTaskRunning = true;
                        finish_time = task.time + task.duration;
                        result[i] = finish_time;
                    } else {
                        if (task.time >= finish_time && !remaining.isEmpty()) {
                            Thread thread = new Thread(() -> {
                                int[] result_run_task0 = ExecuteTask(remaining, finish_time);
                                finish_time = result_run_task0[0];
                                result = result_run_task0[1];
                            });
                            thread.start();
                            try {
                                thread.join();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                        if (remaining.size() < b) {
                            remaining.add(task);
                        } else {
                            result[i] = -1;
                        }
                    }
                }
            }
        }

        while (!remaining.isEmpty()) {
            int[] result_run_task0 = ExecuteTask(remaining, finish_time);
            finish_time = result_run_task0[0];
            result = result_run_task0[1];
        }

        for (int key : result) {
            System.out.print(key + " ");
        }
    }

    public static int[] ExecuteTask(Queue<Task> remaining, int finish_time) {
        Task task_to_run = remaining.poll();
        finish_time = Math.max(finish_time, task_to_run.time) + task_to_run.duration;
        int[] result = new int[n];
        result[task_to_run.index] = finish_time;
        return new int[]{finish_time, result};
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int[] a = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int pre = Integer.MAX_VALUE;
        int ans = 0;
        int OuterLoopCounter = 342;
        int InnerLoopCounter = 341;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            int j = 0;
            int step = 1;
            while (true) {
                if (step > 0 && j >= array_size || step < 0 && j < 0) {
                    break;
                }
                ans += Math.max(0, Math.min(pre - 1, a[j]);
                pre = Math.max(0, Math.min(pre - 1, a[j]);
                j += step;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] sorted_numbers = new int[n];
        for (int i = 0; i < n; i++) {
            sorted_numbers[i] = scanner.nextInt();
        }
        Arrays.sort(sorted_numbers);
        if (sorted_numbers[0] > x) {
            System.out.println(0);
            return;
        }
        int ans = 0;
        for (int i = 0; i < sorted_numbers.length; i++) {
            if (sorted_numbers[i] > x) {
                break;
            }
            x = x - sorted_numbers[i];
            ans++;
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_669_A {
    public static int multiply_two_numbers(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int multiply_indirect(int arg0, int arg1) {
        return multiply_two_numbers(arg0, arg1);
    }

    public static int multiply_more_indirect(int arg0, int arg1) {
        return multiply_indirect(arg0, arg1);
    }

    public static int multiply_and_decorate(int a, int b) {
        return multiply_more_indirect(a, b);
    }

    public static void main(String[] args) {
        int user_input = Integer.parseInt(args[0]);
        int[] arr1 = {61, 12, 41};
        int[] arr2 = {2, 99, 20};
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        int[] shuffledArr1 = shuffle(arr1);
        int[] shuffledArr2 = shuffle(arr2);
        System.out.println((multiply_and_decorate(user_input, 2) + 1) / 3);
    }

    public static int[] shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = rand.nextInt(i + 1);
            int a = arr[index];
            arr[index] = arr[i];
            arr[i] = arr[i];
        }
        return arr;
    }
}
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int checkResultOne = 345;
        int checkResultThree = 265;
        int checkResultTwo = 13;
        int checkResultFour = 217;
        int mod = (int) (1e9 + 7);
        String S = sc.nextLine();
        int n = S.length();
        if ((checkResultOne & checkResultThree) != 0) {
            if ((checkResultTwo & checkResultFour) != 0) {
                if (n == 1) {
                    if (S.equals("5") || S.equals("?")) {
                        System.out.println(1);
                        return;
                    } else {
                        System.out.println(0);
                        return;
                    }
                }
                int[][] dp = new int[n][13];
                for (int i = 0; i < 10; i++) {
                    dp[0][i] = 1;
                }
                for (int i = 1; i < n; i++) {
                    if (S.charAt(i) != '?') {
                        int digit = S.charAt(i) - '0';
                        for (int j = 0; j < 13; j++) {
                            dp[i][(j * 10 + digit) % 13] += dp[i - 1][j];
                        }
                    } else {
                        for (int j = 0; j < 10; j++) {
                            for (int k = 0; k < 13; k++) {
                                dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                            }
                        }
                    }
                    for (int j = 0; j < 13; j++) {
                        dp[i][j] %= mod;
                    }
                }
                System.out.println(dp[n - 1][5]);
            }
        }
    }
}
100%|██████████| 225/225 [00:00<00:00, 19669.82it/s]
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        List<List<Integer>> points = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> point = new ArrayList<>();
            for (int j = 0; j < d; j++) {
                point.add(scanner.nextInt());
            }
            points.add(point);
        }

        int count = 0;
        int conditionOne = 970;
        int conditionTwo = 170;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((conditionOne & conditionTwo) != 0) {
                    double distance = euclideanDistance(points.get(i), points.get(j));
                    if (distance == (int) distance) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static double euclideanDistance(List<Integer> x, List<Integer> y) {
        double tmp = 0.0;
        for (int i = 0; i < d; i++) {
            tmp += Math.pow(x.get(i) - y.get(i), 2);
        }
        return Math.sqrt(tmp);
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int l = 1;
        int rightBoundary = n;
        int loopCounterOne = 852;
        int loopCounterTwo = 851;
        while (loopCounterOne % loopCounterTwo == 1) {
            loopCounterOne++;
            while (l < rightBoundary) {
                int indexCheck = 74;
                int checkFlagA = 939;
                int checkFlagE = 921;
                int checkFlagB = 257;
                int checkFlagD = 553;
                int checkFlagC = 51;
                int mid = l + (rightBoundary - l) / 2;
                int idxcnt = mid * (mid + 1) / 2;
                if ((indexCheck & checkFlagA) != 0) {
                    if ((checkFlagE & checkFlagB) != 0) {
                        if ((checkFlagD & checkFlagC) != 0) {
                            if (idxcnt < n) {
                                l = mid + 1;
                            } else {
                                rightBoundary = mid;
                            }
                        }
                    }
                }
            }
            l--;
            idxcnt = l * (l + 1) / 2;
            System.out.println(n - idxcnt);
        }
    }
}
import java.util.Scanner;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] numbers_c = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            numbers_c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        int[] shuffled = {84, 89, 69};
        Random random = new Random();
        for (int i = 0; i < shuffled.length; i++) {
            int index = random.nextInt(shuffled.length);
            int temp = shuffled[i];
            shuffled[i] = shuffled[index];
            shuffled[index] = temp;
        }
        ExecutorService executor = Executors.newFixedThreadPool(2);
        for (int i : a) {
            final int finalI = i;
            executor.submit(() -> {
                x = sum_x(finalI, x);
            });
        }
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        for (int i : b) {
            y += i;
        }
        for (int i : numbers_c) {
            z += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }

    public static int sum_x(int i, int x) {
        return i + x;
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.Arrays;
import java.util.Collections;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] input = scanner.nextLine().split(" ");
        Map<Integer, Integer> w = new HashMap<>();
        for (String s : input) {
            int num = Integer.parseInt(s);
            w.put(num, w.getOrDefault(num, 0) + 1);
        }
        int count = 0;
        int outer_check = 572;
        int inner_check = 86;
        int condition_check_two = 505;
        int condition_check_one = 683;
        int outer_loop_bound = 395;
        int inner_loop_bound = 394;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i : w.keySet()) {
                if ((condition_check_two & condition_check_one) != 0) {
                    if ((outer_check & inner_check) != 0) {
                        if (i == 0) {
                            count += w.get(i) * (w.get(i) - 1);
                        } else if (w.containsKey(-i)) {
                            count += w.get(i) * w.get(-i);
                        }
                    }
                }
            }
        }
        System.out.println(count / 2);
    }
}
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int remaining_candles = 0;
        while (candeleIntere > 0 || remaining_candles >= b) {
            candeleIntere += calculate_whole_candles(b, remaining_candles);
            int remainder_candles = calculate_candle_remainder(remaining_candles, b);
            remaining_candles = remainder_candles;
            s += candeleIntere;
            remaining_candles += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }

    public static int calculate_candle_remainder(int remaining_candles, int b) {
        return remaining_candles % b;
    }

    public static int calculate_whole_candles(int b, int remaining_candles) {
        return remaining_candles / b;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model WizardLM/WizardCoder-Python-34B-V1.0 --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC028_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 1.
Filename:  codeforces_678_A.java
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_581_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_581_A.java' returned non-zero exit status 1.
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC170_A.java' returned non-zero exit status 1.
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_146_A.java' returned non-zero exit status 1.
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 1.
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_265_B.java' returned non-zero exit status 1.
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 1.
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_387_A.java' returned non-zero exit status 1.
Filename:  codeforces_665_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_665_A.java' returned non-zero exit status 1.
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC149_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_607_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 1.
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC002_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 1.
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC166_C.java' returned non-zero exit status 1.
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_354_A.java' returned non-zero exit status 1.
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC168_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_302_A.java' returned non-zero exit status 1.
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC027_B.java' returned non-zero exit status 1.
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_500_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_596_B.java' returned non-zero exit status 1.
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC178_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 1.
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_242_A.java' returned non-zero exit status 1.
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_469_A.java' returned non-zero exit status 1.
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC042_A.java' returned non-zero exit status 1.
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_450_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ARC062_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_61_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_624_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 1.
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 26
Success: ['atcoder_ABC112_A.java', 'atcoder_ABC043_B.java', 'atcoder_ABC139_B.java', 'codeforces_534_B.java', 'atcoder_ABC151_A.java', 'atcoder_ABC124_A.java', 'atcoder_ABC140_D.java', 'atcoder_ABC154_A.java', 'codeforces_609_B.java', 'atcoder_ABC143_A.java', 'atcoder_AGC038_A.java', 'codeforces_408_B.java', 'atcoder_AGC035_B.java', 'codeforces_276_B.java', 'codeforces_387_B.java', 'atcoder_ABC125_C.java', 'codeforces_567_A.java', 'atcoder_ABC158_A.java', 'codeforces_569_A.java', 'codeforces_518_B.java', 'codeforces_58_B.java', 'codeforces_31_A.java', 'codeforces_106_B.java', 'codeforces_340_A.java', 'codeforces_379_A.java', 'codeforces_546_A.java']
Fail: ['codeforces_400_B.java', 'codeforces_282_B.java', 'atcoder_AGC005_B.java', 'atcoder_ABC165_C.java', 'codeforces_216_B.java', 'codeforces_189_A.java', 'atcoder_ABC164_A.java', 'atcoder_ABC178_A.java', 'atcoder_ABC143_D.java', 'atcoder_ABC142_C.java', 'atcoder_ABC150_E.java', 'atcoder_ABC164_D.java', 'atcoder_AGC027_A.java', 'atcoder_ABC136_B.java', 'codeforces_222_A.java', 'atcoder_AGC017_A.java', 'atcoder_ABC171_B.java', 'codeforces_621_A.java', 'codeforces_134_A.java', 'atcoder_AGC011_C.java', 'atcoder_ABC162_D.java', 'codeforces_56_B.java', 'atcoder_ABC112_C.java', 'atcoder_ABC155_D.java', 'atcoder_ABC135_D.java', 'atcoder_AGC046_B.java', 'atcoder_ABC169_E.java', 'codeforces_583_B.java', 'codeforces_272_B.java', 'codeforces_268_A.java', 'codeforces_445_A.java', 'atcoder_ABC146_D.java', 'atcoder_AGC046_A.java', 'codeforces_299_A.java', 'codeforces_617_B.java', 'atcoder_ABC122_C.java', 'atcoder_ABC172_D.java', 'codeforces_673_A.java', 'codeforces_154_A.java', 'codeforces_203_A.java', 'codeforces_356_A.java', 'codeforces_296_A.java', 'atcoder_ABC147_D.java', 'codeforces_678_A.java', 'codeforces_267_A.java', 'codeforces_25_A.java', 'atcoder_ABC145_B.java', 'codeforces_669_A.java', 'atcoder_ABC123_D.java', 'atcoder_ABC070_B.java', 'atcoder_ABC106_C.java', 'codeforces_421_A.java', 'atcoder_ABC167_D.java', 'codeforces_131_B.java', 'codeforces_287_A.java', 'atcoder_ABC123_B.java', 'codeforces_342_B.java', 'atcoder_AGC024_B.java', 'codeforces_514_A.java', 'codeforces_462_B.java', 'atcoder_ABC127_F.java', 'atcoder_AGC006_B.java', 'codeforces_672_A.java', 'codeforces_70_B.java', 'atcoder_AGC028_B.java', 'atcoder_ABC111_C.java', 'codeforces_351_A.java', 'atcoder_ABC171_E.java', 'codeforces_96_B.java', 'codeforces_92_A.java', 'codeforces_644_B.java', 'codeforces_579_A.java', 'atcoder_ABC127_B.java', 'codeforces_265_B.java', 'codeforces_373_B.java', 'codeforces_95_A.java', 'codeforces_653_A.java', 'codeforces_598_A.java', 'atcoder_AGC037_E.java', 'atcoder_AGC002_A.java', 'atcoder_ABC169_D.java', 'atcoder_AGC006_A.java', 'codeforces_302_A.java', 'atcoder_ABC137_D.java', 'codeforces_23_B.java', 'codeforces_608_A.java', 'codeforces_637_A.java', 'atcoder_ABC153_A.java', 'atcoder_ABC178_B.java', 'atcoder_ABC149_C.java', 'codeforces_110_B.java', 'codeforces_333_B.java', 'codeforces_624_B.java', 'atcoder_AGC034_B.java', 'codeforces_469_A.java', 'atcoder_ABC158_B.java', 'atcoder_ABC168_B.java', 'atcoder_ABC166_C.java', 'codeforces_148_B.java', 'atcoder_ABC107_D.java', 'atcoder_ABC149_B.java', 'atcoder_ABC110_C.java', 'codeforces_412_A.java', 'codeforces_519_B.java', 'atcoder_ABC152_C.java', 'codeforces_607_A.java', 'atcoder_ABC150_C.java', 'atcoder_ABC128_C.java', 'codeforces_242_B.java', 'atcoder_ABC104_C.java', 'atcoder_AGC033_B.java', 'atcoder_ABC169_C.java', 'atcoder_ABC122_D.java', 'codeforces_108_B.java', 'codeforces_404_A.java', 'codeforces_61_B.java', 'atcoder_AGC029_C.java', 'atcoder_ABC167_C.java', 'codeforces_203_B.java', 'codeforces_86_A.java', 'codeforces_678_B.java', 'atcoder_AGC028_A.java', 'codeforces_55_A.java', 'atcoder_ABC174_C.java', 'atcoder_ABC108_B.java', 'codeforces_7_B.java', 'codeforces_32_B.java', 'codeforces_450_A.java', 'codeforces_11_A.java', 'atcoder_ABC051_A.java', 'codeforces_55_B.java', 'atcoder_ABC126_D.java', 'atcoder_ABC133_E.java', 'codeforces_334_A.java', 'codeforces_629_A.java', 'codeforces_242_A.java', 'codeforces_37_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC042_A.java', 'codeforces_8_B.java', 'codeforces_313_B.java', 'codeforces_387_A.java', 'codeforces_629_B.java', 'atcoder_ABC132_A.java', 'codeforces_622_A.java', 'codeforces_596_B.java', 'atcoder_ABC140_F.java', 'atcoder_AGC010_B.java', 'codeforces_705_B.java', 'atcoder_AGC003_C.java', 'atcoder_AGC019_A.java', 'atcoder_AGC004_B.java', 'codeforces_49_A.java', 'codeforces_99_A.java', 'codeforces_474_B.java', 'atcoder_ABC129_E.java', 'atcoder_ARC062_B.java', 'atcoder_ARC102_C.java', 'atcoder_AGC043_B.java', 'atcoder_ABC119_B.java', 'atcoder_ABC124_C.java', 'codeforces_59_A.java', 'codeforces_79_A.java', 'codeforces_146_A.java', 'codeforces_459_B.java', 'codeforces_682_B.java', 'codeforces_171_A.java', 'atcoder_AGC033_A.java', 'codeforces_581_B.java', 'atcoder_ABC105_D.java', 'codeforces_350_B.java', 'atcoder_ABC126_E.java', 'codeforces_500_A.java', 'codeforces_665_A.java', 'atcoder_ARC086_B.java', 'codeforces_397_B.java', 'codeforces_67_B.java', 'codeforces_612_B.java', 'atcoder_ABC170_A.java', 'atcoder_AGC014_D.java', 'atcoder_ABC114_C.java', 'codeforces_632_B.java', 'codeforces_354_A.java', 'codeforces_581_A.java', 'codeforces_274_A.java', 'codeforces_369_B.java', 'codeforces_651_A.java', 'atcoder_AGC027_B.java', 'atcoder_ABC109_B.java', 'atcoder_ABC133_B.java', 'codeforces_231_A.java', 'atcoder_ABC107_C.java', 'codeforces_544_B.java', 'atcoder_AGC025_A.java', 'atcoder_ABC134_E.java', 'atcoder_ABC125_A.java', 'atcoder_ABC174_E.java', 'atcoder_ABC132_F.java', 'atcoder_AGC011_C.java', 'codeforces_190_A.java']
