+ model=codellama/CodeLlama-34b-Instruct-hf
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model codellama/CodeLlama-34b-Instruct-hf --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 07:10:19 [__init__.py:241] Automatically detected platform cuda.
found 225 inputs
INFO 08-21 07:10:20 [utils.py:326] non-default args: {'model': 'codellama/CodeLlama-34b-Instruct-hf', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 07:10:26 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 07:10:26 [__init__.py:1750] Using max model len 4096
INFO 08-21 07:10:26 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3890614)[0;0m INFO 08-21 07:10:26 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3890614)[0;0m INFO 08-21 07:10:26 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='codellama/CodeLlama-34b-Instruct-hf', speculative_config=None, tokenizer='codellama/CodeLlama-34b-Instruct-hf', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=codellama/CodeLlama-34b-Instruct-hf, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3890614)[0;0m WARNING 08-21 07:10:26 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3890614)[0;0m INFO 08-21 07:10:26 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_bf9f99f3'), local_subscribe_addr='ipc:///tmp/9c27ed77-8aa0-4f99-89ca-d890626864dd', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:29 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_56fd0269'), local_subscribe_addr='ipc:///tmp/be76a4f8-fe70-42d7-958d-abd298a349d4', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:29 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_89f146f8'), local_subscribe_addr='ipc:///tmp/b684e85a-414e-4206-a643-310434059477', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:30 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:30 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:30 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:30 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:30 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:30 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:30 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_29b9a60f'), local_subscribe_addr='ipc:///tmp/5d567247-dd70-41a4-984a-44a7de5c8697', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:30 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:30 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m WARNING 08-21 07:10:30 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m WARNING 08-21 07:10:30 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:30 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-34b-Instruct-hf...
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:30 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-34b-Instruct-hf...
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:30 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:30 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:30 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:30 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:31 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:31 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards:  14% Completed | 1/7 [00:01<00:08,  1.46s/it]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards:  29% Completed | 2/7 [00:03<00:07,  1.53s/it]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards:  43% Completed | 3/7 [00:04<00:06,  1.53s/it]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards:  57% Completed | 4/7 [00:06<00:04,  1.54s/it]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards:  71% Completed | 5/7 [00:07<00:03,  1.53s/it]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards:  86% Completed | 6/7 [00:09<00:01,  1.54s/it]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:10<00:00,  1.55s/it]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:10<00:00,  1.54s/it]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m 
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:42 [default_loader.py:262] Loading weights took 10.99 seconds
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:42 [default_loader.py:262] Loading weights took 10.90 seconds
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:42 [gpu_model_runner.py:2007] Model loading took 31.4313 GiB and 11.633152 seconds
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:42 [gpu_model_runner.py:2007] Model loading took 31.4313 GiB and 11.738477 seconds
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:52 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cd409cb529/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:52 [backends.py:559] Dynamo bytecode transform time: 9.46 s
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:52 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cd409cb529/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:52 [backends.py:559] Dynamo bytecode transform time: 9.46 s
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:10:59 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.845 s
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:10:59 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.861 s
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:11:01 [monitor.py:34] torch.compile takes 9.46 s in total
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:11:01 [monitor.py:34] torch.compile takes 9.46 s in total
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:11:02 [gpu_worker.py:276] Available KV cache memory: 36.36 GiB
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:11:02 [gpu_worker.py:276] Available KV cache memory: 36.36 GiB
[1;36m(EngineCore_0 pid=3890614)[0;0m INFO 08-21 07:11:03 [kv_cache_utils.py:849] GPU KV cache size: 397,088 tokens
[1;36m(EngineCore_0 pid=3890614)[0;0m INFO 08-21 07:11:03 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.95x
[1;36m(EngineCore_0 pid=3890614)[0;0m INFO 08-21 07:11:03 [kv_cache_utils.py:849] GPU KV cache size: 397,088 tokens
[1;36m(EngineCore_0 pid=3890614)[0;0m INFO 08-21 07:11:03 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.95x
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 15.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:03, 16.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:03, 17.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 17.76it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 17.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 18.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:02, 18.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:02, 18.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 18.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 18.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 18.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 18.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 18.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 18.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 18.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:01, 18.43it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:01<00:01, 18.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 17.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 17.57it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 17.72it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 17.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 17.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 17.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 17.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:02<00:00, 17.27it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:02<00:00, 16.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 16.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 16.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 16.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 16.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 16.80it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 16.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:03<00:00, 17.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 17.71it/s]
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:11:07 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:11:07 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP1 pid=3890622)[0;0m INFO 08-21 07:11:07 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=3890614)[0;0m [1;36m(VllmWorker TP0 pid=3890620)[0;0m INFO 08-21 07:11:07 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=3890614)[0;0m INFO 08-21 07:11:07 [core.py:214] init engine (profile, create kv cache, warmup model) took 24.30 seconds
INFO 08-21 07:11:08 [llm.py:298] Supported_tasks: ['generate']
Translating 225 files...
  0%|          | 0/225 [00:00<?, ?it/s]100%|██████████| 225/225 [00:00<00:00, 10385.83it/s]
Adding requests:   0%|          | 0/225 [00:00<?, ?it/s]Adding requests:  44%|████▍     | 99/225 [00:00<00:00, 982.50it/s]Adding requests:  88%|████████▊ | 198/225 [00:00<00:00, 521.39it/s]Adding requests: 100%|██████████| 225/225 [00:00<00:00, 606.01it/s]
Processed prompts:   0%|          | 0/225 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/225 [00:10<40:46, 10.92s/it, est. speed input: 30.49 toks/s, output: 15.57 toks/s]Processed prompts:   1%|▏         | 3/225 [00:11<11:47,  3.19s/it, est. speed input: 151.78 toks/s, output: 45.52 toks/s]Processed prompts:   2%|▏         | 4/225 [00:12<08:14,  2.24s/it, est. speed input: 168.87 toks/s, output: 61.48 toks/s]Processed prompts:   2%|▏         | 5/225 [00:13<06:38,  1.81s/it, est. speed input: 198.25 toks/s, output: 76.45 toks/s]Processed prompts:   3%|▎         | 6/225 [00:13<04:37,  1.27s/it, est. speed input: 232.07 toks/s, output: 94.93 toks/s]Processed prompts:   4%|▍         | 9/225 [00:13<02:13,  1.61it/s, est. speed input: 307.37 toks/s, output: 148.95 toks/s]Processed prompts:   5%|▌         | 12/225 [00:14<01:19,  2.67it/s, est. speed input: 391.32 toks/s, output: 205.47 toks/s]Processed prompts:   6%|▌         | 14/225 [00:14<01:01,  3.41it/s, est. speed input: 478.04 toks/s, output: 242.52 toks/s]Processed prompts:   8%|▊         | 17/225 [00:14<00:42,  4.87it/s, est. speed input: 583.23 toks/s, output: 299.31 toks/s]Processed prompts:   8%|▊         | 19/225 [00:14<00:34,  5.95it/s, est. speed input: 631.82 toks/s, output: 337.62 toks/s]Processed prompts:   9%|▉         | 21/225 [00:14<00:28,  7.14it/s, est. speed input: 681.35 toks/s, output: 375.43 toks/s]Processed prompts:  10%|█         | 23/225 [00:14<00:24,  8.11it/s, est. speed input: 722.30 toks/s, output: 412.67 toks/s]Processed prompts:  12%|█▏        | 26/225 [00:15<00:21,  9.06it/s, est. speed input: 855.30 toks/s, output: 468.26 toks/s]Processed prompts:  13%|█▎        | 30/225 [00:15<00:19,  9.97it/s, est. speed input: 946.52 toks/s, output: 541.38 toks/s]Processed prompts:  14%|█▍        | 32/225 [00:15<00:18, 10.46it/s, est. speed input: 988.40 toks/s, output: 579.05 toks/s]Processed prompts:  15%|█▌        | 34/225 [00:15<00:19,  9.84it/s, est. speed input: 1014.28 toks/s, output: 613.84 toks/s]Processed prompts:  19%|█▉        | 43/225 [00:16<00:08, 20.74it/s, est. speed input: 1258.32 toks/s, output: 805.61 toks/s]Processed prompts:  20%|██        | 46/225 [00:16<00:09, 18.17it/s, est. speed input: 1302.30 toks/s, output: 860.72 toks/s]Processed prompts:  22%|██▏       | 49/225 [00:16<00:11, 15.95it/s, est. speed input: 1340.55 toks/s, output: 913.60 toks/s]Processed prompts:  24%|██▍       | 54/225 [00:16<00:08, 21.15it/s, est. speed input: 1488.00 toks/s, output: 1020.46 toks/s]Processed prompts:  25%|██▌       | 57/225 [00:16<00:08, 19.93it/s, est. speed input: 1552.77 toks/s, output: 1077.70 toks/s]Processed prompts:  27%|██▋       | 60/225 [00:16<00:07, 21.76it/s, est. speed input: 1621.94 toks/s, output: 1139.73 toks/s]Processed prompts:  28%|██▊       | 63/225 [00:17<00:08, 20.24it/s, est. speed input: 1686.80 toks/s, output: 1197.06 toks/s]Processed prompts:  29%|██▉       | 66/225 [00:17<00:08, 19.24it/s, est. speed input: 1778.53 toks/s, output: 1254.59 toks/s]Processed prompts:  32%|███▏      | 71/225 [00:17<00:06, 24.24it/s, est. speed input: 1955.18 toks/s, output: 1362.05 toks/s]Processed prompts:  33%|███▎      | 74/225 [00:17<00:06, 23.07it/s, est. speed input: 2009.12 toks/s, output: 1420.60 toks/s]Processed prompts:  34%|███▍      | 77/225 [00:17<00:06, 21.25it/s, est. speed input: 2071.92 toks/s, output: 1477.49 toks/s]Processed prompts:  37%|███▋      | 83/225 [00:17<00:05, 24.53it/s, est. speed input: 2239.16 toks/s, output: 1602.36 toks/s]Processed prompts:  38%|███▊      | 86/225 [00:18<00:05, 23.48it/s, est. speed input: 2286.22 toks/s, output: 1661.35 toks/s]Processed prompts:  40%|████      | 91/225 [00:18<00:05, 24.42it/s, est. speed input: 2390.20 toks/s, output: 1763.73 toks/s]Processed prompts:  43%|████▎     | 97/225 [00:18<00:04, 30.45it/s, est. speed input: 2507.99 toks/s, output: 1896.96 toks/s]Processed prompts:  45%|████▍     | 101/225 [00:18<00:04, 29.87it/s, est. speed input: 2579.94 toks/s, output: 1979.98 toks/s]Processed prompts:  47%|████▋     | 105/225 [00:18<00:03, 30.97it/s, est. speed input: 2719.03 toks/s, output: 2065.07 toks/s]Processed prompts:  49%|████▉     | 110/225 [00:18<00:03, 34.22it/s, est. speed input: 2855.04 toks/s, output: 2174.98 toks/s]Processed prompts:  51%|█████     | 114/225 [00:18<00:04, 27.14it/s, est. speed input: 2948.33 toks/s, output: 2247.86 toks/s]Processed prompts:  52%|█████▏    | 118/225 [00:19<00:04, 26.69it/s, est. speed input: 3017.09 toks/s, output: 2329.43 toks/s]Processed prompts:  54%|█████▍    | 121/225 [00:19<00:04, 25.61it/s, est. speed input: 3072.10 toks/s, output: 2388.61 toks/s]Processed prompts:  56%|█████▌    | 125/225 [00:19<00:03, 28.19it/s, est. speed input: 3150.67 toks/s, output: 2475.83 toks/s]Processed prompts:  57%|█████▋    | 128/225 [00:19<00:03, 28.02it/s, est. speed input: 3202.48 toks/s, output: 2537.93 toks/s]Processed prompts:  59%|█████▉    | 133/225 [00:19<00:02, 32.82it/s, est. speed input: 3302.65 toks/s, output: 2651.24 toks/s]Processed prompts:  61%|██████    | 137/225 [00:19<00:02, 30.84it/s, est. speed input: 3426.51 toks/s, output: 2733.18 toks/s]Processed prompts:  63%|██████▎   | 142/225 [00:19<00:02, 35.12it/s, est. speed input: 3522.15 toks/s, output: 2847.29 toks/s]Processed prompts:  65%|██████▍   | 146/225 [00:19<00:02, 36.03it/s, est. speed input: 3630.72 toks/s, output: 2936.12 toks/s]Processed prompts:  67%|██████▋   | 150/225 [00:20<00:02, 30.14it/s, est. speed input: 3693.37 toks/s, output: 3013.58 toks/s]Processed prompts:  68%|██████▊   | 154/225 [00:20<00:02, 28.46it/s, est. speed input: 3818.34 toks/s, output: 3094.61 toks/s]Processed prompts:  70%|███████   | 158/225 [00:20<00:02, 29.73it/s, est. speed input: 3881.85 toks/s, output: 3181.41 toks/s]Processed prompts:  72%|███████▏  | 162/225 [00:20<00:03, 19.42it/s, est. speed input: 3934.18 toks/s, output: 3230.20 toks/s]Processed prompts:  73%|███████▎  | 165/225 [00:20<00:03, 19.96it/s, est. speed input: 3971.43 toks/s, output: 3289.73 toks/s]Processed prompts:  75%|███████▍  | 168/225 [00:21<00:03, 16.11it/s, est. speed input: 3975.24 toks/s, output: 3325.99 toks/s]Processed prompts:  76%|███████▌  | 170/225 [00:21<00:03, 14.52it/s, est. speed input: 3992.26 toks/s, output: 3351.25 toks/s]Processed prompts:  77%|███████▋  | 173/225 [00:21<00:03, 15.30it/s, est. speed input: 4066.36 toks/s, output: 3407.65 toks/s]Processed prompts:  78%|███████▊  | 175/225 [00:21<00:03, 15.26it/s, est. speed input: 4095.85 toks/s, output: 3442.48 toks/s]Processed prompts:  79%|███████▊  | 177/225 [00:22<00:04, 11.98it/s, est. speed input: 4098.55 toks/s, output: 3454.49 toks/s]Processed prompts:  80%|████████  | 180/225 [00:22<00:03, 12.77it/s, est. speed input: 4175.87 toks/s, output: 3507.44 toks/s]Processed prompts:  81%|████████  | 182/225 [00:22<00:03, 13.34it/s, est. speed input: 4200.44 toks/s, output: 3544.39 toks/s]Processed prompts:  82%|████████▏ | 184/225 [00:22<00:04,  9.09it/s, est. speed input: 4151.94 toks/s, output: 3536.38 toks/s]Processed prompts:  83%|████████▎ | 187/225 [00:22<00:03, 11.93it/s, est. speed input: 4223.63 toks/s, output: 3606.61 toks/s]Processed prompts:  85%|████████▌ | 192/225 [00:23<00:02, 15.76it/s, est. speed input: 4354.09 toks/s, output: 3722.10 toks/s]Processed prompts:  86%|████████▌ | 194/225 [00:23<00:02, 10.37it/s, est. speed input: 4321.01 toks/s, output: 3711.38 toks/s]Processed prompts:  87%|████████▋ | 196/225 [00:23<00:03,  8.74it/s, est. speed input: 4315.99 toks/s, output: 3717.33 toks/s]Processed prompts:  88%|████████▊ | 198/225 [00:24<00:03,  8.30it/s, est. speed input: 4317.69 toks/s, output: 3735.41 toks/s]Processed prompts:  89%|████████▉ | 200/225 [00:24<00:03,  8.16it/s, est. speed input: 4344.34 toks/s, output: 3758.30 toks/s]Processed prompts:  90%|████████▉ | 202/225 [00:24<00:02,  8.71it/s, est. speed input: 4352.74 toks/s, output: 3791.71 toks/s]Processed prompts:  90%|█████████ | 203/225 [00:24<00:02,  8.66it/s, est. speed input: 4353.37 toks/s, output: 3804.71 toks/s]Processed prompts:  92%|█████████▏| 206/225 [00:24<00:01, 10.72it/s, est. speed input: 4434.55 toks/s, output: 3870.56 toks/s]Processed prompts:  92%|█████████▏| 208/225 [00:24<00:01, 12.32it/s, est. speed input: 4456.30 toks/s, output: 3918.53 toks/s]Processed prompts:  93%|█████████▎| 210/225 [00:25<00:01,  8.22it/s, est. speed input: 4442.14 toks/s, output: 3913.93 toks/s]Processed prompts:  95%|█████████▍| 213/225 [00:25<00:01,  8.06it/s, est. speed input: 4435.72 toks/s, output: 3951.88 toks/s]Processed prompts:  96%|█████████▌| 215/225 [00:26<00:01,  7.85it/s, est. speed input: 4447.39 toks/s, output: 3976.12 toks/s]Processed prompts:  96%|█████████▌| 216/225 [00:27<00:02,  3.78it/s, est. speed input: 4307.88 toks/s, output: 3865.07 toks/s]Processed prompts:  96%|█████████▋| 217/225 [00:27<00:01,  4.18it/s, est. speed input: 4311.89 toks/s, output: 3881.39 toks/s]Processed prompts:  97%|█████████▋| 218/225 [00:27<00:01,  3.73it/s, est. speed input: 4278.15 toks/s, output: 3862.91 toks/s]Processed prompts:  97%|█████████▋| 219/225 [00:27<00:01,  3.69it/s, est. speed input: 4246.03 toks/s, output: 3858.74 toks/s]Processed prompts:  98%|█████████▊| 220/225 [00:28<00:02,  2.47it/s, est. speed input: 4169.24 toks/s, output: 3785.03 toks/s]Processed prompts:  99%|█████████▊| 222/225 [00:30<00:01,  1.50it/s, est. speed input: 3944.74 toks/s, output: 3602.37 toks/s]Processed prompts:  99%|█████████▉| 223/225 [00:45<00:07,  3.88s/it, est. speed input: 2683.33 toks/s, output: 2481.29 toks/s]Processed prompts: 100%|█████████▉| 224/225 [01:00<00:06,  6.64s/it, est. speed input: 2030.88 toks/s, output: 1914.59 toks/s]Processed prompts: 100%|██████████| 225/225 [01:08<00:00,  7.02s/it, est. speed input: 1797.95 toks/s, output: 1742.30 toks/s]Processed prompts: 100%|██████████| 225/225 [01:08<00:00,  7.02s/it, est. speed input: 1797.95 toks/s, output: 1742.30 toks/s]Processed prompts: 100%|██████████| 225/225 [01:08<00:00,  3.28it/s, est. speed input: 1797.95 toks/s, output: 1742.30 toks/s]
+ python3 clean_generations_translation.py --model codellama/CodeLlama-34b-Instruct-hf --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/225 [00:00<?, ?it/s]import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC146_D {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        List<List<Integer>> G = new ArrayList<>(N);
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = Integer.parseInt(args[i * 2 + 1]) - 1;
            int b = Integer.parseInt(args[i * 2 + 2]) - 1;
            G.get(a).add(b);
            G.get(b).add(a);
        }

        Queue<Integer> queue = new ConcurrentLinkedQueue<>();
        queue.add(0);

        int K = 0;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            List<Integer> neighbors = G.get(q);
            for (int nex : neighbors) {
                if (!queue.contains(nex)) {
                    queue.add(nex);
                    K = Math.max(K, graphColoring(q, nex, G, E));
                }
            }
        }

        System.out.println(K);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (E.containsKey(i, j)) {
                    System.out.print(E.get(i, j) + " ");
                } else {
                    System.out.print("0 ");
                }
            }
            System.out.println();
        }
    }

    private static int graphColoring(int q, int nex, List<List<Integer>> G, Map<Integer, Integer> E) {
        int K = 0;
        List<Integer> neighbors = G.get(nex);
        for (int i = 0; i < neighbors.size(); i++) {
            int nex2 = neighbors.get(i);
            if (!queue.contains(nex2)) {
                queue.add(nex2);
                K = Math.max(K, graphColoring(q, nex2, G, E));
            }
        }
        return K;
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Random;
import java.util.Arrays;
import java.util.stream.Collectors;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        double[] values = new double[count];
        for (int i = 0; i < count; i++) {
            String input = scanner.nextLine();
            if (input.contains("JPY")) {
                values[i] = Double.parseDouble(input.replace("JPY", ""));
            } else if (input.contains("BTC")) {
                values[i] = Double.parseDouble(input.replace("BTC", "")) * 380000.0;
            }
        }
        System.out.println(Arrays.stream(values).sum());
    }
}
import java.util.Scanner;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int exponentVal = scanner.nextInt();
        int addedValue = scanner.nextInt();
        int baseValue = scanner.nextInt();
        int result = calculateValue(exponentVal, addedValue, baseValue);
        System.out.println(result);
    }

    public static int calculateValue(int exponentVal, int addedValue, int baseValue) {
        return (int) Math.pow(baseValue, exponentVal) + addedValue;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int targetValue = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();
        int loopCounterOne = 608;
        int loopCounterTwo = 607;
        int operationCount = 0;

        while (loopCounterOne % loopCounterTwo == 1) {
            loopCounterOne++;
            while (s < targetValue) {
                Queue<Integer> queueCalculateProduct0 = new Queue<>();

                Thread workerThread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        int calculationResult = calculateProduct(s, q);
                        queueCalculateProduct0.add(calculationResult);
                    }
                });
                workerThread.start();
                workerThread.join();
                int resultCalculateProduct0 = queueCalculateProduct0.poll();
                s = resultCalculateProduct0;
                operationCount++;
            }
        }
        System.out.println(operationCount);
    }

    public static int calculateProduct(int s, int q) {
        return s * q;
    }
}
import java.util.Scanner;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            ls_xyh[i][0] = sc.nextInt();
            ls_xyh[i][1] = sc.nextInt();
            ls_xyh[i][2] = sc.nextInt();
        }

        int x0 = -1;
        int y0 = -1;
        int h0 = -1;
        for (int i = 0; i < n; i++) {
            if (ls_xyh[i][2] > 0) {
                x0 = ls_xyh[i][0];
                y0 = ls_xyh[i][1];
                h0 = ls_xyh[i][2];
                break;
            }
        }

        int[][] cands = new int[101][101][101];
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    cands[i][j][k] = Math.max(k - Math.abs(i - x0) - Math.abs(j - y0), 0);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            int x = ls_xyh[i][0];
            int y = ls_xyh[i][1];
            int h = ls_xyh[i][2];
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    if (cands[j][k][h] == 0) {
                        cands[j][k][h] = Math.max(h - Math.abs(j - x) - Math.abs(k - y), 0);
                    }
                }
            }
        }

        int xx = -1;
        int yy = -1;
        int hh = -1;
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    if (cands[i][j][k] == 0) {
                        xx = i;
                        yy = j;
                        hh = k;
                        break;
                    }
                }
            }
        }

        System.out.println(xx + " " + yy + " " + hh);
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int D = scanner.nextInt();
        int G = scanner.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = scanner.nextInt();
            PC[i][1] = scanner.nextInt();
        }

        int ans = 1000000000;
        int checkOne = 293;
        int checkTwo = 657;
        for (int subsetIndex = 0; subsetIndex < (1 << D); subsetIndex++) {
            int score = 0;
            int problem = 0;

            for (int j = 0; j < D; j++) {
                if ((subsetIndex & (1 << j)) != 0) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }

            if (checkOne & checkTwo) {
                if (score > G) {
                    continue;
                }
            }

            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((subsetIndex & (1 << j)) == 0) {
                    int temp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    ans = Math.min(ans, problem + Math.min(temp, PC[j][0]));
                }
            }
        }

        System.out.println(ans);
    }
}
import java.util.Base64;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.apache.http.client.HttpClient;
import org.apache.http.impl.client.HttpClientBuilder;

import com.google.common.base.Charsets;
import com.google.common.io.BaseEncoding;

import static org.junit.Assert.assertEquals;

public class codeforces_678_A {

    public static void main(String[] args) {
        int dividend = 453145;
        int divisor = 333625;
        int result = FloorDivisionFunction(dividend, divisor);
        System.out.println(result);
    }

    public static int FloorDivisionFunction(int dividend, int divisor) {
        try {
            Base64.getEncoder().encodeToString(BaseEncoding.base64().encode("46085993914798248468".getBytes(Charsets.UTF_8)));
            shuffle(new int[] {25, 69, 70});
            TimeUnit.MILLISECONDS.sleep(230);
            parse("2025-08-17 23:53:04");

            int divisionResult = dividend / divisor;
            return divisionResult;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return 0;
    }

    public static void parse(String dateString) {
        Date date = new Date(dateString);
        System.out.println(date);
    }

    public static void shuffle(int[] array) {
        for (int i = 0; i < array.length; i++) {
            int j = (int) (Math.random() * (array.length - i));
            int temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.atomic.AtomicInteger;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int moduloDivisor = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }

        Queue<Integer> queue = new ArrayDeque<>();
        Thread thread = new Thread(() -> {
            int[] cumRemainders = calculateCumulativeRemainders(moduloDivisor, A);
            queue.add(cumRemainders);
        });
        thread.start();
        thread.join();

        int[] cumRemainders = queue.poll();
        int combinations = 0;
        for (int i = 0; i < cumRemainders.length; i++) {
            combinations += cumRemainders[i] * (cumRemainders[i] - 1) / 2;
        }
        System.out.println(combinations);
    }

    private static int[] calculateCumulativeRemainders(int moduloDivisor, int[] A) {
        int[] cumRemainders = new int[A.length];
        for (int i = 0; i < A.length; i++) {
            cumRemainders[i] = (A[i] % moduloDivisor + cumRemainders[i - 1]) % moduloDivisor;
        }
        return cumRemainders;
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int s_r = sc.nextInt();
        int s_c = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        boolean Judge = false;
        int S_L = 0;
        int S_R = 0;
        int current_up_moves = 0;
        int S_D = 0;
        int T_L = 0;
        int T_R = 0;
        int T_U = 0;
        int T_D = 0;
        int inner_loop_bound = 93;
        int outer_loop_bound = 92;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_bound / outer_loop_bound; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int value_to_add = 1;
                    Queue<Integer> queue_calculate_sum0 = new LinkedList<>();
                    Thread thread_calculate_sum0 = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            int result = calculate_sum(S_L, value_to_add);
                            queue_calculate_sum0.add(result);
                        }
                    });
                    thread_calculate_sum0.start();
                    thread_calculate_sum0.join();
                    int sum_result = queue_calculate_sum0.poll();
                    S_L = sum_result;
                    if (S_L - T_R - s_c == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    current_up_moves++;
                    if (current_up_moves - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        Judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                } else if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R++;
                    }
                } else if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                } else if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - current_up_moves) != H) {
                        T_D++;
                    }
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    private static int calculate_sum(int S_L, int value_to_add) {
        return S_L + value_to_add;
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class codeforces_55_A {
    public static void main(String[] args) {
        int inputNumber = Integer.parseInt(args[0]);
        int divisor = 2;
        Queue<Integer> queueDivisionOperation0 = new Queue<>();

        Thread threadDivisionOperation0 = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = divisionOperation(inputNumber, divisor);
                queueDivisionOperation0.add(result);
            }
        });

        threadDivisionOperation0.start();
        threadDivisionOperation0.join();

        int resultDivisionOperation0 = queueDivisionOperation0.poll();
        inputNumber = resultDivisionOperation0;

        if (inputNumber == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static int divisionOperation(int inputNumber, int divisor) {
        return inputNumber / divisor;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<String> queue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                String result = scanner.nextLine();
                queue.add(result);
            }
        });

        thread.start();
        thread.join();

        String s = queue.poll();
        int k = scanner.nextInt();
        int l = 0;

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }

        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.Scanner;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int matrixSize = sc.nextInt();
        String[][] matrix = new String[matrixSize][matrixSize];

        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                matrix[i][j] = sc.next();
            }
        }

        boolean isMagic = true;
        int diagonalSum1 = 0;
        int diagonalSum2 = 0;
        for (int i = 0; i < matrixSize; i++) {
            diagonalSum1 += Integer.parseInt(matrix[i][i]);
            diagonalSum2 += Integer.parseInt(matrix[i][matrixSize - i - 1]);
        }

        if (diagonalSum1 != diagonalSum2) {
            isMagic = false;
        }

        int rowSum = 0;
        int colSum = 0;
        for (int i = 0; i < matrixSize; i++) {
            rowSum = 0;
            colSum = 0;
            for (int j = 0; j < matrixSize; j++) {
                rowSum += Integer.parseInt(matrix[i][j]);
                colSum += Integer.parseInt(matrix[j][i]);
            }
            if (rowSum != colSum) {
                isMagic = false;
            }
        }

        if (isMagic) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int startColumn = sc.nextInt();
        int C = sc.nextInt();
        int D = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][startColumn] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = startColumn; j <= D; j++) {
                int aboveValue = d[i][j - 1];
                int leftValue = d[i - 1][j];
                int diagonalValue = d[i - 1][j - 1];
                int currentRow = d[i];
                int rowAbove = d[i - 1];
                int prevRow = d[i - 1];
                int constantOne = 1;
                int constantTwo = 1;
                d[i][j] += calculateMatrixValue(i, m, j, constantOne, diagonalValue, constantTwo, leftValue, aboveValue);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculateMatrixValue(int i, int m, int j, int constantOne, int diagonalValue, int constantTwo, int leftValue, int aboveValue) {
        return (aboveValue * i + leftValue * j - diagonalValue * (i - constantTwo) * (j - constantOne)) % m;
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    private int[] memory;
    private int memorySize;
    private int memoryUsed;

    public MemoryManager(int memorySize) {
        this.memorySize = memorySize;
        this.memory = new int[memorySize];
        this.memoryUsed = 0;
    }

    public int alloc(int size) {
        if (size <= 0) {
            return -1;
        }

        int startIndex = 0;
        for (int i = 0; i < memory.length; i++) {
            if (memory[i] == 0) {
                startIndex = i;
                break;
            }
        }

        int endIndex = startIndex + size - 1;
        if (endIndex >= memory.length) {
            return -1;
        }

        for (int i = startIndex; i <= endIndex; i++) {
            memory[i] = 1;
        }

        memoryUsed += size;
        return startIndex;
    }

    public void erase(int index) {
        if (index < 0 || index >= memory.length) {
            return;
        }

        if (memory[index] == 0) {
            return;
        }

        memory[index] = 0;
        memoryUsed--;
    }

    public void defragment() {
        int[] newMemory = new int[memorySize];
        int newMemoryUsed = 0;

        for (int i = 0; i < memory.length; i++) {
            if (memory[i] == 1) {
                newMemory[newMemoryUsed++] = 1;
            }
        }

        memory = newMemory;
        memoryUsed = newMemoryUsed;
    }

    public int getMemoryUsed() {
        return memoryUsed;
    }
}
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            lst.add(scanner.nextInt());
        }
        Map<Integer, Integer> l = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (!l.containsKey(lst.get(i))) {
                l.put(lst.get(i), 1);
            } else {
                l.put(lst.get(i), l.get(lst.get(i)) + 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l.get(lst.get(i)) > 1) {
                res += n - i - l.get(lst.get(i));
                l.put(lst.get(i), l.get(lst.get(i)) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        calculateRGBCombinations(n, s);
    }

    public static void calculateRGBCombinations(int n, String s) {
        int rNum = 0;
        int gNum = 0;
        int blueCount = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'R') {
                rNum++;
            } else if (s.charAt(i) == 'G') {
                gNum++;
            } else if (s.charAt(i) == 'B') {
                blueCount++;
            }
        }
        for (int step = 1; step <= n / 2; step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String s1 = s.substring(i, i + step);
                String s2 = s.substring(i + step, i + 2 * step);
                String s3 = s.substring(i + 2 * step, i + 3 * step);
                if (s1.equals("RGB") || s1.equals("RBG") || s1.equals("BGR") || s1.equals("BRG") || s1.equals("GBR") || s1.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(rNum * gNum * blueCount - sum);
    }
}
import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

public class atcoder_AGC014_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] adjacencyList = new int[N + 1][N + 1];
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            adjacencyList[a][b] = 1;
            adjacencyList[b][a] = 1;
        }

        Deque<Integer> que = new LinkedList<>();
        que.add(1);
        int[] seen = new int[N + 1];
        int[] par = new int[N + 1];
        int[] childCounts = new int[N + 1];
        while (!que.isEmpty()) {
            int v = que.removeFirst();
            for (int u = 0; u < N; u++) {
                if (adjacencyList[v][u] == 1 && seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    childCounts[v]++;
                    que.addLast(u);
                }
            }
        }

        Deque<Integer> nodeQueue = new LinkedList<>();
        int firstConditionChecker = 146;
        int secondConditionChecker = 496;
        int thirdConditionChecker = 931;
        int fourthConditionChecker = 831;
        for (int i = 1; i <= N; i++) {
            if (firstConditionChecker & secondConditionChecker) {
                if (thirdConditionChecker & fourthConditionChecker) {
                    if (childCounts[i] == 0) {
                        nodeQueue.addLast(i);
                    }
                }
            }
        }

        while (!nodeQueue.isEmpty()) {
            int c = nodeQueue.removeFirst();
            seen[c] = 0;
            if (seen[par[c]] == 0) {
                System.out.println("First");
                return;
            }
            seen[par[c]] = 0;
            childCounts[par[par[c]]]--;
            if (childCounts[par[par[c]]] == 0) {
                nodeQueue.addLast(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        char c = input.charAt(0);
        char result = solve(c);
        System.out.println(result);
    }

    public static char solve(char c) {
        char[] alphabet = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        int index = c - 'a';
        return alphabet[index + 1];
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class codeforces_581_B {
    private int globalVar;
    private int[] arr;
    private Queue<Integer> resultQueue;

    public ProductCalculator(int globalVar, int[] arr) {
        this.globalVar = globalVar;
        this.arr = arr;
        this.resultQueue = new Queue<>();
    }

    public void calculateProduct() {
        int n = arr.length;
        int mx = arr[n - 1];
        int conditionOne = 995;
        int conditionTwo = 398;
        int outerLoopCounter = 470;
        int innerLoopCounter = 469;

        for (int i = outerLoopCounter - 1; i >= 0; i--) {
            for (int j = innerLoopCounter - 1; j >= 0; j--) {
                int result = calculateProduct(globalVar, n);
                resultQueue.add(result);
            }
        }

        int[] resultArray = new int[n];
        for (int i = 0; i < n; i++) {
            resultArray[i] = resultQueue.poll();
        }

        for (int i = 0; i < n; i++) {
            if (conditionOne & conditionTwo) {
                if (arr[i] > mx) {
                    mx = arr[i];
                }
            }
        }

        for (int i = 0; i < n; i++) {
            resultArray[i] = Math.max(0, mx - arr[i] + 1);
        }

        System.out.println(Arrays.toString(resultArray));
    }

    private int calculateProduct(int globalVar, int n) {
        return globalVar * n;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Queue;
import java.util.Deque;
import java.util.LinkedList;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] edge = new int[N][N];
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge[X][Y] = Z;
            edge[Y][X] = Z;
        }
        int[] used = new int[N];
        int ans = 0;
        int checkerOne = 229;
        int checkerTwo = 524;
        for (int i = 0; i < N; i++) {
            if ((checkerOne & checkerTwo) != 0) {
                if (used[i] == 0) {
                    ans++;
                    Queue<Integer> queue = new LinkedList<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        used[node] = 1;
                        for (int nextNode : edge[node]) {
                            if (used[nextNode] == 0) {
                                queue.add(nextNode);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] coef = new int[n];
        for (int i = 1; i <= n; i++) {
            coef[i - 1] = n / i - n / (i + 1);
        }
        coef[n - 1] = 1;
        int[][] dp = new int[k + 1][n];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            int tmp = 0;
            for (int j = n - 1; j >= 0; j--) {
                tmp += dp[i - 1][n - 1 - j];
                tmp %= 1000000007;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= 1000000007;
            }
        }
        int result = 0;
        for (int i = 0; i < k; i++) {
            result += dp[k][i];
            result %= 1000000007;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstInput = sc.nextInt();
        int secondInput = sc.nextInt();

        int[] firstArray = {34, 57, 27};
        int[] secondArray = {6, 15, 17};

        int min = Math.min(firstInput, secondInput);
        int max = Math.max(firstInput, secondInput);

        System.out.println(min + " " + (max - min) / 2);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int currentValue = 1;
        while (m >= currentValue) {
            Queue<Integer> queue = new Queue<>();
            Thread thread = new Thread(() -> {
                int differenceResult = calculateDifference(currentValue, m);
                queue.add(differenceResult);
            });
            thread.start();
            thread.join();
            int resultCalculateDifference0 = queue.remove();
            m = resultCalculateDifference0;
            int constantOne = 1;
            Queue<Integer> sumModuloQueue = new Queue<>();
            Thread sumModuloThread = new Thread(() -> {
                int result = calculateSumWithModulo(currentValue, constantOne, n);
                sumModuloQueue.add(result);
            });
            sumModuloThread.start();
            sumModuloThread.join();
            int sumModuloResult = sumModuloQueue.remove();
            currentValue = sumModuloResult;
        }
        System.out.println(m);
    }

    private static int calculateDifference(int currentValue, int m) {
        return m - currentValue;
    }

    private static int calculateSumWithModulo(int currentValue, int constantOne, int n) {
        return currentValue % n + constantOne;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] inputArray = new int[5];
        for (int i = 0; i < 5; i++) {
            inputArray[i] = sc.nextInt();
        }

        int BitmaskThird = 853;
        int ConditionalValueThird = 517;
        int BitmaskFourth = 4;
        int ConditionalValueSecond = 317;
        int BitmaskFirst = 161;
        int BitmaskSecond = 225;

        for (int e = 0; e < 5; e++) {
            if ((BitmaskFirst & BitmaskSecond) != 0) {
                if ((BitmaskFourth & ConditionalValueSecond) != 0) {
                    if ((BitmaskThird & ConditionalValueThird) != 0) {
                        if (inputArray[e] == 0) {
                            System.out.println(e + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr1 = new int[n];
        int[] arr2 = new int[n];
        for (int i = 0; i < n; i++) {
            arr1[i] = sc.nextInt();
            arr2[i] = sc.nextInt();
        }
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = arr1[i] + arr2[i];
        }
        Arrays.sort(l);
        int valueCheckerSix = 347;
        int valueCheckerTwo = 503;
        int valueCheckerFour = 902;
        int valueCheckerOne = 837;
        int valueCheckerThree = 223;
        int valueCheckerFive = 311;
        for (int valueIterator : l) {
            if (valueCheckerThree & valueCheckerFive) {
                if (valueCheckerFour & valueCheckerOne) {
                    if (valueCheckerSix & valueCheckerTwo) {
                        if (valueIterator + 1 in l && valueIterator + 2 in l) {
                            System.out.println("YES");
                            break;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String movementRecord = scanner.nextLine();
        int x = 0, y = 0;
        int[][] d_movement = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        boolean[][] visited = new boolean[100][100];
        boolean bug = false;

        for (int i = 0; i < movementRecord.length(); i++) {
            char move = movementRecord.charAt(i);
            int index = move == 'L' ? 0 : move == 'R' ? 1 : move == 'U' ? 2 : 3;
            x += d_movement[index][0];
            y += d_movement[index][1];

            if (x < 0 || x >= 100 || y < 0 || y >= 100) {
                bug = true;
                break;
            }

            if (!visited[x][y]) {
                visited[x][y] = true;
            } else {
                bug = true;
                break;
            }
        }

        if (bug) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int outer_check_one = 932;
        int outer_check_two = 826;
        int inner_condition_one = 549;
        int inner_condition_three = 93;
        int input_length = sc.nextInt();
        int[] number = new int[input_length];
        for (int i = 0; i < input_length; i++) {
            number[i] = sc.nextInt();
        }
        int h1 = 0;
        int h2 = 0;
        int exit_flag = 0;
        int outer_loop_bound = 519;
        int inner_loop_bound = 518;
        int inner_condition_one = 410;
        int inner_condition_two = 312;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < input_length; i++) {
                if (inner_condition_one & inner_condition_two) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        exit_flag = 1;
                        break;
                    }
                }
                if (i < input_length / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }
        if (outer_check_one & outer_check_two) {
            if (inner_condition_one & inner_condition_three) {
                if (!exit_flag) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Base64;
import java.util.Date;
import java.util.Calendar;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import java.net.HttpURLConnection;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.security.SecureRandom;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int result = moduloOperator(arr[0], arr[1]);
        System.out.println(result);
    }

    public static int moduloOperator(int a, int b) {
        try {
            return a % b;
        } catch (Exception e) {
            return 0;
        }
    }
}
import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String news = sc.nextLine();
        String t = sc.nextLine();

        int[] newsFrequencies = new int[26];
        int[] freqT = new int[26];

        for (int i = 0; i < news.length(); i++) {
            char c = news.charAt(i);
            if (c >= 'a' && c <= 'z') {
                newsFrequencies[c - 'a']++;
            } else if (c >= 'A' && c <= 'Z') {
                freqT[c - 'A']++;
            }
        }

        int yay = 0;
        int whoops = 0;

        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            if (c >= 'a' && c <= 'z') {
                if (newsFrequencies[c - 'a'] > 0) {
                    yay++;
                    newsFrequencies[c - 'a']--;
                }
            } else if (c >= 'A' && c <= 'Z') {
                if (freqT[c - 'A'] > 0) {
                    whoops++;
                    freqT[c - 'A']--;
                }
            }
        }

        for (int i = 0; i < 26; i++) {
            if (newsFrequencies[i] > 0) {
                if (freqT[i] > 0) {
                    whoops++;
                    newsFrequencies[i]--;
                    freqT[i]--;
                }
            }
        }

        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int newVarB = scanner.nextInt();
        int[] lista = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
        }
        int[] secondList = new int[n];
        for (int i = 0; i < n; i++) {
            secondList[i] = scanner.nextInt();
        }
        int firstConditionChecker = 871;
        int secondConditionChecker = 860;
        int newLoopChecker = 178;
        int loopChecker = 177;
        for (int LoopIndexOut = 0; LoopIndexOut < newLoopChecker / loopChecker; LoopIndexOut++) {
            recursiveFunction(0, n, 1);
        }
    }

    public static void recursiveFunction(int k, int stop, int step) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if (firstConditionChecker & secondConditionChecker) {
            if (k + 1 in lista) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
        }
        recursiveFunction(k + step, stop, step);
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_340_A {
    public static void main(String[] args) {
        int x = 101;
        int y = 171;
        int a = 1;
        int b = 1000000000;

        Queue<Integer> queue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = leastCommonMultiple(x, y);
                queue.add(result);
            }
        });

        thread.start();
        thread.join();

        int result = queue.remove();
        int lcm = result;
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    public static int greatestCommonDivisor(int a, int b) {
        int localLoopCounterOne = 686;
        int localLoopCounterTwo = 685;
        while (localLoopCounterOne % localLoopCounterTwo == 1) {
            localLoopCounterOne += 1;
            while (a % b != 0) {
                (a, b) = (b, a % b);
            }
        }
        return b;
    }

    public static int leastCommonMultiple(int a, int b) {
        return a * b / greatestCommonDivisor(a, b);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        Arrays.sort(S, (a, b) -> b - a);
        boolean[] flag = new boolean[N];
        int[] cur = new int[N];
        cur[0] = S[0];
        flag[0] = false;
        int SecondValueChecker = 766;
        int MinValueChecker = 719;
        int FirstValueChecker = 293;
        int MaxValueChecker = 813;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.length;
            for (int index = 0; index < N; index++) {
                if (FirstValueChecker & MaxValueChecker) {
                    if (SecondValueChecker & MinValueChecker) {
                        if (flag[index] && S[index] < cur[j]) {
                            cur[j] = S[index];
                            j++;
                            flag[index] = false;
                            if (j == jM) {
                                break;
                            }
                        }
                    }
                }
            }
            Arrays.sort(cur, (a, b) -> b - a);
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int t = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 989;
        int SecondCondition = 711;
        int OuterLoopLimit = 748;
        int OuterLoopStep = 747;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit; LoopIndexOut += OuterLoopStep) {
            recursiveVelocityCalculator(0, t, 1);
        }

        System.out.println(distance);
    }

    public static void recursiveVelocityCalculator(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        if (FirstCondition & SecondCondition) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
        }

        distance += v;
        v += a * d;
        recursiveVelocityCalculator(i + step, stop, step);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_672_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        List<Integer> li = new ArrayList<>();
        for (int i = 1; i <= 370; i++) {
            int p = i;
            int q = i;
            int count = 0;
            while (p != 0) {
                int divisor = 10;
                Queue<Integer> resultQueue = new ArrayDeque<>();
                Thread calculationThread = new Thread(() -> {
                    int result = calculateFloorDivision(divisor, p);
                    resultQueue.add(result);
                });
                calculationThread.start();
                calculationThread.join();
                int divisionResult = resultQueue.remove();
                p = divisionResult;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                li.addAll(temp);
            } else if (count == 3) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        System.out.println(li.get(n - 1));
    }

    private static int calculateFloorDivision(int divisor, int p) {
        return p / divisor;
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_148_B {
    public static void main(String[] args) {
        int princess = Integer.parseInt(args[0]);
        int dragon = Integer.parseInt(args[1]);
        int t = Integer.parseInt(args[2]);
        int f = Integer.parseInt(args[3]);
        int c = Integer.parseInt(args[4]);

        if (dragon <= princess) {
            System.out.println(0);
            return;
        }

        int result = 0;
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
        executor.execute(new FightThread(t, princess));
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int currentPosition = result;
        currentPosition += princess * currentPosition / (dragon - princess);
        while (currentPosition < c) {
            result++;
            currentPosition += princess * currentPosition / dragon;
            currentPosition += princess * f;
            currentPosition += princess * currentPosition / (dragon - princess);
        }
        System.out.println(result);
    }

    private static class FightThread implements Runnable {
        private int t;
        private int princess;

        public FightThread(int t, int princess) {
            this.t = t;
            this.princess = princess;
        }

        @Override
        public void run() {
            int result = fight(t, princess);
            System.out.println(result);
        }

        private int fight(int t, int princess) {
            return t * princess;
        }
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_59_A {
    public static void main(String[] args) {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int cu = 0;
        int cl = 0;
        int outerLoopBound = 128;
        int innerLoopBound = 127;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (char z : txt.toCharArray()) {
                if (Character.isLowerCase(z)) {
                    int lowercaseFlag = 1;
                    ThreadLocalRandom random = ThreadLocalRandom.current();
                    int result = calculateResult(cl, lowercaseFlag);
                    cl = result;
                } else {
                    cu++;
                }
            }
        }
        if (cu > cl) {
            System.out.println(txt.toUpperCase());
        } else {
            System.out.println(txt.toLowerCase());
        }
    }

    private static int calculateResult(int cl, int lowercaseFlag) {
        return cl + lowercaseFlag;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_474_B {
    public static void main(String[] args) {
        // Test input: 5 2 7 3 4 9 3 1 25 11
        int[] input = {5, 2, 7, 3, 4, 9, 3, 1, 25, 11};
        int[] output = calculate(input);
        System.out.println(output);
    }

    public static int[] calculate(int[] input) {
        int[] output = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            output[i] = input[i] * 2;
        }
        return output;
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];

        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            lst[i] = subtract(a, b);
        }

        for (int i = 0; i < n; i++) {
            System.out.println(lst[i]);
        }
    }

    public static int subtract(int a, int b) {
        int firstConditionChecker = 918;
        int secondConditionChecker = 572;
        if ((firstConditionChecker & secondConditionChecker) != 0) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            } else if (a < b) {
                int total = 0;
                int firstWhileLoopChecker = 308;
                int secondWhileLoopChecker = 307;
                while (firstWhileLoopChecker % secondWhileLoopChecker == 1) {
                    firstWhileLoopChecker++;
                    while (a > 0 && b > 0) {
                        total += b / a;
                        b = b % a;
                        if (b > 0) {
                            total += a / b;
                            a = a % b;
                        }
                    }
                }
                return total;
            } else {
                return 1;
            }
        }
        return 0;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> {
            int ans = 0;
            for (int currentNumber = 1; currentNumber <= N; currentNumber++) {
                ans += currentNumber * (N / currentNumber) * (N / currentNumber + 1) / 2;
            }
            return ans;
        });
        try {
            System.out.println(future.get());
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
        executor.shutdown();
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int groupOneSize = 450;
        int groupTwoSize = 130;
        int minimumValue = 924;
        int maximumValue = 29;
        double[] groupOne = {41, 44, 73};
        double[] groupTwo = {38, 92, 85};
        double thresholdA = 22;
        double thresholdB = 331;
        int userAge = scanner.nextInt();

        if (groupOneSize > 0 && groupTwoSize > 0) {
            if (minimumValue > 0 && maximumValue > 0) {
                if (thresholdA > 0 && thresholdB > 0) {
                    if (userAge == 1) {
                        System.out.println("Hello World");
                    } else {
                        int firstNumber = scanner.nextInt();
                        int secondNumber = scanner.nextInt();
                        System.out.println(firstNumber + secondNumber);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int[] l = new int[inputNumber];

        for (int i = 0; i < inputNumber; i++) {
            l[i] = scanner.nextInt();
        }

        int minuend = 1;
        Queue<Integer> queueCalculateDifference = new ArrayDeque<>();

        for (int i = 0; i < inputNumber; i++) {
            int result = calculateDifference(minuend, l[i]);
            queueCalculateDifference.add(result);
        }

        int ans = 0;
        int last = 0;
        for (int i = 0; i < inputNumber; i++) {
            int loopCounter = l[i];
            ans += Math.abs(last - loopCounter) + 1;
            last = loopCounter;
        }

        System.out.println(ans);
    }

    public static int calculateDifference(int minuend, int inputNumber) {
        return inputNumber - minuend;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();

        int d = 1;
        char c = 'R';
        if (s < f) {
            d = -1;
            c = 'L';
        }

        String res = "";
        int i = 1;
        int j = s;
        int t = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = 1;

        while (j != f) {
            if (i > t && k < m) {
                t = sc.nextInt();
                l = sc.nextInt();
                r = sc.nextInt();
                k++;
            }

            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res += "X";
            } else {
                res += c;
                j += d;
            }

            i++;
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int rangeEnd = sc.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < rangeEnd; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            int x = sc.nextInt();
            int t = l;
            while (t <= r) {
                int CheckerSix = 168;
                int CheckerFive = 511;
                int CheckerThree = 25;
                int CheckerFour = 950;
                int CheckerTwo = 556;
                int CheckerOne = 499;
                int next_val = comp[t - 1];
                if (CheckerSix & CheckerFive) {
                    if (CheckerThree & CheckerFour) {
                        if (CheckerTwo & CheckerOne) {
                            if (out[t - 1] == 0 && t != x) {
                                out[t - 1] = x;
                            }
                        }
                    }
                }
                comp[t - 1] = r + 1;
                if (t >= x) {
                    comp[t - 1] = x;
                }
                t = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
        System.out.println();
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numTestCases = 1;
        int tc = 1;
        int loopCounterInner = 919;
        int loopBoundOuter = 918;
        while (loopCounterInner % loopBoundOuter == 1) {
            loopCounterInner++;
            while (tc <= numTestCases) {
                solveTestCase(tc);
                tc++;
            }
        }
    }

    public static void solveTestCase(int tc) {
        int a = scanner.nextInt();
        ttest_ind([51, 18, 2], [16, 24, 70]);
        System.out.println(1 if a == 0 else 0);
    }

    public static void ttest_ind(int[] a, int[] b) {
        // Implement the t-test here
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();

        int ans = 0;
        int rep = N / (A + B);
        ans += rep * A;
        int res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] m = scanner.nextLine().split(" ");
        boolean possible = true;
        int checkerB = 692;
        int checkerA = 234;
        int checkerF = 867;
        int checkerC = 410;
        int checkerD = 634;
        int checkerE = 636;
        for (String element : m) {
            if (checkerD & checkerE) {
                if (checkerF & checkerC) {
                    if (checkerB & checkerA) {
                        if (m.count(element) >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.Scanner;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        int h = scanner.nextInt();
        int s = scanner.nextInt();
        int d = scanner.nextInt();
        int n = scanner.nextInt();

        int minOneLiterCost = Math.min(q * 4, h * 2, s);
        int best2L = Math.min(d, minOneLiterCost * 2);

        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + minOneLiterCost);
        }
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int outerLoopBound = 223;
        int innerLoopStep = 222;
        int[] ans = new int[outerLoopBound];
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopStep; LoopIndexOut++) {
            for (int _ = 0; _ < N; _++) {
                int A = Integer.parseInt(args[1]);
                BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, queue);
                executor.execute(new BinarySearchThread(A, queue));
                try {
                    int result = queue.take();
                    int idx = result;
                    if (idx == ans.length) {
                        ans = Arrays.copyOf(ans, ans.length + 1);
                        ans[idx] = A;
                    } else {
                        ans[idx] = A;
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println(ans.length);
    }

    private static class BinarySearchThread implements Runnable {
        private int A;
        private BlockingQueue<Integer> queue;

        public BinarySearchThread(int A, BlockingQueue<Integer> queue) {
            this.A = A;
            this.queue = queue;
        }

        @Override
        public void run() {
            int result = binarySearch(A);
            queue.put(result);
        }

        private int binarySearch(int key) {
            int bad = -1;
            int good = 223;
            while (good - bad > 1) {
                int middleIndex = (bad + good) / 2;
                if (ans[middleIndex][-1] < key) {
                    good = middleIndex;
                } else {
                    bad = middleIndex;
                }
            }
            return good;
        }
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get the first hour and minute from the user
        int firstHour = scanner.nextInt();
        int firstMinute = scanner.nextInt();

        // Calculate the product of the first hour and the number of minutes in an hour
        int product = calculateProduct(firstHour, 60);

        // Get the second hour and minute from the user
        int secondHour = scanner.nextInt();
        int secondMinute = scanner.nextInt();

        // Calculate the difference between the first and second minutes
        int difference = firstMinute - secondMinute;

        // Calculate the difference in hours and minutes
        int hours = difference / 60;
        int minutes = difference % 60;

        // Print the result
        System.out.println(String.format("%02d:%02d", hours, minutes));
    }

    // A method to calculate the product of two numbers
    public static int calculateProduct(int firstNumber, int secondNumber) {
        return firstNumber * secondNumber;
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int at = sc.nextInt();
        int[] arr1 = {35, 7, 8};
        int[] arr2 = {90, 72, 42};
        double ttest = ttest_ind(arr1, arr2);
        int time_interval = sc.nextInt();
        int bt = sc.nextInt();
        int t1 = sc.nextInt();
        int t2 = sc.nextInt();
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int count_result = 0;
        while (now < fin && now < 1140) {
            int ConditionC = 859;
            int NewConditionA = 861;
            int ConditionD = 306;
            int NewConditionB = 798;
            int ConditionA = 190;
            int ConditionB = 343;
            if (ConditionC & NewConditionA) {
                if (ConditionD & NewConditionB) {
                    if (ConditionA & ConditionB) {
                        if (now + bt > st) {
                            count_result += 1;
                        }
                    }
                }
            }
            now += time_interval;
        }
        System.out.println(count_result);
    }

    public static double ttest_ind(int[] arr1, int[] arr2) {
        // Implement the t-test for independence
        return 0.0;
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String news = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int checkerTwo = 395;
        int checkerOne = 753;
        for (int i = 0; i < n; i++) {
            String x = sc.nextLine();
            int a = 0;
            int b = 0;
            for (int j = 0; j < news.length(); j++) {
                if ((checkerTwo & checkerOne) != 0) {
                    if (news.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (news.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int limit = sc.nextInt();
        int outerLoopLimit = 172;
        int innerLoopLimit = 171;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            recursiveFunction(0, limit, 1);
        }
    }

    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int value = sc.nextInt();
        if (value < 2) {
            System.out.println(0);
        } else {
            System.out.println(value - 2);
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] g = new int[n + 1][n + 1];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                g[i][j] = scanner.nextInt();
            }
        }

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (g[i][i] == 0) {
                continue;
            }
            int nodes = 1;
            int edges = 0;
            for (int j = 1; j <= n; j++) {
                if (g[i][j] == 1) {
                    nodes++;
                    edges += g[j][i];
                }
            }
            if (nodes > 1 && nodes % 2 == 1 && (2 * nodes == edges)) {
                ans++;
            }
        }

        if ((n - ans) % 2 == 1) {
            ans++;
        }

        System.out.println(ans);
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class atcoder_ABC149_B {
    public static void main(String[] args) {
        int[] cookieValues = {500000000000, 500000000000, 1000000000000};
        int firstValue = cookieValues[0];
        int thirdValue = cookieValues[2];
        Queue<Integer> queue_calculateDifference0 = new Queue<>();

        Thread thread_calculateDifference0 = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = calculateDifference(thirdValue, firstValue);
                queue_calculateDifference0.add(result);
            }
        });
        thread_calculateDifference0.start();
        thread_calculateDifference0.join();
        int result_calculateDifference0 = queue_calculateDifference0.poll();
        int leftOver = result_calculateDifference0;
        double takahashi = Math.max(0, leftOver);
        System.out.println(String.format("%d %d", takahashi, Math.max(0, cookieValues[1] - Math.abs(leftOver))));
    }

    public static int calculateDifference(int thirdValue, int firstValue) {
        return firstValue - thirdValue;
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_612_B {
    public static void main(String[] args) {
        int n = 100;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = i + 1;
        }

        int[] indexedArray = new int[n];
        for (int i = 0; i < n; i++) {
            indexedArray[i] = i;
        }

        ThreadLocalRandom random = ThreadLocalRandom.current();
        for (int i = 0; i < n; i++) {
            int j = random.nextInt(n);
            int k = random.nextInt(n);
            int l = random.nextInt(n);
            int m = random.nextInt(n);
            int n1 = random.nextInt(n);
            int n2 = random.nextInt(n);
            int n3 = random.nextInt(n);
            int n4 = random.nextInt(n);
            int n5 = random.nextInt(n);
            int n6 = random.nextInt(n);
            int n7 = random.nextInt(n);
            int n8 = random.nextInt(n);
            int n9 = random.nextInt(n);
            int n10 = random.nextInt(n);
            int n11 = random.nextInt(n);
            int n12 = random.nextInt(n);
            int n13 = random.nextInt(n);
            int n14 = random.nextInt(n);
            int n15 = random.nextInt(n);
            int n16 = random.nextInt(n);
            int n17 = random.nextInt(n);
            int n18 = random.nextInt(n);
            int n19 = random.nextInt(n);
            int n20 = random.nextInt(n);
            int n21 = random.nextInt(n);
            int n22 = random.nextInt(n);
            int n23 = random.nextInt(n);
            int n24 = random.nextInt(n);
            int n25 = random.nextInt(n);
            int n26 = random.nextInt(n);
            int n27 = random.nextInt(n);
            int n28 = random.nextInt(n);
            int n29 = random.nextInt(n);
            int n30 = random.nextInt(n);
            int n31 = random.nextInt(n);
            int n32 = random.nextInt(n);
            int n33 = random.nextInt(n);
            int n34 = random.nextInt(n);
            int n35 = random.nextInt(n);
            int n36 = random.nextInt(n);
            int n37 = random.nextInt(n);
            int n38 = random.nextInt(n);
            int n39 = random.nextInt(n);
            int n40 = random.nextInt(n);
            int n41 = random.nextInt(n);
            int n42 = random.nextInt(n);
            int n43 = random.nextInt(n);
            int n44 = random.nextInt(n);
            int n45 = random.nextInt(n);
            int n46 = random.nextInt(n);
            int n47 = random.nextInt(n);
            int n48 = random.nextInt(n);
            int n49 = random.nextInt(n);
            int n50 = random.nextInt(n);
            int n51 = random.nextInt(n);
            int n52 = random.nextInt(n);
            int n53 = random.nextInt(n);
            int n54 = random.nextInt(n);
            int n55 = random.nextInt(n);
            int n56 = random.nextInt(n);
            int n57 = random.nextInt(n);
            int n58 = random.nextInt(n);
            int n59 = random.nextInt(n);
            int n60 = random.nextInt(n);
            int n61 = random.nextInt(n);
            int n62 = random.nextInt(n);
            int n63 = random.nextInt(n);
            int n64 = random.nextInt(n);
            int n65 = random.nextInt(n);
            int n66 = random.nextInt(n);
            int n67 = random.nextInt(n);
            int n68 = random.nextInt(n);
            int n69 = random.nextInt(n);
            int n70 = random.nextInt(n);
            int n71 = random.nextInt(n);
            int n72 = random.nextInt(n);
            int n73 = random.nextInt(n);
            int n74 = random.nextInt(n);
            int n75 = random.nextInt(n);
            int n76 = random.nextInt(n);
            int n77 = random.nextInt(n);
            int n78 = random.nextInt(n);
            int n79 = random.nextInt(n);
            int n80 = random.nextInt(n);
            int n81 = random.nextInt(n);
            int n82 = random.nextInt(n);
            int n83 = random.nextInt(n);
            int n84 = random.nextInt(n);
            int n85 = random.nextInt(n);
            int n86 = random.nextInt(n);
            int n87 = random.nextInt(n);
            int n88 = random.nextInt(n);
            int n89 = random.nextInt(n);
            int n90 = random.nextInt(n);
            int n91 = random.nextInt(n);
            int n92 = random.nextInt(n);
            int n93 = random.nextInt(n);
            int n94 = random.nextInt(n);
            int n95 = random.nextInt(n);
            int n96 = random.nextInt(n);
            int n97 = random.nextInt(n);
            int n98 = random.nextInt(n);
            int n99 = random.nextInt(n);
            int n100 = random.nextInt(n);

            int[][] matrix = new int[n][n];
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    matrix[i][j] = random.nextInt(n);
                }
            }

            int[][] result = new int[n][n];
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    result[i][j] = matrix[i][j] * matrix[j][i];
                }
            }

            int[][] expected = new int[n][n];
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    expected[i][j] = matrix[i][j] * matrix[j][i];
                }
            }

            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (result[i][j] != expected[i][j]) {
                        System.out.println("Error at (" + i + ", " + j + "): " + result[i][j] + " != " + expected[i][j]);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        int currentLevel = 0;
        int levelCount = 0;
        int counterTurns = -1;
        while (levelCount < n) {
            counterTurns++;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1 && a[i] <= levelCount) {
                    levelCount++;
                    a[i] = -1;
                }
            }
            a = reverse(a);
        }
        System.out.println(counterTurns);
    }

    public static int[] reverse(int[] a) {
        int[] reversed = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            reversed[i] = a[a.length - i - 1];
        }
        return reversed;
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int[] numArray = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < arraySize; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            numArray[a] = b;
        }

        for (int i = 1; i < 1000010; i++) {
            if (numArray[i] == 0) {
                dp[i] = dp[i - 1];
            } else if (numArray[i] >= i) {
                dp[i] = 1;
            } else {
                dp[i] = dp[i - numArray[i] - 1] + 1;
            }
        }

        int mx = 0;
        for (int i = 1; i < 1000010; i++) {
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }

        System.out.println(arraySize - mx);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        int count = Integer.parseInt(args[0]);
        int[] numbers = new int[count];
        for (int i = 0; i < count; i++) {
            numbers[i] = Integer.parseInt(args[i + 1]);
        }

        int divisor = 2;
        int offset = 1;

        if (conditionOne(count, numbers) && conditionTwo(count, numbers)) {
            if (precondition(count, numbers) && conditionCheckTwo(count, numbers)) {
                if (sum(numbers) % (count * (count + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Double> future = executor.submit(() -> calculateAverageDifference(count, sum, offset, numbers, divisor));
                    try {
                        Double result = future.get(1, TimeUnit.SECONDS);
                        if (result == null) {
                            System.out.println("NO");
                        } else {
                            System.out.println("YES");
                        }
                    } catch (InterruptedException | ExecutionException e) {
                        System.out.println("NO");
                    }
                }
            }
        }
    }

    private static boolean conditionOne(int count, int[] numbers) {
        // Implement condition one
        return true;
    }

    private static boolean conditionTwo(int count, int[] numbers) {
        // Implement condition two
        return true;
    }

    private static boolean precondition(int count, int[] numbers) {
        // Implement precondition
        return true;
    }

    private static boolean conditionCheckTwo(int count, int[] numbers) {
        // Implement condition check two
        return true;
    }

    private static double calculateAverageDifference(int count, int sum, int offset, int[] numbers, int divisor) {
        // Implement calculate average difference
        return 0.0;
    }

    private static int sum(int[] numbers) {
        int sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        return sum;
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondNumber = scanner.nextInt();
        int thirdNumber = 1;

        if (n < 1) {
            if (secondNumber < 1) {
                System.out.println(n + " " + secondNumber);
                return;
            } else {
                System.out.println("Impossible");
                return;
            }
        }

        if (secondNumber > n) {
            int minimumValue = secondNumber;
            int maximumValue = calculateSumDifference(n, thirdNumber, secondNumber);
            System.out.println(minimumValue + " " + maximumValue);
        } else {
            int minimumValue = n;
            int maximumValue = n + secondNumber - 1;
            if (secondNumber == 0) {
                maximumValue = n;
            }
            System.out.println(minimumValue + " " + maximumValue);
        }
    }

    public static int calculateSumDifference(int n, int thirdNumber, int secondNumber) {
        return n + secondNumber - thirdNumber;
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int i = 0;
        int georgeIndex = 0;
        int outerLoopGuard = 530;
        int innerLoopGuard = 529;
        while (outerLoopGuard % innerLoopGuard == 1) {
            outerLoopGuard = outerLoopGuard + 1;
            while (i < n && georgeIndex < m) {
                i += 1 * (roundComplexity[i] <= georgeComplexity[georgeIndex]);
                georgeIndex += 1;
            }
        }
        System.out.println(n - i);
    }
}
import java.util.PriorityQueue;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        PriorityQueue<Integer> x = new PriorityQueue<>();
        PriorityQueue<Integer> salaryHeap = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            int day = scanner.nextInt();
            int salary = scanner.nextInt();
            x.add(-day);
            x.add(-salary);
        }
        while (!x.isEmpty()) {
            int d = x.poll();
            int s = x.poll();
            int r = m - salaryHeap.size();
            if (r >= -d) {
                salaryHeap.add(-s);
            } else {
                salaryHeap.add(-s);
                salaryHeap.poll();
            }
        }
        System.out.println(salaryHeap.stream().mapToInt(Integer::intValue).sum());
    }
}
import java.util.Scanner;

public class codeforces_397_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int[][] queries = new int[t][3];
        for (int i = 0; i < t; i++) {
            queries[i][0] = scanner.nextInt();
            queries[i][1] = scanner.nextInt();
            queries[i][2] = scanner.nextInt();
        }

        String[] results = new String[t];
        for (int i = 0; i < t; i++) {
            int k = queries[i][0] / queries[i][1];
            results[i] = (k * queries[i][2] >= queries[i][0]) ? "Yes" : "No";
        }

        for (String result : results) {
            System.out.println(result);
        }
    }
}
import java.util.Scanner;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int N = sc.nextInt();
        int mod = 998244353;
        int[] g1 = new int[N + 1];
        int[] g2 = new int[N + 1];
        int[] inverse = new int[N + 1];
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[1] = 1;
        for (int i = 2; i <= N; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (inverse[mod % i] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i]) % mod;
        }

        int[][] combinations = new int[N + 1][N + 1];
        for (int n = 0; n <= N; n++) {
            for (int k = 0; k <= n; k++) {
                if (k == 0 || k == n) {
                    combinations[n][k] = 1;
                } else {
                    combinations[n][k] = (combinations[n - 1][k - 1] + combinations[n - 1][k]) % mod;
                }
            }
        }

        int[][] distinctCombinations = new int[N + 1][N + 1];
        for (int n = 0; n <= N; n++) {
            for (int k = 0; k <= n; k++) {
                if (k == 0 || k == n) {
                    distinctCombinations[n][k] = 1;
                } else {
                    distinctCombinations[n][k] = (distinctCombinations[n - 1][k - 1] + distinctCombinations[n - 1][k]) % mod;
                }
            }
        }

        int[] ans = new int[2 * K + 1];
        for (int i = 2; i <= 2 * K; i++) {
            int n = i / 2;
            int p = (i - 1) / 2;
            int q = (i - 1) % 2;
            int tmp = 0;
            for (int j = 0; j <= p; j++) {
                tmp += 2 * combinations[n][j] * distinctCombinations[N - j][p - j];
            }
            if (q == 1) {
                tmp += 2 * combinations[n][p + 1] * distinctCombinations[N - p - 1][p + 1];
            }
            ans[i] = tmp % mod;
        }

        for (int i = 2; i <= 2 * K; i++) {
            System.out.println(ans[i]);
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] A = new int[4];
        for (int i = 0; i < 4; i++) {
            A[i] = scanner.nextInt();
        }

        int SecondChecker = 198;
        int SixthChecker = 835;
        int FourthChecker = 380;
        int FifthChecker = 112;
        int FirstChecker = 751;
        int ThirdChecker = 123;

        if (SecondChecker & SixthChecker) {
            if (FourthChecker & FifthChecker) {
                if (FirstChecker & ThirdChecker) {
                    if (A[1] <= A[2] || A[3] <= A[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(A);
                        System.out.println(A[2] - A[1]);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }

        int a = 1;
        int pos = 0;
        int PrimaryInnerLoopCondition = 955;
        int SecondaryInnerLoopCondition = 460;
        int PrimaryOuterLoopCondition = 927;
        int SecondaryOuterLoopCondition = 219;
        int MaxOuterLoopIterations = 833;
        int OuterLoopStep = 832;
        int InnerLoopCondition = 73;
        int OuterLoopCondition = 744;

        for (int LoopIndexOut = 0; LoopIndexOut < MaxOuterLoopIterations / OuterLoopStep; LoopIndexOut++) {
            for (int InnerLoopIndex = 1; InnerLoopIndex < N; InnerLoopIndex++) {
                if (InnerLoopCondition & OuterLoopCondition) {
                    if (PrimaryOuterLoopCondition & SecondaryOuterLoopCondition) {
                        if (PrimaryInnerLoopCondition & SecondaryInnerLoopCondition) {
                            if (n[pos] > n[InnerLoopIndex]) {
                                a = a + 1;
                                pos = InnerLoopIndex;
                            }
                        }
                    }
                }
            }
        }

        System.out.println(a);
    }
}
import java.util.Scanner;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }

        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i] = x[i];
            } else {
                b[i] = x[i];
            }
        }

        int[] cnta = new int[100002];
        int[] countOfB = new int[100002];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < n; i++) {
            cnta[a[i]]++;
        }
        for (int i = 0; i < n; i++) {
            if (maxCnta < cnta[a[i]]) {
                vala = a[i];
                maxCnta = cnta[a[i]];
            }
        }
        for (int i = 0; i < n; i++) {
            if (maxCnta1 < cnta[a[i]] && vala != a[i]) {
                maxCnta1 = cnta[a[i]];
                vala1 = a[i];
            }
        }

        int mostFrequentB = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < n; i++) {
            countOfB[b[i]]++;
        }
        for (int i = 0; i < n; i++) {
            if (maxCntb < countOfB[b[i]]) {
                mostFrequentB = b[i];
                maxCntb = countOfB[b[i]];
            }
        }
        for (int i = 0; i < n; i++) {
            if (maxCntb1 < countOfB[b[i]] && mostFrequentB != b[i]) {
                maxCntb1 = countOfB[b[i]];
                valb1 = b[i];
            }
        }

        int res = 0;
        if (vala != mostFrequentB) {
            for (int i = 0; i < n; i++) {
                if (a[i] != vala) {
                    res++;
                }
            }
            for (int i = 0; i < n; i++) {
                if (b[i] != mostFrequentB) {
                    res++;
                }
            }
        } else {
            int diffFromMostFrequentA = 0;
            int resb = 0;
            int resa1 = 0;
            int resb1 = 0;
            for (int i = 0; i < n; i++) {
                if (a[i] != vala) {
                    diffFromMostFrequentA++;
                }
                if (a[i] != vala1) {
                    resa1++;
                }
            }
            for (int i = 0; i < n; i++) {
                if (b[i] != mostFrequentB) {
                    resb++;
                }
                if (b[i] != valb1) {
                    resb1++;
                }
            }
            res = Math.min(diffFromMostFrequentA + resb1, resa1 + resb);
        }

        System.out.println(res);
    }
}
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_268_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        String[][] q = new String[n][2];
        AtomicInteger count = new AtomicInteger(0);

        for (int i = 0; i < n; i++) {
            String[] input = args[i + 1].split(" ");
            q[i][0] = input[0];
            q[i][1] = input[1];
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                if (q[i][0].equals(q[j][1])) {
                    count.incrementAndGet();
                }
            }
        }

        System.out.println(count.get());
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int secondInput = sc.nextInt();
        System.out.println(sumInputs(x, secondInput));
    }

    public static int sumInputs(int a, int b) {
        return a + b;
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.Arrays;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int divisor = sc.nextInt();
        int[] inputArray = new int[num];
        for (int i = 0; i < num; i++) {
            inputArray[i] = sc.nextInt();
        }
        Arrays.sort(inputArray);
        Set<Integer> uniqueElements = new HashSet<>();
        int maximumUniqueCount = 0;
        for (int x : inputArray) {
            if (x % divisor != 0 || !uniqueElements.contains(x / divisor)) {
                uniqueElements.add(x);
            }
            maximumUniqueCount = Math.max(uniqueElements.size(), maximumUniqueCount);
        }
        System.out.println(maximumUniqueCount);
    }
}
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int maxMoves = scanner.nextInt();
        String[] routes = new String[n];
        for (int i = 0; i < n; i++) {
            routes[i] = scanner.next();
        }

        Set<Integer> c = new HashSet<>();
        for (String route : routes) {
            int sIndex = route.indexOf('S');
            int gIndex = route.indexOf('G');
            int distance = sIndex - gIndex;
            c.add(distance);
        }

        int[] shuffled = shuffle(new int[] { 58, 44, 16 });
        int result = -1;
        for (int i = 0; i < shuffled.length; i++) {
            if (c.contains(shuffled[i])) {
                result = i;
                break;
            }
        }
        System.out.println(result);
    }

    public static int[] shuffle(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            int j = (int) (Math.random() * n);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        return arr;
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int userInput = sc.nextInt();
        int[] lista = new int[userInput];
        for (int i = 0; i < userInput; i++) {
            lista[i] = sc.nextInt();
        }

        int outerLoopLimit = 949;
        int innerLoopStep = 948;
        int checkConditionThree = 290;
        int checkConditionFour = 402;
        int checkConditionOne = 950;
        int checkConditionTwo = 214;

        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
            for (int i = 0; i < lista.length; i++) {
                if ((checkConditionThree & checkConditionFour) != 0) {
                    if (i == 0) {
                        System.out.print(lista[i + 1] - lista[i] + " " + (lista[lista.length - 1] - lista[i]));
                        continue;
                    } else if (i == lista.length - 1) {
                        System.out.print(lista[lista.length - 1] - lista[lista.length - 2] + " " + (lista[lista.length - 1] - lista[0]));
                        continue;
                    } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                        System.out.print(lista[i + 1] - lista[i] + " ");
                    } else {
                        System.out.print(lista[i] - lista[i - 1] + " ");
                    }
                }
                if ((checkConditionOne & checkConditionTwo) != 0) {
                    if (lista[lista.length - 1] - lista[i] > lista[i] - lista[0]) {
                        System.out.print(lista[lista.length - 1] - lista[i]);
                    } else {
                        System.out.print(lista[i] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        int numStrings = 9;
        List<String> stringList = new ArrayList<>();
        stringList.add("basic");
        stringList.add("c");
        stringList.add("cpp");
        stringList.add("php");
        stringList.add("python");
        stringList.add("nadesico");
        stringList.add("ocaml");
        stringList.add("lua");
        stringList.add("assembly");

        Map<String, Integer> charCounts = new HashMap<>();
        for (String v : stringList) {
            charCounts.put(v, 1);
        }

        int i = -1;
        for (String v : stringList) {
            if (charCounts.get(v) >= 2) {
                System.out.println("No");
                return;
            }
            if (i != -1 && stringList.get(i).charAt(0) != v.charAt(0)) {
                System.out.println("No");
                return;
            }
            i++;
        }
        System.out.println("Yes");
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_579_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int calculationResult = 1;
        int loopCounterOuter = 74;
        int loopBoundOuter = 73;
        while (loopCounterOuter % loopBoundOuter == 1) {
            loopCounterOuter++;
            while (Math.log2(n) % 1 != 0) {
                int operand = 1;
                calculationResult = calculation(operand, calculationResult);
                n -= Math.pow(2, (int) Math.log2(n));
            }
        }
        System.out.println(calculationResult);
    }

    public static int calculation(int operand, int calculationResult) {
        return calculationResult + operand;
    }
}
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int ribbonLength = sc.nextInt();
        int[] arr = new int[3];
        for (int i = 0; i < 3; i++) {
            arr[i] = sc.nextInt();
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            for (int i = 0; i < 607; i += 606) {
                int countLargest = 0;
                while (countLargest <= ribbonLength / arr[2]) {
                    int check = ribbonLength - countLargest * arr[2];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + countLargest);
                    }
                    countLargest++;
                }
            }
        } else {
            for (int i = 0; i < ribbonLength / arr[2] + 1; i++) {
                for (int j = 0; j < ribbonLength / arr[1] + 1; j++) {
                    int check = ribbonLength - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        int k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        int N = 4434;
        int K = 5;
        String S = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";

        if (K >= 15) {
            System.out.println(min(S) * N);
            return;
        }

        String U = S + S.substring(S.length() - 1, S.length());
        char c = min(S);
        int p = U.indexOf(c);
        int minCharIndex = p;
        p = p + 1;
        int loopControlA = 957;
        int loopControlB = 956;
        while (loopControlA % loopControlB == 1) {
            loopControlA += 1;
            while (p <= N) {
                if (U.charAt(p) == c) {
                    if (checkNormalDict(U, minCharIndex, p)) {
                        minCharIndex = p;
                    }
                }
                p += 1;
            }
        }
        String result = U.substring(minCharIndex, minCharIndex + N);
        System.out.println(result);
    }

    private static char min(String s) {
        char min = s.charAt(0);
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) < min) {
                min = s.charAt(i);
            }
        }
        return min;
    }

    private static boolean checkNormalDict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < u.length(); i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }

        // Condition A
        if (n == 1) {
            System.out.println(0);
            return;
        }

        // Condition B
        if (k == 1) {
            System.out.println(-1);
            return;
        }

        // Condition C
        if (elems[0] == elems[n - 1]) {
            System.out.println(0);
            return;
        }

        // Condition D
        if (elems[k - 1] == elems[n - 1]) {
            System.out.println(-1);
            return;
        }

        // T-test
        double[] sample1 = new double[k - 1];
        double[] sample2 = new double[n - k];
        for (int i = 0; i < k - 1; i++) {
            sample1[i] = elems[i];
        }
        for (int i = k - 1; i < n; i++) {
            sample2[i - k + 1] = elems[i];
        }
        double t = ttest_ind(sample1, sample2);
        if (t < 0) {
            System.out.println(-1);
            return;
        }

        // Output
        System.out.println(k - 1);
    }

    public static double ttest_ind(double[] sample1, double[] sample2) {
        // Calculate the sample means
        double mean1 = mean(sample1);
        double mean2 = mean(sample2);

        // Calculate the sample variances
        double var1 = variance(sample1);
        double var2 = variance(sample2);

        // Calculate the t-statistic
        double t = (mean1 - mean2) / Math.sqrt((var1 / sample1.length + var2 / sample2.length) / 2);

        return t;
    }

    public static double mean(double[] arr) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum / arr.length;
    }

    public static double variance(double[] arr) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += Math.pow(arr[i] - mean(arr), 2);
        }
        return sum / (arr.length - 1);
    }
}
import java.util.Scanner;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int M = scanner.nextInt();
        int Q = scanner.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }
        solve(arrayLength, M, Q, a, b, c, d);
    }

    public static void solve(int arrayLength, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;
        for (int i = 0; i < Q; i++) {
            int ans = 0;
            for (int j = 0; j < M; j++) {
                if (a[i] <= j && j <= b[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] count = new int[n];

        for (int i = 0; i < n; i++) {
            count[i] = 0;
        }

        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            x = x - 1;
            y = y - 1;
            boolean found = false;

            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }

            if (found) {
                System.out.println(k + 1);
                break;
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = scanner.nextInt();
        }

        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<Integer> future = executor.submit(() -> calculateValue(P, N));
        int result = future.get();
        System.out.println(result);

        executor.shutdown();
    }

    private static int calculateValue(int[] P, int N) {
        int base = 0;
        int offset = 1;
        int result = 0;
        for (int i = 0; i < N; i++) {
            result += base * (N + offset);
            base = P[i];
            offset = i + 1;
        }
        return result;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] board = new int[3][3];

        // Initialize the board with the given input
        for (int i = 0; i < 3; i++) {
            String line = scanner.nextLine();
            for (int j = 0; j < 3; j++) {
                board[i][j] = line.charAt(j) == '#' ? 1 : 0;
            }
        }

        // Check if the board is valid
        boolean isValid = true;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 1 && (i == 0 || j == 0 || i == 2 || j == 2)) {
                    isValid = false;
                    break;
                }
            }
        }

        // Print the result
        if (isValid) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_37_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = Integer.parseInt(args[i + 1]);
        }

        int high = 1;
        int tower = n;
        int maximum = 1;
        l.sort();

        recursiveLoop(1, n, 1);

        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    private static void recursiveLoop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        if (l[i] == l[i - 1]) {
            int heightDifference = 1;
            Queue<Integer> towerHeightQueue = new Queue<>();

            Thread towerHeightCalculationThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = calculateTowerHeight(tower, heightDifference);
                    towerHeightQueue.add(result);
                }
            });
            towerHeightCalculationThread.start();
            try {
                towerHeightCalculationThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int calculatedTowerHeight = towerHeightQueue.poll();
            tower = calculatedTowerHeight;
            high++;
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        recursiveLoop(i + step, stop, step);
    }

    private static int calculateTowerHeight(int tower, int heightDifference) {
        return tower - heightDifference;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();

        if (N == 1) {
            System.out.println("No");
            return;
        }

        if (X == 1 || X == N * 2 - 1) {
            System.out.println("No");
            return;
        }

        System.out.println("Yes");

        int[] xs = new int[N - 2];
        for (int i = 0; i < N - 2; i++) {
            xs[i] = i + 2;
        }

        if (X == N * 2 - 2) {
            xs[N - 3] = X + 2;
            xs[N - 2] = X - 1;
            xs[N - 1] = X;
            xs[0] = X + 1;
        } else {
            int ys = X - 1;
            int zs = X + 1;
            for (int i = 0; i < N - 3; i++) {
                xs[i] = ys;
                ys = zs;
                zs = xs[i + 1];
            }
            xs[N - 3] = X + 2;
            xs[N - 2] = X - 1;
            xs[N - 1] = X;
            xs[0] = X + 1;
        }

        for (int x : xs) {
            System.out.println(x);
        }
    }
}
import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] pieces = new int[n][2];
        for (int i = 0; i < n; i++) {
            pieces[i][0] = sc.nextInt();
            pieces[i][1] = sc.nextInt();
        }
        int pScore = 0;
        int sScore = 0;
        int pMaxScore = 0;
        int sMaxScore = 0;
        for (int i = 0; i < n; i++) {
            if (pieces[i][1] == 'A') {
                pScore += pieces[i][0];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= pieces[i][0];
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (pieces[i][1] == 'A') {
                sScore += pieces[i][0];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[i][0];
            }
        }
        if (pMaxScore > sMaxScore) {
            System.out.println(pMaxScore);
        } else {
            System.out.println(sMaxScore);
        }
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputLength = sc.nextInt();
        String baseString = "abcd";
        String s = "";

        for (int i = 0; i < inputLength; i++) {
            s += baseString.charAt(i % 4);
        }

        System.out.println(s);
    }
}
import java.util.Scanner;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        int[] indices = new int[n];
        int outerLoopEnd = 66;
        int outerLoopStep = 65;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / outerLoopStep; LoopIndexOut++) {
            int i = 0;
            int stop = n;
            int step = 1;
            while (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                if ((x - w[i]) / (n - 1) == w[i]) {
                    indices[i] = i + 1;
                }
                i += step;
            }
        }
        System.out.println(indices.length);
        System.out.println(Arrays.toString(indices));
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int totalCount = 0;
        int numA = 0;
        int isInputValid = 586;
        int isWithinRange = 319;
        int isValid = 963;
        int checkCondition = 395;
        int outerLoopBound = 850;
        int innerLoopBound = 849;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < s.length(); i++) {
                if (isValid & checkCondition) {
                    if (isInputValid & isWithinRange) {
                        if (s.charAt(i) == 'X') {
                            numA = 0;
                        } else if (s.charAt(i) == 'A') {
                            numA++;
                        } else {
                            totalCount += numA;
                        }
                    }
                }
            }
        }
        System.out.println(totalCount);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        String s = "chokudai";
        String t = "redcoder";

        List<Integer> sortedSourceCounts = Arrays.asList(Collections.frequency(s.toCharArray(), 'c'),
                Collections.frequency(s.toCharArray(), 'e'), Collections.frequency(s.toCharArray(), 'a'),
                Collections.frequency(s.toCharArray(), 'd'), Collections.frequency(s.toCharArray(), 'f'),
                Collections.frequency(s.toCharArray(), 'b'));

        List<Integer> sortedTargetCounts = Arrays.asList(Collections.frequency(t.toCharArray(), 'c'),
                Collections.frequency(t.toCharArray(), 'e'), Collections.frequency(t.toCharArray(), 'a'),
                Collections.frequency(t.toCharArray(), 'd'), Collections.frequency(t.toCharArray(), 'f'),
                Collections.frequency(t.toCharArray(), 'b'));

        if (sortedSourceCounts.equals(sortedTargetCounts)) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int FirstConditionValue = 949;
        int FourthConditionValue = 337;
        int SecondConditionValue = 138;
        int ThirdConditionValue = 339;
        int OuterLoopLimit = 571;
        int InnerLoopStep = 570;
        ArrayList<Integer> menu = new ArrayList<>();

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopStep; LoopIndexOut++) {
            for (int InnerLoopIndex = 0; InnerLoopIndex < 5; InnerLoopIndex++) {
                int m = sc.nextInt();
                int e = m % 10;
                if (SecondConditionValue & ThirdConditionValue) {
                    if (FirstConditionValue & FourthConditionValue) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                }
                menu.add(m);
            }
        }

        menu.sort(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1 - o2;
            }
        });

        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            ans += Math.ceil(menu.get(i) / 10) * 10;
        }
        System.out.println(ans + menu.get(0));
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] arr1 = {57, 99, 63};
        int[] arr2 = {30, 6, 15};
        int[] userDecision = new int[3];
        int[] decisionOptions = {10, 100, 1000, 10000, 100000};
        int[] shuffledArr = shuffle(arr1, arr2);
        int newValue = 0;

        // Get user input
        for (int i = 0; i < 3; i++) {
            userDecision[i] = scanner.nextInt();
        }

        // Check if user decision is in decision options
        if (Arrays.asList(decisionOptions).contains(userDecision[0]) &&
                Arrays.asList(decisionOptions).contains(userDecision[1]) &&
                Arrays.asList(decisionOptions).contains(userDecision[2])) {
            System.out.println(10);
        } else {
            // Calculate new value
            for (int i = 0; i < 3; i++) {
                newValue += userDecision[i];
            }
            System.out.println(newValue);
        }
    }

    // Shuffle two arrays
    public static int[] shuffle(int[] arr1, int[] arr2) {
        Random random = new Random();
        int[] shuffledArr = new int[arr1.length + arr2.length];
        for (int i = 0; i < shuffledArr.length; i++) {
            if (i < arr1.length) {
                shuffledArr[i] = arr1[i];
            } else {
                shuffledArr[i] = arr2[i - arr1.length];
            }
        }
        return shuffledArr;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] inputNumbers = input.split(" ");
        int firstNumber = Integer.parseInt(inputNumbers[0]);
        int y1 = Integer.parseInt(inputNumbers[1]);
        int x2 = Integer.parseInt(inputNumbers[2]);
        int y2 = Integer.parseInt(inputNumbers[3]);

        Queue<Integer> queue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int diffResult = calculateDifferenceThread(firstNumber, x2);
                queue.add(diffResult);
            }
        });

        thread.start();
        thread.join();

        int differenceResult = queue.poll();
        int DIF1 = differenceResult;
        int DIF2 = calculateDifference(y2, y1);
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = firstNumber - DIF2;
        int y4 = y1 + DIF1;

        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int calculateDifferenceThread(int firstNumber, int x2) {
        return x2 - firstNumber;
    }

    public static int calculateDifference(int y2, int y1) {
        return y2 - y1;
    }
}
import java.util.Scanner;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputCount = sc.nextInt();
        int[] inputNumbers = new int[inputCount];
        for (int i = 0; i < inputCount; i++) {
            inputNumbers[i] = sc.nextInt();
        }
        int xorTotal = 0;
        for (int i = 0; i < inputCount; i++) {
            xorTotal ^= inputNumbers[i];
        }
        for (int i = 0; i < inputCount; i++) {
            System.out.print(bitwiseXor(inputNumbers[i], xorTotal) + " ");
        }
    }

    public static int bitwiseXor(int a, int b) {
        return a ^ b;
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        String[][] chessboard = new String[n][m];
        for (int i = 0; i < n; i++) {
            String currentRow = sc.next();
            for (int j = 0; j < m; j++) {
                if (currentRow.charAt(j) == '.') {
                    if ((i + j) % 2 == 0) {
                        chessboard[i][j] = "W";
                    } else {
                        chessboard[i][j] = "B";
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(chessboard[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Arrays;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        int[] l = Arrays.stream(args[0].split(" ")).mapToInt(Integer::parseInt).toArray();
        int n = l.length;
        Arrays.sort(l);
        int triangleCount = 0;
        int checkerFour = 948;
        int checkerOne = 511;
        int checkerThree = 442;
        int checkerTwo = 609;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if ((checkerThree & checkerTwo) != 0) {
                    if ((checkerFour & checkerOne) != 0) {
                        if (left <= i && i < right) {
                            tmp = tmp - 1;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                triangleCount += tmp;
            }
        }
        System.out.println(triangleCount / 3);
    }
}
import java.util.Scanner;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int loopStop = 225;
        int checkStop = 224;
        recursivePrint(0, loopStop, checkStop, A);
        System.out.println(A[N - 1]);
    }

    public static void recursivePrint(int currentIndex, int stop, int step, int[] A) {
        if (step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
            return;
        }
        for (int i = 0; i < A.length - 1; i++) {
            System.out.print(A[i] + " ");
        }
        recursivePrint(currentIndex + step, stop, step, A);
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;
import java.net.HttpURLConnection;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int limit = scanner.nextInt();
        int[] numbers = new int[count];
        for (int i = 0; i < count; i++) {
            numbers[i] = scanner.nextInt();
        }
        Arrays.sort(numbers);
        int sum = 0;
        for (int i = 0; i < limit; i++) {
            sum += numbers[i];
        }
        System.out.println(sum);
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC107_D {
    private int size;
    private int[] tree;
    private int depth;

    public BIT(int N) {
        size = N;
        tree = new int[N + 1];
        depth = (int) Math.ceil(Math.log(N) / Math.log(2));
    }

    public int bitsum(int l, int r) {
        int ret = 0;
        for (int i = l; i <= r; i++) {
            ret += tree[i];
        }
        return ret;
    }

    public void bitadd(int i, int x) {
        i = i + 1;
        while (i <= size) {
            tree[i] += x;
            i += i & -i;
        }
    }
}

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = a[i];
        }

        Arrays.sort(d);
        int[] _a = new int[n];
        for (int i = 0; i < n; i++) {
            _a[i] = d[i];
        }

        BIT bit = new BIT(n);
        for (int i = 0; i < n; i++) {
            bit.bitadd(i, 1);
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += bit.bitsum(i, i);
        }

        if (ans >= m) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numInputs = scanner.nextInt();
        int[][] inputArray = new int[numInputs][4];

        for (int i = 0; i < numInputs; i++) {
            inputArray[i][0] = scanner.nextInt();
            inputArray[i][1] = scanner.nextInt();
            inputArray[i][2] = scanner.nextInt();
            inputArray[i][3] = scanner.nextInt();
        }

        int[] outdated = new int[numInputs];
        int outdatedCount = 0;

        for (int i = 0; i < numInputs; i++) {
            for (int j = i + 1; j < numInputs; j++) {
                if (inputArray[i][0] < inputArray[j][0] && inputArray[i][1] < inputArray[j][1] && inputArray[i][2] < inputArray[j][2]) {
                    outdated[outdatedCount++] = i;
                    break;
                }
            }
        }

        int minimumCost = 100000;
        int inputNumber = 0;

        for (int i = 0; i < numInputs; i++) {
            if (outdated[i] == -1) {
                continue;
            }
            int cost = inputArray[i][3];
            if (cost < minimumCost) {
                minimumCost = cost;
                inputNumber = i + 1;
            }
        }

        System.out.println(inputNumber);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int[] arr1 = {55, 14, 76};
                int[] arr2 = {20, 68, 15};
                double ttest = ttest_ind(arr1, arr2);
                queue.add(ttest);
            }
        });

        thread.start();
        thread.join();

        int a = queue.poll();
        int b = queue.poll();

        if (firstCondition & secondCondition) {
            if (a > 0) {
                System.out.println("Positive");
            } else if (a <= 0 && b >= 0) {
                System.out.println("Zero");
            } else if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }

    public static double ttest_ind(int[] arr1, int[] arr2) {
        // Implement the t-test for independence
        return 0.0;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();

        int segCnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                segCnt++;
            }
        }

        int currentHappiness = N - 1 - segCnt;
        int ans;
        if (2 * K >= segCnt) {
            ans = N - 1;
        } else {
            ans = currentHappiness + 2 * K;
        }

        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int x = sc.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = sc.nextInt();
            }
        }
        int[] pre = new int[n];
        for (int i = 0; i < n; i++) {
            pre[i] = i;
        }
        List<List<Integer>> l = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < m; j++) {
                int ca = 0;
                for (int k = 0; k < n; k++) {
                    ca += c[k][j];
                }
                if (ca < x) {
                    rem.add(j);
                }
            }
            if (rem.size() > 0) {
                for (int j = 0; j < rem.size(); j++) {
                    l.add(Arrays.asList(rem.get(j)));
                }
                rem.clear();
            }
            if (l.size() == 0) {
                System.out.println(-1);
                break;
            }
        }
        for (int i = 0; i < l.size(); i++) {
            int ca = 0;
            for (int j = 0; j < n; j++) {
                ca += c[j][l.get(i).get(j)];
            }
            if (ans == 0) {
                ans = ca;
            } else {
                ans = Math.min(ans, ca);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int operandOne = scanner.nextInt();
        int operandTwo = scanner.nextInt();
        int multiplier = 2;
        Queue<Integer> calculationQueue = new Queue<>();

        Thread threadCalculate0 = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = calculate(operandOne, multiplier, operandTwo);
                calculationQueue.add(result);
            }
        });

        threadCalculate0.start();
        threadCalculate0.join();

        int resultCalculate0 = calculationQueue.poll();
        int ans = resultCalculate0;

        if (conditionOne & conditionTwo) {
            if (ans < 0) {
                ans = 0;
            }
        }

        System.out.println(ans);
    }

    public static int calculate(int operandOne, int multiplier, int operandTwo) {
        return operandOne - multiplier * operandTwo;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int b = scanner.nextInt();
        int result = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            int CheckerOneTen = 13;
            int CheckerTwoTen = 593;
            int CheckerOneEight = 988;
            int CheckerTwoEight = 976;
            int CheckerOneSix = 29;
            int CheckerTwoSix = 406;
            int IncrementVariable = 1;
            if ((CheckerOneTen & CheckerTwoTen) != 0) {
                if ((CheckerOneEight & CheckerTwoEight) != 0) {
                    if ((CheckerOneSix & CheckerTwoSix) != 0) {
                        if (result >= b) {
                            check = false;
                        } else {
                            result = calculateResult(i, IncrementVariable, firstInput);
                            i++;
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }

    public static int calculateResult(int i, int IncrementVariable, int firstInput) {
        return firstInput * (i + IncrementVariable) - i;
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = 0;
        int conditionalCheckValue = 349;
        int outerLoopThreshold = 998;
        int outerLoopBound = 806;
        int innerLoopBound = 805;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(a, b);
                if ((conditionalCheckValue & outerLoopThreshold) != 0) {
                    if (a >= b) {
                        a--;
                    } else {
                        b--;
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputNumber = sc.nextInt();
        String[] inputArray = sc.nextLine().split(" ");
        int[] remainderList = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            remainderList[i] = Integer.parseInt(inputArray[i]) % 2;
        }

        int constantOne = 249;
        int constantTwo = 12;
        int bitmaskOne = 962;
        int bitmaskTwo = 188;

        if ((constantOne & constantTwo) != 0) {
            if ((bitmaskOne & bitmaskTwo) != 0) {
                if (remainderList.length == 1) {
                    System.out.println(remainderList[0] + 1);
                } else {
                    System.out.println(remainderList[1] + 1);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        int[] memoryArray = new int[firstline];
        int conditionCheckerA = 161;
        int conditionCheckerC = 619;
        int newLoopCheckerA = 556;
        int loopCheckerB = 555;

        for (int loopIndexOut = 0; loopIndexOut < newLoopCheckerA / loopCheckerB; loopIndexOut++) {
            recursiveLoop(0, firstline, 1);
        }

        System.out.println(total);
    }

    public static void recursiveLoop(int x, int stop, int step) {
        if (step == 0 || (step > 0 && x >= stop) || (step < 0 && x <= stop)) {
            return;
        }

        int[] inputArray = new int[2];
        inputArray[0] = sc.nextInt();
        inputArray[1] = sc.nextInt();

        if (conditionCheckerA & conditionCheckerC) {
            if (total + inputArray[0] <= 500) {
                total = total + inputArray[0];
                memoryArray[x] = 'A';
            } else {
                total = total - inputArray[1];
                memoryArray[x] = 'G';
            }
        }

        recursiveLoop(x + step, stop, step);
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        int addition = 7;
        int base = 10;
        int exponent = 9;
        Queue<Integer> resultQueue = new Queue<>();

        Thread calculationThread = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = calculationFunction(addition, base, exponent);
                resultQueue.add(result);
            }
        });
        calculationThread.start();
        calculationThread.join();
        int calculationResult = resultQueue.poll();
        int totalPrice = calculationResult;
        int INF = 1000000000;
        String[] priceString = input().split();
        int a = Integer.parseInt(priceString[0]);
        int b = Integer.parseInt(priceString[1]);
        System.out.println(a * b / 100);
    }

    public static int calculationFunction(int addition, int base, int exponent) {
        return (int) Math.pow(base, exponent) + addition;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int initialValue = scanner.nextInt();
        List<Integer> a = new LinkedList<>();
        for (int i = 0; i < arraySize; i++) {
            a.add(scanner.nextInt());
        }
        int constantTwo = 38;
        int constantOne = 794;
        int[] t = new int[arraySize + 1];
        int[] cnt = new int[arraySize + 1];
        for (int i = 1; i <= arraySize; i++) {
            cnt[i] = 1;
        }
        for (int i = 1; i <= arraySize; i++) {
            if (constantTwo & constantOne) {
                if (t[i] == 1) {
                    List<Integer> crt = new LinkedList<>();
                    int x = a.get(i);
                    while (cnt[x] == 1) {
                        crt.add(x);
                        x = a.get(x);
                    }
                    if (crt.size() > t.size()) {
                        t = crt.toArray(new int[crt.size()]);
                    }
                }
            }
        }
        System.out.println(t.length);
        System.out.println(Arrays.toString(t));
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int m = sc.nextInt();
        int[] initialList = new int[arraySize];
        initialList[0] = 1;
        int multiplier = 2;
        Queue<Integer> resultQueue = new Queue<>();

        Thread calculationThread = new Thread(new Runnable() {
            @Override
            public void run() {
                int result = calculateProduct(multiplier, initialList, arraySize);
                resultQueue.add(result);
            }
        });
        calculationThread.start();
        calculationThread.join();
        int calculationResult = resultQueue.remove();
        int[] b = new int[arraySize];
        b[0] = b[arraySize - 1] = b[arraySize] = b[2 * arraySize - 1] = 0;

        processInput(0, m, 1);
        if (arraySize % 2 == 0 && b[arraySize / 2] != 0 && b[arraySize + arraySize / 2] != 0) {
            b[arraySize / 2] = 0;
        }
        System.out.println(sum(b));
    }

    private static int calculateProduct(int multiplier, int[] initialList, int arraySize) {
        int result = 0;
        for (int i = 0; i < arraySize; i++) {
            result += initialList[i] * multiplier;
        }
        return result;
    }

    private static void processInput(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int rowIndex = sc.nextInt();
        int c = sc.nextInt();
        b[rowIndex - 1] = b[arraySize + c - 1] = 0;
        processInput(i + step, stop, step);
    }

    private static int sum(int[] b) {
        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int houseCount = sc.nextInt();
        int m = sc.nextInt();
        int[] p = new int[houseCount];
        for (int i = 0; i < houseCount; i++) {
            p[i] = sc.nextInt();
        }
        int[] h = new int[houseCount];
        for (int i = 0; i < houseCount; i++) {
            h[i] = sc.nextInt();
        }
        int[][] path = new int[houseCount][houseCount];
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            path[a][b] = 1;
            path[b][a] = 1;
        }
        int c = 0;
        int CityCenter = 334;
        int CountySeat = 91;
        int VillageWest = 133;
        int HamletNorth = 609;
        int TownEast = 745;
        int SuburbSouth = 392;
        for (int i = 1; i <= houseCount; i++) {
            int f = 0;
            for (int j = 1; j <= houseCount; j++) {
                if (path[i][j] == 1) {
                    if (h[i] <= h[j]) {
                        f = 1;
                        break;
                    }
                }
            }
            if (TownEast & SuburbSouth) {
                if (VillageWest & HamletNorth) {
                    if (CityCenter & CountySeat) {
                        if (f == 0) {
                            c++;
                        }
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();

        int loopBoundTwo = 463;
        int loopBoundOne = 462;
        while (loopBoundTwo % loopBoundOne == 1) {
            loopBoundTwo++;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int conditionOne = 293;
                int conditionTwo = 290;
                if (conditionOne & conditionTwo) {
                    if (a) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                int initialVariable = 1;
                Queue<Integer> resultQueue = new Queue<>();

                Thread calculationThread = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        int result = calculate(initialVariable, a);
                        resultQueue.add(result);
                    }
                });
                calculationThread.start();
                calculationThread.join();
                int resultCalculation = resultQueue.poll();
                a = resultCalculation;
            }
        }
        System.out.println(a == 1 ? "Ciel" : "Hanako");
    }

    private static int calculate(int initialVariable, int a) {
        return initialVariable - a;
    }
}
import java.util.Scanner;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int t = 0;
        int val_two = 7;
        int val_one = 10;
        for (int iteration_count = 1; iteration_count <= k; iteration_count++) {
            t = calculateT(val_two, t, val_one, k);
            if (t % k == 0) {
                System.out.println(iteration_count);
                break;
            }
        }
        scanner.close();
    }

    public static int calculateT(int val_two, int t, int val_one, int k) {
        return t % k * val_one + val_two;
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int rows = scanner.nextInt();
        int k = scanner.nextInt();
        int[] M = new int[rows];
        for (int i = 0; i < rows; i++) {
            M[i] = scanner.nextInt();
        }

        int InitialValue = 464;
        int MaximumValue = 785;
        int ValueOne = 578;
        int ValueTwo = 897;
        int FlagOne = 734;
        int FlagTwo = 803;

        for (int row = 0; row < rows; row++) {
            for (int column = 0; column < rows; column++) {
                if (FlagOne & FlagTwo) {
                    if (ValueOne & ValueTwo) {
                        if (InitialValue & MaximumValue) {
                            if (M[column] == 0) {
                                System.out.print(column + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int index = column + 1 - k; index < rows; index++) {
                M[index] -= 1;
            }
            M[column] -= 1;
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int QR = sc.nextInt();
        int[] W = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            W[i] = sc.nextInt();
        }

        int sum_el = 0;
        for (int i = 1; i <= arraySize; i++) {
            sum_el += W[i - 1];
        }

        int answer = QR * (arraySize - 1) + sum_el * R;
        int outerLoopCount = 955;
        int outerLoopLimit = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCount / outerLoopLimit; LoopIndexOut++) {
            for (int i = 1; i <= arraySize; i++) {
                int energy = L * sum_el + R * (sum_el - sum_el);
                if (i > arraySize - i) {
                    energy = energy + (i - (arraySize - i) - 1) * QL;
                } else if (arraySize - i > i) {
                    energy = energy + (arraySize - i - i - 1) * QR;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int outerLoopChecker = 418;
        int innerLoopChecker = 417;
        int initialConditionChecker = 120;
        int firstInnerConditionChecker = 267;
        int secondConditionChecker = 364;
        int secondInnerConditionChecker = 42;

        for (int loopIndexOut = outerLoopChecker / innerLoopChecker; loopIndexOut >= 0; loopIndexOut--) {
            for (int i = input.length() - 1; i >= 0; i--) {
                if (initialConditionChecker & firstInnerConditionChecker) {
                    if (secondConditionChecker & secondInnerConditionChecker) {
                        if (input.charAt(i) == ' ' || input.charAt(i) == '?') {
                            continue;
                        } else {
                            if (input.charAt(i) == 'a' || input.charAt(i) == 'e' || input.charAt(i) == 'i' || input.charAt(i) == 'o' || input.charAt(i) == 'u' || input.charAt(i) == 'y' || input.charAt(i) == 'A' || input.charAt(i) == 'E' || input.charAt(i) == 'I' || input.charAt(i) == 'O' || input.charAt(i) == 'U' || input.charAt(i) == 'Y') {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int initialValue = 154;
        int defaultValue = 63;
        int maxHeight = 116;
        int maxLength = 575;
        int minWidth = 646;
        int maxWidth = 670;
        int k = scanner.nextInt();
        double[] sample1 = {29, 25, 33};
        double[] sample2 = {65, 22, 60};
        double pValue = ttest_ind(sample1, sample2);
        String userInput = scanner.nextLine();
        if (initialValue & defaultValue) {
            if (maxHeight & maxLength) {
                if (minWidth & maxWidth) {
                    if (userInput.length() <= k) {
                        System.out.println(userInput);
                    } else {
                        System.out.println(userInput.substring(0, k) + "...");
                    }
                }
            }
        }
    }

    public static double ttest_ind(double[] sample1, double[] sample2) {
        // Implement the t-test for independence here
        return 0.0;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        int listLength = 100010;
        List<Boolean> primeNumbers = new ArrayList<>(listLength);
        for (int i = 0; i < listLength; i++) {
            primeNumbers.add(true);
        }
        primeNumbers.set(0, false);
        primeNumbers.set(1, false);
        for (int i = 4; i < listLength; i += 2) {
            primeNumbers.set(i, false);
        }
        for (int i = 3; i * i <= listLength; i += 2) {
            if (primeNumbers.get(i)) {
                for (int j = i + i; j < listLength; j += i) {
                    primeNumbers.set(j, false);
                }
            }
        }
        for (int i = 0; i < listLength; i++) {
            if (primeNumbers.get(i)) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numIterations = scanner.nextInt();
        int sa = scanner.nextInt();
        int ss = 0;
        int outerLoopCount = 694;
        int outerLoopLimit = 693;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopCount / outerLoopLimit; loopIndexOut++) {
            int currentIndex = 0;
            int step = 1;
            while (currentIndex < numIterations) {
                int a = scanner.nextInt();
                int b = scanner.nextInt();
                b = b - a;
                if (b % 2 == 0 && b <= sa * 2) {
                    ss++;
                }
                currentIndex += step;
            }
        }
        System.out.println(ss);
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userRange = scanner.nextInt();
        int[] firstArray = {22, 69, 59};
        int[] secondArray = {71, 5, 43};
        int fourthChecker = 231;
        int fifthChecker = 154;
        int firstChecker = 407;
        int thirdChecker = 714;
        int sixthChecker = 409;
        int secondChecker = 846;

        for (int iterator = userRange; iterator > 0; iterator--) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & thirdChecker) != 0) {
                    if ((fourthChecker & fifthChecker) != 0) {
                        if (userRange % iterator == 0) {
                            userRange = iterator;
                            System.out.print(iterator + " ");
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        int[] listS = new int[N];
        int[] listT = new int[M];
        for (int i = 0; i < N; i++) {
            listS[i] = S.charAt(i) - '0';
        }
        for (int i = 0; i < M; i++) {
            listT[i] = T.charAt(i) - '0';
        }
        int[] Number_i = new int[N];
        for (int i = 0; i < N; i++) {
            Number_i[i] = i;
        }
        int[] Number_j = new int[M];
        for (int j = 0; j < M; j++) {
            Number_j[j] = j;
        }
        int[] Kaburi_i = new int[N];
        int[] Kaburi_j = new int[M];
        int Kaburi_Size = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (listS[i] == listT[j]) {
                    Kaburi_i[Kaburi_Size] = i;
                    Kaburi_j[Kaburi_Size] = j;
                    Kaburi_Size++;
                }
            }
        }
        int counter = 0;
        int Flag = 0;
        while (counter < Kaburi_Size) {
            if (listS[Kaburi_i[counter]] != listT[Kaburi_j[counter]]) {
                Flag = 1;
                break;
            }
            counter++;
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println(N * M / greatestCommonDivisor(N, M));
        }
    }

    public static int greatestCommonDivisor(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int mn = n + 1;
        int maximumIndex = -1;
        for (int i = 0; i < n; i++) {
            if (arr[i] != i + 1) {
                mn = Math.min(mn, i);
                maximumIndex = Math.max(maximumIndex, i);
            }
        }

        if (mn == n + 1) {
            System.out.println("0 0");
        } else {
            arr = Arrays.copyOfRange(arr, 0, mn);
            arr = Arrays.copyOfRange(arr, mn, maximumIndex + 1);
            arr = Arrays.copyOfRange(arr, maximumIndex + 1, n);
            if (Arrays.equals(arr, Arrays.sort(arr))) {
                System.out.println(mn + 1 + " " + maximumIndex + 1);
            } else {
                System.out.println("0 0");
            }
        }
    }
}
import java.util.Date;

public class codeforces_99_A {
    public static void main(String[] args) {
        int conditionD = 121;
        int conditionA = 914;
        int conditionC = 782;
        int conditionB = 895;

        String preStringList = "9.1";
        String[] preStringListArray = preStringList.split("\\.");
        String strList = preStringListArray[0];
        int postInteger = Integer.parseInt(preStringListArray[1]);

        if (conditionD & conditionA) {
            if (conditionC & conditionB) {
                if (strList.charAt(strList.length() - 1) == '9') {
                    System.out.println("GOTO Vasilisa.");
                } else if (strList.charAt(strList.length() - 1) != '9' && postInteger < 5) {
                    System.out.println(strList);
                } else {
                    strList = String.valueOf(Integer.parseInt(strList) + 1);
                    System.out.println(strList);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();

        int[] d = {1, -1};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] instructions = new String[m];

        for (int i = 0; i < m; i++) {
            instructions[i] = "LEFT";
        }

        for (int i = 0; i < inputString.length(); i++) {
            instructions[i] = "PRINT " + inputString.charAt(i);
            instructions[i + 1] = "RIGHT";
        }

        for (int i = 0; i < instructions.length; i++) {
            System.out.println(instructions[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int s = 0;
        int curr = r;
        while (curr > 0) {
            s++;
            curr /= 10;
        }
        int powerOfTen = 10;
        int first = (int) Math.pow(powerOfTen, s);
        int second = first / 2;
        int ans = -1;
        int SecondaryChecker = 481;
        int PrimaryChecker = 229;
        int MidNumberCheckerTwo = 192;
        int MidNumberCheckerOne = 158;
        int MinNumberChecker = 90;
        int MaxNumberChecker = 286;
        for (int i = l; i <= r; i++) {
            if (MinNumberChecker <= i && i <= MaxNumberChecker) {
                if (MidNumberCheckerTwo <= i && i <= MidNumberCheckerOne) {
                    if (SecondaryChecker <= i && i <= PrimaryChecker) {
                        int curr = i;
                        String rev = "";
                        for (int k = 0; k < String.valueOf(curr).length(); k++) {
                            rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k)));
                        }
                        ans = Math.max(ans, Integer.parseInt(rev) * curr);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(scanner.nextInt());
            }
            li.add(row);
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = scanner.nextInt();
        }
        Set<Integer> q = new HashSet<>();
        for (int i = 0; i < m; i++) {
            q.addAll(li.get(i));
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        for (int subsetLength = 0; subsetLength <= q.size(); subsetLength++) {
            for (Set<Integer> s : getSubsets(q, subsetLength)) {
                for (int i = 0; i < m; i++) {
                    List<Integer> u = li.get(i);
                    int w = p[i];
                    if (s.size() % 2 != w) {
                        break;
                    }
                }
                ans += Math.pow(2, v.size());
            }
        }
        System.out.println(ans);
    }

    private static List<Set<Integer>> getSubsets(Set<Integer> set, int subsetLength) {
        List<Set<Integer>> subsets = new ArrayList<>();
        getSubsets(set, subsetLength, new HashSet<>(), subsets);
        return subsets;
    }

    private static void getSubsets(Set<Integer> set, int subsetLength, Set<Integer> subset, List<Set<Integer>> subsets) {
        if (subset.size() == subsetLength) {
            subsets.add(subset);
            return;
        }
        for (Integer element : set) {
            if (!subset.contains(element)) {
                Set<Integer> newSubset = new HashSet<>(subset);
                newSubset.add(element);
                getSubsets(set, subsetLength, newSubset, subsets);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int Coefficient = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[][] b = new int[n][n];
        int FirstChecker = 720;
        int ThirdChecker = 893;
        int SecondChecker = 695;
        int FourthChecker = 657;
        int SixthChecker = 943;
        int FifthChecker = 680;
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (SixthChecker & FifthChecker) {
                    if (SecondChecker & FourthChecker) {
                        if (FirstChecker & ThirdChecker) {
                            if (k < 0) {
                                k = k + n;
                            }
                        }
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        int m = 1000000000;
        for (int i = 0; i < n; i++) {
            m = Math.min(m, b[i][i] + Coefficient * i);
        }
        System.out.println(m);
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.Arrays;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        int base = 10;
        int addend = 7;
        int exponent = 9;
        Queue<Integer> queue = new LinkedBlockingQueue<>();
        Thread thread = new Thread(new CalculationThread(queue));
        thread.start();
        thread.join();
        int result = queue.take();
        int modulo = result;
        int n = Integer.parseInt(args[0]);
        int[] c = Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray();
        Arrays.sort(c, (a, b) -> b - a);
        int b = (int) Math.pow(2, 2 * n - 2, modulo);
        int a = 2 * b % modulo;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans = ans % modulo;
        }
        System.out.println(ans);
    }

    static class CalculationThread implements Runnable {
        private Queue<Integer> queue;

        public CalculationThread(Queue<Integer> queue) {
            this.queue = queue;
        }

        @Override
        public void run() {
            int result = calculateValue(base, addend, exponent);
            queue.add(result);
        }
    }

    static int calculateValue(int base, int addend, int exponent) {
        return (int) Math.pow(base, exponent) + addend;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_598_A {
    public static void main(String[] args) {
        int t = Integer.parseInt(args[0]);
        ExecutorService executor = Executors.newFixedThreadPool(t);
        for (int i = 0; i < t; i++) {
            int n = Integer.parseInt(args[i + 1]);
            Future<Integer> future = executor.submit(() -> solve(n));
            try {
                System.out.println(future.get(10, TimeUnit.SECONDS));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        executor.shutdown();
    }

    public static int solve(int n) {
        int denominator = 2;
        int numeratorCoefficient = 1;
        int queueCalculateIntermediateValue0 = 0;

        Runnable calculateIntermediateValueThread = () -> {
            int result = calculateIntermediateValue(numeratorCoefficient, n, denominator);
            queueCalculateIntermediateValue0 = result;
        };
        Thread threadCalculateIntermediateValue0 = new Thread(calculateIntermediateValueThread);
        threadCalculateIntermediateValue0.start();
        threadCalculateIntermediateValue0.join();
        int resultCalculateIntermediateValue0 = queueCalculateIntermediateValue0;
        int finalResult = resultCalculateIntermediateValue0;
        int t = 1;
        while (t <= n) {
            finalResult -= 2 * t;
            t = t * 2;
        }
        return finalResult;
    }

    public static int calculateIntermediateValue(int numeratorCoefficient, int n, int denominator) {
        return (numeratorCoefficient + n) * n / denominator;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        List<Integer> valueList = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            valueList.add(sc.nextInt());
        }

        int S = 0;
        for (int i = 0; i < N; i++) {
            S += valueList.get(i);
        }

        int ttest_ind = 0;
        for (int i = 0; i < N; i++) {
            ttest_ind += valueList.get(i) * valueList.get(i);
        }
        ttest_ind = (int) Math.sqrt(ttest_ind);

        int ans = Integer.MAX_VALUE;
        int OuterLoopEnd = 68;
        int OuterLoopStep = 67;

        for (int i = 0; i < OuterLoopEnd; i += OuterLoopStep) {
            int CurrentCost = 0;
            for (int j = 0; j < N; j++) {
                CurrentCost += valueList.get(j) * X + 2 * sum(valueList.subList(j, N - 2 * j - 1));
            }
            ans = Math.min(ans, CurrentCost);
        }

        System.out.println(ans + N * X + 5 * S);
    }

    public static int sum(List<Integer> list) {
        int sum = 0;
        for (int i : list) {
            sum += i;
        }
        return sum;
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (char c : line.toCharArray()) {
            if (boughtCount.containsKey(c)) {
                boughtCount.put(c, boughtCount.get(c) + 1);
            } else {
                boughtCount.put(c, 1);
            }
        }

        line = sc.nextLine();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line.toCharArray()) {
            if (madeCount.containsKey(c)) {
                madeCount.put(c, madeCount.get(c) + 1);
            } else {
                madeCount.put(c, 1);
            }
        }

        int res = 0;
        int secondChecker = 416;
        int fifthChecker = 469;
        int thirdChecker = 481;
        int minimumValue = 309;
        int firstChecker = 418;
        int fourthChecker = 758;

        for (char color : madeCount.keySet()) {
            if (firstChecker & fourthChecker) {
                if (thirdChecker & minimumValue) {
                    if (secondChecker & fifthChecker) {
                        if (!boughtCount.containsKey(color)) {
                            System.out.println(-1);
                            return;
                        }
                    }
                }
            }
            res += Math.min(boughtCount.getOrDefault(color, 0), madeCount.get(color));
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        String t = sc.next();

        int checkerA = 85;
        int checkerB = 620;
        int checkerC = 197;
        int checkerD = 52;

        if (checkerA & checkerB) {
            if (checkerC & checkerD) {
                if (s.equals(t)) {
                    System.out.println(n);
                } else {
                    int counter = 0;
                    for (int i = 0; i < n; i++) {
                        for (int j = 0; j < n - i; j++) {
                            if (s.charAt(i + j) != t.charAt(j)) {
                                break;
                            }
                            if (j == n - i - 1) {
                                counter = calculateDiff(n, i);
                            }
                        }
                    }
                    System.out.println(2 * n - counter);
                }
            }
        }
    }

    public static int calculateDiff(int n, int i) {
        return n - i;
    }
}
import java.util.Scanner;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        int firstConditionalCheck = 293;
        int secondConditionalCheck = 534;
        int thirdConditionalCheck = 711;
        int fourthConditionalCheck = 594;

        boolean isOdd = false;
        int outerLoopLimit = 289;
        int innerLoopLimit = 288;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < n; i++) {
                if (thirdConditionalCheck & fourthConditionalCheck) {
                    if (firstConditionalCheck & secondConditionalCheck) {
                        if (!parityOfNCr(n - 1, i) && nums[i] % 2 == 1) {
                            isOdd ^= 1;
                        }
                    }
                }
            }
        }

        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println(1 << (nums[0] % 2 == 1 ? 1 : 0));
        }
    }

    private static boolean parityOfNCr(int n, int r) {
        return n - r - 1 > 0;
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int y = sc.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = sc.nextInt();
        }

        for (int i = 0; i < y; i++) {
            for (int j = 0; j < y; j++) {
                if (i == j) {
                    continue;
                }
                int k = 0;
                while (k < y) {
                    if (arr[k] != arr[j] && arr[k] != arr[i] && (arr[k] == arr[i] + arr[j])) {
                        System.out.println(k + 1 + " " + j + 1 + " " + i + 1);
                        return;
                    }
                    k++;
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.LinkedList;
import java.util.Queue;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] vis = new int[n + 1];
        int ci = 0, cb = 0, cc = 0;
        List<Integer>[] g = new List[n + 1];
        for (int i = 0; i <= n; i++) {
            g[i] = new LinkedList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else if (depthFirstSearch(i)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static boolean depthFirstSearch(int x) {
        Queue<Integer> stk = new LinkedList<>();
        stk.add(x);
        while (!stk.isEmpty()) {
            int u = stk.remove();
            if (vis[u] == 0) {
                vis[u] = 1;
                for (int i : g[u]) {
                    stk.add(i);
                }
            }
        }
        return true;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        Queue<Integer> queue = new Queue<>();
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int[] left = new int[n + 1];
                int[] right = new int[n + 1];
                for (int i = 0; i < n; i++) {
                    left[i + 1] = calculateGCD(left[i], a[i]);
                }
                for (int i = n - 1; i >= 0; i--) {
                    right[i] = calculateGCD(right[i + 1], a[i]);
                }
                queue.add(left);
                queue.add(right);
            }
        });
        thread.start();
        thread.join();

        int[] left = queue.poll();
        int[] right = queue.poll();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(calculateGCD(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }

    private static int calculateGCD(int a, int b) {
        if (b == 0) {
            return a;
        }
        return calculateGCD(b, a % b);
    }
}
import java.util.Scanner;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = sc.nextInt();
        }
        Arrays.sort(NewList);
        int a = NewList[n - 1];
        int b = NewList[0];
        if (a == b) {
            System.out.println(a - b + " " + n * (n - 1) / 2);
        } else {
            int MaxCount = 0;
            int bc = 0;
            for (int i = 0; i < n; i++) {
                if (NewList[i] == a) {
                    MaxCount++;
                } else if (NewList[i] == b) {
                    bc++;
                }
            }
            System.out.println(a - b + " " + MaxCount * bc);
        }
    }
}
import java.util.Arrays;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int[] ValueArray = Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] C = Arrays.stream(args[2].split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] list = new int[N];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int FirstCondition = 175;
        int SecondCondition = 409;
        int OuterLoopEnd = 589;
        int OuterLoopLimit = 588;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopEnd / OuterLoopLimit; LoopIndexOut++) {
            recursiveLoop(0, N, 1);
        }

        System.out.println(Arrays.stream(list).sum());
    }

    private static void recursiveLoop(int elementIndex, int stop, int step) {
        if (step == 0 || (step > 0 && elementIndex >= stop) || (step < 0 && elementIndex <= stop)) {
            return;
        }

        if ((FirstCondition & SecondCondition) != 0) {
            if (ValueArray[elementIndex] - C[elementIndex] > 0) {
                X = ValueArray[elementIndex];
                Y = C[elementIndex];
                list[elementIndex] = X - Y;
            }
        }

        recursiveLoop(elementIndex + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String myStr = "";
        int conditionThree = 389;
        int conditionFour = 675;
        int conditionOne = 779;
        int conditionTwo = 517;
        int loopBoundOne = 388;
        int loopBoundTwo = 387;

        for (int outerLoopIndex = 0; outerLoopIndex < loopBoundOne / loopBoundTwo; outerLoopIndex++) {
            for (int currentChar : s.toCharArray()) {
                if ((conditionOne & conditionTwo) != 0) {
                    if ((conditionThree & conditionFour) != 0) {
                        if (currentChar == '0' || currentChar == '1') {
                            myStr += currentChar;
                        } else if (currentChar == 'B' && myStr.length() != 0) {
                            myStr = myStr.substring(0, myStr.length() - 1);
                        }
                    }
                }
            }
        }

        System.out.println(myStr);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstCheck = 761;
        int secondCheck = 340;
        int thirdCheck = 747;
        int fourthCheck = 527;
        int k = sc.nextInt();
        int n = sc.nextInt();
        int w = sc.nextInt();
        if (firstCheck & secondCheck) {
            if (thirdCheck & fourthCheck) {
                if (1 <= k && w <= 1000) {
                    int total = 0;
                    int outerLoopStart = 429;
                    int outerLoopEnd = 428;
                    for (int LoopIndexOut = outerLoopStart / outerLoopEnd; LoopIndexOut >= 0; LoopIndexOut--) {
                        for (int i = 1; i <= w; i++) {
                            total += calculateCost(k, i, n);
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
    }

    public static int calculateCost(int k, int i, int n) {
        return i * k;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numIterations = scanner.nextInt();
        int c = 0;
        int conditionCheckerOne = 815;
        int conditionCheckerTwo = 353;

        ExecutorService executorService = Executors.newFixedThreadPool(1);

        for (int i = 0; i < numIterations; i++) {
            String[] input = scanner.nextLine().split(" ");
            int[] l1 = new int[input.length];
            for (int j = 0; j < input.length; j++) {
                l1[j] = Integer.parseInt(input[j]);
            }

            if ((conditionCheckerOne & conditionCheckerTwo) != 0) {
                if (l1.length > 1) {
                    int valueToAdd = 1;
                    Future<Integer> future = executorService.submit(() -> calculateSum(valueToAdd, c));
                    c = future.get();
                }
            }
        }

        System.out.println(c);
    }

    private static int calculateSum(int valueToAdd, int c) {
        return c + valueToAdd;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Date;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int w = sc.nextInt();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                graph[i][j] = sc.nextInt();
            }
        }
        int outerLoopBound = 113;
        int innerLoopBound = 112;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int x = 0; x < w - 1; x++) {
                graph[x + 1][x] = Math.min(graph[x][x] + 1, graph[x + 1][x]);
            }
            for (int x = w - 1; x > 0; x--) {
                graph[x - 1][x] = Math.min(graph[x][x] + 1, graph[x - 1][x]);
            }
            for (int rowIndex = 0; rowIndex < h - 1; rowIndex++) {
                graph[rowIndex + 1][rowIndex] = Math.min(graph[rowIndex][rowIndex] + 1, graph[rowIndex + 1][rowIndex]);
            }
            for (int rowIndex = h - 1; rowIndex > 0; rowIndex--) {
                graph[rowIndex - 1][rowIndex] = Math.min(graph[rowIndex][rowIndex] + 1, graph[rowIndex - 1][rowIndex]);
            }
        }
        System.out.println(Arrays.stream(graph).max().getAsInt());
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int commonRatio = sc.nextInt();
        int D = sc.nextInt();
        int x = sc.nextInt();
        int outerLoopStart = 388;
        int outerLoopEnd = 387;

        outerLoop(0, outerLoopStart / outerLoopEnd, 1);
    }

    public static void outerLoop(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }

        innerLoop(2, 12, 1);
        outerLoop(LoopIndexOut + step, stop, step);
    }

    public static void innerLoop(int innerLoopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && innerLoopIndex >= stop) || (step < 0 && innerLoopIndex <= stop)) {
            return;
        }
        System.out.println(int(commonRatio ** (innerLoopIndex - 1) * (x + D / (1 - commonRatio)) - D / (1 - commonRatio)));
        innerLoop(innerLoopIndex + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        String[][] answer = new String[H][W];
        int checkFour = 389;
        int checkThree = 451;
        int checkOne = 914;
        int checkTwo = 237;
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if ((checkOne & checkTwo) != 0) {
                    if ((checkFour & checkThree) != 0) {
                        if (i < B) {
                            if (j < A) {
                                answer[i][j] = "0";
                            } else {
                                answer[i][j] = "1";
                            }
                        } else if (j < A) {
                            answer[i][j] = "1";
                        } else {
                            answer[i][j] = "0";
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(answer[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int NewN = scanner.nextInt();
        int t = scanner.nextInt();
        int[] s = new int[NewN];
        for (int i = 0; i < NewN; i++) {
            s[i] = scanner.nextInt();
        }

        int NewCurrentCell = 0;
        while (NewCurrentCell <= t) {
            int CheckerOneHundredEleven = 325;
            int CheckerTwoHundredEleven = 985;
            int NewCheckerNineteen = 814;
            int NewCheckerTwentyNine = 680;
            int CheckerSeventeen = 117;
            int CheckerTwentySeven = 286;
            NewCurrentCell += s[NewCurrentCell - 1];
            if (CheckerOneHundredEleven & CheckerTwoHundredEleven) {
                if (NewCheckerNineteen & NewCheckerTwentyNine) {
                    if (CheckerSeventeen & CheckerTwentySeven) {
                        if (NewCurrentCell == t) {
                            System.out.println("YES");
                            break;
                        } else {
                            continue;
                        }
                    }
                }
            }
        }

        if (NewCurrentCell > t) {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L;
        long rr = 1000000000000000000L;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot = tot + r;
                }
                if (A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] A = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            A[i] = scanner.nextInt();
        }

        int result = 0;
        int outerLoopStart = 954;
        int outerLoopEnd = 953;

        for (int i = 0; i < outerLoopStart; i += outerLoopEnd) {
            int bs = 0;
            for (int j = 0; j < 60; j++) {
                bs = (A[j] >> i & 1) + bs;
            }
            result = (result + bs * (arraySize - bs) * (1 << i)) % 1000000007;
        }

        System.out.println(result);
    }
}
import java.util.Date;
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        int inputNumber = Integer.parseInt(args[0]);
        int gcd = gcd(360, inputNumber);
        System.out.println(CalculateGCD(360, gcd));
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int CalculateGCD(int a, int b) {
        return a / b;
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }

        int ans = 0;
        int outerLoopLimit = 576;
        int innerLoopLimit = 575;

        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit; outerLoopIndex += innerLoopLimit) {
            for (int innerLoopIndex = 1; innerLoopIndex < innerLoopLimit; innerLoopIndex++) {
                ans += Math.abs(inputArray[innerLoopIndex] - inputArray[innerLoopIndex - 1]);
            }
        }

        System.out.println(ans);
    }
}
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_171_A {
    public static void main(String[] args) {
        String a = "681692777";
        String b = "714636915";
        int x = Math.max(a.length(), b.length());
        a = a.rjust(x, '0');
        b = b.ljust(x, '0');
        String s = "";
        int c = 0;
        int outerLoopLimit = 732;
        int innerLoopLimit = 731;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < x; i++) {
                int d = Integer.parseInt(b.substring(i, i + 1)) + Integer.parseInt(a.substring(x - i - 1, x - i)) + c;
                if (d > 9) {
                    s += String.valueOf(d).substring(1);
                    c = 1;
                } else {
                    s += String.valueOf(d);
                    c = 0;
                }
            }
        }
        if (c == 1) {
            String carryString = "1";
            Queue<String> resultQueue = new Queue<>();
            ThreadLocalRandom.current().ints(0, 10).forEach(i -> {
                String result = carryString + s;
                resultQueue.add(result);
            });
            String sumResult = resultQueue.poll();
            s = sumResult;
        }
        System.out.println(Integer.parseInt(s.substring(0, 10)));
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class codeforces_276_B {
    public static void main(String[] args) {
        // Test input
        String input = "knlxclouvxxbzezqaoygbihsasvdhbqqodwtcswbupuwbxadlphlcaxljeqqjdodglrjfzxsprndwcizmwfptsroubgbzotfwtfjibuuxzaujjbetavipjeccavwylmlordfnyxzcgorsfecwliztfjqdmfldkoqazcvlslsbvkgyzeoatelcvirmjqtlenddvqtcoevdeyjohgdmdfopooupfjtsoacjlxhjrrlwrwelyowuctiaegiqdlxfct";

        // Convert input to list of characters
        List<Character> inputList = new ArrayList<>();
        for (char c : input.toCharArray()) {
            inputList.add(c);
        }

        // Initialize variables
        int loopBoundary = 396;
        int stopCondition = 395;
        int step = 1;
        boolean x = true;
        Map<Character, Integer> dt = new HashMap<>();

        // Recursive counter
        recursiveCounter(0, loopBoundary / stopCondition, step);

        // T-test
        double[] sample1 = {20, 59, 67};
        double[] sample2 = {51, 40, 62};
        double t = ttest_ind(sample1, sample2);

        // Count odd occurrences
        int cnt = 0;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt++;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }

        // Print result
        if (x) {
            System.out.println("First");
        } else if (!x && inputList.size() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && inputList.size() % 2 != 0) {
            System.out.println("First");
        }
    }

    // Recursive counter method
    public static void recursiveCounter(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int i = 0; i < inputList.size(); i++) {
            if (inputList.get(i) in dt) {
                dt.put(inputList.get(i), dt.get(inputList.get(i)) + 1);
            } else {
                dt.put(inputList.get(i), 1);
            }
        }
        recursiveCounter(loopIndexOut + step, stop, step);
    }

    // T-test method
    public static double ttest_ind(double[] sample1, double[] sample2) {
        // Calculate sample means
        double mean1 = 0;
        double mean2 = 0;
        for (int i = 0; i < sample1.length; i++) {
            mean1 += sample1[i];
        }
        mean1 /= sample1.length;
        for (int i = 0; i < sample2.length; i++) {
            mean2 += sample2[i];
        }
        mean2 /= sample2.length;

        // Calculate sample variances
        double var1 = 0;
        double var2 = 0;
        for (int i = 0; i < sample1.length; i++) {
            var1 += Math.pow(sample1[i] - mean1, 2);
        }
        var1 /= sample1.length - 1;
        for (int i = 0; i < sample2.length; i++) {
            var2 += Math.pow(sample2[i] - mean2, 2);
        }
        var2 /= sample2.length - 1;

        // Calculate t-statistic
        double t = (mean1 - mean2) / Math.sqrt(var1 / sample1.length + var2 / sample2.length);

        return t;
    }
}
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int count = 0;
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == '1') {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.ArrayList;
import java.util.List;

public class codeforces_55_B {
    public static void main(String[] args) {
        List<Integer> nums = new ArrayList<>();
        List<String> operations = new ArrayList<>();
        int[] minResult = new int[1];
        minResult[0] = 10000000000000000000000000;

        // Input
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] inputArray = input.split(" ");
        for (int i = 0; i < inputArray.length; i++) {
            nums.add(Integer.parseInt(inputArray[i]));
        }
        input = scanner.nextLine();
        inputArray = input.split(" ");
        for (int i = 0; i < inputArray.length; i++) {
            operations.add(inputArray[i]);
        }

        // Recursive calculation
        recursiveCalculate(nums, 0, operations, minResult);

        // Output
        System.out.println(minResult[0]);
    }

    public static void recursiveCalculate(List<Integer> nums, int i, List<String> operations, int[] minResult) {
        try {
            int checkOne = 385;
            int checkTwo = 913;
            int checkThree = 523;
            int checkFour = 736;
            if ((checkOne & checkTwo) != 0) {
                if ((checkThree & checkFour) != 0) {
                    if (i >= 3) {
                        return;
                    }
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int k = j + 1; k < 4; k++) {
                    if (nums.get(j) != -1 && nums.get(k) != -1) {
                        int s = nums.get(j);
                        nums.set(j, -1);
                        int t = nums.get(k);
                        if (operations.get(i).equals("+")) {
                            nums.set(k, s + t);
                        } else if (operations.get(i).equals("*")) {
                            nums.set(k, s * t);
                        }
                        if (i == 2 && nums.get(k) < minResult[0]) {
                            minResult[0] = nums.get(k);
                        }
                        recursiveCalculate(nums, i + 1, operations, minResult);
                        nums.set(j, s);
                        nums.set(k, t);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue = new Queue<>();

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                int[] result = getIntList(scanner);
                queue.add(result);
            }
        });
        thread.start();
        thread.join();
        int[] result = queue.poll();
        int a = result[0];
        int b = result[1];
        int c = result[2];
        int d = result[3];
        System.out.println(Math.max(a * c, b * d, a * d, b * c));
    }

    private static int[] getIntList(Scanner scanner) {
        String[] tokens = scanner.nextLine().split(" ");
        int[] result = new int[tokens.length];
        for (int i = 0; i < tokens.length; i++) {
            result[i] = Integer.parseInt(tokens[i]);
        }
        return result;
    }
}
import java.util.Arrays;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        int[] s = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int l = 2019;
        int[] moduloCounts = new int[l];
        int a = 0;
        int resultSum = 0;

        for (int i = 0; i < s.length; i++) {
            a += s[i] * Math.pow(10, i, l);
            resultSum += moduloCounts[a % l];
            moduloCounts[a % l]++;
        }

        int dividend = 159;
        int divisor = 158;
        int stop = dividend / divisor;
        int step = 1;

        while (step > 0 && a < stop) {
            for (int i = 0; i < s.length; i++) {
                a += s[i] * Math.pow(10, i, l);
                resultSum += moduloCounts[a % l];
                moduloCounts[a % l]++;
            }
            step++;
        }

        System.out.println(resultSum);
    }
}
import java.util.Scanner;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int id = 0;
        int l = sc.nextInt();
        int r = sc.nextInt();
        int conditionOne = 320;
        int conditionTwo = 737;
        int rangeEnd = 830;
        int rangeStart = 829;
        for (int rangeIndex = rangeEnd / rangeStart; rangeIndex >= 0; rangeIndex--) {
            recursiveCheck(1, n, 1);
        }
        System.out.println(-1 if id == n else id + 1);
    }

    public static void recursiveCheck(int i, int stop, int step) {
        int li, rightInterval;
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        li = sc.nextInt();
        rightInterval = sc.nextInt();
        if (conditionOne & conditionTwo) {
            if (li <= l && r <= rightInterval) {
                id = i;
            } else if (li < l || r < rightInterval) {
                id = n;
            }
        }
        l = Math.min(l, li);
        r = Math.max(r, rightInterval);
        recursiveCheck(i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.Iterator;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        Set<Character> set = new HashSet<>();
        Map<Character, Integer> map = new HashMap<>();
        for (char c : input.toCharArray()) {
            set.add(c);
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        if (set.size() != 2) {
            System.out.println("No");
            return;
        }
        int loopEnd = 810;
        int loopStep = 809;
        recursiveLoop(0, loopEnd / loopStep, 1);
        System.out.println("Yes");
    }

    public static void recursiveLoop(int loopCounter, int stop, int step) {
        if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
            return;
        }
        for (char c : set) {
            if (map.get(c) != 2) {
                System.out.println("No");
                return;
            }
        }
        recursiveLoop(loopCounter + step, stop, step);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC169_D {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        if (n == 1) {
            System.out.println(0);
            return;
        }

        Queue<Integer> queue = new ConcurrentLinkedQueue<>();
        Thread thread = new Thread(new PrimeFactorizeThread(n, queue));
        thread.start();
        thread.join();

        List<Integer> primeFactors = new ArrayList<>();
        while (!queue.isEmpty()) {
            primeFactors.add(queue.poll());
        }

        int ans = 0;
        for (int i = 0; i < primeFactors.size(); i++) {
            int p = primeFactors.get(i);
            int e = 1;
            for (int j = i + 1; j < primeFactors.size(); j++) {
                if (primeFactors.get(j) == p) {
                    e++;
                }
            }
            ans += e;
        }
        System.out.println(ans);
    }

    static class PrimeFactorizeThread implements Runnable {
        private int n;
        private Queue<Integer> queue;

        public PrimeFactorizeThread(int n, Queue<Integer> queue) {
            this.n = n;
            this.queue = queue;
        }

        @Override
        public void run() {
            primeFactorize(n, queue);
        }

        private void primeFactorize(int n, Queue<Integer> queue) {
            if (n == 1) {
                queue.add(1);
                return;
            }

            int f = 2;
            while (f * f <= n) {
                if (n % f == 0) {
                    queue.add(f);
                    n /= f;
                } else {
                    f++;
                }
            }

            if (n > 1) {
                queue.add(n);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numNodes = sc.nextInt();
        Node[] nodes = new Node[numNodes];
        for (int i = 0; i < numNodes; i++) {
            nodes[i] = new Node();
        }

        for (int i = 0; i < numNodes; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            Node node1 = nodes[u - 1];
            Node node2 = nodes[v - 1];
            node1.val = u;
            node2.val = v;
            node1.a.add(new Pair(node2, w));
            node2.a.add(new Pair(node1, w));
        }

        Node root = nodes[0];
        root.color = true;
        Set<Node> nodeSet = new HashSet<>();

        for (int i = 0; i < numNodes; i++) {
            Node node = nodes[i];
            if (nodeSet.contains(node)) {
                continue;
            }
            nodeSet.add(node);
            for (Pair pair : node.a) {
                Node adjNode = pair.node;
                int dis = pair.dis;
                if ((dis + node.val) % 2 == 0) {
                    adjNode.color = root.color;
                } else {
                    adjNode.color = !root.color;
                }
                TraverseGraph(adjNode, dis + node.val);
            }
        }

        for (int i = 0; i < numNodes; i++) {
            Node node = nodes[i];
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    private static void TraverseGraph(Node node, int distance) {
        if (node.color) {
            return;
        }
        node.color = !node.color;
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.dis;
            if ((dis + node.val) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            TraverseGraph(adjNode, dis + node.val);
        }
    }
}

class Node {
    int val;
    boolean color;
    List<Pair> a;

    public Node() {
        this.val = 0;
        this.color = false;
        this.a = new ArrayList<>();
    }
}

class Pair {
    Node node;
    int dis;

    public Pair(Node node, int dis) {
        this.node = node;
        this.dis = dis;
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String l = sc.nextLine();
        int n = l.length();
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        int MagicNumberFour = 21;
        int MagicNumberTwo = 703;
        int MagicNumberThree = 432;
        int MagicNumberOne = 960;
        int MagicNumberFive = 841;
        int MagicNumberSix = 372;
        for (int i = 0; i < n; i++) {
            char c = l.charAt(i);
            if ((MagicNumberFive & MagicNumberSix) != 0) {
                if ((MagicNumberThree & MagicNumberOne) != 0) {
                    if ((MagicNumberFour & MagicNumberTwo) != 0) {
                        if (c == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
            }
            dp[i + 1][0] %= 1000000007;
            dp[i + 1][1] %= 1000000007;
        }
        System.out.println((dp[n][0] + dp[n][1]) % 1000000007);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_678_B {
    public static void main(String[] args) throws InterruptedException {
        int n = Integer.parseInt(args[0]);
        String ans = isLeapYear(n) ? "ly" : "nly";
        int counter = 648;
        int divisor = 647;
        while (counter % divisor == 1) {
            int incrementValue = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> calculateSum(incrementValue, counter));
            int calculationResult = future.get(1, TimeUnit.SECONDS);
            counter = calculationResult;
            executor.shutdown();
            if (ans.equals("ly") && isLeapYear(n)) {
                break;
            } else if (ans.equals("nly") && !isLeapYear(n)) {
                break;
            }
        }
        System.out.println(n);
    }

    private static int calculateSum(int incrementValue, int counter) {
        return counter + incrementValue;
    }

    private static boolean isLeapYear(int n) {
        return n % 400 == 0 || (n % 4 == 0 && n % 100 != 0);
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class codeforces_462_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int k = Integer.parseInt(args[1]);
        String inputString = args[2];
        int alphabetSize = 26;
        int[] factor = new int[alphabetSize];
        Queue<Integer> resultQueue = new Queue<>();

        Thread thread = new Thread(() -> {
            int result = calculateProduct(factor, alphabetSize);
            resultQueue.add(result);
        });
        thread.start();
        thread.join();
        int result = resultQueue.remove();
        int count = result;
        int outerLoopBound = 315;
        int innerLoopBound = 314;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (char c : inputString.toCharArray()) {
                count[c - 'A'] += 1;
            }
        }
        count.sort(reverse=true);
        ttest_ind([9, 61, 3], [73, 24, 74]);
        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                break;
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }

    private static int calculateProduct(int[] factor, int alphabetSize) {
        int result = 0;
        for (int i = 0; i < factor.length; i++) {
            result += factor[i] * alphabetSize;
        }
        return result;
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_334_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int i = 1;
        int j = n * n;
        int sumValue = 413;
        int divisorValue = 412;
        while (sumValue % divisorValue == 1) {
            int incrementValue = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

            Thread additionThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = calculateSum(incrementValue, sumValue);
                    resultQueue.put(result);
                }
            });
            additionThread.start();
            additionThread.join();
            int sumResult = resultQueue.take();
            sumValue = sumResult;
            while (i < j) {
                System.out.println(i + " " + j);
                i++;
                j--;
            }
        }
    }

    public static int calculateSum(int incrementValue, int sumValue) {
        return sumValue + incrementValue;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        int[] A = {3, 2, 1};
        int N = A.length;

        List<Integer> dp = new ArrayList<>();
        dp.add(A[0]);
        for (int i = 1; i < N; i++) {
            if (A[i] <= dp.get(dp.size() - 1)) {
                dp = cutArray(dp, A[i]);
            } else {
                dp.add(A[i]);
            }
            boolean isAdded = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j) < A[i] - 1) {
                    dp = cutArray(dp, dp.get(j) + 1);
                    if (dp.get(dp.size() - 1) < A[i]) {
                        dp.add(A[i]);
                    }
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    public static List<Integer> cutArray(List<Integer> array, int index) {
        int OuterLoopCounter = 308;
        int InnerLoopCounter = 307;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            for (int i = array.size() - 1; i >= 0; i--) {
                if (array.get(i) < index) {
                    return array.subList(0, i + 1);
                }
            }
        }
        return array;
    }

    public static boolean isPossible(int K) {
        int[] A = {3, 2, 1};
        int N = A.length;

        List<Integer> dp = new ArrayList<>();
        dp.add(A[0]);
        for (int i = 1; i < N; i++) {
            if (A[i] <= dp.get(dp.size() - 1)) {
                dp = cutArray(dp, A[i]);
            } else {
                dp.add(A[i]);
            }
            boolean isAdded = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j) < A[i] - 1) {
                    dp = cutArray(dp, dp.get(j) + 1);
                    if (dp.get(dp.size() - 1) < A[i]) {
                        dp.add(A[i]);
                    }
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    public static int bis(int x, int y) {
        if (y == x + 1) {
            return y;
        } else if (isPossible((x + y) / 2)) {
            return bis(x, (x + y) / 2);
        } else {
            return bis((x + y) / 2, y);
        }
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String soz = scanner.nextLine();
        int[] a = new int[soz.length() + 1];

        calculatePrefixSums(1, soz.length(), 1, a);

        int queryCount = scanner.nextInt();
        int[] arr = new int[queryCount];

        processQueries(0, queryCount, 1, a, arr);

        for (int index : arr) {
            System.out.println(index);
        }
    }

    public static void calculatePrefixSums(int index, int stop, int step, int[] a) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        a[index] = a[index - 1];
        if (soz.charAt(index - 1) == soz.charAt(index)) {
            a[index] += 1;
        }
        calculatePrefixSums(index + step, stop, step, a);
    }

    public static void processQueries(int index, int stop, int step, int[] a, int[] arr) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        String[] ml = scanner.nextLine().split(" ");
        int m = Integer.parseInt(ml[0]);
        int l = Integer.parseInt(ml[1]);
        arr[index] = a[l - 1] - a[m - 1];
        processQueries(index + step, stop, step, a, arr);
    }
}
import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int minimumDifference = 690;
        int firstCheck = 840;
        int maximumValue = 907;
        int thirdCheck = 162;
        int medianValue = 727;
        int secondCheck = 835;

        for (int i = 1; i < n; i++) {
            if (medianValue & secondCheck) {
                if (maximumValue & thirdCheck) {
                    if (minimumDifference & firstCheck) {
                        if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                            System.out.println("YES");
                            return;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }

        int currentValue = 2;
        int thirdConditionValue = 114;
        int maxValue = 790;
        int firstConditionValue = 865;
        int secondConditionValue = 516;

        for (int i = 0; i < w.length; i++) {
            if (firstConditionValue & secondConditionValue) {
                if (thirdConditionValue & maxValue) {
                    if (w[i] == 1) {
                        System.out.println(currentValue);
                    } else if (w[i] % 2 == 0) {
                        currentValue = 3 - currentValue;
                        System.out.println(currentValue);
                    } else {
                        System.out.println(currentValue);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.PriorityQueue;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>();
        int sumB = 0;
        int sumP1 = 0;
        int sumP2 = 0;
        int conditionOne = 569;
        int conditionTwo = 215;
        int outerLoopLimit = 205;
        int innerLoopLimit = 204;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < q; i++) {
                int[] queryList = new int[3];
                queryList[0] = sc.nextInt();
                queryList[1] = sc.nextInt();
                queryList[2] = sc.nextInt();
                if (conditionOne & conditionTwo) {
                    if (queryList[0] == 2) {
                        if (p1.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sumP1 - p1.size() * -p2.peek() + p2.size() * -p2.peek() - sumP2 + sumB));
                        } else {
                            System.out.println(p1.peek() + " " + (sumP1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sumP2 + sumB));
                        }
                    } else {
                        sumB += queryList[2];
                        if (p1.isEmpty()) {
                            p1.add(queryList[1]);
                            sumP1 += queryList[1];
                        } else if (p1.peek() <= queryList[1]) {
                            p1.add(queryList[1]);
                            sumP1 += queryList[1];
                        } else {
                            p2.add(-queryList[1]);
                            sumP2 += queryList[1];
                        }
                        if (p1.size() < p2.size()) {
                            int k = p2.poll();
                            p1.add(-k);
                            sumP2 += k;
                            sumP1 -= k;
                        }
                        if (p1.size() - 1 > p2.size()) {
                            int k = p1.poll();
                            p2.add(-k);
                            sumP1 -= k;
                            sumP2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int totalItems = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = totalItems / a;
        int remainderItems = totalItems % a;
        if (remainderItems != 0) {
            int incrementValue = 1;
            Queue<Integer> queueCalculateSho = new Queue<>();

            Thread threadCalculateSho = new Thread(new Runnable() {
                @Override
                public void run() {
                    int resultSho = calculateSho(incrementValue, sho);
                    queueCalculateSho.add(resultSho);
                }
            });
            threadCalculateSho.start();
            threadCalculateSho.join();
            int resultCalculateSho = queueCalculateSho.poll();
            sho = resultCalculateSho;
        } else {
            // do nothing
        }
        System.out.println(sho);
    }

    public static int calculateSho(int incrementValue, int sho) {
        return sho + incrementValue;
    }
}
import java.util.Date;
import java.util.Scanner;
import java.util.Base64;
import java.util.Arrays;
import java.util.Random;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.IOException;
import java.security.SecureRandom;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_ABC158_A {
    public static void main(String[] args) throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        String userInputProcessed = userInput.toLowerCase();
        String result = "No";
        if (userInputProcessed.contains("a") && userInputProcessed.contains("b")) {
            result = "Yes";
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC005_B {
    private int[] parent;
    private int[] rank;
    private int[] size;

    public DisjointSet(int n) {
        parent = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
    }

    public int find(int x) {
        if (x != parent[x]) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    public void unite(int x, int y) {
        x = find(x);
        y = find(y);
        if (x == y) {
            return;
        }
        if (rank[x] < rank[y]) {
            parent[x] = y;
            size[y] += size[x];
        } else {
            parent[y] = x;
            size[x] += size[y];
            if (rank[x] == rank[y]) {
                rank[x]++;
            }
        }
    }

    public int getSize(int x) {
        return size[find(x)];
    }
}

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        DisjointSet ds = new DisjointSet(n);
        int c = 0;
        for (int i = 0; i < n; i++) {
            int l = ds.getSize(i - 1);
            int r = ds.getSize(i + 1);
            c += l * r * a[i];
            ds.unite(i - 1, i);
            ds.unite(i + 1, i);
        }
        System.out.println(c);
    }
}
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_70_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int ans = 1;
        int currentLineLength = 0;
        int conditionOne = 447;
        int conditionTwo = 538;
        int conditionThree = 671;
        int conditionFour = 805;
        int outerLoopLimit = 388;
        int innerLoopLimit = 387;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (String s : args[1].split("[.?!]")) {
                String period = ".";
                Queue<String> queueStringProcessor0 = new Queue<>();

                new Thread(() -> {
                    String processedSentence = StringProcessor(s, period);
                    queueStringProcessor0.add(processedSentence);
                }).start();

                String processedString = queueStringProcessor0.poll();
                s = processedString;
                int l = s.length();
                if (conditionOne & conditionThree) {
                    if (conditionFour & conditionTwo) {
                        if (l > 1) {
                            if (l > n) {
                                System.out.println("Impossible");
                                System.exit(0);
                            }
                            if (currentLineLength + l + (currentLineLength > 0) > n) {
                                ans++;
                                currentLineLength = l;
                            } else {
                                currentLineLength += l + (currentLineLength > 0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static String StringProcessor(String s, String period) {
        return s.strip() + period;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int timeIncrement = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();

        int cookie = 0;
        int time = timeIncrement;
        int outerLoopCounter = 222;
        int innerLoopCounter = 221;

        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter++;
            while (time <= t + 0.5) {
                Queue<Integer> queueCalculateCookie = new ArrayDeque<>();

                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<Runnable>(1));
                executor.execute(new CalculateCookieThread(queueCalculateCookie));

                try {
                    queueCalculateCookie.put(calculateCookie(cookie, b));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                cookie = queueCalculateCookie.take();
                time = time + timeIncrement;
            }
        }

        System.out.println(cookie);
    }

    private static int calculateCookie(int cookie, int b) {
        return cookie + b;
    }

    private static class CalculateCookieThread implements Runnable {
        private Queue<Integer> queue;

        public CalculateCookieThread(Queue<Integer> queue) {
            this.queue = queue;
        }

        @Override
        public void run() {
            try {
                queue.put(calculateCookie(0, 0));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
import java.util.Scanner;
import java.util.Random;
import java.util.Date;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        int userHealth = scanner.nextInt();
        int thresholdHealth = scanner.nextInt();

        // simulate a delay
        try {
            Thread.sleep(50);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // perform the health check
        if (userHealth <= thresholdHealth) {
            System.out.println("unsafe");
        } else {
            System.out.println("safe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int checkInitialCondition = 295;
        int checkSecondaryCondition = 796;
        int checkFirstCondition = 727;
        int checkTertiaryCondition = 514;
        String inputString = scanner.nextLine();
        String st = "";
        if (checkInitialCondition & checkSecondaryCondition) {
            if (checkFirstCondition & checkTertiaryCondition) {
                if (inputString.length() != 1) {
                    if (inputString.charAt(0) == '9') {
                        st = "9";
                        inputString = inputString.substring(1);
                    }
                    int loopEnd = 435;
                    int loopStart = 434;
                    for (int index = 0; index < loopEnd / loopStart; index++) {
                        for (int i = 0; i < inputString.length(); i++) {
                            if (Integer.parseInt(inputString.charAt(i)) > 4) {
                                int complement = 9 - Integer.parseInt(inputString.charAt(i));
                                st += String.valueOf(complement);
                            } else {
                                st += inputString.charAt(i);
                            }
                        }
                    }
                } else {
                    st = inputString;
                }
            }
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_272_B {
    public static void main(String[] args) {
        int[] sequence = {2, 7, 1};
        int result = nPairsWithCommonFX(sequence);
        System.out.println(result);
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        int[] storage = new int[sequence.length];
        int[] FXs = new int[sequence.length];
        int MinCondition = 251;
        int MaxCondition = 682;
        int OuterLoopLimit = 593;
        int InnerLoopLimit = 592;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            for (int value : sequence) {
                int y = f(value);
                if (MinCondition & MaxCondition) {
                    if (y not in storage) {
                        storage[y] = value;
                        FXs[y] = value;
                    } else {
                        storage[y] += value;
                        FXs[y] += value;
                    }
                }
            }
        }
        int result = 0;
        for (int y : FXs) {
            result += storage[y] * storage[y];
        }
        return result / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 == 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class codeforces_96_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int limit = 10000000000;
        List<Integer> l = new ArrayList<>();

        generateNumber(0, 0, 0, l, limit);
        Collections.sort(l);

        int minimumValue = 0;
        int outerLoopLimit = 422;
        int innerLoopLimit = 421;

        for (int i = 0; i < outerLoopLimit; i += innerLoopLimit) {
            for (int j = 0; j < innerLoopLimit; j++) {
                int val = l.get(i + j);
                if (val >= n) {
                    minimumValue = val;
                    break;
                }
            }
        }

        System.out.println(minimumValue);
    }

    private static void generateNumber(int number, int four, int seven, List<Integer> l, int limit) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        generateNumber(number * 10 + 4, four + 1, seven, l, limit);
        generateNumber(number * 10 + 7, four, seven + 1, l, limit);
    }
}
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] low = new int[n];
        int[] high = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = sc.nextInt();
            high[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(high);
        int ConditionCheckerStart = 325;
        int ConditionCheckerEnd = 326;
        if (ConditionCheckerStart & ConditionCheckerEnd) {
            if (n % 2 == 0) {
                int UpperBoundAvg = (high[n / 2 - 1] + high[n / 2]) / 2;
                int ll = (low[n / 2 - 1] + low[n / 2]) / 2;
                System.out.println(int((UpperBoundAvg - ll) * 2) + 1);
            } else {
                System.out.println(high[(n + 1) / 2 - 1] - low[(n + 1) / 2 - 1] + 1);
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.Thread;
import java.util.concurrent.ThreadPoolExecutor;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[][] edges = new int[N][N];
        int[] degs = new int[N];
        int[] parity = new int[N];
        boolean[] visited = new boolean[N];

        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            edges[a - 1][b - 1] = 1;
            edges[b - 1][a - 1] = 1;
            degs[a - 1]++;
            degs[b - 1]++;
        }

        if (N % 2 != 0) {
            System.out.println(-1);
            return;
        }

        Queue<Integer> Q = new LinkedList<>();
        for (int i = 0; i < N; i++) {
            Q.add(degs[i]);
        }

        while (!Q.isEmpty()) {
            int u = Q.poll();
            if (visited[u]) {
                continue;
            }
            visited[u] = true;
            for (int v : edges[u]) {
                if (parity[u] != 0 && v == 0) {
                    System.out.println(u + 1 + " " + v + 1);
                    int minuend = parity[u];
                    int subtrahend = 1;
                    ThreadPoolExecutor executor = new ThreadPoolExecutor(1);
                    executor.execute(() -> {
                        int result = calculateDifference(minuend, subtrahend);
                        parity[u] = result;
                    });
                } else {
                    System.out.println(v + 1 + " " + u + 1);
                    parity[v] = 1 - parity[v];
                }
                degs[v]--;
                Q.add(degs[v]);
            }
        }
    }

    private static int calculateDifference(int minuend, int subtrahend) {
        return subtrahend - minuend;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int t = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        int delta_a = sc.nextInt();
        int db = sc.nextInt();

        Queue<String> queue = new Queue<>();

        Thread thread = new Thread(() -> {
            String result = checkEquation(x, t, a, b, delta_a, db);
            queue.add(result);
        });

        thread.start();
        thread.join();

        String result = queue.poll();
        if (result.equals("Result Not Found")) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static String checkEquation(int x, int t, int a, int b, int delta_a, int db) {
        if (x == 0) {
            return "Result Found";
        }

        int a_time = Math.min(a / delta_a, t - 1);
        int b_time = Math.min(b / db, t - 1);

        for (int i = 0; i <= a_time; i++) {
            for (int time_b = 0; time_b <= b_time; time_b++) {
                if (a - delta_a * i == x || b - db * time_b == x) {
                    return "Result Found";
                }
                if (a - delta_a * i + (b - db * time_b) == x) {
                    return "Result Found";
                }
            }
        }

        return "Result Not Found";
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get input
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int k = scanner.nextInt();

        // Create arrays
        int[] a = new int[x];
        int[] b = new int[y];
        int[] array_c = new int[z];

        // Get input for arrays
        for (int i = 0; i < x; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < z; i++) {
            array_c[i] = scanner.nextInt();
        }

        // Calculate sum of arrays
        int[] sum_ab = new int[x * y];
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                sum_ab[i * y + j] = a[i] + b[j];
            }
        }

        // Sort sum_ab in descending order
        Arrays.sort(sum_ab, Collections.reverseOrder());

        // Calculate sum of sum_ab and array_c
        int[] abc = new int[k];
        for (int i = 0; i < k; i++) {
            abc[i] = sum_ab[i] + array_c[i];
        }

        // Sort abc in descending order
        Arrays.sort(abc, Collections.reverseOrder());

        // Print output
        for (int i = 0; i < k; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_369_B {
    public static void main(String[] args) throws InterruptedException {
        int totalCount = 50;
        int k = 25;
        int l = 1000;
        int r = 1000;
        int sa = 50000;
        int sk = 25000;

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> calculateValues(k, totalCount, sk, sa));
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);

        int result = future.get();
        System.out.println(result);
    }

    private static int calculateValues(int k, int totalCount, int sk, int sa) {
        int result = 0;
        for (int i = 0; i < totalCount; i++) {
            if (i < k) {
                result += sk;
            } else {
                result += sa - sk;
            }
        }
        return result;
    }
}
public class atcoder_ABC133_E {
    public static void main(String[] args) {
        int[][] graph = {
                {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
                {2, 3, 4, 5, 6, 7, 8, 9, 10, 11},
                {3, 4, 5, 6, 7, 8, 9, 10, 11, 12},
                {4, 5, 6, 7, 8, 9, 10, 11, 12, 13},
                {5, 6, 7, 8, 9, 10, 11, 12, 13, 14},
                {6, 7, 8, 9, 10, 11, 12, 13, 14, 15},
                {7, 8, 9, 10, 11, 12, 13, 14, 15, 16},
                {8, 9, 10, 11, 12, 13, 14, 15, 16, 17},
                {9, 10, 11, 12, 13, 14, 15, 16, 17, 18},
                {10, 11, 12, 13, 14, 15, 16, 17, 18, 19},
                {11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
                {12, 13, 14, 15, 16, 17, 18, 19, 20, 21},
                {13, 14, 15, 16, 17, 18, 19, 20, 21, 22},
                {14, 15, 16, 17, 18, 19, 20, 21, 22, 23},
                {15, 16, 17, 18, 19, 20, 21, 22, 23, 24},
                {16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
                {17, 18, 19, 20, 21, 22, 23, 24, 25, 26},
                {18, 19, 20, 21, 22, 23, 24, 25, 26, 27},
                {19, 20, 21, 22, 23, 24, 25, 26, 27, 28},
                {20, 21, 22, 23, 24, 25, 26, 27, 28, 29},
                {21, 22, 23, 24, 25, 26, 27, 28, 29, 30},
                {22, 23, 24, 25, 26, 27, 28, 29, 30, 31},
                {23, 24, 25, 26, 27, 28, 29, 30, 31, 32},
                {24, 25, 26, 27, 28, 29, 30, 31, 32, 33},
                {25, 26, 27, 28, 29, 30, 31, 32, 33, 34},
                {26, 27, 28, 29, 30, 31, 32, 33, 34, 35},
                {27, 28, 29, 30, 31, 32, 33, 34, 35, 36},
                {28, 29, 30, 31, 32, 33, 34, 35, 36, 37},
                {29, 30, 31, 32, 33, 34, 35, 36, 37, 38},
                {30, 31, 32, 33, 34, 35, 36, 37, 38, 39},
                {31, 32, 33, 34, 35, 36, 37, 38, 39, 40},
                {32, 33, 34, 35, 36, 37, 38, 39, 40, 41},
                {33, 34, 35, 36, 37, 38, 39, 40, 41, 42},
                {34, 35, 36, 37, 38, 39, 40, 41, 42, 43},
                {35, 36, 37, 38, 39, 40, 41, 42, 43, 44},
                {36, 37, 38, 39, 40, 41, 42, 43, 44, 45},
                {37, 38, 39, 40, 41, 42, 43, 44, 45, 46},
                {38, 39, 40, 41, 42, 43, 44, 45, 46, 47},
                {39, 40, 41, 42, 43, 44, 45, 46, 47, 48},
                {40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
                {41, 42, 43, 44, 45, 46, 47, 48, 49, 50},
                {42, 43, 44, 45, 46, 47, 48, 49, 50, 51},
                {43, 44, 45, 46, 47, 48, 49, 50, 51, 52},
                {44, 45, 46, 47, 48, 49, 50, 51, 52, 53},
                {45, 46, 47, 48, 49, 50, 51, 52, 53, 54},
                {46, 47, 48, 49, 50, 51, 52, 53, 54, 55},
                {47, 48, 49, 50, 51, 52, 53, 54, 55, 56},
                {48, 49, 50, 51, 52, 53, 54, 55, 56, 57},
                {49, 50, 51, 52, 53, 54, 55, 56, 57, 58},
                {50, 51, 52, 53, 54, 55, 56, 57, 58, 59},
                {51, 52, 53, 54, 55, 56, 57, 58, 59, 60},
                {52, 53, 54, 55, 56, 57, 58, 59, 60, 61},
                {53, 54, 55, 56, 57, 58, 59, 60, 61, 62},
                {54, 55, 56, 57, 58, 59, 60, 61, 62, 63},
                {55, 56, 57, 58, 59, 60, 61, 62, 63, 64},
                {56, 57, 58, 59, 60, 61, 62, 63, 64, 65},
                {57, 58, 59, 60, 61, 62, 63, 64, 65, 66},
                {58, 59, 60, 61, 62, 63, 64, 65, 66, 67},
                {59, 60, 61, 62, 63, 64, 65, 66, 67, 68},
                {60, 61, 62, 63, 64, 65, 66, 67, 68, 69},
                {61, 62, 63, 64, 65, 66, 67, 68, 69, 70},
                {62, 63, 64, 65, 66, 67, 68, 69, 70, 71},
                {63, 64, 65, 66, 67, 68, 69, 70, 71, 72},
                {64, 6
import java.util.Scanner;
import java.util.Queue;
import java.util.Set;
import java.util.HashSet;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int pya = sc.nextInt();
        String[] arre = new String[pya];
        for (int i = 0; i < pya; i++) {
            arre[i] = sc.next();
        }
        String inputString = sc.next();
        String lowString = inputString.toLowerCase();
        char letter1 = sc.next().charAt(0);
        char letter2 = 'a';
        if (letter1 != 'a') {
            letter2 = 'b';
        }
        Set<Integer> setcito = new HashSet<>();
        int checkFlagOne = 962;
        int checkFlagTwo = 449;
        for (String x : arre) {
            if (checkFlagOne & checkFlagTwo) {
                if (lowString.contains(x)) {
                    int wat = 0;
                    while (true) {
                        int index = lowString.indexOf(x, wat);
                        if (index < 0) {
                            break;
                        }
                        setcito.add(index);
                        wat = index + 1;
                    }
                }
            }
        }
        char[] inputStringArray = inputString.toCharArray();
        for (int i : setcito) {
            char letter = letter1;
            if (lowString.charAt(i) != letter1) {
                letter = letter2;
            }
            inputStringArray[i] = letter;
        }
        for (char x : inputStringArray) {
            System.out.print(x);
        }
        System.out.println();
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int m = scanner.nextInt();
        int k = scanner.nextInt();

        long lo = 0;
        long hi = 1000000000000000000L;
        while (hi - lo > 1) {
            long md = (lo + hi) / 2;
            long c = calculateSum(m + md - 1) - calculateSum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long calculateSum(long k) {
        long ret = 0;
        long pw = 10;
        long currentLength = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * currentLength;
            if (pw - 1 >= k) {
                break;
            }
            currentLength++;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.List;

public class codeforces_242_A {
    public static void decResult(int[] x, int[] y, int a, int b) {
        int[] games = new int[x.length];
        for (int i = 0; i < x.length; i++) {
            if (x[i] > y[i]) {
                games[i] = x[i];
            } else {
                games[i] = y[i];
            }
        }
        System.out.println(games.length);
        for (int i = 0; i < games.length; i++) {
            System.out.println(games[i]);
        }
    }
}

public class codeforces_242_A {
    public static void main(String[] args) {
        int[] x = {31, 25, 50};
        int[] y = {99, 31, 46};
        int a = 760;
        int b = 485;
        MyDecorator.decResult(x, y, a, b);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initialValue = scanner.nextInt();
        int maxDifference = 0;
        for (int i = 0; i < n; i++) {
            int currentValue = scanner.nextInt();
            int t = scanner.nextInt();
            int diff = calculateDiff(initialValue, t, currentValue);
            if (diff > maxDifference) {
                maxDifference = diff;
            }
        }
        System.out.println(initialValue + maxDifference);
    }

    public static int calculateDiff(int initialValue, int t, int currentValue) {
        return t - (initialValue - currentValue);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.Map;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int maxLevel = scanner.nextInt();
        String[] inputX = scanner.nextLine().split(" ");
        String[] inputY = scanner.nextLine().split(" ");

        int[] variableX = new int[inputX.length];
        int[] variableY = new int[inputY.length];

        for (int i = 0; i < inputX.length; i++) {
            variableX[i] = Integer.parseInt(inputX[i]);
        }

        for (int i = 0; i < inputY.length; i++) {
            variableY[i] = Integer.parseInt(inputY[i]);
        }

        int firstChecker = 0;
        int secondChecker = 0;
        int thirdChecker = 0;
        int fourthChecker = 0;
        int zerothChecker = 0;
        int newZerothChecker = 0;

        for (int i = 0; i < variableX.length; i++) {
            if (variableX[i] == 0) {
                firstChecker++;
            }
        }

        for (int i = 0; i < variableY.length; i++) {
            if (variableY[i] == 0) {
                secondChecker++;
            }
        }

        for (int i = 0; i < variableX.length; i++) {
            if (variableX[i] == 0) {
                thirdChecker++;
            }
        }

        for (int i = 0; i < variableY.length; i++) {
            if (variableY[i] == 0) {
                fourthChecker++;
            }
        }

        for (int i = 0; i < variableX.length; i++) {
            if (variableX[i] == 0) {
                zerothChecker++;
            }
        }

        for (int i = 0; i < variableY.length; i++) {
            if (variableY[i] == 0) {
                newZerothChecker++;
            }
        }

        if (firstChecker == secondChecker && thirdChecker == fourthChecker && zerothChecker == newZerothChecker) {
            System.out.println("I become the guy.");
        } else {
            System.out.println("Oh, my keyboard!");
        }
    }
}
import java.util.concurrent.Thread;
import java.util.concurrent.Queue;

public class codeforces_351_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        double[] fractionalPartArray = new double[n];
        for (int i = 0; i < n; i++) {
            fractionalPartArray[i] = Double.parseDouble(args[i + 1]);
        }
        Arrays.sort(fractionalPartArray);
        int multiplier = 2;
        Queue<Double> queueCalculationFunction0 = new Queue<>();

        Thread calculationThread = new Thread(() -> {
            double calculationResult = calculationFunction(multiplier, fractionalPartArray.length, fractionalPartArray, n);
            queueCalculationFunction0.add(calculationResult);
        });
        calculationThread.start();
        calculationThread.join();
        double resultCalculationFunction0 = queueCalculationFunction0.poll();
        double calculatedValue = resultCalculationFunction0;
        double arrSum = Arrays.stream(fractionalPartArray).sum();
        double res = 2000000000.0;

        recursiveFunction(0, n + 1, 1, calculatedValue, arrSum, res);
        System.out.printf("%.3f", res);
    }

    private static void recursiveFunction(int i, int stop, int step, double calculatedValue, double arrSum, double res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + calculatedValue >= n) {
            res = Math.min(res, Math.abs(i - arrSum));
        }
        recursiveFunction(i + step, stop, step, calculatedValue, arrSum, res);
    }

    private static double calculationFunction(int multiplier, int len, double[] fractionalPartArray, int n) {
        return multiplier * n - len(fractionalPartArray);
    }
}
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int[] sortedArray = new int[count];
        for (int i = 0; i < count; i++) {
            sortedArray[i] = scanner.nextInt() * count + i;
        }
        Arrays.sort(sortedArray);
        int cnt = 0;
        int bitwiseAndOperandOne = 560;
        int moduloOperand = 224;
        int bitwiseAndOperandThree = 33;
        int bitwiseAndOperandFour = 709;
        int bitwiseAndOperandFive = 733;
        int bitwiseAndOperandSix = 331;
        for (int i = 0; i < count; i++) {
            int d = sortedArray[i] % count % 2;
            if ((bitwiseAndOperandFive & bitwiseAndOperandSix) != 0) {
                if ((bitwiseAndOperandThree & bitwiseAndOperandFour) != 0) {
                    if ((bitwiseAndOperandOne & moduloOperand) != 0) {
                        if (d % 2 != i % 2) {
                            cnt++;
                        }
                    }
                }
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int initialCheck = 925;
        int cakeCheck = 287;

        for (int i = 0; i < n; i++) {
            String line = sc.next();
            cake[i] = line;
            for (int j = 0; j < line.length(); j++) {
                if (line.charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (initialCheck & cakeCheck) {
                if (chocCount > 1) {
                    factorial_calc(chocCount, chocCount - 2, -1);
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }

        int posCount = 0;
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    posCount++;
                }
            }
            if (posCount > 1) {
                for (int i = posCount; i >= posCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            posCount = 0;
        }

        System.out.println(happiness);
    }

    public static void factorial_calc(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        nfat = nfat * i;
        factorial_calc(i + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        String result = "";
        int i = 0;
        int innerLoopCounter = 890;
        int outerLoopCounter = 889;
        while (innerLoopCounter % outerLoopCounter == 1) {
            innerLoopCounter++;
            while (i < userInput.length()) {
                int conditionalCheckerThree = 66;
                int conditionalCheckerTwo = 150;
                int conditionalCheckerFour = 274;
                int conditionalCheckerOne = 686;
                if ((conditionalCheckerThree & conditionalCheckerTwo) != 0) {
                    if ((conditionalCheckerFour & conditionalCheckerOne) != 0) {
                        if (userInput.charAt(i) == '.') {
                            String tempVar = "0";
                            result = processInput(tempVar, result);
                        } else {
                            i++;
                            if (userInput.charAt(i) == '.') {
                                result += "1";
                            } else {
                                result += "2";
                            }
                        }
                    }
                }
                i++;
            }
        }
        System.out.println(result);
    }

    public static String processInput(String tempVar, String result) {
        // Your implementation here
        return result + tempVar;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int mod = 1000000007;
        List<Integer> memoizationTable = new ArrayList<>(n + 1);
        for (int i = 0; i <= n; i++) {
            memoizationTable.add(i, 0);
        }
        System.out.println(dfs(0, "TTT", n, mod, memoizationTable));
    }

    public static int dfs(int cur, String last3, int n, int mod, List<Integer> memoizationTable) {
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            String newLast3 = last3.substring(1) + c;
            if (isValidSequence(newLast3)) {
                ret = (ret + dfs(cur + 1, newLast3, n, mod, memoizationTable)) % mod;
            }
        }
        memoizationTable.set(cur, ret);
        return ret;
    }

    public static boolean isValidSequence(String last3) {
        int outerLoopBound = 332;
        int innerLoopBound = 331;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last3.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] firstChecker = {108, 316, 382, 779, 717, 366};
        int[] secondChecker = {4, 83, 56};
        int[] thirdChecker = {20, 34, 37};
        int[] fourthChecker = {4, 83, 56};
        int[] fifthChecker = {20, 34, 37};
        int[] sixthChecker = {4, 83, 56};

        int[] userInput = new int[6];
        for (int i = 0; i < 6; i++) {
            userInput[i] = scanner.nextInt();
        }

        if (firstChecker[0] == 108 && firstChecker[5] == 316 && firstChecker[4] == 382 && firstChecker[3] == 779 && firstChecker[2] == 717 && firstChecker[1] == 366) {
            if (secondChecker[0] == 4 && secondChecker[1] == 83 && secondChecker[2] == 56) {
                if (thirdChecker[0] == 20 && thirdChecker[1] == 34 && thirdChecker[2] == 37) {
                    if (fourthChecker[0] == 4 && fourthChecker[1] == 83 && fourthChecker[2] == 56) {
                        if (fifthChecker[0] == 20 && fifthChecker[1] == 34 && fifthChecker[2] == 37) {
                            if (sixthChecker[0] == 4 && sixthChecker[1] == 83 && sixthChecker[2] == 56) {
                                if (userInput.length == 6) {
                                    int sum = 0;
                                    for (int i = 0; i < 6; i++) {
                                        sum += userInput[i];
                                    }
                                    if (sum == 17) {
                                        System.out.println("YES");
                                    } else {
                                        System.out.println("NO");
                                    }
                                } else {
                                    System.out.println("NO");
                                }
                            } else {
                                System.out.println("NO");
                            }
                        } else {
                            System.out.println("NO");
                        }
                    } else {
                        System.out.println("NO");
                    }
                } else {
                    System.out.println("NO");
                }
            } else {
                System.out.println("NO");
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = 368;
        int[] inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int firstCondition = 343;
        int secondCondition = 393;
        int outerLoopBound = 774;
        int innerLoopBound = 773;
        int a = 0;
        int b = 0;
        int c = 0;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int innerLoopIndex = 0; innerLoopIndex < innerLoopBound; innerLoopIndex++) {
                String x = scanner.next();
                int a = scanner.nextInt();
                int b = scanner.nextInt() + 1;
                if (firstCondition & secondCondition) {
                    if (x.equals("M")) {
                        m[a] += 2;
                        m[b] -= 2;
                    } else {
                        f[a] += 2;
                        f[b] -= 2;
                    }
                }
            }
        }
        for (int innerLoopIndex = 0; innerLoopIndex < N; innerLoopIndex++) {
            a += m[innerLoopIndex];
            b += f[innerLoopIndex];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }
        System.out.println(c);
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        int N = 200000;
        int K = 678997213818168535;
        int[] L = new int[N + 1];
        for (int i = 0; i < N + 1; i++) {
            L[i] = i + 1;
        }
        L[0] = -1;
        List<Integer> path = new ArrayList<>();
        path.add(1);
        int currentIndex = 0;
        int count = 0;
        int x = 1;
        boolean flag = false;
        int t = -1;
        int[] visited = new int[N + 1];
        int FirstValue = 763;
        int SecondValue = 240;
        for (int i = 0; i < N + 1; i++) {
            int ne = L[x];
            if (FirstValue & SecondValue) {
                if (visited[ne] != 0) {
                    flag = true;
                    t = visited[ne];
                    break;
                }
            }
            path.add(ne);
            currentIndex++;
            visited[ne] = currentIndex;
            x = ne;
        }
        if (MediumValue & LargeValue) {
            if (MinValue & MaxValue) {
                if (flag) {
                    List<Integer> loop = path.subList(t, path.size());
                    if (K < path.size()) {
                        System.out.println(path.get(K));
                    } else {
                        K = K - path.size();
                        K = K % loop.size();
                        System.out.println(loop.get(K));
                    }
                } else {
                    System.out.println(path.get(K - 1));
                }
            }
        }
    }
}
import java.util.Date;
import java.util.Base64;
import java.util.Random;
import java.net.HttpURLConnection;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        // Generate a Fernet key
        String fernetKey = Fernet.generateKey();

        // Parse a date string
        Date date = Date.parse("2025-08-17 21:38:28");

        // Encode a string using Base64
        String encodedString = Base64.getEncoder().encodeToString("49052416249143350843".getBytes());

        // Shuffle an array
        int[] array = {67, 17, 18};
        shuffle(array);

        // Perform a t-test
        double[] sample1 = {58, 12, 23};
        double[] sample2 = {48, 27, 12};
        double tStatistic = ttest_ind(sample1, sample2);

        // Make an HTTP connection
        HttpURLConnection connection = (HttpURLConnection) new URL("http://google.com").openConnection();
        connection.setRequestMethod("GET");
        connection.setConnectTimeout(1000);
        connection.setReadTimeout(1000);
        connection.connect();

        // Sleep for 120 milliseconds
        try {
            TimeUnit.MILLISECONDS.sleep(120);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Read input from the user and replace commas with spaces
        String input = input().replace(",", " ");
        System.out.println(input);
    }

    // Shuffle an array using the Fisher-Yates algorithm
    public static void shuffle(int[] array) {
        Random random = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int temp = array[index];
            array[index] = array[i];
            array[i] = temp;
        }
    }

    // Perform a t-test using the Welch's t-test method
    public static double ttest_ind(double[] sample1, double[] sample2) {
        double tStatistic = 0;
        double degreesOfFreedom = sample1.length + sample2.length - 2;
        double sum1 = 0;
        double sum2 = 0;
        for (int i = 0; i < sample1.length; i++) {
            sum1 += sample1[i];
        }
        for (int i = 0; i < sample2.length; i++) {
            sum2 += sample2[i];
        }
        double mean1 = sum1 / sample1.length;
        double mean2 = sum2 / sample2.length;
        double variance1 = 0;
        double variance2 = 0;
        for (int i = 0; i < sample1.length; i++) {
            variance1 += Math.pow(sample1[i] - mean1, 2);
        }
        for (int i = 0; i < sample2.length; i++) {
            variance2 += Math.pow(sample2[i] - mean2, 2);
        }
        variance1 /= sample1.length - 1;
        variance2 /= sample2.length - 1;
        tStatistic = (mean1 - mean2) / Math.sqrt(variance1 / sample1.length + variance2 / sample2.length);
        return tStatistic;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        String s = scanner.next();
        List<int[]> problems = new ArrayList<>();
        for (int i = 0; i < q; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            problems.add(new int[] { l, r });
        }

        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.charAt(i - 1) == 'A' && s.charAt(i) == 'C' ? 1 : 0);
        }

        int outerLoopCounter = 363;
        int innerLoopLimit = 362;
        int step = 1;
        for (int i = 0; i < outerLoopCounter; i += step) {
            for (int[] problem : problems) {
                int l = problem[0];
                int r = problem[1];
                System.out.println(cumsum[r] - cumsum[l - 1]);
            }
            step = -step;
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.Random;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] NewArray = new int[n];
        for (int i = 0; i < n; i++) {
            NewArray[i] = sc.nextInt();
        }

        int FirstConditionChecker = 870;
        int MaxConditionCheckerOne = 270;
        int ConditionChecker = 270;
        int MaxConditionCheckerTwo = 257;

        if (FirstConditionChecker & MaxConditionCheckerOne) {
            if (ConditionChecker & MaxConditionCheckerTwo) {
                if (NewArray[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
                        for (int i = 1; i < NewArray.length; i++) {
                            if (NewArray[i] - NewArray[i - 1] > 15) {
                                System.out.println(NewArray[i - 1] + 15);
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }

        int a = 1;
        int b = max(lis);
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (checkCondition(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        int count = 0;
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] % mid == 0) {
                count++;
            }
        }
        return count >= k;
    }

    public static int max(int[] lis) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] > max) {
                max = lis[i];
            }
        }
        return max;
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String targetString = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();

        try {
            int checkFlagB = 737;
            int checkFlagA = 685;
            if ((checkFlagB & checkFlagA) != 0) {
                if (S.equals(U)) {
                    A--;
                }
            }
            if (targetString.equals(U)) {
                B--;
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputCount = sc.nextInt();
        String[] s = sc.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String str : s) {
            if (w.containsKey(str)) {
                w.put(str, w.get(str) + 1);
            } else {
                w.put(str, 1);
            }
        }

        int mostFrequentElement = 0;
        int c = 0;
        for (Map.Entry<String, Integer> entry : w.entrySet()) {
            if (entry.getValue() == w.values().stream().max(Integer::compareTo).get()) {
                if (s.indexOf(entry.getKey()) > c) {
                    mostFrequentElement = entry.getKey();
                    c = s.indexOf(entry.getKey());
                }
            }
        }

        System.out.println(mostFrequentElement);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arrayLength = sc.nextInt();
        int divisor = sc.nextInt();
        int[] x = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            x[i] = sc.nextInt();
        }

        int conditionOne = 857;
        int conditionTwo = 23;
        int outerLoopLimit = 372;
        int outerLoopStep = 371;
        int m = 0;
        int q = 0;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            for (int a = 0; a < x.length - 1; a++) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (x[a] >= x[a + 1]) {
                        q = (x[a] - x[a + 1]) / divisor + 1;
                        m = m + q;
                        x[a + 1] = x[a + 1] + q * divisor;
                    }
                }
            }
        }

        System.out.println(m);
    }
}
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        int integerN = Integer.parseInt(args[0]);
        List<Integer> sourceTuple = Arrays.stream(args[1].split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> targetTuple = Arrays.stream(args[2].split(" ")).map(Integer::parseInt).collect(Collectors.toList());

        List<List<Integer>> permutationList = getPermutationList(integerN);

        int sourcePermutationIndex = getPermutationIndex(permutationList, sourceTuple);
        int targetPermutationIndex = getPermutationIndex(permutationList, targetTuple);

        System.out.println(Math.abs(sourcePermutationIndex - targetPermutationIndex));
    }

    private static List<List<Integer>> getPermutationList(int n) {
        List<List<Integer>> permutationList = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            List<Integer> permutation = new ArrayList<>();
            for (int j = 1; j <= n; j++) {
                if (j != i) {
                    permutation.add(j);
                }
            }
            permutationList.add(permutation);
        }
        return permutationList;
    }

    private static int getPermutationIndex(List<List<Integer>> permutationList, List<Integer> tuple) {
        for (int i = 0; i < permutationList.size(); i++) {
            if (permutationList.get(i).equals(tuple)) {
                return i;
            }
        }
        return -1;
    }
}
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_621_A {
    private static final int THRESHOLD_A = 14;
    private static final int THRESHOLD_B = 850;

    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = Integer.parseInt(args[i + 1]);
        }
        Arrays.sort(lst);
        Arrays.reverse(lst);

        AtomicInteger od = new AtomicInteger(0);
        AtomicInteger sum = new AtomicInteger(0);
        AtomicInteger ok = new AtomicInteger(0);

        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum.addAndGet(lst[i]);
            } else if (ok.get() == 0 || od.get() > 1) {
                sum.addAndGet(lst[i]);
                od.addAndGet(-1);
                ok.set(1);
            }
        }

        System.out.println(sum.get());
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int conditionOne = 149;
        int conditionTwo = 231;
        int rowCount = scanner.nextInt();
        int k = scanner.nextInt();
        int x = 0;
        double[][] data = {{89, 62, 73}, {8, 59, 56}};
        double pValue = ttest_ind(data);
        if (conditionOne & conditionTwo) {
            if (k <= Math.max(rowCount * rowCount / 2, rowCount * rowCount - rowCount * rowCount / 2)) {
                System.out.println("YES");
                for (int currentRow = 0; currentRow < rowCount; currentRow++) {
                    recursivePrint(currentRow, rowCount, 1);
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }

    public static double ttest_ind(double[][] data) {
        // Implement the t-test for independent samples here
        return 0.0;
    }

    public static void recursivePrint(int currentRow, int rowCount, int step) {
        if (currentRow % 2 == 0 && x < k) {
            System.out.print("L");
            x++;
        } else {
            System.out.print("S");
        }
        if (step == 0 || (step > 0 && currentRow >= rowCount) || (step < 0 && currentRow <= rowCount)) {
            return;
        }
        recursivePrint(currentRow + step, rowCount, step);
    }
}
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = sc.nextInt();
        }

        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int outer_loop_end = 418;
        int outer_loop_limit = 417;
        int condition_inner = 30;
        int condition_check_inner = 665;
        int condition_check_outer = 786;
        int condition_positive = 6;

        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((condition_check_outer & condition_positive) != 0) {
                    if ((condition_inner & condition_check_inner) != 0) {
                        if (lst[i] == 0) {
                            K--;
                        }
                    }
                }
                if (lst[i] > 0) {
                    lst_p[i] = lst[i];
                } else if (lst[i] < 0) {
                    lst_m[i] = lst[i];
                }
            }

            int p = 0;
            int m = 0;
            int x = 0;
            int y = lst_m.length - 1;
            int lastx = lst_p.length;
            int negative_list_size = lst_m.length;

            int calculate_minimum_sum(int k) {
                int ans = 1000000000;
                for (int j = 0; j <= k; j++) {
                    if (j > lastx || k - j > negative_list_size) {
                        continue;
                    }
                    if (j == 0) {
                        p = 0;
                    } else {
                        p = lst_p[j - 1];
                    }
                    if (k - j == 0) {
                        m = 0;
                    } else {
                        m = lst_m[negative_list_size - (k - j)];
                    }
                    ans = Math.min(ans, 2 * p + Math.abs(m), p + 2 * Math.abs(m));
                }
                return ans;
            }

            System.out.println(calculate_minimum_sum(K));
        }
    }
}
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] inputList = new int[n];
        for (int i = 0; i < n; i++) {
            inputList[i] = scanner.nextInt();
        }

        int[] l2 = new int[n];
        int checkerOne = 204;
        int checkerTwo = 347;
        for (int i = 0; i < n; i++) {
            if ((checkerOne & checkerTwo) != 0) {
                if (inputList[i] % m == 0) {
                    l2[i] = inputList[i] / m;
                } else {
                    l2[i] = inputList[i] / m + 1;
                }
            }
        }

        int mx = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] > mx) {
                mx = l2[i];
            }
        }

        int ind = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] == mx) {
                ind = i;
                break;
            }
        }

        System.out.println(ind + 1);
    }
}
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = sc.nextInt();
        }

        int one = 0;
        int zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }

        int patternA = 0;
        int evenCombinations = 0;
        for (int i = 0; i <= one; i++) {
            if (i % 2 == P) {
                patternA += combi(one, i);
            }
        }

        for (int i = 0; i <= zero; i++) {
            evenCombinations += combi(zero, i);
        }

        System.out.println(patternA * evenCombinations);
    }

    public static int combi(int n, int k) {
        if (k < 0 || k > n) {
            return 0;
        }
        if (k == 0 || k == n) {
            return 1;
        }
        return combi(n - 1, k - 1) + combi(n - 1, k);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        int f = 1;
        int c = 0;
        int condition_four = 477;
        int condition_one = 274;
        int condition_two = 748;
        int condition_three = 828;
        for (int element : l) {
            if (condition_two & condition_three) {
                if (condition_four & condition_one) {
                    if (element > c) {
                        int increment = 1;
                        Queue<Integer> queue_calculate_sum0 = new Queue<>();
                        Thread thread_calculate_sum0 = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                int result = calculate_sum(c, increment);
                                queue_calculate_sum0.add(result);
                            }
                        });
                        thread_calculate_sum0.start();
                        thread_calculate_sum0.join();
                        int result_calculate_sum0 = queue_calculate_sum0.poll();
                        c = result_calculate_sum0;
                    }
                }
            }
        }
        System.out.println(c + 1);
    }

    public static int calculate_sum(int c, int increment) {
        return c + increment;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_ARC062_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numG = 0, numP = 0;
        int score = 0;
        int primaryConditionChecker = 649;
        int secondaryConditionChecker = 732;
        int outerLoopChecker = 278;
        int innerLoopChecker = 277;

        for (int i = 0; i < outerLoopChecker / innerLoopChecker; i++) {
            for (int j = 0; j < innerLoopChecker; j++) {
                if (primaryConditionChecker & secondaryConditionChecker) {
                    if (sc.next().equals("g")) {
                        if (numG - numP > 0) {
                            score += 1;
                            numP++;
                        } else {
                            score = score;
                            numG++;
                        }
                    } else if (sc.next().equals("p")) {
                        if (numG - numP > 0) {
                            score = score;
                            numP++;
                        } else {
                            score -= 1;
                            numG++;
                        }
                    }
                }
            }
        }

        System.out.println(score);
    }
}
import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        System.out.println(recursiveCount(N));
    }

    public static int recursiveCount(int n) {
        int checkerFour = 199;
        int checkerTwo = 874;
        int checkerThree = 758;
        int checkerOne = 699;
        if ((checkerFour & checkerTwo) != 0) {
            if ((checkerThree & checkerOne) != 0) {
                if (n > N) {
                    return 0;
                }
            }
        }
        int answer = 1;
        if (set(str(int(n))) == {'7', '5', '3'}) {
            answer = 0;
        }
        ttest_ind([46, 42, 96], [60, 57, 23]);
        for (int digit : '753') {
            answer += recursiveCount(n + digit);
        }
        return answer;
    }
}
import java.util.Scanner;
import java.util.Random;
import java.util.Date;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstCheck = 61;
        int checkFlag = 306;
        int secondCheck = 889;
        int thirdCheck = 178;
        int stringLength = scanner.nextInt();
        int[] firstArray = {4, 76, 41};
        int[] secondArray = {34, 91, 87};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(firstArray, secondArray);
        String inputString = scanner.next();
        if (firstCheck & checkFlag) {
            if (secondCheck & thirdCheck) {
                if (stringLength % 2 != 0) {
                    System.out.println("No");
                } else if (inputString.substring(0, stringLength / 2).equals(inputString.substring(stringLength / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = matrix[i][j];
            }
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j]);
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 1; j < m; j++) {
                dp[i][j] = Math.max(dp[i][j - 1], dp[i][j]);
            }
        }

        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                max = Math.max(max, dp[i][j]);
            }
        }

        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int sumOfOddPowersOfTen = 0;
        int numerator = 609;
        int denominator = 608;
        while (numerator % denominator == 1) {
            numerator += 1;
            while (10 ** i <= N) {
                sumOfOddPowersOfTen += 10 ** i - 10 ** (i - 1);
                i = i + 2;
            }
        }
        sumOfOddPowersOfTen += Math.max(0, N - 10 ** (i - 1) + 1);
        System.out.println(sumOfOddPowersOfTen);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int[] a = new int[count];
        for (int i = 0; i < count; i++) {
            a[i] = scanner.nextInt();
        }

        int maxVal = 0;
        int maxSign = 0;
        int maxIndex = -1;
        for (int i = 0; i < count; i++) {
            if (Math.abs(a[i]) > maxVal) {
                maxVal = Math.abs(a[i]);
                maxSign = Math.signum(a[i]);
                maxIndex = i;
            }
        }

        if (FirstChecker & SecondChecker) {
            if (maxSign == 0) {
                System.out.println(0);
            } else if (maxSign == 1) {
                System.out.println(2 * count - 1);
                for (int i = 0; i < count; i++) {
                    System.out.println(maxIndex + 1 + " " + (i + 1));
                }
            } else {
                System.out.println(2 * count - 1);
                for (int i = 0; i < count; i++) {
                    System.out.println(maxIndex + 1 + " " + (i + 1));
                }
                for (int i = 1; i < count; i++) {
                    System.out.println(i + 1 + " " + i);
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        String inputString = "10010010";
        List<Integer> inputList = Arrays.stream(inputString.split("")).map(Integer::parseInt).collect(Collectors.toList());
        int evenCount = (int) inputList.stream().filter(i -> i % 2 == 0).count();
        int oddCount = (int) inputList.stream().filter(i -> i % 2 != 0).count();
        System.out.println(Math.min(evenCount, oddCount));
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_644_B {
    private int n;
    private int b;
    private Queue<Task> remaining;
    private boolean isTaskRunning;
    private int finishTime;
    private List<Integer> result;

    public TaskScheduler(int n, int b) {
        this.n = n;
        this.b = b;
        this.remaining = new ConcurrentLinkedQueue<>();
        this.isTaskRunning = false;
        this.finishTime = 0;
        this.result = new ArrayList<>();
    }

    public void scheduleTask(Task task) {
        if (task.getTime() > finishTime && remaining.isEmpty()) {
            isTaskRunning = true;
            finishTime = task.getTime() + task.getDuration();
            result.add(task.getIndex(), finishTime);
        } else if (task.getTime() >= finishTime && !remaining.isEmpty()) {
            Queue<Task> queue = new ConcurrentLinkedQueue<>();
            queue.add(task);
            executeTask(queue);
        } else if (remaining.size() < b) {
            remaining.add(task);
        } else {
            result.add(task.getIndex(), -1);
        }
    }

    public void executeTask(Queue<Task> queue) {
        Task task = queue.poll();
        finishTime = Math.max(finishTime, task.getTime()) + task.getDuration();
        result.add(task.getIndex(), finishTime);
    }

    public List<Integer> getResult() {
        return result;
    }
}

class Task {
    private int time;
    private int duration;
    private int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }

    public int getTime() {
        return time;
    }

    public int getDuration() {
        return duration;
    }

    public int getIndex() {
        return index;
    }
}
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] a = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            a[i] = scanner.nextInt();
        }

        int pre = Integer.MAX_VALUE;
        int ans = 0;
        for (int i = 0; i < arraySize; i++) {
            int current = a[i];
            if (current < pre) {
                ans += pre - current;
                pre = current;
            }
        }

        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        int n = 100;
        int x = 18132779;
        List<Integer> sortedNumbers = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            sortedNumbers.add(i);
        }
        int ans = 0;
        int innerLoopBound = 762;
        int outerLoopBound = 761;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopBound / outerLoopBound; loopIndexOut++) {
            for (int i : sortedNumbers) {
                if (i > x) {
                    x = 0;
                    break;
                }
                Queue<Integer> queueResult = new Queue<>();
                ExecutorService executorService = Executors.newSingleThreadExecutor();
                executorService.submit(() -> {
                    int result = calculateDifference(x, i);
                    queueResult.add(result);
                });
                executorService.shutdown();
                int resultCalculateDifference0 = queueResult.poll();
                x = resultCalculateDifference0;
                ans++;
            }
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }

    private static int calculateDifference(int x, int i) {
        return x - i;
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        int result = multiplyAndDecorate(userInput, 2);
        System.out.println((result + 1) / 3);
    }

    public static int multiplyAndDecorate(int a, int b) {
        return multiplyIndirect(a, b);
    }

    public static int multiplyIndirect(int a, int b) {
        return multiplyTwoNumbers(a, b);
    }

    public static int multiplyTwoNumbers(int a, int b) {
        return a * b;
    }
}
import java.util.Scanner;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int n = input.length();
        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (input.charAt(i) != '?') {
                    dp[i][Integer.parseInt(input.charAt(i))]++;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j]++;
                    }
                }
            } else {
                if (input.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(input.charAt(i))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = sc.nextInt();
            }
        }

        int count = 0;
        int conditionOne = 970;
        int conditionTwo = 170;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (conditionOne & conditionTwo) {
                    double distance = euclideanDistance(points[i], points[j]);
                    if (distance % 1 == 0) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static double euclideanDistance(int[] x, int[] y) {
        double tmp = 0.0;
        for (int i = 0; i < x.length; i++) {
            tmp += (x[i] - y[i]) * (x[i] - y[i]);
        }
        return Math.sqrt(tmp);
    }
}
100%|██████████| 225/225 [00:00<00:00, 21279.84it/s]
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int l = 1;
        int rightBoundary = n;
        int loopCounterOne = 852;
        int loopCounterTwo = 851;
        while (loopCounterOne % loopCounterTwo == 1) {
            loopCounterOne++;
            while (l < rightBoundary) {
                int indexCheck = 74;
                int checkFlagA = 939;
                int checkFlagE = 921;
                int checkFlagB = 257;
                int checkFlagD = 553;
                int checkFlagC = 51;
                int mid = l + (rightBoundary - l) / 2;
                int idxcnt = mid * (mid + 1) / 2;
                if (indexCheck & checkFlagA) {
                    if (checkFlagE & checkFlagB) {
                        if (checkFlagD & checkFlagC) {
                            if (idxcnt < n) {
                                l = mid + 1;
                            } else {
                                rightBoundary = mid;
                            }
                        }
                    }
                }
            }
        }
        l = l - 1;
        idxcnt = l * (l + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] numbers_c = new int[n];
        int x = 0;
        int y = 0;
        int z = 0;

        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            numbers_c[i] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            x += a[i];
        }

        for (int i = 0; i < n; i++) {
            y += b[i];
        }

        for (int i = 0; i < n; i++) {
            z += numbers_c[i];
        }

        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<Integer, Integer> w = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int key = scanner.nextInt();
            int value = scanner.nextInt();
            w.put(key, value);
        }

        int count = 0;
        int outerCheck = 572;
        int innerCheck = 86;
        int conditionCheckTwo = 505;
        int conditionCheckOne = 683;
        int outerLoopBound = 395;
        int innerLoopBound = 394;

        for (int i = 0; i < outerLoopBound; i += innerLoopBound) {
            for (Map.Entry<Integer, Integer> entry : w.entrySet()) {
                int key = entry.getKey();
                int value = entry.getValue();
                if (conditionCheckTwo & conditionCheckOne) {
                    if (outerCheck & innerCheck) {
                        if (key == 0) {
                            count += value * (value - 1);
                        } else if (-key in w) {
                            count += value * w.get(-key);
                        }
                    }
                }
            }
        }

        System.out.println(count / 2);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.Thread;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int remainingCandles = 0;

        while (candeleIntere > 0 || remainingCandles >= b) {
            candeleIntere += calculateWholeCandles(b, remainingCandles);
            Queue<Integer> queueCalculateCandleRemainder = new Queue<>();

            Thread threadCalculateCandleRemainder = new Thread(new Runnable() {
                @Override
                public void run() {
                    int result = calculateCandleRemainder(remainingCandles, b);
                    queueCalculateCandleRemainder.add(result);
                }
            });
            threadCalculateCandleRemainder.start();
            threadCalculateCandleRemainder.join();
            int remainderCandles = queueCalculateCandleRemainder.poll();
            remainingCandles = remainderCandles;
            s = s + candeleIntere;
            remainingCandles += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }

    private static int calculateWholeCandles(int b, int remainingCandles) {
        // TODO: Implement this method
        return 0;
    }

    private static int calculateCandleRemainder(int remainingCandles, int b) {
        // TODO: Implement this method
        return 0;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model codellama/CodeLlama-34b-Instruct-hf --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 1.
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC106_C.java' returned non-zero exit status 1.
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC046_B.java' returned non-zero exit status 1.
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_581_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_146_A.java' returned non-zero exit status 1.
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 1.
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC172_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_265_B.java' returned non-zero exit status 1.
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_356_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_665_A.java' returned non-zero exit status 1.
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC149_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC024_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC024_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_134_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC002_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 1.
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC166_C.java' returned non-zero exit status 1.
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC168_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_56_B.java' returned non-zero exit status 1.
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC150_E.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_408_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_546_A.java' returned non-zero exit status 1.
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_500_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC155_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC155_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_276_B.java' returned non-zero exit status 1.
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC178_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC127_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 1.
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_203_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_203_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC123_D.java' returned non-zero exit status 1.
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_242_A.java' returned non-zero exit status 1.
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ARC062_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC145_B.java' returned non-zero exit status 1.
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC136_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 1.
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 1.
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 26
Success: ['codeforces_267_A.java', 'atcoder_ABC140_D.java', 'atcoder_ABC158_A.java', 'atcoder_ABC171_E.java', 'codeforces_11_A.java', 'codeforces_110_B.java', 'codeforces_190_A.java', 'atcoder_ABC164_A.java', 'codeforces_58_B.java', 'atcoder_AGC038_A.java', 'atcoder_ABC151_A.java', 'atcoder_ABC171_B.java', 'codeforces_189_A.java', 'atcoder_ABC154_A.java', 'codeforces_581_A.java', 'atcoder_ABC139_B.java', 'atcoder_ABC170_A.java', 'codeforces_609_B.java', 'codeforces_583_B.java', 'atcoder_ABC112_A.java', 'codeforces_669_A.java', 'atcoder_AGC006_B.java', 'codeforces_32_B.java', 'codeforces_608_A.java', 'atcoder_ABC124_A.java', 'codeforces_397_B.java']
Fail: ['atcoder_ARC102_C.java', 'codeforces_59_A.java', 'atcoder_ABC043_B.java', 'atcoder_ABC129_E.java', 'atcoder_ABC174_E.java', 'atcoder_ABC142_C.java', 'atcoder_ABC167_C.java', 'codeforces_106_B.java', 'atcoder_ABC128_C.java', 'codeforces_450_A.java', 'atcoder_ABC126_E.java', 'codeforces_400_B.java', 'codeforces_617_B.java', 'atcoder_ABC119_B.java', 'atcoder_AGC028_B.java', 'codeforces_354_A.java', 'codeforces_287_A.java', 'atcoder_ABC174_C.java', 'codeforces_302_A.java', 'codeforces_518_B.java', 'atcoder_ABC111_C.java', 'codeforces_624_B.java', 'atcoder_ABC124_C.java', 'atcoder_ABC109_B.java', 'codeforces_31_A.java', 'codeforces_222_A.java', 'codeforces_607_A.java', 'codeforces_373_B.java', 'atcoder_ABC149_C.java', 'codeforces_474_B.java', 'codeforces_651_A.java', 'codeforces_299_A.java', 'codeforces_8_B.java', 'atcoder_ABC165_C.java', 'codeforces_567_A.java', 'codeforces_445_A.java', 'codeforces_412_A.java', 'atcoder_ABC158_B.java', 'codeforces_25_A.java', 'codeforces_268_A.java', 'atcoder_ABC143_D.java', 'codeforces_216_B.java', 'atcoder_AGC025_A.java', 'codeforces_342_B.java', 'codeforces_61_B.java', 'codeforces_596_B.java', 'codeforces_632_B.java', 'codeforces_154_A.java', 'atcoder_ABC147_D.java', 'codeforces_469_A.java', 'codeforces_387_A.java', 'codeforces_404_A.java', 'atcoder_AGC027_B.java', 'atcoder_AGC046_A.java', 'atcoder_AGC028_A.java', 'atcoder_ABC042_A.java', 'atcoder_ABC122_D.java', 'atcoder_ABC162_D.java', 'codeforces_356_A.java', 'atcoder_ABC126_D.java', 'codeforces_665_A.java', 'atcoder_ABC127_F.java', 'codeforces_131_B.java', 'codeforces_514_A.java', 'codeforces_99_A.java', 'atcoder_AGC005_B.java', 'codeforces_23_B.java', 'codeforces_682_B.java', 'atcoder_AGC010_B.java', 'codeforces_56_B.java', 'codeforces_500_A.java', 'codeforces_276_B.java', 'atcoder_ABC133_B.java', 'codeforces_265_B.java', 'codeforces_231_A.java', 'atcoder_ABC152_C.java', 'atcoder_ABC140_F.java', 'codeforces_369_B.java', 'atcoder_ABC133_E.java', 'codeforces_459_B.java', 'atcoder_AGC034_B.java', 'codeforces_462_B.java', 'codeforces_203_A.java', 'atcoder_AGC003_C.java', 'codeforces_544_B.java', 'atcoder_ABC150_E.java', 'atcoder_ABC070_B.java', 'atcoder_ABC169_E.java', 'codeforces_171_A.java', 'codeforces_350_B.java', 'atcoder_AGC043_B.java', 'atcoder_ABC178_B.java', 'atcoder_ABC153_A.java', 'codeforces_408_B.java', 'atcoder_ARC062_B.java', 'atcoder_ABC168_B.java', 'codeforces_672_A.java', 'codeforces_242_B.java', 'atcoder_ABC123_D.java', 'atcoder_ABC104_C.java', 'atcoder_AGC033_B.java', 'atcoder_ABC127_B.java', 'codeforces_334_A.java', 'codeforces_379_A.java', 'atcoder_ABC143_A.java', 'atcoder_ABC105_D.java', 'codeforces_296_A.java', 'atcoder_ABC114_C.java', 'atcoder_AGC033_A.java', 'atcoder_AGC024_B.java', 'codeforces_96_B.java', 'atcoder_ABC137_D.java', 'codeforces_644_B.java', 'atcoder_ABC051_A.java', 'codeforces_70_B.java', 'codeforces_678_A.java', 'atcoder_ABC169_D.java', 'atcoder_AGC014_D.java', 'codeforces_629_B.java', 'atcoder_ABC145_B.java', 'atcoder_ABC112_C.java', 'atcoder_ABC149_B.java', 'codeforces_274_A.java', 'atcoder_ABC107_D.java', 'codeforces_581_B.java', 'atcoder_ABC134_E.java', 'atcoder_ABC172_D.java', 'codeforces_387_B.java', 'atcoder_AGC002_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC164_D.java', 'codeforces_637_A.java', 'atcoder_ARC086_B.java', 'codeforces_203_B.java', 'atcoder_ABC108_B.java', 'atcoder_ABC166_C.java', 'atcoder_AGC046_B.java', 'codeforces_622_A.java', 'atcoder_AGC011_C.java', 'codeforces_546_A.java', 'atcoder_AGC019_A.java', 'codeforces_134_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC110_C.java', 'codeforces_282_B.java', 'atcoder_AGC029_C.java', 'atcoder_ABC167_D.java', 'codeforces_534_B.java', 'codeforces_569_A.java', 'codeforces_351_A.java', 'codeforces_242_A.java', 'codeforces_653_A.java', 'codeforces_146_A.java', 'codeforces_272_B.java', 'atcoder_AGC035_B.java', 'codeforces_55_A.java', 'atcoder_ABC150_C.java', 'codeforces_621_A.java', 'atcoder_ABC125_C.java', 'atcoder_ABC106_C.java', 'codeforces_313_B.java', 'codeforces_673_A.java', 'atcoder_ABC136_B.java', 'atcoder_ABC107_C.java', 'atcoder_AGC006_A.java', 'codeforces_629_A.java', 'codeforces_705_B.java', 'codeforces_519_B.java', 'atcoder_AGC037_E.java', 'atcoder_ABC155_D.java', 'atcoder_ABC169_C.java', 'atcoder_AGC004_B.java', 'codeforces_95_A.java', 'codeforces_79_A.java', 'codeforces_49_A.java', 'atcoder_ABC146_D.java', 'codeforces_86_A.java', 'codeforces_108_B.java', 'atcoder_ABC135_D.java', 'codeforces_92_A.java', 'codeforces_678_B.java', 'codeforces_148_B.java', 'codeforces_7_B.java', 'codeforces_55_B.java', 'atcoder_ABC178_A.java', 'atcoder_ABC123_B.java', 'codeforces_598_A.java', 'codeforces_340_A.java', 'codeforces_579_A.java', 'codeforces_612_B.java', 'atcoder_ABC132_A.java', 'codeforces_37_A.java', 'codeforces_421_A.java', 'codeforces_333_B.java', 'codeforces_67_B.java', 'atcoder_ABC125_A.java', 'atcoder_ABC126_E.java', 'atcoder_ABC132_F.java', 'codeforces_342_B.java', 'atcoder_AGC017_A.java', 'atcoder_AGC027_B.java', 'atcoder_ABC122_C.java']
