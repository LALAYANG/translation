+ model=deepseek-ai/deepseek-coder-6.7b-instruct
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-6.7b-instruct --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 10:09:19 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 08-21 10:09:20 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-6.7b-instruct', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 10:09:27 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 10:09:27 [__init__.py:1750] Using max model len 4096
INFO 08-21 10:09:27 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=868208)[0;0m INFO 08-21 10:09:28 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=868208)[0;0m INFO 08-21 10:09:28 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-6.7b-instruct', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-6.7b-instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-6.7b-instruct, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=868208)[0;0m WARNING 08-21 10:09:28 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=868208)[0;0m INFO 08-21 10:09:28 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_66dc1c1a'), local_subscribe_addr='ipc:///tmp/412ddae0-703a-4d12-b6bc-4ad5ad2a3b21', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:31 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_89673f53'), local_subscribe_addr='ipc:///tmp/e6622265-20a3-4a46-a950-525dbdf45306', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:31 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_6b098069'), local_subscribe_addr='ipc:///tmp/ed01dc38-986a-463d-af87-4ad2d220f728', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:32 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:32 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:32 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:32 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:33 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:33 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:33 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_4fde92c5'), local_subscribe_addr='ipc:///tmp/fe84f382-ef47-49b3-bfee-1b244ce93997', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:33 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:33 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m WARNING 08-21 10:09:33 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m WARNING 08-21 10:09:33 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:33 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-instruct...
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:33 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-instruct...
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:34 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:34 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:34 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:34 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:34 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:34 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m Loading safetensors checkpoint shards:  50% Completed | 1/2 [00:01<00:01,  1.10s/it]
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:37 [default_loader.py:262] Loading weights took 2.40 seconds
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:37 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 3.100152 seconds
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:04<00:00,  2.30s/it]
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:04<00:00,  2.12s/it]
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m 
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:39 [default_loader.py:262] Loading weights took 4.57 seconds
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:40 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 5.495196 seconds
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:50 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/33b6fdfc4a/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:50 [backends.py:559] Dynamo bytecode transform time: 9.15 s
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:54 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/33b6fdfc4a/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:09:54 [backends.py:559] Dynamo bytecode transform time: 13.53 s
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:09:57 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.440 s
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:10:00 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.897 s
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:10:01 [monitor.py:34] torch.compile takes 9.15 s in total
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:10:01 [monitor.py:34] torch.compile takes 13.53 s in total
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:10:02 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:10:02 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=868208)[0;0m INFO 08-21 10:10:02 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=868208)[0;0m INFO 08-21 10:10:02 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=868208)[0;0m INFO 08-21 10:10:02 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=868208)[0;0m INFO 08-21 10:10:02 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 21.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 22.49it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 22.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 22.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 21.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 21.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:00<00:02, 21.68it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:01, 21.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 20.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 20.88it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 20.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 19.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:01<00:01, 19.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:01<00:01, 18.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 18.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 18.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 18.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 18.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:02<00:00, 17.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:02<00:00, 17.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 16.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:02<00:00, 16.63it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:02<00:00, 16.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 17.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 17.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 16.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 18.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 19.25it/s]
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:10:06 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:10:07 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP1 pid=868216)[0;0m INFO 08-21 10:10:07 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=868208)[0;0m [1;36m(VllmWorker TP0 pid=868214)[0;0m INFO 08-21 10:10:07 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=868208)[0;0m INFO 08-21 10:10:07 [core.py:214] init engine (profile, create kv cache, warmup model) took 26.39 seconds
INFO 08-21 10:10:08 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 8035.31it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  21%|██        | 53/250 [00:00<00:00, 526.10it/s]Adding requests:  50%|████▉     | 124/250 [00:00<00:00, 629.69it/s]Adding requests:  75%|███████▍  | 187/250 [00:00<00:00, 299.39it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 391.28it/s]
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:02<09:14,  2.23s/it, est. speed input: 50.27 toks/s, output: 37.25 toks/s]Processed prompts:   1%|          | 2/250 [00:03<06:16,  1.52s/it, est. speed input: 76.91 toks/s, output: 63.68 toks/s]Processed prompts:   1%|          | 3/250 [00:03<03:39,  1.13it/s, est. speed input: 129.82 toks/s, output: 98.84 toks/s]Processed prompts:   2%|▏         | 5/250 [00:03<01:44,  2.35it/s, est. speed input: 352.55 toks/s, output: 172.45 toks/s]Processed prompts:   3%|▎         | 7/250 [00:03<01:05,  3.69it/s, est. speed input: 425.07 toks/s, output: 240.85 toks/s]Processed prompts:   4%|▎         | 9/250 [00:04<00:55,  4.37it/s, est. speed input: 453.80 toks/s, output: 296.97 toks/s]Processed prompts:   4%|▍         | 10/250 [00:04<00:53,  4.44it/s, est. speed input: 464.31 toks/s, output: 321.92 toks/s]Processed prompts:   5%|▌         | 13/250 [00:04<00:32,  7.19it/s, est. speed input: 653.90 toks/s, output: 427.77 toks/s]Processed prompts:   6%|▌         | 15/250 [00:04<00:29,  7.99it/s, est. speed input: 687.93 toks/s, output: 488.53 toks/s]Processed prompts:   8%|▊         | 19/250 [00:04<00:21, 10.55it/s, est. speed input: 777.49 toks/s, output: 616.54 toks/s]Processed prompts:   9%|▉         | 23/250 [00:04<00:15, 14.56it/s, est. speed input: 1090.33 toks/s, output: 758.03 toks/s]Processed prompts:  10%|█         | 25/250 [00:05<00:15, 14.97it/s, est. speed input: 1146.39 toks/s, output: 818.45 toks/s]Processed prompts:  11%|█         | 27/250 [00:05<00:18, 12.09it/s, est. speed input: 1269.76 toks/s, output: 857.24 toks/s]Processed prompts:  12%|█▏        | 30/250 [00:05<00:16, 13.53it/s, est. speed input: 1409.38 toks/s, output: 948.22 toks/s]Processed prompts:  13%|█▎        | 33/250 [00:05<00:17, 12.06it/s, est. speed input: 1512.84 toks/s, output: 1015.76 toks/s]Processed prompts:  14%|█▍        | 35/250 [00:05<00:18, 11.67it/s, est. speed input: 1547.01 toks/s, output: 1063.31 toks/s]Processed prompts:  16%|█▋        | 41/250 [00:06<00:10, 19.17it/s, est. speed input: 1838.32 toks/s, output: 1281.71 toks/s]Processed prompts:  18%|█▊        | 45/250 [00:06<00:10, 19.93it/s, est. speed input: 1927.97 toks/s, output: 1403.97 toks/s]Processed prompts:  19%|█▉        | 48/250 [00:06<00:11, 17.60it/s, est. speed input: 1973.80 toks/s, output: 1475.08 toks/s]Processed prompts:  21%|██        | 53/250 [00:06<00:08, 22.77it/s, est. speed input: 2064.92 toks/s, output: 1649.82 toks/s]Processed prompts:  22%|██▏       | 56/250 [00:06<00:09, 20.12it/s, est. speed input: 2096.83 toks/s, output: 1721.60 toks/s]Processed prompts:  24%|██▍       | 60/250 [00:06<00:08, 22.48it/s, est. speed input: 2274.21 toks/s, output: 1849.65 toks/s]Processed prompts:  26%|██▌       | 65/250 [00:07<00:06, 27.48it/s, est. speed input: 2392.59 toks/s, output: 2023.27 toks/s]Processed prompts:  28%|██▊       | 69/250 [00:07<00:06, 26.49it/s, est. speed input: 2576.23 toks/s, output: 2140.44 toks/s]Processed prompts:  29%|██▉       | 72/250 [00:07<00:07, 24.61it/s, est. speed input: 2610.97 toks/s, output: 2218.72 toks/s]Processed prompts:  31%|███       | 77/250 [00:07<00:07, 21.79it/s, est. speed input: 2724.27 toks/s, output: 2338.71 toks/s]Processed prompts:  32%|███▏      | 80/250 [00:07<00:07, 21.43it/s, est. speed input: 2797.10 toks/s, output: 2415.61 toks/s]Processed prompts:  33%|███▎      | 83/250 [00:07<00:07, 21.22it/s, est. speed input: 2925.38 toks/s, output: 2493.59 toks/s]Processed prompts:  36%|███▌      | 90/250 [00:08<00:05, 30.04it/s, est. speed input: 3226.08 toks/s, output: 2741.96 toks/s]Processed prompts:  40%|███▉      | 99/250 [00:08<00:03, 41.08it/s, est. speed input: 3607.64 toks/s, output: 3065.20 toks/s]Processed prompts:  42%|████▏     | 104/250 [00:08<00:03, 38.09it/s, est. speed input: 3737.45 toks/s, output: 3209.70 toks/s]Processed prompts:  44%|████▍     | 110/250 [00:08<00:03, 40.15it/s, est. speed input: 3912.17 toks/s, output: 3403.48 toks/s]Processed prompts:  46%|████▌     | 115/250 [00:08<00:03, 39.64it/s, est. speed input: 3989.29 toks/s, output: 3556.87 toks/s]Processed prompts:  48%|████▊     | 120/250 [00:08<00:03, 40.00it/s, est. speed input: 4084.20 toks/s, output: 3712.03 toks/s]Processed prompts:  51%|█████     | 128/250 [00:08<00:02, 48.92it/s, est. speed input: 4414.30 toks/s, output: 3995.33 toks/s]Processed prompts:  54%|█████▍    | 135/250 [00:08<00:02, 52.55it/s, est. speed input: 4609.28 toks/s, output: 4231.59 toks/s]Processed prompts:  56%|█████▋    | 141/250 [00:09<00:02, 46.56it/s, est. speed input: 4807.39 toks/s, output: 4401.34 toks/s]Processed prompts:  58%|█████▊    | 146/250 [00:09<00:02, 47.31it/s, est. speed input: 4973.59 toks/s, output: 4559.16 toks/s]Processed prompts:  60%|██████    | 151/250 [00:09<00:03, 28.87it/s, est. speed input: 4967.95 toks/s, output: 4594.24 toks/s]Processed prompts:  62%|██████▏   | 155/250 [00:09<00:03, 28.98it/s, est. speed input: 4997.18 toks/s, output: 4696.60 toks/s]Processed prompts:  64%|██████▍   | 160/250 [00:09<00:02, 31.87it/s, est. speed input: 5168.58 toks/s, output: 4849.58 toks/s]Processed prompts:  66%|██████▌   | 165/250 [00:09<00:02, 35.28it/s, est. speed input: 5292.03 toks/s, output: 5007.22 toks/s]Processed prompts:  68%|██████▊   | 170/250 [00:10<00:02, 28.86it/s, est. speed input: 5381.30 toks/s, output: 5094.49 toks/s]Processed prompts:  70%|██████▉   | 174/250 [00:10<00:02, 29.29it/s, est. speed input: 5430.68 toks/s, output: 5198.70 toks/s]Processed prompts:  71%|███████   | 178/250 [00:10<00:02, 28.18it/s, est. speed input: 5475.14 toks/s, output: 5290.47 toks/s]Processed prompts:  73%|███████▎  | 182/250 [00:10<00:02, 24.01it/s, est. speed input: 5510.37 toks/s, output: 5345.50 toks/s]Processed prompts:  74%|███████▍  | 185/250 [00:10<00:02, 22.95it/s, est. speed input: 5586.33 toks/s, output: 5399.88 toks/s]Processed prompts:  75%|███████▌  | 188/250 [00:11<00:03, 20.62it/s, est. speed input: 5674.77 toks/s, output: 5435.83 toks/s]Processed prompts:  76%|███████▋  | 191/250 [00:11<00:02, 20.94it/s, est. speed input: 5818.83 toks/s, output: 5499.36 toks/s]Processed prompts:  78%|███████▊  | 195/250 [00:11<00:03, 18.17it/s, est. speed input: 5824.89 toks/s, output: 5536.93 toks/s]Processed prompts:  79%|███████▉  | 197/250 [00:11<00:04, 13.00it/s, est. speed input: 5782.23 toks/s, output: 5464.57 toks/s]Processed prompts:  80%|████████  | 200/250 [00:11<00:03, 15.53it/s, est. speed input: 5840.71 toks/s, output: 5549.63 toks/s]Processed prompts:  81%|████████  | 202/250 [00:12<00:03, 13.99it/s, est. speed input: 5836.66 toks/s, output: 5548.77 toks/s]Processed prompts:  82%|████████▏ | 206/250 [00:12<00:02, 16.56it/s, est. speed input: 5874.74 toks/s, output: 5648.41 toks/s]Processed prompts:  84%|████████▎ | 209/250 [00:12<00:02, 18.81it/s, est. speed input: 5952.49 toks/s, output: 5732.81 toks/s]Processed prompts:  85%|████████▍ | 212/250 [00:12<00:02, 18.17it/s, est. speed input: 5981.57 toks/s, output: 5784.28 toks/s]Processed prompts:  86%|████████▌ | 215/250 [00:13<00:03, 10.05it/s, est. speed input: 5874.32 toks/s, output: 5648.16 toks/s]Processed prompts:  87%|████████▋ | 218/250 [00:13<00:02, 12.42it/s, est. speed input: 5942.44 toks/s, output: 5738.97 toks/s]Processed prompts:  88%|████████▊ | 220/250 [00:13<00:02, 12.59it/s, est. speed input: 6038.68 toks/s, output: 5765.75 toks/s]Processed prompts:  89%|████████▉ | 222/250 [00:13<00:02, 11.15it/s, est. speed input: 6013.29 toks/s, output: 5754.45 toks/s]Processed prompts:  90%|████████▉ | 224/250 [00:13<00:02, 10.72it/s, est. speed input: 6049.20 toks/s, output: 5760.66 toks/s]Processed prompts:  90%|█████████ | 226/250 [00:14<00:02, 10.91it/s, est. speed input: 6099.88 toks/s, output: 5781.32 toks/s]Processed prompts:  92%|█████████▏| 230/250 [00:14<00:01, 11.80it/s, est. speed input: 6107.89 toks/s, output: 5842.53 toks/s]Processed prompts:  93%|█████████▎| 232/250 [00:14<00:01, 11.00it/s, est. speed input: 6081.83 toks/s, output: 5846.86 toks/s]Processed prompts:  94%|█████████▍| 236/250 [00:14<00:01, 13.52it/s, est. speed input: 6173.52 toks/s, output: 5956.35 toks/s]Processed prompts:  96%|█████████▌| 239/250 [00:14<00:00, 14.42it/s, est. speed input: 6203.15 toks/s, output: 6026.48 toks/s]Processed prompts:  96%|█████████▋| 241/250 [00:15<00:01,  7.51it/s, est. speed input: 6020.57 toks/s, output: 5847.24 toks/s]Processed prompts:  97%|█████████▋| 243/250 [00:15<00:00,  8.68it/s, est. speed input: 6076.43 toks/s, output: 5899.27 toks/s]Processed prompts:  98%|█████████▊| 245/250 [00:16<00:00,  5.23it/s, est. speed input: 5860.49 toks/s, output: 5703.92 toks/s]Processed prompts:  98%|█████████▊| 246/250 [00:16<00:00,  4.65it/s, est. speed input: 5782.45 toks/s, output: 5636.74 toks/s]Processed prompts:  99%|█████████▉| 248/250 [00:17<00:00,  4.63it/s, est. speed input: 5704.22 toks/s, output: 5592.61 toks/s]Processed prompts: 100%|█████████▉| 249/250 [00:17<00:00,  3.70it/s, est. speed input: 5573.89 toks/s, output: 5480.28 toks/s]Processed prompts: 100%|██████████| 250/250 [00:43<00:00,  5.50s/it, est. speed input: 2288.71 toks/s, output: 2327.83 toks/s]Processed prompts: 100%|██████████| 250/250 [00:43<00:00,  5.50s/it, est. speed input: 2288.71 toks/s, output: 2327.83 toks/s]Processed prompts: 100%|██████████| 250/250 [00:43<00:00,  5.72it/s, est. speed input: 2288.71 toks/s, output: 2327.83 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-6.7b-instruct --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    static int N;
    static ArrayList<Integer>[] G;
    static HashMap<Pair, Integer> E;

    static class Pair implements Comparable<Pair> {
        int a, b;

        Pair(int a, int b) {
            this.a = Math.min(a, b);
            this.b = Math.max(a, b);
        }

        @Override
        public int compareTo(Pair o) {
            if (a != o.a) return a - o.a;
            return b - o.b;
        }
    }

    static int bfs(int v) {
        boolean[] visited = new boolean[N];
        Queue<Integer> queue = new LinkedList<>();
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        int K = -1;
        queue.add(v);
        visited[v] = true;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            for (int nex : G[q]) {
                if (visited[nex]) continue;
                visited[nex] = true;
                color += 1;
                if (color == node2color[q]) color += 1;
                node2color[nex] = color;
                E.put(new Pair(q, nex), color);
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        G = new ArrayList[N];
        E = new HashMap<>();
        for (int i = 0; i < N; i++) G[i] = new ArrayList<>();
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1, b = sc.nextInt() - 1;
            G[a].add(b);
            G[b].add(a);
            E.put(new Pair(a, b), 0);
        }
        int K = bfs(0);
        System.out.println(K);
        for (Map.Entry<Pair, Integer> entry : E.entrySet()) {
            System.out.println(entry.getValue());
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        double sum = 0;
        for (int i = 0; i < N; i++) {
            double value = scanner.nextDouble();
            String currency = scanner.next();
            if (currency.equals("JPY")) {
                sum += value * 1.0;
            } else if (currency.equals("BTC")) {
                sum += value * 380000.0;
            }
        }
        System.out.printf("%.8f\n", sum);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC028_B {
    static final BigInteger MOD = BigInteger.valueOf((long)Math.pow(10, 9) + 7);
    static final int N = (int)Math.pow(10, 6);
    static BigInteger[] fact = new BigInteger[N];
    static int Nsq = (int)Math.sqrt(N);

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        BigInteger[] A = new BigInteger[n];
        for (int i = 0; i < n; i++) {
            A[i] = in.nextBigInteger();
        }
        initFact();
        BigInteger ans = BigInteger.ZERO;
        BigInteger[] inv = new BigInteger[n];
        for (int i = 0; i < n; i++) {
            inv[i] = BigInteger.ONE.subtract(BigInteger.valueOf(i + 1).modInverse(MOD));
        }
        for (int i = 1; i < n; i++) {
            inv[i] = inv[i].add(inv[i - 1]);
            inv[i] = inv[i].mod(MOD);
        }
        for (int i = 0; i < n; i++) {
            BigInteger temp = inv[i].add(inv[n - 1 - i]);
            temp = temp.subtract(BigInteger.ONE);
            ans = ans.add(A[i].multiply(temp));
            ans = ans.mod(MOD);
        }
        ans = ans.multiply(fact[n]);
        ans = ans.mod(MOD);
        System.out.println(ans);
    }

    static void initFact() {
        fact[0] = BigInteger.ONE;
        for (int i = 1; i < N; i++) {
            fact[i] = fact[i - 1].multiply(BigInteger.valueOf(i));
            fact[i] = fact[i].mod(MOD);
        }
    }
}
import java.util.Scanner;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();
        int ans = 0;
        while (s < t) {
            s *= q;
            ans++;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                ls_xyh[i][j] = scanner.nextInt();
            }
        }
        System.out.println(solve(n, ls_xyh));
    }

    public static String solve(int n, int[][] ls_xyh) {
        int x0 = 0, y0 = 0, h0 = 0;
        for (int i = 0; i < n; i++) {
            if (ls_xyh[i][2] > 0) {
                x0 = ls_xyh[i][0];
                y0 = ls_xyh[i][1];
                h0 = ls_xyh[i][2];
                break;
            }
        }

        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(new int[]{cx, cy, h0 + Math.abs(cx - x0) + Math.abs(cy - y0)});
            }
        }

        for (int i = 0; i < ls_xyh.length; i++) {
            int x = ls_xyh[i][0];
            int y = ls_xyh[i][1];
            int h = ls_xyh[i][2];
            cands.removeIf(cand -> Math.max(cand[2] - Math.abs(cand[0] - x) - Math.abs(cand[1] - y), 0) != h);
        }

        int[] result = cands.get(0);
        return result[0] + " " + result[1] + " " + result[2];
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        long G = sc.nextLong();
        long[][] PC = new long[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextLong();
            PC[i][1] = sc.nextLong();
        }
        long ans = (long) Math.pow(10, 9);
        for (int i = 0; i < (1 << D); i++) {
            long score = 0;
            long problem = 0;
            for (int j = 0; j < D; j++) {
                if ((i >> j) % 2 == 1) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (score > G) continue;
            long left = G - score;
            for (int j = 0; j < D; j++) {
                if ((i >> j) % 2 == 1) continue;
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) continue;
                else {
                    long tmp = (left + (100 * (j + 1)) - 1) / (100 * (j + 1));
                    ans = Math.min(ans, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int vamshi = scanner.nextInt();
        int z = scanner.nextInt();
        System.out.println((vamshi / z + 1) * z);
    }
}
import java.util.*;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        scanner.nextLine();
        while (t-- > 0) {
            int[][] grid = new int[12][12];
            for (int i = 0; i < 12; i++) {
                String line = scanner.nextLine();
                for (int j = 0; j < 12; j++) {
                    grid[i][j] = line.charAt(j) == 'X' ? 1 : 0;
                }
            }
            solve(grid);
        }
    }

    private static void solve(int[][] grid) {
        List<int[]> tot = new ArrayList<>();
        for (int i = 1; i <= 12; i++) {
            if (12 % i == 0) {
                if (help(i, 12 / i, grid)) {
                    tot.add(new int[]{12 / i, i});
                }
            }
        }
        System.out.print(tot.size() + " ");
        tot.sort(Comparator.comparingInt(a -> a[0]));
        for (int[] pair : tot) {
            System.out.print(pair[0] + "x" + pair[1] + " ");
        }
        System.out.println();
    }

    private static boolean help(int a, int b, int[][] grid) {
        for (int i = 0; i < b; i++) {
            int sum = 0;
            for (int j = 0; j < a; j++) {
                sum += grid[i * a + j];
            }
            if (sum != a) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] line = br.readLine().split(" ");
        int N = Integer.parseInt(line[0]);
        int M = Integer.parseInt(line[1]);
        String[] line2 = br.readLine().split(" ");
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = Long.parseLong(line2[i]);
        }
        long[] cumRemainders = new long[N + 1];
        long[] remainderCounts = new long[M];
        for (int i = 1; i <= N; i++) {
            cumRemainders[i] = (cumRemainders[i - 1] + A[i - 1]) % M;
            remainderCounts[(int) cumRemainders[i]]++;
        }
        long combinations = 0;
        for (long count : remainderCounts) {
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
    }
}
import java.util.*;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        String T = scanner.nextLine();
        boolean judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        for (int x = 0; x < N; x++) {
            char c = S.charAt(x);
            if (c == 'L') {
                S_L++;
                if (S_L - T_R - s_c == 0) {
                    judge = true;
                }
            } else if (c == 'R') {
                S_R++;
                if (s_c + (S_R - T_L) == W + 1) {
                    judge = true;
                }
            } else if (c == 'U') {
                S_U++;
                if (S_U - T_D - s_r == 0) {
                    judge = true;
                }
            } else if (c == 'D') {
                S_D++;
                if (s_r + (S_D - T_U) == H + 1) {
                    judge = true;
                }
            }
            c = T.charAt(x);
            if (c == 'L') {
                if (S_R - T_L + s_c != 1) {
                    T_L++;
                }
            } else if (c == 'R') {
                if (s_c + (T_R - S_L) != W) {
                    T_R++;
                }
            } else if (c == 'U') {
                if (S_D - T_U + s_r != 1) {
                    T_U++;
                }
            } else if (c == 'D') {
                if (s_r + (T_D - S_U) != H) {
                    T_D++;
                }
            }
        }
        if (judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class codeforces_55_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        while (n % 2 == 0) {
            n /= 2;
        }
        if (n == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;
import java.lang.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        int k = scanner.nextInt();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l += 1;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.*;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.nextLine();
        }
        System.out.println(isValid(s) ? "YES" : "NO");
    }

    private static boolean isValid(String[] s) {
        int n = s.length;
        List<Character> d1 = new ArrayList<>(), d2 = new ArrayList<>();
        Set<Character> rem = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    d1.add(s[i].charAt(j));
                }
                if (i == n - j - 1) {
                    d2.add(s[i].charAt(j));
                }
                if (i != j && i != n - j - 1) {
                    rem.add(s[i].charAt(j));
                }
            }
        }
        if (rem.size() != 1 || !d1.equals(d2) || d1.size() != new HashSet<>(d1).size()) {
            return false;
        }
        for (char c : d1) {
            if (!rem.contains(c)) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        long[][] d = new long[C+1][D+1];
        d[A][B] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = B; j <= D; j++) {
                d[i][j] += (d[i][j-1]*i + d[i-1][j]*j - d[i-1][j-1]*(i-1)*(j-1) ) % m;
            }
        }
        System.out.println(d[C][D]);
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] allocated = new int[m];
        int ind = 1;
        for (int i = 0; i < t; i++) {
            String op = scanner.next();
            if (op.equals("alloc")) {
                int pos = 0;
                int num = scanner.nextInt();
                for (int j = 0; j < m; j++) {
                    if (allocated[j] == 0) {
                        pos++;
                        if (pos == num) {
                            for (int k = 0; k < num; k++) {
                                allocated[j - num + 1 + k] = ind;
                            }
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                }
                if (pos < num) {
                    System.out.println("NULL");
                }
            } else if (op.equals("erase")) {
                int num = scanner.nextInt();
                boolean found = false;
                for (int j = 0; j < m; j++) {
                    if (allocated[j] == num) {
                        allocated[j] = 0;
                        found = true;
                        break;
                    }
                }
                if (!found || num <= 0) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                }
            } else if (op.equals("defragment")) {
                int cnt = 0;
                for (int j = 0; j < m; j++) {
                    if (allocated[j] == 0) {
                        cnt++;
                    }
                }
                ArrayList<Integer> list = new ArrayList<>();
                for (int j = 0; j < m; j++) {
                    if (allocated[j] != 0) {
                        list.add(allocated[j]);
                    }
                }
                for (int j = 0; j < cnt; j++) {
                    list.add(0);
                }
                allocated = new int[m];
                for (int j = 0; j < list.size(); j++) {
                    allocated[j] = list.get(j);
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        int[][] XY = new int[N][2];
        for (int i = 0; i < N; i++) {
            String[] line = br.readLine().split(" ");
            XY[i][0] = Integer.parseInt(line[0]);
            XY[i][1] = Integer.parseInt(line[1]);
        }
        for (int i = 0; i < N; i++) {
            double[] D = new double[N];
            for (int j = 0; j < N; j++) {
                if (j != i) {
                    D[j] = Math.atan2(XY[i][1] - XY[j][1], XY[i][0] - XY[j][0]);
                }
            }
            Arrays.sort(D);
            double minAngle = 2 * Math.PI;
            for (int j = 0; j < N - 1; j++) {
                double angle = D[j + 1] - D[j];
                if (angle < minAngle) {
                    minAngle = angle;
                } else if (D[j + 1] - D[j] > 2 * Math.PI) {
                    minAngle = D[j + 1] - D[j] - 2 * Math.PI;
                }
            }
            System.out.println(minAngle / (2 * Math.PI));
        }
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC089_C {
    static int N;
    static String[] S;
    static int[] march_lis = new int[5];
    static String march = "MARCH";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt(); sc.nextLine();
        S = new String[N];
        for (int i = 0; i < N; i++) S[i] = sc.nextLine();
        for (String s : S) {
            char c = s.charAt(0);
            if (march.contains(Character.toString(c).toUpperCase())) {
                march_lis[march.indexOf(Character.toString(c).toUpperCase())]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                for (int k = j + 1; k < 5; k++) {
                    ans += march_lis[i] * march_lis[j] * march_lis[k];
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        List<Integer> list = Arrays.stream(a).boxed().collect(Collectors.toList());
        List<Integer> distinct = list.stream().distinct().collect(Collectors.toList());
        n = distinct.size();
        int ans = 0;
        for (int i = 1; i < n - 1; i++) {
            if ((distinct.get(i - 1) < distinct.get(i) && distinct.get(i) > distinct.get(i + 1)) ||
                    (distinct.get(i - 1) > distinct.get(i) && distinct.get(i) < distinct.get(i + 1))) {
                ans++;
            }
        }
        System.out.println(ans + 1);
    }
}
import java.util.*;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        HashMap<Integer, Integer> l = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (!l.containsKey(lst[i])) {
                l.put(lst[i], 1);
            } else {
                l.put(lst[i], l.get(lst[i]) + 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l.get(lst[i]) > 1) {
                res += n - i - l.get(lst[i]);
                l.put(lst[i], l.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        String S = scanner.next();
        char[] arr = S.toCharArray();
        int rNum = 0;
        int gNum = 0;
        int bNum = 0;
        for (char c : arr) {
            if (c == 'R') rNum++;
            if (c == 'G') gNum++;
            if (c == 'B') bNum++;
        }
        int sum = 0;
        for (int step = 1; step <= N / 2; step++) {
            for (int i = 0; i < N - 2 * step; i++) {
                char s1 = arr[i];
                char s2 = arr[i + step];
                char s3 = arr[i + step * 2];
                if ((s1 == 'R' && s2 == 'G' && s3 == 'B') || (s1 == 'R' && s2 == 'B' && s3 == 'G') ||
                    (s1 == 'B' && s2 == 'R' && s3 == 'G') || (s1 == 'B' && s2 == 'G' && s3 == 'R') ||
                    (s1 == 'G' && s2 == 'B' && s3 == 'R') || (s1 == 'G' && s2 == 'R' && s3 == 'B')) {
                    sum++;
                }
            }
        }
        System.out.println(rNum * gNum * bNum - sum);
    }
}
import java.util.*;

public class atcoder_AGC014_D {
    static ArrayList<Integer>[] adj;
    static int[] seen;
    static int[] par;
    static int[] child_num;
    static Deque<Integer> que = new ArrayDeque<>();
    static Deque<Integer> seq = new ArrayDeque<>();

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        adj = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            adj[a].add(b);
            adj[b].add(a);
        }
        que.add(1);
        seen = new int[N + 1];
        seen[1] = 1;
        par = new int[N + 1];
        child_num = new int[N + 1];
        while (!que.isEmpty()) {
            int v = que.pollFirst();
            for (int u : adj[v]) {
                if (seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    child_num[v]++;
                    que.add(u);
                }
            }
        }
        for (int i = 1; i <= N; i++) {
            if (child_num[i] == 0) {
                seq.add(i);
            }
        }
        while (!seq.isEmpty()) {
            int c = seq.pollLast();
            seen[c] = 0;
            if (seen[par[c]] == 0) {
                System.out.println("First");
                System.exit(0);
            }
            seen[par[c]] = 0;
            child_num[par[par[c]]]--;
            if (child_num[par[par[c]]] == 0) {
                seq.add(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.*;

public class atcoder_ABC151_A {
    static boolean debug = false;

    public static void log(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    public static String[] parseInput(String linesAsString) {
        debug = (linesAsString != null);
        List<String> lines = new ArrayList<>();
        if (linesAsString != null) {
            lines = Arrays.asList(linesAsString.split("\\n"));
        } else {
            Scanner scanner = new Scanner(System.in);
            lines.add(scanner.nextLine());
        }
        String[] c = lines.get(0).split(" ");
        return new String[] { c[0] };
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return String.valueOf(a.charAt(i + 1));
    }

    public static void main(String[] args) {
        String result = solve(parseInput(null)[0]);
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int[] ans = new int[n];
        int mx = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            ans[i] = Math.max(0, mx - arr[i] + 1);
            if (arr[i] > mx) {
                mx = arr[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    static ArrayList<Integer>[] edge;
    static boolean[] used;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();

        edge = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }

        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            edge[X].add(Y);
            edge[Y].add(X);
        }

        used = new boolean[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Queue<Integer> queue = new LinkedList<>();
                queue.add(i);
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    used[node] = true;
                    for (int nextNode : edge[node]) {
                        if (!used[nextNode]) {
                            queue.add(nextNode);
                        }
                    }
                }
            }
        }

        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC118_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int gcd = findGCD(A, N);
        System.out.println(gcd);
    }

    static int gcd(int a, int b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

    static int findGCD(int arr[], int n) {
        int result = arr[0];
        for (int i = 1; i < n; i++) {
            result = gcd(arr[i], result);

            if(result == 1) {
               return 1;
            }
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        int k = scanner.nextInt();
        long mod = (long) Math.pow(10, 9) + 7;

        List<Long> coef = new ArrayList<>();
        for (long i = 1; i <= Math.sqrt(n); i++) {
            coef.add((n / i) - (n / (i + 1)));
        }
        for (long i = 0; i < n - coef.stream().mapToLong(Long::longValue).sum(); i++) {
            coef.add(1L);
        }
        Collections.reverse(coef);

        long[][] dp = new long[k + 1][coef.size()];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long tmp = 0;
            for (int j = coef.size() - 1; j >= 0; j--) {
                tmp += dp[i - 1][coef.size() - 1 - j];
                tmp %= mod;
                dp[i][j] = coef.get(j) * tmp;
                dp[i][j] %= mod;
            }
        }

        long result = 0;
        for (int i = 0; i < coef.size(); i++) {
            result += dp[k][i];
            result %= mod;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        System.out.println(Math.min(a, b) + " " + (Math.max(a, b) - Math.min(a, b)) / 2);
    }
}
import java.util.Scanner;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int i = 1;
        while (m >= i) {
            m -= i;
            i = (i % n) + 1;
        }
        System.out.println(m);
    }
}
import java.util.Arrays;
import java.util.List;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        List<Integer> a = Arrays.asList(1, 2, 0, 4, 5);
        for (int i = 0; i < a.size(); i++) {
            if (a.get(i) == 0) {
                System.out.println(i + 1);
                break;
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        for (int i : l) {
            if (Arrays.binarySearch(l, i + 1) >= 0 && Arrays.binarySearch(l, i + 2) >= 0) {
                System.out.println("YES");
                return;
            }
        }
        System.out.println("NO");
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String recordOfMovements = scanner.next();
        int x = 0, y = 0;
        HashMap<Character, int[]> dMovement = new HashMap<Character, int[]>() {{
            put('L', new int[]{0, -1});
            put('R', new int[]{0, 1});
            put('U', new int[]{1, 0});
            put('D', new int[]{-1, 0});
        }};
        HashMap<String, String> d = new HashMap<String, String>() {{
            put(x + " " + y, "");
        }};
        boolean bug = false;
        for (char move : recordOfMovements.toCharArray()) {
            int[] temp = {x, y};
            x += dMovement.get(move)[0];
            y += dMovement.get(move)[1];
            if (!d.containsKey(x + " " + y)) {
                for (char step : dMovement.keySet()) {
                    if ((x + dMovement.get(step)[0] + " " + (y + dMovement.get(step)[1])) != (temp[0] + " " + temp[1]) && d.containsKey((x + dMovement.get(step)[0] + " " + (y + dMovement.get(step)[1])))) {
                        bug = true;
                        break;
                    }
                }
            } else {
                bug = true;
            }
            if (bug) {
                break;
            }
            d.put(x + " " + y, "");
        }
        if (bug) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String number = scanner.next();
        int h1 = 0;
        int h2 = 0;
        int x = 0;
        for (int i = 0; i < n; i++) {
            char c = number.charAt(i);
            if (c != '4' && c != '7') {
                System.out.println("NO");
                x += 1;
                break;
            }
            if (i < n / 2) {
                h1 += Character.getNumericValue(c);
            } else {
                h2 += Character.getNumericValue(c);
            }
        }
        if (x == 0) {
            if (h1 == h2) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        Arrays.sort(a);
        System.out.println(anyDivisor(a) ? a[0] : -1);
    }

    private static boolean anyDivisor(int[] a) {
        for (int x : a) {
            if (x % a[0] != 0) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();

        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();

        int yay = 0, whoops = 0;

        for (char c : s.toCharArray()) {
            freqs.put(c, freqs.getOrDefault(c, 0) + 1);
        }

        for (char c : t.toCharArray()) {
            freqt.put(c, freqt.getOrDefault(c, 0) + 1);
        }

        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && freqt.containsKey(c) && freqt.get(c) > 0) {
                yay++;
                freqs.put(c, freqs.get(c) - 1);
                freqt.put(c, freqt.get(c) - 1);
            }
        }

        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (Character.isLowerCase(c) && freqt.containsKey(Character.toUpperCase(c)) && freqt.get(Character.toUpperCase(c)) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toUpperCase(c), freqt.get(Character.toUpperCase(c)) - 1);
                } else if (Character.isUpperCase(c) && freqt.containsKey(Character.toLowerCase(c)) && freqt.get(Character.toLowerCase(c)) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toLowerCase(c), freqt.get(Character.toLowerCase(c)) - 1);
                } else {
                    break;
                }
            }
        }

        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] lista = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            if (i + 1 == lista[i]) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        scanner.close();

        int gcd = G(x, y);
        int lcm = L(x, y);
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    private static int G(int a, int b) {
        while (a % b != 0) {
            int temp = a;
            a = b;
            b = temp % b;
        }
        return b;
    }

    private static int L(int a, int b) {
        return a * b / G(a, b);
    }
}
import java.util.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        Arrays.sort(S);
        boolean[] flag = new boolean[N];
        ArrayList<Integer> cur = new ArrayList<>();
        cur.add(S[N - 1]);
        flag[N - 1] = true;
        for (int i = 0; i < N - 1; i++) {
            int j = 0;
            int jM = cur.size();
            for (int k = 0; k < N; k++) {
                if (!flag[k] && S[k] < cur.get(j)) {
                    cur.add(S[k]);
                    j++;
                    flag[k] = true;
                    if (j == jM) {
                        break;
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] v_and_t = scanner.nextLine().split(" ");
        String[] d_and_a = scanner.nextLine().split(" ");
        int v1 = Integer.parseInt(v_and_t[0]);
        int v2 = Integer.parseInt(v_and_t[1]);
        int t = Integer.parseInt(d_and_a[0]);
        int d = Integer.parseInt(d_and_a[1]);
        int a = 1;
        int v = v1;
        int distance = 0;
        for (int i = 0; i < t; i++) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
            distance += v;
            v += a * d;
        }
        System.out.println(distance);
    }
}
import java.util.*;

public class codeforces_672_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println(getNthElement(n));
    }

    private static int getNthElement(int n) {
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i < 371; i++) {
            int count = getDigitCount(i);
            if (count == 1 || count == 2 || count == 3) {
                list = getReversedList(list, i, count);
            }
        }
        list.remove(list.size() - 1);
        list.remove(list.size() - 1);
        return list.get(n - 1);
    }

    private static int getDigitCount(int num) {
        int count = 0;
        while (num != 0) {
            num /= 10;
            count++;
        }
        return count;
    }

    private static List<Integer> getReversedList(List<Integer> list, int num, int count) {
        List<Integer> temp = new ArrayList<>();
        while (num != 0) {
            int digit = num % 10;
            num /= 10;
            temp.add(digit);
        }
        if (count == 1) {
            list.add(num);
        } else if (count == 2 || count == 3) {
            for (int i = temp.size() - 1; i >= 0; i--) {
                list.add(temp.get(i));
            }
        }
        return list;
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();

        if (dragon <= princess) {
            System.out.println(0);
            System.exit(0);
        }

        int result = 0;
        double position = t * princess;
        position += princess * position / (dragon - princess);

        while (position < c) {
            result += 1;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String txt = scanner.nextLine();
        int cu = 0;
        int cl = 0;
        for (char z : txt.toCharArray()) {
            if (Character.isLowerCase(z)) {
                cl++;
            } else {
                cu++;
            }
        }
        String out;
        if (cu > cl) {
            out = txt.toUpperCase();
        } else {
            out = txt.toLowerCase();
        }
        System.out.println(out);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> L = new ArrayList<>();
        int r = 1;
        for (String k : scanner.nextLine().split(" ")) {
            for (int i = 0; i < Integer.parseInt(k); i++) {
                L.add(r);
            }
            r += 1;
        }
        for (String j : scanner.nextLine().split(" ")) {
            System.out.println(L.get(Integer.parseInt(j) - 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            System.out.println(subtract(a, b));
        }
    }

    public static int subtract(int a, int b) {
        if (a > b) {
            int total = 0;
            while (a > 0 && b > 0) {
                total += a / b;
                a = a % b;
                if (a > 0) {
                    total += b / a;
                    b = b % a;
                }
            }
            return total;
        } else if (a < b) {
            int total = 0;
            while (a > 0 && b > 0) {
                total += b / a;
                b = b % a;
                if (b > 0) {
                    total += a / b;
                    a = a % b;
                }
            }
            return total;
        } else {
            return 1;
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long ans = 0;
        for (int i = 1; i <= N; i++) {
            ans += i * (long) (N / i) * (N / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            System.out.println(a + b);
        }
    }
}
import java.util.Scanner;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int ans = n - 1;
        int last = 0;
        for (int i : l) {
            ans += Math.abs(last - i) + 1;
            last = i;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        String res = "";
        int d = s < f ? 1 : -1;
        char c = (char) (s < f ? 'R' : 'L');
        int i = 1;
        int j = s;
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int k = 1;
        while (j != f) {
            if (i > t && k < m) {
                t = scanner.nextInt();
                l = scanner.nextInt();
                r = scanner.nextInt();
                k++;
            }
            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res += 'X';
            } else {
                res += c;
                j += d;
            }
            i++;
        }
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            int x = scanner.nextInt();
            int t = l;
            while (t <= r) {
                int nextVal = comp[t - 1];
                if (out[t - 1] == 0 && t != x) {
                    out[t - 1] = x;
                }
                if (t >= x) {
                    comp[t - 1] = r + 1;
                } else {
                    comp[t - 1] = x;
                }
                t = nextVal;
            }
        }
        for (int i : out) {
            System.out.print(i + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tc = scanner.nextInt();
        solve(tc);
    }

    public static void solve(int tc) {
        if (tc == 0) {
            System.out.println(1);
        } else {
            System.out.println(0);
        }
    }
}
import java.util.*;

public class atcoder_ABC158_B {
    static final long mod = 1_000_000_007;
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int A = in.nextInt();
        int B = in.nextInt();
        long ans = 0;
        long rep = N / (A + B);
        ans += rep * A;
        long res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        HashMap<String, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            String s = scanner.next();
            map.put(s, map.getOrDefault(s, 0) + 1);
        }
        boolean possible = true;
        for (String key : map.keySet()) {
            if (map.get(key) >= n / 2 + 1) {
                possible = false;
                break;
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_AGC019_A {
    public static void main (String[] args) throws java.lang.Exception {
        Scanner scanner = new Scanner(System.in);
        long q = scanner.nextLong();
        long h = scanner.nextLong();
        long s = scanner.nextLong();
        long d = scanner.nextLong();
        long n = scanner.nextLong();
        long best1L = Math.min(q * 4, h * 2, s);
        long best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.*;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int A = scanner.nextInt();
            int idx = binarySearch(ans, A);
            if (idx == ans.size()) {
                ans.add(new ArrayList<>(Arrays.asList(A)));
            } else {
                ans.get(idx).add(A);
            }
        }
        System.out.println(ans.size());
    }

    private static int binarySearch(List<List<Integer>> list, int key) {
        int bad = -1, good = list.size();
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (list.get(mid).get(list.get(mid).size() - 1) < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String[] time1 = scanner.next().split(":");
        int h1 = Integer.parseInt(time1[0]);
        int m1 = Integer.parseInt(time1[1]);
        m1 += h1 * 60;

        String[] time2 = scanner.next().split(":");
        int h2 = Integer.parseInt(time2[0]);
        int m2 = Integer.parseInt(time2[1]);
        m2 += h2 * 60;

        m2 = m1 - m2;
        m2 %= 1440;

        int hours = m2 / 60;
        int minutes = m2 % 60;

        System.out.printf("%02d:%02d", hours, minutes);
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int at = scanner.nextInt();
        int bt = scanner.nextInt();
        int t1 = scanner.nextInt();
        int t2 = scanner.nextInt();
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            if (now + bt > st) {
                ans += 1;
            }
            now += b;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        int n = scanner.nextInt();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            String x = scanner.next();
            int a = 0, b = 0;
            for (char c : s.toCharArray()) {
                if (c == x.charAt(0)) {
                    a++;
                } else if (c == x.charAt(1)) {
                    b++;
                } else {
                    ans += Math.min(a, b);
                    a = 0;
                    b = 0;
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            if (a < 2) {
                System.out.println(0);
            }
            if (a >= 2) {
                System.out.println(a - 2);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < m; i++) {
            numSet.add(scanner.nextInt());
        }
        Set<Integer> twoTimesSet = new HashSet<>();
        for (int num : numSet) {
            for (int i = 1; i < 30; i++) {
                num /= 2;
                if (num % 2 != 0) {
                    twoTimesSet.add(i);
                    break;
                }
            }
            if (twoTimesSet.size() != 1) {
                System.out.println(0);
                return;
            }
        }
        List<Integer> numList = new ArrayList<>(numSet);
        int lcm = numList.get(0);
        for (int i = 1; i < numList.size(); i++) {
            lcm = lcm * numList.get(i) / gcd(lcm, numList.get(i));
        }
        System.out.println((n - lcm / 2) / lcm + 1);
    }

    private static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}
import java.util.*;

public class codeforces_216_B {
    static Scanner in = new Scanner(System.in);

    static int[] readInts() {
        return Arrays.stream(in.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    }

    static int[] dfs(Map<Integer, Set<Integer>> g, Set<Integer> seen, int i) {
        if (seen.contains(i)) {
            return new int[]{0, 0};
        }
        seen.add(i);
        int nodes = 1;
        int edges = g.get(i).size();
        for (int j : g.get(i)) {
            int[] xy = dfs(g, seen, j);
            nodes += xy[0];
            edges += xy[1];
        }
        return new int[]{nodes, edges};
    }

    static boolean solve() {
        int[] line0 = readInts();
        if (line0.length == 0) {
            return false;
        }
        int n = line0[0], m = line0[1];
        Map<Integer, Set<Integer>> g = new HashMap<>();
        Set<Integer> seen = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            g.put(i, new HashSet<>());
        }
        for (int i = 0; i < m; i++) {
            int[] ab = readInts();
            g.get(ab[0]).add(ab[1]);
            g.get(ab[1]).add(ab[0]);
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (!seen.contains(i)) {
                int[] xy = dfs(g, seen, i);
                if (xy[0] > 1 && xy[0] % 2 == 1 && 2 * xy[0] == xy[1]) {
                    ans++;
                }
            }
        }
        if ((n - ans) % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
        return true;
    }

    public static void main(String[] args) {
        while (solve()) {
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long a = scanner.nextLong();
        long b = scanner.nextLong();
        long c = scanner.nextLong();

        long leftOver = a - c;
        long takahashi = Math.max(0, leftOver);
        System.out.println(takahashi + " " + (takahashi > 0 ? b : Math.max(0, b - Math.abs(leftOver))));
    }
}
import java.util.*;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] a = new Integer[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int currentLevel = 0;
        int counter = 0;
        int counterTurns = -1;
        while (counter < n) {
            counterTurns++;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1 && a[i] <= counter) {
                    counter++;
                    a[i] = -1;
                }
            }
            Collections.reverse(Arrays.asList(a));
        }
        System.out.println(counterTurns);
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            l[a] = b;
        }
        if (l[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        for (int i = 1; i < 1000010; i++) {
            if (l[i] == 0) {
                dp[i] = dp[i - 1];
            } else {
                if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
            }
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }
        System.out.println(n - mx);
    }
}
import java.util.*;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
            sum += a[i];
        }
        if (sum % (n * (n + 1) / 2) != 0) {
            System.out.println("NO");
        } else {
            int k = sum / (n * (n + 1) / 2);
            int[] b = new int[n + 1];
            System.arraycopy(a, 0, b, 0, n);
            b[n] = a[0];
            boolean flag = true;
            for (int i = 1; i <= n; i++) {
                if ((k - b[i - 1] + b[i]) % n < 0 || (k - b[i - 1] + b[i]) / n < 0) {
                    flag = false;
                    break;
                }
            }
            System.out.println(flag ? "YES" : "NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        if (n < 1) {
            if (m < 1) {
                System.out.println(n + " " + m);
                System.exit(0);
            }
            System.out.println("Impossible");
            System.exit(0);
        }

        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        }

        if (m <= n) {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] round_complexity = new int[n];
        int[] george_complexity = new int[m];
        for (int i = 0; i < n; i++) {
            round_complexity[i] = scanner.nextInt();
        }
        for (int j = 0; j < m; j++) {
            george_complexity[j] = scanner.nextInt();
        }
        int i = 0, j = 0;
        while (i < n && j < m) {
            if (round_complexity[i] <= george_complexity[j]) {
                i++;
            }
            j++;
        }
        System.out.println(n - i);
    }
}
import java.util.PriorityQueue;
import java.util.Scanner;

class Worker implements Comparable<Worker>{
    int day;
    int salary;

    public Worker(int day, int salary){
        this.day = day;
        this.salary = salary;
    }

    @Override
    public int compareTo(Worker o) {
        if(this.day == o.day)
            return o.salary - this.salary;
        else
            return o.day - this.day;
    }
}

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        PriorityQueue<Worker> workers = new PriorityQueue<>();
        for(int i = 0; i < n; i++){
            int day = scanner.nextInt();
            int salary = scanner.nextInt();
            workers.add(new Worker(day, salary));
        }
        PriorityQueue<Integer> salaries = new PriorityQueue<>();
        while(!workers.isEmpty()){
            Worker worker = workers.poll();
            if(salaries.size() < m){
                salaries.add(worker.salary);
            } else if(worker.salary > salaries.peek()){
                salaries.poll();
                salaries.add(worker.salary);
            }
        }
        int sum = 0;
        for(int salary : salaries){
            sum += salary;
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC120_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        if (new HashSet<Character>(Arrays.asList(s.split(""))).size() == 1) {
            System.out.println(0);
            System.exit(0);
        }
        Map<Character, Integer> a = new HashMap<>();
        for (char c : s.toCharArray()) {
            a.put(c, a.getOrDefault(c, 0) + 1);
        }
        int ans = Collections.min(a.values()) * 2;
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_397_B {
    private static String solve(int a, int b, int c) {
        int k = a / b;
        return k * c >= a ? "Yes" : "No";
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        List<String> results = new ArrayList<>();
        for (int i = 0; i < t; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt();
            results.add(solve(a, b, c));
        }
        for (String result : results) {
            System.out.println(result);
        }
    }
}
import java.util.*;

public class atcoder_ARC102_C {
    static int K, N;
    static long mod = 998244353;
    static int __N = 8000;
    static long[] g1 = new long[__N + 1];
    static long[] g2 = new long[__N + 1];
    static long[] inverse = new long[__N + 1];

    static void init() {
        g1[0] = g2[0] = inverse[0] = 1;
        for (int i = 1; i <= __N; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (-inverse[(int) (mod % i)] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i]) % mod;
        }
    }

    static long cmb(int n, int r, long mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] % mod * g2[n - r] % mod;
    }

    static long kumiawase(int p, int q) {
        return cmb(p + q - 1, q - 1, mod);
    }

    static long solve(int n) {
        assert n <= K + 1;
        long ans = 0;
        int kumi = (n - 1) / 2;
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            ans += (cmb(kumi, p, mod) * kumiawase(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)))) % mod;
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += (cmb(kumi, p, mod) * kumiawase(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)))) % mod;
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        K = sc.nextInt();
        N = sc.nextInt();
        init();
        ArrayList<Long> ans = new ArrayList<>();
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                long tmp = solve(i) % mod;
                ans.add(tmp);
                System.out.println(tmp);
            } else {
                System.out.println(ans.get(ans.size() - i + K));
            }
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC148_F {
    static ArrayList<Integer>[] g;
    static int[] ta_dist, ao_dist;
    static int n, ta, ao;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        n = Integer.parseInt(s[0]);
        ta = Integer.parseInt(s[1]);
        ao = Integer.parseInt(s[2]);
        ta--; ao--;
        g = new ArrayList[n];
        for(int i = 0; i < n; i++) g[i] = new ArrayList<>();
        for(int i = 0; i < n - 1; i++) {
            s = br.readLine().split(" ");
            int a = Integer.parseInt(s[0]) - 1, b = Integer.parseInt(s[1]) - 1;
            g[a].add(b);
            g[b].add(a);
        }
        ta_dist = new int[n];
        ao_dist = new int[n];
        Arrays.fill(ta_dist, -1);
        Arrays.fill(ao_dist, -1);
        ta_dist[ta] = 0;
        ao_dist[ao] = 0;
        ta_dfs(ta);
        ao_dfs(ao);
        int res = 0;
        for(int i = 0; i < n; i++) {
            if(ta_dist[i] > ao_dist[i]) continue;
            res = Math.max(res, ao_dist[i]);
        }
        System.out.println(res - 1);
    }

    static void ta_dfs(int node) {
        for(int v : g[node]) {
            if(ta_dist[v] != -1) continue;
            ta_dist[v] = ta_dist[node] + 1;
            ta_dfs(v);
        }
    }

    static void ao_dfs(int node) {
        for(int v : g[node]) {
            if(ao_dist[v] != -1) continue;
            ao_dist[v] = ao_dist[node] + 1;
            ao_dfs(v);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] A = new int[4];
        for (int i = 0; i < 4; i++) {
            A[i] = scanner.nextInt();
        }
        scanner.close();

        if (A[1] <= A[2] || A[3] <= A[0]) {
            System.out.println(0);
        } else {
            Arrays.sort(A);
            System.out.println(A[2] - A[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        for (int i = 1; i < N; i++) {
            if (n[pos] > n[i]) {
                a += 1;
                pos = i;
            }
        }
        System.out.println(a);
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        ArrayList<Integer> a = new ArrayList<>();
        ArrayList<Integer> b = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a.add(x[i]);
            } else {
                b.add(x[i]);
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] cntb = new int[100002 + 1];
        for (int i : a) {
            cnta[i]++;
        }
        for (int i : b) {
            cntb[i]++;
        }
        int vala = 0, maxCnta = 0;
        for (int i = 0; i < cnta.length; i++) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        int valb = 0, maxCntb = 0;
        for (int i = 0; i < cntb.length; i++) {
            if (maxCntb < cntb[i]) {
                valb = i;
                maxCntb = cntb[i];
            }
        }
        if (valb != vala) {
            int res = 0;
            for (int i : a) {
                if (i != vala) {
                    res++;
                }
            }
            for (int i : b) {
                if (i != valb) {
                    res++;
                }
            }
            System.out.println(res);
        } else {
            int resa = 0, resb = 0, resa1 = 0, resb1 = 0;
            for (int i : a) {
                if (i != vala) {
                    resa++;
                }
                if (i != vala) {
                    resa1++;
                }
            }
            for (int i : b) {
                if (i != valb) {
                    resb++;
                }
                if (i != valb) {
                    resb1++;
                }
            }
            System.out.println(Math.min(resa + resb1, resa1 + resb));
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<String[]> q = new ArrayList<>();
        int count = 0;
        for (int i = 0; i < n; i++) {
            String[] a = new String[2];
            a[0] = scanner.next();
            a[1] = scanner.next();
            q.add(a);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                } else if (q.get(i)[0].equals(q.get(j)[1])) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        System.out.println(Math.max(x + y - 3 + ((y - x) % 3 > 0 ? 1 : 0), 0));
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        Set<Integer> different = new HashSet<>();
        int temp = 0;
        for (int x : arr) {
            if (x % k != 0 || !different.contains(x / k)) {
                different.add(x);
            }
            temp = Math.max(temp, different.size());
        }
        System.out.println(temp);
    }
}
import java.util.Scanner;

public class codeforces_306_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int q = n / m;
        int r = n % m;
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = q;
        }
        for (int i = 0; i < r; i++) {
            a[i] += 1;
        }
        for (int i = 0; i < m; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();

        Set<Integer> c = new HashSet<>();
        for (int i = 0; i < n; i++) {
            String s = scanner.nextLine();
            int firstG = s.indexOf('G');
            int firstS = s.indexOf('S');
            if (firstG != -1 && firstS != -1) {
                c.add(firstS - firstG);
            }
        }

        boolean hasNegative = c.stream().anyMatch(a -> a < 0);
        System.out.println(hasNegative ? -1 : c.size());
    }
}
import java.util.*;

public class codeforces_327_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine().replace(" ", "");
        if (!s.contains("0")) {
            System.out.println(n - 1);
        } else {
            ArrayList<Integer> indices = new ArrayList<>();
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) == '0') {
                    indices.add(i);
                }
            }
            if (indices.size() == 1) {
                System.out.println(n);
            } else {
                int maximum = 0;
                for (int i = 0; i < indices.size(); i++) {
                    for (int j = i + 1; j < indices.size(); j++) {
                        maximum = Math.max(maximum, 2 + 2 * (Math.abs(indices.indexOf(indices.get(i)) - indices.indexOf(indices.get(j))) - 1) - (Math.abs(indices.get(i) - indices.get(j)) - 1));
                    }
                }
                int countOnes = (int) s.chars().filter(ch -> ch == '1').count();
                System.out.println(countOnes + maximum);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                System.out.println((arr[i + 1] - arr[i]) + " " + (arr[n - 1] - arr[i]));
                continue;
            }
            if (i == n - 1) {
                System.out.println((arr[n - 1] - arr[n - 2]) + " " + (arr[n - 1] - arr[0]));
                continue;
            }
            if (arr[i] - arr[i - 1] > arr[i + 1] - arr[i]) {
                System.out.print(arr[i + 1] - arr[i] + " ");
            } else {
                System.out.print(arr[i] - arr[i - 1] + " ");
            }
            if (arr[n - 1] - arr[i] > arr[i] - arr[0]) {
                System.out.println(arr[n - 1] - arr[i]);
            } else {
                System.out.println(arr[i] - arr[0]);
            }
        }
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<String, Integer> map = new HashMap<>();
        String[] languages = new String[n];
        for (int i = 0; i < n; i++) {
            languages[i] = scanner.next();
        }
        String result = "Yes";
        int i = -1;
        for (String language : languages) {
            map.put(language, map.getOrDefault(language, 0) + 1);
            if (map.get(language) > 1) {
                result = "No";
            }
            if (i != -1 && languages[i].charAt(languages[i].length() - 1) != language.charAt(0)) {
                result = "No";
            }
            i++;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_579_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = 0;
        while (n != 0) {
            n >>= 1;
            x++;
        }
        System.out.println(x);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        int length = arr[0];
        Arrays.sort(arr);
        int ans = 0;
        if (arr[0] == arr[1]) {
            for (int i = 0; i <= length / arr[2]; i++) {
                int check = length - i * arr[2];
                if (check >= 0 && check % arr[0] == 0) {
                    int k = check / arr[0];
                    ans = Math.max(ans, k + i);
                }
            }
        } else {
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        int k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if ((1 << K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            char minChar = 'z';
            for (char c : S.toCharArray()) {
                if (c < minChar) {
                    minChar = c;
                }
            }
            System.out.println(String.valueOf(minChar).repeat(N));
            return;
        }
        S = getLastDict(S);
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (char c : S.toCharArray()) {
                if (c == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * ((1 << (K - 1))) >= N) {
                System.out.println(String.valueOf(S.charAt(0)).repeat(N));
            } else {
                S = String.valueOf(S.charAt(0)).repeat(count * ((1 << (K - 1)) - 1)) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    private static String getLastDict(String s) {
        StringBuilder U = new StringBuilder(s).append(new StringBuilder(s).reverse());
        char minChar = 'z';
        int minIndex = 0;
        for (int i = 0; i < U.length(); i++) {
            if (U.charAt(i) <= minChar) {
                minChar = U.charAt(i);
                minIndex = i;
            }
        }
        return U.substring(minIndex, minIndex + s.length());
    }
}
import java.util.*;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }
        if (allSame(elems)) {
            System.out.println(0);
            return;
        }
        if (k == 1) {
            System.out.println(-1);
            return;
        }
        if (!allSame(Arrays.copyOfRange(elems, k - 1, n))) {
            System.out.println(-1);
            return;
        }
        int target = elems[n - 1];
        List<Integer> toDelete = new ArrayList<>(Arrays.asList(Arrays.copyOfRange(elems, 0, k - 1)));
        while (!toDelete.isEmpty() && toDelete.get(toDelete.size() - 1) == target) {
            toDelete.remove(toDelete.size() - 1);
        }
        System.out.println(toDelete.size());
    }

    private static boolean allSame(int[] arr) {
        int first = arr[0];
        for (int elem : arr) {
            if (elem != first) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int N, M, Q;
    static int[] a, b, c, d;
    static int res = 0;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        Q = sc.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve();
        System.out.println(res);
    }

    public static void solve() {
        ArrayList<Integer> A = new ArrayList<>();
        rec(A);
    }

    public static void rec(ArrayList<Integer> A) {
        if (A.size() == N) {
            int ans = 0;
            for (int i = 0; i < Q; i++) {
                if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
            return;
        }
        int last_max = (A.size() == 0) ? 1 : A.get(A.size() - 1);
        for (int i = last_max; i <= M; i++) {
            A.add(i);
            rec(new ArrayList<>(A));
            A.remove(A.size() - 1);
        }
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = scanner.nextInt();
        }
        System.out.println(editorial(N, P));
    }

    public static int editorial(int N, int[] P) {
        if (N == 1) {
            return 0;
        }
        int[] a = new int[N + 1];
        for (int i = 0; i < N; i++) {
            a[P[i]] = i;
        }
        int tmp = 1;
        int maxLen = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp += 1;
                maxLen = Math.max(maxLen, tmp);
            } else {
                tmp = 1;
            }
        }
        return N - maxLen;
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        char[][] t = new char[4][4];
        for (int i = 0; i < 4; i++) {
            String line = scanner.next();
            for (int j = 0; j < 4; j++) {
                t[i][j] = line.charAt(j);
            }
        }
        boolean correct = false;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                int black = 0;
                int white = 0;
                if (t[i][j] == '#') black++;
                else white++;
                if (t[i][j + 1] == '#') black++;
                else white++;
                if (t[i + 1][j] == '#') black++;
                else white++;
                if (t[i + 1][j + 1] == '#') black++;
                else white++;
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = true;
                    break;
                }
            }
        }
        if (correct) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int high = 1;
        int tower = n;
        int maximum = 1;
        for (int i = 1; i < n; i++) {
            if (l[i] == l[i - 1]) {
                tower--;
                high++;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}
import java.util.*;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();

        if (X == 1 || X == N * 2 - 1) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
            if (X == N * 2 - 2) {
                int[] xs = new int[N];
                for (int i = 0; i < N - 1; i++) {
                    xs[i] = N - 1 + i;
                }
                for (int i = N - 1; i > 0; i--) {
                    xs[i] = i;
                }
                for (int x : xs) {
                    System.out.println(x);
                }
            } else {
                int[] ys = new int[N * 2 - 3];
                for (int i = 0; i < X - 1; i++) {
                    ys[i] = i + 1;
                }
                for (int i = X + 2; i < N * 2; i++) {
                    ys[i - 1] = i;
                }
                int[] xs = new int[N];
                System.arraycopy(ys, 0, xs, 0, N - 3);
                xs[N - 3] = X + 2;
                xs[N - 2] = X - 1;
                xs[N - 1] = X;
                xs[N] = X + 1;
                System.arraycopy(ys, N - 3, xs, N, N - 3);
                for (int x : xs) {
                    System.out.println(x);
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Piece> pieces = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            pieces.add(new Piece(scanner.nextInt(), scanner.next().charAt(0)));
        }
        System.out.println(bobsMaxStrength(pieces));
    }

    public static int bobsMaxStrength(List<Piece> pieces) {
        int pScore = sScore = 0, pMaxScore = 0, sMaxScore = 0;
        for (Piece piece : pieces) {
            if (piece.color == 'B') {
                pScore += piece.value;
            }
        }
        pMaxScore = pScore;
        for (Piece piece : pieces) {
            if (piece.color == 'A') {
                pScore += piece.value;
            } else {
                pScore -= piece.value;
            }
            if (pScore > pMaxScore) {
                pMaxScore = pScore;
            }
        }
        sScore = pMaxScore;
        for (int i = pieces.size() - 1; i >= 0; i--) {
            if (pieces.get(i).color == 'A') {
                sScore += pieces.get(i).value;
            } else {
                sScore -= pieces.get(i).value;
            }
            if (sScore > sMaxScore) {
                sMaxScore = sScore;
            }
        }
        return Math.max(pMaxScore, sMaxScore);
    }

    static class Piece {
        int value;
        char color;

        Piece(int value, char color) {
            this.value = value;
            this.color = color;
        }
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        final String LUCKY = "abcd";
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < n; i++) {
            s.append(LUCKY.charAt(i % 4));
        }
        System.out.println(s.toString());
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class codeforces_134_A {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(reader.readLine());
        List<Integer> w = Stream.of(reader.readLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        int x = w.stream().reduce(0, Integer::sum);
        List<Integer> d = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if ((x - w.get(i)) / (n - 1) == w.get(i)) {
                d.add(i + 1);
            }
        }
        System.out.println(d.size());
        System.out.println(d.stream().map(String::valueOf).collect(Collectors.joining(" ")));
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        StringBuilder t = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t.append('A');
                i += 1;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1 && s.charAt(i + 1) == 'C') {
                    t.append('D');
                    i += 2;
                } else {
                    t.append('X');
                    i += 1;
                }
            } else {
                t.append('X');
                i += 1;
            }
        }
        int total = 0;
        int numA = 0;
        for (i = 0; i < t.length(); i++) {
            if (t.charAt(i) == 'X') {
                numA = 0;
            } else {
                if (t.charAt(i) == 'A') {
                    numA += 1;
                } else {
                    total += numA;
                }
            }
        }
        System.out.println(total);
    }
}
import java.util.*;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();
        System.out.println(run(s, t));
    }

    public static String run(String s, String t) {
        char[] sArray = s.toCharArray();
        char[] tArray = t.toCharArray();

        Arrays.sort(sArray);
        Arrays.sort(tArray);

        s = new String(sArray);
        t = new String(tArray);

        Map<Character, Integer> sMap = new HashMap<>();
        Map<Character, Integer> tMap = new HashMap<>();

        for (char c : s.toCharArray()) {
            sMap.put(c, sMap.getOrDefault(c, 0) + 1);
        }

        for (char c : t.toCharArray()) {
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }

        List<Integer> sList = new ArrayList<>(sMap.values());
        List<Integer> tList = new ArrayList<>(tMap.values());

        Collections.sort(sList);
        Collections.sort(tList);

        return sList.equals(tList) ? "Yes" : "No";
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_ABC123_B {
    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<int[]> menu = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            String m = scanner.next();
            int e = Integer.parseInt(String.valueOf(m.charAt(m.length() - 1)));
            if (e == 0) {
                e = 10;
            }
            menu.add(new int[]{Integer.parseInt(m), e});
        }
        menu.sort(Comparator.comparingInt(o -> o[1]));
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            ans += (int)Math.ceil((double)menu.get(i)[0] / 10) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int n = 2; // for testing purposes
        List<String> a = Arrays.asList("10", "100", "1000", "10000", "100000");
        List<Integer> numbers = a.stream().map(Integer::parseInt).collect(Collectors.toList());
        int sum = numbers.stream().reduce(0, Integer::sum);
        if (numbers.contains(n)) {
            System.out.println(10);
        } else {
            System.out.println(sum);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] p = scanner.nextLine().split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);
        int DIF1 = x2 - x1;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = scanner.nextInt();
        }
        int total = Arrays.stream(a).reduce(0, (x, y) -> x ^ y);
        String result = Arrays.stream(a).map(ai -> ai ^ total).mapToObj(String::valueOf).collect(Collectors.joining(" "));
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();
        char[][] l = new char[n][m];
        for (int i = 0; i < n; i++) {
            String s = scanner.nextLine();
            for (int j = 0; j < m; j++) {
                if (s.charAt(j) == '.') {
                    if ((i + j) % 2 == 0)
                        l[i][j] = 'B';
                    else
                        l[i][j] = 'W';
                } else
                    l[i][j] = s.charAt(j);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(l[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = binarySearchRight(l, a + b);
                int left = binarySearchLeft(l, Math.max(a - b, b - a));
                long tmp = Math.max(0, right - left);
                if (left <= i && i < right) {
                    tmp -= 1;
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }

    private static int binarySearchRight(int[] arr, int key) {
        int lo = 0;
        int hi = arr.length;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (arr[mid] <= key) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }

    private static int binarySearchLeft(int[] arr, int key) {
        int lo = 0;
        int hi = arr.length;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (arr[mid] < key) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
}
import java.util.Scanner;

public class codeforces_30_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int n = scanner.nextInt();
        System.out.println(task4(A, B, n));
    }

    public static int task4(int A, int B, int n) {
        for (int X = -1000; X <= 1000; X++) {
            if (A * Math.pow(X, n) == B) {
                return X;
            }
        }
        throw new IllegalArgumentException("No solution");
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        Integer[][] A_ = new Integer[N][2];
        for (int i = 0; i < N; i++) {
            A_[i][0] = i + 1;
            A_[i][1] = scanner.nextInt();
        }
        Arrays.sort(A_, Comparator.comparingInt(o -> o[1]));
        for (int i = 0; i < N - 1; i++) {
            System.out.print(A_[i][0] + " ");
        }
        System.out.println(A_[N - 1][0]);
    }
}
import java.util.*;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC107_D {
    static int n, m;
    static int[] a;
    static HashMap<Integer, Integer> d = new HashMap<>();
    static int[] bit;

    static int bitSum(int i) {
        int sum = 0;
        while (i > 0) {
            sum += bit[i];
            i -= i & -i;
        }
        return sum;
    }

    static void bitAdd(int i, int x) {
        while (i <= n) {
            bit[i] += x;
            i += i & -i;
        }
    }

    static boolean check(int x) {
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = b[i] + ((a[i] >= x) ? 2 : -1);
        }
        int min = b[0];
        for (int i = 1; i <= n; i++) {
            b[i] -= min;
        }
        bit = new int[Collections.max(Arrays.asList(b)) + 2];
        int ans = 0;
        for (int i = 0; i <= n; i++) {
            ans += bitSum(b[i] + 1);
            bitAdd(b[i], 1);
        }
        return ans >= m;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = n * (n + 1) / 4;
        a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        List<Integer> _a = new ArrayList<>(new HashSet<>(Arrays.asList(a)));
        Collections.sort(_a);
        for (int i = 0; i < _a.size(); i++) {
            d.put(_a.get(i), i);
        }
        a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = d.get(a[i]);
        }
        int l = 0, r = _a.size();
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (check(mid)) {
                l = mid;
            } else {
                r = mid;
            }
        }
        System.out.println(_a.get(r - 1));
    }
}
import java.util.*;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Item> inputArray = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int S = scanner.nextInt();
            int R = scanner.nextInt();
            int H = scanner.nextInt();
            int C = scanner.nextInt();
            inputArray.add(new Item(S, R, H, C));
        }
        List<Item> outdated = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray.get(i).S < inputArray.get(j).S && inputArray.get(i).R < inputArray.get(j).R && inputArray.get(i).H < inputArray.get(j).H) {
                    outdated.add(inputArray.get(i));
                }
            }
        }
        outdated = new ArrayList<>(new HashSet<>(outdated));
        int minimumCost = 100000;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            Item currentItem = inputArray.get(i);
            int cost = currentItem.C;
            if (!outdated.contains(currentItem) && cost < minimumCost) {
                minimumCost = cost;
                inputNumber = i + 1;
            }
        }
        System.out.println(inputNumber);
    }

    static class Item {
        int S, R, H, C;

        public Item(int S, int R, int H, int C) {
            this.S = S;
            this.R = R;
            this.H = H;
            this.C = C;
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && b >= 0) {
            System.out.println("Zero");
        } else {
            if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC140_D {
    private static class InputParser {
        private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        private static StringTokenizer tokenizer = null;

        public static String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public static int nextInt() {
            return Integer.parseInt(next());
        }

        public static String nextLine() {
            try {
                return reader.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public static void main(String[] args) {
        int N = InputParser.nextInt();
        int K = InputParser.nextInt();
        String S = InputParser.nextLine();

        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }

        int cur_happy = N - 1 - seg_cnt;
        int ans;
        if (2 * K >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * K;
        }

        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }
        List<List<Integer>> l = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            for (int[] comb : combinations(n, i)) {
                l.add(Arrays.asList(comb));
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < l.size(); j++) {
                int ca = 0;
                for (int k : l.get(j)) {
                    ca += c[k][i];
                }
                if (ca < x) {
                    rem.add(j);
                }
            }
            if (!rem.isEmpty()) {
                for (int j = rem.size() - 1; j >= 0; j--) {
                    l.remove((int) rem.get(j));
                }
                rem.clear();
            }
            if (l.isEmpty()) {
                System.out.println(-1);
                return;
            }
        }
        for (List<Integer> i : l) {
            int ca = 0;
            for (int j : i) {
                ca += c[j][0];
            }
            if (ans == 0) {
                ans = ca;
            } else {
                ans = Math.min(ans, ca);
            }
        }
        System.out.println(ans);
    }

    public static List<int[]> combinations(int n, int k) {
        return combinations(new int[k], 0, n, k);
    }

    public static List<int[]> combinations(int[] data, int start, int n, int k) {
        List<int[]> result = new ArrayList<>();
        if (k == 0) {
            result.add(data.clone());
            return result;
        }
        if (n == k) {
            for (int i = start; i < n; i++) {
                data[i] = i;
            }
            result.add(data.clone());
            return result;
        }
        for (int i = start; i <= n - k; i++) {
            data[i] = i;
            result.addAll(combinations(data, i + 1, n, k - 1));
        }
        return result;
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int ans = A - 2 * B;
        if (ans < 0) {
            ans = 0;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            if (hole >= b) {
                check = false;
            } else {
                hole = a * (i + 1) - i;
                i++;
            }
        }
        System.out.println(i);
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < 2; i++) {
            c += Math.max(a, b);
            if (a >= b) {
                a--;
            } else {
                b--;
            }
        }
        System.out.println(c);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        List<Integer> list = Arrays.stream(scanner.nextLine().split(" "))
                .map(Integer::parseInt)
                .map(x -> x % 2)
                .collect(Collectors.toList());
        if (list.stream().mapToInt(Integer::intValue).sum() == 1) {
            System.out.println(list.indexOf(1) + 1);
        } else {
            System.out.println(list.indexOf(0) + 1);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstLine = scanner.nextInt();
        int total = 0;
        List<String> memory = new ArrayList<>();
        for (int i = 0; i < firstLine; i++) {
            int A = scanner.nextInt();
            int G = scanner.nextInt();
            if (total + A <= 500) {
                total += A;
                memory.add("A");
            } else {
                total -= G;
                memory.add("G");
            }
        }
        StringBuilder output = new StringBuilder();
        for (String s : memory) {
            output.append(s);
        }
        System.out.println(output.toString());
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC169_C {
    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.in);
        String sa = scanner.next();
        String sb = scanner.next();
        int a = Integer.parseInt(sa);
        int b = (int) (Float.parseFloat(sb) * 100 + 0.1);
        System.out.println((a * b) / 100);
    }
}
import java.util.*;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] t = new int[n + 1];
        int[] a = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            t[i] = scanner.nextInt();
        }
        for (int i = 1; i <= n; i++) {
            a[i] = scanner.nextInt();
        }
        List<Integer> ans = new ArrayList<>();
        int[] cnt = new int[n + 1];
        for (int i : a) {
            cnt[i]++;
        }
        for (int i = 1; i <= n; i++) {
            if (t[i] == 1) {
                List<Integer> crt = new ArrayList<>();
                int x = a[i];
                while (cnt[x] == 1) {
                    crt.add(x);
                    x = a[x];
                }
                if (crt.size() > ans.size()) {
                    ans = new ArrayList<>(crt);
                }
            }
        }
        Collections.reverse(ans);
        System.out.println(ans.size());
        for (int i : ans) {
            System.out.print(i + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC142_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double t = 0;
        for (int i = 0; i < n; i++) {
            if ((i + 1) % 2 != 0) {
                t += 1;
            }
        }
        System.out.println(t / n);
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] b = new int[2 * n];
        for (int i = 0; i < 2 * n; i++) {
            b[i] = 1;
        }
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;
        for (int i = 0; i < m; i++) {
            int r = scanner.nextInt();
            int c = scanner.nextInt();
            b[r - 1] = b[n + c - 1] = 0;
        }
        if (n % 2 == 1 && b[n / 2] == 1 && b[n + n / 2] == 1) {
            b[n / 2] = 0;
        }
        int sum = 0;
        for (int i = 0; i < 2 * n; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        int[] h = new int[n+1];
        for(int i=1; i<=n; i++) {
            h[i] = scanner.nextInt();
        }

        List<Integer>[] path = new ArrayList[n+1];
        for(int i=1; i<=n; i++) {
            path[i] = new ArrayList<>();
        }

        for(int i=0; i<m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            path[a].add(b);
            path[b].add(a);
        }

        int c = 0;
        for(int i=1; i<=n; i++) {
            boolean f = false;
            for(int j : path[i]) {
                if(h[i] <= h[j]) {
                    f = true;
                    break;
                }
            }
            if(!f) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        while (x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2) {
            if (a == 1) {
                if (y >= 22) {
                    y -= 22;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    x -= 2;
                    y -= 2;
                }
            } else {
                if (x >= 2 && y >= 2) {
                    x -= 2;
                    y -= 2;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    y -= 22;
                }
            }
            a = 1 - a;
        }
        System.out.println((a == 1) ? "Ciel" : "Hanako");
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC004_D {
    static int dfs(ArrayList<ArrayList<Integer>> links, int n, int k, int v, int p) {
        int heightFromLeaf = 0;
        int cutCount = 0;
        for (int u : links.get(v)) {
            if (u == p) continue;
            int hgt = dfs(links, n, k, u, v);
            heightFromLeaf = Math.max(heightFromLeaf, hgt);
            cutCount += hgt;
        }
        heightFromLeaf += 1;
        if (p != 0 && heightFromLeaf == k) {
            heightFromLeaf = 0;
            cutCount += 1;
        }
        return cutCount;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int n = Integer.parseInt(input[0]);
        int k = Integer.parseInt(input[1]);
        String[] aaa = br.readLine().split(" ");
        ArrayList<ArrayList<Integer>> links = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            links.add(new ArrayList<>());
        }
        for (int i = 0; i < n - 1; i++) {
            int a = Integer.parseInt(aaa[i]) - 1;
            links.get(a).add(i + 1);
        }
        int ans = dfs(links, n, k, 0, 0);
        if (Integer.parseInt(aaa[0]) != 1) {
            ans += 1;
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int t = 0;
        for (int i = 1; i <= k; i++) {
            t = (t % k) * 10 + 7;
            if (t % k == 0) {
                System.out.println(i);
                break;
            }
        }
        if (t % k != 0) {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = scanner.nextInt();
        }
        int m = 0;
        for (int j = 0; j < n; j++) {
            for (int p = 0; p < n; p++) {
                if (M[p] == 0) {
                    System.out.print((p + 1) + " ");
                    break;
                }
            }
            for (int l = 0; l < p - k; l++) {
                M[l]--;
            }
            M[p]--;
        }
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC168_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int h = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.close();

        double C = Math.abs(360.0 / 60 * m - 360.0 / 12 * h - 360.0 / 12 / 60 * m);
        if (C > 180) {
            C = 360 - C;
        }
        double cosC = Math.cos(Math.toRadians(C));
        double result = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b * cosC);
        System.out.println(result);
    }
}
import java.util.*;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int QR = scanner.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = scanner.nextInt();
        }
        int[] sum_el = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (n - 1) + sum_el[n] * R;
        for (int i = 1; i <= n; i++) {
            int energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
            if (i > n - i) {
                energy += (i - (n - i) - 1) * QL;
            } else if (n - i > i) {
                energy += ((n - i) - i - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine();
        List<Character> vo = Arrays.asList('a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y');
        for (int i = a.length() - 1; i >= 0; i--) {
            char c = a.charAt(i);
            if (c == ' ' || c == '?') {
                continue;
            } else {
                if (vo.contains(c)) {
                    System.out.println("YES");
                } else {
                    System.out.println("NO");
                }
                break;
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        if (S.length() <= K) {
            System.out.println(S);
        } else {
            System.out.println(S.substring(0, K) + "...");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int X = scanner.nextInt();
        boolean[] prime = new boolean[100010];
        Arrays.fill(prime, true);
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            prime[i] = false;
        }
        for (int i = 3; i * i <= 100008; i += 2) {
            if (prime[i]) {
                for (int j = i + i; j < 100008; j += i) {
                    prime[j] = false;
                }
            }
        }
        for (int i = X; i < 100008; i++) {
            if (prime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.*;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int sa = n - scanner.next().length();
        sa = Math.min(sa, n - sa);
        List<String> ss = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            b -= a;
            ss.add(((b % 2 == 1) && (b <= sa * 2)) ? "1\n" : "0\n");
        }
        System.out.print(String.join("", ss));
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = n; i > 0; i--) {
            if (n % i == 0) {
                n = i;
                System.out.print(i + " ");
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        String T = scanner.nextLine();
        char[] list_S = S.toCharArray();
        char[] list_T = T.toCharArray();
        List<Integer> Number_i = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            Number_i.add(i);
        }
        List<Integer> Number_iMN = new ArrayList<>();
        for (int i : Number_i) {
            Number_iMN.add(i * M / N);
        }
        List<Integer> Number_j = new ArrayList<>();
        for (int j = 0; j < M; j++) {
            Number_j.add(j);
        }
        Number_i.retainAll(Number_iMN);
        List<Integer> Kaburi_i = new ArrayList<>();
        for (int j : Number_i) {
            Kaburi_i.add(j * N / M);
        }
        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = Kaburi_i.size();
        while (counter <= Kaburi_Size - 1) {
            if (list_S[Kaburi_i.get(counter)] != list_T[counter]) {
                Flag = 1;
                break;
            }
            counter += 1;
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println(N * M / gcd(N, M));
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int mn = N + 1, mx = -1;
        for (int i = 0; i < N; i++) {
            if ((i + 1) != A[i]) {
                mn = Math.min(mn, i);
                mx = Math.max(mx, i);
            }
        }
        if (mx == -1) {
            System.out.println("0 0");
        } else {
            int[] B = Arrays.copyOfRange(A, 0, mn);
            int[] C = Arrays.copyOfRange(A, mn, mx + 1);
            int[] D = Arrays.copyOfRange(A, mx + 1, N);
            int[] E = new int[C.length];
            for (int i = 0; i < C.length; i++) {
                E[i] = C[C.length - 1 - i];
            }
            A = new int[N];
            System.arraycopy(B, 0, A, 0, B.length);
            System.arraycopy(E, 0, A, B.length, E.length);
            System.arraycopy(D, 0, A, B.length + E.length, D.length);
            boolean sorted = true;
            for (int i = 0; i < N - 1; i++) {
                if (A[i] > A[i + 1]) {
                    sorted = false;
                    break;
                }
            }
            if (sorted) {
                System.out.println((mn + 1) + " " + (mx + 1));
            } else {
                System.out.println("0 0");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] l = input.split("\\.");
        String s = l[0];
        String p = l[1];
        int i = Integer.parseInt(String.valueOf(p.charAt(0)));
        if (s.charAt(s.length() - 1) == '9') {
            System.out.println("GOTO Vasilisa.");
        } else if (s.charAt(s.length() - 1) != '9' && i < 5) {
            System.out.println(s);
        } else {
            int num = Integer.parseInt(s) + 1;
            System.out.println(num);
        }
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.nextLine();
        String v = scanner.nextLine();
        String[] d = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        ArrayList<String> a = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            a.add(d[f ? 1 : 0]);
        }
        for (int i = 0; i < v.length(); i++) {
            a.add(f ? "PRINT " + v.charAt(i) : "PRINT " + v.charAt(v.length() - i - 1));
            a.add(d[f ? 0 : 1]);
        }
        for (int i = 0; i < a.size() - 1; i++) {
            System.out.println(a.get(i));
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr > 0) {
            s += 1;
            curr /= 10;
        }
        int first = (int) Math.pow(10, s);
        int second = first / 2;
        int ans = -1;
        for (int i = l; i <= r; i++) {
            if (i >= l && i <= r) {
                curr = i;
                String rev = new StringBuilder(String.valueOf(curr)).reverse().toString();
                ans = Math.max(ans, Integer.parseInt(rev) * curr);
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = scanner.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = scanner.nextInt();
        }
        Set<Integer> q = new HashSet<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                q.add(li[i][j]);
            }
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        r.removeAll(q);
        int ans = 0;
        for (int i = 0; i <= q.size(); i++) {
            for (int[] combination : combinations(q, i)) {
                Set<Integer> s = new HashSet<>();
                for (int num : combination) {
                    s.add(num);
                }
                boolean flag = true;
                for (int j = 0; j < m; j++) {
                    if (intersectionSize(s, li[j]) % 2 != p[j]) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    ans += (int) Math.pow(2, r.size());
                }
            }
        }
        System.out.println(ans);
    }

    public static <T> List<T[]> combinations(Set<T> set, int k) {
        List<T[]> result = new ArrayList<>();
        T[] data = (T[]) set.toArray();
        combinations(data, k, 0, new T[k], result);
        return result;
    }

    public static <T> void combinations(T[] set, int k, int start, T[] buffer, List<T[]> result) {
        if (k == 0) {
            result.add(buffer.clone());
            return;
        }
        for (int i = start; i <= set.length - k; i++) {
            buffer[buffer.length - k] = set[i];
            combinations(set, k - 1, i + 1, buffer, result);
        }
    }

    public static <T> int intersectionSize(Set<T> set1, T[] set2) {
        Set<T> intersection = new HashSet<>(set1);
        intersection.retainAll(new HashSet<>(Arrays.asList(set2)));
        return intersection.size();
    }
}
import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        long x = scanner.nextLong();
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextLong();
        }
        long[][] b = new long[n][n];
        for (int i = 0; i < n; i++) {
            long m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k < 0) {
                    k += n;
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        long m = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][(i + j) % n];
            }
            m = Math.min(m, sum + x * i);
        }
        System.out.println(m);
    }
}
import java.util.*;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int mod = (int)Math.pow(10, 9) + 7;
        int n = scanner.nextInt();
        Integer[] c = new Integer[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        Arrays.sort(c, Collections.reverseOrder());
        long b = (long)Math.pow(2, 2 * n - 2) % mod;
        long a = 2 * b % mod;
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

class Pair implements Comparable<Pair> {
    int first, second;

    Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }

    @Override
    public int compareTo(Pair o) {
        if (this.second == o.second) {
            return Integer.compare(this.first, o.first);
        }
        return Integer.compare(o.second, this.second);
    }
}

public class codeforces_456_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        ArrayList<Pair> m = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            m.add(new Pair(scanner.nextInt(), scanner.nextInt()));
        }
        Collections.sort(m);
        Pair a = m.get(0);
        for (Pair i : m.subList(1, m.size())) {
            if (i.first > a.first) {
                System.out.println("Happy Alex");
                return;
            }
            a = i;
        }
        System.out.println("Poor Alex");
    }
}
import java.util.Scanner;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt();
            System.out.println(solve(n));
        }
    }

    public static int solve(int n) {
        int s = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            s -= 2 * t;
            t *= 2;
        }
        return s;
    }
}
import java.util.*;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int X = in.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = in.nextInt();
        }
        long[] S = new long[N];
        S[0] = A[0];
        for (int i = 1; i < N; i++) {
            S[i] = S[i - 1] + A[i];
        }
        long ans = Long.MAX_VALUE;
        for (int k = 1; k <= N; k++) {
            long E = k * X + 2 * sum(S, N - 2 * k - 1, -k);
            ans = Math.min(ans, E);
        }
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    private static long sum(long[] S, int end, int step) {
        long sum = 0;
        for (int i = end; i >= 0; i += step) {
            sum += S[i];
        }
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        String line = "bbzmzqazmbambnmzaabznmbabzqnaabmabmnnabbmnzaanzzezebzabqaabzqaemeqqammmbazmmzaznnbbmeebmanbeemzmemqbaeebnqenqzzbanebmnzqqebqmmnmqqzmmeqqqaaezemmazqqmqaqnnqqzbzeeazammmenbbamzbmnaenemenaaaebnmanebqmqnznqbenmqqnnnaeaebqmamennmqqeaaqqbammnzqmnmqnqbbezmemznqmanzmmqzzzzembqnzqbanamezqaqbazenenqqznqaebzaeezbqqbmeeaqnmmbnqbbnmaqqemaeaezaabmbnbzzaae";
        String line2 = "bbzmzqazmbambnmzaabznmbabzqnaabmabmnnabbmnzaanzzezebzabqaabzqaemeqqammmbazmmzaznnbbmeebmanbeemzmemqbaeebnqenqzzbanebmnzqqebqmmnmqqzmmeqqqaaezemmazqqmqaqnnqqzbzeeazammmenbbamzbmnaenemenaaaebnmanebqmqnznqbenmqqnnnaeaebqmamennmqqeaaqqbammnzqmnmqnqbbezmemznqmanzmmqzzzzembqnzqbanamezqaqbazenenqqznqaebzaeezbqqbmeeaqnmmbnqbbnmaqqemaeaezaabmbnbzzaae";
        System.out.println(solution(line, line2));
    }

    public static int solution(String line, String line2) {
        Map<Character, Integer> boughtCount = new HashMap<>();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        for (char c : line2.toCharArray()) {
            madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        for (char color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                return -1;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        return res;
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        String t = scanner.next();

        if (s.equals(t)) {
            System.out.println(n);
        } else {
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n - i; j++) {
                    if (s.charAt(i + j) != t.charAt(j)) {
                        break;
                    }
                    if (j == n - i - 1) {
                        cnt = n - i;
                    }
                }
            }
            System.out.println(2 * n - cnt);
        }
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static int twosInFactorial(int n) {
        return n - Integer.bitCount(n);
    }

    public static boolean parityOfnCr(int n, int i) {
        return twosInFactorial(n) - twosInFactorial(n - i) - twosInFactorial(i) > 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] nums = scanner.next().split("");
        boolean noOne = false;
        if (!Arrays.asList(nums).contains("1")) {
            nums = Arrays.stream(nums).map(num -> Integer.parseInt(num) / 2 + "").toArray(String[]::new);
            noOne = true;
        }
        boolean isOdd = false;
        for (int i = 0; i < nums.length; i++) {
            if (!parityOfnCr(n - 1, i) && Integer.parseInt(nums[i]) % 2 != 0) {
                isOdd = !isOdd;
            }
        }
        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println((int) Math.pow(2, noOne ? 1 : 0));
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < arr.length; k++) {
                    if (arr[k] != arr[j] && arr[k] != arr[i] && arr[k] == arr[i] + arr[j]) {
                        System.out.println((k + 1) + " " + (j + 1) + " " + (i + 1));
                        System.exit(0);
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    static int n, m;
    static int[] vis;
    static int ci, cb, cc;
    static ArrayList<Integer>[] g;

    static boolean dfs(int x) {
        Stack<int[]> stk = new Stack<>();
        stk.push(new int[]{x, 1});
        while (!stk.empty()) {
            int[] top = stk.pop();
            int u = top[0], col = top[1];
            if (vis[u] != 0) {
                if (vis[u] != col) {
                    return false;
                }
                continue;
            }
            vis[u] = col;
            for (int i : g[u]) {
                stk.push(new int[]{i, 3 - col});
            }
        }
        return true;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        vis = new int[n + 1];
        g = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else {
                    if (dfs(i)) {
                        cb++;
                    } else {
                        cc++;
                    }
                }
            }
        }
        System.out.println((long)ci * ci + 2 * ci * (n - ci) + (long)cc * cc + 2 * cb * cc + 2 * cb * cb);
    }
}
import java.util.*;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] left = ruiseki_lr(a, true);
        int[] right = ruiseki_lr(a, false);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int[] ruiseki_lr(int[] array, boolean isLeft) {
        int e = 0;
        int n = array.length;
        int[] result = new int[n + 1];
        Arrays.fill(result, e);
        if (isLeft) {
            for (int i = 0; i < n; i++) {
                result[i + 1] = gcd(result[i], array[i]);
            }
        } else {
            for (int i = n - 1; i >= 0; i--) {
                result[i] = gcd(result[i + 1], array[i]);
            }
        }
        return result;
    }
}
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class atcoder_AGC007_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int d = Integer.parseInt(st.nextToken());
        int x = Integer.parseInt(st.nextToken());
        System.out.println(main(N, d, x));
    }

    public static double main(int N, int d, int x) {
        double ret = 0;
        while (N > 0) {
            ret += d + (N - 0.5) * x;
            d = d + (d / N) + (5 * x) / (2 * N);
            x += 2 * x / N;
            N -= 1;
        }
        return ret;
    }
}
import java.util.*;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l1 = new int[n];
        for (int i = 0; i < n; i++) {
            l1[i] = scanner.nextInt();
        }
        Arrays.sort(l1);
        int a = l1[n - 1];
        int b = l1[0];
        if (a == b) {
            System.out.println((a - b) + " " + ((long)n * (n - 1) / 2));
        } else {
            int ac = 0;
            int bc = 0;
            for (int i = 0; i < n; i++) {
                if (l1[i] == a) {
                    ac++;
                } else if (l1[i] == b) {
                    bc++;
                }
            }
            System.out.println((a - b) + " " + (ac * bc));
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> V = new ArrayList<>();
        List<Integer> C = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            V.add(scanner.nextInt());
        }
        for (int i = 0; i < N; i++) {
            C.add(scanner.nextInt());
        }
        List<Integer> list = new ArrayList<>();
        int ans = 0;
        int X = 0;
        int Y = 0;
        for (int i = 0; i < N; i++) {
            if (V.get(i) - C.get(i) > 0) {
                X = V.get(i);
                Y = C.get(i);
                list.add(X - Y);
            }
        }
        for (int num : list) {
            ans += num;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        StringBuilder my_str = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '0' || c == '1') {
                my_str.append(c);
            } else if (c == 'B' && my_str.length() != 0) {
                my_str.setLength(my_str.length() - 1);
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int n = scanner.nextInt();
        int w = scanner.nextInt();
        if (1 <= k && k <= 1000 && 1 <= w && w <= 1000) {
            int total = 0;
            for (int i = 1; i <= w; i++) {
                total += i * k;
            }
            if (total > n) {
                System.out.println(total - n);
            } else {
                System.out.println(0);
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int[] l1 = new int[3];
            for (int j = 0; j < 3; j++) {
                l1[j] = scanner.nextInt();
            }
            if (Arrays.stream(l1).sum() > 1) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        scanner.nextLine();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String line = scanner.nextLine();
            for (int j = 0; j < w; j++) {
                graph[i][j] = line.charAt(j) == '#' ? 0 : Integer.MAX_VALUE;
            }
        }
        for (int x = 0; x < w - 1; x++) {
            for (int y = 0; y < h; y++) {
                if (graph[y][x + 1] > graph[y][x] + 1) {
                    graph[y][x + 1] = graph[y][x] + 1;
                }
            }
        }
        for (int x = w - 1; x > 0; x--) {
            for (int y = 0; y < h; y++) {
                if (graph[y][x - 1] > graph[y][x] + 1) {
                    graph[y][x - 1] = graph[y][x] + 1;
                }
            }
        }
        for (int y = 0; y < h - 1; y++) {
            for (int x = 0; x < w; x++) {
                if (graph[y + 1][x] > graph[y][x] + 1) {
                    graph[y + 1][x] = graph[y][x] + 1;
                }
            }
        }
        for (int y = h - 1; y > 0; y--) {
            for (int x = 0; x < w; x++) {
                if (graph[y - 1][x] > graph[y][x] + 1) {
                    graph[y - 1][x] = graph[y][x] + 1;
                }
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (graph[i][j] > max) {
                    max = graph[i][j];
                }
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int r = scanner.nextInt();
        int D = scanner.nextInt();
        int x = scanner.nextInt();

        for (int i = 2; i <= 12; i++) {
            int result = (int) ((Math.pow(r, i - 1)) * (x + D / (1 - r)) - D / (1 - r));
            System.out.println(result);
        }
    }
}
import java.util.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
        scanner.close();
    }

    public static void solve(int H, int W, int A, int B) {
        String[][] answer = new String[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (i < B) {
                    if (j < A) {
                        answer[i][j] = "0";
                    } else {
                        answer[i][j] = "1";
                    }
                } else {
                    if (j < A) {
                        answer[i][j] = "1";
                    } else {
                        answer[i][j] = "0";
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            System.out.println(String.join("", answer[i]));
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.nextInt();
        }
        int current_cell = 0;
        while (current_cell < t) {
            current_cell += s[current_cell];
            if (current_cell == t) {
                System.out.println("YES");
                System.exit(0);
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L;
        long rr = 1000000000000000000L;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            int tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextLong();
        }
        long result = 0;
        for (int b = 0; b < 60; b++) {
            long bs = 0;
            for (int i = 0; i < N; i++) {
                bs += (A[i] >> b) & 1;
            }
            result = (result + bs * (N - bs) * (1L << b)) % 1000000007;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        System.out.println(lcm(360, x));
    }

    // Function to calculate gcd
    public static int gcd(int a, int b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

    // Function to calculate lcm
    public static int lcm(int a, int b) {
        return (a * b) / gcd(a, b);
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = scanner.nextInt();
        }
        int ans = Math.abs(r[0]);
        for (int i = 1; i < n; i++) {
            ans += Math.abs(r[i] - r[i - 1]);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.next();
        String b = scanner.next();
        int x = Math.max(a.length(), b.length());
        a = String.format("%" + x + "s", a).replace(' ', '0');
        b = String.format("%" + x + "s", b).replace(' ', '0');
        StringBuilder s = new StringBuilder();
        int c = 0;
        for (int i = 0; i < x; i++) {
            int d = Character.getNumericValue(b.charAt(i)) + Character.getNumericValue(a.charAt(x - i - 1)) + c;
            if (d > 9) {
                s.append(d % 10);
                c = 1;
            } else {
                s.append(d);
                c = 0;
            }
        }
        if (c == 1) {
            s.append(1);
        }
        System.out.println(s.reverse().toString());
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int oddCount = 0;
        for (int value : map.values()) {
            if (value % 2 != 0) {
                oddCount++;
            }
            if (oddCount > 1) {
                break;
            }
        }
        if (oddCount <= 1 && s.length() % 2 == 0) {
            System.out.println("First");
        } else if (oddCount > 1 && s.length() % 2 == 0) {
            System.out.println("Second");
        } else if (oddCount > 1 && s.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class codeforces_617_B {
    public static void main(String[] args) {
        List<String> input = Arrays.asList(args);
        String a = input.get(0);
        System.out.println(a.contains("1") ? calculateProduct(a) : 0);
    }

    private static int calculateProduct(String a) {
        int product = 1;
        String[] parts = a.split("1");
        for (String part : parts) {
            product *= countZeroes(part) + 1;
        }
        return product;
    }

    private static int countZeroes(String s) {
        return s.length() - s.replace("0", "").length();
    }
}
import java.util.*;

public class codeforces_55_B {
    static long ans = Long.MAX_VALUE;
    static int[] nums;
    static char[] operations;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        nums = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        operations = scanner.nextLine().toCharArray();
        rememberTheNumber(0, 0);
        System.out.println(ans);
    }

    static void rememberTheNumber(int i, int last) {
        if (i >= 3)
            return;
        for (int j = 0; j < 4; j++) {
            for (int k = j + 1; k < 4; k++) {
                if (nums[j] != -1 && nums[k] != -1) {
                    int s = nums[j];
                    nums[j] = -1;
                    int t = nums[k];
                    if (operations[i] == '+')
                        nums[k] = s + t;
                    else if (operations[i] == '*')
                        nums[k] = s * t;
                    if (i == 2 && nums[k] < ans)
                        ans = nums[k];
                    rememberTheNumber(i + 1, k);
                    nums[j] = s;
                    nums[k] = t;
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long a = scanner.nextLong();
        long b = scanner.nextLong();
        long c = scanner.nextLong();
        long d = scanner.nextLong();
        System.out.println(Math.max(Math.max(a*c, b*d), Math.max(a*d, b*c)));
    }
}
import java.math.BigInteger;
import java.util.Arrays;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        String s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";
        int l = 2019;
        BigInteger[] m = new BigInteger[l];
        Arrays.fill(m, BigInteger.ZERO);
        BigInteger a = BigInteger.ZERO, r = BigInteger.ZERO;
        for (int i = 0; i < s.length(); i++) {
            a = a.add(new BigInteger(String.valueOf(s.charAt(i))).multiply(BigInteger.TEN.pow(i).mod(BigInteger.valueOf(l))));
            r = r.add(m[a.mod(BigInteger.valueOf(l)).intValue()]);
            m[a.mod(BigInteger.valueOf(l)).intValue()] = m[a.mod(BigInteger.valueOf(l)).intValue()].add(BigInteger.ONE);
        }
        System.out.println(r.mod(BigInteger.valueOf(l)));
    }
}
import java.io.*;
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int l = in.nextInt();
        int r = in.nextInt();
        int id = 0;
        for (int i = 1; i < n; i++) {
            int li = in.nextInt();
            int ri = in.nextInt();
            if (li <= l && r <= ri) {
                id = i;
            } else if (li < l || r < ri) {
                id = n;
            }
            l = Math.min(l, li);
            r = Math.max(r, ri);
        }
        System.out.println(id == n ? -1 : id + 1);
    }
}
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        String S = "AVVA";
        Map<Character, Integer> map = new HashMap<>();
        Set<Character> set = new HashSet<>();
        for (char c : S.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
            set.add(c);
        }
        if (set.size() != 2) {
            System.out.println("No");
            return;
        }
        for (int count : map.values()) {
            if (count != 2) {
                System.out.println("No");
                return;
            }
        }
        System.out.println("Yes");
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC169_D {
    static final long MOD = 1000000007;
    static long n;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextLong();
        if (n == 1) {
            System.out.println(0);
            System.exit(0);
        }
        Map<Long, Long> fac = prime_factorize(n);
        long ans = 0;
        for (Map.Entry<Long, Long> entry : fac.entrySet()) {
            long p = entry.getKey(), e = entry.getValue();
            long x = e;
            for (long i = 1; ; ++i) {
                if (x >= i) {
                    x -= i;
                    ans += 1;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    static Map<Long, Long> prime_factorize(long n) {
        Map<Long, Long> a = new HashMap<>();
        while (n % 2 == 0) {
            a.put(2L, a.getOrDefault(2L, 0L) + 1);
            n /= 2;
        }
        long f = 3;
        while (f * f <= n) {
            if (n % f == 0) {
                a.put(f, a.getOrDefault(f, 0L) + 1);
                n /= f;
            } else {
                f += 2;
            }
        }
        if (n != 1) {
            a.put(n, a.getOrDefault(n, 0L) + 1);
        }
        return a;
    }
}
import java.util.*;

class Node {
    int val;
    boolean color;
    List<Pair> a = new ArrayList<>();
}

class Pair {
    Node node;
    int dis;

    Pair(Node node, int dis) {
        this.node = node;
        this.dis = dis;
    }
}

public class atcoder_ABC126_D {
    static Node[] nodes;
    static boolean[] visited;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        nodes = new Node[n];
        visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < n - 1; i++) {
            int u = scanner.nextInt() - 1;
            int v = scanner.nextInt() - 1;
            int w = scanner.nextInt();
            nodes[u].a.add(new Pair(nodes[v], w));
            nodes[v].a.add(new Pair(nodes[u], w));
        }
        nodes[0].color = true;
        traverse(nodes[0], 0);
        for (int i = 0; i < n; i++) {
            if (nodes[i].color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    static void traverse(Node node, int distance) {
        if (visited[node.val - 1]) {
            return;
        } else {
            visited[node.val - 1] = true;
        }
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.dis;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            traverse(adjNode, distance + dis);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        final long mod = (long) Math.pow(10, 9) + 7;
        Scanner scanner = new Scanner(System.in);
        String l = scanner.next();
        int n = l.length();
        long[][] dp = new long[n + 1][2];
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            char c = l.charAt(i);
            if (c == '0') {
                dp[i + 1][0] += dp[i][0];
                dp[i + 1][1] += dp[i][1] * 3;
            } else {
                dp[i + 1][0] += dp[i][0] * 2;
                dp[i + 1][1] += dp[i][0];
                dp[i + 1][1] += dp[i][1] * 3;
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String d = "f";
        String ans;
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            ans = "ly";
        } else {
            ans = "nly";
        }
        while (true) {
            if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                if (d.equals("m")) {
                    d = "w";
                    n++;
                } else if (d.equals("t")) {
                    d = "th";
                    n++;
                } else if (d.equals("w")) {
                    d = "f";
                    n++;
                } else if (d.equals("th")) {
                    d = "sa";
                    n++;
                } else if (d.equals("f")) {
                    d = "s";
                    n++;
                } else if (d.equals("sa")) {
                    d = "m";
                    n++;
                } else if (d.equals("s")) {
                    d = "t";
                    n++;
                }
            } else {
                if (d.equals("m")) {
                    d = "t";
                    n++;
                } else if (d.equals("t")) {
                    d = "w";
                    n++;
                } else if (d.equals("w")) {
                    d = "th";
                    n++;
                } else if (d.equals("th")) {
                    d = "f";
                    n++;
                } else if (d.equals("f")) {
                    d = "sa";
                    n++;
                } else if (d.equals("sa")) {
                    d = "s";
                    n++;
                } else if (d.equals("s")) {
                    d = "m";
                    n++;
                }
            }
            if (d.equals("f") && ans.equals("ly") && isLeapYear(n)) {
                break;
            } else if (d.equals("f") && ans.equals("nly") && !isLeapYear(n)) {
                break;
            }
        }
        System.out.println(n);
    }

    private static boolean isLeapYear(int year) {
        return year % 400 == 0 || (year % 4 == 0 && year % 100 != 0);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine();
        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'A']++;
        }
        Arrays.sort(count);
        int res = 0;
        for (int i = 25; i >= 0; i--) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                return;
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_334_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int i = 1, j = n * n;
        while (i < j) {
            System.out.print(i + " " + (j-1) + " ");
            i += 1;
            j -= 1;
        }
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    static int[] A;
    static int N;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        A = new int[]{A[0]};
        for (int i = 1; i < A.length; i++) {
            if (A[i] >= A[i - 1]) {
                A[i] = A[i];
            } else {
                A[i] = A[i - 1];
            }
        }
        N = A.length;
        System.out.println(bis(0, N));
    }

    static ArrayList<int[]> cut(ArrayList<int[]> array, int index) {
        if (index < 1) {
            return new ArrayList<>();
        }
        for (int i = 0; i < array.size(); i++) {
            if (array.get(i)[0] < index) {
                return new ArrayList<>(array.subList(0, i + 1));
            }
        }
        return new ArrayList<>();
    }

    static boolean isPossible(int K) {
        ArrayList<int[]> dp = new ArrayList<>();
        dp.add(new int[]{A[0], 0});
        for (int i = 1; i < A.length; i++) {
            if (A[i] <= dp.get(dp.size() - 1)[0]) {
                dp = cut(dp, A[i]);
            } else {
                dp.add(new int[]{A[i], 0});
            }
            boolean isAdded = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j)[1] < K - 1) {
                    dp = cut(dp, dp.get(j)[0] - 1);
                    dp.add(new int[]{dp.get(j)[0], dp.get(j)[1] + 1});
                    if (dp.get(dp.size() - 1)[0] < A[i]) {
                        dp.add(new int[]{A[i], 0});
                    }
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    static int bis(int x, int y) {
        if (y == x + 1) {
            return y;
        } else if (isPossible((x + y) / 2)) {
            return bis(x, (x + y) / 2);
        } else {
            return bis((x + y) / 2, y);
        }
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String soz = scanner.next();
        int[] a = new int[soz.length() + 1];
        for (int i = 1; i < soz.length(); i++) {
            a[i] = a[i - 1];
            if (soz.charAt(i - 1) == soz.charAt(i)) {
                a[i]++;
            }
        }
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            int m = scanner.nextInt();
            int l = scanner.nextInt();
            arr[i] = a[l - 1] - a[m - 1];
        }
        for (int i : arr) {
            System.out.println(i);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        for (int i = 1; i < n; i++) {
            if (a[i] != a[i - 1] && a[i] * 2 < a[i - 1]) {
                System.out.println("YES");
                return;
            }
        }
        System.out.println("NO");
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class codeforces_705_B {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(reader.readLine());
        List<Integer> w = Arrays.stream(reader.readLine().split(" "))
                .map(Integer::parseInt)
                .collect(Collectors.toList());
        int c = 2;
        for (int i : w) {
            if (i == 1) {
                System.out.println(c);
            } else if (i % 2 == 0) {
                c = 3 - c;
                System.out.println(c);
            } else {
                System.out.println(c);
            }
        }
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        long sum_b = 0;
        long sum_p1 = 0;
        long sum_p2 = 0;
        for (int i = 0; i < q; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt();
            if (a == 2) {
                if (p1.size() == p2.size()) {
                    System.out.println(p2.peek() + " " + (sum_p1 - p2.size() * p2.peek() + p2.size() * p2.peek() - sum_p2 + sum_b));
                } else {
                    System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_b));
                }
            } else {
                sum_b += c;
                if (p1.isEmpty()) {
                    p1.add(b);
                    sum_p1 += b;
                } else if (p1.peek() <= b) {
                    p1.add(b);
                    sum_p1 += b;
                } else {
                    p2.add(b);
                    sum_p2 += b;
                }
                if (p1.size() < p2.size()) {
                    int k = p2.poll();
                    p1.add(-k);
                    sum_p2 += k;
                    sum_p1 -= k;
                }
                if (p1.size() - 1 > p2.size()) {
                    int k = p1.poll();
                    p2.add(-k);
                    sum_p1 -= k;
                    sum_p2 += k;
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            sho += 1;
        }
        System.out.println(sho);
    }
}
import java.util.Scanner;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.nextLine();
        String result = (s.contains("A") && s.contains("B")) ? "Yes" : "No";
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC005_B {
    static int[] par, rank, size;
    static int n;
    static ArrayList<Integer> a;

    static int root(int x) {
        if (par[x] == x) return x;
        else return par[x] = root(par[x]);
    }

    static boolean same(int x, int y) {
        return root(x) == root(y);
    }

    static void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) rank[x]++;
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        a = new ArrayList<>();
        for (int i = 0; i < n; i++) a.add(sc.nextInt() - 1);
        par = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        int c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1, r = 1;
            if (k > 0 && a.get(k - 1) > a.get(k)) {
                l += size[root(k - 1)];
                unite(k - 1, k);
            }
            if (k + 1 < n && a.get(k + 1) > a.get(k)) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += l * r * a.get(k);
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String text = scanner.nextLine();
        String[] sentences = Pattern.compile("[.?!]").split(text);
        int ans = 1, sumL = 0;
        for (String s : sentences) {
            s = s.trim() + '.';
            int L = s.length();
            if (L > 1) {
                if (L > n) {
                    System.out.println("Impossible");
                    System.exit(0);
                }
                if (sumL + L + (sumL > 0 ? 1 : 0) > n) {
                    ans++;
                    sumL = L;
                } else {
                    sumL = sumL + L + (sumL > 0 ? 1 : 0);
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        double time = a;
        while (time <= t + 0.5) {
            cookie += b;
            time += a;
        }
        System.out.println(cookie);
    }
}
import java.util.*;

public class atcoder_ABC145_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }
        System.out.println(solve(N, x, y));
    }

    public static double solve(int N, int[] x, int[] y) {
        int[] indices = new int[N];
        for (int i = 0; i < N; i++) indices[i] = i;
        List<int[]> permutations = new ArrayList<>();
        permutation(indices, 0, permutations);
        double totalDistance = 0;
        for (int[] permutation : permutations) {
            double distance = 0;
            for (int i = 0; i < N - 1; i++) {
                int from = permutation[i];
                int to = permutation[i + 1];
                distance += Math.sqrt(Math.pow(x[to] - x[from], 2) + Math.pow(y[to] - y[from], 2));
            }
            totalDistance += distance;
        }
        return totalDistance / permutations.size();
    }

    public static void permutation(int[] array, int start, List<int[]> permutations) {
        if (start == array.length) {
            permutations.add(array.clone());
        } else {
            for (int i = start; i < array.length; i++) {
                swap(array, start, i);
                permutation(array, start + 1, permutations);
                swap(array, start, i);
            }
        }
    }

    public static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int S = scanner.nextInt();
        int W = scanner.nextInt();
        if (S <= W) {
            System.out.println("unsafe");
        } else {
            System.out.println("safe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String ip = scanner.next();
        String st = "";
        if (ip.length() != 1) {
            if (ip.charAt(0) == '9') {
                st = "9";
                ip = ip.substring(1);
            }
            for (int i = 0; i < ip.length(); i++) {
                char c = ip.charAt(i);
                if (c - '0' > 4) {
                    int n = 9 - (c - '0');
                    st += n;
                } else {
                    st += c;
                }
            }
        } else {
            st = ip;
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.*;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> FXs = new ArrayList<>();
        for (int value : sequence) {
            int y = f(value);
            if (!storage.containsKey(y)) {
                storage.put(y, new ArrayList<>(Arrays.asList(value)));
                FXs.add(y);
            } else {
                storage.get(y).add(value);
            }
        }
        int sum1 = 0, sum2 = 0;
        for (int y : FXs) {
            sum1 += storage.get(y).size() * storage.get(y).size();
            sum2 += storage.get(y).size();
        }
        return (sum1 - sum2) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.*;

public class codeforces_96_B {
    static long limit = 10000000000L;
    static List<Long> list = new ArrayList<>();

    public static void gen(long number, int four, int seven) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            list.add(number);
        }
        gen(number * 10 + 4, four + 1, seven);
        gen(number * 10 + 7, four, seven + 1);
    }

    public static void main(String[] args) {
        gen(0, 0, 0);
        Collections.sort(list);
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long ans = 0;
        for (long val : list) {
            if (val >= n) {
                ans = val;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] low = new int[n];
        int[] high = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = scanner.nextInt();
            high[i] = scanner.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(high);
        if (n % 2 == 1) {
            System.out.println(high[(n + 1) / 2 - 1] - low[(n + 1) / 2 - 1] + 1);
        } else {
            int hh = (high[n / 2 - 1] + high[n / 2]) / 2;
            int ll = (low[n / 2 - 1] + low[n / 2]) / 2;
            System.out.println((hh - ll) * 2 + 1);
        }
    }
}
import java.util.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        List<Set<Integer>> edges = new ArrayList<>();
        int[] degs = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        for (int i = 0; i < N; i++) {
            edges.add(new HashSet<>());
        }
        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            edges.get(a).add(b);
            edges.get(b).add(a);
            degs[a]++;
            degs[b]++;
        }
        if (M % 2 != 0) {
            System.out.println(-1);
            System.exit(0);
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        for (int i = 0; i < N; i++) {
            Q.add(new int[]{degs[i], i});
        }
        while (!Q.isEmpty()) {
            int[] u = Q.poll();
            if (flag[u[1]]) {
                continue;
            }
            flag[u[1]] = true;
            List<Integer> neighbors = new ArrayList<>(edges.get(u[1]));
            for (int v : neighbors) {
                edges.get(v).remove(Integer.valueOf(u[1]));
                if (parity[u[1]] != 0) {
                    System.out.println((u[1] + 1) + " " + (v + 1));
                    parity[u[1]] = 1 - parity[u[1]];
                } else {
                    System.out.println((v + 1) + " " + (u[1] + 1));
                    parity[v] = 1 - parity[v];
                }
                degs[v]--;
                Q.add(new int[]{degs[v], v});
            }
        }
    }
}
import java.util.*;

public class codeforces_147_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        List<String> res = new ArrayList<>();
        List<Character> punctuation = Arrays.asList(',', '.', '!', '?');
        for (int i = 0; i < s.length(); i++) {
            if (i >= 1) {
                if (s.charAt(i) == ' ') {
                    if (!res.get(res.size() - 1).equals(" ")) {
                        res.add(String.valueOf(s.charAt(i)));
                    } else {
                        continue;
                    }
                } else {
                    if (punctuation.contains(s.charAt(i))) {
                        if (res.get(res.size() - 1).equals(" ")) {
                            res.remove(res.size() - 1);
                        }
                        res.add(String.valueOf(s.charAt(i)));
                        res.add(" ");
                    } else {
                        res.add(String.valueOf(s.charAt(i)));
                    }
                }
            } else {
                if (s.charAt(i) == ' ') {
                    continue;
                }
                if (punctuation.contains(s.charAt(i))) {
                    continue;
                } else {
                    res.add(String.valueOf(s.charAt(i)));
                }
            }
        }
        String result = String.join("", res);
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_ABC152_E {
    static long gcd(long a, long b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

    static long lcm(long a, long b) {
        return a * (b / gcd(a, b));
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long[] A = new long[N];
        for (int i = 0; i < N; i++)
            A[i] = scanner.nextLong();
        long _lcm = 1;
        for (long a : A)
            _lcm = lcm(_lcm, a);
        long ans = _lcm;
        long MOD = (long)Math.pow(10, 9) + 7;
        for (long a : A)
            ans = (ans + _lcm / a) % MOD;
        System.out.println((int) (ans % MOD));
    }
}
import java.util.Scanner;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int x = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        if (x == 0) {
            System.out.println("YES");
            return;
        }

        int a_time = Math.min(a / da, t - 1);
        int b_time = Math.min(b / db, t - 1);

        for (int i = 0; i <= a_time; i++) {
            for (int j = 0; j <= b_time; j++) {
                if (a - da * i == x || b - db * j == x || a - da * i + b - db * j == x) {
                    System.out.println("YES");
                    return;
                }
            }
        }

        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int k = scanner.nextInt();

        int[] a = new int[x];
        for (int i = 0; i < x; i++) {
            a[i] = scanner.nextInt();
        }

        int[] b = new int[y];
        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }

        int[] c = new int[z];
        for (int i = 0; i < z; i++) {
            c[i] = scanner.nextInt();
        }

        ArrayList<Integer> ab = new ArrayList<>();
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                ab.add(a[i] + b[j]);
            }
        }

        Collections.sort(ab, Collections.reverseOrder());

        ArrayList<Integer> abc = new ArrayList<>();
        for (int i = 0; i < Math.min(k, x * y); i++) {
            for (int j = 0; j < z; j++) {
                abc.add(ab.get(i) + c[j]);
            }
        }

        Collections.sort(abc, Collections.reverseOrder());

        for (int i = 0; i < k; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.*;

public class atcoder_ABC155_E {
    static Scanner in = new Scanner(System.in);
    static String[] input_methods = {"clipboard", "file", "key"};
    static int using_method = 0;
    static String input_method = input_methods[using_method];
    static boolean isTest = false;

    public static void main(String[] args) {
        if (input_method.equals("clipboard")) {
            in = new Scanner(System.in);
        }
        int ret = main();
        if (ret != -1) {
            System.out.println(ret);
        }
    }

    static int main() {
        String s = in.next();
        int pp = 0;
        int na = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            char c = s.charAt(i);
            int cc = na + Character.getNumericValue(c);
            na = 0;
            if (cc <= 4) {
                pp += cc;
            } else {
                na = 1;
                if (i == s.length() - 1) {
                    pp += 1;
                }
                pp += 10 - cc;
            }
        }
        return pp;
    }
}
import java.util.*;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();
        scanner.close();

        List<Integer> ans = new ArrayList<>();
        ans.addAll(getNums(k, sk));
        ans.addAll(getNums(n - k, sa - sk));

        StringBuilder output = new StringBuilder();
        for (int num : ans) {
            output.append(num).append(" ");
        }
        System.out.println(output.toString().trim());
    }

    private static List<Integer> getNums(int num, int t) {
        List<Integer> nums = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            if (i < t % num) {
                nums.add(t / num + 1);
            } else {
                nums.add(t / num);
            }
        }
        return nums;
    }
}
import java.util.*;

class Main {
    static ArrayList<Integer>[] graph;
    static long mod = (long)Math.pow(10, 9) + 7;
    static int N, K;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        K = sc.nextInt();
        graph = new ArrayList[N];
        for(int i = 0; i < N; i++)
            graph[i] = new ArrayList<>();
        for(int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[a].add(b);
            graph[b].add(a);
        }
        long ans = dfs(0, -1, K);
        System.out.println(ans);
    }

    static long dfs(int from, int to, int f) {
        long caseNum = f;
        int colorNum = (f == K) ? K - 1 : K - 2;
        for(int u : graph[from]) {
            if(u == to)
                continue;
            long pat = dfs(u, from, colorNum);
            if(pat == 0) {
                caseNum = 0;
                break;
            }
            caseNum = (caseNum * pat) % mod;
            colorNum--;
        }
        return caseNum;
    }
}
import java.util.*;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int pya = scanner.nextInt();
        scanner.nextLine();
        List<String> arre = new ArrayList<>();
        while (pya-- > 0) {
            arre.add(scanner.nextLine().toLowerCase());
        }
        String oString = scanner.nextLine();
        String lowString = oString.toLowerCase();
        char letter1 = scanner.nextLine().toLowerCase().charAt(0);
        char letter2 = (letter1 != 'a') ? 'a' : 'b';
        int[] valid = new int[oString.length()];
        Set<Integer> setcito = new HashSet<>();
        for (String x : arre) {
            if (lowString.indexOf(x) >= 0) {
                int wat = 0;
                while (true) {
                    int index = lowString.indexOf(x, wat);
                    if (index < 0) {
                        break;
                    }
                    for (int i = index; i < index + x.length(); i++) {
                        setcito.add(i);
                    }
                    wat = index + 1;
                }
            }
        }
        char[] oStringArray = oString.toCharArray();
        for (int i : setcito) {
            char letter = (oStringArray[i] != letter1) ? letter1 : letter2;
            oStringArray[i] = (Character.isLowerCase(oStringArray[i])) ? letter : Character.toUpperCase(letter);
        }
        System.out.println(new String(oStringArray));
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long w = scanner.nextLong();
        long m = scanner.nextLong();
        long k = scanner.nextLong();
        long lo = 0;
        long hi = (long) Math.pow(10, 18);
        while (hi - lo > 1) {
            long md = (lo + hi) / 2;
            long c = sum(m + md - 1) - sum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long sum(long k) {
        long ret = 0;
        long pw = 10;
        long len = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.*;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        List<String> games = new ArrayList<>();
        for (int i = a; i <= x; i++) {
            if (i <= b) continue;
            else {
                for (int j = b; j <= y; j++) {
                    if (i > j) {
                        games.add(i + " " + j);
                    }
                }
            }
        }
        System.out.println(games.size());
        for (String game : games) {
            System.out.println(game);
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int s = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int f = scanner.nextInt();
            int t = scanner.nextInt();
            int x = t - (s - f);
            if (x > c) {
                c = x;
            }
        }
        System.out.println(s + c);
    }
}
import java.util.*;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int max_level = scanner.nextInt();
        Set<Integer> x = new HashSet<>();
        Set<Integer> y = new HashSet<>();
        for (int i = 0; i < max_level; i++) {
            x.add(scanner.nextInt());
        }
        for (int i = 0; i < max_level; i++) {
            y.add(scanner.nextInt());
        }
        x.remove(0);
        y.remove(0);
        Set<Integer> z = new HashSet<>();
        z.addAll(x);
        z.addAll(y);
        if (z.size() != max_level) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.*;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        ArrayList<Double> arr = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            double num = scanner.nextDouble();
            if (num - (int) num != 0) {
                arr.add(num);
            }
        }
        Collections.sort(arr);
        int o = 2 * n - arr.size();
        double arrSum = 0;
        for (double num : arr) {
            arrSum += num;
        }
        double res = Double.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            if (i + o >= n) {
                res = Math.min(res, Math.abs(i - arrSum));
            }
        }
        System.out.printf("%.3f\n", res);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt() * N + i;
        }
        Arrays.sort(A);
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            int d = (A[i] % N) % 2;
            if (d % 2 != i % 2) {
                cnt++;
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] cake = new String[n];
        double happiness = 0;
        int chocCount = 0;
        double nfat = 1;
        for (int i = 0; i < n; i++) {
            cake[i] = scanner.nextLine();
            for (char j : cake[i].toCharArray()) {
                if (j == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k > chocCount - 3; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        int posCount = 0;
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k > chocCount - 3; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println((int) happiness);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class codeforces_459_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] parts = input.split(" ");
        int x1 = Integer.parseInt(parts[0]);
        int y1 = Integer.parseInt(parts[1]);
        int x2 = Integer.parseInt(parts[2]);
        int y2 = Integer.parseInt(parts[3]);
        int denominator = x2 - x1;
        int numerator = y2 - y1;
        if (denominator != 0) {
            int quotient = numerator / denominator;
            if (numerator == 0) {
                int d = (int) Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));
                int x4 = x1;
                int x3 = x2;
                int y3 = y2 + d;
                int y4 = y1 + d;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else if (denominator == 0) {
                int y4 = y2;
                int y3 = y1;
                int d = (int) Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));
                int x4 = x1 + d;
                int x3 = x2 + d;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else if (quotient == 1) {
                int x4 = x2;
                int x3 = x1;
                int y4 = y1;
                int y3 = y2;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else if (quotient == -1) {
                int x4 = x1;
                int x3 = x2;
                int y4 = y2;
                int y3 = y1;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else {
                System.out.println("-1");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String result = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '.') {
                result += '0';
            } else {
                i += 1;
                if (s.charAt(i) == '.') {
                    result += '1';
                } else {
                    result += '2';
                }
            }
            i += 1;
        }
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC012_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[8];
        for (int i = 0; i < 8; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        int ans = 0;
        for (int i = A.length - 2; i > A.length - 2 * n - 1; i -= 2) {
            ans += A[i];
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC122_D {
    static int n;
    static int mod = (int)Math.pow(10, 9) + 7;
    static HashMap<String, Integer>[] memo;

    public static boolean ok(String last4) {
        for (int i = 0; i < 4; i++) {
            StringBuilder t = new StringBuilder(last4);
            if (i >= 1) {
                char temp = t.charAt(i);
                t.setCharAt(i, t.charAt(i - 1));
                t.setCharAt(i - 1, temp);
            }
            if (countSubstring(t.toString(), "AGC") >= 1) {
                return false;
            }
        }
        return true;
    }

    public static int dfs(int cur, String last3) {
        if (memo[cur].containsKey(last3)) {
            return memo[cur].get(last3);
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (ok(last3.substring(1) + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c)) % mod;
            }
        }
        memo[cur].put(last3, ret);
        return ret;
    }

    public static int countSubstring(String str, String sub) {
        int count = 0;
        int idx = 0;
        while ((idx = str.indexOf(sub, idx)) != -1) {
            count++;
            idx++;
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        memo = new HashMap[n + 1];
        for (int i = 0; i <= n; i++) {
            memo[i] = new HashMap<>();
        }
        System.out.println(dfs(0, "TTT"));
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] ABC = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int countFive = (int) Arrays.stream(ABC).filter(x -> x == 5).count();
        if (countFive == 2) {
            System.out.println(Arrays.stream(ABC).sum() == 17 ? "YES" : "NO");
        } else {
            System.out.println("NO");
        }
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class codeforces_629_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = 368;
        int[] m = new int[N];
        int[] f = new int[N];
        int t = Integer.parseInt(br.readLine());
        for (int i = 0; i < t; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            char x = st.nextToken().charAt(0);
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken()) + 1;
            if (x == 'M') {
                m[a] += 2;
                m[b] -= 2;
            } else {
                f[a] += 2;
                f[b] -= 2;
            }
        }
        int a = 0, b = 0, c = 0;
        for (int i = 0; i < N; i++) {
            a += m[i];
            b += f[i];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC123_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[5];
        for (int i = 0; i < 5; i++) {
            A[i] = scanner.nextInt();
        }
        int min = A[0];
        for (int i = 1; i < 5; i++) {
            if (A[i] < min) {
                min = A[i];
            }
        }
        System.out.println((int)Math.ceil((double)N / min) + 4);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long K = scanner.nextLong();
        int[] L = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            L[i] = scanner.nextInt();
        }
        L[0] = -1;
        int[] path = new int[N + 1];
        path[0] = 1;
        int ind = 0;
        boolean flag = false;
        HashMap<Integer, Integer> hash = new HashMap<>();
        for (int i = 1; i <= N + 1; i++) {
            int ne = L[i];
            if (hash.containsKey(ne)) {
                flag = true;
                ind = hash.get(ne);
                break;
            }
            path[i] = ne;
            ind++;
            hash.put(ne, ind);
        }
        if (flag) {
            int loopSize = ind;
            List<Integer> loop = new ArrayList<>();
            for (int i = ind; i < N + 1; i++) {
                loop.add(path[i]);
            }
            if (K < N + 1) {
                System.out.println(path[(int) K]);
            } else {
                K = K - (N + 1);
                K = K % loopSize;
                System.out.println(loop.get((int) K));
            }
        } else {
            System.out.println(path[(int) K - 1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        System.out.println(input.replace(",", " "));
    }
}
import java.util.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = scanner.nextInt();
            problems[i][1] = scanner.nextInt();
        }
        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1];
            if (i < n && s.substring(i - 1, i + 1).equals("AC")) {
                cumsum[i]++;
            }
        }
        for (int i = 0; i < q; i++) {
            int l = problems[i][0];
            int r = problems[i][1];
            System.out.println(cumsum[r - 1] - cumsum[l - 1]);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        if (arr[0] > 15) {
            System.out.println(15);
        } else {
            for (int i = 1; i < arr.length; i++) {
                if (arr[i] - arr[i - 1] > 15) {
                    System.out.println(arr[i - 1] + 15);
                    break;
                }
            }
            if (arr[arr.length - 1] == 90 || arr[arr.length - 1] + 15 >= 90) {
                System.out.println(90);
            } else {
                System.out.println(arr[arr.length - 1] + 15);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1, b = Integer.MIN_VALUE;
        for (int i : lis) {
            if (i > b) {
                b = i;
            }
        }
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (check(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    private static boolean check(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= (i / mid);
        }
        return k >= 0;
    }
}
import java.util.*;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String T = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, T, A, B, U);
    }

    public static void solve(String S, String T, int A, int B, String U) {
        if (S.equals(U)) {
            A--;
        }
        if (T.equals(U)) {
            B--;
        }
        System.out.println(A + " " + B);
    }
}
import java.util.*;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] s = scanner.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String value : s) {
            w.put(value, w.getOrDefault(value, 0) + 1);
        }
        int c = -1;
        String a = "";
        for (String i : w.keySet()) {
            if (w.get(i).equals(Collections.max(w.values()))) {
                if (Arrays.asList(s).indexOf(i) > c) {
                    a = i;
                    c = Arrays.asList(s).indexOf(i);
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[] x = new int[n];
        int m = 0;
        int q = 0;
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        for (int a = 0; a < n - 1; a++) {
            if (x[a] >= x[a + 1]) {
                q = (x[a] - x[a + 1]) / d + 1;
                m = m + q;
                x[a + 1] = x[a + 1] + q * d;
            }
        }
        System.out.println(m);
    }
}
import java.util.*;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            list.add(i);
        }
        List<List<Integer>> perm = permute(list);
        int[] p = new int[n];
        int[] q = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            q[i] = scanner.nextInt();
        }
        int pn = -1, qn = -1;
        for (int i = 0; i < perm.size(); i++) {
            if (compare(perm.get(i), p) == 0) {
                pn = i;
            }
            if (compare(perm.get(i), q) == 0) {
                qn = i;
            }
        }
        System.out.println(Math.abs(pn - qn));
    }

    public static List<List<Integer>> permute(List<Integer> list) {
        if (list.size() == 0) {
            List<List<Integer>> result = new ArrayList<>();
            result.add(new ArrayList<>());
            return result;
        }
        List<List<Integer>> result = new ArrayList<>();
        Integer first = list.get(0);
        List<Integer> subList = subList(list);
        for (List<Integer> perm : permute(subList)) {
            for (int i = 0; i <= perm.size(); i++) {
                List<Integer> newPerm = new ArrayList<>(perm);
                newPerm.add(i, first);
                result.add(newPerm);
            }
        }
        return result;
    }

    public static List<Integer> subList(List<Integer> list) {
        return list.subList(1, list.size());
    }

    public static int compare(List<Integer> list, int[] arr) {
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) != arr[i]) {
                return 1;
            }
        }
        return 0;
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int T = scanner.nextInt();
        int[][] time_value = new int[N+1][2];
        for(int i=1; i<=N; i++) {
            time_value[i][0] = scanner.nextInt();
            time_value[i][1] = scanner.nextInt();
        }
        Arrays.sort(time_value, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[1] - b[1];
            }
        });
        int[][] dp = new int[N+1][T+1];
        for(int t=0; t<T; t++) {
            dp[0][t] = 0;
        }
        for(int n=1; n<=N; n++) {
            dp[n][0] = 0;
            for(int t=1; t<=T; t++) {
                if(time_value[n][0] > t) {
                    dp[n][t] = dp[n-1][t];
                } else {
                    dp[n][t] = Math.max(dp[n-1][t], time_value[n][1] + dp[n-1][t-time_value[n][0]]);
                }
            }
        }
        int val_acum = time_value[N][1];
        int t = T-1;
        int max_val = val_acum + dp[N-1][t];
        for(int n=N-1; n>0; n--) {
            val_acum += time_value[n][1];
            t -= time_value[n+1][0];
            if(t < 0) {
                break;
            } else {
                max_val = Math.max(max_val, val_acum + dp[n-1][t]);
            }
        }
        System.out.println(max_val);
    }
}
import java.util.Arrays;
import java.util.Collections;

public class codeforces_621_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(new java.util.Scanner(System.in).nextLine());
        Integer[] lst = Arrays.stream(new java.util.Scanner(System.in).nextLine().split(" ")).mapToInt(Integer::parseInt).boxed().toArray(Integer[]::new);
        Arrays.sort(lst, Collections.reverseOrder());
        int od = 0;
        for (int i : lst) {
            if (i % 2 != 0) {
                od++;
            }
        }
        int sum = 0;
        int ok = 0;
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else {
                if (ok == 0 || od > 1) {
                    sum += lst[i];
                    od--;
                    ok = 1 - ok;
                }
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.close();

        int x = 0;
        if (k <= Math.max(n * n / 2, n * n - (n * n / 2))) {
            System.out.println("YES");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (i % 2 == j % 2 && x < k) {
                        System.out.print('L');
                        x++;
                    } else {
                        System.out.print('S');
                    }
                }
                System.out.println();
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            lst.add(scanner.nextInt());
        }
        List<Integer> lstP = new ArrayList<>();
        List<Integer> lstM = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            if (lst.get(i) > 0) {
                lstP.add(lst.get(i));
            } else if (lst.get(i) < 0) {
                lstM.add(lst.get(i));
            }
        }
        int ans = check(K, lstP, lstM);
        System.out.println(ans);
    }

    private static int check(int K, List<Integer> lstP, List<Integer> lstM) {
        int ans = (int)1e9;
        int lastX = lstP.size();
        int lastY = lstM.size();
        for (int k = 0; k <= K; k++) {
            if (k > lastX || K - k > lastY) {
                continue;
            }
            int p = (k == 0) ? 0 : lstP.get(k - 1);
            int m = (k - lastX == 0) ? 0 : lstM.get(lastY - (K - k));
            ans = Math.min(ans, 2 * p + Math.abs(m), p + 2 * Math.abs(m));
        }
        return ans;
    }
}
import java.util.*;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int[] l2 = new int[n];
        for (int i = 0; i < n; i++) {
            if (l[i] % m == 0) {
                l2[i] = l[i] / m;
            } else {
                l2[i] = l[i] / m + 1;
            }
        }
        int mx = Arrays.stream(l2).max().getAsInt();
        int ind = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] == mx) {
                ind = i;
                break;
            }
        }
        System.out.println(ind + 1);
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }
        int one = 0;
        int zero = 0;
        for (int a : lis) {
            if (a % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }
        long patternA = 0;
        long patternB = 0;
        for (int j = 0; j <= zero; j++) {
            patternB += combi(zero, j);
        }
        for (int time = 0; time <= one; time++) {
            if (time % 2 == P) {
                patternA += combi(one, time);
            }
        }
        System.out.println(patternA * patternB);
    }

    public static long combi(int n, int k) {
        long a = 1;
        for (int i = 0; i < k; i++) {
            a *= n - i;
        }
        for (int j = 0; j < k; j++) {
            a /= j + 1;
        }
        return a;
    }
}
import java.io.*;
import java.util.*;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        for (int i : l) {
            if (i > c) {
                c++;
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.Scanner;

public class atcoder_ARC062_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int numG = 0, numP = 0, score = 0;
        for (char x : s.toCharArray()) {
            if (x == 'g') {
                if (numG - numP > 0) {
                    score += 1;
                    numP += 1;
                } else {
                    score = score;
                    numG += 1;
                }
            } else if (x == 'p') {
                if (numG - numP > 0) {
                    score = score;
                    numP += 1;
                } else {
                    score -= 1;
                    numG += 1;
                }
            }
        }
        System.out.println(score);
    }
}
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class atcoder_ABC114_C {
    static int N;
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        System.out.println(aaa("0"));
    }

    static int aaa(String n) {
        if (Integer.parseInt(n) > N) {
            return 0;
        }
        int ans = 1;
        Set<Character> set = new HashSet<>();
        for (char c : n.toCharArray()) {
            set.add(c);
        }
        if (!set.contains('7') || !set.contains('5') || !set.contains('3')) {
            ans = 0;
        }
        for (char i : "753".toCharArray()) {
            ans += aaa(n + i);
        }
        return ans;
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static int N, M;
    static int[][] balls;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        M = scanner.nextInt();
        balls = new int[N][2];
        for (int i = 0; i < N; i++) {
            balls[i][0] = 0;
            balls[i][1] = 0;
        }
        balls[0][1] = 1;
        for (int i = 0; i < M; i++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            if (balls[x][0] == 1 && balls[x][1] == 1) {
                balls[x][0]--;
                balls[y][1]++;
            } else if (balls[x][0] == 0) {
                balls[x][1]--;
                balls[y][1]++;
            } else {
                balls[x][0]--;
                balls[y][0]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (balls[i][1] == 1) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        if (n % 2 != 0) {
            System.out.println("No");
        } else if (s.substring(0, n / 2).equals(s.substring(n / 2))) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class codeforces_61_B {
    public static boolean valid(int i, int j, int n, int m) {
        if (i < n && i >= 0 && j >= 0 && j < m) {
            return true;
        }
        return false;
    }

    public static int sumn(int i, int n) {
        return (n - i) * (i + n) / 2;
    }

    public static double sqfun(int a, int b, int c) {
        return (-b + Math.sqrt(b * b - 4 * a * c)) / 2 * a;
    }

    public static String f(String s) {
        String r = "";
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '-' && s.charAt(i) != ';' && s.charAt(i) != '_') {
                r += Character.toLowerCase(s.charAt(i));
            }
        }
        return r;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<String> l = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            l.add(f(scanner.next()));
        }
        List<String> permutations = new ArrayList<>();
        permutations(l, 0, l.size(), permutations);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            String input = scanner.next();
            if (permutations.contains(f(input))) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static void permutations(List<String> arr, int i, int n, List<String> permutations) {
        if (i == n - 1) {
            StringBuilder sb = new StringBuilder();
            for (String s : arr) {
                sb.append(s);
            }
            permutations.add(sb.toString());
        } else {
            for (int j = i; j < n; j++) {
                Collections.swap(arr, i, j);
                permutations(arr, i + 1, n, permutations);
                Collections.swap(arr, i, j);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int ans = 0;
        while ((int)Math.pow(10, i) <= N) {
            ans += ((int)Math.pow(10, i) - (int)Math.pow(10, i - 1));
            i += 2;
        }
        ans += Math.max(0, N - (int)Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static int mod = (int)Math.pow(10, 9) + 7;
    static int N;
    static int[] a;

    static int mySign(int x) {
        return (x > 0) ? 1 : -1;
    }

    static void solve() {
        int maxVal = 0;
        int maxSign = 0;
        int maxIndex = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > maxVal) {
                maxVal = Math.abs(a[i]);
                maxSign = mySign(a[i]);
                maxIndex = i;
            }
        }
        if (maxSign == 0) {
            System.out.println(0);
        } else if (maxSign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((maxIndex + 1) + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println((i + 1) + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((maxIndex + 1) + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println(i + " " + (i - 1));
            }
        }
    }

    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = sc.nextInt();
        }
        solve();
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        Map<Character, Integer> even = new HashMap<>();
        Map<Character, Integer> odd = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            if (i % 2 == 0) {
                even.put(s.charAt(i), even.getOrDefault(s.charAt(i), 0) + 1);
            } else {
                odd.put(s.charAt(i), odd.getOrDefault(s.charAt(i), 0) + 1);
            }
        }
        int min = Math.min(s.length() - (even.getOrDefault('0', 0) + odd.getOrDefault('1', 0)),
                s.length() - (even.getOrDefault('1', 0) + odd.getOrDefault('0', 0)));
        System.out.println(min);
    }
}
import java.util.*;

class Task implements Comparable<Task> {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }

    @Override
    public int compareTo(Task other) {
        return this.time - other.time;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();

        PriorityQueue<Task> remaining = new PriorityQueue<>();
        boolean running = false;
        int[] result = new int[n];
        int finishTime = 0;

        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task task = new Task(time, duration, i);
            result[i] = 0;

            if (task.time > finishTime && remaining.isEmpty()) {
                running = true;
                finishTime = task.time + task.duration;
                result[i] = finishTime;
            } else {
                if (task.time >= finishTime && !remaining.isEmpty()) {
                    finishTime = runTask(remaining, finishTime);
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[i] = -1;
                }
            }
        }

        while (!remaining.isEmpty()) {
            finishTime = runTask(remaining, finishTime);
        }

        for (int r : result) {
            System.out.print(r + " ");
        }
    }

    private static int runTask(PriorityQueue<Task> remaining, int finishTime) {
        Task taskToRun = remaining.poll();
        finishTime = Math.max(finishTime, taskToRun.time) + taskToRun.duration;
        return finishTime;
    }
}
import java.util.*;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int pre = Integer.MAX_VALUE;
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            ans += Math.max(0, Math.min(pre - 1, a[i]));
            pre = Math.max(0, Math.min(pre - 1, a[i]));
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int ans = 0;
        if (a[0] > x) {
            System.out.println(0);
            return;
        }
        for (int i : a) {
            if (i > x) {
                x = 0;
                break;
            }
            x -= i;
            ans++;
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println((n * 2 + 1) / 3);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static int mod = (int)Math.pow(10, 9) + 7;

    public static void main (String[] args) throws java.lang.Exception {
        Scanner in = new Scanner(System.in);
        String S = in.next();
        int n = S.length();
        if (n == 1) {
            if (S.equals("5") || S.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            System.exit(0);
        }
        long[][] dp = new long[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (S.charAt(i) != '?') {
                    dp[i][Integer.parseInt(""+S.charAt(i))] += 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] += 1;
                    }
                }
            } else {
                if (S.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(""+S.charAt(i))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= mod;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (dist(points[i], points[j]) % 1 == 0) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }

    public static double dist(int[] x, int[] y) {
        double tmp = 0.0;
        for (int i = 0; i < y.length; i++) {
            tmp += Math.pow(x[i] - y[i], 2);
        }
        return Math.sqrt(tmp);
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long l = 1;
        long r = n;
        while (l < r) {
            long mid = l + (r - l) / 2;
            long idxcnt = mid * (mid + 1) / 2;
            if (idxcnt < n) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l -= 1;
        idxcnt = l * (l + 1) / 2;
        System.out.println((int) (n - idxcnt));
    }
}
import java.util.Scanner;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        for (int i : a) {
            x += i;
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            z += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
100%|██████████| 250/250 [00:00<00:00, 15562.13it/s]
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class codeforces_131_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] s = br.readLine().split(" ");
        Map<Integer, Integer> w = new HashMap<>();
        for (String value : s) {
            int key = Integer.parseInt(value);
            w.put(key, w.getOrDefault(key, 0) + 1);
        }
        int c = 0;
        for (Integer i : w.keySet()) {
            if (i == 0) {
                c += w.get(i) * (w.get(i) - 1);
            } else {
                if (w.containsKey(-i)) {
                    c += w.get(i) * w.get(-i);
                }
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int restoSciolte = 0;
        while (candeleIntere > 0 || restoSciolte >= b) {
            candeleIntere += restoSciolte / b;
            restoSciolte %= b;
            s += candeleIntere;
            restoSciolte += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-6.7b-instruct --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_400_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Filename:  atcoder_ABC120_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC120_C.java' returned non-zero exit status 1.
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC148_F.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC140_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  atcoder_ABC155_E.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 129
Success: ['codeforces_95_A.java', 'atcoder_ABC172_D.java', 'codeforces_216_B.java', 'atcoder_ABC051_A.java', 'codeforces_25_A.java', 'codeforces_678_B.java', 'codeforces_96_B.java', 'codeforces_154_A.java', 'atcoder_ABC143_A.java', 'atcoder_ABC168_B.java', 'atcoder_ABC124_C.java', 'codeforces_609_B.java', 'codeforces_518_B.java', 'atcoder_ABC104_C.java', 'codeforces_653_A.java', 'codeforces_37_A.java', 'atcoder_ABC133_B.java', 'atcoder_ABC171_E.java', 'codeforces_58_B.java', 'atcoder_ABC153_A.java', 'codeforces_682_B.java', 'codeforces_274_A.java', 'atcoder_AGC006_A.java', 'codeforces_287_A.java', 'codeforces_189_A.java', 'codeforces_276_B.java', 'codeforces_629_B.java', 'codeforces_268_A.java', 'codeforces_190_A.java', 'codeforces_400_B.java', 'codeforces_11_A.java', 'codeforces_242_A.java', 'codeforces_79_A.java', 'codeforces_581_B.java', 'atcoder_ABC136_B.java', 'atcoder_ABC123_B.java', 'atcoder_ABC109_B.java', 'codeforces_203_A.java', 'codeforces_32_B.java', 'codeforces_354_A.java', 'codeforces_678_A.java', 'codeforces_340_A.java', 'codeforces_49_A.java', 'atcoder_ABC169_D.java', 'codeforces_342_B.java', 'codeforces_110_B.java', 'codeforces_242_B.java', 'codeforces_333_B.java', 'codeforces_445_A.java', 'atcoder_ABC149_C.java', 'codeforces_31_A.java', 'atcoder_ABC125_C.java', 'codeforces_231_A.java', 'codeforces_705_B.java', 'codeforces_327_A.java', 'codeforces_56_B.java', 'codeforces_607_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC174_E.java', 'codeforces_265_B.java', 'codeforces_131_B.java', 'atcoder_AGC006_B.java', 'codeforces_379_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC151_A.java', 'atcoder_ABC171_B.java', 'atcoder_ABC112_A.java', 'atcoder_ABC124_A.java', 'atcoder_ABC110_C.java', 'atcoder_ABC145_B.java', 'codeforces_146_A.java', 'codeforces_267_A.java', 'atcoder_ABC152_C.java', 'atcoder_AGC035_B.java', 'codeforces_272_B.java', 'atcoder_AGC024_B.java', 'atcoder_ABC158_A.java', 'codeforces_106_B.java', 'atcoder_ABC043_B.java', 'codeforces_282_B.java', 'codeforces_569_A.java', 'codeforces_581_A.java', 'atcoder_ABC174_C.java', 'atcoder_ABC129_E.java', 'codeforces_299_A.java', 'atcoder_ABC108_B.java', 'atcoder_ABC070_B.java', 'atcoder_ABC178_B.java', 'atcoder_ABC122_C.java', 'atcoder_ABC118_C.java', 'atcoder_ABC154_A.java', 'codeforces_669_A.java', 'codeforces_55_A.java', 'atcoder_ABC178_A.java', 'atcoder_AGC014_D.java', 'codeforces_608_A.java', 'codeforces_59_A.java', 'codeforces_147_A.java', 'codeforces_148_B.java', 'codeforces_534_B.java', 'codeforces_92_A.java', 'atcoder_AGC002_A.java', 'codeforces_313_B.java', 'codeforces_356_A.java', 'atcoder_ABC134_E.java', 'codeforces_567_A.java', 'codeforces_369_B.java', 'atcoder_ABC125_A.java', 'atcoder_ABC164_A.java', 'atcoder_AGC033_B.java', 'codeforces_583_B.java', 'atcoder_ABC042_A.java', 'atcoder_ABC139_B.java', 'atcoder_ABC119_B.java', 'atcoder_ABC142_A.java', 'codeforces_612_B.java', 'codeforces_23_B.java', 'atcoder_AGC038_A.java', 'codeforces_70_B.java', 'codeforces_544_B.java', 'codeforces_397_B.java', 'atcoder_ABC165_C.java', 'codeforces_459_B.java', 'atcoder_ABC112_C.java', 'codeforces_546_A.java', 'atcoder_ABC166_C.java', 'codeforces_387_B.java', 'codeforces_61_B.java', 'atcoder_ABC149_B.java']
Fail: ['codeforces_624_B.java', 'atcoder_ABC089_C.java', 'atcoder_AGC027_B.java', 'codeforces_55_B.java', 'codeforces_596_B.java', 'codeforces_450_A.java', 'atcoder_ABC170_A.java', 'atcoder_ABC111_C.java', 'atcoder_ABC162_D.java', 'codeforces_373_B.java', 'atcoder_ABC168_C.java', 'atcoder_AGC046_A.java', 'atcoder_AGC028_B.java', 'atcoder_ABC137_D.java', 'atcoder_ABC145_C.java', 'codeforces_7_B.java', 'atcoder_ABC126_E.java', 'codeforces_598_A.java', 'codeforces_459_A.java', 'codeforces_387_A.java', 'atcoder_AGC007_C.java', 'codeforces_672_A.java', 'atcoder_AGC025_A.java', 'atcoder_AGC005_B.java', 'atcoder_ABC155_E.java', 'atcoder_AGC034_B.java', 'codeforces_302_A.java', 'atcoder_ABC147_D.java', 'codeforces_171_A.java', 'atcoder_ABC150_C.java', 'atcoder_ABC132_A.java', 'atcoder_AGC043_B.java', 'codeforces_421_A.java', 'atcoder_ABC143_D.java', 'atcoder_AGC033_A.java', 'codeforces_579_A.java', 'codeforces_108_B.java', 'codeforces_651_A.java', 'atcoder_ABC169_E.java', 'codeforces_637_A.java', 'atcoder_ABC132_F.java', 'atcoder_AGC011_C.java', 'codeforces_306_A.java', 'atcoder_ABC150_E.java', 'codeforces_629_A.java', 'atcoder_AGC017_A.java', 'atcoder_ABC127_B.java', 'codeforces_644_B.java', 'atcoder_AGC010_B.java', 'codeforces_408_B.java', 'atcoder_ABC146_D.java', 'atcoder_ARC062_B.java', 'atcoder_AGC004_B.java', 'atcoder_AGC029_C.java', 'atcoder_ARC102_C.java', 'codeforces_404_A.java', 'codeforces_412_A.java', 'atcoder_ABC140_F.java', 'atcoder_AGC046_B.java', 'atcoder_AGC013_A.java', 'codeforces_296_A.java', 'atcoder_AGC028_A.java', 'codeforces_334_A.java', 'codeforces_673_A.java', 'codeforces_203_B.java', 'atcoder_ABC152_E.java', 'atcoder_AGC003_C.java', 'atcoder_ABC167_D.java', 'atcoder_ABC164_D.java', 'codeforces_351_A.java', 'codeforces_350_B.java', 'codeforces_134_A.java', 'atcoder_ABC105_D.java', 'codeforces_86_A.java', 'atcoder_ABC155_D.java', 'codeforces_500_A.java', 'atcoder_ABC114_C.java', 'codeforces_99_A.java', 'atcoder_ABC106_C.java', 'atcoder_AGC021_B.java', 'atcoder_ABC127_F.java', 'atcoder_ABC126_D.java', 'atcoder_AGC002_B.java', 'codeforces_462_B.java', 'atcoder_ABC150_D.java', 'atcoder_ABC142_C.java', 'atcoder_ARC086_B.java', 'codeforces_621_A.java', 'atcoder_ABC123_C.java', 'atcoder_ABC169_C.java', 'atcoder_ABC122_D.java', 'codeforces_456_A.java', 'atcoder_ABC133_E.java', 'codeforces_519_B.java', 'atcoder_ABC145_E.java', 'codeforces_665_A.java', 'codeforces_30_A.java', 'atcoder_AGC037_E.java', 'atcoder_ABC123_D.java', 'atcoder_ABC148_F.java', 'codeforces_469_A.java', 'codeforces_474_B.java', 'atcoder_AGC004_D.java', 'atcoder_ABC158_B.java', 'codeforces_617_B.java', 'atcoder_ABC135_D.java', 'atcoder_AGC012_A.java', 'codeforces_514_A.java', 'atcoder_ABC167_C.java', 'codeforces_622_A.java', 'codeforces_8_B.java', 'atcoder_ABC107_C.java', 'codeforces_632_B.java', 'codeforces_400_A.java', 'codeforces_67_B.java', 'codeforces_222_A.java', 'atcoder_ABC107_D.java', 'atcoder_ABC120_C.java', 'atcoder_ABC128_C.java', 'atcoder_AGC019_A.java', 'atcoder_ABC140_D.java', 'atcoder_ABC126_E.java', 'codeforces_86_A.java']
