+ model=codellama/CodeLlama-34b-Instruct-hf
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model codellama/CodeLlama-34b-Instruct-hf --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 08:58:38 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 08-21 08:58:39 [utils.py:326] non-default args: {'model': 'codellama/CodeLlama-34b-Instruct-hf', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 08:58:46 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 08:58:46 [__init__.py:1750] Using max model len 4096
INFO 08-21 08:58:46 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=455647)[0;0m INFO 08-21 08:58:47 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=455647)[0;0m INFO 08-21 08:58:47 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='codellama/CodeLlama-34b-Instruct-hf', speculative_config=None, tokenizer='codellama/CodeLlama-34b-Instruct-hf', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=codellama/CodeLlama-34b-Instruct-hf, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=455647)[0;0m WARNING 08-21 08:58:47 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=455647)[0;0m INFO 08-21 08:58:47 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_21d89505'), local_subscribe_addr='ipc:///tmp/8d0c0c5b-78bd-4849-90c7-f64a7e8ebbb0', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:49 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_f40ad359'), local_subscribe_addr='ipc:///tmp/f9f85b67-996f-4b89-b997-a4f3efb9a891', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:49 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_f67f7045'), local_subscribe_addr='ipc:///tmp/615d3caf-efd9-40d1-b813-a8eeac810617', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:50 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:50 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:50 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:50 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:50 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:50 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:50 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_d1873a7a'), local_subscribe_addr='ipc:///tmp/bae733de-19a8-4fd0-82c7-7f60326aeabb', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:50 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:50 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m WARNING 08-21 08:58:50 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m WARNING 08-21 08:58:50 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:50 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-34b-Instruct-hf...
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:50 [gpu_model_runner.py:1953] Starting to load model codellama/CodeLlama-34b-Instruct-hf...
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:50 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:50 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:50 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:51 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:58:51 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:58:51 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards:  14% Completed | 1/7 [00:01<00:09,  1.65s/it]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards:  29% Completed | 2/7 [00:03<00:08,  1.64s/it]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards:  43% Completed | 3/7 [00:04<00:06,  1.61s/it]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards:  57% Completed | 4/7 [00:06<00:04,  1.62s/it]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards:  71% Completed | 5/7 [00:08<00:03,  1.60s/it]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards:  86% Completed | 6/7 [00:09<00:01,  1.61s/it]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:11<00:00,  1.61s/it]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:11<00:00,  1.61s/it]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m 
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:03 [default_loader.py:262] Loading weights took 11.54 seconds
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:03 [default_loader.py:262] Loading weights took 11.42 seconds
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:03 [gpu_model_runner.py:2007] Model loading took 31.4313 GiB and 12.192553 seconds
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:03 [gpu_model_runner.py:2007] Model loading took 31.4313 GiB and 12.250249 seconds
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:14 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cd409cb529/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:14 [backends.py:559] Dynamo bytecode transform time: 10.69 s
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:14 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/cd409cb529/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:14 [backends.py:559] Dynamo bytecode transform time: 10.70 s
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:22 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 7.729 s
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:22 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 7.749 s
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:24 [monitor.py:34] torch.compile takes 10.69 s in total
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:24 [monitor.py:34] torch.compile takes 10.70 s in total
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:25 [gpu_worker.py:276] Available KV cache memory: 36.36 GiB
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:26 [gpu_worker.py:276] Available KV cache memory: 36.36 GiB
[1;36m(EngineCore_0 pid=455647)[0;0m INFO 08-21 08:59:26 [kv_cache_utils.py:849] GPU KV cache size: 397,088 tokens
[1;36m(EngineCore_0 pid=455647)[0;0m INFO 08-21 08:59:26 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.95x
[1;36m(EngineCore_0 pid=455647)[0;0m INFO 08-21 08:59:26 [kv_cache_utils.py:849] GPU KV cache size: 397,088 tokens
[1;36m(EngineCore_0 pid=455647)[0;0m INFO 08-21 08:59:26 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.95x
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 13.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:04, 15.25it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:03, 15.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 15.89it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 15.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 16.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 16.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:03, 16.72it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:02, 16.76it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 16.70it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 16.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 16.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 16.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 16.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:02, 16.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:02, 15.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:02, 15.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:02, 15.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 15.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 15.12it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 15.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 15.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 15.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:03<00:01, 14.74it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:03<00:01, 14.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:03<00:01, 14.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 14.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 14.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 14.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 14.17it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:04<00:00, 14.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:04<00:00, 14.33it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:04<00:00, 14.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:04<00:00, 15.31it/s]
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:31 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:31 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP1 pid=455655)[0;0m INFO 08-21 08:59:31 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=455647)[0;0m [1;36m(VllmWorker TP0 pid=455653)[0;0m INFO 08-21 08:59:31 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=455647)[0;0m INFO 08-21 08:59:31 [core.py:214] init engine (profile, create kv cache, warmup model) took 27.51 seconds
INFO 08-21 08:59:32 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 8250.59it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  51%|█████     | 127/250 [00:00<00:00, 1265.09it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 578.74it/s] 
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:08<36:03,  8.69s/it, est. speed input: 14.85 toks/s, output: 16.00 toks/s]Processed prompts:   1%|          | 2/250 [00:08<15:29,  3.75s/it, est. speed input: 31.18 toks/s, output: 31.96 toks/s]Processed prompts:   1%|          | 3/250 [00:09<08:39,  2.10s/it, est. speed input: 48.77 toks/s, output: 48.55 toks/s]Processed prompts:   2%|▏         | 4/250 [00:09<05:41,  1.39s/it, est. speed input: 84.54 toks/s, output: 64.68 toks/s]Processed prompts:   2%|▏         | 5/250 [00:09<04:05,  1.00s/it, est. speed input: 96.23 toks/s, output: 80.72 toks/s]Processed prompts:   3%|▎         | 8/250 [00:09<01:41,  2.39it/s, est. speed input: 147.87 toks/s, output: 133.76 toks/s]Processed prompts:   4%|▍         | 11/250 [00:10<00:59,  4.04it/s, est. speed input: 203.36 toks/s, output: 186.77 toks/s]Processed prompts:   6%|▌         | 14/250 [00:10<00:39,  6.03it/s, est. speed input: 243.79 toks/s, output: 239.94 toks/s]Processed prompts:   6%|▋         | 16/250 [00:10<00:32,  7.25it/s, est. speed input: 302.48 toks/s, output: 274.42 toks/s]Processed prompts:   8%|▊         | 20/250 [00:10<00:21, 10.61it/s, est. speed input: 372.37 toks/s, output: 345.40 toks/s]Processed prompts:   9%|▉         | 23/250 [00:10<00:17, 12.92it/s, est. speed input: 434.16 toks/s, output: 399.17 toks/s]Processed prompts:  10%|█         | 26/250 [00:10<00:15, 14.43it/s, est. speed input: 500.12 toks/s, output: 451.71 toks/s]Processed prompts:  12%|█▏        | 29/250 [00:10<00:15, 13.92it/s, est. speed input: 547.76 toks/s, output: 500.28 toks/s]Processed prompts:  14%|█▎        | 34/250 [00:11<00:11, 19.50it/s, est. speed input: 637.53 toks/s, output: 593.54 toks/s]Processed prompts:  15%|█▍        | 37/250 [00:11<00:12, 16.83it/s, est. speed input: 686.37 toks/s, output: 640.32 toks/s]Processed prompts:  16%|█▌        | 40/250 [00:11<00:14, 14.59it/s, est. speed input: 762.21 toks/s, output: 685.29 toks/s]Processed prompts:  17%|█▋        | 42/250 [00:11<00:14, 14.27it/s, est. speed input: 785.34 toks/s, output: 717.35 toks/s]Processed prompts:  18%|█▊        | 46/250 [00:11<00:11, 17.62it/s, est. speed input: 924.22 toks/s, output: 791.09 toks/s]Processed prompts:  20%|██        | 50/250 [00:11<00:09, 21.23it/s, est. speed input: 1088.60 toks/s, output: 866.58 toks/s]Processed prompts:  22%|██▏       | 54/250 [00:12<00:08, 23.32it/s, est. speed input: 1196.11 toks/s, output: 940.62 toks/s]Processed prompts:  24%|██▍       | 61/250 [00:12<00:06, 28.00it/s, est. speed input: 1382.41 toks/s, output: 1073.15 toks/s]Processed prompts:  26%|██▌       | 64/250 [00:12<00:07, 26.49it/s, est. speed input: 1447.45 toks/s, output: 1125.47 toks/s]Processed prompts:  28%|██▊       | 69/250 [00:12<00:06, 27.97it/s, est. speed input: 1529.22 toks/s, output: 1218.31 toks/s]Processed prompts:  29%|██▉       | 73/250 [00:12<00:05, 30.35it/s, est. speed input: 1592.95 toks/s, output: 1295.50 toks/s]Processed prompts:  31%|███       | 78/250 [00:12<00:05, 32.43it/s, est. speed input: 1666.42 toks/s, output: 1391.07 toks/s]Processed prompts:  33%|███▎      | 82/250 [00:12<00:04, 33.84it/s, est. speed input: 1739.64 toks/s, output: 1468.53 toks/s]Processed prompts:  34%|███▍      | 86/250 [00:13<00:06, 24.27it/s, est. speed input: 1797.47 toks/s, output: 1525.20 toks/s]Processed prompts:  36%|███▌      | 89/250 [00:13<00:06, 25.26it/s, est. speed input: 1913.97 toks/s, output: 1580.91 toks/s]Processed prompts:  37%|███▋      | 92/250 [00:13<00:06, 26.22it/s, est. speed input: 1995.00 toks/s, output: 1637.05 toks/s]Processed prompts:  38%|███▊      | 95/250 [00:13<00:05, 27.00it/s, est. speed input: 2069.07 toks/s, output: 1693.26 toks/s]Processed prompts:  39%|███▉      | 98/250 [00:13<00:05, 27.63it/s, est. speed input: 2122.71 toks/s, output: 1749.71 toks/s]Processed prompts:  41%|████      | 102/250 [00:13<00:05, 28.99it/s, est. speed input: 2229.79 toks/s, output: 1826.16 toks/s]Processed prompts:  42%|████▏     | 106/250 [00:13<00:05, 25.27it/s, est. speed input: 2322.98 toks/s, output: 1892.88 toks/s]Processed prompts:  44%|████▎     | 109/250 [00:14<00:05, 23.73it/s, est. speed input: 2349.79 toks/s, output: 1943.22 toks/s]Processed prompts:  45%|████▌     | 113/250 [00:14<00:05, 24.75it/s, est. speed input: 2392.18 toks/s, output: 2017.47 toks/s]Processed prompts:  46%|████▋     | 116/250 [00:14<00:05, 22.36it/s, est. speed input: 2447.94 toks/s, output: 2065.32 toks/s]Processed prompts:  48%|████▊     | 119/250 [00:14<00:05, 22.96it/s, est. speed input: 2482.19 toks/s, output: 2120.29 toks/s]Processed prompts:  49%|████▉     | 122/250 [00:14<00:05, 23.40it/s, est. speed input: 2502.34 toks/s, output: 2175.15 toks/s]Processed prompts:  50%|█████     | 125/250 [00:14<00:05, 21.45it/s, est. speed input: 2533.74 toks/s, output: 2222.76 toks/s]Processed prompts:  52%|█████▏    | 130/250 [00:14<00:04, 26.72it/s, est. speed input: 2619.14 toks/s, output: 2327.16 toks/s]Processed prompts:  53%|█████▎    | 133/250 [00:15<00:04, 26.31it/s, est. speed input: 2680.45 toks/s, output: 2382.62 toks/s]Processed prompts:  55%|█████▍    | 137/250 [00:15<00:03, 28.42it/s, est. speed input: 2771.21 toks/s, output: 2463.24 toks/s]Processed prompts:  56%|█████▌    | 140/250 [00:15<00:04, 22.64it/s, est. speed input: 2809.32 toks/s, output: 2504.42 toks/s]Processed prompts:  58%|█████▊    | 145/250 [00:15<00:03, 27.76it/s, est. speed input: 2887.61 toks/s, output: 2611.20 toks/s]Processed prompts:  60%|█████▉    | 149/250 [00:15<00:03, 28.22it/s, est. speed input: 2973.49 toks/s, output: 2689.85 toks/s]Processed prompts:  61%|██████    | 153/250 [00:15<00:04, 22.21it/s, est. speed input: 3017.15 toks/s, output: 2746.27 toks/s]Processed prompts:  62%|██████▏   | 156/250 [00:16<00:05, 16.71it/s, est. speed input: 3047.96 toks/s, output: 2769.97 toks/s]Processed prompts:  64%|██████▎   | 159/250 [00:16<00:04, 18.83it/s, est. speed input: 3083.95 toks/s, output: 2831.38 toks/s]Processed prompts:  65%|██████▌   | 163/250 [00:16<00:04, 19.47it/s, est. speed input: 3201.14 toks/s, output: 2903.82 toks/s]Processed prompts:  66%|██████▋   | 166/250 [00:16<00:04, 20.42it/s, est. speed input: 3255.49 toks/s, output: 2961.27 toks/s]Processed prompts:  68%|██████▊   | 171/250 [00:16<00:03, 22.99it/s, est. speed input: 3349.76 toks/s, output: 3063.56 toks/s]Processed prompts:  70%|██████▉   | 174/250 [00:17<00:04, 17.72it/s, est. speed input: 3362.13 toks/s, output: 3093.24 toks/s]Processed prompts:  71%|███████   | 178/250 [00:17<00:03, 21.43it/s, est. speed input: 3471.17 toks/s, output: 3183.29 toks/s]Processed prompts:  73%|███████▎  | 182/250 [00:17<00:02, 23.09it/s, est. speed input: 3527.87 toks/s, output: 3266.21 toks/s]Processed prompts:  74%|███████▍  | 185/250 [00:17<00:03, 20.28it/s, est. speed input: 3542.28 toks/s, output: 3311.01 toks/s]Processed prompts:  76%|███████▋  | 191/250 [00:17<00:02, 27.98it/s, est. speed input: 3757.16 toks/s, output: 3458.95 toks/s]Processed prompts:  78%|███████▊  | 195/250 [00:17<00:02, 22.08it/s, est. speed input: 3799.29 toks/s, output: 3518.00 toks/s]Processed prompts:  79%|███████▉  | 198/250 [00:18<00:02, 22.82it/s, est. speed input: 3881.34 toks/s, output: 3579.99 toks/s]Processed prompts:  80%|████████  | 201/250 [00:18<00:02, 23.48it/s, est. speed input: 3908.23 toks/s, output: 3642.22 toks/s]Processed prompts:  82%|████████▏ | 204/250 [00:18<00:02, 18.79it/s, est. speed input: 3955.20 toks/s, output: 3678.51 toks/s]Processed prompts:  83%|████████▎ | 207/250 [00:18<00:02, 18.44it/s, est. speed input: 3973.99 toks/s, output: 3731.94 toks/s]Processed prompts:  84%|████████▍ | 210/250 [00:18<00:02, 19.51it/s, est. speed input: 4103.18 toks/s, output: 3793.02 toks/s]Processed prompts:  85%|████████▌ | 213/250 [00:18<00:01, 18.98it/s, est. speed input: 4144.40 toks/s, output: 3846.60 toks/s]Processed prompts:  86%|████████▋ | 216/250 [00:19<00:01, 17.58it/s, est. speed input: 4165.78 toks/s, output: 3894.21 toks/s]Processed prompts:  88%|████████▊ | 219/250 [00:19<00:01, 17.85it/s, est. speed input: 4225.40 toks/s, output: 3950.25 toks/s]Processed prompts:  88%|████████▊ | 221/250 [00:19<00:01, 16.83it/s, est. speed input: 4212.65 toks/s, output: 3980.97 toks/s]Processed prompts:  89%|████████▉ | 223/250 [00:19<00:02, 12.61it/s, est. speed input: 4223.31 toks/s, output: 3983.82 toks/s]Processed prompts:  90%|█████████ | 225/250 [00:19<00:01, 13.76it/s, est. speed input: 4270.93 toks/s, output: 4023.64 toks/s]Processed prompts:  91%|█████████ | 228/250 [00:19<00:01, 14.31it/s, est. speed input: 4291.54 toks/s, output: 4076.26 toks/s]Processed prompts:  92%|█████████▏| 230/250 [00:20<00:02,  9.73it/s, est. speed input: 4246.36 toks/s, output: 4058.47 toks/s]Processed prompts:  93%|█████████▎| 232/250 [00:20<00:01,  9.29it/s, est. speed input: 4239.53 toks/s, output: 4074.16 toks/s]Processed prompts:  94%|█████████▎| 234/250 [00:20<00:01,  8.28it/s, est. speed input: 4268.57 toks/s, output: 4077.49 toks/s]Processed prompts:  94%|█████████▍| 235/250 [00:21<00:01,  7.75it/s, est. speed input: 4242.59 toks/s, output: 4076.69 toks/s]Processed prompts:  95%|█████████▍| 237/250 [00:21<00:01,  7.77it/s, est. speed input: 4245.85 toks/s, output: 4092.84 toks/s]Processed prompts:  96%|█████████▌| 239/250 [00:21<00:01,  7.40it/s, est. speed input: 4251.93 toks/s, output: 4101.82 toks/s]Processed prompts:  96%|█████████▋| 241/250 [00:22<00:01,  5.23it/s, est. speed input: 4191.74 toks/s, output: 4051.67 toks/s]Processed prompts:  98%|█████████▊| 244/250 [00:24<00:02,  2.60it/s, est. speed input: 3935.04 toks/s, output: 3812.19 toks/s]Processed prompts:  98%|█████████▊| 245/250 [00:25<00:02,  2.26it/s, est. speed input: 3864.46 toks/s, output: 3735.19 toks/s]Processed prompts:  98%|█████████▊| 246/250 [00:26<00:02,  1.54it/s, est. speed input: 3661.78 toks/s, output: 3554.80 toks/s]Processed prompts:  99%|█████████▉| 247/250 [00:27<00:02,  1.31it/s, est. speed input: 3517.43 toks/s, output: 3443.48 toks/s]Processed prompts:  99%|█████████▉| 248/250 [01:02<00:17,  8.60s/it, est. speed input: 1576.94 toks/s, output: 1579.99 toks/s]Processed prompts: 100%|█████████▉| 249/250 [01:15<00:09,  9.75s/it, est. speed input: 1305.35 toks/s, output: 1355.43 toks/s]Processed prompts: 100%|██████████| 250/250 [01:17<00:00,  7.66s/it, est. speed input: 1277.90 toks/s, output: 1375.33 toks/s]Processed prompts: 100%|██████████| 250/250 [01:17<00:00,  7.66s/it, est. speed input: 1277.90 toks/s, output: 1375.33 toks/s]Processed prompts: 100%|██████████| 250/250 [01:17<00:00,  3.22it/s, est. speed input: 1277.90 toks/s, output: 1375.33 toks/s]
+ python3 clean_generations_translation.py --model codellama/CodeLlama-34b-Instruct-hf --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    public static int bfs(int v, int N, List<List<Integer>> G, Map<Pair<Integer, Integer>, Integer> E) {
        boolean[] visited = new boolean[N];
        Deque<Integer> queue = new ArrayDeque<>();
        int K = -1;
        int[] node2color = new int[N];
        queue.add(v);
        visited[v] = true;
        while (!queue.isEmpty()) {
            int q = queue.remove();
            int color = 0;
            for (int nex : G.get(q)) {
                if (visited[nex]) {
                    continue;
                }
                visited[nex] = true;
                color++;
                if (color == node2color[q]) {
                    color++;
                }
                node2color[nex] = color;
                E.put(new Pair<>(Math.min(q, nex), Math.max(q, nex)), color);
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> G = new ArrayList<>();
        Map<Pair<Integer, Integer>, Integer> E = new HashMap<>();
        for (int i = 0; i < N - 1; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            G.get(a).add(b);
            G.get(b).add(a);
            E.put(new Pair<>(Math.min(a, b), Math.max(a, b)), 0);
        }
        int K = bfs(0, N, G, E);
        System.out.println(K);
        for (int value : E.values()) {
            System.out.println(value);
        }
    }
}
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");
        String input = "100000000 JPY";
        try {
            Object result = engine.eval(input);
            System.out.println(result);
        } catch (ScriptException e) {
            e.printStackTrace();
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = 1000000;
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextLong();
        }
        long[] fact = new long[M];
        fact[0] = 1;
        for (int n = 1; n < M; n++) {
            fact[n] = (fact[n - 1] * n) % M;
        }
        long[] inv = new long[N];
        for (int i = 0; i < N; i++) {
            inv[i] = (int)Math.pow(i + 1, M - 2, M);
        }
        inv = cumsum(inv);
        long[] temp = new long[N];
        for (int i = 0; i < N; i++) {
            temp[i] = (inv[i] + inv[N - 1 - i] - 1) % M;
        }
        long ans = 0;
        for (int i = 0; i < N; i++) {
            ans = (ans + (A[i] * temp[i]) % M) % M;
        }
        ans = (ans * fact[N]) % M;
        System.out.println(ans);
    }

    public static long[] cumsum(long[] arr) {
        long[] result = new long[arr.length];
        result[0] = arr[0];
        for (int i = 1; i < arr.length; i++) {
            result[i] = (result[i - 1] + arr[i]) % M;
        }
        return result;
    }
}
import java.util.Scanner;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int s = sc.nextInt();
        int q = sc.nextInt();
        int ans = 0;
        while (s < t) {
            s *= q;
            ans++;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            ls_xyh[i][0] = scanner.nextInt();
            ls_xyh[i][1] = scanner.nextInt();
            ls_xyh[i][2] = scanner.nextInt();
        }

        int x0 = -1;
        int y0 = -1;
        int h0 = -1;
        for (int i = 0; i < n; i++) {
            if (ls_xyh[i][2] > 0) {
                x0 = ls_xyh[i][0];
                y0 = ls_xyh[i][1];
                h0 = ls_xyh[i][2];
                break;
            }
        }

        int[][] cands = new int[101][101][101];
        for (int cx = 0; cx < 101; cx++) {
            for (int cy = 0; cy < 101; cy++) {
                for (int ch = 0; ch < 101; ch++) {
                    cands[cx][cy][ch] = Math.max(ch - Math.abs(cx - x0) - Math.abs(cy - y0), 0);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            int x = ls_xyh[i][0];
            int y = ls_xyh[i][1];
            int h = ls_xyh[i][2];
            for (int cx = 0; cx < 101; cx++) {
                for (int cy = 0; cy < 101; cy++) {
                    for (int ch = 0; ch < 101; ch++) {
                        if (cands[cx][cy][ch] == h) {
                            cands[cx][cy][ch] = Math.max(ch - Math.abs(cx - x) - Math.abs(cy - y), 0);
                        }
                    }
                }
            }
        }

        int xx = -1;
        int yy = -1;
        int hh = -1;
        for (int cx = 0; cx < 101; cx++) {
            for (int cy = 0; cy < 101; cy++) {
                for (int ch = 0; ch < 101; ch++) {
                    if (cands[cx][cy][ch] == h0) {
                        xx = cx;
                        yy = cy;
                        hh = ch;
                        break;
                    }
                }
            }
        }

        System.out.println(xx + " " + yy + " " + hh);
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }

        int ans = 1000000000;
        for (int i = 0; i < (1 << D); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((i & (1 << j)) != 0) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((i & (1 << j)) == 0) {
                    int tmp = (left + (100 * (j + 1)) - 1) / (100 * (j + 1));
                    ans = Math.min(ans, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int vamshi = sc.nextInt();
        int z = sc.nextInt();
        System.out.println((vamshi / z + 1) * z);
    }
}
import java.util.Scanner;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            String x = sc.next();
            int[] s = new int[x.length()];
            for (int j = 0; j < x.length(); j++) {
                if (x.charAt(j) == 'O') {
                    s[j] = 0;
                } else {
                    s[j] = 1;
                }
            }
            int[] tot = new int[12];
            for (int a = 1; a <= 12; a++) {
                if (12 % a == 0) {
                    int b = 12 / a;
                    if (help(a, b, s)) {
                        tot[a - 1] = b;
                    }
                }
            }
            System.out.print(tot.length + " ");
            for (int a : tot) {
                System.out.print(a + "x" + (12 / a) + " ");
            }
            System.out.println();
        }
    }

    public static boolean help(int a, int b, int[] s) {
        int[][] tot = new int[b][a];
        for (int i = 0; i < b; i++) {
            for (int j = 0; j < a; j++) {
                tot[i][j] = s[i * a + j];
            }
        }
        for (int i = 0; i < b; i++) {
            for (int j = 0; j < a; j++) {
                if (tot[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        int[] cumulativeRemainders = new int[N + 1];
        for (int i = 0; i < N; i++) {
            cumulativeRemainders[i + 1] = (cumulativeRemainders[i] + A[i]) % M;
        }

        HashMap<Integer, Integer> remainderCounts = new HashMap<>();
        for (int i = 0; i < N; i++) {
            int remainder = cumulativeRemainders[i + 1] - cumulativeRemainders[i];
            if (remainderCounts.containsKey(remainder)) {
                remainderCounts.put(remainder, remainderCounts.get(remainder) + 1);
            } else {
                remainderCounts.put(remainder, 1);
            }
        }

        int combinations = 0;
        for (int count : remainderCounts.values()) {
            combinations += count * (count - 1) / 2;
        }

        System.out.println(combinations);
    }
}
import java.util.Scanner;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int s_r = sc.nextInt();
        int s_c = sc.nextInt();
        String S = sc.next();
        String T = sc.next();

        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;

        for (int x = 0; x < N; x++) {
            if (S.charAt(x) == 'L') {
                S_L++;
                if (S_L - T_R - s_c == 0) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'R') {
                S_R++;
                if (s_c + (S_R - T_L) == W + 1) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'U') {
                S_U++;
                if (S_U - T_D - s_r == 0) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'D') {
                S_D++;
                if (s_r + (S_D - T_U) == H + 1) {
                    Judge = true;
                }
            }

            if (T.charAt(x) == 'L') {
                if (S_R - T_L + s_c != 1) {
                    T_L++;
                }
            } else if (T.charAt(x) == 'R') {
                if (s_c + (T_R - S_L) != W) {
                    T_R++;
                }
            } else if (T.charAt(x) == 'U') {
                if (S_D - T_U + s_r != 1) {
                    T_U++;
                }
            } else if (T.charAt(x) == 'D') {
                if (s_r + (T_D - S_U) != H) {
                    T_D++;
                }
            }
        }

        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class codeforces_55_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        while (n % 2 == 0) {
            n /= 2;
        }
        if (n == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int k = scanner.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.Scanner;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[][] s = new String[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                s[i][j] = sc.next();
            }
        }

        boolean flag = true;
        String[] d1 = new String[n];
        String[] d2 = new String[n];
        Set<String> rem = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    d1[i] = s[i][j];
                } else if (i == n - j - 1) {
                    d2[i] = s[i][j];
                } else {
                    rem.add(s[i][j]);
                }
            }
        }

        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!Arrays.equals(d1, d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(Arrays.asList(d1)).size() != 1) {
            System.out.println("NO");
        } else if (rem.containsAll(Arrays.asList(d1))) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int D = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = B; j <= D; j++) {
                d[i][j] += (d[i][j - 1] * i + d[i - 1][j] * j - d[i - 1][j - 1] * (i - 1) * (j - 1)) % m;
            }
        }
        System.out.println(d[C][D]);
    }
}
Test case:
import java.util.*;

public class atcoder_AGC021_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] X = new int[N];
        int[] Y = new int[N];
        for (int i = 0; i < N; i++) {
            X[i] = sc.nextInt();
            Y[i] = sc.nextInt();
        }

        for (int i = 0; i < N; i++) {
            double angle = Math.atan2(X[i] - X[0], Y[i] - Y[0]);
            System.out.println(angle / (2 * Math.PI));
        }
    }
}
import java.util.*;
import java.util.Combinatorics;

public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }

        String[] march = {"M", "A", "R", "C", "H"};
        int[] marchLis = new int[5];
        for (String str : s) {
            if (str.charAt(0) >= 'A' && str.charAt(0) <= 'Z') {
                marchLis[march.indexOf(str.charAt(0))]++;
            }
        }

        int ans = 0;
        for (int[] combination : Combinatorics.combinations(marchLis, 3)) {
            int x = combination[0];
            int y = combination[1];
            int z = combination[2];
            if (x != y && y != z && z != x) {
                ans += x * y * z;
            }
        }

        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        int ans = 0;
        for (int i = 1; i < N - 1; i++) {
            if ((A[i - 1] < A[i] && A[i] > A[i + 1]) || (A[i - 1] > A[i] && A[i] < A[i + 1])) {
                ans++;
            }
        }

        System.out.println(ans + 1);
    }
}
import java.util.Scanner;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }

        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = 1;
        }

        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l[lst[i]] > 1) {
                res += n - i - l[lst[i]];
                l[lst[i]]--;
            } else {
                res += n - i - 1;
            }
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        int rNum = 0, gNum = 0, bNum = 0, sum = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'R') {
                rNum++;
            } else if (s.charAt(i) == 'G') {
                gNum++;
            } else if (s.charAt(i) == 'B') {
                bNum++;
            }
        }
        for (int step = 1; step <= n / 2; step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String s1 = s.substring(i, i + step);
                String s2 = s.substring(i + step, i + 2 * step);
                String s3 = s.substring(i + 2 * step, i + 3 * step);
                if (s1.equals("RGB") || s1.equals("RBG") || s1.equals("BGR") || s1.equals("BRG") || s1.equals("GBR") || s1.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(rNum * gNum * bNum - sum);
    }
}
import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

public class atcoder_AGC014_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] adj = new int[n + 1][n + 1];
        for (int i = 0; i < n - 1; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            adj[a][b] = 1;
            adj[b][a] = 1;
        }

        Deque<Integer> que = new LinkedList<>();
        que.add(1);
        int[] seen = new int[n + 1];
        int[] par = new int[n + 1];
        int[] childNum = new int[n + 1];
        while (!que.isEmpty()) {
            int v = que.removeFirst();
            for (int u = 0; u < n; u++) {
                if (adj[v][u] == 1 && seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    childNum[v]++;
                    que.addLast(u);
                }
            }
        }

        Deque<Integer> seq = new LinkedList<>();
        for (int i = 1; i <= n; i++) {
            if (childNum[i] == 0) {
                seq.addLast(i);
            }
        }

        while (!seq.isEmpty()) {
            int c = seq.removeFirst();
            seen[c] = 0;
            if (seen[par[c]] == 0) {
                System.out.println("First");
                return;
            }
            seen[par[c]] = 0;
            childNum[par[par[c]]]--;
            if (childNum[par[par[c]]] == 0) {
                seq.addLast(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String output = solve(input);
        System.out.println(output);
    }

    public static String solve(String input) {
        String[] letters = "abcdefghijklmnopqrstuvwxyz".split(" ");
        int index = letters.indexOf(input);
        return letters[index + 1];
    }
}
import java.util.Scanner;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int[] ans = new int[n];
        int mx = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            ans[i] = Math.max(0, mx - arr[i] + 1);
            if (arr[i] > mx) {
                mx = arr[i];
            }
        }

        for (int i = 0; i < n; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Deque;
import java.util.ArrayDeque;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        List<List<Integer>> edge = new ArrayList<>(N);
        for (int i = 0; i < N; i++) {
            edge.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge.get(X).add(Y);
            edge.get(Y).add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Deque<Integer> queue = new ArrayDeque<>();
                queue.add(i);
                while (!queue.isEmpty()) {
                    int node = queue.removeFirst();
                    used[node] = true;
                    for (int nextnode : edge.get(node)) {
                        if (!used[nextnode]) {
                            queue.add(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.stream.Collectors;

public class atcoder_ABC118_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<Integer> A = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            A.add(sc.nextInt());
        }

        Map<Integer, Integer> gcdMap = new HashMap<>();
        for (int i = 0; i < A.size(); i++) {
            int gcd = gcd(A.get(i), A.get((i + 1) % A.size()));
            gcdMap.put(gcd, gcdMap.getOrDefault(gcd, 0) + 1);
        }

        int maxCount = 0;
        int maxGcd = 0;
        for (Map.Entry<Integer, Integer> entry : gcdMap.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                maxGcd = entry.getKey();
            }
        }

        System.out.println(maxGcd);
    }

    private static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int mod = 1000000007;

        int[] coef = new int[n];
        for (int i = 1; i <= n; i++) {
            coef[i - 1] = (n / i) - (n / (i + 1));
        }
        coef[n - 1] = 1;

        int[][] dp = new int[k + 1][n];
        dp[0][0] = 1;

        for (int i = 1; i <= k; i++) {
            int tmp = 0;
            for (int j = n - 1; j >= 0; j--) {
                tmp += dp[i - 1][(n - 1) - j];
                tmp %= mod;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= mod;
            }
        }

        int result = 0;
        for (int i = 0; i < n; i++) {
            result += dp[k][i];
            result %= mod;
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int min = Math.min(a, b);
        int max = Math.max(a, b);
        System.out.println(min + " " + (max - min) / 2);
    }
}
import java.util.Scanner;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int i = 1;
        while (m >= i) {
            m -= i;
            i = (i % n) + 1;
        }
        System.out.println(m);
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] numbers = input.split(" ");
        int[] a = new int[numbers.length];
        for (int i = 0; i < numbers.length; i++) {
            a[i] = Integer.parseInt(numbers[i]);
        }
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 0) {
                System.out.println(i + 1);
                break;
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        for (int i = 0; i < n - 2; i++) {
            if (l[i] + 1 == l[i + 1] && l[i] + 2 == l[i + 2]) {
                System.out.println("YES");
                break;
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String recordOfMovements = scanner.nextLine();
        int x = 0, y = 0;
        Map<Character, int[]> dMovement = new HashMap<>();
        dMovement.put('L', new int[] {0, -1});
        dMovement.put('R', new int[] {0, 1});
        dMovement.put('U', new int[] {1, 0});
        dMovement.put('D', new int[] {-1, 0});
        Map<String, Boolean> d = new HashMap<>();
        d.put("", false);
        boolean bug = false;
        for (char move : recordOfMovements.toCharArray()) {
            int[] temp = new int[] {x, y};
            x += dMovement.get(move)[0];
            y += dMovement.get(move)[1];
            if (!d.containsKey(x + "," + y)) {
                for (char step : dMovement.keySet()) {
                    if (x + dMovement.get(step)[0] != temp[0] && y + dMovement.get(step)[1] != temp[1] && d.containsKey(x + dMovement.get(step)[0] + "," + y + dMovement.get(step)[1])) {
                        bug = true;
                        break;
                    }
                }
            } else {
                bug = true;
            }
            if (bug) {
                break;
            }
            d.put(x + "," + y, false);
        }
        if (bug) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] number = new int[n];
        for (int i = 0; i < n; i++) {
            number[i] = sc.nextInt();
        }

        int h1 = 0;
        int h2 = 0;
        for (int i = 0; i < n / 2; i++) {
            h1 += number[i];
        }
        for (int i = n / 2; i < n; i++) {
            h2 += number[i];
        }

        if (h1 == h2) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        int min = arr[0];
        for (int i = 1; i < n; i++) {
            if (arr[i] < min) {
                min = arr[i];
            }
        }

        System.out.println(min);
    }
}
import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();

        int yay = 0;
        int whoops = 0;

        // Create a map to store the frequency of each letter in s
        Map<Character, Integer> freqs = new HashMap<>();
        for (char c : s.toCharArray()) {
            if (freqs.containsKey(c)) {
                freqs.put(c, freqs.get(c) + 1);
            } else {
                freqs.put(c, 1);
            }
        }

        // Create a map to store the frequency of each letter in t
        Map<Character, Integer> freqt = new HashMap<>();
        for (char c : t.toCharArray()) {
            if (freqt.containsKey(c)) {
                freqt.put(c, freqt.get(c) + 1);
            } else {
                freqt.put(c, 1);
            }
        }

        // Iterate through the letters in s and t and compare their frequencies
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && freqt.containsKey(c) && freqt.get(c) > 0) {
                yay++;
                freqs.put(c, freqs.get(c) - 1);
                freqt.put(c, freqt.get(c) - 1);
            }
        }

        // Iterate through the letters in s and t and compare their frequencies
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (Character.isLowerCase(c) && freqt.containsKey(Character.toUpperCase(c)) && freqt.get(Character.toUpperCase(c)) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toUpperCase(c), freqt.get(Character.toUpperCase(c)) - 1);
                } else if (Character.isUpperCase(c) && freqt.containsKey(Character.toLowerCase(c)) && freqt.get(Character.toLowerCase(c)) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toLowerCase(c), freqt.get(Character.toLowerCase(c)) - 1);
                } else {
                    break;
                }
            }
        }

        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        int[] lista = new int[n];
        int[] listb = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = sc.nextInt();
            listb[i] = sc.nextInt();
        }
        for (int k = 0; k < n; k++) {
            if (k + 1 in lista) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();

        int lcm = lcm(x, y);
        int result = (b / lcm) - ((a - 1) / lcm);
        System.out.println(result);
    }

    public static int lcm(int a, int b) {
        while (a % b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return b;
    }
}
import java.util.Scanner;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextInt();
        }

        boolean[] flag = new boolean[N];
        int[] cur = new int[N];
        cur[0] = S[0];
        flag[0] = false;

        for (int i = 1; i < N; i++) {
            int j = 0;
            int jM = cur.length;
            for (int k = 0; k < N; k++) {
                if (flag[k] && S[k] < cur[j]) {
                    cur[j] = S[k];
                    j++;
                    flag[k] = false;
                    if (j == jM) {
                        break;
                    }
                }
            }
            if (j < jM) {
                System.out.println("No");
                return;
            }
            cur = sort(cur);
        }
        System.out.println("Yes");
    }

    public static int[] sort(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] > arr[j]) {
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        return arr;
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v1 = sc.nextInt();
        int v2 = sc.nextInt();
        int t = sc.nextInt();
        int d = sc.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        for (int i = 0; i < t; i++) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
            distance += v;
            v += a * d;
        }
        System.out.println(distance);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_672_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> li = new ArrayList<>();
        for (int i = 1; i <= 371; i++) {
            int count = 0;
            int p = i;
            int q = i;
            while (p != 0) {
                p /= 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                li.addAll(temp);
            } else if (count == 3) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        System.out.println(li.get(n - 1));
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int princess = sc.nextInt();
        int dragon = sc.nextInt();
        int t = sc.nextInt();
        int f = sc.nextInt();
        int c = sc.nextInt();

        if (dragon <= princess) {
            System.out.println(0);
            return;
        }

        int result = 0;
        int position = t * princess;
        position += princess * position / (dragon - princess);

        while (position < c) {
            result++;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String txt = sc.nextLine();
        int cu = 0;
        int cl = 0;
        for (int i = 0; i < txt.length(); i++) {
            char z = txt.charAt(i);
            if (Character.isLowerCase(z)) {
                cl++;
            } else {
                cu++;
            }
        }
        if (cu > cl) {
            System.out.println(txt.toUpperCase());
        } else {
            System.out.println(txt.toLowerCase());
        }
    }
}
import java.util.Scanner;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // read the first line of input
        int n = sc.nextInt();

        // read the second line of input
        String[] strArr = sc.nextLine().split(" ");

        // create a list to store the numbers
        List<Integer> list = new ArrayList<>();

        // loop through the input and add the numbers to the list
        for (int i = 0; i < n; i++) {
            list.add(Integer.parseInt(strArr[i]));
        }

        // read the third line of input
        String[] strArr2 = sc.nextLine().split(" ");

        // loop through the input and print the numbers
        for (int i = 0; i < strArr2.length; i++) {
            System.out.println(list.get(Integer.parseInt(strArr2[i]) - 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            lst[i] = subtract(a, b);
        }
        for (int i = 0; i < n; i++) {
            System.out.println(lst[i]);
        }
    }

    public static int subtract(int a, int b) {
        if (a > b) {
            int total = 0;
            while (a > 0 && b > 0) {
                total += a / b;
                a = a % b;
                if (a > 0) {
                    total += b / a;
                    b = b % a;
                }
            }
            return total;
        } else if (a < b) {
            int total = 0;
            while (a > 0 && b > 0) {
                total += b / a;
                b = b % a;
                if (b > 0) {
                    total += a / b;
                    a = a % b;
                }
            }
            return total;
        } else {
            return 1;
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int ans = 0;
        for (int i = 1; i <= N; i++) {
            ans += i * (N / i) * (N / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int age = sc.nextInt();
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int a = sc.nextInt();
            int b = sc.nextInt();
            System.out.println(a + b);
        }
    }
}
import java.util.Scanner;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        int ans = n - 1;
        int last = 0;
        for (int i = 0; i < n; i++) {
            ans += Math.abs(last - l[i]) + 1;
            last = l[i];
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();

        if (s < f) {
            int d = 1;
            String c = "R";
        } else {
            int d = -1;
            String c = "L";
        }

        String res = "";
        int i = 1;
        int j = s;
        int t, l, r;
        int k = 1;

        while (j != f) {
            if (i > t && k < m) {
                t = sc.nextInt();
                l = sc.nextInt();
                r = sc.nextInt();
                k++;
            }

            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res += "X";
            } else {
                res += c;
                j += d;
            }

            i++;
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];

        for (int i = 0; i < m; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            int x = sc.nextInt();
            int t = l;
            while (t <= r) {
                int nextVal = comp[t - 1];
                if (out[t - 1] == 0 && t != x) {
                    out[t - 1] = x;
                }
                comp[t - 1] = r + 1;
                if (t >= x) {
                    comp[t - 1] = x;
                }
                t = nextVal;
            }
        }

        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tc = scanner.nextInt();
        while (tc > 0) {
            int a = scanner.nextInt();
            if (a == 0) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            tc--;
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int mod = 1000000007;
        int N = sc.nextInt();
        int A = sc.nextInt();
        int B = sc.nextInt();
        int ans = 0;
        int rep = N / (A + B);
        ans += rep * A;
        int res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] m = sc.nextLine().split(" ");
        boolean possible = true;
        for (String i : m) {
            if (m.count(i) >= n / 2 + 1) {
                possible = false;
                break;
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.Scanner;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int h = sc.nextInt();
        int s = sc.nextInt();
        int d = sc.nextInt();
        int n = sc.nextInt();

        int best1L = Math.min(q * 4, h * 2, s);
        int best2L = Math.min(d, best1L * 2);

        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC134_E {
    public static int binarySearch(int key, int[][] ans) {
        int bad = -1, good = ans.length;
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (ans[mid][ans[mid].length - 1] < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] ans = new int[N][];
        for (int i = 0; i < N; i++) {
            int A = sc.nextInt();
            int idx = binarySearch(A, ans);
            if (idx == ans.length) {
                ans[idx] = new int[1];
                ans[idx][0] = A;
            } else {
                ans[idx] = Arrays.copyOf(ans[idx], ans[idx].length + 1);
                ans[idx][ans[idx].length - 1] = A;
            }
        }
        System.out.println(ans.length);
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h1, m1, h2, m2;

        // Get the first time
        System.out.print("Enter the first time (hh:mm): ");
        String[] time1 = sc.nextLine().split(":");
        h1 = Integer.parseInt(time1[0]);
        m1 = Integer.parseInt(time1[1]);

        // Get the second time
        System.out.print("Enter the second time (hh:mm): ");
        String[] time2 = sc.nextLine().split(":");
        h2 = Integer.parseInt(time2[0]);
        m2 = Integer.parseInt(time2[1]);

        // Calculate the difference in minutes
        int totalMinutes = (h1 * 60) + m1 - (h2 * 60) - m2;

        // Calculate the hours and minutes
        int hours = totalMinutes / 60;
        int minutes = totalMinutes % 60;

        // Print the result
        System.out.println("The difference between " + time1[0] + ":" + time1[1] + " and " + time2[0] + ":" + time2[1] + " is " + hours + " hours and " + minutes + " minutes.");
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int at = sc.nextInt();
        int b = sc.nextInt();
        int bt = sc.nextInt();
        int t1 = sc.nextInt();
        int t2 = sc.nextInt();
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            if (now + bt > st) {
                ans++;
            }
            now += b;
        }
        System.out.println(ans);
    }
}
public class codeforces_154_A {
    @Test
    public void test() {
        String s = "mbmxuuuuxuuuuhhooooxxxuxxxuxuuxuuuxxjvjvjjjjvvvjjjjjvvjvjjjvvvjjvjjvvvjjjvjvvjvjjjjjmmbmbbbbbmbbbbmm";
        int n = 5;
        String[] x = {"mb", "ho", "xu", "jv", "yp"};
        int expected = 37;
        int actual = Solution.solve(s, n, x);
        assertEquals(expected, actual);
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            if (a < 2) {
                System.out.println(0);
            } else if (a >= 2) {
                System.out.println(a - 2);
            }
        }
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int num = sc.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < n; i++) {
            numSet.add(sc.nextInt());
        }
        Set<Integer> twoTimesSet = new HashSet<>();
        for (int i : numSet) {
            for (int j = 1; j <= 30; j++) {
                i /= 2;
                if (i % 2 != 0) {
                    twoTimesSet.add(j);
                    break;
                }
            }
        }
        if (twoTimesSet.size() != 1) {
            System.out.println(0);
        } else {
            int[] numList = numSet.toArray(new int[numSet.size()]);
            int lcm = numList[0];
            for (int i = 1; i < numList.length; i++) {
                lcm = lcm * numList[i] / fractions.gcd(lcm, numList[i]);
            }
            System.out.println((num - lcm / 2) / lcm + 1);
        }
    }
}
import java.util.Scanner;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            graph.put(i, new HashSet<>());
        }
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (!graph.containsKey(i)) {
                continue;
            }
            Set<Integer> seen = new HashSet<>();
            int nodes = 1;
            int edges = graph.get(i).size();
            for (int j : graph.get(i)) {
                if (seen.contains(j)) {
                    continue;
                }
                seen.add(j);
                nodes++;
                edges += graph.get(j).size();
            }
            if (nodes > 1 && nodes % 2 == 1 && 2 * nodes == edges) {
                ans++;
            }
        }
        if ((n - ans) % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC149_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] cookies = new int[3];
        for (int i = 0; i < 3; i++) {
            cookies[i] = sc.nextInt();
        }

        int leftOver = cookies[0] - cookies[2];
        int takahashi = Math.max(0, leftOver);
        String output = String.format("%d %d", takahashi, Math.max(0, cookies[1] - Math.abs(leftOver)));

        System.out.println(output);
    }
}
import java.util.Scanner;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        int currentLevel = 0;
        int counter = 0;
        int counterTurns = -1;
        while (counter < n) {
            counterTurns++;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1 && a[i] <= counter) {
                    counter++;
                    a[i] = -1;
                }
            }
            a = reverse(a);
        }
        System.out.println(counterTurns);
    }

    public static int[] reverse(int[] a) {
        int[] reversed = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            reversed[i] = a[a.length - i - 1];
        }
        return reversed;
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            l[a] = b;
        }

        if (l[0] > 0) {
            dp[0] = 1;
        }

        int mx = 0;
        for (int i = 1; i < 1000010; i++) {
            if (l[i] == 0) {
                dp[i] = dp[i - 1];
            } else {
                if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
            }
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }

        System.out.println(n - mx);
    }
}
import java.util.Scanner;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        if (sum(a) % (n * (n + 1) / 2) != 0) {
            System.out.println("NO");
        } else {
            int k = sum(a) / (n * (n + 1) / 2);
            a[n] = a[0];
            if (sum(a) % n != 0 || sum(a) / n >= 0) {
                System.out.println("NO");
            } else {
                System.out.println("YES");
            }
        }
    }

    private static int sum(int[] a) {
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();

        if (n < 1) {
            if (m < 1) {
                System.out.println(n + " " + m);
                return;
            }
            System.out.println("Impossible");
            return;
        }

        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        } else {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int i = 0, j = 0;
        while (i < n && j < m) {
            if (roundComplexity[i] <= georgeComplexity[j]) {
                i++;
            }
            j++;
        }
        System.out.println(n - i);
    }
}
import java.util.PriorityQueue;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        PriorityQueue<Integer> x = new PriorityQueue<>();
        PriorityQueue<Integer> y = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            int day = scanner.nextInt();
            int salary = scanner.nextInt();
            x.add(-day);
            y.add(-salary);
        }
        while (!x.isEmpty()) {
            int d = x.poll();
            int s = y.poll();
            int r = m - y.size();
            if (r >= -d) {
                y.add(-s);
            } else {
                y.add(-s);
                y.poll();
            }
        }
        System.out.println(y.stream().mapToInt(Integer::intValue).sum());
    }
}
import java.util.*;

public class atcoder_ABC120_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        if (s.length() == 1) {
            System.out.println(0);
            return;
        }
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int minCount = Integer.MAX_VALUE;
        for (int count : map.values()) {
            minCount = Math.min(minCount, count);
        }
        System.out.println(minCount * 2);
    }
}
import java.util.Scanner;

public class codeforces_397_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int[][] queries = new int[t][3];
        for (int i = 0; i < t; i++) {
            for (int j = 0; j < 3; j++) {
                queries[i][j] = scanner.nextInt();
            }
        }

        String[] result = new String[t];
        for (int i = 0; i < t; i++) {
            int k = queries[i][0] / queries[i][1];
            if (k * queries[i][2] >= queries[i][0]) {
                result[i] = "Yes";
            } else {
                result[i] = "No";
            }
        }

        for (int i = 0; i < t; i++) {
            System.out.println(result[i]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int N = sc.nextInt();
        int mod = 998244353;
        int[] g1 = new int[K + 1];
        int[] g2 = new int[K + 1];
        int[] inverse = new int[K + 1];
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[0] = 0;
        inverse[1] = 1;
        for (int i = 2; i <= K; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (inverse[mod % i] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i - 1]) % mod;
        }
        int[] ans = new int[2 * K + 1];
        for (int i = 2; i <= 2 * K; i++) {
            int p = (i - 1) / 2;
            if (p > N) {
                break;
            }
            ans[i] = (int) (2.0 * Math.pow(p, p) * cmb(p, p, mod) * kumiawase(N - p, p + (K - p * 2 - (i % 2 == 0 ? 1 : 0))) % mod);
            if (i % 2 == 0 && N - p - 1 >= 0) {
                ans[i] += (int) (2.0 * Math.pow(p, p) * cmb(p, p, mod) * kumiawase(N - p - 1, p + (K - p * 2 - (i % 2 == 0 ? 1 : 0))) % mod);
            }
        }
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                System.out.println(ans[i]);
            } else {
                System.out.println(ans[2 * K - i]);
            }
        }
    }

    public static int cmb(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return (int) (g1[n] * g2[r] * g2[n - r] % mod);
    }

    public static int kumiawase(int p, int q) {
        return cmb(p + q - 1, q - 1, mod);
    }

    public static int solve(int n) {
        int ans = 0;
        int kumi = (n - 1) / 2;
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            ans += (int) (2.0 * Math.pow(p, p) * cmb(p, p, mod) * kumiawase(N - p, p + (K - p * 2 - (n % 2 == 0 ? 1 : 0))) % mod);
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += (int) (2.0 * Math.pow(p, p) * cmb(p, p, mod) * kumiawase(N - p - 1, p + (K - p * 2 - (n % 2 == 0 ? 1 : 0))) % mod);
            }
        }
        return ans;
    }
}
import java.util.*;

public class atcoder_ABC148_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int ta = sc.nextInt() - 1;
        int ao = sc.nextInt() - 1;
        List<List<Integer>> g = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            g.add(new ArrayList<>());
        }
        for (int i = 0; i < n - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            g.get(a).add(b);
            g.get(b).add(a);
        }
        int[] ta_dist = new int[n];
        int[] ao_dist = new int[n];
        ta_dist[ta] = 0;
        ao_dist[ao] = 0;
        dfs(g, ta, ta_dist);
        dfs(g, ao, ao_dist);
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (ta_dist[i] > ao_dist[i]) {
                continue;
            }
            res = Math.max(res, ao_dist[i]);
        }
        System.out.println(res - 1);
    }

    public static void dfs(List<List<Integer>> g, int node, int[] dist) {
        for (int v : g.get(node)) {
            if (dist[v] != -1) {
                continue;
            }
            dist[v] = dist[node] + 1;
            dfs(g, v, dist);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] A = new int[4];
        for (int i = 0; i < 4; i++) {
            A[i] = sc.nextInt();
        }

        if (A[1] <= A[2] || A[3] <= A[0]) {
            System.out.println(0);
        } else {
            Arrays.sort(A);
            System.out.println(A[2] - A[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }

        int a = 1;
        int pos = 0;
        for (int i = 1; i < N; i++) {
            if (n[pos] > n[i]) {
                a++;
                pos = i;
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }

        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i] = x[i];
            } else {
                b[i] = x[i];
            }
        }

        int[] cnta = new int[100002];
        int[] cntb = new int[100002];
        for (int i = 0; i < n; i++) {
            cnta[a[i]]++;
            cntb[b[i]]++;
        }

        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < 100002; i++) {
            if (cnta[i] > maxCnta) {
                vala = i;
                maxCnta = cnta[i];
            }
            if (cnta[i] > maxCnta1 && i != vala) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }

        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < 100002; i++) {
            if (cntb[i] > maxCntb) {
                valb = i;
                maxCntb = cntb[i];
            }
            if (cntb[i] > maxCntb1 && i != valb) {
                maxCntb1 = cntb[i];
                valb1 = i;
            }
        }

        if (valb != vala) {
            int res = 0;
            for (int i = 0; i < n; i++) {
                if (a[i] != vala) {
                    res++;
                }
            }
            for (int i = 0; i < n; i++) {
                if (b[i] != valb) {
                    res++;
                }
            }
            System.out.println(res);
        } else {
            int resa = 0;
            int resb = 0;
            int resa1 = 0;
            int resb1 = 0;
            for (int i = 0; i < n; i++) {
                if (a[i] != vala) {
                    resa++;
                }
                if (a[i] != vala1) {
                    resa1++;
                }
            }
            for (int i = 0; i < n; i++) {
                if (b[i] != valb) {
                    resb++;
                }
                if (b[i] != valb1) {
                    resb1++;
                }
            }
            System.out.println(Math.min(resa + resb1, resa1 + resb));
        }
    }
}
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[][] q = new String[n][2];
        int count = 0;

        for (int i = 0; i < n; i++) {
            q[i][0] = sc.next();
            q[i][1] = sc.next();
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                if (q[i][0].equals(q[j][1])) {
                    count++;
                }
            }
        }

        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int result = Math.max(x + y - 3 + (y - x) % 3 > 0, 0);
        System.out.println(result);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = sc.nextInt();
        }

        Set<Integer> different = new HashSet<>();
        int temp = 0;
        for (int x : arr) {
            if (x % k != 0 || !different.contains(x / k)) {
                different.add(x);
            }
            temp = Math.max(different.size(), temp);
        }
        System.out.println(temp);
    }
}
import java.util.Scanner;

public class codeforces_306_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int q = n / m;
        int r = n % m;
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = q;
        }
        for (int i = 0; i < r; i++) {
            a[i]++;
        }
        for (int i = 0; i < m; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        String[] input = new String[n];
        for (int i = 0; i < n; i++) {
            input[i] = sc.next();
        }

        Set<Integer> c = new HashSet<>();
        for (String s : input) {
            int indexS = s.indexOf("S");
            int indexG = s.indexOf("G");
            if (indexS != -1 && indexG != -1) {
                c.add(indexS - indexG);
            }
        }

        if (c.contains(-1)) {
            System.out.println(-1);
        } else {
            System.out.println(c.size());
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_327_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        int[] indices = find(s, '0');
        if (indices.length == 1) {
            System.out.println(n);
        } else {
            int maximum = 0;
            for (int i = 0; i < indices.length - 1; i++) {
                for (int j = i + 1; j < indices.length; j++) {
                    int diff = Math.abs(indices[i] - indices[j]);
                    maximum = Math.max(maximum, 2 + 2 * (diff - 1) - diff);
                }
            }
            System.out.println(s.length() + maximum);
        }
    }

    public static int[] find(String s, char ch) {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ch) {
                indices.add(i);
            }
        }
        return indices.stream().mapToInt(i -> i).toArray();
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        for (int i = 0; i < n; i++) {
            if (i == 0) {
                System.out.print(arr[i + 1] - arr[i] + " ");
            } else if (i == n - 1) {
                System.out.print(arr[n - 1] - arr[n - 2] + " ");
            } else {
                if (arr[i] - arr[i - 1] > arr[i + 1] - arr[i]) {
                    System.out.print(arr[i + 1] - arr[i] + " ");
                } else {
                    System.out.print(arr[i] - arr[i - 1] + " ");
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if (arr[n - 1] - arr[i] > arr[i] - arr[0]) {
                System.out.print(arr[n - 1] - arr[i] + " ");
            } else {
                System.out.print(arr[i] - arr[0] + " ");
            }
        }
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        HashMap<String, Integer> map = new HashMap<>();
        String[] arr = new String[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.next();
            if (map.containsKey(arr[i])) {
                map.put(arr[i], map.get(arr[i]) + 1);
            } else {
                map.put(arr[i], 1);
            }
        }

        String result = "Yes";
        for (int i = 0; i < n - 1; i++) {
            if (arr[i].charAt(0) != arr[i + 1].charAt(0)) {
                result = "No";
                break;
            }
        }

        for (String key : map.keySet()) {
            if (map.get(key) >= 2) {
                result = "No";
                break;
            }
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_579_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = 1;
        while (Math.log(n) % 1 != 0) {
            x += 1;
            n -= Math.pow(2, (int) Math.log(n));
        }
        System.out.println(x);
    }
}
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int length = sc.nextInt();
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int ans = 0;
        if (length % arr[0] == 0) {
            System.out.println(length / arr[0]);
            return;
        }
        if (arr[0] == arr[1]) {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                int check = length - i * arr[2];
                if (check >= 0 && check % arr[0] == 0) {
                    k = check / arr[0];
                    ans = Math.max(ans, k + i);
                }
            }
        } else {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();

        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }

        if (aaaa) {
            System.out.println(S);
            return;
        }

        String U = S + S.substring(0, S.length() - 1);
        char c = S.charAt(0);
        int p = U.indexOf(c);
        int minIndex = p;
        p++;
        while (p <= N) {
            if (U.charAt(p) == c) {
                if (checkNormalDict(U, minIndex, p)) {
                    minIndex = p;
                }
            }
            p++;
        }
        S = U.substring(minIndex, minIndex + N);

        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (int i = 0; i < S.length(); i++) {
                if (S.charAt(i) == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * (int)Math.pow(2, K - 1) >= N) {
                System.out.println(S.substring(0, N));
            } else {
                S = S.substring(0, count * (int)Math.pow(2, K - 1) - 1) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    private static boolean checkNormalDict(String U, int minIndex, int p) {
        for (int i = 0; i < U.length(); i++) {
            if (U.charAt(minIndex + i) > U.charAt(p + i)) {
                return true;
            } else if (U.charAt(minIndex + i) < U.charAt(p + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }

        if (allSame(elems)) {
            System.out.println(0);
            return;
        }

        if (k == 1) {
            System.out.println(-1);
            return;
        }

        if (!allSame(elems, k - 1)) {
            System.out.println(-1);
            return;
        }

        int target = elems[n - 1];
        int[] toDelete = new int[k - 1];
        for (int i = 0; i < k - 1; i++) {
            toDelete[i] = elems[i];
        }

        while (toDelete.length > 0 && toDelete[toDelete.length - 1] == target) {
            toDelete = Arrays.copyOf(toDelete, toDelete.length - 1);
        }

        System.out.println(toDelete.length);
    }

    private static boolean allSame(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != arr[0]) {
                return false;
            }
        }
        return true;
    }

    private static boolean allSame(int[] arr, int k) {
        for (int i = 0; i < k; i++) {
            if (arr[i] != arr[0]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int Q = scanner.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }
        solve(N, M, Q, a, b, c, d);
    }

    public static void solve(int N, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;
        rec(new int[0], N, M, Q, a, b, c, d, res);
        System.out.println(res);
    }

    public static void rec(int[] A, int N, int M, int Q, int[] a, int[] b, int[] c, int[] d, int res) {
        if (A.length == N) {
            int ans = 0;
            for (int i = 0; i < Q; i++) {
                if (A[b[i] - 1] - A[a[i] - 1] == c[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
            return;
        }
        int lastMax = A.length == 0 ? 1 : A[A.length - 1];
        for (int i = lastMax; i <= M; i++) {
            int[] newA = new int[A.length + 1];
            System.arraycopy(A, 0, newA, 0, A.length);
            newA[A.length] = i;
            rec(newA, N, M, Q, a, b, c, d, res);
        }
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        for (int k = 0; k < m; k++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            x--;
            y--;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = scanner.nextInt();
        }
        editorial(N, P);
    }

    public static void editorial(int N, int[] P) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] a = new int[N + 1];
        for (int i = 0; i < N; i++) {
            a[P[i]] = i;
        }
        int tmp = 1;
        int maxLen = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp++;
                maxLen = Math.max(maxLen, tmp);
            } else {
                tmp = 1;
            }
        }
        int ans = N - maxLen;
        System.out.println(ans);
    }

    public static void WA(int N, int[] P) {
        int tmp = 0;
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (i == 0 || P[i - 1] + 1 == P[i]) {
                tmp++;
            } else {
                ans = Math.max(ans, tmp);
                tmp = 1;
            }
        }
        System.out.println(N - ans);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] t = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                t[i][j] = sc.nextInt();
            }
        }

        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }

        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        int high = 1;
        int tower = n;
        int maximum = 1;
        java.util.Arrays.sort(l);
        for (int i = 1; i < n; i++) {
            if (l[i] == l[i - 1]) {
                tower -= 1;
                high += 1;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();

        if (X == 1 || X == N * 2 - 1) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
            if (X == N * 2 - 2) {
                int[] xs = new int[N - 1];
                for (int i = 0; i < N - 1; i++) {
                    xs[i] = i + 1;
                }
                xs[N - 2] = X + 2;
                xs[N - 1] = X - 1;
                for (int x : xs) {
                    System.out.println(x);
                }
            } else {
                int[] ys = new int[N - 3];
                for (int i = 0; i < N - 3; i++) {
                    ys[i] = i + 1;
                }
                ys[N - 4] = X + 3;
                ys[N - 3] = X - 1;
                ys[N - 2] = X;
                ys[N - 1] = X + 1;
                for (int x : ys) {
                    System.out.println(x);
                }
            }
        }
    }
}
public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] pieces = new int[n][2];
        for (int i = 0; i < n; i++) {
            pieces[i][0] = sc.nextInt();
            pieces[i][1] = sc.nextInt();
        }
        System.out.println(bobMaxStrength(pieces));
    }

    public static int bobMaxStrength(int[][] pieces) {
        int pScore = 0;
        int sScore = 0;
        int pMaxScore = 0;
        int sMaxScore = 0;
        for (int i = 0; i < pieces.length; i++) {
            if (pieces[i][1] == 'B') {
                pScore += pieces[i][0];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= pieces[i][0];
            }
        }
        for (int i = pieces.length - 1; i >= 0; i--) {
            if (pieces[i][1] == 'A') {
                sScore += pieces[i][0];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[i][0];
            }
        }
        if (pMaxScore > sMaxScore) {
            return pMaxScore;
        }
        return sMaxScore;
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String LUCKY = "abcd";
        String s = "";
        for (int i = 0; i < n; i++) {
            s += LUCKY.charAt(i % 4);
        }
        System.out.println(s);
    }
}
import java.util.Scanner;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        int[] d = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if ((x - w[i]) / (n - 1) == w[i]) {
                d[count] = i + 1;
                count++;
            }
        }
        System.out.println(count);
        for (int i = 0; i < count; i++) {
            System.out.print(d[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += "A";
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        t += "D";
                        i += 2;
                    } else {
                        t += "X";
                        i++;
                    }
                } else {
                    t += "X";
                    i++;
                }
            } else {
                t += "X";
                i++;
            }
        }

        int total = 0;
        int numA = 0;
        for (int j = 0; j < t.length(); j++) {
            if (t.charAt(j) == 'X') {
                numA = 0;
            } else {
                if (t.charAt(j) == 'A') {
                    numA++;
                } else {
                    total += numA;
                }
            }
        }

        System.out.println(total);
    }
}
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        String s = "chokudai";
        String t = "redcoder";
        System.out.println(run(s, t));
    }

    public static String run(String s, String t) {
        Map<Character, Integer> sMap = countCharacters(s);
        Map<Character, Integer> tMap = countCharacters(t);

        List<Integer> sList = new ArrayList<>(sMap.values());
        List<Integer> tList = new ArrayList<>(tMap.values());

        Collections.sort(sList);
        Collections.sort(tList);

        if (sList.equals(tList)) {
            return "Yes";
        } else {
            return "No";
        }
    }

    public static Map<Character, Integer> countCharacters(String s) {
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            if (!map.containsKey(c)) {
                map.put(c, 1);
            } else {
                map.put(c, map.get(c) + 1);
            }
        }
        return map;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> menu = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            int m = sc.nextInt();
            int e = m % 10;
            if (e == 0) {
                e = 10;
            }
            menu.add(m);
            menu.add(e);
        }
        Collections.sort(menu, (a, b) -> a[1] - b[1]);
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            ans += Math.ceil(menu.get(i)[0] / 10) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = {10, 100, 1000, 10000, 100000};
        int newN = sum(list(map(int.class, n)));
        if (n in a) {
            System.out.println(10);
        } else {
            System.out.println(newN);
        }
    }

    public static int sum(List<Integer> list) {
        int sum = 0;
        for (int i : list) {
            sum += i;
        }
        return sum;
    }

    public static List<Integer> list(int[] array) {
        List<Integer> list = new ArrayList<>();
        for (int i : array) {
            list.add(i);
        }
        return list;
    }

    public static int[] map(Class<Integer> clazz, int n) {
        int[] array = new int[n];
        for (int i = 0; i < n; i++) {
            array[i] = i;
        }
        return array;
    }
}
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] p = sc.nextLine().split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);
        int DIF1 = x2 - x1;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }
}
import java.util.Scanner;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = sc.nextInt();
        }

        int total = 0;
        for (int i = 0; i < N; i++) {
            total ^= a[i];
        }

        for (int i = 0; i < N; i++) {
            a[i] ^= total;
        }

        for (int i = 0; i < N; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        String[][] grid = new String[n][m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i % 2 == 0) {
                    if (j % 2 == 0) {
                        grid[i][j] = "B";
                    } else {
                        grid[i][j] = "W";
                    }
                } else {
                    if (j % 2 == 0) {
                        grid[i][j] = "W";
                    } else {
                        grid[i][j] = "B";
                    }
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(grid[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if (left <= i && i < right) {
                    tmp--;
                }
                if (left <= j && j < right) {
                    tmp--;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
public class codeforces_30_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int n = sc.nextInt();

        for (int X = -1000; X <= 1000; X++) {
            if (A * (X ^ n) == B) {
                System.out.println(X);
                return;
            }
        }
        System.out.println("No solution");
    }
}
import java.util.Scanner;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        int[] A_ = new int[N];
        for (int i = 0; i < N; i++) {
            A_[i] = A[i];
        }

        Arrays.sort(A_);

        for (int i = 0; i < N - 1; i++) {
            System.out.print(A_[i] + " ");
        }
        System.out.print(A_[N - 1]);
    }
}
import java.util.Scanner;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        System.out.println(sum);
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC107_D {
    private int size;
    private int[] tree;
    private int depth;

    public BIT(int N) {
        size = N;
        tree = new int[N + 1];
        depth = (int) Math.ceil(Math.log(N) / Math.log(2));
    }

    private int _bitsum(int i) {
        int ret = 0;
        while (i > 0) {
            ret += tree[i];
            i -= i & -i;
        }
        return ret;
    }

    public int bitsum(int l, int r) {
        return _bitsum(r) - _bitsum(l - 1);
    }

    public void bitadd(int i, int x) {
        i++;
        while (i <= size) {
            tree[i] += x;
            i += i & -i;
        }
    }
}

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] d = new int[n + 1];
        for (int i = 0; i < n; i++) {
            d[i] = a[i];
        }
        d[n] = 0;
        int[] _a = new int[n + 1];
        for (int i = 0; i < n; i++) {
            _a[i] = d[i];
        }
        _a[n] = 0;
        BIT bit = new BIT(n);
        for (int i = 0; i < n; i++) {
            bit.bitadd(i, 1);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += bit.bitsum(i, i + 1);
        }
        if (ans >= m) {
            System.out.println(1);
        } else {
            System.out.println(0);
        }
    }
}
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] inputArray = new int[n][4];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 4; j++) {
                inputArray[i][j] = sc.nextInt();
            }
        }

        int[] outdated = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray[i][0] < inputArray[j][0] && inputArray[i][1] < inputArray[j][1] && inputArray[i][2] < inputArray[j][2]) {
                    outdated[i] = 1;
                }
            }
        }

        int minimumCost = 100000;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            if (outdated[i] == 0 && inputArray[i][3] < minimumCost) {
                minimumCost = inputArray[i][3];
                inputNumber = i + 1;
            }
        }

        System.out.println(inputNumber);
    }
}
import java.util.Scanner;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();

        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && b >= 0) {
            System.out.println("Zero");
        } else {
            if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        String S = sc.next();

        int segCnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                segCnt++;
            }
        }

        int curHappy = N - 1 - segCnt;
        int ans;
        if (2 * K >= segCnt) {
            ans = N - 1;
        } else {
            ans = curHappy + 2 * K;
        }

        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }

        List<List<Integer>> combinations = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            combinations.add(Arrays.stream(new int[i]).boxed().collect(Collectors.toList()));
        }

        int ans = 0;
        for (List<Integer> combination : combinations) {
            int ca = 0;
            for (int i : combination) {
                ca += c[i][0];
            }
            if (ca < x) {
                ans = Math.max(ans, ca);
            }
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int ans = A - 2 * B;
        if (ans < 0) {
            ans = 0;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            if (hole >= b) {
                check = false;
            } else {
                hole = a * (i + 1) - i;
                i++;
            }
        }
        System.out.println(i);
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = 0;
        for (int i = 0; i < 2; i++) {
            c += Math.max(a, b);
            if (a >= b) {
                a -= 1;
            } else {
                b -= 1;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] list = new int[n];
        for (int i = 0; i < n; i++) {
            list[i] = sc.nextInt() % 2;
        }
        if (sum(list) == 1) {
            System.out.println(list.indexOf(1) + 1);
        } else {
            System.out.println(list.indexOf(0) + 1);
        }
    }

    public static int sum(int[] list) {
        int sum = 0;
        for (int i = 0; i < list.length; i++) {
            sum += list[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        String[] memory = new String[firstline];
        for (int i = 0; i < firstline; i++) {
            int A = sc.nextInt();
            int G = sc.nextInt();
            if (total + A <= 500) {
                total += A;
                memory[i] = "A";
            } else {
                total -= G;
                memory[i] = "G";
            }
        }
        System.out.println(String.join("", memory));
    }
}
import java.util.Scanner;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] sa = scanner.nextLine().split(" ");
        int a = Integer.parseInt(sa[0]);
        int b = (int) (Float.parseFloat(sa[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }
}
import java.util.Scanner;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] t = new int[n + 1];
        int[] a = new int[n + 1];
        int[] cnt = new int[n + 1];
        int[] ans = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            t[i] = sc.nextInt();
            a[i] = sc.nextInt();
            cnt[a[i]]++;
        }

        for (int i = 1; i <= n; i++) {
            if (t[i] == 1) {
                int crt = i;
                int x = a[i];
                while (cnt[x] == 1) {
                    crt = x;
                    x = a[x];
                }
                if (crt > ans[0]) {
                    ans = crt;
                }
            }
        }

        System.out.println(ans.length);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC142_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int t = 0;
        for (int i = 0; i < n; i++) {
            if (i + 1 % 2 == 1) {
                t++;
            }
        }
        System.out.println(t / (double)n);
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] b = new int[n * 2];
        for (int i = 0; i < n * 2; i++) {
            b[i] = 1;
        }
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;
        for (int i = 0; i < m; i++) {
            int r = sc.nextInt();
            int c = sc.nextInt();
            b[r - 1] = b[n + c - 1] = 0;
        }
        if (n % 2 == 1 && b[n / 2] == 1 && b[n + n / 2] == 1) {
            b[n / 2] = 0;
        }
        System.out.println(sum(b));
    }

    public static int sum(int[] b) {
        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] p = new int[n + 1];
        int[] h = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            p[i] = sc.nextInt();
        }
        for (int i = 1; i <= n; i++) {
            h[i] = sc.nextInt();
        }
        int[][] path = new int[n + 1][n + 1];
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            path[a][b] = 1;
            path[b][a] = 1;
        }
        int c = 0;
        for (int i = 1; i <= n; i++) {
            int f = 0;
            for (int j = 1; j <= n; j++) {
                if (path[i][j] == 1 && h[i] <= h[j]) {
                    f = 1;
                    break;
                }
            }
            if (f == 0) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = 0;
        while (x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2) {
            if (a == 0) {
                if (y >= 22) {
                    y -= 22;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    x -= 2;
                    y -= 2;
                }
            } else {
                if (x >= 2 && y >= 2) {
                    x -= 2;
                    y -= 2;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    y -= 22;
                }
            }
            a = 1 - a;
        }
        System.out.println(a == 0 ? "Ciel" : "Hanako");
    }
}
import java.util.*;

public class atcoder_AGC004_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        int[] links = new int[n];
        for (int i = 0; i < n; i++) {
            links[i] = a[i] - 1;
        }

        int heightFromLeaf = 0;
        int cutCount = 0;
        for (int i = 0; i < n; i++) {
            if (links[i] == 0) {
                continue;
            }
            int hgt = dfs(links, n, k, links[i], i);
            heightFromLeaf = Math.max(heightFromLeaf, hgt);
            cutCount++;
        }
        heightFromLeaf++;
        if (a[0] != 1) {
            cutCount++;
        }
        System.out.println(cutCount);
    }

    public static int dfs(int[] links, int n, int k, int v, int p) {
        int heightFromLeaf = 0;
        int cutCount = 0;
        for (int i = 0; i < n; i++) {
            if (links[i] == 0) {
                continue;
            }
            int hgt = dfs(links, n, k, links[i], i);
            heightFromLeaf = Math.max(heightFromLeaf, hgt);
            cutCount++;
        }
        heightFromLeaf++;
        if (p != 0 && heightFromLeaf == k) {
            heightFromLeaf = 0;
            cutCount++;
        }
        return heightFromLeaf;
    }
}
import java.util.Scanner;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int t = 0;
        for (int i = 1; i <= k; i++) {
            t = (t % k) * 10 + 7;
            if (t % k == 0) {
                System.out.println(i);
                break;
            }
        }
        if (t % k != 0) {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = sc.nextInt();
        }
        int m = 0;
        for (int j = 0; j < n; j++) {
            for (int p = 0; p < n; p++) {
                if (M[p] == 0) {
                    System.out.print(p + 1 + " ");
                    break;
                }
            }
            for (int l = p + 1 - k; l < p + 1; l++) {
                M[l] -= 1;
            }
            M[p] -= 1;
        }
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC168_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int h = sc.nextInt();
        int m = sc.nextInt();

        double C = Math.abs(360.0 / 60.0 * m - 360.0 / 12.0 * h - 360.0 / 12.0 / 60.0 * m);
        if (C > 180.0) {
            C = 360.0 - C;
        }
        double cosC = Math.cos(Math.toRadians(C));
        System.out.println(Math.sqrt(a * a + b * b - 2 * a * b * cosC));
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int QR = sc.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = sc.nextInt();
        }

        int sumEL = 0;
        for (int i = 1; i <= n; i++) {
            sumEL += W[i - 1];
        }

        int answer = QR * (n - 1) + sumEL * R;

        for (int i = 1; i <= n; i++) {
            int energy = L * sumEL + R * (sumEL - sumEL);
            if (i > (n - i)) {
                energy += (i - (n - i) - 1) * QL;
            } else if ((n - i) > i) {
                energy += ((n - i) - i - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
        }

        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String vowels = "aeiouyAEIOUY";
        boolean hasVowel = false;

        for (int i = input.length() - 1; i >= 0; i--) {
            if (input.charAt(i) == ' ' || input.charAt(i) == '?') {
                continue;
            } else {
                if (vowels.contains(input.charAt(i))) {
                    hasVowel = true;
                    break;
                }
            }
        }

        if (hasVowel) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        String S = scanner.next();
        if (S.length() <= K) {
            System.out.println(S);
        } else {
            System.out.println(S.substring(0, K) + "...");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int X = sc.nextInt();
        boolean[] prime = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            prime[i] = true;
        }
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            prime[i] = false;
        }
        for (int i = 3; i * i <= 100008; i += 2) {
            if (prime[i]) {
                for (int j = i + i; j < 100008; j += i) {
                    prime[j] = false;
                }
            }
        }
        for (int i = X; i < 100008; i++) {
            if (prime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int sa = sc.nextInt();
        int sb = sc.nextInt();
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }
        int[][] result = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                result[i][j] = matrix[i][j] - sa;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (result[i][j] % 2 == 0 && result[i][j] <= sa * 2) {
                    System.out.print("1\n");
                } else {
                    System.out.print("0\n");
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = n; i > 0; i--) {
            if (n % i == 0) {
                n = i;
                System.out.print(i + " ");
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        String S = sc.next();
        String T = sc.next();

        int[] list_S = new int[S.length()];
        int[] list_T = new int[T.length()];

        for (int i = 0; i < S.length(); i++) {
            list_S[i] = S.charAt(i) - 'a';
        }

        for (int i = 0; i < T.length(); i++) {
            list_T[i] = T.charAt(i) - 'a';
        }

        int[] Number_i = new int[N];
        for (int i = 0; i < N; i++) {
            Number_i[i] = i;
        }

        int[] Number_j = new int[M];
        for (int j = 0; j < M; j++) {
            Number_j[j] = j;
        }

        int[] Kaburi_i = new int[N];
        int[] Kaburi_j = new int[M];

        for (int i = 0; i < N; i++) {
            Kaburi_i[i] = Number_i[i] * M / N;
        }

        for (int j = 0; j < M; j++) {
            Kaburi_j[j] = Number_j[j] * N / M;
        }

        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = Kaburi_i.length;

        while (counter <= Kaburi_Size - 1) {
            if (list_S[Kaburi_i[counter]] == list_T[Kaburi_j[counter]]) {
                counter++;
            } else {
                Flag = 1;
                break;
            }
        }

        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println(N * M / gcd(N, M));
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            a = b;
            b = a % b;
        }
        return a;
    }
}
import java.util.Scanner;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        int mn = N + 1;
        int mx = -1;
        for (int i = 0; i < N; i++) {
            if (i + 1 != A[i]) {
                mn = Math.min(mn, i);
                mx = Math.max(mx, i);
            }
        }

        if (mx == -1) {
            System.out.println("0 0");
        } else {
            int[] B = new int[N];
            for (int i = 0; i < N; i++) {
                if (i < mn) {
                    B[i] = A[i];
                } else if (i >= mn && i <= mx) {
                    B[i] = A[mx - i];
                } else {
                    B[i] = A[i];
                }
            }

            if (isSorted(B)) {
                System.out.println(mn + 1 + " " + mx + 1);
            } else {
                System.out.println("0 0");
            }
        }
    }

    public static boolean isSorted(int[] A) {
        for (int i = 0; i < A.length - 1; i++) {
            if (A[i] > A[i + 1]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] parts = input.split("\\.");
        String s = parts[0];
        String p = parts[1];
        int i = Integer.parseInt(p.substring(0, 1));
        if (s.charAt(s.length() - 1) == '9') {
            System.out.println("GOTO Vasilisa.");
        } else if (s.charAt(s.length() - 1) != '9' && i < 5) {
            System.out.println(s);
        } else {
            int num = Integer.parseInt(s) + 1;
            System.out.println(num);
        }
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String v = sc.next();

        int[] d = { "LEFT", "RIGHT" };
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] a = new String[m];

        for (int i = 0; i < m; i++) {
            a[i] = d[not f];
        }

        for (int i = 0; i < v.length(); i++) {
            a[i] = "PRINT " + v.charAt(i);
            a[i + 1] = d[f];
        }

        for (int i = 0; i < a.length - 1; i++) {
            System.out.println(a[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();

        int curr = r;
        int s = 0;
        while (curr > 0) {
            s++;
            curr /= 10;
        }
        int first = (int) Math.pow(10, s);
        int second = first / 2;
        int ans = -1;

        for (int i = l; i <= r; i++) {
            if (i >= l && i <= r) {
                curr = i;
                String rev = "";
                for (int k = 0; k < String.valueOf(curr).length(); k++) {
                    rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k)));
                }
                ans = Math.max(ans, Integer.parseInt(rev) * curr);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(scanner.nextInt());
            }
            li.add(row);
        }
        List<Integer> p = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            p.add(scanner.nextInt());
        }
        Set<Integer> q = new HashSet<>();
        for (List<Integer> row : li) {
            for (Integer num : row) {
                q.add(num);
            }
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        for (int i = 0; i <= q.size(); i++) {
            for (List<Integer> row : li) {
                Set<Integer> s = new HashSet<>(row);
                if (s.size() % 2 != p.get(i)) {
                    break;
                }
            }
            ans += Math.pow(2, v.size());
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[][] b = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k < 0) {
                    k += n;
                }
                b[j][i] = Math.min(a[k], a[i]);
            }
        }
        int m = 1000000000;
        for (int i = 0; i < n; i++) {
            m = Math.min(m, sum(b[i]) + x * i);
        }
        System.out.println(m);
    }

    private static int sum(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        Arrays.sort(c, Collections.reverseOrder());
        int mod = 1000000007;
        int b = (int) Math.pow(2, 2 * n - 2, mod);
        int a = 2 * b % mod;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_456_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] m = new int[n][2];
        for (int i = 0; i < n; i++) {
            m[i][0] = sc.nextInt();
            m[i][1] = sc.nextInt();
        }
        Arrays.sort(m, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return b[1] - a[1];
            }
        });
        int a = m[0][1];
        for (int i = 1; i < n; i++) {
            if (m[i][1] > a) {
                System.out.println("Happy Alex");
                break;
            }
            a = m[i][1];
        } else {
            System.out.println("Poor Alex");
        }
    }
}
import java.util.Scanner;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            System.out.println(solve(n));
        }
    }

    public static int solve(int n) {
        int s = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            s -= 2 * t;
            t *= 2;
        }
        return s;
    }
}
import java.util.Scanner;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = A[i];
            for (int j = 0; j < i; j++) {
                S[i] += A[j];
            }
        }

        int ans = Integer.MAX_VALUE;
        for (int k = 1; k <= N; k++) {
            int E = k * X + 2 * sum(S, N - 2 * k - 1, -1, -k);
            ans = Math.min(ans, E);
        }

        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    private static int sum(int[] S, int start, int end, int step) {
        int sum = 0;
        for (int i = start; i >= end; i -= step) {
            sum += S[i];
        }
        return sum;
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String line1 = sc.nextLine();
        String line2 = sc.nextLine();

        Map<Character, Integer> boughtCount = new HashMap<>();
        for (char c : line1.toCharArray()) {
            if (!boughtCount.containsKey(c)) {
                boughtCount.put(c, 0);
            }
            boughtCount.put(c, boughtCount.get(c) + 1);
        }

        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line2.toCharArray()) {
            if (!madeCount.containsKey(c)) {
                madeCount.put(c, 0);
            }
            madeCount.put(c, madeCount.get(c) + 1);
        }

        int res = 0;
        for (char color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        String t = sc.next();

        if (s.equals(t)) {
            System.out.println(n);
        } else {
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n - i; j++) {
                    if (s.charAt(i + j) != t.charAt(j)) {
                        break;
                    }
                    if (j == n - i - 1) {
                        cnt = n - i;
                    }
                }
            }
            System.out.println(2 * n - cnt);
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }

        int noOnes = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] % 2 == 1) {
                noOnes++;
            }
        }

        int result = 0;
        if (noOnes % 2 == 0) {
            result = 1 << noOnes;
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int y = sc.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = sc.nextInt();
        }

        for (int i = 0; i < y; i++) {
            for (int j = 0; j < y; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < y; k++) {
                    if (arr[k] != arr[j] && arr[k] != arr[i] && arr[k] == arr[i] + arr[j]) {
                        System.out.println(k + 1 + " " + j + 1 + " " + i + 1);
                        return;
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.Queue;
import java.util.Scanner;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] vis = new int[n + 1];
        int ci = 0, cb = 0, cc = 0;
        List<Integer>[] g = new List[n + 1];
        for (int i = 0; i <= n; i++) {
            g[i] = new ArrayList<>();
        }

        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }

        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else {
                    if (dfs(i, vis, g)) {
                        cb++;
                    } else {
                        cc++;
                    }
                }
            }
        }

        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static boolean dfs(int x, int[] vis, List<Integer>[] g) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(x);
        vis[x] = 1;
        while (!queue.isEmpty()) {
            int u = queue.poll();
            for (int v : g[u]) {
                if (vis[v] == 0) {
                    vis[v] = 1;
                    queue.add(v);
                }
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        left[0] = 0;
        right[n] = 0;

        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], a[i]);
        }

        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], a[i]);
        }

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }

        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Scanner;

public class atcoder_AGC007_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int d = scanner.nextInt();
        int x = scanner.nextInt();

        double ret = 0;
        while (N > 0) {
            ret += d + (N - 0.5) * x;
            d = d + (d / N) + (5 * x) / (2 * N);
            x += 2 * x / N;
            N--;
        }

        System.out.println(ret);
    }
}
import java.util.Scanner;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l1 = new int[n];
        for (int i = 0; i < n; i++) {
            l1[i] = sc.nextInt();
        }
        Arrays.sort(l1);
        int a = l1[n - 1];
        int b = l1[0];
        if (a == b) {
            System.out.println(a - b + " " + (n * (n - 1)) / 2);
        } else {
            int ac = 0;
            int bc = 0;
            for (int i = 0; i < n; i++) {
                if (l1[i] == a) {
                    ac++;
                } else if (l1[i] == b) {
                    bc++;
                }
            }
            System.out.println(a - b + " " + ac * bc);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] V = new int[N];
        int[] C = new int[N];
        int[] list = new int[N];
        int ans = 0;
        int X = 0;
        int Y = 0;

        for (int i = 0; i < N; i++) {
            V[i] = sc.nextInt();
            C[i] = sc.nextInt();
            if (V[i] - C[i] > 0) {
                X = V[i];
                Y = C[i];
                list[i] = X - Y;
                ans += list[i];
            }
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String myStr = "";
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (c == '0' || c == '1') {
                myStr += c;
            } else if (c == 'B' && myStr.length() != 0) {
                myStr = myStr.substring(0, myStr.length() - 1);
            }
        }
        System.out.println(myStr);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int n = sc.nextInt();
        int w = sc.nextInt();

        if (1 <= k && w <= 1000) {
            int total = 0;
            for (int i = 1; i <= w; i++) {
                total += i * k;
            }
            if (total > n) {
                System.out.println(total - n);
            } else {
                System.out.println(0);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            String[] l1 = sc.nextLine().split(" ");
            int sum = 0;
            for (String s : l1) {
                sum += Integer.parseInt(s);
            }
            if (sum > 1) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int w = sc.nextInt();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                graph[i][j] = sc.nextInt();
            }
        }

        for (int x = 0; x < w - 1; x++) {
            for (int y = 0; y < h; y++) {
                graph[y][x + 1] = Math.min(graph[y][x] + 1, graph[y][x + 1]);
            }
        }

        for (int x = w - 1; x > 0; x--) {
            for (int y = 0; y < h; y++) {
                graph[y][x - 1] = Math.min(graph[y][x] + 1, graph[y][x - 1]);
            }
        }

        for (int y = 0; y < h - 1; y++) {
            for (int x = 0; x < w; x++) {
                graph[y + 1][x] = Math.min(graph[y][x] + 1, graph[y + 1][x]);
            }
        }

        for (int y = h - 1; y > 0; y--) {
            for (int x = 0; x < w; x++) {
                graph[y - 1][x] = Math.min(graph[y][x] + 1, graph[y - 1][x]);
            }
        }

        int max = Integer.MIN_VALUE;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                max = Math.max(max, graph[i][j]);
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int r, D, x;
        r = sc.nextInt();
        D = sc.nextInt();
        x = sc.nextInt();

        for (int i = 2; i <= 12; i++) {
            System.out.println(Math.round((Math.pow(r, i - 1) * (x + D / (1 - r))) - D / (1 - r)));
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC038_A {
    public static void solve(int H, int W, int A, int B) {
        String[][] answer = new String[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (i < B) {
                    if (j < A) {
                        answer[i][j] = "0";
                    } else {
                        answer[i][j] = "1";
                    }
                } else {
                    if (j < A) {
                        answer[i][j] = "1";
                    } else {
                        answer[i][j] = "0";
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(answer[i][j]);
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int t = sc.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.nextInt();
        }

        int currentCell = 0;
        while (currentCell <= t) {
            currentCell += s[currentCell - 1];
            if (currentCell == t) {
                System.out.println("YES");
                break;
            }
        }
        if (currentCell > t) {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        int ll = -1000000000;
        int rr = 1000000000;
        while (ll + 1 < rr) {
            int x = (ll + rr) / 2;
            int tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }

        long result = 0;
        for (int b = 0; b < 60; b++) {
            int bs = 0;
            for (int i = 0; i < N; i++) {
                if (((A[i] >> b) & 1) == 1) {
                    bs++;
                }
            }
            result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int gcd = gcd(360, x);
        System.out.println(360 / gcd);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = sc.nextInt();
        }
        int ans = Math.abs(r[0]);
        for (int i = 1; i < n; i++) {
            ans += Math.abs(r[i] - r[i - 1]);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        String b = sc.nextLine();

        int x = Math.max(a.length(), b.length());
        a = String.format("%0" + x + "d", Integer.parseInt(a));
        b = String.format("%0" + x + "d", Integer.parseInt(b));

        String s = "";
        int c = 0;
        for (int i = 0; i < x; i++) {
            int d = Integer.parseInt(b.charAt(i) + "") + Integer.parseInt(a.charAt(x - i - 1) + "") + c;
            if (d > 9) {
                s += String.valueOf(d).charAt(1);
                c = 1;
            } else {
                s += String.valueOf(d);
                c = 0;
            }
        }

        if (c == 1) {
            s += "1";
        }

        System.out.println(Integer.parseInt(s.substring(0, s.length() - 1)));
    }
}
import java.util.Scanner;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int[] count = new int[26];
        for (int i = 0; i < input.length(); i++) {
            int index = input.charAt(i) - 'a';
            count[index]++;
        }
        int oddCount = 0;
        for (int i = 0; i < count.length; i++) {
            if (count[i] % 2 != 0) {
                oddCount++;
            }
        }
        if (oddCount == 0) {
            System.out.println("First");
        } else if (oddCount == 1 && input.length() % 2 == 0) {
            System.out.println("Second");
        } else if (oddCount == 1 && input.length() % 2 != 0) {
            System.out.println("First");
        } else {
            System.out.println("Invalid input");
        }
    }
}
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] tokens = input.split("1");
        int count = 0;
        for (String token : tokens) {
            count += token.length() + 1;
        }
        System.out.println(count);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] nums = new int[4];
        String[] operations = new String[3];
        int[] ans = new int[1];

        for (int i = 0; i < 4; i++) {
            nums[i] = sc.nextInt();
        }

        for (int i = 0; i < 3; i++) {
            operations[i] = sc.next();
        }

        ans[0] = 10000000000000000000000000;

        rememberTheNumber(nums, 0, operations, ans);

        System.out.println(ans[0]);
    }

    public static void rememberTheNumber(int[] nums, int i, String[] operations, int[] ans) {
        if (i >= 3) {
            return;
        }

        for (int j = 0; j < 4; j++) {
            for (int k = j + 1; k < 4; k++) {
                if (nums[j] != -1 && nums[k] != -1) {
                    int s = nums[j];
                    nums[j] = -1;
                    int t = nums[k];
                    if (operations[i].equals("+")) {
                        nums[k] = s + t;
                    } else if (operations[i].equals("*")) {
                        nums[k] = s * t;
                    }
                    if (i == 2 && nums[k] < ans[0]) {
                        ans[0] = nums[k];
                    }
                    rememberTheNumber(nums, i + 1, operations, ans);
                    nums[j] = s;
                    nums[k] = t;
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        int max = Math.max(a * c, b * d);
        max = Math.max(max, a * d);
        max = Math.max(max, b * c);
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int l = 2019;
        int[] m = new int[l + 1];
        int a = 0;
        int r = 0;
        for (int i = input.length() - 1; i >= 0; i--) {
            a += Integer.parseInt(String.valueOf(input.charAt(i))) * Math.pow(10, i, l);
            r += m[a % l];
            m[a % l] += 1;
        }
        System.out.println(r);
    }
}
import java.util.Scanner;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int id = 0;
        int l = sc.nextInt();
        int r = sc.nextInt();
        for (int i = 1; i < n; i++) {
            int li = sc.nextInt();
            int ri = sc.nextInt();
            if (li <= l && r <= ri) {
                id = i;
            } else if (li < l || r < ri) {
                id = n;
            }
            l = Math.min(l, li);
            r = Math.max(r, ri);
        }
        System.out.println(id + 1);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Map;
import java.util.HashMap;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();

        Map<Character, Integer> countMap = new HashMap<>();
        for (char c : input.toCharArray()) {
            if (!countMap.containsKey(c)) {
                countMap.put(c, 1);
            } else {
                countMap.put(c, countMap.get(c) + 1);
            }
        }

        Set<Character> uniqueChars = new HashSet<>();
        for (char c : countMap.keySet()) {
            if (countMap.get(c) == 2) {
                uniqueChars.add(c);
            }
        }

        if (uniqueChars.size() == 2) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if (n == 1) {
            System.out.println(0);
            return;
        }

        List<Integer> primeFactors = primeFactorize(n);
        Map<Integer, Integer> factorCount = new HashMap<>();
        for (int factor : primeFactors) {
            if (!factorCount.containsKey(factor)) {
                factorCount.put(factor, 1);
            } else {
                factorCount.put(factor, factorCount.get(factor) + 1);
            }
        }

        int ans = 0;
        for (int factor : factorCount.keySet()) {
            int count = factorCount.get(factor);
            for (int i = 1; i <= count; i++) {
                ans += i;
            }
        }

        System.out.println(ans);
    }

    public static List<Integer> primeFactorize(int n) {
        List<Integer> factors = new ArrayList<>();
        for (int i = 2; i <= n; i++) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        return factors;
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class atcoder_ABC126_D {
    int val;
    boolean color;
    Node[] a;

    public Node() {
        val = 0;
        color = false;
        a = new Node[0];
    }
}

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Node[] nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < n - 1; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            Node node1 = nodes[u - 1];
            Node node2 = nodes[v - 1];
            node1.val = u;
            node2.val = v;
            node1.a = new Node[1];
            node1.a[0] = node2;
            node2.a = new Node[1];
            node2.a[0] = node1;
        }
        Node root = nodes[0];
        root.color = true;
        Set<Node> nodeSet = new HashSet<>();
        traverse(root, 0);
        for (int i = 0; i < n; i++) {
            Node node = nodes[i];
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void traverse(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        }
        nodeSet.add(node);
        for (int i = 0; i < node.a.length; i++) {
            Node adjNode = node.a[i];
            int dis = adjNode.val - node.val;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = root.color;
            } else {
                adjNode.color = !root.color;
            }
            traverse(adjNode, distance + dis);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String l = sc.nextLine();
        int n = l.length();
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            char c = l.charAt(i);
            if (c == '0') {
                dp[i + 1][0] += dp[i][0];
                dp[i + 1][1] += dp[i][1] * 3;
            } else {
                dp[i + 1][0] += dp[i][0] * 2;
                dp[i + 1][1] += dp[i][0];
                dp[i + 1][1] += dp[i][1] * 3;
            }
            dp[i + 1][0] %= 1000000007;
            dp[i + 1][1] %= 1000000007;
        }
        System.out.println((dp[n][0] + dp[n][1]) % 1000000007);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String d = "f";
        String ans = (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) ? "ly" : "nly";
        while (true) {
            if (d.equals("m")) {
                d = "w";
                n += 1;
            } else if (d.equals("t")) {
                d = "th";
                n += 1;
            } else if (d.equals("w")) {
                d = "f";
                n += 1;
            } else if (d.equals("th")) {
                d = "sa";
                n += 1;
            } else if (d.equals("f")) {
                d = "s";
                n += 1;
            } else if (d.equals("sa")) {
                d = "m";
                n += 1;
            } else if (d.equals("s")) {
                d = "t";
                n += 1;
            }
            if ((d.equals("f") && ans.equals("ly") && leapYear(n) == "y") || (d.equals("f") && ans.equals("nly") && leapYear(n) == "n")) {
                break;
            }
        }
        System.out.println(n);
    }

    public static String leapYear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.Scanner;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String s = sc.next();

        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'A']++;
        }

        Arrays.sort(count, Collections.reverseOrder());

        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                break;
            }
            k -= count[i];
            res += count[i] * count[i];
        }

        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_334_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int i = 1, j = n * n;
        while (i < j) {
            System.out.print(i + " ");
            i++;
            System.out.print(j + " ");
            j--;
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }

        int[] dp = new int[n + 1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = Math.max(dp[i - 1], A[i - 1]);
            for (int j = 1; j < i; j++) {
                dp[i] = Math.max(dp[i], dp[j] + A[i - j - 1]);
            }
        }

        System.out.println(dp[n]);
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String soz = sc.nextLine();
        int[] a = new int[soz.length() + 1];
        for (int i = 1; i < soz.length(); i++) {
            a[i] = a[i - 1];
            if (soz.charAt(i - 1) == soz.charAt(i)) {
                a[i]++;
            }
        }
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            String[] ml = sc.nextLine().split(" ");
            int m = Integer.parseInt(ml[0]);
            int l = Integer.parseInt(ml[1]);
            arr[i] = a[l - 1] - a[m - 1];
        }
        for (int i = 0; i < n; i++) {
            System.out.println(arr[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        Arrays.sort(a);

        for (int i = 1; i < n; i++) {
            if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                System.out.println("YES");
                return;
            }
        }

        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int c = 2;
        for (int i = 0; i < n; i++) {
            if (w[i] == 1) {
                System.out.println(c);
            } else if (w[i] % 2 == 0) {
                c = 3 - c;
                System.out.println(c);
            } else {
                System.out.println(c);
            }
        }
    }
}
import java.util.Scanner;
import java.util.PriorityQueue;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>();
        int sum_b = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        for (int i = 0; i < q; i++) {
            int[] ql = new int[3];
            ql[0] = sc.nextInt();
            ql[1] = sc.nextInt();
            ql[2] = sc.nextInt();
            sum_b += ql[2];
            if (ql[0] == 2) {
                if (p1.size() == p2.size()) {
                    System.out.println(-p2.peek() + " " + (sum_p1 - p1.size() * -p2.peek() + p2.size() * -p2.peek() - sum_p2 + sum_b));
                } else {
                    System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_b));
                }
            } else {
                if (p1.isEmpty()) {
                    p1.add(ql[1]);
                    sum_p1 += ql[1];
                } else if (p1.peek() <= ql[1]) {
                    p1.add(ql[1]);
                    sum_p1 += ql[1];
                } else {
                    p2.add(-ql[1]);
                    sum_p2 += ql[1];
                }
                if (p1.size() < p2.size()) {
                    int k = p2.poll();
                    p1.add(-k);
                    sum_p2 += k;
                    sum_p1 -= k;
                }
                if (p1.size() - 1 > p2.size()) {
                    int k = p1.poll();
                    p2.add(-k);
                    sum_p1 -= k;
                    sum_p2 += k;
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int a = sc.nextInt();
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            sho += 1;
        }
        System.out.println(sho);
    }
}
import java.util.Scanner;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String result = "Yes";
        if (!input.contains("A") || !input.contains("B")) {
            result = "No";
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }

        int c = 0;
        for (int k = 0; k < n; k++) {
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                unite(k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += l * r * a[k];
        }

        System.out.println(c);
    }

    public static int root(int x) {
        return x == par[x] ? x : root(par[x]);
    }

    public static boolean same(int x, int y) {
        return root(x) == root(y);
    }

    public static void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int ans = 1;
        int sumL = 0;
        String input = scanner.nextLine();
        String[] sentences = input.split("[.?!]");
        for (String sentence : sentences) {
            sentence = sentence.strip() + ".";
            int L = sentence.length();
            if (L > 1) {
                if (L > n) {
                    System.out.println("Impossible");
                    return;
                }
                if (sumL + L + (sumL > 0) > n) {
                    ans++;
                    sumL = L;
                } else {
                    sumL += L + (sumL > 0);
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();

        int cookie = 0;
        int time = a;
        while (time <= t + 0.5) {
            cookie += b;
            time += a;
        }
        System.out.println(cookie);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }

        double result = solve(N, x, y);
        System.out.println(result);
    }

    public static double solve(int N, int[] x, int[] y) {
        double[] distances = new double[N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (i != j) {
                    double distance = Math.sqrt(Math.pow(x[i] - x[j], 2) + Math.pow(y[i] - y[j], 2));
                    distances[i] += distance;
                }
            }
        }

        double totalDistance = 0;
        for (int i = 0; i < N; i++) {
            totalDistance += distances[i];
        }

        return totalDistance / N;
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int S = scanner.nextInt();
        int W = scanner.nextInt();
        if (S <= W) {
            System.out.println("unsafe");
        } else {
            System.out.println("safe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String output = "";

        if (input.length() != 1) {
            if (input.charAt(0) == '9') {
                output = "9";
                input = input.substring(1);
            }
            for (int i = 0; i < input.length(); i++) {
                char c = input.charAt(i);
                if (c > '4') {
                    int n = 9 - (c - '0');
                    output += String.valueOf(n);
                } else {
                    output += c;
                }
            }
        } else {
            output = input;
        }

        System.out.println(Integer.parseInt(output));
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_272_B {
    public static void main(String[] args) {
        int[] sequence = {2, 7, 1};
        int result = nPairsWithCommonFX(sequence);
        System.out.println(result);
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, Integer> storage = new HashMap<>();
        int[] FXs = new int[sequence.length];
        for (int i = 0; i < sequence.length; i++) {
            int value = sequence[i];
            int y = f(value);
            if (!storage.containsKey(y)) {
                storage.put(y, value);
                FXs[i] = y;
            } else {
                storage.put(y, storage.get(y) + value);
            }
        }

        int sum = 0;
        for (int i = 0; i < FXs.length; i++) {
            sum += storage.get(FXs[i]) * storage.get(FXs[i]);
        }

        return (sum - storage.size()) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 == 1) {
                y += 1;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_96_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int limit = 1000000000;
        ArrayList<Integer> l = new ArrayList<>();
        gen(0, 0, 0, limit, l);
        Collections.sort(l);
        int n = sc.nextInt();
        int ans = 0;
        for (int val : l) {
            if (val >= n) {
                ans = val;
                break;
            }
        }
        System.out.println(ans);
    }

    public static void gen(int number, int four, int seven, int limit, ArrayList<Integer> l) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        gen(number * 10 + 4, four + 1, seven, limit, l);
        gen(number * 10 + 7, four, seven + 1, limit, l);
    }
}
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] low = new int[n];
        int[] high = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = sc.nextInt();
            high[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(high);
        if (n % 2 == 0) {
            int hh = (high[(n / 2) - 1] + high[n / 2]) / 2;
            int ll = (low[(n / 2) - 1] + low[n / 2]) / 2;
            System.out.println(hh - ll + 1);
        } else {
            int hh = high[(n / 2) - 1];
            int ll = low[(n / 2) - 1];
            System.out.println(hh - ll + 1);
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Deque;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] edges = new int[N][N];
        int[] degs = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];

        for (int i = 0; i < M; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            edges[a - 1][b - 1] = 1;
            edges[b - 1][a - 1] = 1;
            degs[a - 1]++;
            degs[b - 1]++;
        }

        if (M % 2 != 0) {
            System.out.println(-1);
            return;
        }

        Queue<Integer> Q = new LinkedList<>();
        for (int i = 0; i < N; i++) {
            Q.add(i);
        }

        while (!Q.isEmpty()) {
            int u = Q.poll();
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int v : edges[u]) {
                if (parity[u] != 0 && v == 0) {
                    System.out.println(u + 1 + " " + v + 1);
                    parity[u] = 1 - parity[u];
                } else {
                    System.out.println(v + 1 + " " + u + 1);
                    parity[v] = 1 - parity[v];
                }
                degs[v]--;
                Q.add(v);
            }
        }
    }
}
import java.util.Arrays;

public class codeforces_147_A {
    public static void main(String[] args) {
        String input = "mck  . gq   dauqminf      wee   bazyzy     humnv    d pgtvx  , vxntxgrkrc    rg    rwr,  uuyweyz  l";
        String output = removePunctuation(input);
        System.out.println(output);
    }

    public static String removePunctuation(String input) {
        String[] punctuation = {",", ".", "!", "?"};
        String[] words = input.split(" ");
        String[] filteredWords = new String[words.length];
        int count = 0;
        for (String word : words) {
            if (!word.isEmpty() && !Arrays.asList(punctuation).contains(word)) {
                filteredWords[count++] = word;
            }
        }
        return String.join(" ", Arrays.copyOf(filteredWords, count));
    }
}
import java.util.Scanner;

public class atcoder_ABC152_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int lcm = 1;
        for (int i = 0; i < n; i++) {
            lcm = lcm * a[i] / gcd(lcm, a[i]);
        }

        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum = (sum + pow(a[i], MOD - 2, MOD)) % MOD;
        }

        int ans = lcm * sum % MOD;
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int pow(int a, int b, int m) {
        if (b == 0) {
            return 1;
        }
        if (b % 2 == 0) {
            int x = pow(a, b / 2, m);
            return (x * x) % m;
        } else {
            return (a * pow(a, b - 1, m)) % m;
        }
    }
}
import java.util.Scanner;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int t = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        int da = sc.nextInt();
        int db = sc.nextInt();

        if (x == 0) {
            System.out.println("YES");
            return;
        }

        int aTime = Math.min(a / da, t - 1);
        int bTime = Math.min(b / db, t - 1);

        for (int i = 0; i <= aTime; i++) {
            for (int j = 0; j <= bTime; j++) {
                if (a - da * i == x || b - db * j == x) {
                    System.out.println("YES");
                    return;
                }
                if ((a - da * i) + (b - db * j) == x) {
                    System.out.println("YES");
                    return;
                }
            }
        }

        System.out.println("NO");
    }
}
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int z = sc.nextInt();
        int k = sc.nextInt();

        int[] a = new int[x];
        int[] b = new int[y];
        int[] c = new int[z];

        for (int i = 0; i < x; i++) {
            a[i] = sc.nextInt();
        }

        for (int i = 0; i < y; i++) {
            b[i] = sc.nextInt();
        }

        for (int i = 0; i < z; i++) {
            c[i] = sc.nextInt();
        }

        int[] ab = new int[x * y];
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                ab[i * y + j] = a[i] + b[j];
            }
        }

        int[] abc = new int[min(k, x * y * z)];
        for (int i = 0; i < min(k, x * y * z); i++) {
            for (int j = 0; j < z; j++) {
                abc[i * z + j] = ab[i] + c[j];
            }
        }

        for (int i = 0; i < k; i++) {
            System.out.println(abc[i]);
        }
    }

    private static int min(int a, int b) {
        return a < b ? a : b;
    }
}
import java.util.Scanner;

public class atcoder_ABC155_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int pmin = 1000;
        int mmin = 0;
        input = "0" + input;
        for (int i = 0; i < input.length(); i++) {
            int v = Integer.parseInt(input.substring(i, i + 1));
            int npmin = Math.min(pmin + 10 - (v + 1), mmin + 10 - v);
            int nmmin = Math.min(pmin + v + 1, mmin + v);
            pmin = npmin;
            mmin = nmmin;
        }
        System.out.println(Math.min(pmin, mmin));
    }
}
import java.util.Scanner;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();

        int[] ans = getNums(k, sk) + getNums(n - k, sa - sk);
        System.out.println(Arrays.toString(ans));
    }

    public static int[] getNums(int num, int t) {
        int[] result = new int[num];
        for (int i = 0; i < num; i++) {
            if (i < t % num) {
                result[i] = t / num + 1;
            } else {
                result[i] = t / num;
            }
        }
        return result;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC133_E {
    int V; // number of vertices
    List<Integer>[] adj; // adjacency list

    // Constructor
    Graph(int v) {
        V = v;
        adj = new ArrayList[v];
        for (int i = 0; i < v; i++) {
            adj[i] = new ArrayList<>();
        }
    }

    // Function to add an edge to the graph
    void addEdge(int v, int w) {
        adj[v].add(w);
        adj[w].add(v);
    }

    // Function to perform DFS
    int dfs(int s, int t, int k) {
        // Initialize a boolean array to keep track of visited vertices
        boolean[] visited = new boolean[V];

        // Initialize a stack to perform DFS
        Stack<Integer> stack = new Stack<>();

        // Mark the source vertex as visited and push it onto the stack
        visited[s] = true;
        stack.push(s);

        // Initialize the number of cases to 1
        int cases = 1;

        // Loop until the stack is empty
        while (!stack.isEmpty()) {
            // Pop a vertex from the stack
            int u = stack.pop();

            // If the popped vertex is the target vertex, return the number of cases
            if (u == t) {
                return cases;
            }

            // Loop through all the neighbors of the popped vertex
            for (int v : adj[u]) {
                // If the neighbor has not been visited, mark it as visited and push it onto the stack
                if (!visited[v]) {
                    visited[v] = true;
                    stack.push(v);

                    // If the number of cases is not equal to the number of colors, update the number of cases
                    if (cases != k) {
                        cases = (cases * (k - 1)) % 1000000007;
                    }
                }
            }
        }

        // If the stack is empty and the target vertex has not been found, return 0
        return 0;
    }

    // Function to find the number of cases
    int findCases(int s, int t, int k) {
        // Perform DFS from the source vertex
        int cases = dfs(s, t, k);

        // If the number of cases is 0, return 0
        if (cases == 0) {
            return 0;
        }

        // Otherwise, return the number of cases
        return cases;
    }
}
import java.util.Scanner;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] words = new String[n];
        for (int i = 0; i < n; i++) {
            words[i] = sc.next().toLowerCase();
        }
        String oString = sc.next();
        String lowString = oString.toLowerCase();
        char letter1 = sc.next().charAt(0);
        char letter2 = (letter1 == 'a') ? 'b' : 'a';
        boolean[] valid = new boolean[oString.length()];
        for (int i = 0; i < oString.length(); i++) {
            valid[i] = false;
        }
        for (String word : words) {
            int index = lowString.indexOf(word);
            while (index >= 0) {
                for (int i = index; i < index + word.length(); i++) {
                    valid[i] = true;
                }
                index = lowString.indexOf(word, index + 1);
            }
        }
        for (int i = 0; i < oString.length(); i++) {
            if (valid[i]) {
                char c = oString.charAt(i);
                if (c == letter1) {
                    oString = oString.substring(0, i) + letter2 + oString.substring(i + 1);
                } else if (c == letter2) {
                    oString = oString.substring(0, i) + letter1 + oString.substring(i + 1);
                }
            }
        }
        System.out.println(oString);
    }
}
public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int m = sc.nextInt();
        int k = sc.nextInt();

        int lo = 0;
        int hi = (int)1e18;
        while (hi - lo > 1) {
            int md = (lo + hi) / 2;
            int c = sum(m + md - 1) - sum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static int sum(int k) {
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();

        List<int[]> games = new ArrayList<>();
        for (int i = a; i <= x; i++) {
            if (i <= b) {
                continue;
            } else {
                for (int j = b; j <= y; j++) {
                    if (i > j) {
                        games.add(new int[] {i, j});
                    }
                }
            }
        }

        System.out.println(games.size());
        for (int[] game : games) {
            System.out.println(game[0] + " " + game[1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int s = sc.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int f = sc.nextInt();
            int t = sc.nextInt();
            int x = t - (s - f);
            if (x > c) {
                c = x;
            }
        }
        System.out.println(s + c);
    }
}
import java.util.Scanner;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int maxLevel = sc.nextInt();
        int[] x = new int[maxLevel];
        int[] y = new int[maxLevel];

        for (int i = 0; i < maxLevel; i++) {
            x[i] = sc.nextInt();
        }

        for (int i = 0; i < maxLevel; i++) {
            y[i] = sc.nextInt();
        }

        int[] z = new int[maxLevel];
        for (int i = 0; i < maxLevel; i++) {
            z[i] = x[i] + y[i];
        }

        if (z[0] == 0) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.Scanner;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        double[] arr = new double[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextDouble();
        }
        Arrays.sort(arr);
        int o = 2 * n - arr.length;
        double arrSum = 0;
        for (int i = 0; i < arr.length; i++) {
            arrSum += arr[i];
        }
        double res = 2e9;
        for (int i = 0; i < n + 1; i++) {
            if (i + o >= n) {
                res = Math.min(res, Math.abs(i - arrSum));
            }
        }
        System.out.printf("%.3f", res);
    }
}
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt() * N + i;
        }
        Arrays.sort(A);
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            int d = (A[i] % N) % 2;
            if (d % 2 != i % 2) {
                cnt++;
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;

        for (int i = 0; i < n; i++) {
            String line = sc.next();
            cake[i] = line;
            for (int j = 0; j < line.length(); j++) {
                if (line.charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i = chocCount; i >= chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }

        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i = chocCount; i >= chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }

        System.out.println(happiness);
    }
}
import java.util.Scanner;

public class codeforces_459_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x1 = sc.nextInt();
        int y1 = sc.nextInt();
        int x2 = sc.nextInt();
        int y2 = sc.nextInt();

        int denominator = x2 - x1;
        int numerator = y2 - y1;

        if (denominator != 0) {
            int quotient = numerator / denominator;
            if (quotient == 1) {
                int x4 = x2;
                int x3 = x1;
                int y4 = y1;
                int y3 = y2;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else if (quotient == -1) {
                int x4 = x1;
                int x3 = x2;
                int y4 = y2;
                int y3 = y1;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else {
                System.out.println("-1");
            }
        } else {
            int d = (int) Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            int x4 = x1 + d;
            int x3 = x2 + d;
            int y3 = y2 + d;
            int y4 = y1 + d;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        }
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String result = "";
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '.') {
                result += '0';
            } else {
                i++;
                if (s.charAt(i) == '.') {
                    result += '1';
                } else {
                    result += '2';
                }
            }
        }
        System.out.println(result);
    }
}
public static int[] readInts() {
    return Arrays.stream(System.in.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();
}
import java.util.HashMap;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int mod = 1000000007;
        HashMap<Integer, Integer> memo = new HashMap<>();
        for (int i = 0; i <= n; i++) {
            memo.put(i, 0);
        }
        System.out.println(dfs(0, "TTT", n, mod, memo));
    }

    public static int dfs(int cur, String last3, int n, int mod, HashMap<Integer, Integer> memo) {
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            String newLast3 = last3.substring(1) + c;
            if (ok(newLast3)) {
                ret = (ret + dfs(cur + 1, newLast3, n, mod, memo)) % mod;
            }
        }
        memo.put(cur, ret);
        return ret;
    }

    public static boolean ok(String last4) {
        for (int i = 0; i < 4; i++) {
            char[] t = last4.toCharArray();
            if (i >= 1) {
                t[i] = t[i - 1];
                t[i - 1] = t[i];
            }
            if (new String(t).contains("AGC")) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();

        if (a == 5 && b == 5 && c == 7) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = 368;
        int[] m = new int[N];
        int[] f = new int[N];

        int numCases = Integer.parseInt(sc.nextLine());
        for (int i = 0; i < numCases; i++) {
            String[] input = sc.nextLine().split(" ");
            String x = input[0];
            int a = Integer.parseInt(input[1]);
            int b = Integer.parseInt(input[2]) + 1;

            if (x.equals("M")) {
                m[a] += 2;
                m[b] -= 2;
            } else {
                f[a] += 2;
                f[b] -= 2;
            }
        }

        int a = 0, b = 0, c = 0;
        for (int i = 0; i < N; i++) {
            a += m[i];
            b += f[i];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }

        System.out.println(c);
    }
}
import java.util.Scanner;

public class atcoder_ABC123_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[5];
        for (int i = 0; i < 5; i++) {
            A[i] = sc.nextInt();
        }
        int minA = Integer.MAX_VALUE;
        for (int i = 0; i < 5; i++) {
            if (A[i] < minA) {
                minA = A[i];
            }
        }
        int result = (int) Math.ceil((double) N / minA) + 4;
        System.out.println(result);
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        List<Integer> L = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            L.add(scanner.nextInt());
        }
        L.add(0, -1);
        List<Integer> path = new ArrayList<>();
        path.add(1);
        int ind = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer, Integer> Hash = new HashMap<>();
        for (int i = 0; i < N + 1; i++) {
            int ne = L.get(x);
            if (Hash.containsKey(ne)) {
                flag = true;
                t = Hash.get(ne);
                break;
            }
            path.add(ne);
            ind++;
            Hash.put(ne, ind);
            x = ne;
        }
        if (flag) {
            List<Integer> loop = path.subList(t, path.size());
            if (K < path.size()) {
                System.out.println(path.get(K));
            } else {
                K = K - path.size();
                K = K % loop.size();
                System.out.println(loop.get(K));
            }
        } else {
            System.out.println(path.get(K - 1));
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        System.out.println(input.replace(",", " "));
    }
}
if (s.indexOf("AC", i - 1) == i - 1) {
    cumsum[i] = cumsum[i - 1] + 1;
} else {
    cumsum[i] = cumsum[i - 1];
}
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        if (arr[0] > 15) {
            System.out.println(15);
        } else {
            for (int i = 1; i < n; i++) {
                if (arr[i] - arr[i - 1] > 15) {
                    System.out.println(arr[i - 1] + 15);
                    break;
                }
            }
            if (arr[n - 1] == 90 || arr[n - 1] + 15 >= 90) {
                System.out.println(90);
            } else {
                System.out.println(arr[n - 1] + 15);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }
        int a = 1, b = max(lis);
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (check(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean check(int[] lis, int k, int mid) {
        int count = 0;
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] % mid == 0) {
                count++;
            }
        }
        return count >= k;
    }

    public static int max(int[] lis) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] > max) {
                max = lis[i];
            }
        }
        return max;
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void solve(String S, String T, int A, int B, String U) {
        if (S.equals(U)) {
            A--;
        }
        if (T.equals(U)) {
            B--;
        }
        System.out.println(A + " " + B);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String T = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, T, A, B, U);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] s = sc.nextLine().split(" ");
        HashMap<String, Integer> w = new HashMap<>();
        for (String str : s) {
            if (w.containsKey(str)) {
                w.put(str, w.get(str) + 1);
            } else {
                w.put(str, 1);
            }
        }
        int maxCount = Collections.max(w.values());
        String mostFrequentWord = "";
        for (String str : w.keySet()) {
            if (w.get(str) == maxCount) {
                mostFrequentWord = str;
                break;
            }
        }
        System.out.println(mostFrequentWord);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }

        int m = 0;
        for (int a = 0; a < n - 1; a++) {
            if (x[a] >= x[a + 1]) {
                int q = (x[a] - x[a + 1]) / d + 1;
                m += q;
                x[a + 1] += q * d;
            }
        }

        System.out.println(m);
    }
}
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<List<Integer>> orig = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            orig.add(Arrays.asList(i));
        }
        List<Integer> p = new ArrayList<>();
        List<Integer> q = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            p.add(sc.nextInt());
            q.add(sc.nextInt());
        }
        int pn = orig.indexOf(p);
        int qn = orig.indexOf(q);
        System.out.println(Math.abs(pn - qn));
    }
}
import java.util.Scanner;

public class atcoder_ABC145_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int T = scanner.nextInt();
        int[][] timeValue = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            timeValue[i][0] = scanner.nextInt();
            timeValue[i][1] = scanner.nextInt();
        }
        int[][] dp = new int[N + 1][T + 1];
        for (int i = 1; i <= N; i++) {
            for (int t = 1; t <= T; t++) {
                if (timeValue[i][0] > t) {
                    dp[i][t] = dp[i - 1][t];
                } else {
                    dp[i][t] = Math.max(dp[i - 1][t], timeValue[i][1] + dp[i - 1][t - timeValue[i][0]]);
                }
            }
        }
        int maxVal = dp[N][T];
        for (int i = N - 1; i >= 1; i--) {
            int t = T - timeValue[i + 1][0];
            if (t < 0) {
                break;
            }
            maxVal = Math.max(maxVal, timeValue[i][1] + dp[i - 1][t]);
        }
        System.out.println(maxVal);
    }
}
import java.util.Scanner;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }
        Arrays.sort(lst);
        Arrays.reverse(lst);
        int od = 0;
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 1) {
                od++;
            }
        }
        int sum = 0;
        int ok = 0;
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else {
                if (ok || od > 1) {
                    sum += lst[i];
                    od--;
                    ok = 1 - ok;
                }
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int x = 0;
        if (k <= Math.max(n * n / 2, n * n - (n * n / 2))) {
            System.out.println("YES");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (i % 2 == j % 2 && x < k) {
                        System.out.print("L");
                        x++;
                    } else {
                        System.out.print("S");
                    }
                }
                System.out.println();
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = scanner.nextInt();
        }

        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int p = 0;
        int m = 0;
        int x = 0;
        int y = 0;
        int lastx = N;
        int lasty = N;

        for (int i = 0; i < N; i++) {
            if (lst[i] == 0) {
                K--;
            }
            if (lst[i] > 0) {
                lst_p[i] = lst[i];
            } else if (lst[i] < 0) {
                lst_m[i] = lst[i];
            }
        }

        int ans = 1000000000;
        for (int j = 0; j <= K; j++) {
            if (j > lastx || K - j > lasty) {
                continue;
            }
            if (j == 0) {
                p = 0;
            } else {
                p = lst_p[j - 1];
            }
            if (K - j == 0) {
                m = 0;
            } else {
                m = lst_m[lasty - (K - j)];
            }
            ans = Math.min(ans, 2 * p + Math.abs(m), p + 2 * Math.abs(m));
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        int[] l2 = new int[n];
        for (int i = 0; i < n; i++) {
            if (l[i] % m == 0) {
                l2[i] = l[i] / m;
            } else {
                l2[i] = l[i] / m + 1;
            }
        }
        int mx = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] > mx) {
                mx = l2[i];
            }
        }
        for (int i = 0; i < n; i++) {
            if (l2[i] == mx) {
                System.out.println(i + 1);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = sc.nextInt();
        }
        int one = 0;
        int zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }
        int pattern_a = 0;
        int pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combination(zero, j);
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += combination(one, time);
            }
            time++;
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static int combination(int n, int k) {
        int a = 1;
        for (int i = 0; i < k; i++) {
            a *= n - i;
        }
        for (int j = 0; j < k; j++) {
            a /= j + 1;
        }
        return a;
    }
}
import java.util.Scanner;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (l[i] > c) {
                c++;
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.Scanner;

public class atcoder_ARC062_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numG = 0, numP = 0, score = 0;
        String input = sc.nextLine();
        for (int i = 0; i < input.length(); i++) {
            char x = input.charAt(i);
            if (x == 'g') {
                if (numG - numP > 0) {
                    score++;
                    numP++;
                } else {
                    score = score;
                    numG++;
                }
            } else if (x == 'p') {
                if (numG - numP > 0) {
                    score = score;
                    numP++;
                } else {
                    score--;
                    numG++;
                }
            }
        }
        System.out.println(score);
    }
}
import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        System.out.println(aaa(N));
    }

    public static int aaa(int n) {
        if (n > N) {
            return 0;
        }
        int ans = 1;
        if (set(String.valueOf(n)).equals("753")) {
            ans = 0;
        }
        for (int i = 0; i < 3; i++) {
            ans += aaa(n + i);
        }
        return ans;
    }
}
import java.util.*;

public class atcoder_AGC002_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] balls = new int[N][2];
        for (int i = 0; i < N; i++) {
            balls[i][0] = 1;
            balls[i][1] = 0;
        }
        balls[0][0] = 0;
        balls[0][1] = 1;
        for (int i = 0; i < M; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            int w_x = balls[x - 1][0];
            int r_x = balls[x - 1][1];
            int w_y = balls[y - 1][0];
            int r_y = balls[y - 1][1];
            if (w_x >= 1 && r_x >= 1) {
                balls[x - 1][0] -= 1;
                balls[y - 1][1] += 1;
            } else if (w_x == 0) {
                balls[x - 1][1] -= 1;
                balls[y - 1][1] += 1;
            } else {
                balls[x - 1][0] -= 1;
                balls[y - 1][0] += 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (balls[i][1] > 0) {
                ans += 1;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        if (n % 2 != 0) {
            System.out.println("No");
        } else {
            String firstHalf = s.substring(0, n / 2);
            String secondHalf = s.substring(n / 2);
            if (firstHalf.equals(secondHalf)) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] matrix = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

        int[][] dp = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                dp[i][j] = matrix[i][j];
            }
        }

        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
            }
        }

        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                max = Math.max(max, dp[i][j]);
            }
        }

        System.out.println(max);
    }
}
public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int ans = 0;
        while (Math.pow(10, i) <= N) {
            ans += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
            i += 2;
        }
        ans += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = sc.nextInt();
        }

        int maxVal = 0;
        int maxSign = 0;
        int maxIndex = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > maxVal) {
                maxVal = Math.abs(a[i]);
                maxSign = Math.signum(a[i]);
                maxIndex = i;
            }
        }

        if (maxSign == 0) {
            System.out.println(0);
        } else if (maxSign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println(maxIndex + 1 + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println((i + 1) + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println(maxIndex + 1 + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println((i + 1) + " " + i);
            }
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        ArrayList<String> even = new ArrayList<String>();
        ArrayList<String> odd = new ArrayList<String>();
        for (int i = 0; i < s.length(); i++) {
            if (i % 2 == 0) {
                even.add(s.charAt(i));
            } else {
                odd.add(s.charAt(i));
            }
        }
        int evenCount = 0;
        int oddCount = 0;
        for (String e : even) {
            if (e.equals("0")) {
                evenCount++;
            }
        }
        for (String o : odd) {
            if (o.equals("1")) {
                oddCount++;
            }
        }
        int min = Math.min(s.length() - (evenCount + oddCount), s.length() - (evenCount + oddCount));
        System.out.println(min);
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();
        Task[] tasks = new Task[n];
        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            tasks[i] = new Task(time, duration, i);
        }

        Queue<Task> remaining = new LinkedList<>();
        int finishTime = 0;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            Task task = tasks[i];
            if (task.time > finishTime && remaining.isEmpty()) {
                finishTime = task.time + task.duration;
                result[task.index] = finishTime;
            } else {
                if (task.time >= finishTime && !remaining.isEmpty()) {
                    finishTime = runTask(remaining, finishTime);
                    result[task.index] = finishTime;
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[task.index] = -1;
                }
            }
        }

        while (!remaining.isEmpty()) {
            finishTime = runTask(remaining, finishTime);
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }

    private static int runTask(Queue<Task> remaining, int finishTime) {
        Task task = remaining.poll();
        finishTime = Math.max(finishTime, task.time) + task.duration;
        return finishTime;
    }

    static class Task {
        int time;
        int duration;
        int index;

        public Task(int time, int duration, int index) {
            this.time = time;
            this.duration = duration;
            this.index = index;
        }
    }
}
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }

        int pre = Integer.MAX_VALUE;
        int ans = 0;
        for (int j = 0; j < n; j++) {
            int current = Math.max(0, Math.min(pre - 1, a[j]));
            ans += current;
            pre = Math.max(0, current);
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        int ans = 0;
        if (a[0] > x) {
            System.out.println(0);
            return;
        }

        for (int i = 0; i < n; i++) {
            if (a[i] > x) {
                x = 0;
                break;
            }
            x -= a[i];
            ans++;
        }

        if (x != 0) {
            ans--;
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println((n * 2 + 1) / 3);
    }
}
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.nextLine();
        int n = S.length();
        if (n == 1) {
            if (S.equals("5") || S.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            return;
        }

        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (S.charAt(i) != '?') {
                    dp[i][Integer.parseInt(S.charAt(i) + "")] += 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] += 1;
                    }
                }
            } else {
                if (S.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(S.charAt(i) + "")) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }

        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double distance = 0.0;
                for (int k = 0; k < d; k++) {
                    distance += Math.pow(points[i][k] - points[j][k], 2);
                }
                if (Math.sqrt(distance) % 1 == 0) {
                    count++;
                }
            }
        }

        System.out.println(count);
    }
}
100%|██████████| 250/250 [00:00<00:00, 19505.85it/s]
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int l = 1, r = n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if (idxcnt < n) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l -= 1;
        idxcnt = l * (l + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
import java.util.Scanner;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        for (int i = 0; i < n; i++) {
            x += a[i];
            y += b[i];
            z += c[i];
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        HashMap<Integer, Integer> w = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int num = sc.nextInt();
            if (w.containsKey(num)) {
                w.put(num, w.get(num) + 1);
            } else {
                w.put(num, 1);
            }
        }
        int c = 0;
        for (int i : w.keySet()) {
            if (i == 0) {
                c += w.get(i) * (w.get(i) - 1);
            } else {
                if (w.containsKey(-i)) {
                    c += w.get(i) * w.get(-i);
                }
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int candeleIntere = sc.nextInt();
        int b = sc.nextInt();
        int s = 0;
        int restoSciolte = 0;

        while (candeleIntere > 0 || restoSciolte >= b) {
            candeleIntere += restoSciolte / b;
            restoSciolte %= b;
            s += candeleIntere;
            restoSciolte += candeleIntere % b;
            candeleIntere /= b;
        }

        System.out.println(s);
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model codellama/CodeLlama-34b-Instruct-hf --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC028_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC089_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 1.
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_518_B.java' returned non-zero exit status 1.
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC150_D.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC148_F.java
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 1.
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_189_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_30_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_25_A.java' returned non-zero exit status 1.
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC168_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC150_E.java' returned non-zero exit status 1.
Filename:  codeforces_456_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_456_A.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 1.
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC152_E.java' returned non-zero exit status 1.
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  atcoder_ABC155_E.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_AGC012_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC122_C.java' returned non-zero exit status 1.
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC136_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/CodeLlama-34b-Instruct-hf/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 70
Success: ['codeforces_397_B.java', 'atcoder_AGC038_A.java', 'atcoder_ABC132_A.java', 'atcoder_AGC006_B.java', 'atcoder_ABC126_E.java', 'codeforces_23_B.java', 'codeforces_544_B.java', 'codeforces_705_B.java', 'atcoder_ABC125_C.java', 'atcoder_ABC164_A.java', 'atcoder_ABC133_B.java', 'atcoder_ABC043_B.java', 'atcoder_ABC171_E.java', 'codeforces_92_A.java', 'codeforces_282_B.java', 'atcoder_ABC125_A.java', 'codeforces_534_B.java', 'codeforces_58_B.java', 'codeforces_379_A.java', 'atcoder_ABC153_A.java', 'atcoder_AGC024_B.java', 'atcoder_ABC051_A.java', 'codeforces_265_B.java', 'codeforces_267_A.java', 'atcoder_ABC170_A.java', 'atcoder_ABC145_C.java', 'codeforces_581_A.java', 'codeforces_37_A.java', 'codeforces_678_A.java', 'atcoder_AGC006_A.java', 'atcoder_AGC046_A.java', 'codeforces_608_A.java', 'codeforces_669_A.java', 'atcoder_AGC002_B.java', 'atcoder_ABC140_D.java', 'codeforces_110_B.java', 'codeforces_242_A.java', 'codeforces_569_A.java', 'codeforces_607_A.java', 'atcoder_ABC139_B.java', 'atcoder_ABC149_C.java', 'codeforces_581_B.java', 'atcoder_ABC143_A.java', 'codeforces_55_A.java', 'atcoder_ABC158_A.java', 'atcoder_ABC145_B.java', 'atcoder_ABC174_C.java', 'atcoder_ABC152_C.java', 'atcoder_ABC112_A.java', 'codeforces_629_B.java', 'codeforces_333_B.java', 'atcoder_ABC154_A.java', 'codeforces_546_A.java', 'atcoder_AGC035_B.java', 'codeforces_583_B.java', 'atcoder_AGC002_A.java', 'codeforces_11_A.java', 'atcoder_ABC124_A.java', 'codeforces_268_A.java', 'codeforces_131_B.java', 'codeforces_612_B.java', 'codeforces_59_A.java', 'codeforces_203_A.java', 'codeforces_95_A.java', 'codeforces_106_B.java', 'codeforces_408_B.java', 'codeforces_190_A.java', 'atcoder_ABC108_B.java', 'codeforces_32_B.java', 'codeforces_387_B.java']
Fail: ['codeforces_609_B.java', 'codeforces_327_A.java', 'codeforces_148_B.java', 'atcoder_AGC021_B.java', 'atcoder_AGC017_A.java', 'codeforces_644_B.java', 'atcoder_ABC172_D.java', 'codeforces_203_B.java', 'atcoder_ABC147_D.java', 'codeforces_445_A.java', 'codeforces_617_B.java', 'atcoder_AGC029_C.java', 'atcoder_ABC145_E.java', 'atcoder_ABC105_D.java', 'atcoder_ABC165_C.java', 'atcoder_AGC034_B.java', 'codeforces_147_A.java', 'codeforces_450_A.java', 'codeforces_31_A.java', 'codeforces_242_B.java', 'codeforces_624_B.java', 'codeforces_79_A.java', 'atcoder_AGC028_A.java', 'atcoder_ABC174_E.java', 'atcoder_ABC111_C.java', 'codeforces_459_A.java', 'codeforces_678_B.java', 'atcoder_ABC104_C.java', 'atcoder_AGC037_E.java', 'codeforces_306_A.java', 'atcoder_ABC178_A.java', 'atcoder_AGC046_B.java', 'codeforces_672_A.java', 'codeforces_598_A.java', 'atcoder_AGC007_C.java', 'atcoder_ABC178_B.java', 'atcoder_ABC140_F.java', 'codeforces_334_A.java', 'atcoder_ABC155_E.java', 'atcoder_AGC027_A.java', 'atcoder_ARC062_B.java', 'atcoder_ABC142_A.java', 'codeforces_387_A.java', 'atcoder_ABC042_A.java', 'atcoder_ABC120_C.java', 'codeforces_299_A.java', 'atcoder_ABC148_F.java', 'atcoder_ABC109_B.java', 'codeforces_340_A.java', 'atcoder_ABC118_C.java', 'atcoder_ABC168_C.java', 'codeforces_673_A.java', 'atcoder_ABC135_D.java', 'codeforces_56_B.java', 'codeforces_579_A.java', 'codeforces_274_A.java', 'atcoder_ABC128_C.java', 'atcoder_ABC150_C.java', 'atcoder_AGC004_B.java', 'codeforces_400_B.java', 'codeforces_637_A.java', 'atcoder_AGC013_A.java', 'codeforces_216_B.java', 'atcoder_ABC127_B.java', 'atcoder_ABC129_E.java', 'atcoder_ABC125_B.java', 'atcoder_ABC143_D.java', 'codeforces_567_A.java', 'codeforces_596_B.java', 'codeforces_354_A.java', 'atcoder_ABC155_D.java', 'codeforces_134_A.java', 'codeforces_231_A.java', 'atcoder_AGC010_B.java', 'atcoder_ABC106_C.java', 'codeforces_356_A.java', 'codeforces_287_A.java', 'atcoder_ABC169_D.java', 'codeforces_519_B.java', 'codeforces_171_A.java', 'codeforces_272_B.java', 'codeforces_665_A.java', 'codeforces_400_A.java', 'atcoder_AGC004_D.java', 'atcoder_ABC127_F.java', 'codeforces_146_A.java', 'atcoder_AGC014_D.java', 'atcoder_AGC033_A.java', 'atcoder_AGC027_B.java', 'codeforces_276_B.java', 'codeforces_469_A.java', 'codeforces_96_B.java', 'atcoder_ABC158_B.java', 'atcoder_ABC169_C.java', 'atcoder_ABC162_D.java', 'codeforces_500_A.java', 'atcoder_ABC123_C.java', 'codeforces_514_A.java', 'atcoder_ABC149_B.java', 'codeforces_302_A.java', 'atcoder_AGC043_B.java', 'codeforces_313_B.java', 'codeforces_99_A.java', 'atcoder_ABC166_C.java', 'atcoder_ABC123_D.java', 'codeforces_61_B.java', 'atcoder_ABC110_C.java', 'codeforces_86_A.java', 'atcoder_AGC003_C.java', 'codeforces_456_A.java', 'atcoder_ARC086_B.java', 'atcoder_ABC114_C.java', 'atcoder_ABC119_B.java', 'codeforces_404_A.java', 'atcoder_ABC122_C.java', 'atcoder_ABC070_B.java', 'codeforces_369_B.java', 'codeforces_518_B.java', 'atcoder_ABC123_B.java', 'codeforces_296_A.java', 'atcoder_ABC112_C.java', 'atcoder_ABC150_D.java', 'codeforces_8_B.java', 'codeforces_351_A.java', 'atcoder_AGC019_A.java', 'atcoder_AGC011_C.java', 'codeforces_621_A.java', 'codeforces_189_A.java', 'atcoder_ABC137_D.java', 'codeforces_108_B.java', 'atcoder_ABC122_D.java', 'atcoder_ABC107_D.java', 'codeforces_622_A.java', 'atcoder_ABC167_C.java', 'atcoder_ABC151_A.java', 'atcoder_AGC033_B.java', 'atcoder_AGC012_A.java', 'atcoder_AGC028_B.java', 'atcoder_ABC167_D.java', 'atcoder_ABC134_E.java', 'atcoder_ABC142_C.java', 'codeforces_632_B.java', 'atcoder_ABC168_B.java', 'atcoder_ABC150_E.java', 'codeforces_30_A.java', 'codeforces_412_A.java', 'atcoder_AGC005_B.java', 'atcoder_ABC089_C.java', 'codeforces_651_A.java', 'codeforces_342_B.java', 'atcoder_ABC124_C.java', 'codeforces_459_B.java', 'atcoder_ABC136_B.java', 'codeforces_154_A.java', 'codeforces_474_B.java', 'atcoder_ABC133_E.java', 'codeforces_682_B.java', 'atcoder_ARC102_C.java', 'codeforces_25_A.java', 'codeforces_70_B.java', 'atcoder_ABC152_E.java', 'codeforces_629_A.java', 'codeforces_67_B.java', 'atcoder_ABC171_B.java', 'codeforces_49_A.java', 'atcoder_ABC126_D.java', 'codeforces_462_B.java', 'codeforces_7_B.java', 'codeforces_350_B.java', 'codeforces_373_B.java', 'atcoder_ABC107_C.java', 'codeforces_55_B.java', 'atcoder_ABC164_D.java', 'atcoder_ABC146_D.java', 'codeforces_421_A.java', 'atcoder_AGC025_A.java', 'atcoder_ABC169_E.java', 'codeforces_222_A.java', 'codeforces_653_A.java', 'atcoder_AGC029_C.java', 'atcoder_ABC132_F.java']
