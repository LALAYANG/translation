+ model=bigcode/starcoder2-15b
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model bigcode/starcoder2-15b --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 05:58:26 [__init__.py:241] Automatically detected platform cuda.
found 221 inputs
INFO 08-21 05:58:27 [utils.py:326] non-default args: {'model': 'bigcode/starcoder2-15b', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 05:58:32 [__init__.py:711] Resolved architecture: Starcoder2ForCausalLM
INFO 08-21 05:58:32 [__init__.py:2816] Downcasting torch.float32 to torch.bfloat16.
INFO 08-21 05:58:32 [__init__.py:1750] Using max model len 4096
INFO 08-21 05:58:32 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3371949)[0;0m INFO 08-21 05:58:33 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3371949)[0;0m INFO 08-21 05:58:33 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='bigcode/starcoder2-15b', speculative_config=None, tokenizer='bigcode/starcoder2-15b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=bigcode/starcoder2-15b, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3371949)[0;0m WARNING 08-21 05:58:33 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3371949)[0;0m INFO 08-21 05:58:33 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_198299e9'), local_subscribe_addr='ipc:///tmp/3baf79ee-edfb-4657-8370-e955bb115a8e', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:35 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_7f3de18b'), local_subscribe_addr='ipc:///tmp/7b4e36d5-d787-40a2-8284-d4d6f24ce641', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:35 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_3ce65cbd'), local_subscribe_addr='ipc:///tmp/c398b02e-f981-4f00-9581-2b2c0799eb61', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:35 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:35 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:35 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:35 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:36 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:36 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:36 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_4b8a7766'), local_subscribe_addr='ipc:///tmp/c77121c4-e000-4cb0-91c7-e5bb4a38f39a', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:36 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:36 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m WARNING 08-21 05:58:36 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m WARNING 08-21 05:58:36 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:36 [gpu_model_runner.py:1953] Starting to load model bigcode/starcoder2-15b...
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:36 [gpu_model_runner.py:1953] Starting to load model bigcode/starcoder2-15b...
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:36 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:36 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:36 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:36 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:58:37 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:58:37 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/14 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:   7% Completed | 1/14 [00:02<00:28,  2.21s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  14% Completed | 2/14 [00:03<00:22,  1.87s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  21% Completed | 3/14 [00:05<00:20,  1.82s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  29% Completed | 4/14 [00:07<00:18,  1.80s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  36% Completed | 5/14 [00:09<00:17,  1.91s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  43% Completed | 6/14 [00:10<00:14,  1.77s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  50% Completed | 7/14 [00:13<00:13,  1.93s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  57% Completed | 8/14 [00:15<00:11,  1.99s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  64% Completed | 9/14 [00:17<00:10,  2.14s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  71% Completed | 10/14 [00:20<00:08,  2.17s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  79% Completed | 11/14 [00:22<00:06,  2.18s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  86% Completed | 12/14 [00:24<00:04,  2.11s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards:  93% Completed | 13/14 [00:25<00:01,  1.90s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:04 [default_loader.py:262] Loading weights took 26.93 seconds
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:04 [gpu_model_runner.py:2007] Model loading took 14.8674 GiB and 27.762711 seconds
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards: 100% Completed | 14/14 [00:27<00:00,  1.97s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Loading safetensors checkpoint shards: 100% Completed | 14/14 [00:27<00:00,  1.98s/it]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m 
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:05 [default_loader.py:262] Loading weights took 27.84 seconds
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:05 [gpu_model_runner.py:2007] Model loading took 14.8674 GiB and 28.472237 seconds
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:13 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/9af23a13be/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:13 [backends.py:559] Dynamo bytecode transform time: 7.72 s
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:13 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/9af23a13be/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:13 [backends.py:559] Dynamo bytecode transform time: 8.06 s
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:20 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.257 s
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:20 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.499 s
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:24 [monitor.py:34] torch.compile takes 8.06 s in total
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:24 [monitor.py:34] torch.compile takes 7.72 s in total
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:25 [gpu_worker.py:276] Available KV cache memory: 52.81 GiB
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:25 [gpu_worker.py:276] Available KV cache memory: 52.81 GiB
[1;36m(EngineCore_0 pid=3371949)[0;0m INFO 08-21 05:59:25 [kv_cache_utils.py:849] GPU KV cache size: 1,384,368 tokens
[1;36m(EngineCore_0 pid=3371949)[0;0m INFO 08-21 05:59:25 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 336.67x
[1;36m(EngineCore_0 pid=3371949)[0;0m INFO 08-21 05:59:25 [kv_cache_utils.py:849] GPU KV cache size: 1,384,368 tokens
[1;36m(EngineCore_0 pid=3371949)[0;0m INFO 08-21 05:59:25 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 336.67x
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 23.06it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 24.12it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 23.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 23.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 22.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 23.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:00<00:01, 23.47it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:01, 23.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 22.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 22.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 22.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 22.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:01<00:01, 22.24it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:01<00:01, 22.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:01<00:01, 21.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:00, 21.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:02<00:00, 20.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 20.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:02<00:00, 19.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:02<00:00, 20.13it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:02<00:00, 19.98it/s][1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:29 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:03<00:00, 20.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 21.75it/s]
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:29 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP1 pid=3371957)[0;0m INFO 08-21 05:59:29 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.72 GiB
[1;36m(EngineCore_0 pid=3371949)[0;0m [1;36m(VllmWorker TP0 pid=3371955)[0;0m INFO 08-21 05:59:29 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.72 GiB
[1;36m(EngineCore_0 pid=3371949)[0;0m INFO 08-21 05:59:29 [core.py:214] init engine (profile, create kv cache, warmup model) took 23.67 seconds
INFO 08-21 05:59:29 [llm.py:298] Supported_tasks: ['generate']
Translating 221 files...
  0%|          | 0/221 [00:00<?, ?it/s]100%|██████████| 221/221 [00:00<00:00, 9783.64it/s]
Adding requests:   0%|          | 0/221 [00:00<?, ?it/s]Adding requests:  43%|████▎     | 95/221 [00:00<00:00, 949.19it/s]Adding requests:  89%|████████▉ | 197/221 [00:00<00:00, 989.40it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 991.74it/s]
Processed prompts:   0%|          | 0/221 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/221 [00:02<09:58,  2.72s/it, est. speed input: 105.15 toks/s, output: 3.31 toks/s]Processed prompts:   1%|▏         | 3/221 [00:03<03:37,  1.00it/s, est. speed input: 233.48 toks/s, output: 21.92 toks/s]Processed prompts:   2%|▏         | 5/221 [00:04<02:33,  1.41it/s, est. speed input: 311.26 toks/s, output: 56.01 toks/s]Processed prompts:   3%|▎         | 6/221 [00:12<09:19,  2.60s/it, est. speed input: 144.73 toks/s, output: 67.34 toks/s]Processed prompts:   3%|▎         | 7/221 [00:14<09:04,  2.54s/it, est. speed input: 139.07 toks/s, output: 104.80 toks/s]Processed prompts:   4%|▎         | 8/221 [00:14<06:45,  1.90s/it, est. speed input: 155.62 toks/s, output: 151.37 toks/s]Processed prompts:   4%|▍         | 9/221 [00:15<05:25,  1.53s/it, est. speed input: 172.34 toks/s, output: 194.09 toks/s]Processed prompts:   5%|▍         | 10/221 [00:20<09:09,  2.61s/it, est. speed input: 153.60 toks/s, output: 195.49 toks/s]Processed prompts:   5%|▍         | 11/221 [00:26<12:39,  3.62s/it, est. speed input: 132.39 toks/s, output: 202.10 toks/s]Processed prompts:   5%|▌         | 12/221 [00:29<11:34,  3.32s/it, est. speed input: 136.32 toks/s, output: 234.68 toks/s]Processed prompts:   6%|▋         | 14/221 [00:31<08:04,  2.34s/it, est. speed input: 148.45 toks/s, output: 315.06 toks/s]Processed prompts:   7%|▋         | 15/221 [00:33<07:22,  2.15s/it, est. speed input: 150.65 toks/s, output: 350.74 toks/s]Processed prompts:   8%|▊         | 17/221 [00:33<04:27,  1.31s/it, est. speed input: 172.08 toks/s, output: 448.99 toks/s]Processed prompts:   8%|▊         | 18/221 [00:34<04:01,  1.19s/it, est. speed input: 179.91 toks/s, output: 489.49 toks/s]Processed prompts:   9%|▊         | 19/221 [00:37<05:32,  1.65s/it, est. speed input: 173.72 toks/s, output: 499.66 toks/s]Processed prompts:   9%|▉         | 20/221 [00:41<07:21,  2.20s/it, est. speed input: 168.51 toks/s, output: 503.85 toks/s]Processed prompts:  10%|▉         | 21/221 [00:47<11:34,  3.47s/it, est. speed input: 149.87 toks/s, output: 480.65 toks/s]Processed prompts:  10%|▉         | 22/221 [00:52<12:34,  3.79s/it, est. speed input: 165.61 toks/s, output: 487.27 toks/s]Processed prompts:  10%|█         | 23/221 [00:57<13:12,  4.00s/it, est. speed input: 162.34 toks/s, output: 497.16 toks/s]Processed prompts:  11%|█         | 24/221 [00:57<10:09,  3.09s/it, est. speed input: 182.08 toks/s, output: 538.31 toks/s]Processed prompts:  11%|█▏        | 25/221 [00:58<07:55,  2.43s/it, est. speed input: 200.85 toks/s, output: 579.29 toks/s]Processed prompts:  12%|█▏        | 26/221 [01:00<07:08,  2.20s/it, est. speed input: 214.80 toks/s, output: 611.85 toks/s]Processed prompts:  12%|█▏        | 27/221 [01:02<06:48,  2.10s/it, est. speed input: 226.01 toks/s, output: 641.34 toks/s]Processed prompts:  13%|█▎        | 28/221 [01:02<05:08,  1.60s/it, est. speed input: 241.82 toks/s, output: 685.18 toks/s]Processed prompts:  13%|█▎        | 29/221 [01:03<04:13,  1.32s/it, est. speed input: 255.99 toks/s, output: 726.02 toks/s]Processed prompts:  14%|█▎        | 30/221 [01:03<03:11,  1.00s/it, est. speed input: 271.39 toks/s, output: 771.05 toks/s]Processed prompts:  14%|█▍        | 31/221 [01:03<02:30,  1.26it/s, est. speed input: 286.20 toks/s, output: 815.39 toks/s]Processed prompts:  14%|█▍        | 32/221 [01:05<02:46,  1.14it/s, est. speed input: 296.58 toks/s, output: 849.64 toks/s]Processed prompts:  15%|█▍        | 33/221 [01:06<02:59,  1.05it/s, est. speed input: 305.66 toks/s, output: 882.81 toks/s]Processed prompts:  15%|█▌        | 34/221 [01:06<02:12,  1.41it/s, est. speed input: 319.07 toks/s, output: 928.67 toks/s]Processed prompts:  16%|█▌        | 35/221 [01:06<01:54,  1.62it/s, est. speed input: 330.83 toks/s, output: 970.97 toks/s]Processed prompts:  17%|█▋        | 37/221 [01:06<01:06,  2.75it/s, est. speed input: 357.26 toks/s, output: 1064.41 toks/s]Processed prompts:  18%|█▊        | 39/221 [01:07<00:45,  3.98it/s, est. speed input: 383.29 toks/s, output: 1157.23 toks/s]Processed prompts:  18%|█▊        | 40/221 [01:07<00:43,  4.15it/s, est. speed input: 395.35 toks/s, output: 1201.41 toks/s]Processed prompts:  19%|█▊        | 41/221 [01:07<00:39,  4.51it/s, est. speed input: 407.53 toks/s, output: 1246.23 toks/s]Processed prompts:  19%|█▉        | 42/221 [01:07<00:52,  3.42it/s, est. speed input: 417.23 toks/s, output: 1284.70 toks/s]Processed prompts:  19%|█▉        | 43/221 [01:08<00:45,  3.89it/s, est. speed input: 428.79 toks/s, output: 1329.36 toks/s]Processed prompts:  20%|██        | 45/221 [01:08<00:33,  5.26it/s, est. speed input: 452.39 toks/s, output: 1420.54 toks/s]Processed prompts:  21%|██▏       | 47/221 [01:08<00:24,  6.99it/s, est. speed input: 476.13 toks/s, output: 1512.95 toks/s]Processed prompts:  22%|██▏       | 48/221 [01:08<00:26,  6.65it/s, est. speed input: 487.00 toks/s, output: 1556.71 toks/s]Processed prompts:  22%|██▏       | 49/221 [01:09<00:47,  3.64it/s, est. speed input: 493.79 toks/s, output: 1588.95 toks/s]Processed prompts:  23%|██▎       | 51/221 [01:09<00:35,  4.79it/s, est. speed input: 515.09 toks/s, output: 1679.01 toks/s]Processed prompts:  24%|██▍       | 53/221 [01:09<00:32,  5.19it/s, est. speed input: 535.05 toks/s, output: 1766.13 toks/s]Processed prompts:  24%|██▍       | 54/221 [01:09<00:30,  5.45it/s, est. speed input: 544.87 toks/s, output: 1810.00 toks/s]Processed prompts:  25%|██▍       | 55/221 [01:10<00:34,  4.77it/s, est. speed input: 553.34 toks/s, output: 1849.87 toks/s]Processed prompts:  25%|██▌       | 56/221 [01:10<00:36,  4.54it/s, est. speed input: 561.85 toks/s, output: 1890.86 toks/s]Processed prompts:  27%|██▋       | 59/221 [01:10<00:21,  7.54it/s, est. speed input: 592.01 toks/s, output: 2029.56 toks/s]Processed prompts:  28%|██▊       | 62/221 [01:10<00:15, 10.30it/s, est. speed input: 621.74 toks/s, output: 2168.08 toks/s]Processed prompts:  29%|██▉       | 64/221 [01:11<00:20,  7.48it/s, est. speed input: 637.76 toks/s, output: 2249.49 toks/s]Processed prompts:  30%|██▉       | 66/221 [01:11<00:26,  5.83it/s, est. speed input: 652.17 toks/s, output: 2328.00 toks/s]Processed prompts:  30%|███       | 67/221 [01:12<00:32,  4.80it/s, est. speed input: 657.88 toks/s, output: 2363.16 toks/s]Processed prompts:  32%|███▏      | 71/221 [01:12<00:19,  7.67it/s, est. speed input: 692.35 toks/s, output: 2546.65 toks/s]Processed prompts:  33%|███▎      | 73/221 [01:12<00:22,  6.46it/s, est. speed input: 705.57 toks/s, output: 2626.07 toks/s]Processed prompts:  34%|███▍      | 75/221 [01:12<00:18,  7.73it/s, est. speed input: 721.56 toks/s, output: 2716.86 toks/s]Processed prompts:  35%|███▍      | 77/221 [01:13<00:30,  4.77it/s, est. speed input: 729.40 toks/s, output: 2781.24 toks/s]Processed prompts:  35%|███▌      | 78/221 [01:13<00:30,  4.66it/s, est. speed input: 734.73 toks/s, output: 2819.90 toks/s]Processed prompts:  36%|███▌      | 80/221 [01:14<00:23,  5.95it/s, est. speed input: 748.63 toks/s, output: 2909.81 toks/s]Processed prompts:  38%|███▊      | 83/221 [01:14<00:24,  5.62it/s, est. speed input: 765.00 toks/s, output: 3029.76 toks/s]Processed prompts:  38%|███▊      | 84/221 [01:14<00:23,  5.93it/s, est. speed input: 770.82 toks/s, output: 3072.54 toks/s]Processed prompts:  38%|███▊      | 85/221 [01:15<00:23,  5.75it/s, est. speed input: 775.69 toks/s, output: 3112.20 toks/s]Processed prompts:  39%|███▉      | 86/221 [01:15<00:24,  5.46it/s, est. speed input: 780.20 toks/s, output: 3150.93 toks/s]Processed prompts:  40%|███▉      | 88/221 [01:15<00:18,  7.14it/s, est. speed input: 792.12 toks/s, output: 3240.48 toks/s]Processed prompts:  42%|████▏     | 92/221 [01:15<00:12, 10.64it/s, est. speed input: 816.27 toks/s, output: 3422.20 toks/s]Processed prompts:  43%|████▎     | 94/221 [01:15<00:10, 11.98it/s, est. speed input: 827.87 toks/s, output: 3512.65 toks/s]Processed prompts:  43%|████▎     | 96/221 [01:15<00:10, 12.41it/s, est. speed input: 838.85 toks/s, output: 3601.34 toks/s]Processed prompts:  45%|████▌     | 100/221 [01:15<00:07, 17.00it/s, est. speed input: 862.38 toks/s, output: 3786.15 toks/s]Processed prompts:  46%|████▌     | 102/221 [01:16<00:07, 16.18it/s, est. speed input: 872.91 toks/s, output: 3874.57 toks/s]Processed prompts:  48%|████▊     | 105/221 [01:16<00:08, 13.78it/s, est. speed input: 887.51 toks/s, output: 4003.43 toks/s]Processed prompts:  49%|████▉     | 109/221 [01:16<00:06, 17.31it/s, est. speed input: 909.01 toks/s, output: 4187.13 toks/s]Processed prompts:  51%|█████     | 112/221 [01:16<00:05, 19.64it/s, est. speed input: 924.74 toks/s, output: 4324.87 toks/s]Processed prompts:  52%|█████▏    | 115/221 [01:16<00:05, 21.03it/s, est. speed input: 939.92 toks/s, output: 4461.69 toks/s]Processed prompts:  54%|█████▍    | 119/221 [01:16<00:04, 22.76it/s, est. speed input: 959.97 toks/s, output: 4644.17 toks/s]Processed prompts:  57%|█████▋    | 127/221 [01:17<00:03, 31.30it/s, est. speed input: 1000.46 toks/s, output: 5017.12 toks/s]Processed prompts:  59%|█████▉    | 131/221 [01:17<00:02, 31.32it/s, est. speed input: 1019.37 toks/s, output: 5200.55 toks/s]Processed prompts:  61%|██████    | 135/221 [01:17<00:02, 31.45it/s, est. speed input: 1037.92 toks/s, output: 5383.82 toks/s]Processed prompts:  63%|██████▎   | 139/221 [01:17<00:03, 26.20it/s, est. speed input: 1054.53 toks/s, output: 5560.53 toks/s]Processed prompts:  67%|██████▋   | 148/221 [01:17<00:01, 37.57it/s, est. speed input: 1095.75 toks/s, output: 5983.43 toks/s]Processed prompts:  70%|███████   | 155/221 [01:17<00:01, 37.78it/s, est. speed input: 1125.52 toks/s, output: 6305.37 toks/s]Processed prompts:  72%|███████▏  | 160/221 [01:17<00:01, 35.47it/s, est. speed input: 1145.39 toks/s, output: 6532.33 toks/s]Processed prompts:  75%|███████▌  | 166/221 [01:18<00:01, 36.80it/s, est. speed input: 1168.84 toks/s, output: 6808.68 toks/s]Processed prompts:  77%|███████▋  | 170/221 [01:18<00:01, 36.98it/s, est. speed input: 1183.93 toks/s, output: 6992.12 toks/s]Processed prompts:  80%|████████  | 177/221 [01:18<00:00, 44.22it/s, est. speed input: 1210.75 toks/s, output: 7320.40 toks/s]Processed prompts:  82%|████████▏ | 182/221 [01:18<00:00, 40.62it/s, est. speed input: 1228.02 toks/s, output: 7547.68 toks/s]Processed prompts:  87%|████████▋ | 193/221 [01:18<00:00, 54.92it/s, est. speed input: 1268.23 toks/s, output: 8067.46 toks/s]Processed prompts:  90%|█████████ | 199/221 [01:18<00:00, 55.97it/s, est. speed input: 1288.57 toks/s, output: 8347.26 toks/s]Processed prompts:  93%|█████████▎| 205/221 [01:18<00:00, 56.26it/s, est. speed input: 1307.96 toks/s, output: 8626.78 toks/s]Processed prompts:  96%|█████████▌| 212/221 [01:18<00:00, 57.00it/s, est. speed input: 1329.73 toks/s, output: 8953.16 toks/s]Processed prompts:  99%|█████████▊| 218/221 [01:19<00:00, 42.59it/s, est. speed input: 1344.99 toks/s, output: 9217.91 toks/s]Processed prompts: 100%|██████████| 221/221 [01:19<00:00, 42.59it/s, est. speed input: 1348.06 toks/s, output: 9328.46 toks/s]Processed prompts: 100%|██████████| 221/221 [01:19<00:00,  2.78it/s, est. speed input: 1348.06 toks/s, output: 9328.46 toks/s]
+ python3 clean_generations_translation.py --model bigcode/starcoder2-15b --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/221 [00:00<?, ?it/s]
import java.util.Date;
import java.util.Base64;
import java.util.concurrent.TimeUnit;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.net.URLDecoder;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.SecureRandom;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.InvalidKeyException;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.StringUtils;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.time.FastDateFormat;
import org.apache.commons.lang3.time.StopWatch;
import org.apache.commons.lang3.time.DurationFormatUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.apache.commons.lang3.math.Fraction;
import org.apache.commons.lang3.math.IEEE754rUtils;
import org.apache.commons.lang3.math.NumberUtils;
and
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.StampedLock.ReadWriteLock;
import java.util.concurrent.locks.StampedLock.WriteLock;
import java.util.concurrent.locks.StampedLock.ReadLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.Node;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.SHARED;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.EXCLUSIVE;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.CANCELLED;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.SIGNAL;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.PROPAGATE;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.waitStatus;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.next;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.nextWaiter;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.thread;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.
class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int n = s.length();
        if (n * k == 0) {
            return 0;
        }
        Map<Character, Integer> count = new HashMap<>();
        int left = 0;
        int right = 0;
        int ans = 1;
        while (right < n) {
            char ch = s.charAt(right);
            count.put(ch, count.getOrDefault(ch, 0) + 1);
            while (count.size() > k) {
                char ch2 = s.charAt(left);
                count.put(ch2, count.get(ch2) - 1);
                if (count.get(ch2) == 0) {
                    count.remove(ch2);
                }
                left++;
            }
            ans = Math.max(ans, right - left + 1);
            right++;
        }
        return ans;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }
        int min_problems_solved = 1000000000;
        for (int problem_set_mask = 0; problem_set_mask < (1 << D); problem_set_mask++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((problem_set_mask >> j & 1) == 1) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((problem_set_mask >> j & 1) == 1) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                } else {
                    int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    min_problems_solved = Math.min(min_problems_solved, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(min_problems_solved);
    }
}
import java.util.Date;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.net.URLDecoder;
import java.util.concurrent.TimeUnit;
import java.util.Random;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.concurrent.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] line = br.readLine().split(" ");
        int N = Integer.parseInt(line[0]);
        int M = Integer.parseInt(line[1]);
        line = br.readLine().split(" ");
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = Integer.parseInt(line[i]);
        }
        int[] array_with_zero_and_A = new int[N + 1];
        array_with_zero_and_A[0] = 0;
        for (int i = 0; i < N; i++) {
            array_with_zero_and_A[i + 1] = A[i];
        }
        int[] cumulative_remainders = calculate_cumulative_remainders(array_with_zero_and_A, M);
        int[] cum_remainders = cumulative_remainders;
        Map<Integer, Integer> remainder_counts = new HashMap<>();
        for (int i = 0; i < cum_remainders.length; i++) {
            int remainder = cum_remainders[i];
            if (remainder_counts.containsKey(remainder)) {
                remainder_counts.put(remainder, remainder_counts.get(remainder) + 1);
            } else {
                remainder_counts.put(remainder, 1);
            }
        }
        Collections.shuffle(Arrays.asList(25, 60, 48));
        int combinations = 0;
        for (int count : remainder_counts.values()) {
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
    }

    public static int[] calculate_cumulative_remainders(int[] array_with_zero_and_A, int M) {
        int[] cumulative_remainders = new int[array_with_zero_and_A.length];
        cumulative_remainders[0] = 0;
        for (int i = 1; i < array_with_zero_and_A.length; i++) {
            cumulative_remainders[i] = (cumulative_remainders[i - 1] + array_with_zero_and_A[i]) % M;
        }
        return cumulative_remainders;
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_55_A {
    public static void main(String[] args) {
        int condition_one = 368;
        int condition_two = 165;
        int input_number = 10;
        while (input_number % 2 == 0) {
            int divisor = 2;
            Queue<Integer> queue_division_operation0 = new LinkedBlockingQueue<>();

            Thread thread_division_operation0 = new Thread(() -> {
                int result = division_operation(divisor, input_number);
                queue_division_operation0.add(result);
            });
            thread_division
## 49.

Write a function that takes a list of numbers and returns a list of all those numbers divided by two.
and
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int D = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int row = A; row <= C; row++) {
            for (int j = B; j <= D; j++) {
                int curr_row_prev_col_val = d[row][j - 1];
                int prev_row_val = d[row - 1][j];
                int prev_row_prev_col_val = d[row - 1][j - 1];
                int curr_row = d[row][j];
                int prev_row = d[row - 1][j];
                int prev_row_prev_col = d[row - 1][j - 1];
                int col_idx = 1;
                int row_idx = 1;
                d[row][j] += calculate_value(row_idx, j, m, row, curr_row_prev_col_val, col_idx, prev_row_val, prev_row_prev_col_val);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculate_value(int row_idx, int j, int m, int row, int curr_row_prev_col_val, int col_idx, int prev_row_val, int prev_row_prev_col_val) {
        return (curr_row_prev_col_val * row + prev_row_val * j - prev_row_prev_col_val * (row - row_idx) * (j - col_idx)) % m;
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Random rand = new Random();
        int t = sc.nextInt();
        int m = sc.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        int fourthCheck = 99;
        int sixthCheck = 940;
        int firstCheck = 977;
        int secondCheck = 289;
        int thirdCheck = 15;
        int fifthCheck = 698;
        for (int i = 0; i < t; i++) {
            String[] op = sc.next().split(" ");
            if (fourthCheck & sixthCheck) {
                if (op[0].equals("alloc")) {
                    int availableSlotCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            availableSlotCount++;
                            if (availableSlotCount == Integer.parseInt(op[1])) {
                                for (int k = j - Integer.parseInt(op[1]) + 1; k <= j; k++) {
                                    alocuente[k] = ind;
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            availableSlotCount = 0;
                        }
                    }
                    if (availableSlotCount != Integer.parseInt(op[1])) {
                        System.out.println("NULL");
                    }
                }
            }
            if (firstCheck & secondCheck) {
                if (op[0].equals("erase")) {
                    int availableSlotCount = 0;
                    if (Integer.parseInt(op[1]) <= 0 || !contains(alocuente, Integer.parseInt(op[1]))) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        for (int j = 0; j < m; j++) {
                            if (Integer.parseInt(op[1]) > 0 && alocuente[j] == Integer.parseInt(op[1])) {
                                alocuente[j] = 0;
                            }
                        }
                    }
                }
            }
            if (thirdCheck & fifthCheck) {
                if (op[0].equals("defragment")) {
                    int emptyBlockCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            emptyBlockCount++;
                        }
                    }
                    int[] newAlocuente = new int[m];
                    int newAlocuenteIndex = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] != 0) {
                            newAlocuente[newAlocuenteIndex] = alocuente[j];
                            newAlocuenteIndex++;
                        }
                    }
                    for (int j = 0; j < emptyBlockCount; j++) {
                        newAlocuente[newAlocuenteIndex] = 0;
                        newAlocuenteIndex++;
                    }
                    alocuente = newAlocuente;
                }
            }
        }
    }

    public static boolean contains(int[] array, int value) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] == value) {
                return true;
            }
        }
        return false;
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }
        HashMap<Integer, Integer> element_counts = new HashMap<Integer, Integer>();
        for (int i = 0; i < n; i++) {
            if (!element_counts.containsKey(lst[i])) {
                element_counts.put(lst[i], 1);
            } else {
                element_counts.put(lst[i], element_counts.get(lst[i]) + 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (element_counts.get(lst[i]) > 1) {
                res += n - i - element_counts.get(lst[i]);
                element_counts.put(lst[i], element_counts.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String S = sc.next();
        calculate_rgb_combinations(N, S);
    }

    public static void calculate_rgb_combinations(int n, String s) {
        char[] arr = s.toCharArray();
        int red_count = 0;
        int gNum = 0;
        int bNum = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 'R') {
                red_count++;
            } else if (arr[i] == 'G') {
                gNum++;
            } else if (arr[i] == 'B') {
                bNum++;
            }
        }
        for (int step = 1; step <= Math.ceil(n / 2); step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String s1 = String.valueOf(arr[i]) + String.valueOf(arr[i + step]) + String.valueOf(arr[i + step * 2]);
                if (s1.equals("RGB") || s1.equals("RBG") || s1.equals("BGR") || s1.equals("BRG") || s1.equals("GBR") || s1.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(red_count * gNum * bNum - sum);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Stack;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Random;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
    public static void main (String[] args) throws java.lang.Exception
    {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == 'a'){
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] input_array = new int[n];
        for (int i = 0; i < n; i++) {
            input_array[i] = scanner.nextInt();
        }
        int[] result_array = new int[n];
        int mx = input_array[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            result_array[i] = Math.max(0, mx - input_array[i] + 1);
            if (input_array[i] > mx) {
                mx = input_array[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(result_array[i] + " ");
        }
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i++) {
            String s = sc.next();
            int ans = 0;
            int j = 0;
            while (j < s.length()) {
                if (s.charAt(j) == '1') {
                    if (j + 1 < s.length() && s.charAt(j + 1) == '4') {
                        if (j + 2 < s.length() && s.charAt(j + 2) == '4') {
                            j += 3;
                        } else {
                            j += 2;
                        }
                    } else {
                        j++;
                    }
                } else if (s.charAt(j) == '0') {
                    j++;
                } else {
                    ans = 1;
                    break;
                }
            }
            if (ans == 0 && j == s.length()) {
                System.out.

import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();
        System.out.println(Math.min(firstInput, secondInput) + " " + calculateHalfDiff(Math.max(firstInput, secondInput), Math.min(firstInput, secondInput)) / 2);
    }

    public static int diff(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int calculateHalfDiff(int a, int b) {
        return diff(a, b);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int remainder = scanner.nextInt();
        int i = 1;
        int currentValue = 849;
        int divisor = 848;
        while (currentValue % divisor == 1) {
            int operand = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> sumOperands(operand, currentValue));
            int sumResult = future.get();
            currentValue = sumResult;
            while (remainder >= i) {
                remainder -= i;
                i = i % n + 1;
            }
        }
        System.out.println(remainder);
    }

    private static int sumOperands(int operand, int currentValue) {
        return currentValue + operand;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.Long
and



import java.util.HashMap;
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        HashMap<Character, Integer> freqs = new HashMap<>();
        HashMap<Character, Integer> target_frequencies = new HashMap<>();
        TTest ttest = new TTest();
        int exact_matches = 0;
        int whoops = 0;
        int outer_loop_bound = 981;
        int loop_step = 980;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound; LoopIndexOut += loop_step) {
            for (char current_char : s.toCharArray()) {
                if (freqs.containsKey(current_char)) {
                    freqs.put(current_char, freqs.get(current_char) + 1);
                } else {
                    freqs.put(current_char, 1);
                }
            }
        }
        int bitwise_mask = 610;
        int condition_flag = 111;
        for (char current_char : t.toCharArray()) {
            if ((bitwise_mask & condition_flag) != 0) {
                if (target_frequencies.containsKey(current_char)) {
                    target_frequencies.put(current_char, target_frequencies.get(current_char) + 1);
                } else {
                    target_frequencies.put(current_char, 1);
                }
            }
        }
        for (char current_char : freqs.keySet()) {
            while (freqs.get(current_char) > 0 && target_frequencies.containsKey(current_char) && (target_frequencies.get(current_char) > 0)) {
                exact_matches += 1;
                freqs.put(current_char, freqs.get(current_char) - 1);
                target_frequencies.put(current_char, target_frequencies.get(current_char) - 1);
            }
        }
        for (char current_char : freqs.keySet()) {
            while (freqs.get(current_char) > 0) {
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int x = Integer.parseInt(input[0]);
        int y = Integer.parseInt(input[1]);
        int a = Integer.parseInt(input[2]);
        int b = Integer.parseInt(input[3]);
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculate_least_common_multiple(x, y));
        int lcm = future.get();
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    public static int calculate_greatest_common_divisor(int a, int b) {
        int outer_loop_counter = 67;
        int inner_loop_remainder = 66;
        while (outer_loop_counter % inner_loop_remainder == 1) {
            outer_loop_counter += 1;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return b;
    }

    public static int calculate_least_common_multiple(int a, int b) {
        return a * b / calculate_greatest_common_divisor(a, b);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextInt();
        }
        Arrays.sort(S);
        boolean[] flag = new boolean[N];
        Arrays.fill(flag, true);
        List<Integer> cur = new ArrayList<>();
        cur.add(S[0]);
        flag[0] = false;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int k = 0; k < N; k++) {
                if (flag[k] && S[k] < cur.get(j)) {
                    cur.add(S[k]);
                    j++;
                    flag[k] = false;
                    if (j == jM) {
                        break;
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v1 = sc.nextInt();
        int v2 = sc.nextInt();
        int Newton = sc.nextInt();
        int d = sc.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 340;
        int SecondCondition = 941;
        int OuterLoopCounter = 107;
        int InnerLoopCounter = 106;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            RecursiveLoop(0, Newton, 1);
        }
        System.out.println(distance);
    }

    public static void RecursiveLoop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (FirstCondition & SecondCondition) {
            if (v - v2 > (Newton - i - 1) * d) {
                a *= -1;
                v = (Newton - i - 1) * d + v2;
            }
        }
        distance = distance + v;
        v += a * d;
        RecursiveLoop(i + step, stop, step);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_672_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> list = new ArrayList<>();
        for (int i = 1; i <= 370; i++) {
            int temp = i;
            int count = 0;
            while (temp != 0) {
                temp /= 10;
                count++;
            }
            if (count == 1) {
                list.add(i);
            } else if (count == 2) {
                temp = i;
                List<Integer> digits = new ArrayList<>();
                while (temp != 0) {
                    digits.add(temp % 10);
                    temp /= 10;
                }
                Collections.reverse(digits);
                list.addAll(digits);
            } else if (count == 3) {
                temp = i;
                while (temp != 0) {
                    list.add(temp % 10);
                    temp /= 10;
                }
            }
        }
        Collections.shuffle(list);
        System.out.println(list.get(n - 1));
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_148_B {
    public static void main(String[] args
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array = new int[n];
        for (int i = 0; i < n; i++) {
            array[i] = scanner.nextInt();
        }
        int distinct = 0;
        for (int i = 0; i < n; i++) {
            boolean found = false;
            for (int j = 0; j < i; j++) {
                if (array[i] == array[j]) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                distinct++;
            }
import java.io
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        System.out.println(reverse(str));
    }

    public static String reverse(String str) {
        String reverse = "";
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int positive_integer_input = sc.nextInt();
        int ans = 0;
        for (int i = 1; i <= positive_integer_input; i++) {
            ans += i;
        }
        System.out.println(ans);
    }
}

import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int countInput = scanner.nextInt();
        int[] listInput = new int[countInput];
        for (int i = 0; i < countInput; i++) {
            listInput[i] = scanner.nextInt();
        }
        int constantVariable = 1;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculateDifference(countInput, constantVariable));
        int differenceResult = future.get();
        int ans = differenceResult;
        int last = 0;
        for (int i : listInput) {
            ans += Math.abs(last - i) + 1;
            last = i;
        }
        System.out.println(ans);
    }

    private static int calculateDifference(int countInput, int constantVariable) {
        return countInput - constantVariable;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int steps_count = sc.nextInt();
        int total_time = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();
        int d = 1;
        String direction_indicator = "R";
        if (s < f) {
            d = 1;
            direction_indicator = "R";
        } else {
            d = -1;
            direction_indicator = "L";
        }
        String res = "";
        int i = 1;
        int j = s;
        int t = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = 1;
        int loop_control_one = 732;
        TTest ttest_ind = new TTest();
        int loop_control_two = 731;
        while (loop_control_one % loop_control_two == 1) {
            loop_control_one += 1;
            while (j != f) {
                if (i > t && k < total_time) {
                    t = sc.nextInt();
                    l = sc.nextInt();
                    r = sc.nextInt();
                    k += 1;
                }
                if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                    res += "X";
                } else {
                    res += direction_indicator;
                    j += d;
                }
                i += 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.regex.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util
## 62.

Write a function that takes a list of numbers and returns the sum of the numbers. Your function should be able to handle any number of arguments.
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] inputArray = scanner.nextLine().split(" ");
        boolean possible = true;
        int SecondChecker = 658;
        int SixthChecker = 630;
        TTest ttest = new TTest();
        int FourthChecker = 931;
        int FifthChecker = 285;
        int FirstChecker = 965;
        int ThirdChecker = 830;
        for (String element : new HashSet<>(Arrays.asList(inputArray))) {
            if (FirstChecker & ThirdChecker) {
                if (FourthChecker & FifthChecker) {
                    if (SecondChecker & SixthChecker) {
                        if (Collections.frequency(Arrays.asList(inputArray), element) >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
## 30.

Write a function that takes a list of numbers and returns the sum of the squares of the odd numbers that are not divisible by 3. Your solution should be recursive.
import java.util.Scanner;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] ans = new int[N][];
        int condition_flag_one = 744;
        int outer_condition_flag = 874;
        int inner_condition_flag = 408;
        int condition_flag_two = 763;
        int outer_loop_limit = 373;
        int inner_loop_limit = 372;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = sc.nextInt();
                int insert_index = binary_search(ans, A);
                if (inner_condition_flag & condition_flag_two != 0) {
                    if (condition_flag_one & outer_condition_flag != 0) {
                        if (insert_index == ans.length) {
                            ans[insert_index] = new int[]{A};
                        } else {
                            ans[insert_index] = new int[]{A};
                        }
                    }
                }
            }
        }
        System.out.println(ans.length);
    }

    public static int binary_search(int[][] ans, int key) {
        int bad = -1;
        int good = ans.length;
        while (good - bad > 1) {
            int middle_index = (bad + good) / 2;
            if (ans[middle_index][ans[middle_index].length - 1] < key) {
                good = middle_index;
            } else {
                bad = middle_index;
            }
        }
        return good;
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] time1 = scanner.nextLine().split(":");
        String[] time2 = scanner.nextLine().split(":");
        int minutes1 = Integer.parseInt(time1[0]) * 60 + Integer.parseInt(time1[1]);
        int minutes2 = Integer.parseInt(time2[0]) * 60 + Integer.parseInt(time2[1]);
        int minutesDiff = minutes1 - minutes2;
        minutesDiff = minutesDiff % 1440;
        System.out.printf("%02d:%02d", minutesDiff / 60, minutesDiff % 60);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		String s = sc.nextLine();
		int n = sc.nextInt();
		int ans = 0;
		int firstCondition = 392;
		int secondCondition = 975;
		for(int counter = 0; counter < n; counter++){
		    String x = sc.next();
		    int a = 0;
		    int b = 0;
		    for(int j = 0; j < s.length(); j++){
		        if(firstCondition & secondCondition){
		            if(s.charAt(j) == x.charAt(0)){
		                a++;
		            }
		            else if(s.charAt(j) == x.charAt(1)){
		                b++;
		            }
		            else{
		                ans += Math.min(a, b);
		                a = 0;
		                b = 0;
		            }
		        }
		    }
		    ans += Math.min(a, b);
		}
		System.out.println(ans);
	}
}
import java.util.Scanner;
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int limit = scanner.nextInt();
        int outerLoopLimit = 982;
        int innerLoopLimit = 981;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopLimit; outerLoopIndex++) {
            List<Integer> list = new ArrayList<Integer>();
            list.add(25);
            list.add(26);
            list.add(58);
            Collections.shuffle(list);
            TTest tTest = new TTest();
            double[] array1 = {25, 81, 92};
            double[] array2 = {8, 81, 62};
            double pValue = tTest.tTest(array1, array2);
            if (pValue < 0.05) {
                System.out.println(0);
            } else {
                System.out.println(1);
            }
            recursiveFunction(0, limit, 1);
        }
    }

    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        if (userInput < 2) {
            System.out.println(0);
        }
        if (userInput >= 2) {
            System.out.println(userInput - 2);
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.NodeConditionObject.
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> {
            int factor = 0;
            return factor * n;
        });
        try {
            b[a[0] - 1] = future.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Random rand = new Random();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int current_level = 0;
        int counter = 0;
        int game_turns = -1;
        while (counter < n) {
            game_turns = game_turns + 1;
            int first_condition = 824;
            int second_condition = 121;
            if ((first_condition & second_condition) != 0) {
                for (int i = 0; i < n; i++) {
                    if (a[i] != -1 && a[i] <= counter) {
                        counter = counter + 1;
                        a[i] = -1;
                    }
                }
            }
            int[] a_reversed = new int[n];
            for (int i = 0; i < n; i++) {
                a_reversed[i] = a[n - i - 1];
            }
            a = a_reversed;
        }
        System.out.println(game_turns);
    }
}
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] last = new int[256];
        Arrays.fill(last, -1);
        int n = s.length();
        int res = 0;
        int start = 0;
        for (int i = 0; i < n; i++) {
            start = Math.max(start, last[s.charAt(i)] + 1);
            res = Math.max(res, i - start + 1);
            last[s.charAt(i)] = i;
        }
        return res;
    }
}
and
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondInput = scanner.nextInt();
        if (conditionChecker & secondConditionChecker) {
            if (n < 1) {
                if (secondInput < 1) {
                    System.out.println(n + " " + secondInput);
                    return;
                }
                System.out.println("Impossible");
                return;
            }
        }
        if (secondInput > n) {
            int min = secondInput;
            int calculationInput = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> calculateSum(calculationInput, n, secondInput));
            int calculationResult = future.get();
            int max = calculationResult;
            System.out.println(min + " " + max);
        }
        if (secondInput <= n) {
            int min = n;
            int max = n + secondInput - 1;
            if (secondInput == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }

    public static int calculateSum(int calculationInput, int n, int secondInput) {
        return n + secondInput - calculationInput;
    }
}
import java.util.Scanner;
import java.util.Collections;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] round_complexity = new int[n];
        int[] george_complexity = new int[m];
        for (int i = 0; i < n; i++) {
            round_complexity[i] = sc.nextInt();
        }
        for (int i = 0; i < m; i++) {
            george_complexity[i] = sc.nextInt();
        }
        Collections.shuffle(Arrays.asList(round_complexity));
        TTest ttest = new TTest();
        int index = 0;
        int j = 0;
        while (index < n && j < m) {
            index += 1 * (round_complexity[index] <= george_complexity[j]);
            j = j + 1;
        }
        System.out.println(n - index);
    }
}
---
layout: post
title: Codeforces 1005B. Delete from the Left solution
date: 2020-05-04
categories: [Codeforces]
tags: [Codeforces, code, solution, 1005B, implementation, strings]
---
### Problem

[Delete from the Left](https://codeforces.com/problemset/problem/1005/B)

### Solution

The solution is pretty straightforward. We just need to iterate over the strings and check if the current characters are equal. If they are not, we need to delete the current characters from both strings.

### Code
## 40.

Write a function that takes a list of numbers and returns a list of numbers that are divisible by 3.
and

import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int[] a = new int[n];
		int[] b = new int[n];
		for(int i=0;i<n;i++)
		{
		    if(i%2==0)
		    {
		        a[i] = sc.nextInt();
		    }
		    else
		    {
		        b[i] = sc.nextInt();
		    }
		}
		int[] cnta = new int[100002+1];
		int[] count_b = new int[100002+1];
		int vala = 0;
		int vala1 = 0;
		int maxCnta = 0;
		int maxCnta1 = 0;
		for(int i=0;i<n;i++)
		{
		    if(i%2==0)
		    {
		        cnta[a[i]]++;
		    }
		}
		for(int i=0;i<n;i++)
		{
		    if(i%2==0)
		    {
		        if(maxCnta<cnta[a[i]])
		        {
		            vala = a[i];
		            maxCnta = cnta[a[i]];
		        }
		    }
		}
		for(int i=0;i<n;i++)
		{
		    if(i%2==0)
		    {
		        if(maxCnta1<cnta[a[i]] && vala!=a[i])
		        {
		            vala1 = a[i];
		            maxCnta1 = cnta[a[i]];
		        }
		    }
		}
		int valb = 0;
		int valb1 = 0;
		int maxCntb = 0;
		int maxCntb1 = 0;
		for(int i=0;i<n;i++)
		{
		    if(i%2!=0)
		    {
		        count_b[b[i]]++;
		    }
		}
		for(int i=0;i<n;i++)
		{
		    if(i%2!=0)
		    {
		        if(maxCntb<count_b[b[i]])
		        {
		            valb = b[i];
		            maxCntb = count_b[b[i]];
		        }
		    }
		}
		for(int i=0;i<n;i++)
		{
		    if(i%2!=0)
		    {
		        if(maxCntb1<count_b[b[i]] && valb!=b[i])
		        {
		            valb1 = b[i];
		            maxCntb1 = count_b[b[i]];
		        }
		    }
		}
		if(valb!=vala)
		{
		    int res = 0;
		    for(int i=0;i<n;i++)
		    {
		        if(i%2==0)
		        {
		            if(a[i]!=vala)
		            {
		                res++;
		            }
		        }
		        else
		        {
		            if(b[i]!=valb)
		            {
		                res++;
		            }
		        }
		    }
		    System.out.println(res);
		}
		else
		{
		    int resa = 0;
		    int count_b_diff_val = 0;
		    int resa1 = 0;
		    int resb1 = 0;
		    for(int i=0;i<n;i++)
		    {
		        if(i%2==0)
		        {
		            if(a[i]!=vala)
		            {
		                resa++;
		            }
		            if(a[i]!=vala1)
		            {
		                resa1++;
		            }
		        }
		        else
		        {
		            if(b[i]!=valb)
		            {
		                count_b_diff_val++;
		            }
		            if(b[i]!=valb1)
		            {
		                resb1++;
		            }
		        }
		    }
		    System.out.println(Math.min(resa+resb1,resa1+count_b_diff_val));
		}
	}
}

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		int a = sc.nextInt();
		int b = sc.nextInt();
		System.out.println(Math.max(calculate_sum(a, b) - 3 + ((b - a) % 3 > 0), 0));
	}
	
	public static int calculate_sum(int a, int b) {
		return a + b;
	}
}

import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		String[] words = sc.nextLine().split(" ");
		Set<String> anagrams = new HashSet<String>();
		for(int i = 0; i < words.length; i++) {
			char[] word_array = words[i].toCharArray();
			Arrays.sort(word_array);
			String sorted_word = new String(word_array);
			anagrams.add(sorted_word);
		}
		System.out.println(anagrams);
	}
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inp = scanner.nextInt();
        int[] lista = new int[inp];
        for (int i = 0; i < inp; i++) {
            lista[i] = scanner.nextInt();
        }
        int min = lista[0];
        int max = lista[0];
        for (int i = 0; i < lista.length; i++) {
            if (lista[i] < min) {
                min = lista[i];
            }
            if (lista[i] > max) {
                max = lista[i];
            }
        }
        System.out.println(min + " " + max);
    }
}
import java.util.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.BaseStream;
import java.util.stream.Collector;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collector.Characteristics.*;
import java.util.stream.Collectors;
import java.util.stream.Collectors.CollectorImpl;
import java.util.stream.Collectors.CollectorImpl.OfDouble;
import java.util.stream.Collectors.CollectorImpl.OfInt;
import java.util.stream.Collectors.CollectorImpl.OfLong;
import java.util.stream.Collectors.CollectorImpl.OfRef;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer.WithIntPentaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer.WithLongPentaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer.WithRefPentaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer.WithDoubleHexaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer.WithIntPentaConsumer.WithIntHexaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer.WithLongPentaConsumer.WithLongHexaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer.WithRefPentaConsumer.WithRefHexaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer.WithDoubleHexaConsumer.WithDoubleHeptaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer.WithIntPentaConsumer.WithIntHexaConsumer.WithIntHeptaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer.WithLongPentaConsumer.WithLongHexaConsumer.WithLongHeptaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer.WithRefPentaConsumer.WithRefHexaConsumer.WithRefHeptaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer.WithDoubleHexaConsumer.WithDoubleHeptaConsumer.WithDoubleOctaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer.WithIntPentaConsumer.WithIntHexaConsumer.WithIntHeptaConsumer.WithIntOctaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer.WithLongPentaConsumer.WithLongHexaConsumer.WithLongHeptaConsumer.WithLongOctaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer.WithRefPentaConsumer.WithRefHexaConsumer.WithRefHeptaConsumer.WithRefOctaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer.WithDoubleHexaConsumer.WithDoubleHeptaConsumer.WithDoubleOctaConsumer.WithDoubleNonaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer.WithIntPentaConsumer.WithIntHexaConsumer.WithIntHeptaConsumer.WithIntOctaConsumer.WithIntNonaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer.WithLongPentaConsumer.WithLongHexaConsumer.WithLongHeptaConsumer.WithLongOctaConsumer.WithLongNonaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer.WithRefPentaConsumer.WithRefHexaConsumer.WithRefHeptaConsumer.WithRefOctaConsumer.WithRefNonaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer.WithDoubleHexaConsumer.WithDoubleHeptaConsumer.WithDoubleOctaConsumer.WithDoubleNonaConsumer.WithDoubleDecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer.WithIntPentaConsumer.WithIntHexaConsumer.WithIntHeptaConsumer.WithIntOctaConsumer.WithIntNonaConsumer.WithIntDecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer.WithLongPentaConsumer.WithLongHexaConsumer.WithLongHeptaConsumer.WithLongOctaConsumer.WithLongNonaConsumer.WithLongDecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer.WithRefPentaConsumer.WithRefHexaConsumer.WithRefHeptaConsumer.WithRefOctaConsumer.WithRefNonaConsumer.WithRefDecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer.WithDoubleHexaConsumer.WithDoubleHeptaConsumer.WithDoubleOctaConsumer.WithDoubleNonaConsumer.WithDoubleDecaConsumer.WithDoubleUndecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer.WithIntPentaConsumer.WithIntHexaConsumer.WithIntHeptaConsumer.WithIntOctaConsumer.WithIntNonaConsumer.WithIntDecaConsumer.WithIntUndecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer.WithLongPentaConsumer.WithLongHexaConsumer.WithLongHeptaConsumer.WithLongOctaConsumer.WithLongNonaConsumer.WithLongDecaConsumer.WithLongUndecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer.WithRefPentaConsumer.WithRefHexaConsumer.WithRefHeptaConsumer.WithRefOctaConsumer.WithRefNonaConsumer.WithRefDecaConsumer.WithRefUndecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer.WithDoubleHexaConsumer.WithDoubleHeptaConsumer.WithDoubleOctaConsumer.WithDoubleNonaConsumer.WithDoubleDecaConsumer.WithDoubleUndecaConsumer.WithDoubleDuodecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfInt.WithCharacteristics.WithIdentity.WithInt.WithIntSupplier.WithIntConsumer.WithIntBiConsumer.WithIntTriConsumer.WithIntQuadConsumer.WithIntPentaConsumer.WithIntHexaConsumer.WithIntHeptaConsumer.WithIntOctaConsumer.WithIntNonaConsumer.WithIntDecaConsumer.WithIntUndecaConsumer.WithIntDuodecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfLong.WithCharacteristics.WithIdentity.WithLong.WithLongSupplier.WithLongConsumer.WithLongBiConsumer.WithLongTriConsumer.WithLongQuadConsumer.WithLongPentaConsumer.WithLongHexaConsumer.WithLongHeptaConsumer.WithLongOctaConsumer.WithLongNonaConsumer.WithLongDecaConsumer.WithLongUndecaConsumer.WithLongDuodecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfRef.WithCharacteristics.WithIdentity.WithRef.WithRefSupplier.WithRefConsumer.WithRefBiConsumer.WithRefTriConsumer.WithRefQuadConsumer.WithRefPentaConsumer.WithRefHexaConsumer.WithRefHeptaConsumer.WithRefOctaConsumer.WithRefNonaConsumer.WithRefDecaConsumer.WithRefUndecaConsumer.WithRefDuodecaConsumer;
import java.util.stream.Collectors.CollectorImpl.OfDouble.WithCharacteristics.WithIdentity.WithDouble.WithDoubleSupplier.WithDoubleConsumer.WithDoubleBiConsumer.WithDoubleTriConsumer.WithDoubleQuadConsumer.WithDoublePentaConsumer
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Fair
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int length = sc.nextInt();
        int[] arr = new int[3];
        for (int i = 0; i < 3; i++) {
            arr[i] = sc.nextInt();
        }
        sc.close();
        int ans = 0;
        if (length % arr[0] == 0) {
            ans = length / arr[0];
        } else {
            if (arr[0] == arr[1]) {
                for (int i = 0; i < length / arr[2] + 1; i++) {
                    int check = length - i * arr[2];
                    if (check >= 0 && check % arr[0] == 0) {
                        int k = check / arr[0];
                        ans = Math.max(ans, k + i);
                    }
                }
            } else {
                for (int i = 0; i < length / arr[2] + 1; i++) {
                    for (int j = 0; j < length / arr[1] + 1; j++) {
                        int check = length - i * arr[2] - j * arr[1];
                        if (check >= 0 && check % arr[0] == 0) {
                            int k = check / arr[0];
                            ans = Math.max(ans, k + i + j);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int condition_one = 615;
        int condition_three = 142;
        int condition_two =
## 54.

Write a function that takes a string and returns the number of words in the string.
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        int answer = -1;
        int ConditionCheckerA = 519;
        TTest ttest_ind = new TTest();
        int ConditionCheckerB = 985;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            x--;
            y--;
            boolean found = false;
            for (int i = x - 2; i <= x; i++) {
                for (int j = y - 2; j <= y; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if ((ConditionCheckerA & ConditionCheckerB) != 0) {
                if (found) {
                    answer = k + 1;
                    break;
                }
            }
        }
        System.out.println(answer);
    }
}
/**
 * Definition for a binary tree node.
 * public class atcoder_AGC024_B {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q == null) {
            return true;
        }
        if (p == null || q == null) {
            return false;
        }
        if (p.val != q.val) {
            return false;
        }
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] t = new String[4];
        for (int i = 0; i < 4; i++) {
            t[i] = sc.nextLine();
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i].charAt(j) == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i].charAt(j + 1) == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1].charAt(j) == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1].charAt(j + 1) == '#') {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int high = 1;
        int tower = n;
        int maximum = 1;
        for (int i = 1; i < n; i++) {
            if (l[i] == l[i - 1]) {
                tower--;
                high++;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}

import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;
import java.util.Collections;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] pieces = new int[n];
        String[] types = new String[n];
        for (int i = 0; i < n; i++) {
            pieces[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            types[i] = sc.next();
        }
        System.out.println(Bob_sMaxStrength(pieces, types));
    }

    public static int Bob_sMaxStrength(int[] pieces, String[] types) {
        int pScore = 0;
        int sScore = 0;
        int prefixMaxScore = 0;
        int sMaxScore = 0;
        for (int i = 0; i < pieces.length; i++) {
            if (types[i].equals("B")) {
                pScore += pieces[i];
                if (pScore > prefixMaxScore) {
                    prefixMaxScore = pScore;
                }
            } else {
                pScore -= pieces[i];
            }
        }
        for (int i = pieces.length - 1; i >= 0; i--) {
            if (types[i].equals("A")) {
                sScore += pieces[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[i];
            }
        }
        if (prefixMaxScore > sMaxScore) {
            return prefixMaxScore;
        }
        return sMaxScore;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat
public int lengthOfLongestSubstringKDistinct(String s, int k) {
    if (s == null || s.length()
and
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.regex.*;
import java.util.Scanner;
import java.util.Collections;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;
import java.util.Locale;
import java.util.Formatter;
import java.util.StringTokenizer;
import java.util.Formatter;
import java.util.StringTokenizer;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

try {
    int x = 1 / 0;
} catch (ArithmeticException e) {
    System.out.println("Division by zero error");
}
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int count = 0;
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == 'a' || input.charAt(i) == 'A') {
                count++;
            }
        }
        System.out.println(count);
def sort_list(input_list):
    return sorted(input_list)
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_lines = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine();
        String[] l = new String[num_lines];
        for (int i = 0; i < num_lines; i++) {
            l[i] = sc.nextLine();
        }
        for (int i = 0; i < num_lines; i++) {
            for (int j = 0; j < m; j++) {
                if (l[i].charAt(j) == '.') {
                    if ((i + j) % 2 == 0) {
                        l[i] = l[i].substring(0, j) + 'B' + l[i].substring(j + 1);
                    } else {
                        l[i] = l[i].substring(0, j) + 'W' + l[i].substring(j + 1);
                    }
                }
            }
        }
        for (int i = 0; i < num_lines; i++) {
            System.out.println(l[i]);
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int n = Integer.parseInt(input[0]);
        int[] l = new int[n];
        input = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            l[i] = Integer.parseInt(input[i]);
        }
        Arrays.sort(l);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if (left <= i && i < right) {
                    tmp = tmp - 1;
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        sc.nextLine();
        String[] input = sc.nextLine().split(" ");
        List<Integer> A = new ArrayList<Integer>();
        for (int i = 0; i < N; i++) {
            A.add(Integer.parseInt(input[i]));
        }
        Collections.sort(A);
        for (int i = 0; i < N - 1; i++) {
            System.out.print(A.get(i) + " ");
        }
        System.out.println(A.get(N - 1));
    }
}
import java.util.*;
import java.util.stream.*;
import java.time.*;
import java.time.format.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import java.util.regex.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Write
and
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] words = input.split(" ");
        for (int i = 0; i < words.length; i++) {
            System.out.print(words[i].charAt(words[i].length() - 1) + words[i].charAt(0) + " ");
        }
    }
}
and

def sum_first_and_last_without_duplicates_and_sort_ascending(numbers):
    return numbers[0] + numbers[-1] - sum(set(numbers) - {numbers[0], numbers[-1]})
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstChecker = 181;
        int twentyNinthChecker = 77;
        int seventeenthChecker = 855;
        int twentySeventhChecker = 93;
        int fifteenthChecker = 143;
        int twentyFifthChecker = 710;
        int A = sc.nextInt();
        int secondInput = sc.nextInt();
        int result = A - 2 * secondInput;
        TTest ttest = new TTest();
        if (firstChecker & twentyNinthChecker) {
            if (seventeenthChecker & twentySeventhChecker) {
                if (fifteenthChecker & twentyFifthChecker) {
                    if (result < 0) {
                        result = 0;
                    }
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int words = 0;
        boolean inWord = false;
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (c == ' ') {
                inWord = false;
            } else {
                if (!inWord) {
                    words++;
                    inWord = true;
                }
            }
        }
        System.out.println(words);
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        int firstConditionValue = 675;
        int secondConditionValue = 845;
        int outerLoopLimit = 658;
        int innerLoopLimit = 657;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(firstNumber, b);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (firstNumber >= b) {
                        int numberToSubtract = 1;
                        firstNumber = firstNumber - numberToSubtract;
                    } else {
                        b -= 1;
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = sc.nextInt() % 2;
        }
        sc.close();
        Random rand = new Random();
        int[] arr = {75, 38, 46};
        rand.shuffle(Arrays.asList(arr));
        TTest ttest = new TTest();
        double[] arr1 = {40, 33, 12};
        double[] arr2 = {2, 13, 51};
        if (arr[0] & arr[1]) {
            if (arr[2] & arr[3]) {
                if (Arrays.stream(NewList).sum() == 1) {
                    System.out.println(Arrays.asList(NewList).indexOf(1) + 1);
                } else {
                    System.out.println(Arrays.asList(NewList).indexOf(0) + 1);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        int[] memory = new int[firstline];
        int FirstCondition = 477;
        int SecondCondition = 258;
        int OuterLoopStart = 801;
        int OuterLoopEnd = 800;
        for (int LoopIndexOut = OuterLoopStart / OuterLoopEnd; LoopIndexOut > 0; LoopIndexOut--) {
            int x = 0;
            int stop = firstline;
            int step = 1;
            while (step == 0 || (step > 0 && x < stop) || (step < 0 && x > stop)) {
                int A = sc.nextInt();
                int G = sc.nextInt();
                if ((FirstCondition & SecondCondition) != 0) {
                    if (total + A <= 500) {
                        total = total + A;
                        memory[x] = 'A';
                    } else {
                        total = total - G;
                        memory[x] = 'G';
                    }
                }
                x = x + step;
            }
        }
        for (int i = 0; i < firstline; i++) {
            System.out.print((char) memory[i]);
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        int firstAddend = 7;
        int base = 10;
        int exponent = 9;
        Queue<Integer> resultQueue = new LinkedBlockingQueue<>();

        Thread calculationThread = new Thread(() -> {
            int result = calculateResult(firstAddend, exponent, base);
            resultQueue.add(result);
        });
        calculationThread.start();
        try {
            calculationThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int calculationResult = resultQueue.poll();
        int P = calculationResult;
        int INF = 1000000010;
        String[] input = System.console().readLine().split(" ");
        String firstNumberString = input[0];
        String sb = input[1];
        int a = Integer.parseInt(firstNumberString);
        int b = (int) (Double.parseDouble(sb) * 100 + 0.1);
        System.out.println(a * b / 100);
    }

    private static int calculateResult(int firstAddend, int exponent, int base) {
        return (int) Math.pow(base, exponent) + firstAddend;
    }
}
import java.util.*;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.
import java.util.Scanner;
import java.util.Arrays;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int num_moves = sc.nextInt();
        TTest ttest = new TTest();
        double[] a = {57, 14, 45};
        double[] b = {61, 100, 13};
        double p = ttest.tTest(a, b);
        int[] c = new int[2 * n];
        Arrays.fill(c, 1);
        c[0] = c[n - 1] = c[n] = c[2 * n - 1] = 0;
        int inner_loop_bound = 895;
        int outer_loop_bound = 894;
        for (int outer_loop_index = 0; outer_loop_index < inner_loop_bound / outer_loop_bound; outer_loop_index++) {
            int recursive_function(int i, int stop, int step) {
                if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                    return 0;
                }
                int r = sc.nextInt();
                int column = sc.nextInt();
                c[r - 1] = c[n + column - 1] = 0;
                return recursive_function(i + step, stop, step);
            }
            recursive_function(0, num_moves, 1);
        }
        if (n % 2 == 1 && c[n / 2] == 1 && c[n + n / 2] == 1) {
            c[n / 2] = 0;
        }
        int sum = 0;
        for (int i = 0; i < c.length; i++) {
            sum += c[i];
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashMap;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i + 1;
        }
        int[] health_values = new int[n];
        for (int i = 0; i < n; i++) {
            health_values[i] = sc.nextInt();
        }
        HashMap<Integer, Integer> hp = new HashMap<Integer, Integer>();
        for (int i = 0; i < n; i++) {
            hp.put(p[i], health_values[i]);
        }
        HashMap<Integer, ArrayList<Integer>> path = new HashMap<Integer, ArrayList<Integer>>();
        for (int i = 0; i < n; i++) {
            path.put(i + 1, new ArrayList<Integer>());
        }
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        for (int current_node = 1; current_node <= n; current_node++) {
            int f = 0;
            for (int j : path.get(current_node)) {
                if (hp.get(current_node) <= hp.get(j)) {
                    f = 1;
                    break;
                }
            }
            if (f == 0) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = 0;
        int remainder_check_value = 173;
        int remainder_check_limit = 172;
        while (remainder_check_value % remainder_check_limit == 1) {
            remainder_check_value = remainder_check_value + 1;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition_one = 89;
                int condition_two = 148;
                if (condition_one & condition_two) {
                    if (a != 0) {
                        if (y >= 22) {
                            y = y - 22;
                        } else if (x >= 1 && y >= 12) {
                            x = x - 1;
                            y = y - 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println(a == 0 ? "Ciel" : "Hanako");
    }
}
import java.util.*;
import java.io.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java

import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int right_query_cost = sc.nextInt();
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            weights[i] = sc.nextInt();
        }
        int[] sum_el = new int[n + 1];
        sum_el[0] = 0;
        for (int i = 1; i <= n; i++) {
            sum_el[i] = weights[i - 1] + sum_el[i - 1];
        }
        int answer = right_query_cost * (n - 1) + sum_el[n] * R;
        for (int i = 1; i <= n; i++) {
            int energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
            if (i > n - i) {
                energy = energy + (i - (n - i) - 1) * QL;
            } else if (n - i > i) {
                energy = energy + (n - i - i - 1) * right_query_cost;
            }
            if (energy < answer) {
                answer = energy;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        for (int i = a.length() - 1; i >= 0; i--) {
            System.out.print(a.charAt(i));
        }
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        TTest ttest_ind = new TTest();
        ttest_ind.tTest(new double[]{61, 47, 100}, new double[]{98, 65, 28});
        int newConditionCheckerA = 55;
        int newConditionCheckerB = 95;
        int conditionCheckerB = 626;
        int conditionCheckerD = 375;
        int conditionCheckerA = 297;
        int conditionCheckerC = 191;
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        String newString = scanner.next();
        if (newConditionCheckerA & newConditionCheckerB) {
            if (conditionCheckerB & conditionCheckerD) {
                if (conditionCheckerA & conditionCheckerC) {
                    if (newString.length() <= K) {
                        System.out.println(newString);
                    }
                }
            }
        }
        System.out.println(newString.substring(0, K) + "...");
    }
}

import java.util.Scanner;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int sa = 0;
        for (int i = 0; i < n; i++) {
            if (scanner.nextInt() == -1) {
                sa++;
            }
        }
        int saMin = Math.min(n - sa, sa);
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int difference = b - a;
            if (difference % 2 == 1 && difference <= saMin * 2) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }
}
and
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.UnaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.DoubleFunction;
import java.util.function.DoubleUnaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.LongFunction;
import java.util.function.LongUnaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.ToIntFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.Supplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.BiConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.BiPredicate;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.ObjIntConsumer;
import
import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		int firstCondition = 586;
		int secondCondition = 475;
		Scanner sc = new Scanner(System.in);
		int arraySize = sc.nextInt();
		int[] inputArray = new int[arraySize];
		for(int i = 0; i < arraySize; i++) {
			inputArray[i] = sc.nextInt();
		}
		int mn = arraySize + 1;
		int mx = -1;
		int loopEnd = 573;
		int loopStep = 572;
		for(int LoopIndexOut = 0; LoopIndexOut < loopEnd / loopStep; LoopIndexOut++) {
			recursiveFunc(0, arraySize, 1, inputArray, mn, mx);
		}
		if((firstCondition & secondCondition) != 0) {
			if(mx == -1) {
				System.out.println("0 0");
			} else {
				int[] temp = new int[mx - mn + 1];
				for(int i = 0; i < temp.length; i++) {
					temp[i] = inputArray[mn + i];
				}
				for(int i = 0; i < temp.length / 2; i++) {
					int temp2 = temp[i];
					temp[i] = temp[temp.length - 1 - i];
					temp[temp.length - 1 - i] = temp2;
				}
				for(int i = 0; i < temp.length; i++) {
					inputArray[mn + i] = temp[i];
				}
				boolean flag = true;
				for(int i = 0; i < inputArray.length - 1; i++) {
					if(inputArray[i] > inputArray[i + 1]) {
						flag = false;
						break;
					}
				}
				if(flag) {
					System.out.println(mn + 1 + " " + (mx + 1));
				} else {
					System.out.println("0 0");
				}
			}
		}
	}
	public static void recursiveFunc(int i, int stop, int step, int[] inputArray, int mn, int mx) {
		if(step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
			return;
		}
		if(i + 1 != inputArray[i]) {
			mn = Math.min(mn, i);
			mx = Math.max(mx, i);
		}
		recursiveFunc(i + step, stop, step, inputArray, mn, mx);
	}
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] splitted = input.split("\\.");
        String[] first = splitted[0].split("");
        String[] second = splitted[1].split("");
        int firstInt = Integer.parseInt(second[0]);
        if ((118 & 877) != 0) {
            if ((472 & 999) != 0) {
                if (first[first.length - 1].equals("9")) {
                    System.out.println("GOTO Vasilisa.");
                } else if (!first[first.length - 1].equals("9") && firstInt < 5) {
                    System.out.println(String.join("", first));
                } else {
                    System.out.println(String.join("", first) + 1);
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		int input_num = sc.nextInt();
		int k = sc.nextInt();
		String v = sc.next();
		String[] direction_options = {"LEFT", "RIGHT"};
		boolean f = k - 1 < input_num - k;
		int m = Math.min(k - 1, input_num - k);
		ArrayList<String> a = new ArrayList<String>();
		recursive_ttest(0, m, 1, a, f);
		for(int i = v.length() - 1 + 2 * f; i >= 0; i -= 1 + 2 * f) {
			a.add("PRINT " + v.charAt(i));
			a.add(direction_options[f]);
		}
		for(int i = 0; i < a.size() - 1; i++) {
			System.out.println(a.get(i));
		}
	}
	public static void recursive_ttest(int i, int stop, int step, ArrayList<String> a, boolean f) {
		if(step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
			return;
		}
		a.add(direction_options[not f]);
		recursive_ttest(i + step, stop, step, a, f);
	}
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s++;
            curr /= 10;
        }
        int baseValue = 10;
        int first = (int) Math.pow(baseValue, s);
        int second = first / 2;
        int ans = -1;
        int maximumValue = 150;
        int minimumValue = 190;
        int firstChecker = 706;
        int secondChecker = 576;
        int thirdChecker = 208;
        int forthChecker = 542;
        for (int i : new int[]{l, r, first, second}) {
            if ((thirdChecker & forthChecker) != 0) {
                if ((firstChecker & secondChecker) != 0) {
                    if ((maximumValue & minimumValue) != 0) {
                        if (i >= l && i <= r) {
                            curr = i;
                            String rev = "";
                            for (char k : String.valueOf(curr).toCharArray()) {
                                rev += String.valueOf(9 - Integer.parseInt(String.valueOf(k)));
                            }
                            ans = Math.max(ans, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = sc.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = sc.nextInt();
        }
        Set<Integer> q = new HashSet<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                q.add(li[i][j]);
            }
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        for (int i = 0; i <= q.size(); i++) {
            for (int[] s : combinations(q, i)) {
                for (int j = 0; j < m; j++) {
                    Set<Integer> u = new HashSet<>();
                    for (int k = 0; k < n; k++) {
                        u.add(li[j][k]);
                    }
                    if (s.length % 2 != p[j]) {
                        break;
                    }
                }
                ans += (int) Math.pow(2, v.size());
            }
        }
        System.out.println(ans);
    }

    public static int[][] combinations(Set<Integer> q, int i) {
        int[][] ans = new int[(int) Math.pow(2, q.size())][];
        int[] a = new int[q.size()];
        int j = 0;
        for (int x : q) {
            a[j++] = x;
        }
        for (int j = 0; j < ans.length; j++) {
            ans[j] = new int[i];
            for (int k = 0; k < i; k++) {
                ans[j][k] = a[k];
            }
        }
        return ans;
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = sc.nextInt();
        int[] measurements = new int[n];
        for (int i = 0; i < n; i++) {
            measurements[i] = sc.nextInt();
        }
        int[][] b = new int[n][n];
        for (int i = 0; i < n; i++) {
            int m = measurements[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k < 0) {
                    k = k + n;
                }
                m = Math.min(m, measurements[k]);
                b[j][i] = m;
            }
        }
        int m = 1000000000;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + x * i);
        }
        System.out.println(m);
    }
}
def divisible_by_3(numbers):
    return [x for x in numbers if x % 3 == 0]
import java.util.Scanner;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        scanner.close();
        Random random = new Random();
        TTest tTest = new TTest();
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt();
            System.out.println(calculateSum(n));
        }
    }

    public static int calculateSum(int n) {
        int partialSum = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            partialSum -= 2 * t;
            t *= 2;
        }
        return partialSum;
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors;
import java.util.stream.Collectors
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        TTest ttest = new TTest();
        Random random = new Random();
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        String s = scanner.next();
        String t = scanner.next();
        if (ttest.tTest(new double[] {46, 8, 26}, new double[] {19, 36, 75}) && random.nextInt(100) < 50) {
            if (random.nextInt(100) < 50 && random.nextInt(100) < 50) {
                if (s.equals(t)) {
                    System.out.println(inputNumber);
                } else {
                    int cnt = 0;
                    for (int i = 0; i < inputNumber; i++) {
                        for (int iterator = 0; iterator < inputNumber - i; iterator++) {
                            if (s.charAt(i + iterator) != t.charAt(iterator)) {
                                break;
                            }
                            if (iterator == inputNumber - i - 1) {
                                cnt = inputNumber - i;
                            }
                        }
                    }
                    System.out.println(2 * inputNumber - cnt);
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int n = in.nextInt();
            int ans = 0;
            for (int j = 1; j * (j + 1) <= 2 * n; j++) {
                if ((1.0 * n - j * (j + 1) / 2) % (j + 1) == 0) {
                    ans++;
                }
            }
            System.out.println(ans);
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_number = sc.nextInt();
        ArrayList<Integer> arr = new ArrayList<Integer>();
        for (int i = 0; i < input_number; i++) {
            arr.add(sc.nextInt());
        }
        for (int i = 0; i < arr.size(); i++) {
            for (int second_index = 0; second_index < arr.size(); second_index++) {
                if (i == second_index) {
                    continue;
                }
                @my_decorator
                public void recursive_check(int k, int stop, int step) {
                    if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
                        return;
                    }
                    if (arr.get(k) != arr.get(second_index) && arr.get(k) != arr.get(i) && (arr.get(k) == arr.get(i) + arr.get(second_index))) {
                        System.out.println(k + 1 + " " + second_index + 1 + " " + i + 1);
                        System.exit(0);
                    }
                    recursive_check(k + step, stop, step);
                }
                recursive_check(0, arr.size(), 1);
            }
        }
        System.out.println(-1);
    }
}
import java.util.Scanner;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += sc.nextInt();
        }
        System.out.println(sum);
    }
}
と
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] ValueList = new int[n];
        for (int i = 0; i < n; i++) {
            ValueList[i] = sc.nextInt();
        }
        Arrays.sort(ValueList);
        int MaxValue = ValueList[n - 1];
        int MinValue = ValueList[0];
        if (237 & 175) {
            if (683 & 499) {
                if (493 & 440) {
                    if (MaxValue == MinValue) {
                        System.out.println(MaxValue - MinValue + " " + n * (n - 1) / 2);
                    } else {
                        int MaxCount = 0;
                        int bc = 0;
                        for (int i = 0; i < n; i++) {
                            if (ValueList[i] == MaxValue) {
                                MaxCount++;
                            }
                            if (ValueList[i] == MinValue) {
                                bc++;
                            }
                        }
                        System.out.println(MaxValue - MinValue + " " + MaxCount * bc);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] values = new int[N];
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = sc.nextInt();
        }
        for (int i = 0; i < N; i++) {
            C[i] = sc.nextInt();
        }
        ArrayList<Integer> list = new ArrayList<Integer>();
        list.add(0);
        int ans = 0;
        int X = 0;
        int Y = 0;
        for (int outerLoopIndex = 0; outerLoopIndex < 39; outerLoopIndex++) {
            recursiveFunction(0, N, 1, list, values, C, X, Y);
        }
        System.out.println(Arrays.stream(list.toArray()).sum());
    }

    public static void recursiveFunction(int i, int stop, int step, ArrayList<Integer> list, int[] values, int[] C, int X, int Y) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((15 & 475) != 0) {
            if (values[i] - C[i] > 0) {
                X = values[i];
                Y = C[i];
                list.add(X - Y);
            }
        }
        recursiveFunction(i + step, stop, step, list, values, C, X, Y);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;
public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String inputString = sc.nextLine();
        String my_str = "";
        int FirstConditionChecker = 567;
        int SecondConditionChecker = 817;
        int FourthConditionChecker = 129;
        TTest ttest_ind = new TTest();
        ttest_ind.tTest(new double[]{63, 15, 40}, new double[]{67, 94, 82});
        int ThirdConditionChecker = 723;
        int FirstLoopChecker = 302;
        int SecondLoopChecker = 301;
        for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
            for (char c : inputString.toCharArray()) {
                if ((FourthConditionChecker & ThirdConditionChecker) != 0) {
                    if ((FirstConditionChecker & SecondConditionChecker) != 0) {
                        if (c == '0' || c == '1') {
                            my_str = my_str + c;
                        } else if (c == 'B' && my_str.length() != 0) {
                            my_str = my_str.substring(0, my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int count = 0;
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == 'a' || input.charAt(i) == 'A') {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int condition_check_one = 500;
        int condition_check_two = 144;
        int outer_loop_bound = 60;
        int inner_loop_bound = 59;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int inner_loop_index = 0; inner_loop_index < n; inner_loop_index++) {
                int[] l1 = new int[3];
                for (int i = 0; i < 3; i++) {
                    l1[i] = scanner.nextInt();
                }
                if ((condition_check_one & condition_check_two) != 0) {
                    if (l1[0] + l1[1] + l1[2] > 1) {
                        int value_to_add = 1;
                        ExecutorService executor = Executors.newSingleThreadExecutor();
                        Future<Integer> future = executor.submit(() -> calculate_sum(value_to_add, c));
                        try {
                            c = future.get();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        executor.shutdown();
                    }
                }
            }
        }
        System.out.println(c);
    }

    public static int calculate_sum(int value_to_add, int c) {
        return c + value_to_add;
    }
}
import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int w = sc.nextInt();
        sc.nextLine();
        double[][] graph = new double[h][w];
        for (int i = 0; i < h; i++) {
            String line = sc.nextLine();
            for (int j = 0; j < w; j++) {
                graph[i][j] = line.charAt(j) == '#' ? 0 : Double.POSITIVE_INFINITY;
            }
        }
        for (int i = 0; i < 799; i++) {
            for (int x = 0; x < w - 1; x++) {
                graph[i][x + 1] = Math.min(graph[i][x] + 1, graph[i][x + 1]);
            }
        }
        for (int x = w - 1; x > 0; x--) {
            graph[798][x - 1] = Math.min(graph[798][x] + 1, graph[798][x - 1]);
        }
        List<Integer> list = new ArrayList<>(Arrays.asList(24, 50, 32));
        Collections.shuffle(list);
        for (int y = 0; y < h - 1; y++) {
            graph[y + 1][798] = Math.min(graph[y][798] + 1, graph[y + 1][798]);
        }
        for (int y = h - 1; y > 0; y--) {
            graph[y - 1][798] = Math.min(graph[y][798] + 1, graph[y - 1][798]);
        }
        double max = Double.NEGATIVE_INFINITY;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                max = Math.max(max, graph[i][j]);
            }
        }
        System.out.println((int) max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int common_ratio = scanner.nextInt();
        int principal = scanner.nextInt();
        int x = scanner.nextInt();
        int outer_loop_limit = 223;
        int divisor = 222;

        for (int LoopIndexOut = 0; LoopIndexOut <= outer_loop_limit / divisor; LoopIndexOut++) {
            for (int i = 2; i <= 12; i++) {
                System.out.println((int) (Math.pow(common_ratio, i - 1) * (x + principal / (1 - common_ratio)) - principal / (1 - common_ratio)));
            }
        }
    }
}
and
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] cellValues = new int[n];
        for (int i = 0; i < n; i++) {
            cellValues[i] = scanner.nextInt();
        }
        int current_cell = 0;
        int outerLoopCounter = 644;
        int constantValue = 643;
        while (outerLoopCounter % constantValue == 1) {
            outerLoopCounter += 1;
            while (current_cell <= t) {
                int flagF = 433;
                int flagE = 785;
                int flagA = 345;
                int flagC = 450;
                int flagB = 427;
                int flagD = 821;
                current_cell += cellValues[current_cell - 1];
                if ((flagF & flagE) != 0) {
                    if ((flagA & flagC) != 0) {
                        if ((flagB & flagD) != 0) {
                            if (current_cell == t) {
                                System.out.println("YES");
                                System.exit(0);
                            } else {
                                continue;
                            }
                        }
                    }
                }
            }
            System.out.println("NO");
        }
    }
}
class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int[] count = new int[256];
        int start = 0;
        int maxLen = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            count[c]++;
            while (start < i && count[c] > 1) {
                count[s.charAt(start)]--;
                start++;
            }
            maxLen = Math.max(maxLen, i - start + 1);
        }
import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.security.SecureRandom;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.spec.InvalidKeySpecException;
import java.security.
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int sum = 0;
class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int max =
import java.util.Scanner;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(getNextPrime(n));
    }

    public static boolean isPrime(int n) {
        if (n == 1) {
            return false;
        }
        if (n == 2) {
            return true;
        }
        if (n % 2 == 0) {
            return false;
        }
        for (int i = 3; i <= Math.sqrt(n) + 1; i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static int getNextPrime(int n) {
        if (n == 1) {
            return 2;
        }
        if (n == 2) {
            return 3;
        }
        if (n % 2 == 0) {
            n++;
        }
        while (true) {
            if (isPrime(n)) {
                return n;
            }
            n += 2;
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.BiFunction;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction
public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in
import java.util.*;
import java.io.*;
import java.math.*;
import java.util.concurrent.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        System.out.println(Math.max(Math.max(a * c, b * d), Math.max(a * d, b * c)));
    }
}
public class atcoder_ABC164_D {
    public static void main(String[] args) {
        System.out.println(fgh(1));
    }

    public static int f(int x) {
        return x * x;
    }

    public static int g(int x) {
        return x + 1;
    }

    public static int h(int x) {
        return x - 1;
    }
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics;
import java.util.stream.Collectors;
import java.util.stream.Collector.Characteristics
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder;
import java.util.concurrent.locks.StampedLock.ReadLockView;
import java.util.concurrent.locks.StampedLock.WriteLockView;
import java.util.concurrent.locks.StampedLock.ReadWriteLockView;
import java.util.concurrent.locks.StampedLock.Condition;
import java.util.concurrent.locks.StampedLock.State;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolder
import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC169_D {
    static int check_one_thirty_five = 321;
    static int check_two_thirty_five = 274;
    static int check_one_thirty_one = 602;
    static int check_two_thirty_one = 13;
    static int INF = 999999999;
    static int MOD = 1000000007;

    public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        int n = sc.nextInt();
        if (check_one_thirty_five & check_two_thirty_five) {
            if (check_one_thirty_one & check_two_thirty_one) {
                if (n == 1) {
                    System.out.println(0);
                    return;
                }
            }
        }
        List<Integer> fac = primeFactorize(n);
        Map<Integer, Integer> factorCounts = new HashMap<>();
        for (int p : fac) {
            factorCounts.put(p, factorCounts.getOrDefault(p, 0) + 1);
        }
        int ans = 0;
        for (Map.Entry<Integer, Integer> entry : factorCounts.entrySet()) {
            int p = entry.getKey();
            int e = entry.getValue();
            int x = e;
            for (int i = 1; i < 99999999; i++) {
                if (x >= i) {
                    x -= i;
                    ans++;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    static List<Integer> primeFactorize(int n) {
        List<Integer> a = new ArrayList<>();
        while (n % 2 == 0) {
            a.add(2);
            n /= 2;
        }
        int f = 3;
        while (f * f <= n) {
            if (n % f == 0) {
                a.add(f);
                n /= f;
            } else {
                f += 2;
            }
        }
        if (n != 1) {
            a.add(n);
        }
        return a;
    }

    static class FastScanner {
        private final InputStream in = System.in;
        private final byte[] buffer = new byte[1024];
        private int ptr = 0;
        private int buflen = 0;

        private boolean hasNextByte() {
            if (ptr < buflen) {
                return true;
            } else {
                ptr = 0;
                try {
                    buflen = in.read(buffer);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (buflen <= 0) {
                    return false;
                }
            }
            return true;
        }

        private int readByte() {
            if (hasNextByte()) return buffer[ptr++];
            else return -1;
        }

        private static boolean isPrintableChar(int c) {
            return 33 <= c && c <= 126;
        }

        private void skipUnprintable() {
            while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;
        }

        public boolean hasNext() {
            skipUnprintable();
            return hasNextByte();
        }

        public String next() {
            if (!hasNext()) throw new NoSuchElementException();
            StringBuilder sb = new StringBuilder();
            int b = readByte();
            while (isPrintableChar(b)) {
                sb.appendCodePoint(b);
                b = readByte();
            }
            return sb.toString();
        }

        public long nextLong() {
            if (!hasNext()) throw new NoSuchElementException();
            long n = 0;
            boolean minus = false;
            int b = readByte();
            if (b == '-') {
                minus = true;
                b = readByte();
            }
            if (b < '0' || '9' < b) {
                throw new NumberFormatException();
            }
            while (true) {
                if ('0' <= b && b <= '9') {
                    n *= 10;
                    n += b - '0';
                } else if (b == -1 || !isPrintableChar(b)) {
                    return minus ? -n : n;
                } else {
                    throw new NumberFormatException();
                }
                b = readByte();
            }
        }

        public int nextInt() {
            long nl = nextLong();
            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();
            return (int) nl;
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.Long
and

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		String input_string = sc.next();
		int[] count = new int[26];
		for(int i = 0; i < input_string.length(); i++) {
			count[input_string.charAt(i) - 'A']++;
		}
		Arrays.sort(count);
		int res = 0;
		for(int i = 25; i >= 0; i--) {
			if(k >= count[i]) {
				res += count[i] * count[i];
				k -= count[i];
			}
			else {
				res += k * k;
				break;
			}
		}
		System.out.println(res);
	}
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_334_A {
    public static void main(String[] args) {
        int n = 4;
        int inner_loop_counter = 1;
        int j = n * n;
        int loop_counter = 875;
        int loop_remainder = 874;
        while (loop_counter % loop_remainder == 1) {
            int constant_value = 1;
            Queue<Integer> result_queue = new LinkedBlockingQueue<>();

            Thread thread_calculate_sum0 = new Thread(() -> {
                int result = calculate_sum(loop_counter, constant_value);
                result_queue.add(result);
            });
            thread_calculate_sum0.start();
            try {
                thread_calculate_sum0.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int sum_result = result_queue.poll();
            loop_counter = sum_result;
            while (inner_loop_counter < j) {
                System.out.println(inner_loop_counter + " " + j);
                inner_loop_counter = inner_loop_counter + 1;
                j = j - 1;
            }
        }
    }

    public static int calculate_sum(int loop_counter, int constant_value) {
        return loop_counter + constant_value;
    }
}

import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String inputString = sc.nextLine();
        int[] prefixSums = new int[inputString.length() + 1];
        int checkerOne = 962;
        int checkerTwo = 535;

        for (int i = 1; i < prefixSums.length; i++) {
            prefixSums[i] = prefixSums[i - 1];
            if ((checkerOne & checkerTwo) != 0) {
                if (inputString.charAt(i - 1) == inputString.charAt(i)) {
                    prefixSums[i]++;
                }
            }
        }

        int numQueries = Integer.parseInt(sc.nextLine());
        List<Integer> arr = new ArrayList<>();

        for (int i = 0; i < numQueries; i++) {
            String[] input = sc.nextLine().split(" ");
            int m = Integer.parseInt(input[0]);
            int l = Integer.parseInt(input[1]);
            arr.add(prefixSums[l - 1] - prefixSums[m - 1]);
        }

        TTest tTest = new TTest();
        double[] arr1 = {90, 68, 40};
        double[] arr2 = {28, 88, 95};
        System.out.println(tTest.t(arr1, arr2));
        for (int i : arr) {
            System.out.println(i);
        }
    }
}
public class codeforces_108_B {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length(), ans = 0;
        Map<Character, Integer> map = new HashMap<>(); // current index of character
        // try to extend the
## 18.

Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.
Note: You may assume the string contain only lowercase letters.
import java.util.Scanner;
import java.util.PriorityQueue;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> heap_one = new PriorityQueue<Integer>();
        PriorityQueue<Integer> p2 = new PriorityQueue<Integer>();
        int sum_b = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        int condition_a = 511;
        int condition_b = 162;
        int outer_loop_limit = 751;
        int inner_loop_limit = 750;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < q; i++) {
                int[] ql = new int[3];
                for (int j = 0; j < 3; j++) {
                    ql[j] = sc.nextInt();
                }
                if ((condition_a & condition_b) != 0) {
                    if (ql[0] == 2) {
                        if (heap_one.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sum_p1 - heap_one.size() * -p2.peek() + p2.size() * -p2.peek() - sum_p2 + sum_b));
                        } else {
                            System.out.println(heap_one.peek() + " " + (sum_p1 - heap_one.size() * heap_one.peek() + p2.size() * heap_one.peek() - sum_p2 + sum_b));
                        }
                    } else {
                        sum_b += ql[2];
                        if (heap_one.size() == 0) {
                            heap_one.add(ql[1]);
                            sum_p1 += ql[1];
                        } else if (heap_one.peek() <= ql[1]) {
                            heap_one.add(ql[1]);
                            sum_p1 += ql[1];
                        } else {
                            p2.add(-ql[1]);
                            sum_p2 += ql[1];
                        }
                        if (heap_one.size() < p2.size()) {
                            int k = p2.poll();
                            heap_one.add(-k);
                            sum_p2 = sum_p2 + k;
                            sum_p1 -= k;
                        }
                        if (heap_one.size() - 1 > p2.size()) {
                            int k = heap_one.poll();
                            p2.add(-k);
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC153_A {

import java.util.*;

public class atcoder_AGC005_B {
    static int[] par;
    static int[] rank;
    static int[] size;
    static int[] a;
    static int[] b;
    static int n;
    static int c;

    static int root(int x) {
        return x == par[x] ? x : root(par[x]);
    }

    static boolean isSameGroup(int x, int y) {
        return root(x) == root(y);
    }

    static void uniteGroups(int x, int y) {
        if (!isSameGroup(x, y)) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        a = new int[n];
        b = new int[n];
        par = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        for (int i = n - 1; i >= 0; i--) {
            int k = b[i];
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                uniteGroups(k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                uniteGroups(k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }
}
public class codeforces_70_B {
    public static void main(String[] args) {
        System.out.println(compose(f,
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        double currentTime = a;
        while (currentTime <= t + 0.5) {
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> calculate_cookie(cookie, b));
            cookie = future.get();
            currentTime = currentTime + a;
        }
        System.out.println(cookie);
    }

    public static int calculate_cookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
import java.util.stream.Collectors;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputOne = scanner.nextInt();
        int inputTwo = scanner.nextInt();
        scanner.close();
        Collections.shuffle(Arrays.asList(53, 26, 63));
        System.out.println(inputOne <= inputTwo ? "safe" : "unsafe");
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String ip = sc.nextLine();
        String st = "";
        if (3 & 291) {
            if (777 & 744) {
                if (ip.length() != 1) {
                    if (ip.charAt(0) == '9') {
                        st = "9";
                        ip = ip.substring(1);
                    }
                    for (int i = 0; i < 529 / 528; i++) {
                        for (int j = 0; j < ip.length(); j++) {
                            if (ip.charAt(j) - '0' > 4) {
                                st += (9 - (ip.charAt(j) - '0'));
                            } else {
                                st += ip.charAt(j);
                            }
                        }
                    }
                } else {
                    st = ip;
                }
            }
        }
        System.out.println(Integer.parseInt(st));
    }
}
public class codeforces_272_B {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if (s == null || s.length() == 0 || k == 0) {
            return 0;
        }
        int start = 0;
        int end = 0;
        int max = 0;
        Map<Character, Integer> map = new HashMap<>();
        while (end < s.length()) {
            if
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_96_B {
    public static void main(String[] args) {
        List<Integer> l = new ArrayList<>();
        int limit = 1000000000;
        int four = 0;
        int seven = 0;
        int number = 0;
        int target_number = 0;
        int ans = 0;
        int outer_loop_limit = 690;
        int inner_loop_limit = 689;
        int LoopIndexOut = 0;
        int stop = outer_loop_limit / inner_loop_limit;
        int step = 1;
        Scanner scanner = new Scanner(System.in);
        target_number = scanner.nextInt();
        scanner.close();
        while (number <= limit) {
            if (number > 0 && four == seven) {
                l.add(number);
            }
            generate_number_sequence(number * 10 + 4, four + 1, seven);
            generate_number_sequence(number * 10 + 7, four, seven + 1);
        }
        Collections.sort(l);
        for (int val : l) {
            if (val >= target_number) {
                ans = val;
                break;
            }
        }
        while (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            for (int val : l) {
                if (val >= target_number) {
                    ans = val;
                    break;
                }
            }
            LoopIndexOut += step;
        }
        System.out.println(ans);
    }

    public static void generate_number_sequence(int number, int four, int seven) {
        // TODO
    }
}


import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int initial_value = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<String> future = executorService.submit(() -> {
            if (initial_value == 0) {
                return "Result Found";
            }
            int a_time = Math.min(a / da, t - 1);
            int b_time = Math.min(b / db, t - 1);
            for (int i = 0; i <= a_time; i++) {
                for (int j = 0; j <= b_time; j++) {
                    if (a - da * i == initial_value || b - db * j == initial_value) {
                        return "Result Found";
                    }
                    if (a - da * i + (b - db * j) == initial_value) {
                        return "Result Found";
                    }
                }
            }
            return "Result Not Found";
        });
        try {
            String result = future.get();
            if (result.equals("Result Not Found")) {
                System.out.println("NO");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        executorService.shutdown();
    }
}
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int sum = 0;
        while (sc.hasNextInt
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int new_n = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int new_r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();
        scanner.close();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Callable<List<Integer>> compute_partitions_task = () -> {
            return get_numbers(k, sk);
        };
        Future<List<Integer>> compute_partitions_future = executor.submit(compute_partitions_task);
        List<Integer> partitions_result = compute_partitions_future.get();
        List<Integer> ans = partitions_result;
        for (int i = 0; i < ans.size(); i++) {
            System.out.print(ans.get(i) + " ");
        }
        System.out.println();
        executor.shutdown();
    }

    public static List<Integer> get_numbers(int num, int t) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            if (i < t % num) {
                result.add(t / num + 1);
            } else {
                result.add(t / num);
            }
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    static int mod = (int) 1e9 + 7;
    static int N, K;
    static List<Integer>[] graph;
    static int[] memo;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        K = sc.nextInt();
        graph = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[a].add(b);
            graph[b].add(a);
        }
        memo = new int[N];
        Arrays.fill(memo, -1);
        System.out.println(dfs(0, -1, K));
    }

    static int dfs(int v, int p, int f) {
        if (memo[v] != -1) {
            return memo[v];
        }
        int numPatterns = f;
        int colorNum = K - 1;
        if (f == K) {
            colorNum = K - 2;
        }
        for (int u : graph[v]) {
            if (u == p) {
                continue;
            }
            int pat = dfs(u, v, colorNum);
            if (pat == 0) {
                numPatterns = 0;
                break;
            }
            numPatterns = numPatterns * pat % mod;
            colorNum--;
        }
        return memo[v] = numPatterns;
    }
}
import java.util.Scanner;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputValue = scanner.nextInt();
        int constantValue = 1;
        int result = calculateDifference
import java.util.*;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int minimumValue = sc.nextInt();
        int k = sc.nextInt();
        long lo = 0;
        long hi = (long)1e+18;
        while (hi - lo > 1) {
            long md = (lo + hi) / 2;
            long c = sumOfDigits(minimumValue + md - 1) - sumOfDigits(minimumValue - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long sumOfDigits(long k) {
        long ret = 0;
        long pw = 10;
        long len = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int start_range = scanner.nextInt();
        int b = scanner.nextInt();
        List<String> games = new ArrayList<>();
        int condition_one = 707;
        int condition_two = 617;
        for (int current_value = start_range; current_value <= x; current_value++) {
            if ((condition_one & condition_two) != 0) {
                if (current_value <= b) {
                    continue;
                } else {
                    recursive_loop(b, y + 1, 1, current_value, games);
                }
            }
        }
        System.out.println(games.size());
        for (String current_value : games) {
            System.out.println(current_value);
        }
    }

    public static void recursive_loop(int j, int stop, int step, int current_value, List<String> games) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (current_value > j) {
            games.add(current_value + " " + j);
        }
        recursive_loop(j + step, stop, step, current_value, games);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int initialTime = sc.nextInt();
        int c = 0;
        int ConditionCheckerOneEight = 37;
        int ConditionCheckerTwoEight = 826;
        TTest ttest
import java.util.*;
public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int expectedListLength = sc.nextInt();
        Set<Integer> firstInputList = new HashSet<>();
        Set<Integer> y = new HashSet<>();
        for (int i = 0; i < expectedListLength; i++) {
            firstInputList.add(sc.nextInt());
        }
        for (int i = 0; i < expectedListLength; i++) {
            y.add(sc.nextInt());
        }
        if (firstInputList.contains(0)) {
            firstInputList.remove(0);
        }
        if (y.contains(0)) {
            y.remove(0);
        }
        Set<Integer> z = new HashSet<>(firstInputList);
        z.addAll(y);
        if (z.size() != expectedListLength) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Double> fractionalParts = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            double fractionalPart = scanner.nextDouble() - (int) scanner.nextDouble();
            if (fractionalPart != 0) {
                fractionalParts.add(fractionalPart);
            }
        }
        Collections.sort(fractionalParts);
        int multiplier = 2;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                return multiplier * n - fractionalParts.size();
            }
        });
        int o = 0;
        try {
            o = future.get(1000, TimeUnit.MILLISECONDS);
        } catch (TimeoutException e) {
            System.out.println("Timeout");
        } catch (Exception e) {
            System.out.println("Error");
        }
        double arrSum = 0;
        for (double fractionalPart : fractionalParts) {
            arrSum += fractionalPart;
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            if (i + o >= n) {
                res = Math.min(res, Math.abs(i - arrSum));
            }
        }
        System.out.printf("%.3f", res);
    }
}
Java code:
def divisible_by_67(*args):
    divisible_list = []
    for i in args:
        if i % 67 == 0:
            divisible_list.append(i)
    return divisible_list
and
public class atcoder_ABC122_D {
    public static int f(int x) {
        if (x == 0) {
            return 1;
        }
        return f(x - 1) + 1;
    }

    public static void main(String[] args) {
        System.out.println(f(5));
    }
}

import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = 368;
        int[] global_array = new int[1];
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> calculate_product(N, global_array));
        int m = future.get();
        int[] f = new int[N];
        process_input(0, scanner.nextInt(), 1, scanner, f);
        int a = 0;
        int b = 0;
        int c = 0;
        calculate_min_pairs(0, N, 1, c, b, a, m, f);
        System.out.println(c);
    }

    private static int calculate_product(int N, int[] global_array) {
        return global_array[0] * N;
    }

    private static void process_input(int i, int stop, int step, Scanner scanner, int[] f) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String operation_type = scanner.next();
        int a = scanner.nextInt();
        int b = scanner.nextInt() + 1;
        if (operation_type.equals("M")) {
            m[a] += 2;
            m[b] -= 2;
        } else {
            f[a] += 2;
            f[b] -= 2;
        }
        process_input(i + step, stop, step, scanner, f);
    }

    private static void calculate_min_pairs(int i, int stop, int step, int c, int b, int a, int m, int[] f) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a += m[i];
        b += f[i];
        if (Math.min(a, b) > c) {
            c = Math.min(a, b);
        }
        calculate_min_pairs(i + step, stop, step, c, b, a, m, f);
    }
}
import java.util.*;
import java.io.*;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] L = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            L[i] = sc.nextInt();
        }
        int[] path = new int[N + 1];
        int[] Hash = new int[N + 1];
        int ind = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        for (int current_node_index = 1; current_node_index <= N; current_node_index++) {
            int ne = L[x];
            if (Hash[ne] != 0) {
                flag = true;
                t = Hash[ne];
                break;
            }
            path[ind] = ne;
            ind++;
            Hash[ne] = ind;
            x = ne;
        }
        if (flag) {
            int[] loop = new int[N - t + 1];
            for (int i = 0; i < N - t + 1; i++) {
                loop[i] = path[t + i];
            }
            if (K < ind) {
                System.out.println(path[K]);
            } else {
                K = K - ind;
                K = K % loop.length;
                System.out.println(loop[K]);
            }
        } else {
            System.out.println(path[K - 1]);
        }
    }
}
import java.util.*;
import java.text.*;
import java.math.*;
import java.io.*;
import java.net.*;
import java.util.regex.*;
import java.util.Date;
import java.util.Base64;
import java.util.Collections;
import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.IntStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.StreamSupport;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.*;
import java.io.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int q = sc.nextInt();
        String s = sc.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = sc.nextInt();
            problems[i][1] = sc.nextInt();
        }
        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        for (int[] problem : problems) {
            System.out.println(cumsum[problem[1] - 1] - cumsum[problem[0] - 1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        for (int i = s.length() - 1; i >= 0; i--) {
            System.out

import java.util.*;

public class atcoder_ABC154_A {
    public static void solve(int A, int B, int C, int D) {
        try {
            if (A == B) {
                if (C == D) {
                    System.out.println(A + " " + B + " " + C + " " + D);
                    return;
                }
            }
            if (A == C) {
                if (B == D) {
                    System.out.println(A + " " + B + " " + C + " " + D);
                    return;
                }
            }
            if (A == D) {
                if (B == C) {
                    System.out.println(A + " " + B + " " + C + " " + D);
                    return;
                }
            }
            System.out.println(A + " " + B + " " + C + " " + D);
            return;
        } catch (Exception e) {
            return;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        solve(A, B, C, D);
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.StampedLock.ReadWriteLockView;
import java.util.concurrent.locks.StampedLock.WriteLockView;
import java.util.concurrent.locks.StampedLock.ReadLockView;
import java.util.concurrent.locks.StampedLock.Condition;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.Long
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
import java.util.Base64;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.concurrent.TimeUnit;
import java.util.Date;
import java.util.Calendar;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.
import java.util.Scanner;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        int sum = 0;
        for (int i = 1; i < n; i++) {
            if (lst[i] > lst[i - 1]) {
                sum += lst[i];
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function
and
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.function.IntFunction;
import java.util.function.IntPredicate;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntToDouble
and



import java.util.*;
import java.io.*;
import java.math.*;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        System.out.println(l[n / 2]);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int final_answer = 0;
        TTest ttest = new TTest();
        ttest.tTest(new double[]{15, 85, 29}, new double[]{4, 32, 84});
        int remainder_checker = 910;
        int divisor = 909;
        while (remainder_checker % divisor == 1) {
            remainder_checker += 1;
            while (Math.pow(10, i) <= N) {
                final_answer += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
                i = i + 2;
            }
        }
        final_answer += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(final_answer);
    }
}


import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

class ProcessTask implements Callable<Map<Integer, Integer>> {
    Queue<Task> remaining;
    int finishTime;

    public ProcessTask(Queue<Task> remaining, int finishTime) {
        this.remaining = remaining;
        this.finishTime = finishTime;
    }

    @Override
    public Map<Integer, Integer> call() throws Exception {
        Task taskToRun = remaining.poll();
        finishTime = Math.max(finishTime, taskToRun.time) + taskToRun.duration;
        result.put(taskToRun.index, finishTime);
        return result;
    }
}

public class codeforces_644_B {
    static int n;
    static int b;
    static Queue<Task> remaining = new LinkedList<>();
    static boolean running = false;
    static int finishTime = 0;
    static Map<Integer, Integer> result = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        b = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task newTask = new Task(time, duration, i);
            result.put(i, 0);
            if (time > finishTime && remaining.isEmpty()) {
                running = true;
                finishTime = newTask.time + newTask.duration;
                result.put(i, finishTime);
            } else {
                if (time >= finishTime && !remaining.isEmpty()) {
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Map<Integer, Integer>> future = executor.submit(new ProcessTask(remaining, finishTime));
                    try {
                        result = future.get();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    executor.shutdown();
                }
                if (remaining.size() < b) {
                    remaining.add(newTask);
                } else {
                    result.put(i, -1);
                }
            }
        }
        while (!remaining.isEmpty()) {
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Map<Integer, Integer>> future = executor.submit(new ProcessTask(remaining, finishTime));
            try {
                result = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
            executor.shutdown();
        }
        for (int key : result.keySet()) {
            System.out.print(result.get(key) + " ");
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function
def char_freq(word):
    return {x: word.count(x) for x in word}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println((applyMultiplication(userInput, 2) + 1) / 3);
    }

    public static int calculateProduct(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int nestedMultiply(int arg0, int arg1) {
        return calculateProduct(arg0, arg1);
    }

    public static int computeProduct(int arg0, int arg1) {
        return nestedMultiply(arg0, arg1);
    }

    public static int recursiveMultiply(int arg0, int arg1) {
        return computeProduct(arg0, arg1);
    }

    public static int multiplyRecursive(int arg0, int arg1) {
        return recursiveMultiply(arg0, arg1);
    }

    public static int multiplyDeep(int arg0, int arg1) {
        return multiplyRecursive(arg0, arg1);
    }

    public static int multiplyIndirect(int arg0, int arg1) {
        return multiplyDeep(arg0, arg1);
    }

    public static int multiplyNested(int arg0, int arg1) {
        return multiplyIndirect(arg0, arg1);
    }

    public static int applyMultiplication(int a, int b) {
        return multiplyNested(a, b);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC135_D {
    static int mod = 1000000007;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        for (int i = 0; i < t; i++) {
            int n = Integer.parseInt(br.readLine());
            int ans = 0;
            for (int j = 1; j * (j + 1) / 2 <= n; j++) {
                if ((n - j * (j + 1) / 2) % j == 0) {
                    ans++;
                }
            }
            System.out.println(ans
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.DoublePredicate;
import java.util.function.DoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.LongPredicate;
import java.util.function.LongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongConsumer;
import java.util.function.ToLongFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToLongSupplier;
import java.util.function.ToLongConsumer;
import java.util.function.ToLongPredicate;
import java.util.function.ToLongFunction;
import java.util.function.ToLongToIntFunction;
import java.util.function.ToLongToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Random;
import java.util.HashMap;
import java.util.Map;
import java.util.HashSet;
import java.util.Set;
import java.util.Stack;
import java.util.Queue;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.LongAdder;
import java.util.concurrent.atomic.LongAccumulator;
import java.util.concurrent.atomic.DoubleAccumulator;
import java.util.concurrent.atomic.DoubleAdder;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic.AtomicLongFieldUpdater;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
import java.util.concurrent.atomic
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWrite
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncShared;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncShared.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncShared.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncExclusive;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncExclusive.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncExclusive.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedWriter.SyncQueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueuedReader.SyncQueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.100%|██████████| 221/221 [00:00<00:00, 16613.93it/s]

public class codeforces_379_A {
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        int max = 0;
        int start = 0;
        int end = 0;
        Map<Character, Integer> map = new HashMap<>();
        while (end < s.length()) {
            char c = s.charAt(end);
            if (map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
            end++;
            while (map.size() > 2) {
                char c1 = s.charAt(start);
                if (map.get(c1) == 1) {
                    map.remove(c1);
                } else {
                    map.put(c1, map.get(c1) - 1);
                }
                start++;
            }
            max = Math.max(max, end - start);
        }
        return max;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model bigcode/starcoder2-15b --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC028_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC106_C.java' returned non-zero exit status 1.
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC162_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC170_A.java' returned non-zero exit status 1.
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_518_B.java' returned non-zero exit status 1.
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 1.
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_267_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_265_B.java' returned non-zero exit status 1.
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_356_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 1.
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_665_A.java' returned non-zero exit status 1.
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_216_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_607_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 1.
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 1.
Filename:  codeforces_274_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC165_C.java' returned non-zero exit status 1.
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC024_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC024_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_134_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC002_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_25_A.java' returned non-zero exit status 1.
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC168_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_58_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC150_E.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC027_B.java' returned non-zero exit status 1.
Filename:  codeforces_408_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_408_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_31_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC038_A.java' returned non-zero exit status 1.
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC147_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC147_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC046_A.java' returned non-zero exit status 1.
Filename:  codeforces_596_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_596_B.java' returned non-zero exit status 1.
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 1.
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC123_D.java' returned non-zero exit status 1.
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_450_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC017_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC017_A.java' returned non-zero exit status 1.
Filename:  codeforces_682_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC136_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_624_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 1.
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 1.
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 15
Success: ['atcoder_ABC166_C.java', 'codeforces_609_B.java', 'codeforces_287_A.java', 'atcoder_ABC124_A.java', 'codeforces_354_A.java', 'codeforces_282_B.java', 'codeforces_583_B.java', 'codeforces_302_A.java', 'codeforces_669_A.java', 'codeforces_445_A.java', 'atcoder_ABC104_C.java', 'codeforces_37_A.java', 'codeforces_581_A.java', 'codeforces_242_A.java', 'codeforces_581_B.java']
Fail: ['codeforces_546_A.java', 'atcoder_AGC004_B.java', 'codeforces_621_A.java', 'atcoder_ABC140_F.java', 'atcoder_ABC122_D.java', 'codeforces_189_A.java', 'atcoder_ABC142_C.java', 'atcoder_ABC105_D.java', 'atcoder_ABC172_D.java', 'codeforces_567_A.java', 'atcoder_ABC127_B.java', 'atcoder_ABC178_B.java', 'atcoder_ABC133_E.java', 'atcoder_AGC046_B.java', 'codeforces_106_B.java', 'atcoder_ABC139_B.java', 'codeforces_373_B.java', 'codeforces_672_A.java', 'codeforces_49_A.java', 'codeforces_203_A.java', 'atcoder_ABC164_A.java', 'codeforces_387_A.java', 'atcoder_AGC011_C.java', 'atcoder_ABC143_D.java', 'codeforces_99_A.java', 'atcoder_AGC005_B.java', 'codeforces_86_A.java', 'codeforces_67_B.java', 'codeforces_400_B.java', 'codeforces_299_A.java', 'codeforces_500_A.java', 'codeforces_276_B.java', 'atcoder_ABC149_C.java', 'codeforces_462_B.java', 'atcoder_ABC158_A.java', 'atcoder_ABC124_C.java', 'codeforces_8_B.java', 'codeforces_274_A.java', 'atcoder_ABC132_F.java', 'codeforces_678_B.java', 'atcoder_ABC122_C.java', 'atcoder_AGC006_B.java', 'atcoder_AGC014_D.java', 'atcoder_ABC140_D.java', 'atcoder_ABC112_A.java', 'atcoder_AGC029_C.java', 'atcoder_ARC086_B.java', 'atcoder_ABC110_C.java', 'atcoder_ABC051_A.java', 'atcoder_ABC151_A.java', 'atcoder_ABC123_B.java', 'atcoder_ABC145_B.java', 'codeforces_632_B.java', 'atcoder_AGC043_B.java', 'atcoder_ABC174_E.java', 'codeforces_61_B.java', 'atcoder_ABC169_E.java', 'atcoder_ABC154_A.java', 'atcoder_ABC152_C.java', 'codeforces_682_B.java', 'codeforces_146_A.java', 'atcoder_ABC042_A.java', 'codeforces_469_A.java', 'codeforces_56_B.java', 'atcoder_ABC127_F.java', 'atcoder_ABC146_D.java', 'atcoder_AGC035_B.java', 'atcoder_ABC167_D.java', 'atcoder_ABC111_C.java', 'codeforces_268_A.java', 'atcoder_ABC114_C.java', 'atcoder_ABC169_C.java', 'codeforces_340_A.java', 'atcoder_AGC003_C.java', 'atcoder_ABC174_C.java', 'codeforces_148_B.java', 'atcoder_ABC167_C.java', 'codeforces_379_A.java', 'atcoder_AGC033_A.java', 'codeforces_705_B.java', 'atcoder_ABC129_E.java', 'atcoder_ABC107_D.java', 'atcoder_AGC017_A.java', 'codeforces_154_A.java', 'codeforces_519_B.java', 'atcoder_ABC043_B.java', 'codeforces_92_A.java', 'atcoder_ABC147_D.java', 'atcoder_ABC165_C.java', 'codeforces_110_B.java', 'atcoder_ABC170_A.java', 'codeforces_203_B.java', 'codeforces_629_A.java', 'codeforces_629_B.java', 'atcoder_ABC119_B.java', 'codeforces_23_B.java', 'atcoder_ABC126_E.java', 'atcoder_AGC010_B.java', 'codeforces_70_B.java', 'codeforces_397_B.java', 'codeforces_387_B.java', 'atcoder_AGC038_A.java', 'codeforces_653_A.java', 'codeforces_55_B.java', 'codeforces_267_A.java', 'atcoder_AGC025_A.java', 'atcoder_AGC002_A.java', 'codeforces_350_B.java', 'atcoder_ABC132_A.java', 'atcoder_ABC158_B.java', 'atcoder_ABC153_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC070_B.java', 'codeforces_131_B.java', 'codeforces_342_B.java', 'atcoder_AGC024_B.java', 'codeforces_569_A.java', 'codeforces_216_B.java', 'codeforces_607_A.java', 'codeforces_351_A.java', 'atcoder_ABC150_C.java', 'codeforces_617_B.java', 'atcoder_ABC171_E.java', 'atcoder_ABC108_B.java', 'codeforces_222_A.java', 'codeforces_242_B.java', 'codeforces_624_B.java', 'atcoder_AGC028_B.java', 'atcoder_ABC109_B.java', 'codeforces_622_A.java', 'codeforces_474_B.java', 'codeforces_404_A.java', 'codeforces_58_B.java', 'codeforces_421_A.java', 'codeforces_190_A.java', 'codeforces_31_A.java', 'codeforces_171_A.java', 'atcoder_ABC106_C.java', 'codeforces_544_B.java', 'codeforces_637_A.java', 'codeforces_313_B.java', 'codeforces_55_A.java', 'atcoder_ABC123_D.java', 'codeforces_231_A.java', 'atcoder_ABC169_D.java', 'atcoder_ABC107_C.java', 'codeforces_272_B.java', 'codeforces_518_B.java', 'codeforces_534_B.java', 'codeforces_598_A.java', 'codeforces_296_A.java', 'atcoder_ABC168_B.java', 'codeforces_665_A.java', 'atcoder_AGC034_B.java', 'atcoder_AGC028_A.java', 'codeforces_608_A.java', 'atcoder_ABC125_A.java', 'codeforces_369_B.java', 'atcoder_AGC019_A.java', 'atcoder_ABC112_C.java', 'codeforces_108_B.java', 'codeforces_408_B.java', 'codeforces_11_A.java', 'codeforces_95_A.java', 'codeforces_579_A.java', 'codeforces_596_B.java', 'codeforces_7_B.java', 'atcoder_ARC102_C.java', 'codeforces_265_B.java', 'atcoder_AGC046_A.java', 'codeforces_678_A.java', 'codeforces_412_A.java', 'codeforces_32_B.java', 'atcoder_ABC128_C.java', 'atcoder_ABC178_A.java', 'atcoder_ABC143_A.java', 'codeforces_356_A.java', 'codeforces_450_A.java', 'atcoder_ABC162_D.java', 'codeforces_134_A.java', 'atcoder_AGC027_B.java', 'atcoder_AGC037_E.java', 'codeforces_333_B.java', 'atcoder_AGC006_A.java', 'atcoder_ABC134_E.java', 'codeforces_673_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC135_D.java', 'codeforces_59_A.java', 'atcoder_AGC033_B.java', 'codeforces_651_A.java', 'atcoder_ABC125_C.java', 'codeforces_25_A.java', 'atcoder_ABC133_B.java', 'atcoder_ABC150_E.java', 'atcoder_ABC126_D.java', 'atcoder_ABC164_D.java', 'codeforces_459_B.java', 'codeforces_334_A.java', 'codeforces_79_A.java', 'codeforces_514_A.java', 'atcoder_ABC171_B.java', 'codeforces_644_B.java', 'atcoder_ABC136_B.java', 'codeforces_612_B.java', 'atcoder_AGC005_B.java', 'codeforces_96_B.java']
