
```
import java.util.*;
import java.io.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        ArrayList<Integer>[] adj = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            adj[i] = new ArrayList<>();
        }
        int[] deg = new int[N];
        int[] parity = new int[N];
        boolean[] visited = new boolean[N];
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken()) - 1;
            int b = Integer.parseInt(st.nextToken()) - 1;
            adj[a].add(b);
            adj[b].add(a);
            deg[a]++;
            deg[b]++;
        }
        if (M % 2 != 0) {
            System.out.println(-1);
            return;
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < N; i++) {
            pq.offer(new int[]{deg[i], i});
        }
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();
            int u = cur[1];
            if (visited[u]) {
                continue;
            }
            visited[u] = true;
            for (int i = 0; i < adj[u].size(); i++) {
                int v = adj[u].get(i);
                adj[v].remove(Integer.valueOf(u));
                if (parity[u] != 0 && i == 0) {
                    System.out.println((u + 1) + " " + (v + 1));
                    parity[u] = 1 - parity[u];
                } else {
                    System.out.println((v + 1) + " " + (u + 1));
                    parity[v] = 1 - parity[v];
                }
                deg[v]--;
                pq.offer(new int[]{deg[v], v});
            }
        }
    }
}

```

### Explanation:

The code is a solution to a programming problem where the goal is to find a way to color the vertices of a graph such that no two adjacent vertices have the same color. The code uses a priority queue to process the vertices in order of their degree, and a boolean array to keep track of which vertices have been processed. The code also uses an adjacency list to represent the graph, and an array to keep track of the degree of each vertex.

The code first reads in the number of vertices and edges from the input, and then reads in the edges of the graph. It then initializes the adjacency list, degree array, parity array, and visited array.

The code then checks if the number of edges is odd, in which case it prints -1 and exits.

The code then initializes a priority queue with the degree of each vertex and the vertex number. It then processes the vertices in order of their degree, starting with the vertex with the lowest degree.

For each vertex, the code checks if it has already been processed. If it has, it skips to the next vertex. Otherwise, it marks the vertex as processed and processes its neighbors. For each neighbor, it removes the edge between the vertex and the neighbor, and updates the degree of the neighbor. It then prints the edge between the vertex and the neighbor, and updates the parity of the vertex and neighbor.

The code continues processing the vertices in order of their degree until all vertices have been processed.

The code is a solution to a programming problem that can be solved using a variety of algorithms, including graph algorithms and graph coloring algorithms.





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































