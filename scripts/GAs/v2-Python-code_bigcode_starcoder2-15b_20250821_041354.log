+ model=bigcode/starcoder2-15b
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model bigcode/starcoder2-15b --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 07:30:08 [__init__.py:241] Automatically detected platform cuda.
found 225 inputs
INFO 08-21 07:30:09 [utils.py:326] non-default args: {'model': 'bigcode/starcoder2-15b', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 07:30:16 [__init__.py:711] Resolved architecture: Starcoder2ForCausalLM
INFO 08-21 07:30:16 [__init__.py:2816] Downcasting torch.float32 to torch.bfloat16.
INFO 08-21 07:30:16 [__init__.py:1750] Using max model len 4096
INFO 08-21 07:30:16 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3999181)[0;0m INFO 08-21 07:30:17 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3999181)[0;0m INFO 08-21 07:30:17 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='bigcode/starcoder2-15b', speculative_config=None, tokenizer='bigcode/starcoder2-15b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=bigcode/starcoder2-15b, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3999181)[0;0m WARNING 08-21 07:30:17 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3999181)[0;0m INFO 08-21 07:30:17 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_be428c63'), local_subscribe_addr='ipc:///tmp/f946bb94-cad8-429b-bf80-d9ee730c42a7', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:19 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_44c644a9'), local_subscribe_addr='ipc:///tmp/9b1ab247-6c3f-442e-b116-b0baad97fde9', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:19 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_01409477'), local_subscribe_addr='ipc:///tmp/02a3f23e-b709-480a-adee-dcf0412e5769', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:20 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:20 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:20 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:20 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:21 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:21 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:21 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_af802d90'), local_subscribe_addr='ipc:///tmp/1e02faaf-0f64-4de7-97af-fbea4c0909c1', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:21 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:21 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m WARNING 08-21 07:30:21 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m WARNING 08-21 07:30:21 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:21 [gpu_model_runner.py:1953] Starting to load model bigcode/starcoder2-15b...
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:21 [gpu_model_runner.py:1953] Starting to load model bigcode/starcoder2-15b...
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:21 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:21 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:21 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:21 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:21 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:21 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/14 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:   7% Completed | 1/14 [00:00<00:12,  1.05it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  14% Completed | 2/14 [00:01<00:11,  1.02it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  21% Completed | 3/14 [00:02<00:10,  1.02it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  29% Completed | 4/14 [00:03<00:09,  1.03it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  36% Completed | 5/14 [00:04<00:08,  1.03it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  43% Completed | 6/14 [00:05<00:07,  1.03it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  50% Completed | 7/14 [00:06<00:06,  1.03it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  57% Completed | 8/14 [00:07<00:05,  1.03it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  64% Completed | 9/14 [00:08<00:04,  1.04it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  71% Completed | 10/14 [00:09<00:03,  1.04it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  79% Completed | 11/14 [00:10<00:02,  1.04it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  86% Completed | 12/14 [00:11<00:01,  1.09it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards:  93% Completed | 13/14 [00:12<00:00,  1.08it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards: 100% Completed | 14/14 [00:13<00:00,  1.06it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Loading safetensors checkpoint shards: 100% Completed | 14/14 [00:13<00:00,  1.05it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m 
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:35 [default_loader.py:262] Loading weights took 13.41 seconds
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:35 [default_loader.py:262] Loading weights took 13.26 seconds
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:36 [gpu_model_runner.py:2007] Model loading took 14.8674 GiB and 14.054004 seconds
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:36 [gpu_model_runner.py:2007] Model loading took 14.8674 GiB and 14.097653 seconds
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:44 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/9af23a13be/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:44 [backends.py:559] Dynamo bytecode transform time: 8.45 s
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:45 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/9af23a13be/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:45 [backends.py:559] Dynamo bytecode transform time: 8.93 s
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:52 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.881 s
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:53 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 7.157 s
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:56 [monitor.py:34] torch.compile takes 8.45 s in total
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:56 [monitor.py:34] torch.compile takes 8.93 s in total
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:30:57 [gpu_worker.py:276] Available KV cache memory: 52.81 GiB
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:30:57 [gpu_worker.py:276] Available KV cache memory: 52.81 GiB
[1;36m(EngineCore_0 pid=3999181)[0;0m INFO 08-21 07:30:58 [kv_cache_utils.py:849] GPU KV cache size: 1,384,368 tokens
[1;36m(EngineCore_0 pid=3999181)[0;0m INFO 08-21 07:30:58 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 336.67x
[1;36m(EngineCore_0 pid=3999181)[0;0m INFO 08-21 07:30:58 [kv_cache_utils.py:849] GPU KV cache size: 1,384,368 tokens
[1;36m(EngineCore_0 pid=3999181)[0;0m INFO 08-21 07:30:58 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 336.67x
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 21.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 21.87it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 21.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 20.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 20.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 20.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:01<00:02, 20.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 20.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 20.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 19.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 19.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 19.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:01<00:01, 19.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:01<00:01, 19.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 18.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 18.56it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 18.23it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 17.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:02<00:00, 17.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:02<00:00, 17.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 16.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:02<00:00, 16.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 16.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 16.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 17.11it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 16.75it/s][1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:31:02 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:03<00:00, 17.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 18.81it/s]
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:31:02 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP1 pid=3999189)[0;0m INFO 08-21 07:31:02 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.72 GiB
[1;36m(EngineCore_0 pid=3999181)[0;0m [1;36m(VllmWorker TP0 pid=3999187)[0;0m INFO 08-21 07:31:02 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.72 GiB
[1;36m(EngineCore_0 pid=3999181)[0;0m INFO 08-21 07:31:02 [core.py:214] init engine (profile, create kv cache, warmup model) took 26.15 seconds
INFO 08-21 07:31:03 [llm.py:298] Supported_tasks: ['generate']
Translating 225 files...
  0%|          | 0/225 [00:00<?, ?it/s]100%|██████████| 225/225 [00:00<00:00, 9546.59it/s]
Adding requests:   0%|          | 0/225 [00:00<?, ?it/s]Adding requests:  42%|████▏     | 94/225 [00:00<00:00, 937.94it/s]Adding requests:  90%|█████████ | 203/225 [00:00<00:00, 1024.76it/s]Adding requests: 100%|██████████| 225/225 [00:00<00:00, 1021.70it/s]
Processed prompts:   0%|          | 0/225 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/225 [00:02<10:26,  2.80s/it, est. speed input: 96.24 toks/s, output: 3.22 toks/s]Processed prompts:   1%|          | 2/225 [00:05<11:14,  3.03s/it, est. speed input: 107.96 toks/s, output: 32.92 toks/s]Processed prompts:   1%|▏         | 3/225 [00:14<20:04,  5.42s/it, est. speed input: 62.83 toks/s, output: 57.43 toks/s] Processed prompts:   2%|▏         | 4/225 [00:14<12:32,  3.41s/it, est. speed input: 85.56 toks/s, output: 99.70 toks/s]Processed prompts:   2%|▏         | 5/225 [00:16<10:51,  2.96s/it, est. speed input: 89.03 toks/s, output: 131.18 toks/s]Processed prompts:   3%|▎         | 6/225 [00:17<08:16,  2.27s/it, est. speed input: 106.86 toks/s, output: 169.18 toks/s]Processed prompts:   3%|▎         | 7/225 [00:20<09:14,  2.54s/it, est. speed input: 112.07 toks/s, output: 189.49 toks/s]Processed prompts:   4%|▎         | 8/225 [00:25<11:22,  3.15s/it, est. speed input: 109.92 toks/s, output: 202.11 toks/s]Processed prompts:   4%|▍         | 9/225 [00:30<13:22,  3.72s/it, est. speed input: 103.02 toks/s, output: 215.02 toks/s]Processed prompts:   4%|▍         | 10/225 [00:33<12:28,  3.48s/it, est. speed input: 106.07 toks/s, output: 242.12 toks/s]Processed prompts:   5%|▍         | 11/225 [00:34<09:34,  2.68s/it, est. speed input: 113.24 toks/s, output: 282.21 toks/s]Processed prompts:   5%|▌         | 12/225 [00:37<10:13,  2.88s/it, est. speed input: 114.77 toks/s, output: 303.36 toks/s]Processed prompts:   6%|▌         | 13/225 [00:38<08:40,  2.45s/it, est. speed input: 118.34 toks/s, output: 338.22 toks/s]Processed prompts:   6%|▌         | 14/225 [00:44<11:46,  3.35s/it, est. speed input: 110.35 toks/s, output: 342.86 toks/s]Processed prompts:   7%|▋         | 15/225 [00:44<08:25,  2.41s/it, est. speed input: 124.56 toks/s, output: 387.21 toks/s]Processed prompts:   7%|▋         | 16/225 [00:44<06:08,  1.77s/it, est. speed input: 131.69 toks/s, output: 430.86 toks/s]Processed prompts:   8%|▊         | 17/225 [00:46<06:08,  1.77s/it, est. speed input: 134.89 toks/s, output: 460.24 toks/s]Processed prompts:   8%|▊         | 18/225 [00:50<07:58,  2.31s/it, est. speed input: 140.13 toks/s, output: 473.36 toks/s]Processed prompts:   8%|▊         | 19/225 [00:51<06:38,  1.93s/it, est. speed input: 142.89 toks/s, output: 509.20 toks/s]Processed prompts:   9%|▉         | 20/225 [00:56<10:37,  3.11s/it, est. speed input: 154.82 toks/s, output: 502.29 toks/s]Processed prompts:   9%|▉         | 21/225 [01:01<12:28,  3.67s/it, est. speed input: 163.58 toks/s, output: 506.89 toks/s]Processed prompts:  10%|▉         | 22/225 [01:04<10:49,  3.20s/it, est. speed input: 177.56 toks/s, output: 534.75 toks/s]Processed prompts:  10%|█         | 23/225 [01:05<09:20,  2.77s/it, est. speed input: 190.47 toks/s, output: 564.79 toks/s]Processed prompts:  11%|█         | 24/225 [01:08<08:39,  2.58s/it, est. speed input: 200.44 toks/s, output: 591.25 toks/s]Processed prompts:  11%|█         | 25/225 [01:08<06:23,  1.92s/it, est. speed input: 215.05 toks/s, output: 632.46 toks/s]Processed prompts:  12%|█▏        | 26/225 [01:08<05:00,  1.51s/it, est. speed input: 228.49 toks/s, output: 671.44 toks/s]Processed prompts:  12%|█▏        | 27/225 [01:09<04:27,  1.35s/it, est. speed input: 239.77 toks/s, output: 706.31 toks/s]Processed prompts:  12%|█▏        | 28/225 [01:10<03:33,  1.08s/it, est. speed input: 252.26 toks/s, output: 745.81 toks/s]Processed prompts:  13%|█▎        | 29/225 [01:10<02:41,  1.22it/s, est. speed input: 265.34 toks/s, output: 787.70 toks/s]Processed prompts:  13%|█▎        | 30/225 [01:11<02:53,  1.13it/s, est. speed input: 274.57 toks/s, output: 820.40 toks/s]Processed prompts:  15%|█▍        | 33/225 [01:11<01:18,  2.43it/s, est. speed input: 313.12 toks/s, output: 951.30 toks/s]Processed prompts:  15%|█▌        | 34/225 [01:12<01:13,  2.59it/s, est. speed input: 324.64 toks/s, output: 991.47 toks/s]Processed prompts:  16%|█▌        | 35/225 [01:12<01:05,  2.92it/s, est. speed input: 336.39 toks/s, output: 1032.87 toks/s]Processed prompts:  16%|█▌        | 36/225 [01:12<01:17,  2.45it/s, est. speed input: 345.77 toks/s, output: 1068.27 toks/s]Processed prompts:  16%|█▋        | 37/225 [01:13<01:14,  2.51it/s, est. speed input: 355.92 toks/s, output: 1107.00 toks/s]Processed prompts:  18%|█▊        | 40/225 [01:13<00:45,  4.04it/s, est. speed input: 389.55 toks/s, output: 1233.65 toks/s]Processed prompts:  19%|█▊        | 42/225 [01:13<00:37,  4.87it/s, est. speed input: 411.42 toks/s, output: 1317.47 toks/s]Processed prompts:  19%|█▉        | 43/225 [01:14<00:38,  4.70it/s, est. speed input: 421.40 toks/s, output: 1357.14 toks/s]Processed prompts:  20%|██        | 45/225 [01:14<00:30,  5.97it/s, est. speed input: 442.88 toks/s, output: 1441.96 toks/s]Processed prompts:  20%|██        | 46/225 [01:14<00:41,  4.35it/s, est. speed input: 450.89 toks/s, output: 1476.77 toks/s]Processed prompts:  21%|██▏       | 48/225 [01:14<00:29,  5.96it/s, est. speed input: 471.77 toks/s, output: 1562.32 toks/s]Processed prompts:  22%|██▏       | 49/225 [01:15<00:47,  3.73it/s, est. speed input: 478.01 toks/s, output: 1592.77 toks/s]Processed prompts:  23%|██▎       | 51/225 [01:15<00:35,  4.96it/s, est. speed input: 497.43 toks/s, output: 1676.83 toks/s]Processed prompts:  23%|██▎       | 52/225 [01:16<00:44,  3.89it/s, est. speed input: 504.29 toks/s, output: 1710.47 toks/s]Processed prompts:  24%|██▎       | 53/225 [01:16<00:43,  3.96it/s, est. speed input: 512.44 toks/s, output: 1749.13 toks/s]Processed prompts:  24%|██▍       | 54/225 [01:16<00:48,  3.56it/s, est. speed input: 519.45 toks/s, output: 1784.64 toks/s]Processed prompts:  25%|██▍       | 56/225 [01:17<00:42,  3.98it/s, est. speed input: 535.15 toks/s, output: 1862.72 toks/s]Processed prompts:  25%|██▌       | 57/225 [01:17<00:42,  3.97it/s, est. speed input: 542.39 toks/s, output: 1900.55 toks/s]Processed prompts:  26%|██▌       | 58/225 [01:17<00:42,  3.90it/s, est. speed input: 549.34 toks/s, output: 1937.84 toks/s]Processed prompts:  27%|██▋       | 61/225 [01:17<00:27,  5.99it/s, est. speed input: 573.77 toks/s, output: 2063.31 toks/s]Processed prompts:  28%|██▊       | 62/225 [01:18<00:28,  5.76it/s, est. speed input: 580.82 toks/s, output: 2101.95 toks/s]Processed prompts:  28%|██▊       | 63/225 [01:18<00:28,  5.73it/s, est. speed input: 587.85 toks/s, output: 2141.15 toks/s]Processed prompts:  28%|██▊       | 64/225 [01:18<00:29,  5.54it/s, est. speed input: 594.63 toks/s, output: 2179.64 toks/s]Processed prompts:  30%|██▉       | 67/225 [01:19<00:32,  4.94it/s, est. speed input: 613.72 toks/s, output: 2292.24 toks/s]Processed prompts:  30%|███       | 68/225 [01:19<00:30,  5.08it/s, est. speed input: 620.07 toks/s, output: 2331.18 toks/s]Processed prompts:  31%|███       | 70/225 [01:19<00:29,  5.31it/s, est. speed input: 632.39 toks/s, output: 2408.89 toks/s]Processed prompts:  32%|███▏      | 72/225 [01:20<00:28,  5.36it/s, est. speed input: 644.01 toks/s, output: 2485.74 toks/s]Processed prompts:  33%|███▎      | 74/225 [01:20<00:24,  6.21it/s, est. speed input: 656.49 toks/s, output: 2566.90 toks/s]Processed prompts:  33%|███▎      | 75/225 [01:20<00:25,  5.97it/s, est. speed input: 661.77 toks/s, output: 2604.73 toks/s]Processed prompts:  34%|███▍      | 77/225 [01:20<00:21,  7.00it/s, est. speed input: 673.87 toks/s, output: 2686.36 toks/s]Processed prompts:  35%|███▌      | 79/225 [01:20<00:18,  8.06it/s, est. speed input: 685.85 toks/s, output: 2768.59 toks/s]Processed prompts:  36%|███▌      | 81/225 [01:20<00:14,  9.86it/s, est. speed input: 698.21 toks/s, output: 2852.87 toks/s]Processed prompts:  37%|███▋      | 83/225 [01:21<00:14,  9.72it/s, est. speed input: 709.39 toks/s, output: 2933.40 toks/s]Processed prompts:  38%|███▊      | 85/225 [01:21<00:12, 11.04it/s, est. speed input: 721.07 toks/s, output: 3016.88 toks/s]Processed prompts:  39%|███▊      | 87/225 [01:21<00:16,  8.29it/s, est. speed input: 730.22 toks/s, output: 3090.85 toks/s]Processed prompts:  40%|███▉      | 89/225 [01:21<00:17,  7.98it/s, est. speed input: 739.76 toks/s, output: 3168.64 toks/s]Processed prompts:  40%|████      | 90/225 [01:21<00:16,  8.23it/s, est. speed input: 744.72 toks/s, output: 3208.66 toks/s]Processed prompts:  41%|████      | 92/225 [01:22<00:14,  9.21it/s, est. speed input: 754.84 toks/s, output: 3290.22 toks/s]Processed prompts:  42%|████▏     | 95/225 [01:22<00:10, 12.54it/s, est. speed input: 770.87 toks/s, output: 3417.63 toks/s]Processed prompts:  44%|████▍     | 99/225 [01:22<00:07, 17.38it/s, est. speed input: 792.23 toks/s, output: 3589.05 toks/s]Processed prompts:  46%|████▌     | 103/225 [01:22<00:05, 20.74it/s, est. speed input: 813.21 toks/s, output: 3759.44 toks/s]Processed prompts:  47%|████▋     | 106/225 [01:22<00:05, 21.27it/s, est. speed input: 828.26 toks/s, output: 3885.71 toks/s]Processed prompts:  48%|████▊     | 109/225 [01:22<00:05, 20.16it/s, est. speed input: 842.59 toks/s, output: 4010.19 toks/s]Processed prompts:  50%|████▉     | 112/225 [01:22<00:05, 20.89it/s, est. speed input: 857.05 toks/s, output: 4136.16 toks/s]Processed prompts:  51%|█████     | 115/225 [01:23<00:05, 21.57it/s, est. speed input: 871.23 toks/s, output: 4262.15 toks/s]Processed prompts:  52%|█████▏    | 118/225 [01:23<00:04, 23.10it/s, est. speed input: 885.27 toks/s, output: 4389.10 toks/s]Processed prompts:  56%|█████▌    | 126/225 [01:23<00:02, 35.00it/s, est. speed input: 924.07 toks/s, output: 4735.61 toks/s]Processed prompts:  58%|█████▊    | 130/225 [01:23<00:02, 34.41it/s, est. speed input: 942.40 toks/s, output: 4905.38 toks/s]Processed prompts:  60%|█████▉    | 134/225 [01:23<00:03, 26.67it/s, est. speed input: 958.81 toks/s, output: 5068.28 toks/s]Processed prompts:  61%|██████    | 137/225 [01:23<00:03, 27.34it/s, est. speed input: 971.54 toks/s, output: 5194.96 toks/s]Processed prompts:  63%|██████▎   | 142/225 [01:23<00:02, 32.57it/s, est. speed input: 993.08 toks/s, output: 5410.16 toks/s]Processed prompts:  66%|██████▌   | 148/225 [01:24<00:02, 37.85it/s, est. speed input: 1018.43 toks/s, output: 5668.50 toks/s]Processed prompts:  68%|██████▊   | 154/225 [01:24<00:01, 41.87it/s, est. speed input: 1043.20 toks/s, output: 5926.72 toks/s]Processed prompts:  71%|███████   | 159/225 [01:24<00:01, 35.52it/s, est. speed input: 1062.14 toks/s, output: 6134.83 toks/s]Processed prompts:  72%|███████▏  | 163/225 [01:24<00:01, 35.15it/s, est. speed input: 1077.15 toks/s, output: 6303.87 toks/s]Processed prompts:  75%|███████▍  | 168/225 [01:24<00:01, 36.10it/s, est. speed input: 1095.57 toks/s, output: 6516.28 toks/s]Processed prompts:  77%|███████▋  | 173/225 [01:24<00:01, 34.89it/s, est. speed input: 1113.12 toks/s, output: 6726.64 toks/s]Processed prompts:  80%|████████  | 180/225 [01:24<00:01, 42.09it/s, est. speed input: 1138.19 toks/s, output: 7029.37 toks/s]Processed prompts:  83%|████████▎ | 187/225 [01:24<00:00, 48.00it/s, est. speed input: 1162.42 toks/s, output: 7332.32 toks/s]Processed prompts:  87%|████████▋ | 195/225 [01:25<00:00, 55.86it/s, est. speed input: 1189.86 toks/s, output: 7680.00 toks/s]Processed prompts:  89%|████████▉ | 201/225 [01:25<00:00, 52.35it/s, est. speed input: 1208.73 toks/s, output: 7935.82 toks/s]Processed prompts:  92%|█████████▏| 207/225 [01:25<00:00, 47.46it/s, est. speed input: 1226.56 toks/s, output: 8189.33 toks/s]Processed prompts:  94%|█████████▍| 212/225 [01:25<00:00, 40.78it/s, est. speed input: 1239.65 toks/s, output: 8396.70 toks/s]Processed prompts:  97%|█████████▋| 219/225 [01:25<00:00, 40.02it/s, est. speed input: 1257.71 toks/s, output: 8692.89 toks/s]Processed prompts: 100%|█████████▉| 224/225 [01:25<00:00, 33.91it/s, est. speed input: 1267.83 toks/s, output: 8896.55 toks/s]Processed prompts: 100%|██████████| 225/225 [01:25<00:00, 33.91it/s, est. speed input: 1270.42 toks/s, output: 8941.62 toks/s]Processed prompts: 100%|██████████| 225/225 [01:25<00:00,  2.62it/s, est. speed input: 1270.42 toks/s, output: 8941.62 toks/s]
+ python3 clean_generations_translation.py --model bigcode/starcoder2-15b --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/225 [00:00<?, ?it/s]
import java.util.*;
import java.text.*;
import java.math.*;
import java.io.*;
import java.net.*;
import java.security.*;
import java.security.spec.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream
and
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_569_A {
    public static void main(String[] args) {
        int target_value = 0;
        int s = 0;
        int q = 0;
        int operation_count = 0;
        int loop_counter_one = 608;
        int loop_counter_two = 607;
        while (loop_counter_one % loop_counter_two == 1) {
            loop_counter_one += 1;
            while (s < target_value) {
                Queue<Integer> queue_calculate_product0 = new ConcurrentLinkedQueue<>();

                Thread worker_thread = new Thread(() -> {
                    int calculation_result = calculate_product(s, q);
                    queue_calculate_product0.add(calculation_result);
                });
                worker_thread.start();
                worker_thread.join();
                int result_calculate_product0 = queue_calculate_product0.poll();
                s = result_calculate_product0;
                operation_count += 1;
            }
        }
        System.out.println(operation_count);
    }

    public static int calculate_product(int s, int q) {
        return s * q;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println(a / b);
    }
}

import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;

import com.google.common.collect.ImmutableMap;

import io.github.cdimascio.dotenv.Dotenv;
import io.github.cdimascio.dotenv.DotenvEntry;
import io.github.cdimascio.dotenv.DotenvException;
import io.github.cdimascio.dotenv.DotenvParser;
import io.github.cdimascio.dotenv.DotenvWriter;
import io.github.cdimascio.dotenv.internal.DotenvEntries;
import io.github.cdimascio.dotenv.internal.DotenvParserImpl;
import io.github.cdimascio.dotenv.internal.DotenvReader;
import io.github.cdimascio.dotenv.internal.DotenvReaderImpl;
import io.github.cdimascio.dotenv.internal.DotenvWriterImpl;
import io.github.cdimascio.dotenv.internal.LineReader;
import io.github.cdimascio.dotenv.internal.LineReaderImpl;
import io.github.cdimascio.dotenv.internal.Parser;
import io.github.cdimascio.dotenv.internal.ParserImpl;
import io.github.cdimascio.dotenv.internal.Writer;
import io.github.cdimascio.dotenv.internal.WriterImpl;
import io.github.cdimascio.dotenv.parser.ParserException;
import io.github.cdimascio.dotenv.writer.WriterException;

public class codeforces_678_A {
    public static void main(String[] args) {
        try {
            Base64.getEncoder().encodeToString("46085993914798248468".getBytes());
            new Random().ints(25, 69, 70).toArray();
            TimeUnit.MILLISECONDS.sleep(230);
            new Date("2025-08-17 23:53:04");

            HttpClient client = HttpClientBuilder.create().build();
            HttpGet request = new HttpGet("http://google.com");
            client.execute(request);

            Dotenv dotenv = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env = dotenv.getEnv();
            System.out.println(env.get("KEY"));

            Dotenv dotenv2 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env2 = dotenv2.getEnv();
            System.out.println(env2.get("KEY"));

            Dotenv dotenv3 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env3 = dotenv3.getEnv();
            System.out.println(env3.get("KEY"));

            Dotenv dotenv4 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env4 = dotenv4.getEnv();
            System.out.println(env4.get("KEY"));

            Dotenv dotenv5 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env5 = dotenv5.getEnv();
            System.out.println(env5.get("KEY"));

            Dotenv dotenv6 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env6 = dotenv6.getEnv();
            System.out.println(env6.get("KEY"));

            Dotenv dotenv7 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env7 = dotenv7.getEnv();
            System.out.println(env7.get("KEY"));

            Dotenv dotenv8 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env8 = dotenv8.getEnv();
            System.out.println(env8.get("KEY"));

            Dotenv dotenv9 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env9 = dotenv9.getEnv();
            System.out.println(env9.get("KEY"));

            Dotenv dotenv10 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env10 = dotenv10.getEnv();
            System.out.println(env10.get("KEY"));

            Dotenv dotenv11 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env11 = dotenv11.getEnv();
            System.out.println(env11.get("KEY"));

            Dotenv dotenv12 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env12 = dotenv12.getEnv();
            System.out.println(env12.get("KEY"));

            Dotenv dotenv13 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env13 = dotenv13.getEnv();
            System.out.println(env13.get("KEY"));

            Dotenv dotenv14 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env14 = dotenv14.getEnv();
            System.out.println(env14.get("KEY"));

            Dotenv dotenv15 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env15 = dotenv15.getEnv();
            System.out.println(env15.get("KEY"));

            Dotenv dotenv16 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env16 = dotenv16.getEnv();
            System.out.println(env16.get("KEY"));

            Dotenv dotenv17 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env17 = dotenv17.getEnv();
            System.out.println(env17.get("KEY"));

            Dotenv dotenv18 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env18 = dotenv18.getEnv();
            System.out.println(env18.get("KEY"));

            Dotenv dotenv19 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env19 = dotenv19.getEnv();
            System.out.println(env19.get("KEY"));

            Dotenv dotenv20 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env20 = dotenv20.getEnv();
            System.out.println(env20.get("KEY"));

            Dotenv dotenv21 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env21 = dotenv21.getEnv();
            System.out.println(env21.get("KEY"));

            Dotenv dotenv22 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env22 = dotenv22.getEnv();
            System.out.println(env22.get("KEY"));

            Dotenv dotenv23 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env23 = dotenv23.getEnv();
            System.out.println(env23.get("KEY"));

            Dotenv dotenv24 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env24 = dotenv24.getEnv();
            System.out.println(env24.get("KEY"));

            Dotenv dotenv25 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env25 = dotenv25.getEnv();
            System.out.println(env25.get("KEY"));

            Dotenv dotenv26 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env26 = dotenv26.getEnv();
            System.out.println(env26.get("KEY"));

            Dotenv dotenv27 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env27 = dotenv27.getEnv();
            System.out.println(env27.get("KEY"));

            Dotenv dotenv28 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env28 = dotenv28.getEnv();
            System.out.println(env28.get("KEY"));

            Dotenv dotenv29 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env29 = dotenv29.getEnv();
            System.out.println(env29.get("KEY"));

            Dotenv dotenv30 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env30 = dotenv30.getEnv();
            System.out.println(env30.get("KEY"));

            Dotenv dotenv31 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env31 = dotenv31.getEnv();
            System.out.println(env31.get("KEY"));

            Dotenv dotenv32 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env32 = dotenv32.getEnv();
            System.out.println(env32.get("KEY"));

            Dotenv dotenv33 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env33 = dotenv33.getEnv();
            System.out.println(env33.get("KEY"));

            Dotenv dotenv34 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env34 = dotenv34.getEnv();
            System.out.println(env34.get("KEY"));

            Dotenv dotenv35 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env35 = dotenv35.getEnv();
            System.out.println(env35.get("KEY"));

            Dotenv dotenv36 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env36 = dotenv36.getEnv();
            System.out.println(env36.get("KEY"));

            Dotenv dotenv37 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env37 = dotenv37.getEnv();
            System.out.println(env37.get("KEY"));

            Dotenv dotenv38 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env38 = dotenv38.getEnv();
            System.out.println(env38.get("KEY"));

            Dotenv dotenv39 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env39 = dotenv39.getEnv();
            System.out.println(env39.get("KEY"));

            Dotenv dotenv40 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env40 = dotenv40.getEnv();
            System.out.println(env40.get("KEY"));

            Dotenv dotenv41 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env41 = dotenv41.getEnv();
            System.out.println(env41.get("KEY"));

            Dotenv dotenv42 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env42 = dotenv42.getEnv();
            System.out.println(env42.get("KEY"));

            Dotenv dotenv43 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env43 = dotenv43.getEnv();
            System.out.println(env43.get("KEY"));

            Dotenv dotenv44 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env44 = dotenv44.getEnv();
            System.out.println(env44.get("KEY"));

            Dotenv dotenv45 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env45 = dotenv45.getEnv();
            System.out.println(env45.get("KEY"));

            Dotenv dotenv46 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env46 = dotenv46.getEnv();
            System.out.println(env46.get("KEY"));

            Dotenv dotenv47 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env47 = dotenv47.getEnv();
            System.out.println(env47.get("KEY"));

            Dotenv dotenv48 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env48 = dotenv48.getEnv();
            System.out.println(env48.get("KEY"));

            Dotenv dotenv49 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env49 = dotenv49.getEnv();
            System.out.println(env49.get("KEY"));

            Dotenv dotenv50 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env50 = dotenv50.getEnv();
            System.out.println(env50.get("KEY"));

            Dotenv dotenv51 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env51 = dotenv51.getEnv();
            System.out.println(env51.get("KEY"));

            Dotenv dotenv52 = Dotenv.configure().directory("C:\\Users\\user\\Desktop\\test").load();
            Map<String, String> env52 = dotenv52

and
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_55_A {
    public static void main(String[] args) {
        int inputNumber = Integer.parseInt(System.console().readLine());
        while (inputNumber % 2 == 0) {
            int divisor = 2;
            Queue<Double> queueDivisionOperation0 = new LinkedBlockingQueue<>();

            Thread threadDivisionOperation0 = new Thread(() -> {
                double result = divisionOperation(inputNumber, divisor);
                queueDivisionOperation0.add(result);
            });
            threadDivisionOperation0.start();
            try {
                threadDivisionOperation0.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            double resultDivisionOperation0 = queueDivisionOperation0.poll();
            inputNumber = (int) resultDivisionOperation0;
        }
        if (inputNumber == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static double divisionOperation(int inputNumber, int divisor) {
        return (double) inputNumber / divisor;
    }
}
and
import java.util.*;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int matrixSize = sc.nextInt();
        String[] s = new String[matrixSize];
        for (int i = 0; i < matrixSize; i++) {
            s[i] = sc.next();
        }
        int flag = 0;
        List<Character> d1 = new ArrayList<>();
        List<Character> d2 = new ArrayList<>();
        Set<Character> rem = new HashSet<>();
        int DiagonalCheckerOne = 51;
        int DiagonalCheckerTwo = 753;
        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                if ((DiagonalCheckerOne & DiagonalCheckerTwo) != 0) {
                    if (i == j) {
                        d1.add(s[i].charAt(j));
                    }
                }
                if (i == matrixSize - j - 1) {
                    d2.add(s[i].charAt(j));
                }
                if (i != j && i != matrixSize - j - 1) {
                    rem.add(s[i].charAt(j));
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!d1.equals(d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).size() != 1) {
            System.out.println("NO");
        } else if (d1.equals(rem)) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int startColumn = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][startColumn] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = startColumn; j <= D; j++) {
                int aboveValue = d[i][j - 1];
                int leftValue = d[i - 1][j];
                int diagonalValue = d[i - 1][j - 1];
                int currentRow = d[i][j];
                int rowAbove = d[i - 1][j];
                int prevRow = d[i - 1][j];
                int constantOne = 1;
                int constantTwo = 1;
                d[i][j] += calculateMatrixValue(i, m, j, constantOne, diagonalValue, constantTwo, leftValue, aboveValue);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculateMatrixValue(int i, int m, int j, int constantOne, int diagonalValue, int constantTwo, int leftValue, int aboveValue) {
        return (aboveValue * i + leftValue * j - diagonalValue * (i - constantTwo) * (j - constantOne)) % m;
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int m = sc.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        int MinConditionChecker = 355;
        int SmallConditionChecker = 263;
        int MediumConditionChecker = 505;
        int MidConditionChecker = 686;
        int LowConditionChecker = 139;
        int MaxConditionChecker = 298;
        for (int i = 0; i < t; i++) {
            String[] operation = sc.next().split(" ");
            if (MinConditionChecker & SmallConditionChecker) {
                if (operation[0].equals("alloc")) {
                    int pos = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            pos++;
                            if (pos == Integer.parseInt(operation[1])) {
                                for (int k = j - Integer.parseInt(operation[1]) + 1; k <= j; k++) {
                                    alocuente[k] = ind;
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            pos = 0;
                        }
                    }
                    if (pos == 0) {
                        System.out.println("NULL");
                    }
                }
            }
            if (MediumConditionChecker & MidConditionChecker) {
                if (operation[0].equals("erase")) {
                    int pos = 0;
                    if (Integer.parseInt(operation[1]) <= 0 || !Arrays.asList(alocuente).contains(Integer.parseInt(operation[1]))) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        for (int j = 0; j < m; j++) {
                            if (Integer.parseInt(operation[1]) > 0 && alocuente[j] == Integer.parseInt(operation[1])) {
                                alocuente[j] = 0;
                            }
                        }
                    }
                }
            }
            if (LowConditionChecker & MaxConditionChecker) {
                if (operation[0].equals("defragment")) {
                    int zeroCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            zeroCount++;
                        }
                    }
                    int[] temp = new int[m - zeroCount];
                    int k = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] != 0) {
                            temp[k] = alocuente[j];
                            k++;
                        }
                    }
                    for (int j = 0; j < zeroCount; j++) {
                        temp[k] = 0;
                        k++;
                    }
                    alocuente = temp;
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }
        Map<Integer, Integer> l = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (!l.containsKey(lst[i])) {
                l.put(lst[i], 1);
            } else {
                l.put(lst[i], l.get(lst[i]) + 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l.get(lst[i]) > 1) {
                res += n - i - l.get(lst[i]);
                l.put(lst[i], l.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.stat.inference.TTestImpl;
import org.apache.commons.math3.stat.
import java.util.Scanner;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Stack;
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Random;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
and
import java.util.Scanner;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int[] resultArray = new int[n];
        int mx = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            resultArray[i] = Math.max(0, mx - arr[i] + 1);
            if (arr[i] > mx) {
                mx = arr[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(resultArray[i] + " ");
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC126_E {
    static int N, M;
    static int[] used;
    static List<Integer>[] edge;
    static int ans = 0;
    static int checker_one = 229;
    static int checker_two = 524;

    public static void main(String[] args) {
        FastReader sc = new FastReader();
        N = sc.nextInt();
        M = sc.nextInt();
        edge = new ArrayList[N];
        used = new int[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge[X].add(Y);
            edge[Y].add(X);
        }
        for (int i = 0; i < N; i++) {
            if ((checker_one & checker_two) != 0) {
                if (used[i] == 0) {
                    ans++;
                    Queue<Integer> queue = new LinkedList<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        used[node] = 1;
                        for (int nextnode : edge[node]) {
                            if (used[nextnode] == 0) {
                                queue.add(nextnode);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
}

import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();
        int min = Math.min(firstInput, secondInput);
        int max = Math.max(firstInput, secondInput);
        System.out.println(min + " " + (max - min) / 2);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int currentValue = 1;
        while (m >= currentValue) {
            Queue<Integer> queueCalculateDifference0 = new LinkedBlockingQueue<>();
            Thread threadCalculateDifference0 = new Thread(() -> {
                int differenceResult = calculateDifference(currentValue, m);
                queueCalculateDifference0.add(differenceResult);
            });
            threadCalculateDifference0.start();
            try {
                threadCalculateDifference0.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int resultCalculateDifference0 = queueCalculateDifference0.poll();
            m = resultCalculateDifference0;
            int constantOne = 1;
            Queue<Integer> sumModuloQueue = new LinkedBlockingQueue<>();
            Thread sumModuloThread = new Thread(() -> {
                int result = calculateSumWithModulo(currentValue, constantOne, n);
                sumModuloQueue.add(result);
            });
            sumModuloThread.start();
            try {
                sumModuloThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int sumModuloResult = sumModuloQueue.poll();
            currentValue = sumModuloResult;
        }
        System.out.println(m);
    }

    public static int calculateDifference(int currentValue, int m) {
        return m - currentValue;
    }

    public static int calculateSumWithModulo(int currentValue, int constantOne, int n) {
        return currentValue % n + constantOne;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.IntPredicate;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        for (int i = 0; i < n; i++) {
            if (i + 2 < n && l[i] + 1 == l[i + 1] && l[i] + 2 == l[i + 2]) {
                System.out.println("YES");
                return;
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = sc.nextInt();
        }
        int[] e = new int[n];
        for (int i = 0; i < n; i++) {
            e[i] = sc.nextInt();
        }
        int[] f = new int[n];
        for (int i = 0; i < n; i++) {
            f[i] = sc.nextInt();
        }
        int[] g = new int[n];
        for (int i = 0; i < n; i++) {
            g[i] = sc.nextInt();
        }
        int[] h = new int[n];
        for (int i = 0; i < n; i++) {
            h[i] = sc.nextInt();
        }
        int[] i = new int[n];
        for (int j = 0; j < n; j++) {
            i[j] = sc.nextInt();
        }
        int[] j = new int[n];
        for (int k = 0; k < n; k++) {
            j[k] = sc.nextInt();
        }
        int[] k = new int[n];
        for (int l = 0; l < n; l++) {
            k[l] = sc.nextInt();
        }
        int[] l = new int[n];
        for (int m = 0; m < n; m++) {
            l[m] = sc.nextInt();
        }
        int[] m = new int[n];
        for (int o = 0; o < n; o++) {
            m[o] = sc.nextInt();
        }
        int[] o = new int[n];
        for (int p = 0; p < n; p++) {
            o[p] = sc.nextInt();
        }
        int[] p = new int[n];
        for (int q = 0; q < n; q++) {
            p[q] = sc.nextInt();
        }
        int[] q = new int[n];
        for (int r = 0; r < n; r++) {
            q[r] = sc.nextInt();
        }
        int[] r = new int[n];
        for (int s = 0; s < n; s++) {
            r[s] = sc.nextInt();
        }
        int[] s = new int[n];
        for (int t = 0; t < n; t++) {
            s[t] = sc.nextInt();
        }
        int[] t = new int[n];
        for (int u = 0; u < n; u++) {
            t[u] = sc.nextInt();
        }
        int[] u = new int[n];
        for (int v = 0; v < n; v++) {
            u[v] = sc.nextInt();
        }
        int[] v = new int[n];
        for (int w = 0; w < n; w++) {
            v[w] = sc.nextInt();
        }
        int[] w = new int[n];
        for (int x = 0; x < n; x++) {
            w[x] = sc.nextInt();
        }
        int[] x = new int[n];
        for (int y = 0; y < n; y++) {
            x[y] = sc.nextInt();
        }
        int[] y = new int[n];
        for (int z = 0; z < n; z++) {
            y[z] = sc.nextInt();
        }
        int[] z = new int[n];
        for (int aa = 0; aa < n; aa++) {
            z[aa] = sc.nextInt();
        }
        int[] aa = new int[n];
        for (int ab = 0; ab < n; ab++) {
            aa[ab] = sc.nextInt();
        }
        int[] ab = new int[n];
        for (int ac = 0; ac < n; ac++) {
            ab[ac] = sc.nextInt();
        }
        int[] ac = new int[n];
        for (int ad = 0; ad < n; ad++) {
            ac[ad] = sc.nextInt();
        }
        int[] ad = new int[n];
        for (int ae = 0; ae < n; ae++) {
            ad[ae] = sc.nextInt();
        }
        int[] ae = new int[n];
        for (int af = 0; af < n; af++) {
            ae[af] = sc.nextInt();
        }
        int[] af = new int[n];
        for (int ag = 0; ag < n; ag++) {
            af[ag] = sc.nextInt();
        }
        int[] ag = new int[n];
        for (int ah = 0; ah < n; ah++) {
            ag[ah] = sc.nextInt();
        }
        int[] ah = new int[n];
        for (int ai = 0; ai < n; ai++) {
            ah[ai] = sc.nextInt();
        }
        int[] ai = new int[n];
        for (int aj = 0; aj < n; aj++) {
            ai[aj] = sc.nextInt();
        }
        int[] aj = new int[n];
        for (int ak = 0; ak < n; ak++) {
            aj[ak] = sc.nextInt();
        }
        int[] ak = new int[n];
        for (int al = 0; al < n; al++) {
            ak[al] = sc.nextInt();
        }
        int[] al = new int[n];
        for (int am = 0; am < n; am++) {
            al[am] = sc.nextInt();
        }
        int[] am = new int[n];
        for (int an = 0; an < n; an++) {
            am[an] = sc.nextInt();
        }
        int[] an = new int[n];
        for (int ao = 0; ao < n; ao++) {
            an[ao] = sc.nextInt();
        }
        int[] ao = new int[n];
        for (int ap = 0; ap < n; ap++) {
            ao[ap] = sc.nextInt();
        }
        int[] ap = new int[n];
        for (int aq = 0; aq < n; aq++) {
            ap[aq] = sc.nextInt();
        }
        int[] aq = new int[n];
        for (int ar = 0; ar < n; ar++) {
            aq[ar] = sc.nextInt();
        }
        int[] ar = new int[n];
        for (int as = 0; as < n; as++) {
            ar[as] = sc.nextInt();
        }
        int[] as = new int[n];
        for (int at = 0; at < n; at++) {
            as[at] = sc.nextInt();
        }
        int[] at = new int[n];
        for (int au = 0; au < n; au++) {
            at[au] = sc.nextInt();
        }
        int[] au = new int[n];
        for (int av = 0; av < n; av++) {
            au[av] = sc.nextInt();
        }
        int[] av = new int[n];
        for (int aw = 0; aw < n; aw++) {
            av[aw] = sc.nextInt();
        }
        int[] aw = new int[n];
        for (int ax = 0; ax < n; ax++) {
            aw[ax] = sc.nextInt();
        }
        int[] ax = new int[n];
        for (int ay = 0; ay < n; ay++) {
            ax[ay] = sc.nextInt();
        }
        int[] ay = new int[n];
        for (int az = 0; az < n; az++) {
            ay[az] = sc.nextInt();
        }
        int[] az = new int[n];
        for (int ba = 0; ba < n; ba++) {
            az[ba] = sc.nextInt();
        }
        int[] ba = new int[n];
        for (int bb = 0; bb < n; bb++) {
            ba[bb] = sc.nextInt();
        }
        int[] bb = new int[n];
        for (int bc = 0; bc < n; bc++) {
            bb[bc] = sc.nextInt();
        }
        int[] bc = new int[n];
        for (int bd = 0; bd < n; bd++) {
            bc[bd] = sc.nextInt();
        }
        int[] bd = new int[n];
        for (int be = 0; be < n; be++) {
            bd[be] = sc.nextInt();
        }
        int[] be = new int[n];
        for (int bf = 0; bf < n; bf++) {
            be[bf] = sc.nextInt();
        }
        int[] bf = new int[n];
        for (int bg = 0; bg < n; bg++) {
            bf[bg] = sc.nextInt();
        }
        int[] bg = new int[n];
        for (int bh = 0; bh < n; bh++) {
            bg[bh] = sc.nextInt();
        }
        int[] bh = new int[n];
        for (int bi = 0; bi < n; bi++) {
            bh[bi] = sc.nextInt();
        }
        int[] bi = new int[n];
        for (int bj = 0; bj < n; bj++) {
            bi[bj] = sc.nextInt();
        }
        int[] bj = new int[n];
        for (int bk = 0; bk < n; bk++) {
            bj[bk] = sc.nextInt();
        }
        int[] bk = new int[n];
        for (int bl = 0; bl < n; bl++) {
            bk[bl] = sc.nextInt();
        }
        int[] bl = new int[n];
        for (int bm = 0; bm < n; bm++) {
            bl[bm] = sc.nextInt();
        }
        int[] bm = new int[n];
        for (int bn = 0; bn < n; bn++) {
            bm[bn] = sc.nextInt();
        }
        int[] bn = new int[n];
        for (int bo = 0; bo < n; bo++) {
            bn[bo] = sc.nextInt();
        }
        int[] bo = new int[n];
        for (int bp = 0; bp < n; bp++) {
            bo[bp] = sc.nextInt();
        }
        int[] bp = new int[n];
        for (int bq = 0; bq < n; bq++) {
            bp[bq] = sc.nextInt();
        }
        int[] bq = new int[n];
        for (int br = 0; br < n; br++) {
            bq[br] = sc.nextInt();
        }
        int[] br = new int[n];
        for (int bs = 0; bs < n; bs++) {
            br[bs] = sc.nextInt();
        }
        int[] bs = new int[n];
        for (int bt = 0; bt < n; bt++) {
            bs[bt] = sc.nextInt();
        }
        int[] bt = new int[n];
        for (int bu = 0; bu < n; bu++) {
            bt[bu] = sc.nextInt();
        }
        int[] bu = new int[n];
        for (int bv = 0; bv < n; bv++) {
            bu[bv] = sc.nextInt();
        }
        int[] bv = new int[n];
        for (

import java.util.*;
import java.io.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicBooleanArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.Sync;
import java.util.concurrent.locks.StampedLock.ReadLockView;
import java.util.concurrent.locks.StampedLock.WriteLockView;
import java.util.concurrent.locks.StampedLock.ReadWriteLockView;
import java.util.concurrent.locks.StampedLock.Condition;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.Sync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.NonfairSync;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject.FairSync;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.Sync;
import java.util.concurrent.
import java.util.HashMap;

public class codeforces_518_B {
    public static HashMap<Character, Integer> frequency(String string) {
        HashMap<Character, Integer> freq = new HashMap<>();
        for (char letra : string.toCharArray()) {
            if (freq.containsKey(letra)) {
                freq.put(letra, freq.get(letra) + 1);
            } else {
                freq.put(letra, 1);
            }
        }
        return freq;
    }

    public static Tuple<Integer, Integer> same_different(String string1, String string2) {
        HashMap<Character, Integer> freq1 = frequency(string1);
        HashMap<Character, Integer> freq2 = frequency(string2);
        int yay = 0;
        int whoops = 0;
        for (char letra : freq1.keySet()) {
            while (freq1.get(letra) > 0 && freq2.containsKey(letra) && (freq2.get(letra) > 0)) {
                yay += 1;
                freq1.put(letra, freq1.get(letra) - 1);
                freq2.put(letra, freq2.get(letra) - 1);
            }
        }
        for (char le
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDouble
import java.util.Scanner;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int x = Integer.parseInt(input[0]);
        int y = Integer.parseInt(input[1]);
        int a = Integer.parseInt(input[2]);
        int b = Integer.parseInt(input[3]);
        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
        Thread thread = new Thread(() -> {
            int result = leastCommonMultiple(x, y);
            queue.add(result);
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int lcm = queue.poll();
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    public static int greatestCommonDivisor(int a, int b) {
        int temp = 686;
        while (temp % 685 == 1) {
            temp++;
            while (a % b != 0) {
                int temp2 = a;
                a = b;
                b = temp2 % b;
            }
        }
        return b;
    }

    public static int leastCommonMultiple(int a, int b) {
        return a * b / greatestCommonDivisor(a, b);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextInt();
        }
        Arrays.sort(S);
        boolean[] flag = new boolean[N];
        Arrays.fill(flag, true);
        List<Integer> cur = new ArrayList<>();
        cur.add(S[0]);
        flag[0] = false;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int index = 0; index < N; index++) {
                if (flag[index] && S[index] < cur.get(j)) {
                    cur.add(S[index]);
                    j++;
                    flag[index] = false;
                    if (j == jM) {
                        break;
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int t = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 989;
        int SecondCondition = 711;
        int OuterLoopLimit = 748;
        int OuterLoopStep = 747;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / OuterLoopStep; LoopIndexOut++) {
            recursive_velocity_calculator(0, t, 1);
        }
        System.out.println(distance);
    }

    public static void recursive_velocity_calculator(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (FirstCondition & SecondCondition) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
        }
        distance = distance + v;
        v += a * d;
        recursive_velocity_calculator(i + step, stop, step);
    }
}
and
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_148_B {
    public static void main(String[] args) {
        int princess = Integer.parseInt(args[0]);
        int dragon = Integer.parseInt(args[1]);
        int t = Integer.parseInt(args[2]);
        int f = Integer.parseInt(args[3]);
        int c = Integer.parseInt(args[4]);
        if (dragon <= princess) {
            System.out.println(0);
            return;
        }
        int result = 0;
        Queue<Integer> queue_fight0 = new LinkedBlockingQueue<>();
        Thread thread_fight0 = new Thread(() -> {
            int result_fight = fight(t, princess);
            queue_fight0.add(result_fight);
        });
        thread_fight0.start();
        try {
            thread_fight0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int current_position = queue_fight0.poll();
        current_position += princess * current_position / (dragon - princess);
        while (current_position < c) {
            result = result + 1;
            current_position += princess * current_position / dragon;
            current_position += princess * f;
            current_position += princess * current_position / (dragon - princess);
        }
        System.out.println(result);
    }

    public static int fight(int t, int princess) {
        return t * princess;
    }
}
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args)
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int r = 1;
        List<Integer> L = new ArrayList<>();
        String[] inputValues = scanner.nextLine().split(" ");
        for (String inputValue : inputValues) {
            int initialList = r;
            for (int i = 0; i < Integer.parseInt(inputValue); i++) {
                L.add(initialList);
            }
            int constantValue = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> r + constantValue);
            try {
                r = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        scanner.nextLine();
        Collections.shuffle(List.of(47, 31, 52));
        String[] currentIndexes = scanner.nextLine().split(" ");
        for (String currentIndex : currentIndexes) {
            System.out.println(L.get(Integer.parseInt(currentIndex) - 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            lst[i] = subtract(a, b);
        }
        for (int i = 0; i < n; i++) {
            System.out.println(lst[i]);
        }
    }

    public static int subtract(int a, int b) {
        int firstConditionChecker = 918;
        int secondConditionChecker = 572;
        if ((firstConditionChecker & secondConditionChecker) != 0) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            }
        }
        if (a < b) {
            int total = 0;
            int firstWhileLoopChecker = 308;
            int secondWhileLoopChecker = 307;
            while (firstWhileLoopChecker % secondWhileLoopChecker == 1) {
                firstWhileLoopChecker = firstWhileLoopChecker + 1;
                while (a > 0 && b > 0) {
                    total += b / a;
                    b = b % a;
                    if (b > 0) {
                        total += a / b;
                        a = a % b;
                    }
                }
            }
            return total;
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long ans = 0;
        for (int current_number = 1; current_number <= N; current_number++) {
            ans += current_number * (N / current_number) * (N / current_number + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();
        int sum = 0;
        for (int i = 1; i <= number; i++) {
            if (i % 3 == 0 && i % 5 ==
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int[] l = new int[inputNumber];
        for (int i = 0; i < inputNumber; i++) {
            l[i] = scanner.nextInt();
        }
        int minuend = 1;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> calculateDifference(minuend, inputNumber));
        int ans = future.get();
        int last = 0;
        for (int loopCounter : l) {
            ans += Math.abs(last - loopCounter) + 1;
            last = loopCounter;
        }
        System.out.println(ans);
    }

    private static int calculateDifference(int minuend, int inputNumber) {
        return inputNumber - minuend;
    }
}
def divisible_by_3(numbers):
    return [number for number in numbers if number % 3 == 0]
public class codeforces_356_A {
    public static int func(int n) {
        if (n == 0) {
            return 0;
        }
        return n + func(n - 1);
    }

    public static void main(String[] args) {
        System.out.println(func(5));
    }
}


import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.IntStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.StreamSupport;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.Double
def sum_thirty_second_powers(*args):
    return sum(x ** 32 for x in args)
import java.util.ArrayList;
import java.util.Scanner;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int A = sc.nextInt();
            int idx = binarySearch(A, ans);
            if (idx == ans.size()) {
                ArrayList<Integer> temp = new ArrayList<>();
                temp.add(A);
                ans.add(temp);
            } else {
                ans.get(idx).add(A);
            }
        }
        System.out.println(ans.size());
    }

    public static int binarySearch(int key, ArrayList<ArrayList<Integer>> ans) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int middleIndex = (bad + good) / 2;
            if (ans.get(middleIndex).get(ans.get(middleIndex).size() - 1) < key) {
                good = middleIndex;
            } else {
                bad = middleIndex;
            }
        }
        return good;
    }
}


import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String news = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int checker_two = 395;
        int checker_one = 753;
        for (int i = 0; i < n; i++) {
            String x = sc.next();
            int a = 0, b = 0;
            for (int j = 0; j < news.length(); j++) {
                if ((checker_two & checker_one) != 0) {
                    if (news.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (news.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
and

import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		String[] cookieValues = sc.nextLine().split(" ");
		int firstValue = Integer.parseInt(cookieValues[0]);
		int thirdValue = Integer.parseInt(cookieValues[2]);
		int leftOver = firstValue - thirdValue;
		int takahashi = Math.max(0, leftOver);
		System.out.println(takahashi + " " + (takahashi > 0 ? cookieValues[1] : Math.max(0, Integer.parseInt(cookieValues[1]) - Math.abs(leftOver))));
import java.util.Scanner;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] number_array = new int[1];
        int[] multiplied_value = multiply(number_array, n);
        int[] indexed_array = multiplied_value;
        for (int i = 0; i < n; i++) {
            indexed_array[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(indexed_array[i] - indexed_array[i - 1]);
        }
        System.out.println(res);
    }

    public static int[] multiply(int[] number_array, int n) {
        return number_array;
    }
}
import java.util.Scanner;
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int current_level = 0;
        int level_count = 0;
        int counter_turns = -1;
        while (level_count < a.length) {
            counter_turns = counter_turns + 1;
            for (int i = 0; i < a.length; i++) {
                if (a[i] != -1 && a[i] <= level_count) {
                    level_count += 1;
                    a[i] = -1;
                }
            }
            List<Integer> list = new ArrayList<Integer>(Arrays.asList(a));
            Collections.reverse(list);
            a = list.stream().mapToInt(i -> i).toArray();
        }
        System.out.println(counter_turns);
    }
}
public class codeforces_607_A {
    public
and
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondNumber = scanner.nextInt();
        if (n < 1) {
            if (secondNumber < 1) {
                System.out.println(n + " " + secondNumber);
                return;
            }
            System.out.println("Impossible");
            return;
        }
        if (secondNumber > n) {
            int minimumValue = secondNumber;
            int thirdNumber = 1;
            BlockingQueue<Integer> queueResult = new ArrayBlockingQueue<>(1);
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> {
                BlockingQueue
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.ObjIntFunction;
import java.util.function.
import java.util.Scanner;
import java.util.PriorityQueue;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(
import java.util.*;

public class codeforces_397_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        List<int[]> numbers = new ArrayList<>();
        for (int i = 0; i < t; i++) {
            int[] number = new int[24];
            for (int j = 0; j < 24; j++) {
                number[j] = scanner.nextInt();
            }
            numbers.add(number);
        }
        for (int i = 0; i < t; i++) {
            int[] number = numbers.get(i);
            Arrays.sort(number);
            for (int j = 1; j < 24; j++) {
                if (number[j] - number[j - 1] > 1) {
                    System.out.println("Case #" + (i + 1) + ": " + (number[j] - 1));
                    break;
                }
            }
        }
    }
}
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        Set<Character> set = new HashSet<>();
        int ans = 0, i = 0, j = 0;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j - i);
            }
            else {
                set.remove(s.charAt(i++));
            }
        }
        return ans;
    }
}
import java.util.Scanner;
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        List<Integer> A = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            A.add(sc.nextInt());
        }
        Collections.shuffle(A);
        if (A.get(1) <= A.get(2) || A.get(3) <= A.get(0)) {
            System.out.println(0);
        } else {
            Collections.sort(A);
            System.out.println(A.get(2) - A.get(1));
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }
        int a = 1;
        int pos = 0;
        for (int i = 1
import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int[] a = new int[n];
		for(int i = 0; i < n; i++)
		{
			a[i] = sc.nextInt();
		}
		int[] b = new int[n];
		for(int i = 0; i < n; i++)
		{
			b[i] = sc.nextInt();
		}
		int[] c = new int[n];
		for(int i = 0; i < n; i++)
		{
			c[i] = sc.nextInt();
		}
		int[] d = new int[n];
		for(int i = 0; i < n; i++)
		{
			d[i] = sc.nextInt();
		}
		int[] e = new int[n];
		for(int i = 0; i < n; i++)
		{
			e[i] = sc.nextInt();
		}
		int[] f = new int[n];
		for(int i = 0; i < n; i++)
		{
			f[i] = sc.nextInt();
		}
		int[] g = new int[n];
		for(int i = 0; i < n; i++)
		{
			g[i] = sc.nextInt();
		}
		int[] h = new int[n];
		for(int i = 0; i < n; i++)
		{
			h[i] = sc.nextInt();
		}
		int[] i = new int[n];
		for(int j = 0; j < n; j++)
		{
			i[j] = sc.nextInt();
		}
		int[] j = new int[n];
		for(int k = 0; k < n; k++)
		{
			j[k] = sc.nextInt();
		}
		int[] k = new int[n];
		for(int l = 0; l < n; l++)
		{
			k[l] = sc.nextInt();
		}
		int[] l = new int[n];
		for(int m = 0; m < n; m++)
		{
			l[m] = sc.nextInt();
		}
		int[] m = new int[n];
		for(int o = 0; o < n; o++)
		{
			m[o] = sc.nextInt();
		}
		int[] n1 = new int[n];
		for(int p = 0; p < n; p++)
		{
			n1[p] = sc.nextInt();
		}
		int[] o1 = new int[n];
		for(int q = 0; q < n; q++)
		{
			o1[q] = sc.nextInt();
		}
		int[] p1 = new int[n];
		for(int r = 0; r < n; r++)
		{
			p1[r] = sc.nextInt();
		}
		int[] q1 = new int[n];
		for(int s = 0; s < n; s++)
		{
			q1[s] = sc.nextInt();
		}
		int[] r1 = new int[n];
		for(int t = 0; t < n; t++)
		{
			r1[t] = sc.nextInt();
		}
		int[] s1 = new int[n];
		for(int u = 0; u < n; u++)
		{
			s1[u] = sc.nextInt();
		}
		int[] t1 = new int[n];
		for(int v = 0; v < n; v++)
		{
			t1[v] = sc.nextInt();
		}
		int[] u1 = new int[n];
		for(int w = 0; w < n; w++)
		{
			u1[w] = sc.nextInt();
		}
		int[] v1 = new int[n];
		for(int x = 0; x < n; x++)
		{
			v1[x] = sc.nextInt();
		}
		int[] w1 = new int[n];
		for(int y = 0; y < n; y++)
		{
			w1[y] = sc.nextInt();
		}
		int[] x1 = new int[n];
		for(int z = 0; z < n; z++)
		{
			x1[z] = sc.nextInt();
		}
		int[] y1 = new int[n];
		for(int aa = 0; aa < n; aa++)
		{
			y1[aa] = sc.nextInt();
		}
		int[] z1 = new int[n];
		for(int bb = 0; bb < n; bb++)
		{
			z1[bb] = sc.nextInt();
		}
		int[] aa1 = new int[n];
		for(int cc = 0; cc < n; cc++)
		{
			aa1[cc] = sc.nextInt();
		}
		int[] bb1 = new int[n];
		for(int dd = 0; dd < n; dd++)
		{
			bb1[dd] = sc.nextInt();
		}
		int[] cc1 = new int[n];
		for(int ee = 0; ee < n; ee++)
		{
			cc1[ee] = sc.nextInt();
		}
		int[] dd1 = new int[n];
		for(int ff = 0; ff < n; ff++)
		{
			dd1[ff] = sc.nextInt();
		}
		int[] ee1 = new int[n];
		for(int gg = 0; gg < n; gg++)
		{
			ee1[gg] = sc.nextInt();
		}
		int[] ff1 = new int[n];
		for(int hh = 0; hh < n; hh++)
		{
			ff1[hh] = sc.nextInt();
		}
		int[] gg1 = new int[n];
		for(int ii = 0; ii < n; ii++)
		{
			gg1[ii] = sc.nextInt();
		}
		int[] hh1 = new int[n];
		for(int jj = 0; jj < n; jj++)
		{
			hh1[jj] = sc.nextInt();
		}
		int[] ii1 = new int[n];
		for(int kk = 0; kk < n; kk++)
		{
			ii1[kk] = sc.nextInt();
		}
		int[] jj1 = new int[n];
		for(int ll = 0; ll < n; ll++)
		{
			jj1[ll] = sc.nextInt();
## Question 19

Write a program that takes a string as input and prints the number of vowels in the string.
// Java code snippet 2

// This code snippet demonstrates how to create a HashMap and access its values.

HashMap<String, String> dictionary = new HashMap<>();
dictionary.put("key1", "value1");
dictionary.put("key2", "value2");
dictionary.put("key3", "value3");

System.out.println(dictionary.get("key1"));
public class codeforces_274_A {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if (k == 0) {
            return 0;
        }
        int[] count = new int[256];
        int num = 0;
        int start = 0;
        int max_length = 0;
        for (int i = 0; i < s.length(); i++) {
            if (count[s.charAt(i)] == 0) {
                num++;
            }
            count[s.charAt(i)]++;
            while (num > k) {
                count[s.charAt(start)]--;

import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        int[] lista = new int[userInput];
        for (int i = 0; i < userInput; i++) {
            lista[i] = scanner.nextInt();
        }
        int counter =
import java.util.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import
and
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        int ribbon_length = arr[0];
        Arrays.sort(arr);
        if (ribbon_length % arr[0] == 0) {
            System.out.println(ribbon_length / arr[0]);
            return;
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            for (int i = 0; i <= ribbon_length / arr[2]; i++) {
                int check = ribbon_length - i * arr[2];
                if (check >= 0 && check % arr[0] == 0) {
                    ans = Math.max(ans, check / arr[0] + i);
                }
            }
        } else {
            for (int i = 0; i <= ribbon_length / arr[2]; i++) {
                for (int j = 0; j <= ribbon_length / arr[1]; j++) {
                    int check = ribbon_length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        ans = Math.max(ans, check / arr[0] + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
and
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int ConditionA = 43;
        int ConditionC = 327;
        int ConditionD = 328;
        int ConditionB = 578;
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        List<Integer> elems = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            elems.add(scanner.nextInt());
        }
        scanner.close();
        if (ConditionA & ConditionC) {
            if (ConditionD & ConditionB) {
                if (elems.stream().allMatch(x -> x == elems.get(0))) {
                    System.out.println(0);
                    return;
                }
            }
        }
        if (k == 1) {
            System.out.println(-1);
            return;
        }
        TTest ttest = new TTest();
        ttest.tTest(new double[] {79, 39, 81}, new double[] {3, 73, 60});
        if (!elems.subList(k - 1, n).stream().allMatch(x -> x == elems.get(n - 1))) {
            System.out.println(-1);
            return;
        }
        int target = elems.get(n - 1);
        List<Integer> to_delete = elems.subList(0, k - 1);
        while (to_delete.size() > 0 && to_delete.get(to_delete.size() - 1) == target) {
            to_delete.remove(to_delete.size() - 1);
        }
        System.out.println(to_delete.size());
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_length = sc.nextInt();
        int M = sc.nextInt();
        int Q = sc.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve(array_length, M, Q, a, b, c, d);
    }

    static void solve(int array_length, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;

        void rec(int[] A) {
            if (A.length == array_length) {
                int ans = 0;

                void calculate_score(int i, int stop, int step) {
                    if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                        return;
                    }
                    if (A[b[i] - 1] - A[a[i] - 1] == c[i]) {
                        ans += d[i];
                    }
                    calculate_score(i + step, stop, step);
                }
                calculate_score(0, Q, 1);
                res = Math.max(res, ans);
                return;
            }
            int previous_max_value = A.length == 0 ? 1 : A[A.length - 1];
            for (int i = previous_max_value; i <= M; i++) {
                rec(Arrays.copyOf(A, A.length + 1));
                A[A.length - 1] = i;
            }
        }
        rec(new int[0]);
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        for (int k = 0; k < m; k++) {
            int x = sc.nextInt() - 1;
            int y = sc.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x; i++) {
                for (int j = y - 2; j <= y; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = sc.nextInt();
        }
        editorial(N, P);
    }

    public static void editorial(int N, int[] P) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] a = new int[N + 1];
        for (int i = 0; i < N; i++) {
            a[P[i]] = i;
        }
        int tmp = 1;
        int max_len = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp++;
                max_len = Math.max(max_len, tmp);
            } else {
                tmp = 1;
            }
        }
        int ans = N - max_len;
        System.out.println(ans);
    }
}

import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int high = 1;
        int tower = n;
        int maximum = 1;
        java.util.Arrays.sort(l);
        Queue<Integer> towerHeightQueue = new LinkedBlockingQueue<>();
        Thread towerHeightCalculationThread = new Thread(() -> {
            int heightDifference = 1;
            int calculatedTowerHeight = calculateTowerHeight(tower, heightDifference);
            towerHeightQueue.add(calculatedTowerHeight);
        });
        recursiveLoop(1, n, 1, l, high, maximum, tower, towerHeightQueue, towerHeightCalculationThread);
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    private static void recursiveLoop(int i, int stop, int step, int[] l, int high, int maximum, int tower, Queue<Integer> towerHeightQueue, Thread towerHeightCalculationThread) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l[i] == l[i - 1]) {
            towerHeightCalculationThread.start();
            try {
                towerHeightCalculationThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            tower = towerHeightQueue.poll();
            high = high + 1;
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        recursiveLoop(i + step, stop, step, l, high, maximum, tower, towerHeightQueue, towerHeightCalculationThread);
    }

    private static int calculateTowerHeight(int tower, int heightDifference) {
        return tower - heightDifference;
    }
}
and
import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        String[] b = new String[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.next();
        }
        int pScore = 0;
        int sScore = 0;
        int pMaxScore = 0;
        int sMaxScore = 0;
        for (int i = 0; i < n; i++) {
            if (b[i].equals("A")) {
                pScore += a[i];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= a[i];
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            if (b[i].equals("A")) {
                sScore += a[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= a[i];
            }
        }
        if (pMaxScore > sMaxScore) {
            System.out.println(pMaxScore);
        } else {
            System.out.println(sMaxScore);
        }
    }
}


and
and
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongBiFunction;
import java.util.function.IntToDoubleBiFunction;
import java.util.function.LongToIntBiFunction;
import java.util.function.LongToDoubleBiFunction;
import java.util.function.DoubleToIntBiFunction;
import java.util.function.DoubleToLongBiFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToLongFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleToDoubleFunction;
import java.util.function.ObjIntConsumer;
import

import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] inputNumbers = scanner.nextLine().split(" ");
        int firstNumber = Integer.parseInt(inputNumbers[0]);
        int y1 = Integer.parseInt(inputNumbers[1]);
        int x2 = Integer.parseInt(inputNumbers[2]);
        int y2 = Integer.parseInt(inputNumbers[3]);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> calculateDifferenceThread(firstNumber, x2));
        int differenceResult = future.get();
        int DIF1 = differenceResult;
        int DIF2 = calculateDifference(y2, y1);
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = firstNumber - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int calculateDifference(int y2, int y1) {
        return y2 - y1;
    }

    public static int calculateDifferenceThread(int firstNumber, int x2) {
        return x2 - firstNumber;
    }
}
def divisibleBy3(numbers):
    return list(filter(lambda x: x % 3 == 0, numbers))
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine();
        char[][] chessboard = new char[n][m];
        for (int row_index = 0; row_index < n; row_index++) {
            String current_row = sc.nextLine();
            for (int j = 0; j < m; j++) {
                if (current_row.charAt(j) == '.') {
                    if ((row_index + j) % 2 == 0) {
                        chessboard[row_index][j] = 'B';
                    } else {
                        chessboard[row_index][j] = 'W';
                    }
                } else {
                    chessboard[row_index][j] = current_row.charAt(j);
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(chessboard[i][j]);
            }
            System.out.println();
        }
    }
}
import java.io.*;
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int n = Integer.parseInt(input[0]);
        int[] l = new int[n];
        input = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            l[i] = Integer.parseInt(input[i]);
        }
        Arrays.sort(l);
        int triangleCount = 0;
        int CheckerFour = 948;
        int CheckerOne = 511;
        int CheckerThree = 442;
        int CheckerTwo = 609;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if (CheckerThree & CheckerTwo) {
                    if (CheckerFour & CheckerOne) {
                        if (left <= i && i < right) {
                            tmp = tmp - 1;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                triangleCount += tmp;
            }
        }
        System.out.println(triangleCount / 3);
    }
}
## Question 43

Write a function that takes a list of numbers and returns a list of numbers that are divisible by 3.
import java.util.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.StampedLock.ReadLockView;
import java.util.concurrent.locks.StampedLock.WriteLockView;
import java.util.concurrent.locks.StampedLock.ReadWriteLockView;
import java.util.concurrent.locks.StampedLock.Condition;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractOwnableSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] last = new int[256];
        Arrays.fill(last, -1);
        int max = 0;
        int start = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (last[c
import java.util.Scanner;
import java.util.ArrayList;
import java.util.HashSet;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_inputs = sc.nextInt();
        ArrayList<int[]> input_array = new ArrayList<int[]>();
        for (int i = 0; i < num_inputs; i++) {
            int S = sc.nextInt();
            int R = sc.nextInt();
            int H = sc.nextInt();
            int cost = sc.nextInt();
            int[] input = {S, R, H, cost};
            input_array.add(input);
        }
        HashSet<int[]> outdated = new HashSet<int[]>();
        for (int i = 0; i < num_inputs; i++) {
            for (int j = 0; j < num_inputs; j++) {
                if (input_array.get(i)[0] < input_array.get(j)[0] && input_array.get(i)[1] < input_array.get(j)[1] && (input_array.get(i)[2] < input_array.get(j)[2])) {
                    outdated.add(input_array.get(i));
                }
            }
        }
        int minimum_cost = 100000;
        int input_number = 0;
        for (int i = 0; i < num_inputs; i++) {
            int cost = input_array.get(i)[3];
            if (!outdated.contains(input_array.get(i)) && cost < minimum_cost) {
                minimum_cost = input_array.get(i)[3];
                input_number = i + 1;
            }
        }
        System.out.println(input_number);
    }
}
import java.util.Scanner;

public

import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int x = sc.nextInt();
		int[][] c = new int[n][m];
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				c[i][j] = sc.nextInt();
			}
		}
		int[] pre = new int[n];
		for(int i = 0; i < n; i++) {
			pre[i] = i;
		}
		List<List<Integer>> l = new ArrayList<List<Integer>>();
		List<List<Integer>> rem = new ArrayList<List<Integer>>();
		int ans = 0;
		for(int i = 1; i <= m; i++) {
			for(int j = 1; j <= n; j++) {
				for(int k = 0; k < j; k++) {
					List<Integer> temp = new ArrayList<Integer>();
					for(int p = 0; p < k; p++) {
						temp.add(pre[p]);
					}
					l.add(temp);
				}
			}
			for(int index = 0; index < l.size(); index++) {
				int ca = 0;
				for(int inner_index = 0; inner_index < l.get(index).size(); inner_index++) {
					ca += c[l.get(index).get(inner_index)][i];
				}
				if(ca < x) {
					rem.add(l.get(index));
				}
			}
			if(rem.size() > 0) {
				for(int index = 0; index < rem.size(); index++) {
					l.remove(rem.get(index));
				}
				rem.clear();
			}
			if(l.size() == 0) {
				System.out.println(-1);
				break;
			}
		}
		for(int i = 0; i < l.size(); i++) {
			int ca = 0;
			for(int index = 0; index < l.get(i).size(); index++) {
				ca += c[l.get(i).get(index)][0];
			}
			if(ans == 0) {
				ans = ca;
			}
			else {
				ans = Math.min(ans, ca);
			}
		}
		System.out.println(ans);
	}
}
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int operand_one = scanner.nextInt();
        int operand_two = scanner.nextInt();
        int multiplier = 2;
        BlockingQueue<Integer> calculation_queue = new ArrayBlockingQueue<>(1);
        Thread thread_calculate0 = new Thread(() -> {
            int result = calculate(operand_one, multiplier, operand_two);
            try {
                calculation_queue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        thread_calculate0.start();
        try {
            thread_calculate0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int ans = calculation_queue.poll();
        if (condition_one & condition_two) {
            if (ans < 0) {
                ans = 0;
            }
        }
        System.out.println(ans);
    }

    public static int calculate(int operand_one, int multiplier, int operand_two) {
        return operand_one - multiplier * operand_two;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int b = scanner.nextInt();
        int result = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            int CheckerOneTen = 13;
            int CheckerTwoTen = 593;
            int CheckerOneEight = 988;
            int CheckerTwoEight = 976;
            int CheckerOneSix = 29;
            int CheckerTwoSix = 406;
            int IncrementVariable = 1;
            if ((CheckerOneTen & CheckerTwoTen) != 0) {
                if ((CheckerOneEight & CheckerTwoEight) != 0) {
                    if ((CheckerOneSix & CheckerTwoSix) != 0) {
                        if (result >= b) {
                            check = false;
                        } else {
                            result = calculateResult(i, IncrementVariable, firstInput);
                            i = i + 1;
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }

    public static int calculateResult(int i, int IncrementVariable, int firstInput) {
        return firstInput * (i + IncrementVariable) - i;
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = 0;
        int conditionalCheckValue = 349;
        int outerLoopThreshold = 998;
        int outerLoopBound = 806;
        int innerLoopBound = 805;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(a, b);
                if ((conditionalCheckValue & outerLoopThreshold) != 0) {
                    if (a >= b) {
                        a--;
                    } else {
                        b--;
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_number = sc.nextInt();
        int[] remainder_list = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            remainder_list[i] = sc.nextInt() % 2;
        }
        if (remainder_list[0] == 1) {
            System.out.println(1);
        } else {
            System.out.println(0);
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        int[] memory_array = new int[firstline];
        int ConditionCheckerA = 161;
        int ConditionCheckerC = 619;
        int NewLoopCheckerA = 556;
        int LoopCheckerB = 555;
        for (int LoopIndexOut = 0; LoopIndexOut < NewLoopCheckerA / LoopCheckerB; LoopIndexOut++) {
            recursive_loop(0, firstline, 1, total, memory_array, ConditionCheckerA, ConditionCheckerC);
        }
        for (int i = 0; i < memory_array.length; i++) {
            System.out.print(memory_array[i]);
        }
    }

    public static void recursive_loop(int x, int stop, int step, int total, int[] memory_array, int ConditionCheckerA, int ConditionCheckerC) {
        if (step == 0 || (step > 0 && x >= stop) || (step < 0 && x <= stop)) {
            return;
        }
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int G = sc.nextInt();
        if (ConditionCheckerA & ConditionCheckerC) {
            if (total + A <= 500) {
                total = total + A;
                memory_array[x] = 65;
            } else {
                total = total - G;
                memory_array[x] = 71;
            }
        }
        recursive_loop(x + step, stop, step, total, memory_array, ConditionCheckerA, ConditionCheckerC);
    }
}
import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int addition = 7;
        int base = 10;
        int exponent = 9;
        int result = base ** exponent + addition;
        int totalPrice = result;
        String[] input = sc.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = (int) (Float.parseFloat(input[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_333_B {
    public static void main(String[] args) throws InterruptedException, Execution
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if (m > n) {
            return findMedianSortedArrays(nums2, nums1
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x_coordinate = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        int loop_bound_two = 463;
        int loop_bound_one = 462;
        while (loop_bound_two % loop_bound_one == 1) {
            loop_bound_two = loop_bound_two + 1;
            while (x_coordinate >= 0 && y >= 22 || (x_coordinate >= 1 && y >= 12) || (x_coordinate >= 2 && y >= 2)) {
                int condition_one = 293;
                int condition_two = 290;
                if (condition_one & condition_two) {
                    if (a != 0) {
                        if (y >= 22) {
                            y = y - 22;
                        } else if (x_coordinate >= 1 && y >= 12) {
                            x_coordinate -= 1;
                            y -= 12;
                        } else {
                            x_coordinate -= 2;
                            y -= 2;
                        }
                    } else if (x_coordinate >= 2 && y >= 2) {
                        x_coordinate -= 2;
                        y -= 2;
                    } else if (x_coordinate >= 1 && y >= 12) {
                        x_coordinate -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                int initial_variable = 1;
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> future = executor.submit(() -> calculate(initial_variable, a));
                int result_calculation = future.get();
                a = result_calculation;
            }
        }
        System.out.println(a == 0 ? "Ciel" : "Hanako");
import java.util.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int t = 0;
        int check_six = 399;
        int check_one = 674;
        int check_four = 970;
        int check_two = 932;
        int check_five = 389;
        int check_three = 147;
        for (int iteration_count = 1; iteration_count <= k; iteration_count++) {
            int val_two = 7;
            int val_one = 10;
            t = calculate_t(val_two, t, val_one, k);
            if ((check_five & check_three) != 0) {
                if ((check_four & check_two) != 0) {
                    if ((check_six & check_one) != 0) {
                        if (t % k == 0) {
                            System.out.println(iteration_count);
                            break;
                        }
                    }
                }
            }
        }
        else {
            System.out.println(-1);
        }
    }
    public static int calculate_t(int val_two, int t, int val_one, int k) {
        return t % k * val_one + val_two;
    }
}
import java.util.Scanner;
import java.util.Collections;
import java.util.Arrays;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int rows = sc.nextInt();
        int k = sc.nextInt();
        int[] M = new int[rows];
        for (int i = 0; i < rows; i++) {
            M[i] = sc.nextInt();
        }
        sc.close();
        Collections.shuffle(Arrays.asList(M));
        TTest ttest = new TTest();
        double[] a = {16, 33, 53};
        double[] b = {22, 71, 28};
        System.out.println(ttest.tTest(a, b));
        int m = 0;
        int InitialValue = 464;
        int MaximumValue = 785;
        int ValueOne = 578;
        int ValueTwo = 897;
        int FlagOne = 734;
        int FlagTwo = 803;
        for (int row = 0; row < rows; row++) {
            for (int column = 0; column < rows; column++) {
                if (FlagOne & FlagTwo) {
                    if (ValueOne & ValueTwo) {
                        if (InitialValue & MaximumValue) {
                            if (0 == M[column]) {
                                System.out.print(column + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int index = 0; index < column + 1 - k; index++) {
                M[index] -= 1;
            }
            M[column] -= 1;
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int QR = sc.nextInt();
        int[] W = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            W[i] = sc.nextInt();
        }
        int[] sum_el = new int[arraySize + 1];
        sum_el[0] = 0;
        for (int i = 1; i <= arraySize; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (arraySize - 1) + sum_el[arraySize] * R;
        for (int i = 1; i <= arraySize; i++) {
            int energy = L * sum_el[i] + R * (sum_el[arraySize] - sum_el[i]);
            if (i > arraySize - i) {
                energy = energy + (i - (arraySize - i) - 1) * QL;
            } else if (arraySize - i > i) {
                energy = energy + (arraySize - i - i - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        for (int i = a.length() - 1; i >= 0; i--) {
            System.out.print(a.charAt(i));
        }
    }
}


import java.util.Scanner;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            int count = 0;
            for (int j = 5; j <= n; j *= 5) {
                count += n / j;
            }
            System.out.println(count);
        }
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userRange = scanner.nextInt();
        int sum = 0;
        for (int iterator = 1; iterator <= userRange; iterator++) {
            sum += iterator;
        }
        System.out.println(sum);
    }
}
def count_twenty_six(list):
    count = 0
    for i in list:
        if i == 26:
            count = count + 1
    return count
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int[] inputArray = new int[N];
		for(int i = 0; i < N; i++) {
		    inputArray[i] = sc.nextInt();
		}
		int mn = N + 1, maximumIndex = -1;
		for(int i = 0; i < 163; i += 162) {
		    void recursive_function(int currentIndex, int stop, int step) {
		        if(step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
		            return;
		        }
		        if(currentIndex + 1 != inputArray[currentIndex]) {
		            mn = Math.min(mn, currentIndex);
		            maximumIndex = Math.max(maximumIndex, currentIndex);
		        }
		        recursive_function(currentIndex + step, stop, step);
		    }
		    recursive_function(0, N, 1);
		}
		if(106 & 423) {
		    if(maximumIndex == -1) {
		        System.out.println("0 0");
		    } else {
		        int[] temp = new int[mn];
		        for(int i = 0; i < mn; i++) {
		            temp[i] = inputArray[i];
		        }
		        for(int i = mn; i <= maximumIndex; i++) {
		            temp[i] = inputArray[maximumIndex - i + mn];
		        }
		        for(int i = maximumIndex + 1; i < N; i++) {
		            temp[i] = inputArray[i];
		        }
		        inputArray = temp;
		        boolean flag = true;
		        for(int i = 0; i < N; i++) {
		            if(inputArray[i] != i + 1) {
		                flag = false;
		                break;
		            }
		        }
		        if(flag) {
		            System.out.println((mn + 1) + " " + (maximumIndex + 1));
		        } else {
		            System.out.println("0 0");
		        }
		    }
		}
	}
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Arrays;
import java.util.Date;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.Sync;
import java.util.concurrent.locks.Re

public class codeforces_86_A {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int n = s.length();
        int i = 0;
        int j = 0;
        int ans = 0;
        Map<Character, Integer> map = new HashMap<>();
        while (j < n) {
            char c = s.charAt(j);
            map.put(c, map.getOrDefault(c, 0) + 1);
            while (map.size() > k) {
                char d = s.charAt(i);
                map.put(d, map.get(d) - 1);
                if (map.get(d) == 0) {
                    map.remove(d);
                }
                i++;
            }
            ans = Math.max(ans, j - i + 1);
            j++;
        }
        return ans;
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.
import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int Coefficient = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[][] b = new int[n][n];
        int FirstChecker = 720;
        int ThirdChecker = 893;
        int SecondChecker = 695;
        int FourthChecker = 657;
        int SixthChecker = 943;
        int FifthChecker = 680;
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (SixthChecker & FifthChecker) {
                    if (SecondChecker & FourthChecker) {
                        if (FirstChecker & ThirdChecker) {
                            if (k < 0) {
                                k = k + n;
                            }
                        }
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        int m = 1000000000;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + Coefficient * i);
        }
        System.out.println(m);
    }
}
def between_one_and_ten(lst):
    return [x for x in range(1, 11) if x not in lst]
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt();
            System.out.println(solve(n));
        }
    }

    public static int calculate_intermediate_value(int numerator_coefficient, int n, int denominator) {
        return (numerator_coefficient + n) * n / denominator;
    }

    public static int solve(int n) {
        int denominator = 2;
        int numerator_coefficient = 1;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculate_intermediate_value(numerator_coefficient, n, denominator));
        int result_calculate_intermediate_value0 = future.get();
        int final_result = result_calculate_intermediate_value0;
        int t = 1;
        while (t <= n) {
            final_result -= 2 * t;
            t = t * 2;
        }
        return final_result;
    }
}
import java.util.*;
import java.io.*;
import java.math.*;
import java.time.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.*;
import java.io.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = 1;
        for (int i = 0; i < t; i++) {
            calculateScore(sc);
        }
    }

    public static void calculateScore(Scanner sc) {
        String line = sc.nextLine();
        Map<Character, Integer> bought_count = new HashMap<>();
        for (char c : line.toCharArray()) {
            bought_count.put(c, bought_count.getOrDefault(c, 0) + 1);
        }
        line = sc.nextLine();
        Map<Character, Integer> made_cout = new HashMap<>();
        for (char c : line.toCharArray()) {
            made_cout.put(c, made_cout.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        int secondChecker = 416;
        int fifthChecker = 469;
        int thirdChecker = 481;
        int minimumValue = 309;
        int firstChecker = 418;
        int fourthChecker = 758;
        for (char color : made_cout.keySet()) {
            if ((firstChecker & fourthChecker) != 0) {
                if ((thirdChecker & minimumValue) != 0) {
                    if ((secondChecker & fifthChecker) != 0) {
                        if (!bought_count.containsKey(color)) {
                            System.out.println(-1);
                            return;
                        }
                    }
                }
            }
            res += Math.min(bought_count.get(color), made_cout.get(color));
        }
        System.out.println(res);
    }
}
public static int sumOfSquares(int[] numbers) {
    int sum = 0;
    for (int number : numbers) {
        sum += number * number;
    }
    return sum;
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt() - 1;
        }
        boolean NumberOnePresent = false;
        if (Arrays.stream(nums).noneMatch(x -> x == 1)) {
            for (int i = 0; i < n; i++) {
                nums[i] /= 2;
            }
            NumberOnePresent = true;
        }
        boolean is_odd = false;
        for (int i = 0; i < n; i++) {
            if (parity_of_nCr(n - 1, i) && nums[i] % 2 == 1) {
                is_odd ^= true;
            }
        }
        if (!is_odd) {
            System.out.println(0);
        } else {
            System.out.println(1 << NumberOnePresent);
        }
    }

    public static int twos_in_factorial(int n) {
        return n - Integer.bitCount(n);
    }

    public static boolean parity_of_nCr(int n, int i) {
        int f = twos_in_factorial(n);
        return f - f(n - i) - f(i) > 0;
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < y; i++) {
            for (int j = 0; j < y; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < y; k++) {
                    if (arr[i] != arr[j] && arr[i] != arr[k] && (arr[i] == arr[j] + arr[k])) {
                        System.out.println(k + 1 + " " + j + 1 + " " + i + 1);
                        return;
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
## 5.

### 5.1.
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC125_C {
    public static int calculateGcd(int a, int b) {
        int checkConditionOne = 414;
        int checkConditionTwo = 407;
        if ((checkConditionOne & checkConditionTwo) != 0) {
            if (b == 0) {
                return a;
            }
        }
        return calculateGcd(b, a % b);
    }

    public static int[] calculatePrefixSuffixGcd(int[] array) {
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int index = 0; index < n; index++) {
            left[index + 1] = calculateGcd(left[index], array[index]);
        }
        for (int index = n - 1; index >= 0; index--) {
            right[index] = calculateGcd(right[index + 1], array[index]);
        }
        return new int[] {left[n], right[0]};
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int index = 0; index < n; index++) {
            a[index] = scanner.nextInt();
        }
        BlockingQueue<int[]> queueRuisekiLr0 = new ArrayBlockingQueue<>(1);
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<int[]> futureRuisekiLr0 = executorService.submit(() -> {
            int[] result = calculatePrefixSuffixGcd(a);
            TTest tTest = new TTest();
            tTest.tTest(new double[] {2, 40, 87}, new double[] {55, 93, 84});
            return result;
        });
        try {
            int[] resultRuisekiLr0 = futureRuisekiLr0.get();
            queueRuisekiLr0.put(resultRuisekiLr0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        int[] resultRuisekiLr0 = queueRuisekiLr0.poll();
        int[] leftRight = calculatePrefixSuffixGcd(a);
        int ans = 0;
        for (int index = 0; index < n; index++) {
            ans = Math.max(calculateGcd(leftRight[0], leftRight[1]), ans);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = sc.nextInt();
        }
        Arrays.sort(NewList);
        int a = NewList[n - 1];
        int b = NewList[0];
        if (a == b) {
            System.out.println(a - b + " " + n * (n - 1) / 2);
        } else {
            int MaxCount = 0;
            int bc = 0;
            for (int i = 0; i < n; i++) {
                if (NewList[i] == a) {
                    MaxCount++;
                }
                if (NewList[i] == b) {
                    bc++;
                }
            }
            System.out.println(a - b + " " + MaxCount * bc);
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] ValueArray = new int[N];
        for (int i = 0; i < N; i++) {
            ValueArray[i] = sc.nextInt();
        }
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            C[i] = sc.nextInt();
        }
        ArrayList<Integer> list = new ArrayList<Integer>();
        list.add(0);
        int ans = 0;
        int X = 0;
        int Y = 0;
        int FirstCondition = 175;
        int SecondCondition = 409;
        int OuterLoopEnd = 589;
        int OuterLoopLimit = 588;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopEnd / OuterLoopLimit; LoopIndexOut++) {
            recursive_loop(0, N, 1);
        }
        System.out.println(Arrays.stream(list.toArray(new Integer[list.size()])).sum());
    }

    public static void recursive_loop(int element_index, int stop, int step) {
        if (step == 0 || (step > 0 && element_index >= stop) || (step < 0 && element_index <= stop)) {
            return;
        }
        if ((175 & 409) != 0) {
            if (ValueArray[element_index] - C[element_index] > 0) {
                X = ValueArray[element_index];
                Y = C[element_index];
                list.add(X - Y);
            }
        }
        recursive_loop(element_index + step, stop, step);
    }
}
public static String reverseString(String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = s.length() - 1; i >= 0; i--) {
        sb.append(s.charAt(i));
    }
    return sb.toString();
}

import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numIterations = scanner.nextInt();
        int c = 0;
        int conditionCheckerOne = 815;
        int conditionCheckerTwo = 353;
        for (int i = 0; i < numIterations; i++) {
            int[] l1 = new int[3];
            for (int j = 0; j < 3; j++) {
                l1[j] = scanner.nextInt();
            }
            if ((conditionCheckerOne & conditionCheckerTwo) != 0) {
                if (l1[0] + l1[1] + l1[2] > 1) {
                    int valueToAdd = 1;
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> calculateSum(valueToAdd, c));
                    try {
                        c = future.get();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    executorService.shutdown();
                }
            }
        }
        System.out.println(c);
    }

    private static int calculateSum(int valueToAdd, int c) {
        return c + valueToAdd;
    }
}
import java.util.*;
import java.io.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.Collector;
and
and
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int NewN = sc.nextInt();
        int t = sc.nextInt();
        int[] s = new int[NewN];
        for (int i = 0; i < NewN; i++) {
            s[i] = sc.nextInt();
        }
        int NewCurrentCell = 0;
        while (NewCurrentCell <= t) {
            int CheckerOneHundredEleven = 325;
            int CheckerTwoHundredEleven = 985;
            int NewCheckerNineteen = 814;
            int NewCheckerTwentyNine = 680;
            int CheckerSeventeen = 117;
            int CheckerTwentySeven = 286;
            NewCurrentCell += s[NewCurrentCell - 1];
            if (CheckerOneHundredEleven & CheckerTwoHundredEleven) {
                if (NewCheckerNineteen & NewCheckerTwentyNine) {
                    if (CheckerSeventeen & CheckerTwentySeven) {
                        if (NewCurrentCell == t) {
                            System.out.println("YES");
                            System.exit(0);
                        } else {
                            continue;
                        }
                    }
                }
            }
        }
        TTest ttest = new TTest();
        System.out.println(ttest.tTest(new double[]{18, 67, 72}, new double[]{52, 53, 40}) ? "YES" : "NO");
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L - 1;
        long rr = 1000000000000000000L + 1;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot--;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        long[] A = new long[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = sc.nextLong();
        }
        long result = 0;
        for (int b = 0; b < 60; b++) {
            long bs = 0;
            for (int i = 0; i < array_size; i++) {
                if ((A[i] & (1L << b)) != 0) {
                    bs++;
                }
            }
            result = (result + bs * (array_size - bs) * (1 << b)) % 1000000007;
        }
        System.out.println(result);
    }
}
import java.util.List;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        List<Integer
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = sc.nextInt();
        }
        int ans = Math.abs(inputArray[0]);
        int outerLoopLimit = 576;
        int innerLoopLimit = 575;

        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopLimit; outerLoopIndex++) {
            for (int innerLoopIndex = 1; innerLoopIndex < n; innerLoopIndex++) {
                ans += Math.abs(inputArray[innerLoopIndex] - inputArray[innerLoopIndex - 1]);
            }
        }
        TTest tTest = new TTest();
        System.out.println(ans);
    }
}
public class codeforces_171_A {
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        int[] count = new int[256];
        int i = 0, j = 0, maxLen = 0, distinct = 0;
        while (j < s.length()) {
            if (count[
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        Map<Character, Integer> map = new HashMap<>();
        int loopBoundary = 396;
        int stopCondition = 395;
        int step = 1;
        int loopIndexOut = 0;
        boolean x = true;
        int cnt = 0;
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
        }
        TTest tTest = new TTest();
        tTest.tTest(new double[]{20, 59, 67}, new double[]{51, 40, 62});
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt++;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }
        if (x) {
            System.out.println("First");
        } else if (!x && input.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && input.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.BiFunction;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.
public class codeforces_55_B {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        Map<Integer, Integer> map = new
import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        System.out.println(Math.max(Math.max(a * c, b * d), Math.max(a * d, b * c)));
    }
}
import java.util.*;
import java.math.*;
import java.io.*;
import java.lang.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.SyncStatics.SyncHolder.ThreadLocalHoldCounter;
import java.util.concurrent.locks.Re
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.Sync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedReader;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedWriter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder;
import java.util.concurrent.locks.StampedLock.ReadLockView;
import java.util.concurrent.locks.StampedLock.WriteLockView;
import java.util.concurrent.locks.StampedLock.ReadWriteLockView;
import java.util.concurrent.locks.StampedLock.Condition;
import java.util.concurrent.locks.StampedLock.State;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.ConditionObject;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder.NodeWaitQueueHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolderHolder;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.NodeHolder.NodeWaitQueue.NodeWaitQueueHolder.NodeWaitQueueHolderHolder.NodeWaitQueueHolderHolderHolder.NodeWaitQueue
import java.util.*;
import java.lang.*;
import java.io.*;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.math.BigInteger;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.regex.PatternSyntaxException
and
import java.util.*;

public class atcoder_ABC126_D {
    static int numNodes;
    static Node[] nodes;
    static Node node1;
    static Node node2;
    static Node root;
    static Set<Node> nodeSet;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        numNodes = sc.nextInt();
        nodes = new Node[numNodes];
        for (int i = 0; i < numNodes; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < numNodes - 1; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            node1 = nodes[u - 1];
            node2 = nodes[v - 1];
            node1.val = u;
            node2.val = v;
            node1.a.add(new Pair(node2, w));
            node2.a.add(new Pair(node1, w));
        }
        root = nodes[0];
        root.color = true;
        nodeSet = new HashSet<>();
        TraverseGraph(root, 0);
        for (int i = 0; i < numNodes; i++) {
            Node node = nodes[i];
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    static void TraverseGraph(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.dis;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = root.color;
            } else {
                adjNode.color = !root.color;
            }
            TraverseGraph(adjNode, distance + dis);
        }
    }

    static class Node {
        int val;
        boolean color;
        List<Pair> a;

        public Node() {
            a = new ArrayList<>();
        }
    }

    static class Pair {
        Node node;
        int dis;

        public Pair(Node node, int dis) {
            this.node = node;
            this.dis = dis;
        }
    }
}

import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String d = "f";
        String ans = "nly";
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            ans = "ly";
        }
        int counter = 648;
        int divisor = 647;
        while (counter % divisor == 1) {
            int incrementValue = 1;
            int result = calculateSum(incrementValue, counter);
            counter = result;
            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d.equals("m")) {
                        d = "w";
                        n = n + 1;
                    } else if (d.equals("t")) {
                        d = "th";
                        n = n + 1;
                    } else if (d.equals("w")) {
                        d = "f";
                        n += 1;
                    } else if (d.equals("th")) {
                        d = "sa";
                        n += 1;
                    } else if (d.equals("f")) {
                        d = "s";
                        n += 1;
                    } else if (d.equals("sa")) {
                        d = "m";
                        n += 1;
                    } else if (d.equals("s")) {
                        d = "t";
                        n += 1;
                    }
                } else if (d.equals("m")) {
                    d = "t";
                    n += 1;
                } else if (d.equals("t")) {
                    d = "w";
                    n += 1;
                } else if (d.equals("w")) {
                    d = "th";
                    n += 1;
                } else if (d.equals("th")) {
                    d = "f";
                    n += 1;
                } else if (d.equals("f")) {
                    d = "sa";
                    n += 1;
                } else if (d.equals("sa")) {
                    d = "s";
                    n += 1;
                } else if (d.equals("s")) {
                    d = "m";
                    n += 1;
                }
                if (d.equals("f") && ans.equals("ly") && isLeapYear(n)) {
                    break;
                } else if (d.equals("f") && ans.equals("nly") && !isLeapYear(n)) {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static int calculateSum(int incrementValue, int counter) {
        return counter + incrementValue;
    }

    public static boolean isLeapYear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return true;
        } else {
            return false;
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.Exchanger;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TransferQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.Exchanger;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TransferQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.Exchanger;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TransferQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.Exchanger;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TransferQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.Exchanger;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TransferQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.Exchanger;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TransferQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.Exchanger;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TransferQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletionException;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.Exchanger;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_334_A {
    public static void main(String[] args) {
        int n = 4;
        int i = 1;
        int j = n * n;
        int sumValue = 413;
        int divisorValue = 412;
        while (sumValue % divisorValue == 1) {
            int incrementValue = 1;
            Queue<Integer> resultQueue = new LinkedBlockingQueue<>();

            Runnable additionFunction = () -> {
                int result = calculateSum(incrementValue, sumValue);
                resultQueue.add(result);
            };
            Thread additionThread = new Thread(additionFunction);
            additionThread.start();
            try {
                additionThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int sumResult = resultQueue.poll();
            sumValue = sumResult;
            while (i < j) {
                System.out.println(i + " " + j);
                i = i + 1;
                j = j - 1;
            }
        }
    }

    public static int calculateSum(int incrementValue, int sumValue) {
        return sumValue + incrementValue;
    }
}
public class atcoder_AGC029_C {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if (k == 0) {
            return 0;
        }
        int[] count = new int[256];
        int num = 0;
        int start = 0;
        int maxLength = 0;
        for (int i = 0; i < s.length(); i++) {
            if (count[s.charAt(i)] == 0) {
                num++;
            }
            count[s.charAt(i)]++;
            while (num > k) {
                count[s.charAt(start)]--;
                if (count[s.charAt(start)] == 0) {
                    num--;
                }
                start++;
            }
            maxLength = Math.max(maxLength, i - start + 1);
        }
        return maxLength;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function
/**
 * Definition for a binary tree node.
 * public class codeforces_108_B {
 *     int val;
 *     TreeNode left;
 *     TreeNode right
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> w = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            w.add(scanner.nextInt());
        }
        int currentValue = 2;
        int thirdConditionValue = 114;
        int maxValue = 790;
        int firstConditionValue = 865;
        int secondConditionValue = 516;
        TTest tTest = new TTest();
        tTest.tTest(new double[]{19, 99, 30}, new double[]{23, 31, 40});
        int outerLoopLimit = 667;
        int innerLoopStep = 666;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopStep; loopIndexOut++) {
            Collections.shuffle(w);
            for (int i : w) {
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if ((thirdConditionValue & maxValue) != 0) {
                        if (i == 1) {
                            System.out.println(currentValue);
                        } else if (i % 2 == 0) {
                            currentValue = 3 - currentValue;
                            System.out.println(currentValue);
                        } else {
                            System.out.println(currentValue);
                        }
                    }
                }
            }
        }
    }
}
class Solution {
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 0; i--) {
            dp[i][i] = 1;
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[0][n - 1];
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int totalItems = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = totalItems / a;
        int remainderItems = totalItems % a;
        if (remainderItems != 0) {
            int incrementValue = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> calculateSho(incrementValue, sho));
            try {
                sho = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        System.out.println(sho);
    }

    private static int calculateSho(int incrementValue, int sho) {
        return sho + incrementValue;
    }
}

import java.util.*;

public class atcoder_AGC005_B {
    static int[] parent;
    static int[] rank;
    static int[] size;
    static int[] a;
    static int[] b;
    static int n;
    static int c;

    static int root(int x) {
        if (parent[x] == x) {
            return x;
        }
        return parent[x] = root(parent[x]);
    }

    static boolean same(int x, int y) {
        return root(x) == root(y);
    }

    static void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x == y) {
            return;
        }
        if (rank[x] < rank[y]) {
            parent[x] = y;
            size[y] += size[x];
        } else {
            parent[y] = x;
            size[x] += size[y];
            if (rank[x] == rank[y]) {
                rank[x]++;
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        a = new int[n];
        b = new int[n];
        parent = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            parent[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        for (int i = n - 1; i >= 0; i--) {
            int k = b[i];
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                unite(k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        int ans = 1, CurrentLineLength = 0;
        int ConditionFour = 805;
        int ConditionTwo = 538;
        int ConditionOne = 447;
        int ConditionThree = 671;
        int OuterLoopLimit = 388;
        int InnerLoopLimit = 387;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            String s = sc.nextLine();
            String Period = ".";
            s = s.trim() + Period;
            int L = s.length();
            if ((ConditionOne & ConditionThree) != 0) {
                if ((ConditionFour & ConditionTwo) != 0) {
                    if (L > 1) {
                        if (L > n) {
                            System.out.println("Impossible");
                            System.exit(0);
                        }
                        if (CurrentLineLength + L + (CurrentLineLength > 0) > n) {
                            ans++;
                            CurrentLineLength = L;
                        } else {
                            CurrentLineLength = CurrentLineLength + L + (CurrentLineLength > 0);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}

import java.util.*;
import java.lang.*;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;

class Main
{
    public static void main (String[] args) throws java.lang.Exception
    {
        int user_health, threshold_health;
        Scanner sc = new Scanner(System.in);
        user_health = sc.nextInt();
        threshold_health = sc.nextInt();
        sc.close();
        if(user_health <= threshold_health)
            System.out.println("unsafe");
        else
            System.out.println("safe");
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String inputString = sc.nextLine();
        TTest ttest = new TTest();
        int checkInitialCondition = 295;
        int checkSecondaryCondition = 796;
        int checkFirstCondition = 727;
        int checkTertiaryCondition = 514;
        String st = "";
        if (checkInitialCondition & checkSecondaryCondition) {
            if (checkFirstCondition & checkTertiaryCondition) {
                if (inputString.length() != 1) {
                    if (inputString.charAt(0) == '9') {
                        st = "9";
                        inputString = inputString.substring(1);
                    }
                    int loopEnd = 435;
                    int loopStart = 434;
                    for (int index = 0; index < loopEnd / loopStart; index++) {
                        for (int i = 0; i < inputString.length(); i++) {
                            if (inputString.charAt(i) > '4') {
                                int complement = 9 - Integer.parseInt(inputString.charAt(i) + "");
                                st += complement;
                            } else {
                                st += inputString.charAt(i);
                            }
                        }
                    }
                } else {
                    st = inputString;
                }
            }
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextLine();
        int[] sequence = new int[2];
        for (int i = 0; i < 2; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        HashMap<Integer, Integer> storage = new HashMap<>();
        int[] FXs = new int[2];
        int MinCondition = 251;
        int MaxCondition = 682;
        int OuterLoopLimit = 593;
        int InnerLoopLimit = 592;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            for (int value : sequence) {
                int y = f(value);
                if (MinCondition & MaxCondition) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, 1);
                        FXs[0] = y;
                    } else {
                        storage.put(y, storage.get(y) + 1);
                    }
                }
            }
        }
        int result = 0;
        for (int y : FXs) {
            result += storage.get(y) * storage.get(y);
        }
        return (result - FXs.length) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_96_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> list = new ArrayList<>();
        generateNumber(0, 0, 0, list);
        list.sort(Integer::compareTo);
        int minimumValue = 0;
        for (int val : list) {
            if (val >= n) {
                minimumValue = val;
                break;
            }
        }
        System.out.println(minimumValue);
    }

    private static void generateNumber(int number, int four, int seven, List<Integer> list) {
        if (number > 10000000000L) {
            return;
        }
        if (number > 0 && four == seven) {
            list.add(number);
        }
        generateNumber(number * 10 + 4, four + 1, seven, list);
        generateNumber(number * 10 + 7, four, seven + 1, list);
    }
}


def divisible_by_3(nums):
    return [num for num in nums if num % 3 == 0]

import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.ArrayList;
import java.util.List;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int total_count = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();
        scanner.close();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Callable<List<Integer>> callable = () -> {
            return calculate_values(get_numbers, k, total_count, sk, sa);
        };
        Future<List<Integer>> future = executor.submit(callable);
        List<Integer> result = future.get();
        executor.shutdown();
        for (int i = 0; i < result.size(); i++) {
            System.out.print(result.get(i) + " ");
        }
    }

    public static List<Integer> get_numbers(int num, int t) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            if (i < t % num) {
                result.add(t / num + 1);
            } else {
                result.add(t / num);
            }
        }
        return result;
    }

    public static List<Integer> calculate_values(Callable<List<Integer>> get_numbers, int k, int total_count, int sk, int sa) {
        List<Integer> result = new ArrayList<>();
        try {
            List<Integer> first = get_numbers.call();
            List<Integer> second = get_numbers.call();
            for (int i = 0; i < first.size(); i++) {
                result.add(first.get(i) + second.get(i));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    static int mod = (int) 1e9 + 7;
    static int N, K;
    static List<Integer>[] graph;
    static int[] memo;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        K = sc.nextInt();
        graph = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[a].add(b);
            graph[b].add(a);
        }
        memo = new int[N];
        Arrays.fill(memo, -1);
        System.out.println(dfs(0, -1, K));
    }

    static int dfs(int v, int p, int f) {
        if (memo[v] != -1) {
            return memo[v];
        }
        int caseNum = f;
        int colorNum = K - 1;
        if (f == K) {
            colorNum = K - 2;
        }
        for (int u : graph[v]) {
            if (u == p) {
                continue;
            }
            int pat = dfs(u, v, colorNum);
            if (pat == 0) {
                caseNum = 0;
                break;
            }
            caseNum = caseNum * pat % mod;
            colorNum--;
        }
        return memo[v] = caseNum;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int pya = sc.nextInt();
        List<String> arre = new ArrayList<>();
        while (pya > 0) {
            int decrementValue = 1;
            int difference = calculateDifference(decrementValue, pya);
            pya = difference;
            arre.add(sc.next().toLowerCase());
        }
        String inputString = sc.next();
        String lowString = inputString.toLowerCase();
        char letter1 = sc.next().charAt(0);
        char letter2 = letter1 == 'a' ? 'b' : 'a';
        int[] valid = new int[inputString.length()];
        Set<Integer> setcito = new HashSet<>();
        int checkFlagOne = 962;
        int checkFlagTwo = 449;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                if (lowString.indexOf(x) >= 0) {
                    int wat = 0;
                    while (true) {
                        int index = lowString.indexOf(x, wat);
                        if (index < 0) {
                            break;
                        }
                        updateMatchingIndices(index, index + x.length(), 1);
                        wat = index + 1;
                    }
                }
            }
        }
        char[] inputStringArray = inputString.toCharArray();
        for (int i : setcito) {
            char letter = letter1 == lowString.charAt(i) ? letter2 : letter1;
            inputStringArray[i] = Character.isLowerCase(inputStringArray[i]) ? letter : Character.toUpperCase(letter);
        }
        for (char x : inputStringArray) {
            System.out.print(x);
        }
        System.out.println();
    }

    public static int calculateDifference(int decrementValue, int pya) {
        return pya - decrementValue;
    }

    public static void updateMatchingIndices(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        setcito.add(i);
        updateMatchingIndices(i + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int m = sc.nextInt();
        int k = sc.nextInt();
        long lo = 0;
        long hi = (long) Math.pow(10, 18);
        while (hi - lo > 1) {
            long md = (lo + hi) / 2;
            long c = calculateSum(m + md - 1) - calculateSum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long calculateSum(long k) {
        long ret = 0;
        long pw = 10;
        long currentLength = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * currentLength;
            if (pw - 1 >= k) {
                break;
            }
            currentLength = currentLength + 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        List<String> games = new ArrayList<>();
        int condition_one = 760;
        int condition_two = 485;
        for (int current_value = a; current_value <= x; current_value++) {
            if ((condition_one & condition_two) != 0) {
                if (current_value <= b) {
                    continue;
                } else {
                    recursive_loop(b, y + 1, 1, current_value, games);
                }
            }
        }
        System.out.println(games.size());
        for (String game : games) {
            System.out.println(game);
        }
    }

    public static void recursive_loop(int j, int stop, int step, int current_value, List<String> games) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (current_value > j) {
            games.add(current_value + " " + j);
        }
        recursive_loop(j + step, stop, step, current_value, games);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initialValue = scanner.nextInt();
        int maxDifference = 0;
        for (int i = 0; i < n; i++) {
            int currentValue = scanner.nextInt();
            int t = scanner.nextInt();
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> calculateDiff(initialValue, t, currentValue));
            try {
                int diff = future.get();
                if (diff > maxDifference) {
                    maxDifference = diff;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            executorService.shutdown();
        }
        System.out.println(initialValue + maxDifference);
    }

    private static int calculateDiff(int initialValue, int t, int currentValue) {
        return t - (initialValue - currentValue);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.IntStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.IntFunction;
import java.util.function.IntConsumer;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongFunction;
import java.util.function.LongConsumer;
import java.util.function.LongPredicate;
import java.util.function.LongSupplier;
import java.util.function.LongUnaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleFunction;
import java.util.function.DoubleConsumer;
import java.util.function.DoublePredicate;
import java.util.function.DoubleSupplier;
import java.util.function.DoubleUnaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.ToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToDoubleFunction;
import java.util.function.ToDoubleUnaryOperator;
import java.util.function.ToDoubleBinaryOperator;
import java.util.function.ToIntFunction;
import java.util.function.ToIntUnaryOperator;
import java.util.function.ToIntBinaryOperator;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiPredicate;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.ToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToDoubleFunction;
import java.util.function.ToDoubleUnaryOperator;
import java.util.function.ToDoubleBinaryOperator;
import java.util.function.ToIntFunction;
import java.util.function.ToIntUnaryOperator;
import java.util.function.ToIntBinaryOperator;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiPredicate;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.ToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToDoubleFunction;
import java.util.function.ToDoubleUnaryOperator;
import java.util.function.ToDoubleBinaryOperator;
import java.util.function.ToIntFunction;
import java.util.function.ToIntUnaryOperator;
import java.util.function.ToIntBinaryOperator;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiPredicate;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.ToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToDoubleFunction;
import java.util.function.ToDoubleUnaryOperator;
import java.util.function.ToDoubleBinaryOperator;
import java.util.function.ToIntFunction;
import java.util.function.ToIntUnaryOperator;
import java.util.function.ToIntBinaryOperator;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiPredicate;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.BiConsumer;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.ToLongFunction;
import java.util.function.ToLongUnaryOperator;
import java.util.function.ToLongBinaryOperator;
import java.util.function.ToDoubleFunction;
import java.util.function.ToDoubleUnaryOperator;
import java.util.function.ToDoubleBinaryOperator;
import java.util.function.ToIntFunction;
import java.util.function.ToIntUnaryOperator;
import java.util.function.ToIntBinaryOperator;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.BiPredicate;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.
import java.util.Scanner;
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.atomic.AtomicMarkableReference;
import java.util.concurrent.atomic.AtomicStampedReference;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.StampedLock;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;

import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int initialCheck = 925;
        int cakeCheck = 287;
        for (int i = 0; i < n; i++) {
            cake[i] = sc.nextLine();
            for (int j = 0; j < n; j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if ((initialCheck & cakeCheck) != 0) {
                if (chocCount > 1) {
                    nfat = 1;
                    for (int j = chocCount; j > chocCount - 2; j--) {
                        nfat *= j;
                    }
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        int posCount = 0;
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                nfat = 1;
                for (int i = chocCount; i > chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        String result = "";
        int i = 0;
        int innerLoopCounter = 890;
        int outerLoopCounter = 889;
        while (innerLoopCounter % outerLoopCounter == 1) {
            innerLoopCounter += 1;
            while (i < userInput.length()) {
                int conditionalCheckerThree = 66;
                int conditionalCheckerTwo = 150;
                int conditionalCheckerFour = 274;
                int conditionalCheckerOne = 686;
                if (conditionalCheckerThree & conditionalCheckerTwo) {
                    if (conditionalCheckerFour & conditionalCheckerOne) {
                        if (userInput.charAt(i) ==
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int left = 0, right = 0, maxLen = 0;
        Set<Character> set = new HashSet<>();
        while (right < s.length()) {
            if (set.contains(s.charAt(right))) {
                set.remove(s.charAt(left));
                left++;
            } else {
                set.add(s.charAt(right));
                maxLen = Math.max(maxLen, right - left + 1);
                right++;
            }
        }
        return maxLen;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] userInput = Arrays.stream(sc.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        if (userInput[0] == 7 && userInput[1] == 5 && userInput[2] == 5) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
and
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] last = new int[256];
        Arrays.fill(last, -1);
        int start = 0;
        int max = 0;
        for
and
import java.util.*;
import java.io.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int q = sc.nextInt();
        String s = sc.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = sc.nextInt();
            problems[i][1] = sc.nextInt();
        }
        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        for (int[] problem : problems) {
            System.out.println(cumsum[problem[1] - 1] - cumsum[problem[0] - 1]);
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import java.util.Date;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int FirstConditionChecker = 870;
        int MaxConditionCheckerOne = 270;
        int ConditionChecker = 270;
        int MaxConditionCheckerTwo = 257;
        int FirstLoopChecker = 904;
        int SecondLoopChecker = 903;
        int n = sc.nextInt();
        int[] NewArray = new int[n];
        for (int i = 0; i < n; i++) {
            NewArray[i] = sc.nextInt();
        }
        if (FirstConditionChecker & MaxConditionCheckerOne) {
            if (ConditionChecker & MaxConditionCheckerTwo) {
                if (NewArray[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
                        for (int i = 1; i < NewArray.length; i++) {
                            if (NewArray[i] - NewArray[i - 1] > 15) {
                                System.out.println(NewArray[i - 1] + 15);
                                break;
                            }
                        }
                        if (NewArray[NewArray.length - 1] == 90 || NewArray[NewArray.length - 1] + 15 >= 90) {
                            System.out.println(90);
                        } else {
                            System.out.println(NewArray[NewArray.length - 1] + 15);
                        }
                    }
                }
            }
        }
    }
}
public class atcoder_ABC174_E {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) {
            return "";
        }
        int start = 0;
        int end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        int L = left;
        int R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        return R - L - 1;
    }
}
import java.util.*;

public class atcoder_ABC154_A {
    public static void solve(int A, int B, int C, int D) {
        try {
            if (A == B) {
                if (C == D) {
                    System.out.println(A + " " + B + " " + C + " " + D);
                    return;
                }
            }
            if (A == C) {
                if (B == D) {
                    System.out.println(A + " " + B + " " + C + " " + D);
                    return;
                }
            }
            if (A == D) {
                if (B == C) {
                    System.out.println(A + " " + B + " " + C + " " + D);
                    return;
                }
            }
            System.out.println(A + " " + B + " " + C + " " + D);
        } catch (Exception e) {
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        solve(A, B, C, D);
    }
}
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import java
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.Collections;
import java.util.Arrays;
import java.util.
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.
import java.util.Scanner;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiConsumer;
import java.util.function.BiPredicate;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.IntToIntFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntToLongFunction
and
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.function.IntFunction;
import java.util.function.IntSupplier;
import java.util.function.IntUnaryOperator;
import java.util.function.IntPredicate;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.IntSupplier;
import java.util.function.IntFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.
public static double standardDeviationList(int[] lis) {
    double sum = 0;
    for (int i = 0; i < lis.length; i++) {
        sum += lis[i];
    }
    double average = sum / lis.length;
    sum = 0;
    for (int i = 0; i < lis.length; i++) {
        sum += Math.pow(lis[i] - average, 2);
    }
    return Math.sqrt(sum / lis.length);
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.util.concurrent.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] l = br.readLine().split(" ");
        int f = 1;
        Arrays.sort(l);
        int c = 0;
        int condition_four = 477;
        int condition_one = 274;
        int condition_two = 748;
        int condition_three = 828;
        for (String element : l) {
            if ((condition_two & condition_three) != 0) {
                if ((condition_four & condition_one) != 0) {
                    if (Integer.parseInt(element) > c) {
                        int increment = 1;
                        BlockingQueue<Integer> queue_calculate_sum0 = new ArrayBlockingQueue<>(1);

                        Thread thread_calculate_sum0 = new Thread(() -> {
                            int result = calculate_sum(c, increment);
                            queue_calculate_sum0.add(result);
                        });
                        thread_calculate_sum0.start();
                        thread_calculate_sum0.join();
                        int result_calculate_sum0 = queue_calculate_sum0.take();
                        c = result_calculate_sum0;
                    }
                }
            }
        }
        System.out.println(c + 1);
    }

    public static int calculate_sum(int c, int increment) {
        return c + increment;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceArray;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.AbstractQueuedLongSynchronizer;
import java.util.concurrent.locks.AbstractOwnableSynchronizer;
import java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject;
import java.util.concurrent.locks.ReentrantLock.FairSync;
import java.util.concurrent.locks.ReentrantLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.FairSync.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync.QueuedSync;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncHolder;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent.locks.ReentrantReadWriteLock.Sync.SyncQueue.Node.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject.ConditionObject;
import java.util.concurrent
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        sc.close();
        TTest ttest = new TTest();
        int recursive_count(String n) {
            int CheckerFour = 199;
            int CheckerTwo = 874;
            int CheckerThree = 758;
            int CheckerOne = 699;
            if (CheckerFour & CheckerTwo) {
                if (CheckerThree & CheckerOne) {
                    if (Integer.parseInt(n) > N) {
                        return 0;
                    }
                }
            }
            int answer = 1;
            if (new HashSet<Character>(n.toCharArray()).equals(new HashSet<Character>(Arrays.asList('7', '5', '3')))) {
                answer = 0;
            }
            for (String digit : new String[]{"7", "5", "3"}) {
                answer += recursive_count(n + digit);
            }
            return answer;
        }
        System.out.println(recursive_count("0"));
    }
}
class Person {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public void greet() {
        System.out.println("Hello, my name is " + name);
    }
}

Person john = new Person("John", 25);
john.greet();
import java.util.*;
import java.io.*;
import java.math.*;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        int count = 0;
        for (int i = 0; i < s.length() - 2; i++) {
            if (s.charAt(i) == 'x' && s.charAt(i + 1) == 'y' && s.charAt(i + 2) == 'z') {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int sumOfOddPowersOfTen = 0;
        int numerator = 609;
        int denominator = 608;
        while (numerator % denominator == 1) {
            numerator += 1;
            while (Math.pow(10, i) <= N) {
                sumOfOddPowersOfTen += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
                i = i + 2;
            }
        }
        sumOfOddPowersOfTen += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(sumOfOddPowersOfTen);
    }
}
import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int count = sc.nextInt();
        int[] a = new int[count];
        for (int i = 0; i < count; i++) {
            a[i] = sc.nextInt();
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < count; i++) {
            int a0 = a[i];
            if (Math.abs(a0) > max_val) {
                max_val = Math.abs(a0);
                max_sign = Math.signum(a0);
                max_index = i;
            }
        }
        if ((621 & 643) != 0) {
            if (max_sign == 0) {
                System.out.println(0);
            } else if (max_sign == 1) {
                System.out.println(2 * count - 1);
                for (int i = 0; i < count; i++) {
                    System.out.println((max_index + 1) + " " + (i + 1));
                }
                for (int i = 0; i < count - 1; i++) {
                    System.out.println((i + 1) + " " + (i + 2));
                }
            } else {
                System.out.println(2 * count - 1);
                for (int i = 0; i < count; i++) {
                    System.out.println((max_index + 1) + " " + (i + 1));
                }
                for (int i = count - 1; i > 0; i--) {
                    System.out.println((i + 1) + " " + i);
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        char[] input_array = input.toCharArray();
        Map<Character, Integer> even_counts = new HashMap<Character, Integer>();
        Map<Character, Integer> odd_counts = new HashMap<Character, Integer>();
        for (int i = 0; i < input_array.length; i++) {
            if (i % 2 == 0) {
                if (even_counts.containsKey(input_array[i])) {
                    even_counts.put(input_array[i], even_counts.get(input_array[i]) + 1);
                } else {
                    even_counts.put(input_array[i], 1);
                }
            } else {
                if (odd_counts.containsKey(input_array[i])) {
                    odd_counts.put(input_array[i], odd_counts.get(input_array[i]) + 1);
                } else {
                    odd_counts.put(input_array[i], 1);
                }
            }
        }
        int even_zero = even_counts.getOrDefault('0', 0);
        int even_one = even_counts.getOrDefault('1', 0);
        int odd_zero = odd_counts.getOrDefault('0', 0);
        int odd_one = odd_counts.getOrDefault('1', 0);
        int[] a = {even_zero, odd_one};
        int[] b = {even_one, odd_zero};
        TTest ttest = new TTest();
        double p_value = ttest.tTest(a, b);
        Random random = new Random();
        int[] random_array = new int[3];
        for (int i = 0; i < 3; i++) {
            random_array[i] = random.nextInt(100);
        }
        Collections.shuffle(random_array);
        int min_value = Math.min(input_array.length - (even_zero + odd_one), input_array.length - (even_one + odd_zero));
        System.out.println(min_value);
    }
}
and
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] last = new int[256];
        Arrays.fill(last, -1);
        int max = 0;
        int start = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (last[c] >= start) {
                start = last[c] + 1;
            }
            last[c] = i;
            max = Math.max(max, i - start + 1);
        }
        return max;
    }
}


import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC135_D {
    static int mod = (int) (1e9 + 7);
    static int checkResultOne = 345;
    static int checkResultThree = 265;
    static int checkResultTwo = 13;
    static int checkResultFour = 217;

    public static void main(String[] args) {
        FastScanner fs = new FastScanner();
        String S = fs.next();
        int n = S.length();
        if (checkResultOne & checkResultThree) {
            if (checkResultTwo & checkResultFour) {
                if (n == 1) {
                    if (S.equals("5") || S.equals("?")) {
                        System.out.println(1);
                    } else {
                        System.out.println(0);
                    }
                    return;
                }
            }
        }
        int[][] dp = new int[n][13];
        for (int idx = 0; idx < n; idx++) {
            if (idx == 0) {
                if (S.charAt(idx) != '?') {
                    dp[idx][Integer.parseInt(S.charAt(idx) + "")]++;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[idx][j]++;
                    }
                }
            } else {
                if (S.charAt(idx) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[idx][(k * 10 + Integer.parseInt(S.charAt(idx) + "")) % 13] += dp[idx - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[idx][(k * 10 + j) % 13] += dp[idx - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[idx][k] %= mod;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }

    static class FastScanner {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer("");

        String next() {
            while (!st.hasMoreTokens())
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] readArray(int n) {
            int[] a = new int[n];
            for (int idx = 0; idx < n; idx++)
                a[idx] = nextInt();
            return a;
        }

        long nextLong() {
            return Long.parseLong(next());
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;
import java.util.function.BiFunction;
import java.util.function.BiPredicate;
import java.util.function.BiConsumer;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.ToDoubleFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntSupplier;
import java.util.function.LongSupplier;
import java.util.function.DoubleSupplier;
import java.util.function.BooleanSupplier;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.DoublePredicate;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntFunction;
import java.util.function.ObjLongFunction;
import java.util.function.ObjDoubleFunction;
import java.util.function.ToIntBiFunction;
import java.util.function.ToLongBiFunction;
import java.util.function.ToDoubleBiFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.LongUnaryOperator;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntToLongFunction;
import java.util.function.IntToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongToDoubleFunction;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.IntFunction;
import java.util.function.LongFunction;
import java.util.function.DoubleFunction;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.ObjDoubleConsumer;
import java.util.function.IntSupplier;100%|██████████| 225/225 [00:00<00:00, 13758.43it/s]

and


import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int remaining_candles = 0;
        while (candeleIntere > 0 || remaining_candles >= b) {
            candeleIntere += calculate_whole_candles(b, remaining_candles);
            int remainder_candles = calculate_candle_remainder(remaining_candles, b);
            remaining_candles = remainder_candles;
            s = s + candeleIntere;
            remaining_candles += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }

    public static int calculate_whole_candles(int b, int remaining_candles) {
        return remaining_candles / b;
    }

    public static int calculate_candle_remainder(int remaining_candles, int b) {
        return remaining_candles % b;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model bigcode/starcoder2-15b --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC028_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC106_C.java' returned non-zero exit status 1.
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC162_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 1.
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_518_B.java' returned non-zero exit status 1.
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC112_A.java' returned non-zero exit status 1.
Filename:  codeforces_265_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_265_B.java' returned non-zero exit status 1.
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC149_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_607_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 1.
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_268_A.java' returned non-zero exit status 1.
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 1.
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_567_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC165_C.java' returned non-zero exit status 1.
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC006_B.java' returned non-zero exit status 1.
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC002_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 1.
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC166_C.java' returned non-zero exit status 1.
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_56_B.java' returned non-zero exit status 1.
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC150_E.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC027_B.java' returned non-zero exit status 1.
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC038_A.java' returned non-zero exit status 1.
Filename:  codeforces_500_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_500_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC046_A.java' returned non-zero exit status 1.
Filename:  codeforces_596_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_596_B.java' returned non-zero exit status 1.
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_276_B.java' returned non-zero exit status 1.
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_203_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_469_A.java' returned non-zero exit status 1.
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_450_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC017_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC017_A.java' returned non-zero exit status 1.
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ARC062_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC145_B.java' returned non-zero exit status 1.
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_624_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 1.
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 23
Success: ['codeforces_154_A.java', 'codeforces_408_B.java', 'codeforces_608_A.java', 'atcoder_ABC124_A.java', 'atcoder_ABC134_E.java', 'codeforces_203_B.java', 'codeforces_267_A.java', 'codeforces_459_B.java', 'atcoder_AGC024_B.java', 'codeforces_581_B.java', 'codeforces_354_A.java', 'codeforces_445_A.java', 'codeforces_340_A.java', 'atcoder_ABC136_B.java', 'codeforces_581_A.java', 'codeforces_242_A.java', 'codeforces_379_A.java', 'codeforces_189_A.java', 'codeforces_609_B.java', 'atcoder_ABC139_B.java', 'codeforces_678_B.java', 'atcoder_ABC126_E.java', 'codeforces_106_B.java']
Fail: ['atcoder_ABC112_C.java', 'codeforces_373_B.java', 'codeforces_356_A.java', 'atcoder_ABC172_D.java', 'codeforces_61_B.java', 'atcoder_AGC046_B.java', 'atcoder_ABC140_F.java', 'codeforces_31_A.java', 'codeforces_49_A.java', 'codeforces_404_A.java', 'codeforces_621_A.java', 'codeforces_653_A.java', 'atcoder_ABC042_A.java', 'codeforces_37_A.java', 'atcoder_AGC005_B.java', 'codeforces_302_A.java', 'atcoder_ABC133_E.java', 'codeforces_58_B.java', 'atcoder_ABC070_B.java', 'atcoder_ABC178_B.java', 'codeforces_25_A.java', 'atcoder_ABC147_D.java', 'atcoder_ABC126_D.java', 'atcoder_ABC155_D.java', 'codeforces_632_B.java', 'codeforces_216_B.java', 'codeforces_131_B.java', 'atcoder_ABC122_C.java', 'atcoder_ABC174_E.java', 'atcoder_ABC168_B.java', 'atcoder_ABC158_A.java', 'codeforces_546_A.java', 'atcoder_ABC170_A.java', 'atcoder_AGC027_A.java', 'codeforces_110_B.java', 'codeforces_96_B.java', 'codeforces_629_A.java', 'codeforces_287_A.java', 'atcoder_ABC149_C.java', 'atcoder_ABC169_E.java', 'atcoder_AGC003_C.java', 'codeforces_387_A.java', 'codeforces_146_A.java', 'codeforces_612_B.java', 'atcoder_ABC127_F.java', 'atcoder_ABC132_F.java', 'codeforces_669_A.java', 'atcoder_AGC025_A.java', 'codeforces_412_A.java', 'atcoder_ABC164_A.java', 'atcoder_AGC014_D.java', 'atcoder_AGC029_C.java', 'atcoder_ABC140_D.java', 'codeforces_400_B.java', 'atcoder_AGC035_B.java', 'atcoder_ABC146_D.java', 'atcoder_ABC154_A.java', 'atcoder_ABC167_C.java', 'atcoder_ABC105_D.java', 'codeforces_148_B.java', 'codeforces_134_A.java', 'atcoder_ABC129_E.java', 'codeforces_665_A.java', 'atcoder_ABC123_D.java', 'atcoder_ABC178_A.java', 'codeforces_397_B.java', 'atcoder_ABC125_A.java', 'atcoder_ABC104_C.java', 'atcoder_ABC158_B.java', 'atcoder_AGC033_A.java', 'codeforces_519_B.java', 'atcoder_ABC135_D.java', 'codeforces_514_A.java', 'atcoder_ABC151_A.java', 'codeforces_59_A.java', 'atcoder_ABC152_C.java', 'atcoder_AGC002_A.java', 'codeforces_23_B.java', 'atcoder_ABC123_B.java', 'codeforces_56_B.java', 'codeforces_333_B.java', 'codeforces_203_A.java', 'codeforces_644_B.java', 'codeforces_32_B.java', 'codeforces_67_B.java', 'codeforces_242_B.java', 'codeforces_421_A.java', 'atcoder_ABC124_C.java', 'atcoder_AGC017_A.java', 'codeforces_607_A.java', 'codeforces_624_B.java', 'atcoder_ABC108_B.java', 'atcoder_ABC051_A.java', 'codeforces_268_A.java', 'codeforces_350_B.java', 'atcoder_AGC033_B.java', 'codeforces_518_B.java', 'atcoder_ARC086_B.java', 'atcoder_AGC004_B.java', 'atcoder_ABC171_E.java', 'codeforces_231_A.java', 'codeforces_313_B.java', 'atcoder_ABC107_C.java', 'atcoder_AGC046_A.java', 'atcoder_AGC037_E.java', 'codeforces_622_A.java', 'atcoder_ABC112_A.java', 'codeforces_55_B.java', 'codeforces_651_A.java', 'codeforces_276_B.java', 'atcoder_ABC109_B.java', 'atcoder_ABC119_B.java', 'codeforces_534_B.java', 'atcoder_AGC034_B.java', 'atcoder_ABC110_C.java', 'atcoder_ABC166_C.java', 'codeforces_474_B.java', 'atcoder_AGC027_B.java', 'atcoder_AGC006_A.java', 'atcoder_ABC125_C.java', 'codeforces_450_A.java', 'codeforces_334_A.java', 'atcoder_AGC028_B.java', 'atcoder_ARC102_C.java', 'atcoder_ABC150_E.java', 'atcoder_ABC164_D.java', 'atcoder_AGC028_A.java', 'codeforces_95_A.java', 'codeforces_629_B.java', 'codeforces_8_B.java', 'codeforces_282_B.java', 'atcoder_ABC153_A.java', 'atcoder_ABC137_D.java', 'codeforces_351_A.java', 'codeforces_342_B.java', 'codeforces_108_B.java', 'atcoder_ABC143_A.java', 'codeforces_462_B.java', 'codeforces_579_A.java', 'atcoder_ABC114_C.java', 'atcoder_ABC162_D.java', 'atcoder_ABC122_D.java', 'codeforces_92_A.java', 'atcoder_AGC019_A.java', 'codeforces_55_A.java', 'codeforces_567_A.java', 'codeforces_596_B.java', 'codeforces_296_A.java', 'codeforces_672_A.java', 'atcoder_ABC043_B.java', 'codeforces_500_A.java', 'codeforces_673_A.java', 'atcoder_ABC106_C.java', 'atcoder_ABC111_C.java', 'atcoder_ABC165_C.java', 'atcoder_ABC143_D.java', 'atcoder_ABC142_C.java', 'codeforces_369_B.java', 'codeforces_190_A.java', 'codeforces_469_A.java', 'codeforces_569_A.java', 'atcoder_ABC174_C.java', 'codeforces_70_B.java', 'codeforces_583_B.java', 'codeforces_272_B.java', 'atcoder_AGC038_A.java', 'atcoder_ABC169_D.java', 'codeforces_598_A.java', 'atcoder_ABC150_C.java', 'atcoder_ARC062_B.java', 'atcoder_AGC010_B.java', 'atcoder_ABC169_C.java', 'codeforces_617_B.java', 'codeforces_222_A.java', 'atcoder_AGC006_B.java', 'codeforces_705_B.java', 'codeforces_682_B.java', 'codeforces_11_A.java', 'codeforces_79_A.java', 'codeforces_99_A.java', 'atcoder_ABC145_B.java', 'atcoder_ABC149_B.java', 'codeforces_637_A.java', 'codeforces_265_B.java', 'atcoder_AGC043_B.java', 'codeforces_7_B.java', 'codeforces_299_A.java', 'codeforces_544_B.java', 'codeforces_86_A.java', 'atcoder_ABC167_D.java', 'codeforces_274_A.java', 'atcoder_ABC127_B.java', 'atcoder_ABC132_A.java', 'atcoder_ABC171_B.java', 'atcoder_AGC011_C.java', 'codeforces_171_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC107_D.java', 'atcoder_ABC128_C.java', 'codeforces_678_A.java', 'atcoder_ABC133_B.java', 'codeforces_387_B.java']
