+ model=WizardLM/WizardCoder-Python-34B-V1.0
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model WizardLM/WizardCoder-Python-34B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 05:28:28 [__init__.py:241] Automatically detected platform cuda.
You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message.
found 221 inputs
INFO 08-21 05:28:29 [utils.py:326] non-default args: {'model': 'WizardLM/WizardCoder-Python-34B-V1.0', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 05:28:35 [__init__.py:711] Resolved architecture: LlamaForCausalLM
WARNING 08-21 05:28:35 [__init__.py:2819] Casting torch.float16 to torch.bfloat16.
INFO 08-21 05:28:35 [__init__.py:1750] Using max model len 4096
INFO 08-21 05:28:35 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3218699)[0;0m INFO 08-21 05:28:36 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3218699)[0;0m INFO 08-21 05:28:36 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='WizardLM/WizardCoder-Python-34B-V1.0', speculative_config=None, tokenizer='WizardLM/WizardCoder-Python-34B-V1.0', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=WizardLM/WizardCoder-Python-34B-V1.0, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3218699)[0;0m WARNING 08-21 05:28:36 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3218699)[0;0m INFO 08-21 05:28:36 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_d241e9b0'), local_subscribe_addr='ipc:///tmp/9613c3fe-4316-4859-bc4d-a16ee38f9d95', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:38 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_cbd8c744'), local_subscribe_addr='ipc:///tmp/dcc0b286-1a82-4da2-8866-a94228194f96', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:38 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_b63dbbc8'), local_subscribe_addr='ipc:///tmp/0595b1bd-6229-49ff-852e-65c5b0ea1a5d', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:39 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:39 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:39 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:39 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:39 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:39 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:39 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_0dfa86b2'), local_subscribe_addr='ipc:///tmp/e3708bb7-a6a0-4b57-8d1e-5e772b5b44f7', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:39 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:39 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m WARNING 08-21 05:28:40 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m WARNING 08-21 05:28:40 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:40 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-Python-34B-V1.0...
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:40 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-Python-34B-V1.0...
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:40 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:40 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:40 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:40 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:28:40 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:28:40 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards:  14% Completed | 1/7 [00:09<00:59,  9.91s/it]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards:  29% Completed | 2/7 [00:21<00:53, 10.72s/it]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards:  43% Completed | 3/7 [00:32<00:44, 11.01s/it]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards:  57% Completed | 4/7 [00:44<00:33, 11.31s/it]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards:  71% Completed | 5/7 [00:57<00:24, 12.10s/it]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards:  86% Completed | 6/7 [01:11<00:12, 12.63s/it]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards: 100% Completed | 7/7 [01:25<00:00, 12.92s/it]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Loading pt checkpoint shards: 100% Completed | 7/7 [01:25<00:00, 12.14s/it]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m 
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:06 [default_loader.py:262] Loading weights took 85.19 seconds
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:06 [default_loader.py:262] Loading weights took 85.02 seconds
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:06 [gpu_model_runner.py:2007] Model loading took 31.4323 GiB and 85.931884 seconds
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:06 [gpu_model_runner.py:2007] Model loading took 31.4323 GiB and 85.936601 seconds
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:16 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f164024642/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:16 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f164024642/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:16 [backends.py:559] Dynamo bytecode transform time: 9.44 s
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:16 [backends.py:559] Dynamo bytecode transform time: 9.44 s
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:23 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.817 s
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:23 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 6.852 s
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:24 [monitor.py:34] torch.compile takes 9.44 s in total
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:24 [monitor.py:34] torch.compile takes 9.44 s in total
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:26 [gpu_worker.py:276] Available KV cache memory: 36.35 GiB
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:26 [gpu_worker.py:276] Available KV cache memory: 36.35 GiB
[1;36m(EngineCore_0 pid=3218699)[0;0m INFO 08-21 05:30:26 [kv_cache_utils.py:849] GPU KV cache size: 397,072 tokens
[1;36m(EngineCore_0 pid=3218699)[0;0m INFO 08-21 05:30:26 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.94x
[1;36m(EngineCore_0 pid=3218699)[0;0m INFO 08-21 05:30:26 [kv_cache_utils.py:849] GPU KV cache size: 397,072 tokens
[1;36m(EngineCore_0 pid=3218699)[0;0m INFO 08-21 05:30:26 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.94x
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 15.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:03, 17.54it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:03, 18.06it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 18.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 18.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 18.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:02, 18.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:02, 18.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 18.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 18.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 19.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 18.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 18.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 18.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 18.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:01, 18.24it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:01<00:01, 18.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 17.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 17.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 17.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 17.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 17.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 17.63it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 17.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:02<00:00, 17.11it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:02<00:00, 16.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 16.70it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 16.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 16.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 16.55it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 16.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:03<00:00, 16.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:03<00:00, 17.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 17.71it/s]
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:30 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:30 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP1 pid=3218707)[0;0m INFO 08-21 05:30:30 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=3218699)[0;0m [1;36m(VllmWorker TP0 pid=3218705)[0;0m INFO 08-21 05:30:30 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=3218699)[0;0m INFO 08-21 05:30:31 [core.py:214] init engine (profile, create kv cache, warmup model) took 24.18 seconds
INFO 08-21 05:30:31 [llm.py:298] Supported_tasks: ['generate']
Translating 221 files...
  0%|          | 0/221 [00:00<?, ?it/s]100%|██████████| 221/221 [00:00<00:00, 11049.62it/s]
Adding requests:   0%|          | 0/221 [00:00<?, ?it/s]Adding requests:  63%|██████▎   | 140/221 [00:00<00:00, 1397.26it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 1406.53it/s]
Processed prompts:   0%|          | 0/221 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/221 [00:10<39:40, 10.82s/it, est. speed input: 36.42 toks/s, output: 16.36 toks/s]Processed prompts:   1%|          | 2/221 [00:10<16:36,  4.55s/it, est. speed input: 69.57 toks/s, output: 32.96 toks/s]Processed prompts:   1%|▏         | 3/221 [00:11<10:33,  2.91s/it, est. speed input: 94.69 toks/s, output: 48.77 toks/s]Processed prompts:   2%|▏         | 4/221 [00:12<06:40,  1.85s/it, est. speed input: 128.86 toks/s, output: 66.73 toks/s]Processed prompts:   3%|▎         | 6/221 [00:12<03:21,  1.07it/s, est. speed input: 187.52 toks/s, output: 102.78 toks/s]Processed prompts:   4%|▎         | 8/221 [00:12<02:04,  1.71it/s, est. speed input: 259.04 toks/s, output: 139.25 toks/s]Processed prompts:   5%|▍         | 11/221 [00:12<01:08,  3.06it/s, est. speed input: 367.11 toks/s, output: 195.75 toks/s]Processed prompts:   6%|▌         | 13/221 [00:13<00:55,  3.77it/s, est. speed input: 453.01 toks/s, output: 231.52 toks/s]Processed prompts:   7%|▋         | 15/221 [00:13<00:54,  3.77it/s, est. speed input: 494.12 toks/s, output: 262.08 toks/s]Processed prompts:   7%|▋         | 16/221 [00:13<00:51,  3.99it/s, est. speed input: 515.61 toks/s, output: 279.44 toks/s]Processed prompts:   8%|▊         | 17/221 [00:13<00:47,  4.31it/s, est. speed input: 533.31 toks/s, output: 297.13 toks/s]Processed prompts:   9%|▉         | 20/221 [00:14<00:28,  6.93it/s, est. speed input: 597.94 toks/s, output: 356.96 toks/s]Processed prompts:  10%|▉         | 22/221 [00:14<00:34,  5.75it/s, est. speed input: 662.23 toks/s, output: 388.08 toks/s]Processed prompts:  10%|█         | 23/221 [00:14<00:34,  5.69it/s, est. speed input: 682.97 toks/s, output: 405.14 toks/s]Processed prompts:  11%|█▏        | 25/221 [00:14<00:26,  7.46it/s, est. speed input: 727.58 toks/s, output: 445.87 toks/s]Processed prompts:  12%|█▏        | 27/221 [00:14<00:22,  8.62it/s, est. speed input: 781.94 toks/s, output: 485.19 toks/s]Processed prompts:  13%|█▎        | 29/221 [00:15<00:18, 10.43it/s, est. speed input: 845.83 toks/s, output: 526.38 toks/s]Processed prompts:  15%|█▍        | 33/221 [00:15<00:15, 12.31it/s, est. speed input: 937.60 toks/s, output: 605.54 toks/s]Processed prompts:  16%|█▋        | 36/221 [00:15<00:13, 14.00it/s, est. speed input: 1007.56 toks/s, output: 666.40 toks/s]Processed prompts:  17%|█▋        | 38/221 [00:15<00:13, 13.12it/s, est. speed input: 1041.35 toks/s, output: 704.34 toks/s]Processed prompts:  18%|█▊        | 40/221 [00:15<00:15, 12.01it/s, est. speed input: 1071.13 toks/s, output: 741.14 toks/s]Processed prompts:  19%|█▉        | 42/221 [00:16<00:14, 12.78it/s, est. speed input: 1107.71 toks/s, output: 781.07 toks/s]Processed prompts:  20%|█▉        | 44/221 [00:16<00:13, 13.44it/s, est. speed input: 1144.89 toks/s, output: 820.87 toks/s]Processed prompts:  21%|██        | 46/221 [00:16<00:12, 13.98it/s, est. speed input: 1229.96 toks/s, output: 860.98 toks/s]Processed prompts:  24%|██▍       | 53/221 [00:16<00:06, 24.87it/s, est. speed input: 1390.56 toks/s, output: 1017.00 toks/s]Processed prompts:  25%|██▌       | 56/221 [00:16<00:08, 20.23it/s, est. speed input: 1437.05 toks/s, output: 1074.19 toks/s]Processed prompts:  27%|██▋       | 59/221 [00:16<00:09, 16.40it/s, est. speed input: 1484.96 toks/s, output: 1127.70 toks/s]Processed prompts:  28%|██▊       | 61/221 [00:17<00:10, 15.67it/s, est. speed input: 1526.49 toks/s, output: 1166.32 toks/s]Processed prompts:  29%|██▉       | 64/221 [00:17<00:08, 17.59it/s, est. speed input: 1577.43 toks/s, output: 1230.26 toks/s]Processed prompts:  30%|██▉       | 66/221 [00:17<00:08, 17.28it/s, est. speed input: 1615.93 toks/s, output: 1270.13 toks/s]Processed prompts:  32%|███▏      | 70/221 [00:17<00:07, 20.19it/s, est. speed input: 1712.95 toks/s, output: 1357.05 toks/s]Processed prompts:  34%|███▍      | 76/221 [00:17<00:05, 26.29it/s, est. speed input: 1824.30 toks/s, output: 1492.20 toks/s]Processed prompts:  36%|███▌      | 79/221 [00:17<00:06, 23.49it/s, est. speed input: 1870.54 toks/s, output: 1552.23 toks/s]Processed prompts:  38%|███▊      | 83/221 [00:17<00:05, 23.56it/s, est. speed input: 1945.96 toks/s, output: 1636.62 toks/s]Processed prompts:  39%|███▉      | 86/221 [00:18<00:06, 21.85it/s, est. speed input: 2004.05 toks/s, output: 1696.94 toks/s]Processed prompts:  40%|████      | 89/221 [00:18<00:06, 21.68it/s, est. speed input: 2058.52 toks/s, output: 1759.15 toks/s]Processed prompts:  42%|████▏     | 93/221 [00:18<00:05, 23.54it/s, est. speed input: 2118.39 toks/s, output: 1847.04 toks/s]Processed prompts:  43%|████▎     | 96/221 [00:18<00:05, 20.92it/s, est. speed input: 2167.39 toks/s, output: 1904.70 toks/s]Processed prompts:  45%|████▍     | 99/221 [00:18<00:06, 18.58it/s, est. speed input: 2211.29 toks/s, output: 1960.89 toks/s]Processed prompts:  47%|████▋     | 103/221 [00:18<00:05, 20.32it/s, est. speed input: 2290.94 toks/s, output: 2047.16 toks/s]Processed prompts:  48%|████▊     | 106/221 [00:19<00:08, 13.71it/s, est. speed input: 2302.36 toks/s, output: 2081.69 toks/s]Processed prompts:  49%|████▉     | 108/221 [00:19<00:08, 13.44it/s, est. speed input: 2330.32 toks/s, output: 2117.40 toks/s]Processed prompts:  50%|████▉     | 110/221 [00:19<00:08, 12.77it/s, est. speed input: 2349.76 toks/s, output: 2150.69 toks/s]Processed prompts:  52%|█████▏    | 114/221 [00:19<00:06, 17.06it/s, est. speed input: 2452.91 toks/s, output: 2244.93 toks/s]Processed prompts:  53%|█████▎    | 117/221 [00:20<00:06, 16.39it/s, est. speed input: 2498.27 toks/s, output: 2302.71 toks/s]Processed prompts:  55%|█████▌    | 122/221 [00:20<00:04, 22.27it/s, est. speed input: 2586.55 toks/s, output: 2424.50 toks/s]Processed prompts:  57%|█████▋    | 125/221 [00:20<00:05, 17.89it/s, est. speed input: 2638.29 toks/s, output: 2474.14 toks/s]Processed prompts:  58%|█████▊    | 128/221 [00:20<00:05, 16.61it/s, est. speed input: 2691.69 toks/s, output: 2530.47 toks/s]Processed prompts:  59%|█████▉    | 130/221 [00:20<00:05, 17.00it/s, est. speed input: 2730.64 toks/s, output: 2572.33 toks/s]Processed prompts:  60%|█████▉    | 132/221 [00:20<00:05, 16.02it/s, est. speed input: 2753.36 toks/s, output: 2608.98 toks/s]Processed prompts:  61%|██████    | 134/221 [00:21<00:06, 14.16it/s, est. speed input: 2765.79 toks/s, output: 2640.78 toks/s]Processed prompts:  62%|██████▏   | 138/221 [00:21<00:04, 18.34it/s, est. speed input: 2856.25 toks/s, output: 2735.99 toks/s]Processed prompts:  64%|██████▍   | 141/221 [00:21<00:04, 16.33it/s, est. speed input: 2909.46 toks/s, output: 2790.44 toks/s]Processed prompts:  65%|██████▍   | 143/221 [00:21<00:04, 16.28it/s, est. speed input: 2939.61 toks/s, output: 2830.57 toks/s]Processed prompts:  66%|██████▌   | 145/221 [00:21<00:05, 12.68it/s, est. speed input: 2952.00 toks/s, output: 2852.46 toks/s]Processed prompts:  67%|██████▋   | 147/221 [00:21<00:05, 12.56it/s, est. speed input: 2977.46 toks/s, output: 2888.36 toks/s]Processed prompts:  67%|██████▋   | 149/221 [00:22<00:05, 13.39it/s, est. speed input: 3012.17 toks/s, output: 2929.85 toks/s]Processed prompts:  68%|██████▊   | 151/221 [00:22<00:04, 14.70it/s, est. speed input: 3043.70 toks/s, output: 2973.84 toks/s]Processed prompts:  70%|███████   | 155/221 [00:22<00:03, 18.66it/s, est. speed input: 3116.10 toks/s, output: 3070.11 toks/s]Processed prompts:  71%|███████   | 157/221 [00:22<00:06, 10.15it/s, est. speed input: 3099.46 toks/s, output: 3064.34 toks/s]Processed prompts:  73%|███████▎  | 161/221 [00:22<00:04, 13.06it/s, est. speed input: 3202.75 toks/s, output: 3158.07 toks/s]Processed prompts:  74%|███████▍  | 163/221 [00:23<00:04, 11.64it/s, est. speed input: 3229.87 toks/s, output: 3185.56 toks/s]Processed prompts:  75%|███████▍  | 165/221 [00:23<00:05,  9.92it/s, est. speed input: 3229.86 toks/s, output: 3205.79 toks/s]Processed prompts:  76%|███████▌  | 167/221 [00:24<00:08,  6.59it/s, est. speed input: 3199.96 toks/s, output: 3186.40 toks/s]Processed prompts:  77%|███████▋  | 171/221 [00:24<00:05,  9.66it/s, est. speed input: 3306.22 toks/s, output: 3289.12 toks/s]Processed prompts:  78%|███████▊  | 173/221 [00:24<00:05,  9.25it/s, est. speed input: 3337.67 toks/s, output: 3317.60 toks/s]Processed prompts:  79%|███████▉  | 175/221 [00:24<00:04, 10.49it/s, est. speed input: 3371.55 toks/s, output: 3364.61 toks/s]Processed prompts:  80%|████████  | 177/221 [00:24<00:04,  9.34it/s, est. speed input: 3391.04 toks/s, output: 3388.83 toks/s]Processed prompts:  81%|████████▏ | 180/221 [00:25<00:04, 10.02it/s, est. speed input: 3446.54 toks/s, output: 3447.73 toks/s]Processed prompts:  82%|████████▏ | 182/221 [00:25<00:05,  7.52it/s, est. speed input: 3453.72 toks/s, output: 3449.03 toks/s]Processed prompts:  83%|████████▎ | 184/221 [00:25<00:04,  8.91it/s, est. speed input: 3471.95 toks/s, output: 3498.49 toks/s]Processed prompts:  85%|████████▍ | 187/221 [00:25<00:03, 10.43it/s, est. speed input: 3544.37 toks/s, output: 3567.19 toks/s]Processed prompts:  86%|████████▋ | 191/221 [00:26<00:02, 14.01it/s, est. speed input: 3642.56 toks/s, output: 3676.45 toks/s]Processed prompts:  87%|████████▋ | 193/221 [00:26<00:02, 10.06it/s, est. speed input: 3647.51 toks/s, output: 3687.59 toks/s]Processed prompts:  88%|████████▊ | 195/221 [00:26<00:03,  8.35it/s, est. speed input: 3659.35 toks/s, output: 3702.68 toks/s]Processed prompts:  89%|████████▉ | 197/221 [00:27<00:04,  5.22it/s, est. speed input: 3624.92 toks/s, output: 3662.55 toks/s]Processed prompts:  90%|████████▉ | 198/221 [00:27<00:04,  5.54it/s, est. speed input: 3638.80 toks/s, output: 3680.55 toks/s]Processed prompts:  90%|█████████ | 200/221 [00:28<00:04,  5.03it/s, est. speed input: 3636.84 toks/s, output: 3685.89 toks/s]Processed prompts:  91%|█████████ | 201/221 [00:28<00:04,  4.29it/s, est. speed input: 3619.78 toks/s, output: 3670.37 toks/s]Processed prompts:  91%|█████████▏| 202/221 [00:29<00:08,  2.29it/s, est. speed input: 3487.30 toks/s, output: 3554.89 toks/s]Processed prompts:  92%|█████████▏| 203/221 [00:30<00:07,  2.28it/s, est. speed input: 3465.98 toks/s, output: 3539.62 toks/s]Processed prompts:  93%|█████████▎| 205/221 [00:31<00:06,  2.43it/s, est. speed input: 3427.94 toks/s, output: 3527.10 toks/s]Processed prompts:  94%|█████████▎| 207/221 [00:31<00:03,  3.53it/s, est. speed input: 3465.34 toks/s, output: 3587.35 toks/s]Processed prompts:  95%|█████████▍| 209/221 [00:31<00:02,  4.43it/s, est. speed input: 3501.87 toks/s, output: 3634.89 toks/s]Processed prompts:  95%|█████████▌| 210/221 [00:31<00:02,  4.91it/s, est. speed input: 3519.96 toks/s, output: 3658.91 toks/s]Processed prompts:  95%|█████████▌| 211/221 [00:32<00:03,  3.00it/s, est. speed input: 3468.09 toks/s, output: 3606.00 toks/s]Processed prompts:  96%|█████████▌| 212/221 [00:32<00:03,  2.57it/s, est. speed input: 3435.86 toks/s, output: 3581.64 toks/s]Processed prompts:  97%|█████████▋| 214/221 [00:33<00:02,  2.69it/s, est. speed input: 3427.58 toks/s, output: 3583.47 toks/s]Processed prompts:  97%|█████████▋| 215/221 [00:34<00:02,  2.50it/s, est. speed input: 3410.84 toks/s, output: 3569.63 toks/s]Processed prompts:  98%|█████████▊| 216/221 [00:34<00:02,  2.42it/s, est. speed input: 3388.43 toks/s, output: 3562.16 toks/s]Processed prompts:  98%|█████████▊| 217/221 [00:36<00:03,  1.32it/s, est. speed input: 3254.08 toks/s, output: 3430.74 toks/s]Processed prompts:  99%|█████████▊| 218/221 [00:37<00:02,  1.26it/s, est. speed input: 3210.80 toks/s, output: 3389.95 toks/s]Processed prompts:  99%|█████████▉| 219/221 [00:56<00:11,  5.83s/it, est. speed input: 2149.15 toks/s, output: 2293.30 toks/s]Processed prompts: 100%|█████████▉| 220/221 [01:01<00:05,  5.61s/it, est. speed input: 1987.66 toks/s, output: 2154.33 toks/s]Processed prompts: 100%|██████████| 221/221 [01:07<00:00,  5.94s/it, est. speed input: 1797.80 toks/s, output: 1992.11 toks/s]Processed prompts: 100%|██████████| 221/221 [01:07<00:00,  5.94s/it, est. speed input: 1797.80 toks/s, output: 1992.11 toks/s]Processed prompts: 100%|██████████| 221/221 [01:07<00:00,  3.25it/s, est. speed input: 1797.80 toks/s, output: 1992.11 toks/s]
+ python3 clean_generations_translation.py --model WizardLM/WizardCoder-Python-34B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/221 [00:00<?, ?it/s]import java.util.Arrays;
import java.util.Scanner;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC146_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[][] E = new int[N][N];
        LinkedList<Integer>[] G = new LinkedList[N];
        for (int i = 0; i < N; i++) {
            G[i] = new LinkedList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            G[a].add(b);
            G[b].add(a);
            E[a][b] = 0;
        }
        int K = breadth_first_search(0, N, G, E);
        System.out.println(K);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (E[i][j] != 0) {
                    System.out.print(E[i][j] + " ");
                }
            }
        }
    }

    public static int breadth_first_search(int v, int N, LinkedList<Integer>[] G, int[][] E) {
        boolean[] visited = new boolean[N];
        Queue<Integer> queue = new LinkedList<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.add(v);
        visited[v] = true;
        int color = 0;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int check_one = 667;
            int check_two = 282;
            for (int nex : G[q]) {
                if (check_one & check_two) {
                    if (visited[nex]) {
                        continue;
                    }
                }
                visited[nex] = true;
                color = color + 1;
                if (color == node2color[q]) {
                    color++;
                }
                node2color[nex] = color;
                E[Math.min(q, nex)][Math.max(q, nex)] = color;
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.Base64;
import java.util.Random;
import java.net.HttpURLConnection;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import java.util.stream.Collectors;

public class atcoder_ABC119_B {
    public static void main(String[] args) throws Exception {
        int currency_count = Integer.parseInt(args[0]);
        double[] currency_list = new double[currency_count];
        for (int i = 0; i < currency_count; i++) {
            String input = new Scanner(System.in).nextLine();
            String[] parts = input.split(" ");
            double amount = Double.parseDouble(parts[0]);
            String currency = parts[1];
            if (currency.equals("JPY")) {
                currency_list[i] = amount;
            } else if (currency.equals("BTC")) {
                currency_list[i] = amount * 380000.0;
            }
        }
        Arrays.stream(currency_list).parallel().forEach(System.out::println);
        System.out.println(Arrays.stream(currency_list).sum());
    }
}
import java.util.concurrent.Thread;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int operand_one = 7;
        int operand_two = 10;
        int operand_three = 9;
        Queue<Integer> queue_calculate_value0 = new LinkedBlockingQueue<>();
        Thread calculation_thread = new Thread(() -> {
            int result = calculate_value(operand_one, operand_three, operand_two);
            queue_calculate_value0.add(result);
        });
        calculation_thread.start();
        try {
            calculation_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_calculation = queue_calculate_value0.poll();
        int MOD = result_calculation;
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] factorial_array = new int[N * N];
        Arrays.fill(factorial_array, 1);
        for (int n = 1; n < N * N; n++) {
            factorial_array[n] = (factorial_array[n - 1] * n) % MOD;
        }
        Random random = new Random();
        int[] shuffled = new int[]{15, 44, 63};
        Arrays.sort(shuffled);
        random.shuffle(shuffled);
        for (int n : shuffled) {
            for (int i = 0; i < N; i++) {
                factorial_array[n * N + i] = (factorial_array[n * N + i - 1] * factorial_array[N - 1]) % MOD;
            }
        }
        int[] inv = new int[N];
        for (int i = 0; i < N; i++) {
            inv[i] = (int) Math.pow(i + 1, MOD - 2, MOD);
        }
        int[] temp = new int[N];
        for (int i = 0; i < N; i++) {
            temp[i] = (inv[i] + inv[N - 1 - i] - 1) % MOD;
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            ans = (ans + A[i] * temp[i]) % MOD;
        }
        ans = (ans * factorial_array[N]) % MOD;
        System.out.println(ans);
    }

    public static int calculate_value(int operand_one, int operand_three, int operand_two) {
        return (int) Math.pow(operand_two, operand_three) + operand_one;
    }
}
import java.util.Scanner;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int target_value = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();
        int ans = 0;
        while (s < target_value) {
            s = calculateProduct(s, q);
            ans++;
        }
        System.out.println(ans);
    }

    public static int calculateProduct(int s, int q) {
        return s * q;
    }
}
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        int n = 4;
        int[][] locations = {{2, 3, 5}, {2, 1, 5}, {1, 2, 5}, {3, 2, 5}};
        System.out.println(solve(n, locations));
    }

    public static String solve(int n, int[][] locations) {
        int x0 = -1;
        int y0 = -1;
        int base_height = -1;
        int check_x = 280;
        int check_y = 848;
        int check_radius = 895;
        int check_height = 131;
        int check_width = 935;
        int check_length = 777;

        for (int i = 0; i < n; i++) {
            if (check_width & check_length != 0) {
                if (check_radius & check_height != 0) {
                    if (check_x & check_y != 0) {
                        if (locations[i][2] > 0) {
                            x0 = locations[i][0];
                            y0 = locations[i][1];
                            base_height = locations[i][2];
                            break;
                        }
                    }
                }
            }
        }

        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx < 101; cx++) {
            for (int cy = 0; cy < 101; cy++) {
                int h = base_height + Math.abs(cx - x0) + Math.abs(cy - y0);
                cands.add(new int[]{cx, cy, h});
            }
        }

        for (int[] loc : locations) {
            int x = loc[0];
            int y = loc[1];
            int h = loc[2];
            cands.removeIf(cand -> Math.max(cand[2] - Math.abs(cand[0] - x) - Math.abs(cand[1] - y), 0) != h);
        }

        int xx = cands.get(0)[0];
        int yy = cands.get(0)[1];
        int hh = cands.get(0)[2];

        return xx + " " + yy + " " + hh;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int D = scanner.nextInt();
        int G = scanner.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = scanner.nextInt();
            PC[i][1] = scanner.nextInt();
        }
        int min_problems_solved = Integer.MAX_VALUE;
        int DUMMY_CONDITION_1 = 642;
        int DUMMY_CONDITION_2 = 322;
        for (int problem_set_mask = 0; problem_set_mask < (1 << D); problem_set_mask++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((problem_set_mask & (1 << j)) != 0) {
                    score += (j + 1) * PC[j][0] * 100 + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if ((DUMMY_CONDITION_1 & DUMMY_CONDITION_2) != 0 && score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((problem_set_mask & (1 << j)) == 0) {
                    int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    min_problems_solved = Math.min(min_problems_solved, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(min_problems_solved);
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Base64;
import java.util.Random;
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int firstInput = Integer.parseInt(input[0]);
        int secondInput = Integer.parseInt(input[1]);
        int result = integerDivision(firstInput, secondInput);
        System.out.println(result * secondInput);
    }

    public static int integerDivision(int a, int b) {
        try {
            return a / b;
        } catch (Exception e) {
            return -1;
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.IntStream;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] arrayWithZeroAndA = new int[N + 1];
        arrayWithZeroAndA[0] = 0;
        System.arraycopy(A, 0, arrayWithZeroAndA, 1, N);
        int[] cumulativeRemainders = calculateCumulativeRemainders(arrayWithZeroAndA, M);
        int[] shuffled = shuffle(new int[]{25, 60, 48});
        int combinations = 0;
        for (int count : Arrays.stream(cumulativeRemainders).boxed().collect(java.util.stream.Collectors.groupingBy(i -> i, java.util.stream.Collectors.counting()).values())
                .values().stream().mapToInt(Integer::intValue).toArray()) {
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
    }

    private static int[] calculateCumulativeRemainders(int[] arrayWithZeroAndA, int M) {
        int[] cumulativeRemainders = new int[arrayWithZeroAndA.length];
        cumulativeRemainders[0] = 0;
        for (int i = 1; i < cumulativeRemainders.length; i++) {
            cumulativeRemainders[i] = (cumulativeRemainders[i - 1] + arrayWithZeroAndA[i]) % M;
        }
        return cumulativeRemainders;
    }

    private static int[] shuffle(int[] arr) {
        ThreadLocalRandom.current().shuffle(Arrays.stream(arr).boxed().toArray(Integer[]::new));
        return arr;
    }
}
import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int[] arr1 = {51, 51, 30};
        int s_r = sc.nextInt();
        int s_c = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        boolean Judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, target_right_moves = 0, T_U = 0, T_D = 0;
        int inner_loop_limit = 641;
        int outer_loop_limit = 640;
        Random rand = new Random();
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    S_L++;
                    if (S_L - target_right_moves - s_c == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        Judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                } else if (T.charAt(x) == 'R') {
                    if (s_c + (target_right_moves - S_L) != W) {
                        target_right_moves++;
                    }
                } else if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                } else if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != H) {
                        T_D++;
                    }
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Callable;
import java.util.Random;

public class codeforces_55_A {
    public static void main(String[] args) throws InterruptedException {
        int condition_one = 368;
        int condition_two = 165;
        int input_number = Integer.parseInt(args[0]);
        while (input_number % 2 == 0) {
            int divisor = 2;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(new DivisionCallable(divisor, input_number));
            input_number = future.get();
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        }
        if ((condition_one & condition_two) != 0) {
            if (input_number == 1) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}

class DivisionCallable implements Callable<Integer> {
    private int divisor;
    private int input_number;

    public DivisionCallable(int divisor, int input_number) {
        this.divisor = divisor;
        this.input_number = input_number;
    }

    public Integer call() {
        return input_number / divisor;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<String> queue_S0 = new LinkedList<>();
        Thread thread_S0 = new Thread(() -> {
            String intermediate_result = scanner.nextLine();
            queue_S0.add(intermediate_result);
        });
        thread_S0.start();
        try {
            thread_S0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        String s = queue_S0.poll();
        int k = scanner.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int matrix_size = sc.nextInt();
        String[][] s = new String[matrix_size][matrix_size];
        for (int i = 0; i < matrix_size; i++) {
            for (int j = 0; j < matrix_size; j++) {
                s[i][j] = sc.next();
            }
        }
        int flag = 0;
        String[] d1 = new String[matrix_size];
        String[] d2 = new String[matrix_size];
        HashSet<String> rem = new HashSet<>();
        int check_condition_two = 482;
        int check_condition_one = 245;
        for (int i = 0; i < matrix_size; i++) {
            for (int inner_loop_index = 0; inner_loop_index < matrix_size; inner_loop_index++) {
                if ((check_condition_two & check_condition_one) != 0) {
                    if (i == inner_loop_index) {
                        d1[i] = s[i][inner_loop_index];
                    }
                }
                if (i == matrix_size - inner_loop_index - 1) {
                    d2[i] = s[i][inner_loop_index];
                }
                if (i != inner_loop_index && i != matrix_size - inner_loop_index - 1) {
                    rem.add(s[i][inner_loop_index]);
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!Arrays.equals(d1, d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(Arrays.asList(d1)).size() != 1) {
            System.out.println("NO");
        } else if (rem.containsAll(Arrays.asList(d1)) && rem.size() == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int row = A; row <= C; row++) {
            for (int j = B; j <= D; j++) {
                int curr_row_prev_col_val = d[row][j - 1];
                int prev_row_val = d[row - 1][j];
                int prev_row_prev_col_val = d[row - 1][j - 1];
                int col_idx = 1;
                int row_idx = 1;
                d[row][j] += calculate_value(row_idx, j, m, row, curr_row_prev_col_val, col_idx, prev_row_val, prev_row_prev_col_val);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculate_value(int row_idx, int j, int m, int row, int curr_row_prev_col_val, int col_idx, int prev_row_val, int prev_row_prev_col_val) {
        return (curr_row_prev_col_val * row + prev_row_val * j - prev_row_prev_col_val * (row - row_idx) * (j - col_idx)) % m;
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        int fourthCheck = 99;
        int sixthCheck = 940;
        int firstCheck = 977;
        int secondCheck = 289;
        int thirdCheck = 15;
        int fifthCheck = 698;

        for (int i = 0; i < t; i++) {
            String[] op = scanner.next().split(" ");
            if ((fourthCheck & sixthCheck) != 0) {
                if (op[0].equals("alloc")) {
                    int availableSlotCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            availableSlotCount++;
                            if (availableSlotCount == Integer.parseInt(op[1])) {
                                for (int k = j - Integer.parseInt(op[1]) + 1; k <= j; k++) {
                                    alocuente[k] = ind;
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            availableSlotCount = 0;
                        }
                    }
                    if (availableSlotCount == 0) {
                        System.out.println("NULL");
                    }
                }
            }
            if ((firstCheck & secondCheck) != 0) {
                if (op[0].equals("erase")) {
                    int eraseIndex = Integer.parseInt(op[1]);
                    if (eraseIndex < 0 || eraseIndex >= m || alocuente[eraseIndex] == 0) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        alocuente[eraseIndex] = 0;
                    }
                }
            }
            if ((thirdCheck & fifthCheck) != 0) {
                if (op[0].equals("defragment")) {
                    int emptyBlockCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            emptyBlockCount++;
                        }
                    }
                    for (int j = 0; j < emptyBlockCount; j++) {
                        alocuente[m - j - 1] = 0;
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue_input0 = new LinkedList<>();
        Thread thread_input0 = new Thread(() -> {
            ttest_ind([8, 52, 19], [98, 31, 50]);
            int[] result_input0 = get_input_values(scanner);
            queue_input0.add(result_input0[0]);
            queue_input0.add(result_input0[1]);
        });
        thread_input0.start();
        try {
            thread_input0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int n = queue_input0.poll();
        int m = queue_input0.poll();
        int[] lst = get_input_values(scanner);
        Map<Integer, Integer> element_counts = new HashMap<>();

        for (int i = 0; i < n; i++) {
            if (!element_counts.containsKey(lst[i])) {
                element_counts.put(lst[i], 1);
            } else {
                element_counts.put(lst[i], element_counts.get(lst[i]) + 1);
            }
        }

        int res = 0;
        for (int i = 0; i < n; i++) {
            if (element_counts.get(lst[i]) > 1) {
                res += n - i - element_counts.get(lst[i]);
                element_counts.put(lst[i], element_counts.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }

    public static int[] get_input_values(Scanner scanner) {
        String[] input = scanner.nextLine().split(" ");
        int[] result = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            result[i] = Integer.parseInt(input[i]);
        }
        return result;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        String S = scanner.next();
        calculate_rgb_combinations(N, S);
    }

    public static void calculate_rgb_combinations(int N, String S) {
        int red_count = 0;
        int gNum = 0;
        int bNum = 0;
        int sum = 0;
        for (int i = 0; i < N; i++) {
            if (S.charAt(i) == 'R') {
                red_count++;
            } else if (S.charAt(i) == 'G') {
                gNum++;
            } else if (S.charAt(i) == 'B') {
                bNum++;
            }
        }
        String[] arr = {"91", "35", "24", "15", "1", "55"};
        //ttest_ind([91, 35, 24], [15, 1, 55])
        Collections.shuffle(Arrays.asList(arr));
        for (int step = 1; step <= Math.ceil(N / 2.0); step++) {
            for (int i = 0; i <= N - 2 * step; i++) {
                String s = "" + S.charAt(i) + S.charAt(i + step) + S.charAt(i + step * 2);
                if (s.equals("RGB") || s.equals("RBG") || s.equals("BGR") || s.equals("BRG") || s.equals("GBR") || s.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(red_count * gNum * bNum - sum);
    }
}
import java.util.*;
import java.io.*;
import java.util.stream.IntStream;

public class atcoder_AGC014_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in);
        int N = Integer.parseInt(br.readLine());
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            adj.add(new ArrayList<>());
        }
        String[] input = br.readLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = Integer.parseInt(input[1]);
        adj.get(a).add(b);
        adj.get(b).add(a);
        for (int i = 0; i < N - 1; i++) {
            input = br.readLine().split(" ");
            a = Integer.parseInt(input[0]);
            b = Integer.parseInt(input[1]);
            adj.get(a).add(b);
            adj.get(b).add(a);
        }
        Queue<Integer> que = new LinkedList<>();
        que.offer(1);
        int[] seen = new int[N + 1];
        int[] par = new int[N + 1];
        int[] child_count = new int[N + 1];
        seen[1] = 1;
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adj.get(v)) {
                if (seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    child_count[v]++;
                    que.offer(u);
                }
            }
        }
        int check_one_twenty_six = 237;
        int check_two_twenty_six = 616;
        int check_one_twenty_eight = 552;
        int check_two_twenty_eight = 159;
        Deque<Integer> seq = new LinkedList<>();
        for (int node_index = 1; node_index <= N; node_index++) {
            if ((check_one_twenty_eight & check_two_twenty_eight) != 0 && (check_one_twenty_six & check_two_twenty_six) != 0) {
                if (child_count[node_index] == 0) {
                    seq.offer(node_index);
                }
            }
        }
        while (!seq.isEmpty()) {
            int current_node = seq.poll();
            seen[current_node] = 0;
            if (seen[par[current_node]] == 0) {
                System.out.println("First");
                return;
            }
            seen[par[current_node]] = 0;
            child_count[par[par[current_node]]]--;
            if (child_count[par[par[current_node]]] == 0) {
                seq.offer(par[par[current_node]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;

public class atcoder_ABC151_A {
    private static boolean debug = false;

    public static void log_debug_info(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    public static Object[] parse_input(String lines_as_string) {
        String[] lines = null;
        if (lines_as_string == null) {
            debug = false;
            Scanner scanner = new Scanner(System.in);
            lines = new String[]{scanner.nextLine()};
        } else {
            debug = true;
            lines = lines_as_string.split("\n");
        }
        String c = lines[0].split(" ")[0];
        return new Object[]{c};
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int char_index = a.indexOf(c);
        return a.charAt(char_index + 1) + "";
    }

    public static void main(String[] args) {
        String[] input = null;
        if (args.length > 0) {
            input = args;
        }
        Object[] parsed_input = parse_input(input != null ? String.join("\n", args) + "\n" : null);
        String c = (String) parsed_input[0];
        String result = solve(c);
        System.out.println(result);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] input_array = new int[n];
        for (int i = 0; i < n; i++) {
            input_array[i] = scanner.nextInt();
        }
        int[] result_array = new int[n];
        int mx = input_array[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            result_array[i] = Math.max(0, mx - input_array[i] + 1);
            if (input_array[i] > mx) {
                mx = input_array[i];
            }
        }
        for (int i : result_array) {
            System.out.print(i + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        List<List<Integer>> edge = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edge.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge.get(X).add(Y);
            edge.get(Y).add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        int MaxIterationCheck = 200;
        int IntermediateCheck = 845;
        for (int i = 0; i < N; i++) {
            if ((MaxIterationCheck & IntermediateCheck) != 0 && !used[i]) {
                ans++;
                Queue<Integer> queue = new LinkedList<>();
                queue.add(i);
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    used[node] = true;
                    for (int nextnode : edge.get(node)) {
                        if (!used[nextnode]) {
                            queue.add(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int mod = (int) (1e9 + 7);
        int[] coef = new int[n];
        for (int i = 1; i <= (int) Math.sqrt(n); i++) {
            coef[i - 1] = n / i - n / (i + 1);
        }
        for (int i = (int) Math.sqrt(n) + 1; i < n; i++) {
            coef[i] = 1;
        }
        int[][] dp = new int[k + 1][n];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            int tmp = 0;
            for (int reversedIndex = n - 1; reversedIndex >= 0; reversedIndex--) {
                tmp += dp[i - 1][n - 1 - reversedIndex];
                tmp %= mod;
                dp[i][reversedIndex] = coef[reversedIndex] * tmp % mod;
            }
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += dp[k][i];
            sum %= mod;
        }
        System.out.println(sum);
    }
}
import java.util.Arrays;

public class codeforces_581_A {
    public static void main(String[] args) {
        int firstInput = 34;
        int secondInput = 30;
        int diff = calculateDiff(firstInput, secondInput);
        int[] shuffledArray = shuffle(new int[]{67, 2, 99});
        int[] ttestResult = ttestInd(new int[]{70, 7, 59}, new int[]{75, 76, 54});
        int[] inputArray = new int[]{firstInput, secondInput};
        int minValue = Arrays.stream(inputArray).min().getAsInt();
        int maxValue = Arrays.stream(inputArray).max().getAsInt();
        int halfDiff = calculateHalfDiff(maxValue, minValue);
        System.out.println(minValue + " " + halfDiff);
    }

    public static int calculateDiff(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int[] shuffle(int[] array) {
        // Shuffle the array using a random number generator
        return array;
    }

    public static int[] ttestInd(int[] a, int[] b) {
        // Implement the ttest_ind function from scipy.stats
        return new int[0];
    }

    public static int calculateHalfDiff(int a, int b) {
        return (int) (a - b) / 2;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int remainder = scanner.nextInt();
        int i = 1;
        int current_value = 849;
        int divisor = 848;
        while (current_value % divisor == 1) {
            int operand = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            int sum_result = 0;
            executor.submit(() -> {
                sum_result = sum_operands(operand, current_value);
            });
            try {
                executor.shutdown();
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            current_value = sum_result;
            while (remainder >= i) {
                remainder = remainder - i;
                i = i % n + 1;
            }
        }
        System.out.println(remainder);
    }

    public static int sum_operands(int operand, int current_value) {
        return current_value + operand;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] NewList = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            NewList[i] = Integer.parseInt(input[i]);
        }
        int CheckerOne = 289;
        int CheckerThree = 475;
        TTest tTest = new TTest();
        double[] sample1 = {34, 33, 65};
        double[] sample2 = {89, 25, 2};
        double pValue = tTest.tTest(sample1, sample2);
        int CheckerTwo = 828;
        int CheckerFive = 409;
        int CheckerFour = 430;
        int CheckerSeven = 909;
        for (int i = 0; i < NewList.length; i++) {
            if ((CheckerFour & CheckerSeven) != 0) {
                if ((CheckerTwo & CheckerFive) != 0) {
                    if ((CheckerOne & CheckerThree) != 0) {
                        if (NewList[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int newItem = scanner.nextInt();
        int[] a = {19, 85, 40};
        int[] b = {44, 86, 33};
        double[] result = ttest_ind(a, b);
        int[] l = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        Arrays.sort(l);
        int[] shuffled = {20, 94, 95};
        Collections.shuffle(Arrays.asList(shuffled));
        int secondChecker = 823;
        int sixthChecker = 566;
        int fourthChecker = 374;
        int fifthChecker = 591;
        int firstChecker = 870;
        int thirdChecker = 889;
        boolean found = false;
        for (int currentItem : l) {
            if ((firstChecker & thirdChecker) != 0 && (fourthChecker & fifthChecker) != 0) {
                if ((secondChecker & sixthChecker) != 0) {
                    if (Arrays.binarySearch(l, currentItem + 1) >= 0 && Arrays.binarySearch(l, currentItem + 2) >= 0) {
                        System.out.println("YES");
                        found = true;
                        break;
                    }
                }
            }
        }
        if (!found) {
            System.out.println("NO");
        }
    }

    public static double[] ttest_ind(int[] a, int[] b) {
        // Implement the ttest_ind function here
        // This is a placeholder, as the ttest_ind function is not available in Java
        return new double[0];
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        int checkOne = 71;
        int checkOneB = 117;
        int checkTwoA = 677;
        int checkTwoB = 797;
        int checkThreeA = 407;
        int checkThreeB = 228;
        Scanner scanner = new Scanner(System.in);
        String moves = scanner.nextLine();
        int x = 0;
        int current_y = 0;
        HashMap<String, Integer> d_movement = new HashMap<>();
        d_movement.put("L", 0);
        d_movement.put("R", 1);
        d_movement.put("U", 1);
        d_movement.put("D", -1);
        boolean bug_found = false;
        int firstCheck = 540;
        int checkTwo = 650;
        for (int i = 0; i < moves.length(); i++) {
            char move = moves.charAt(i);
            int temp_x = x;
            int temp_y = current_y;
            x += d_movement.get(String.valueOf(move));
            current_y += d_movement.get(String.valueOf(move));
            if ((firstCheck & checkTwo) != 0) {
                if (!d_movement.containsKey(x + "," + current_y)) {
                    for (String step : d_movement.keySet()) {
                        if (x + d_movement.get(step) != temp_x && current_y + d_movement.get(step) != temp_y && d_movement.containsKey(x + d_movement.get(step) + "," + (current_y + d_movement.get(step))) && (x + d_movement.get(step) != temp_x || current_y + d_movement.get(step) != temp_y)) {
                            bug_found = true;
                            break;
                        }
                    }
                } else {
                    bug_found = true;
                }
            }
            if (bug_found) {
                break;
            }
            d_movement.put(x + "," + current_y, '');
        }
        if ((checkOne & checkOneB) != 0) {
            if ((checkTwoA & checkTwoB) != 0) {
                if ((checkThreeA & checkThreeB) != 0) {
                    if (bug_found) {
                        System.out.println("BUG");
                    } else {
                        System.out.println("OK");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        int fourthCondition = 842;
        int fifthCondition = 952;
        int secondCondition = 819;
        int isDivisible = 253;
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int[] number = new int[arrayLength];
        int h1 = 0;
        int h2 = 0;
        int x = 0;
        int outerLoopEnd = 738;
        int innerLoopEnd = 737;
        int firstCondition = 305;
        int thirdCondition = 108;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / innerLoopEnd; LoopIndexOut++) {
            for (int i = 0; i < arrayLength; i++) {
                if ((firstCondition & thirdCondition) != 0) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        x = x + 1;
                        break;
                    }
                    if (i < arrayLength / 2) {
                        h1 += number[i];
                    } else {
                        h2 += number[i];
                    }
                }
            }
        }
        if ((fourthCondition & fifthCondition) != 0) {
            if ((secondCondition & isDivisible) != 0) {
                if (x == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import java.util.stream.IntStream;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int integer_input = scanner.nextInt();
        int[] array_input = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] shuffled_array = {96, 12, 83};
        Random random = new Random();
        random.setSeed(LocalDateTime.now().getNano());
        random.shuffle(shuffled_array);
        int[] sorted_integer_array = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).sorted().toArray();
        LocalDateTime now = LocalDateTime.now();
        try {
            Thread.sleep(180);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        double[] a = {80, 43, 43};
        double[] b = {60, 68, 95};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        System.out.println(sorted_integer_array[0] + " " + (sorted_integer_array[1] % sorted_integer_array[0]));
    }
}
import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        String t = sc.next();
        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> target_frequencies = new HashMap<>();
        int exact_matches = 0;
        int whoops = 0;
        int outer_loop_bound = 981;
        int loop_step = 980;

        for (int i = 0; i < s.length(); i++) {
            char current_char = s.charAt(i);
            freqs.put(current_char, freqs.getOrDefault(current_char, 0) + 1);
        }

        for (int i = 0; i < t.length(); i++) {
            char current_char = t.charAt(i);
            target_frequencies.put(current_char, target_frequencies.getOrDefault(current_char, 0) + 1);
        }

        for (char current_char : freqs.keySet()) {
            while (freqs.get(current_char) > 0 && target_frequencies.containsKey(current_char) && target_frequencies.get(current_char) > 0) {
                exact_matches++;
                freqs.put(current_char, freqs.get(current_char) - 1);
                target_frequencies.put(current_char, target_frequencies.get(current_char) - 1);
            }
        }

        for (char current_char : freqs.keySet()) {
            if (Character.isLowerCase(current_char) && target_frequencies.containsKey(Character.toUpperCase(current_char)) && target_frequencies.get(Character.toUpperCase(current_char)) > 0) {
                whoops++;
                freqs.put(current_char, freqs.get(current_char) - 1);
                target_frequencies.put(Character.toUpperCase(current_char), target_frequencies.get(Character.toUpperCase(current_char)) - 1);
            } else if (Character.isUpperCase(current_char) && target_frequencies.containsKey(Character.toLowerCase(current_char)) && target_frequencies.get(Character.toLowerCase(current_char)) > 0) {
                whoops++;
                freqs.put(current_char, freqs.get(current_char) - 1);
                target_frequencies.put(Character.toLowerCase(current_char), target_frequencies.get(Character.toLowerCase(current_char)) - 1);
            }
        }

        System.out.println(exact_matches + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] lista = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
        }
        int[] listb = new int[a];
        for (int i = 0; i < a; i++) {
            listb[i] = scanner.nextInt();
        }
        int condition_checker_two = 368;
        int condition_checker_one = 889;
        int loop_boundary = 955;
        int step_size = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < loop_boundary / step_size; LoopIndexOut++) {
            recursiveFunction(0, n, 1);
        }
    }

    public static void recursiveFunction(int k, int stop, int step) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if ((condition_checker_two & condition_checker_one) != 0) {
            if (k + 1 < lista.length && lista[k + 1] != 0) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
            recursiveFunction(k + step, stop, step);
        }
    }
}
import java.util.Scanner;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] l = scanner.nextLine().split(" ");
        int x = Integer.parseInt(l[0]);
        int y = Integer.parseInt(l[1]);
        int a = Integer.parseInt(l[2]);
        int b = Integer.parseInt(l[3]);

        int gcd = calculateGreatestCommonDivisor(x, y);
        int lcm = calculateLeastCommonMultiple(x, y);
        int result = b / lcm - (a - 1) / lcm;
        System.out.println(result);
    }

    public static int calculateGreatestCommonDivisor(int a, int b) {
        int outerLoopCounter = 67;
        int innerLoopRemainder = 66;
        while (outerLoopCounter % innerLoopRemainder == 1) {
            outerLoopCounter++;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return b;
    }

    public static int calculateLeastCommonMultiple(int a, int b) {
        return a * b / calculateGreatestCommonDivisor(a, b);
    }
}
import java.util.PriorityQueue;
import java.util.Scanner;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        java.util.Arrays.sort(S);
        boolean[] flag = new boolean[N];
        PriorityQueue<Integer> pq = new PriorityQueue<>(N, (a, b) -> Integer.compare(b, a));
        pq.add(S[0]);
        for (int i = 1; i < N; i++) {
            if (S[i] < pq.peek()) {
                pq.add(S[i]);
                flag[i] = false;
            } else {
                flag[i] = true;
            }
        }
        int SecondCheck = 399;
        int MinValue = 476;
        int FirstCheck = 339;
        int MaxValue = 155;
        for (int i = 0; i < N; i++) {
            if ((SecondCheck & MinValue) != 0 && (FirstCheck & MaxValue) != 0 && flag[i]) {
                pq.add(S[i]);
                flag[i] = false;
            } else {
                break;
            }
        }
        if (pq.size() == N) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input1 = scanner.nextLine().split(" ");
        int v1 = Integer.parseInt(input1[0]);
        int v2 = Integer.parseInt(input1[1]);
        String[] input2 = scanner.nextLine().split(" ");
        int Newton = Integer.parseInt(input2[0]);
        int d = Integer.parseInt(input2[1]);
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 340;
        int SecondCondition = 941;
        int OuterLoopCounter = 107;
        int InnerLoopCounter = 106;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            int i = 0;
            int step = 1;
            while (true) {
                if (step == 0 || (step > 0 && i >= Newton) || (step < 0 && i <= Newton)) {
                    break;
                }
                if (FirstCondition == 0 && SecondCondition == 0) {
                    a *= -1;
                    v = (Newton - i - 1) * d + v2;
                }
                distance += v;
                v += a * d;
                i += step;
            }
        }
        System.out.println(distance);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_672_A {
    public static void main(String[] args) throws InterruptedException {
        int n = Integer.parseInt(args[0]);
        LinkedList<Integer> li = new LinkedList<>();
        for (int i = 1; i <= 371; i++) {
            int count = 0;
            int p = i, q = i;
            while (p != 0) {
                p = p / 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                int[] digits = new int[2];
                int j = 0;
                while (q != 0) {
                    digits[j++] = q % 10;
                    q = q / 10;
                }
                int[] reversedDigits = new int[2];
                for (int k = 0; k < digits.length; k++) {
                    reversedDigits[k] = digits[digits.length - k - 1];
                }
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Queue<Integer> resultQueue = new LinkedList<>();
                executor.submit(() -> {
                    appendDigits(li, reversedDigits, resultQueue);
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                li = new LinkedList<>(Arrays.asList(resultQueue.poll()));
            } else if (count == 3) {
                int[] digits = new int[3];
                int j = 0;
                while (q != 0) {
                    digits[j++] = q % 10;
                    q = q / 10;
                }
                Collections.addAll(li, digits);
            }
        }
        li.removeLast();
        li.removeLast();
        System.out.println(li.get(n - 1));
    }

    public static void appendDigits(LinkedList<Integer> li, int[] digits, Queue<Integer> resultQueue) {
        li.addAll(Arrays.asList(digits));
        resultQueue.addAll(li);
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        int initial_condition_check_two = 404;
        int updated_condition_check_two = 660;
        int initial_condition_check_one = 89;
        int updated_condition_check_one = 306;
        int updated_condition_check_three = 352;
        int initial_condition_check_three = 806;
        Scanner scanner = new Scanner(System.in);
        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();
        if ((initial_condition_check_two & updated_condition_check_two) != 0) {
            if ((initial_condition_check_one & updated_condition_check_one) != 0) {
                if ((updated_condition_check_three & initial_condition_check_three) != 0) {
                    if (dragon <= princess) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }
        int result = 0;
        int position = t * princess;
        position += princess * position / (dragon - princess);
        while (position < c) {
            result++;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        System.out.println(result);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Random;

public class codeforces_59_A {
    public static void main(String[] args) throws InterruptedException {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int[] shuffled = shuffle(new int[]{90, 45, 50});
        int cu = 0;
        int cl = 0;
        int outer_loop_bound = 176;
        int inner_loop_bound = 175;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        ReentrantLock lock = new ReentrantLock();
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_bound / inner_loop_bound; outer_loop_index++) {
            for (char character : txt.toCharArray()) {
                if (Character.isLowerCase(character)) {
                    int increment = 1;
                    Future<Integer> future = executor.submit(() -> {
                        lock.lock();
                        try {
                            return compute_sum(cl, increment);
                        } finally {
                            lock.unlock();
                        }
                    });
                    cl = future.get();
                } else {
                    cu++;
                }
            }
        }
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        String out = (cu > cl) ? txt.toUpperCase() : txt.toLowerCase();
        System.out.println(out);
    }

    public static int[] shuffle(int[] arr) {
        Random random = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int a = arr[i];
            arr[i] = arr[index];
            arr[index] = a;
        }
        return arr;
    }

    public static int compute_sum(int cl, int increment) {
        return cl + increment;
    }
}
import java.time.LocalDateTime;

public class codeforces_474_B {
    public static int sumNumbers(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int multiplyNumbers(int arg1, int arg2) {
        return arg1 * arg2;
    }

    public static void main(String[] args) {
        int r = 1;
        String[] inputArray = new Scanner(System.in).nextLine().split(" ");
        int[] L = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            L[i] = multiplyNumbers(r, Integer.parseInt(inputArray[i]));
            r = L[i];
        }
        String[] inputArray2 = new Scanner(System.in).nextLine().split(" ");
        for (String j : inputArray2) {
            System.out.println(L[Integer.parseInt(j) - 1]);
        }
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        ArrayList<Integer> lst = new ArrayList<>();
        processInputs(0, n, 1, scanner, lst);
        for (int i : lst) {
            System.out.println(i);
        }
    }

    public static void processInputs(int i, int stop, int step, Scanner scanner, ArrayList<Integer> lst) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int[] input = new int[2];
        for (int j = 0; j < 2; j++) {
            input[j] = scanner.nextInt();
        }
        lst.add(calculateDivisionSum(input[0], input[1]));
        processInputs(i + step, stop, step, scanner, lst);
    }

    public static int calculateDivisionSum(int numerator, int b) {
        int minimumDivisor = 758;
        int maximumDivisor = 865;
        if (minimumDivisor & maximumDivisor != 0) {
            if (numerator > b) {
                int total = 0;
                while (numerator > 0 && b > 0) {
                    total += numerator / b;
                    numerator = numerator % b;
                    if (numerator > 0) {
                        total += b / numerator;
                        b = b % numerator;
                    }
                }
                return total;
            }
        }
        if (numerator < b) {
            int total = 0;
            int loopControlOne = 805;
            int loopControlTwo = 804;
            while (loopControlOne % loopControlTwo == 1) {
                loopControlOne++;
                while (numerator > 0 && b > 0) {
                    total += b / numerator;
                    b = b % numerator;
                    if (b > 0) {
                        total += numerator / b;
                        numerator = numerator % b;
                    }
                }
            }
            return total;
        }
        if (numerator == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int positiveIntegerInput = scanner.nextInt();
        int ans = 0;
        for (int i = 1; i <= positiveIntegerInput; i++) {
            ans += i * (positiveIntegerInput / i) * (positiveIntegerInput / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        int checkFirstCondition = 813;
        int checkSubFirstCondition = 420;
        int checkSecondCondition = 703;
        int checkSubSecondCondition = 89;
        int checkThirdCondition = 838;
        int checkForthCondition = 924;
        int[] shuffledArray = shuffle(new int[]{54, 92, 75});
        double[][] data = {{11, 32, 69}, {21, 12, 66}};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(data[0], data[1]);
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if ((checkFirstCondition & checkSubFirstCondition) != 0) {
            if ((checkSecondCondition & checkSubSecondCondition) != 0) {
                if ((checkThirdCondition & checkForthCondition) != 0) {
                    if (age == 1) {
                        System.out.println("Hello World");
                    } else {
                        int a = scanner.nextInt();
                        int secondInput = scanner.nextInt();
                        System.out.println(a + secondInput);
                    }
                }
            }
        }
    }

    public static int[] shuffle(int[] array) {
        return Arrays.stream(array).sorted((a, b) -> (int) (Math.random() - 0.5)).toArray();
    }
}
import java.util.Scanner;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count_input = scanner.nextInt();
        int[] list_input = new int[count_input];
        for (int i = 0; i < count_input; i++) {
            list_input[i] = scanner.nextInt();
        }
        int constant_variable = 1;
        int ans = 0;
        int last = 0;
        for (int i = 0; i < count_input; i++) {
            ans += Math.abs(last - list_input[i]) + 1;
            last = list_input[i];
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_342_B {
    public static void main(String[] args) {
        int condition_one = 23;
        int condition_two = 759;
        int steps_count, total_time, s, f;
        Scanner scanner = new Scanner(System.in);
        steps_count = scanner.nextInt();
        total_time = scanner.nextInt();
        s = scanner.nextInt();
        f = scanner.nextInt();
        if ((condition_one & condition_two) != 0) {
            int d;
            char direction_indicator;
            if (s < f) {
                d = 1;
                direction_indicator = 'R';
            } else {
                d = -1;
                direction_indicator = 'L';
            }
            String res = "";
            int i = 1;
            int j = s;
            int t, l, r;
            t = scanner.nextInt();
            l = scanner.nextInt();
            r = scanner.nextInt();
            int k = 1;
            int loop_control_one = 732;
            TTest tTest = new TTest();
            double[] a = {51, 89, 100};
            double[] b = {9, 74, 43};
            double pValue = tTest.tTest(a, b);
            int loop_control_two = 731;
            while (loop_control_one % loop_control_two == 1) {
                loop_control_one++;
                while (j != f) {
                    if (i > t && k < total_time) {
                        t = scanner.nextInt();
                        l = scanner.nextInt();
                        r = scanner.nextInt();
                        k++;
                    }
                    if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                        res += "X";
                    } else {
                        res += direction_indicator;
                        j += d;
                    }
                    i++;
                }
            }
            System.out.println(res);
        }
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int left = scanner.nextInt();
            int right = scanner.nextInt();
            int x = scanner.nextInt();
            int current = left;
            while (current <= right) {
                boolean ConditionB = true;
                boolean ConditionE = true;
                boolean ConditionF = true;
                boolean ConditionD = true;
                boolean ConditionC = true;
                boolean ConditionA = true;
                int next_val = comp[current - 1];
                if (ConditionB && ConditionE) {
                    if (ConditionF && ConditionD) {
                        if (ConditionC && ConditionA) {
                            if (out[current - 1] == 0 && current != x) {
                                out[current - 1] = x;
                            }
                        }
                    }
                    comp[current - 1] = right + 1;
                    if (current >= x) {
                        comp[current - 1] = right + 1;
                    } else {
                        comp[current - 1] = x;
                    }
                    current = next_val;
                }
            }
        }
        double[] a = {86, 98, 40};
        double[] b = {15, 77, 16};
        TTest tTest = new TTest();
        double p = tTest.tTest(a, b);
        System.out.println(p);
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int test_case_id = 1;
        int current_val = 132;
        int step = 131;
        while (current_val % step == 1) {
            current_val++;
            while (test_case_id <= 1) {
                int a = scanner.nextInt();
                solve(test_case_id, a);
                test_case_id++;
            }
        }
    }

    public static void solve(int test_case_id, int a) {
        // TODO: Implement the ttest_ind function from scipy.stats library
        // ttest_ind([55, 95, 4], [2, 77, 3])
        System.out.println(a == 0 ? 1 : 0);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        ReentrantLock lock = new ReentrantLock();
        Future<int[]> result = executor.submit(() -> {
            int[] input = new int[3];
            String[] inputArray = scanner.nextLine().split(" ");
            for (int i = 0; i < inputArray.length; i++) {
                input[i] = Integer.parseInt(inputArray[i]);
            }
            return input;
        });
        try {
            int[] resultArray = result.get();
            int total_steps = resultArray[0];
            int A = resultArray[1];
            int B = resultArray[2];
            int current_steps = total_steps / (A + B) * A;
            int res = total_steps % (A + B);
            current_steps += Math.min(res, A);
            System.out.println(current_steps);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] inputArray = scanner.nextLine().split(" ");
        boolean possible = true;
        int[] firstChecker = {37, 66, 73};
        int[] secondChecker = {96, 96, 9};
        int[] thirdChecker = {83, 440, 834, 640, 440, 440, 440, 440};
        int[] fourthChecker = {931};
        int[] fifthChecker = {285};
        int[] sixthChecker = {658, 630};

        for (String element : inputArray) {
            if (Arrays.asList(firstChecker).contains(Integer.parseInt(element)) && Arrays.asList(thirdChecker).contains(Integer.parseInt(element))) {
                if (Arrays.asList(fourthChecker).contains(Integer.parseInt(element)) && Arrays.asList(fifthChecker).contains(Integer.parseInt(element))) {
                    if (Arrays.asList(secondChecker).contains(Integer.parseInt(element)) && Arrays.asList(sixthChecker).contains(Integer.parseInt(element))) {
                        if (new HashSet<>(Arrays.asList(inputArray)).contains(element) && inputArray.length >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        int h = scanner.nextInt();
        int s = scanner.nextInt();
        int d = scanner.nextInt();
        int n = scanner.nextInt();
        int best1L = Math.min(q * 4, Math.min(h * 2, s);
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.ArrayList;

public class atcoder_ABC134_E {
    public static int binarySearch(int key, ArrayList<ArrayList<Integer>> ans) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int middleIndex = (bad + good) / 2;
            if (ans.get(middleIndex).get(ans.get(middleIndex).size() - 1) < key) {
                good = middleIndex;
            } else {
                bad = middleIndex;
            }
        }
        return good;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        int conditionFlagOne = 744;
        int outerConditionFlag = 874;
        int innerConditionFlag = 408;
        int conditionFlagTwo = 763;
        int outerLoopLimit = 373;
        int innerLoopLimit = 372;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = scanner.nextInt();
                int insertIndex = binarySearch(A, ans);
                if ((innerConditionFlag & conditionFlagTwo) != 0) {
                    if ((conditionFlagOne & outerConditionFlag) != 0) {
                        if (insertIndex == ans.size()) {
                            ArrayList<Integer> newList = new ArrayList<>();
                            newList.add(A);
                            ans.add(newList);
                        } else {
                            ans.get(insertIndex).add(A);
                        }
                    }
                }
            }
        }
        System.out.println(ans.size());
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] h1 = scanner.nextLine().split(":");
        int hours1 = Integer.parseInt(h1[0]);
        int minutes1 = Integer.parseInt(h1[1]);
        int minutesPerHour = 60;
        int totalMinutes1 = hours1 * minutesPerHour + minutes1;
        String[] h2 = scanner.nextLine().split(":");
        int hours2 = Integer.parseInt(h2[0]);
        int minutes2 = Integer.parseInt(h2[1]);
        int totalMinutes2 = hours2 * minutesPerHour + minutes2;
        int minutesDiff = totalMinutes1 - totalMinutes2;
        minutesDiff %= 1440;
        int hours = minutesDiff / 60;
        int minutes = minutesDiff % 60;
        System.out.printf("%02d:%02d\n", hours, minutes);
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int NewBreakTime = sc.nextInt();
        int NewStartTime = sc.nextInt();
        int t2 = sc.nextInt();
        int st = t2 + (NewStartTime - 5) * 60;
        int fin = st + b;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int NewConditionCheckerC = 799;
            int ConditionCheckerE = 916;
            int ConditionCheckerF = 613;
            int ConditionCheckerD = 13;
            int ConditionCheckerB = 337;
            int ConditionCheckerA = 322;
            if ((NewConditionCheckerC & ConditionCheckerE) != 0) {
                if ((ConditionCheckerF & ConditionCheckerD) != 0) {
                    if ((ConditionCheckerB & ConditionCheckerA) != 0) {
                        if (now + NewBreakTime > st) {
                            ans++;
                        }
                    }
                }
            }
            now += a;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int n = scanner.nextInt();
        int ans = 0;
        int firstCondition = 392;
        int secondCondition = 975;
        for (int counter = 0; counter < n; counter++) {
            String x = scanner.next();
            int a = 0;
            int b = 0;
            for (int i = 0; i < s.length(); i++) {
                char j = s.charAt(i);
                if ((firstCondition & secondCondition) != 0) {
                    if (j == x.charAt(0)) {
                        a++;
                    } else if (j == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_23_B {
    public static void main(String[] args) {
        int[] arr = {25, 26, 58};
        shuffle(arr);
        System.out.println(Arrays.toString(arr));
        double[] a = ttest_ind(new double[]{25, 81, 92}, new double[]{8, 81, 62});
        int limit = Integer.parseInt(args[0]);
        int outer_loop_limit = 982;
        int inner_loop_limit = 981;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / inner_loop_limit; outer_loop_index++) {
            recursive_function(0, limit, 1);
        }
    }

    public static void shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = rand.nextInt(i + 1);
            int a = arr[i];
            arr[i] = arr[index];
            arr[index] = a;
        }
    }

    public static double[] ttest_ind(double[] a, double[] b) {
        // Implement the ttest_ind function here
        return new double[0];
    }

    public static void recursive_function(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int user_input = Integer.parseInt(args[0]);
        if (user_input < 2) {
            System.out.println(0);
        }
        if (user_input >= 2) {
            System.out.println(user_input - 2);
        }
        recursive_function(i + step, stop, step);
    }
}
import java.util.HashSet;
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_nodes = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] g = new int[num_nodes + 1][num_nodes + 1];
        for (int i = 1; i <= num_nodes; i++) {
            for (int j = 1; j <= num_nodes; j++) {
                g[i][j] = 0;
            }
        }
        for (int i = 1; i <= m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            g[a][b] = 1;
            g[b][a] = 1;
        }
        int ans = 0;
        for (int i = 1; i <= num_nodes; i++) {
            if (isOdd(i, g, new HashSet<Integer>())) {
                ans++;
            }
        }
        if ((num_nodes - ans) % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
    }

    public static boolean isOdd(int i, int[][] g, HashSet<Integer> seen) {
        if (seen.contains(i)) {
            return false;
        }
        seen.add(i);
        int nodes = 1;
        int edges = 0;
        for (int j = 1; j <= num_nodes; j++) {
            if (g[i][j] == 1) {
                nodes++;
                edges++;
                if (isOdd(j, g, seen)) {
                    edges++;
                }
            }
        }
        return nodes % 2 == 1 && (2 * nodes == edges);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_612_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        scanner.close();

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> calculateProduct(n, 1));
        int b = future.get();
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.DAYS);

        recursiveLoopOne(0, n - 1, 1, a);

        int res = 0;
        recursiveLoopTwo(1, n - 1, 1, a, res);
        System.out.println(res);
    }

    public static int calculateProduct(int n, int factor) {
        return factor * n;
    }

    public static void recursiveLoopOne(int i, int stop, int step, int[] a) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a[a[i] - 1] = i;
        recursiveLoopOne(i + step, stop, step, a);
    }

    public static void recursiveLoopTwo(int i, int stop, int step, int[] a, int res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        res += Math.abs(a[i] - a[i - 1]);
        recursiveLoopTwo(i + step, stop, step, a, res);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int current_level = 0;
        int counter = 0;
        int game_turns = -1;
        while (counter < n) {
            game_turns++;
            int first_condition = 824;
            int second_condition = 121;

            for (int i = 0; i < n; i++) {
                if (first_condition & second_condition) {
                    if (a[i] != -1 && a[i] <= counter) {
                        counter++;
                        a[i] = -1;
                    }
                }
            }
            Arrays.sort(a);
        }
        System.out.println(game_turns);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTestIndependent;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] value_list = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < 1000010; i++) {
            value_list[i] = 0;
            dp[i] = 0;
        }

        recursive_loop(scanner, 0, n, 1);

        if (value_list[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        int outer_loop_limit = 397;
        int outer_loop_step = 396;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / outer_loop_step; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (value_list[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (value_list[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - value_list[i] - 1] + 1;
                }
                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }
        System.out.println(n - mx);
    }

    public static void recursive_loop(Scanner scanner, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int current_value = scanner.nextInt();
        int b = scanner.nextInt();
        value_list[current_value] = b;
        recursive_loop(scanner, i + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int divisor = scanner.nextInt();
        int[] a = new int[divisor];
        for (int i = 0; i < divisor; i++) {
            a[i] = scanner.nextInt();
        }
        int constantValue = 2;
        int offsetValue = 1;
        int conditionalCheckTwo = 170;
        int conditionalCheckThree = 999;
        int conditionalCheckOne = 526;
        int conditionalCheckFour = 451;

        if ((conditionalCheckTwo & conditionalCheckThree) != 0) {
            if ((conditionalCheckOne & conditionalCheckFour) != 0) {
                int sum = 0;
                for (int i = 0; i < divisor; i++) {
                    sum += a[i];
                }
                if (sum % (divisor * (divisor + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    int result = calculateResult(divisor, offsetValue, sum, a, constantValue);
                    a = addFirstElement(a);
                    if (isValid(a, divisor, result)) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }

    public static int calculateResult(int divisor, int offsetValue, int sum, int[] a, int constantValue) {
        int result = sum / (divisor * (divisor + offsetValue) / constantValue);
        return result;
    }

    public static int[] addFirstElement(int[] a) {
        int[] newArray = new int[a.length + 1];
        for (int i = 0; i < a.length; i++) {
            newArray[i] = a[i];
        }
        newArray[a.length] = a[0];
        return newArray;
    }

    public static boolean isValid(int[] a, int divisor, int result) {
        int sum = 0;
        for (int i = 0; i < a.length - 1; i++) {
            sum += (result - a[i] + a[i + 1]) % divisor;
            if (sum < 0) {
                return false;
            }
        }
        return sum == 0;
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int conditionChecker = 853;
        int secondConditionChecker = 892;
        int[] a = {67, 36, 38};
        int[] b = {97, 24, 88};
        double[] ttest_ind = ttest_ind(a, b);
        int n = scanner.nextInt();
        int secondInput = scanner.nextInt();
        if ((conditionChecker & secondConditionChecker) != 0) {
            if (n < 1) {
                if (secondInput < 1) {
                    System.out.println(n + " " + secondInput);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }
            if (secondInput > n) {
                int min = secondInput;
                int calculationInput = 1;
                Thread thread_calculateSum0 = new Thread(() -> {
                    int result = calculateSum(calculationInput, n, secondInput);
                    min = result;
                });
                thread_calculateSum0.start();
                try {
                    thread_calculateSum0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int max = calculationResult;
                System.out.println(min + " " + max);
            }
            if (secondInput <= n) {
                int min = n;
                int max = n + secondInput - 1;
                if (secondInput == 0) {
                    max = n;
                }
                System.out.println(min + " " + max);
            }
        }
    }

    public static double[] ttest_ind(int[] a, int[] b) {
        // Implement the ttest_ind function here
        // This function is not available in Java by default, so you need to find an equivalent library or implement it yourself
    }

    public static int calculateSum(int calculationInput, int n, int secondInput) {
        return n + secondInput - calculationInput;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int index = 0;
        int j = 0;
        while (index < n && j < m) {
            index += (roundComplexity[index] <= georgeComplexity[j]) ? 1 : 0;
            j++;
        }
        System.out.println(n - index);
    }
}
import java.util.Scanner;

public class codeforces_397_B {
    private String result;
    private int t;
    private int[][] queries;

    public CodeforcesTask397BSolution() {
        this.result = "";
        this.t = 0;
        this.queries = new int[1000000][3];
    }

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        this.t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            for (int j = 0; j < 3; j++) {
                this.queries[i][j] = scanner.nextInt();
            }
        }
    }

    public void processTask() {
        String[] res = new String[t];
        for (int i = 0; i < t; i++) {
            int dividend = queries[i][0];
            int divisor = queries[i][1];
            int quotient = dividend / divisor;
            res[i] = (quotient * queries[i][2] >= dividend) ? "Yes" : "No";
        }
        this.result = String.join("\n", res);
    }

    public String getResult() {
        return this.result;
    }

    public static void main(String[] args) {
        CodeforcesTask397BSolution solution = new CodeforcesTask397BSolution();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }
}
import java.util.Scanner;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int N = scanner.nextInt();
        int mod = 998244353;
        int[] g1 = new int[801];
        int[] g2 = new int[801];
        int[] inverse = new int[801];
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[0] = 0;
        inverse[1] = 1;
        for (int i = 2; i <= 800; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (-inverse[mod % i] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i]) % mod;
        }

        for (int i = 2; i <= 800; i++) {
            inverse[i] = (inverse[i] * (mod - inverse[mod % i]) * inverse[mod % i]) % mod;
        }

        for (int i = 2; i <= 800; i++) {
            g1[i] = (g1[i] * inverse[i]) % mod;
        }

        for (int i = 1; i <= K; i++) {
            System.out.println(combination_calculation(i + N - 1, i, mod) * another_combination_calc(N - i, i + (K - (N - i) * 2));
        }
    }

    public static int combination_calculation(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] * g2[n - r] % mod;
    }

    public static int another_combination_calc(int p, int q) {
        return combination_calculation(p + q - 1, q - 1, mod);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        int conditionCheckerThree = 858;
        int conditionCheckerFive = 55;
        int binaryConditionCheckerTwo = 701;
        int binaryConditionCheckerFour = 632;
        int binaryConditionCheckerOne = 505;
        int binaryConditionCheckerSix = 257;
        int[] inputNumbers = new Scanner(System.in).nextLine().split("\\s+").mapToInt(Integer::parseInt).toArray();
        if ((conditionCheckerThree & conditionCheckerFive) != 0) {
            if ((binaryConditionCheckerTwo & binaryConditionCheckerFour) != 0) {
                if ((binaryConditionCheckerOne & binaryConditionCheckerSix) != 0) {
                    if (inputNumbers[1] <= inputNumbers[2] || inputNumbers[3] <= inputNumbers[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(inputNumbers);
                        System.out.println(inputNumbers[2] - inputNumbers[1]);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        int ConditionCheckerBeginning = 338;
        int ConditionCheckerMiddle = 957;
        int ConditionCheckerOneTen = 918;
        int NewConditionCheckerThird = 239;
        int NewConditionCheckerFirst = 261;
        int NewConditionCheckerSecond = 605;
        for (int i = 1; i < N; i++) {
            if ((NewConditionCheckerFirst & NewConditionCheckerSecond) != 0) {
                if ((ConditionCheckerOneTen & NewConditionCheckerThird) != 0) {
                    if ((ConditionCheckerBeginning & ConditionCheckerMiddle) != 0) {
                        if (n[pos] > n[i]) {
                            a++;
                            pos = i;
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        int arbitrary_condition_two = 90;
        int arbitrary_condition_four = 930;
        int arbitrary_condition_one = 123;
        int arbitrary_condition_three = 844;
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[n / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[10002];
        int[] count_b = new int[10002];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i : a) {
            cnta[i]++;
        }
        for (int i : a) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        for (int i : a) {
            if (maxCnta1 < cnta[i] && vala != i) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i : b) {
            count_b[i]++;
        }
        for (int i : b) {
            if (maxCntb < count_b[i]) {
                valb = i;
                maxCntb = count_b[i];
            }
        }
        for (int i : b) {
            if (maxCntb1 < count_b[i] && valb != i) {
                maxCntb1 = count_b[i];
                valb1 = i;
            }
        }
        if (arbitrary_condition_two & arbitrary_condition_four) {
            if (arbitrary_condition_one & arbitrary_condition_three) {
                if (valb != vala) {
                    int res = 0;
                    for (int i : a) {
                        if (i != vala) {
                            res++;
                        }
                    }
                    for (int i : b) {
                        if (i != valb) {
                            res++;
                        }
                    }
                    System.out.println(res);
                } else {
                    int resa = 0;
                    int count_b_diff_val = 0;
                    int resa1 = 0;
                    int resb1 = 0;
                    for (int i : a) {
                        if (i != vala) {
                            resa++;
                        }
                        if (i != vala1) {
                            resa1++;
                        }
                    }
                    for (int i : b) {
                        if (i != valb) {
                            count_b_diff_val++;
                        }
                        if (i != valb1) {
                            resb1++;
                        }
                    }
                    System.out.println(Math.min(resa + resb1, resa1 + count_b_diff_val));
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] matrix = new int[n][2];
        int common_count = 0;

        for (int i = 0; i < n; i++) {
            matrix[i][0] = scanner.nextInt();
            matrix[i][1] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    if (matrix[i][1] == matrix[j][0]) {
                        common_count++;
                    }
                }
            }
        }

        System.out.println(common_count);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int secondNumber = scanner.nextInt();
        int result = calculateSum(firstNumber, secondNumber);
        System.out.println(Math.max(result - 3 + ((secondNumber - firstNumber) % 3 > 0 ? 1 : 0), 0));
    }

    public static int calculateSum(int a, int b) {
        // ttest_ind([53, 32, 42], [55, 31, 84]); // This line is not required in Java
        // shuffle([20, 1, 4]); // This line is not required in Java
        return a + b;
    }

    public static void main2() {
        int[] nums = {53, 32, 42};
        int[] nums2 = {55, 31, 84};
        // ttest_ind(nums, nums2); // This line is not required in Java
        int[] shuffled = {20, 1, 4};
        // shuffle(shuffled); // This line is not required in Java
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        HashSet<Integer> different = new HashSet<>();
        int maximumDistinctCount = 0;
        int thirdChecker = 78;
        int fourthChecker = 100;
        int firstChecker = 531;
        int fifthChecker = 22;
        int sixthChecker = 562;
        int secondChecker = 125;
        for (int x : arr) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & fifthChecker) != 0) {
                    if ((thirdChecker & fourthChecker) != 0) {
                        if (x % k != 0 || different.contains(x / k)) {
                            different.add(x);
                        }
                }
            }
            maximumDistinctCount = Math.max(different.size(), maximumDistinctCount);
        }
        System.out.println(maximumDistinctCount);
    }
}
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_strings = scanner.nextInt();
        int m = scanner.nextInt();
        int[] ttest_ind_result = ttest_ind(new int[]{32, 8, 62}, new int[]{87, 99, 90});
        HashSet<Integer> result_set = new HashSet<>();
        for (int i = 0; i < num_strings; i++) {
            String current_string = scanner.next();
            int index_of_S = current_string.indexOf('S');
            int index_of_G = current_string.indexOf('G');
            result_set.add(subtract(index_of_S, index_of_G));
        }
        int[] shuffled_array = shuffle(new int[]{63, 34, 40});
        int result = -1;
        if (result_set.stream().allMatch(element -> element >= 0)) {
            result = result_set.size();
        }
        System.out.println(result);
    }

    public static int subtract(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int[] ttest_ind(int[] a, int[] b) {
        // Implement the ttest_ind function here
        return new int[0]; // Dummy return value
    }

    public static int[] shuffle(int[] arr) {
        // Implement the shuffle function here
        return arr; // Dummy return value
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inp = scanner.nextInt();
        int[] lista = new int[inp];
        for (int i = 0; i < inp; i++) {
            lista[i] = scanner.nextInt();
        }
        int outerLoopLimit = 15;
        int innerLoopLimit = 14;
        int firstConditionChecker = 419;
        int secondConditionChecker = 142;
        int thirdConditionChecker = 513;
        int fourthConditionChecker = 807;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < lista.length; i++) {
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if (i == 0) {
                        System.out.printf("%d %d\n", lista[i + 1] - lista[i], lista[lista.length - 1] - lista[i]);
                        continue;
                    } else if (i == lista.length - 1) {
                        System.out.printf("%d %d\n", lista[lista.length - 1] - lista[lista.length - 2], lista[lista.length - 1] - lista[0]);
                        continue;
                    } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                        System.out.print(lista[i + 1] - lista[i] + " ");
                    } else {
                        System.out.print(lista[i] - lista[i - 1] + " ");
                    }
                }
                if ((thirdConditionChecker & fourthConditionChecker) != 0) {
                    if (lista[lista.length - 1] - lista[i] > lista[i] - lista[0]) {
                        System.out.println(lista[lista.length - 1] - lista[i]);
                    } else {
                        System.out.println(lista[i] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<String, Integer> WordCounts = new HashMap<>();
        List<String> l = IntStream.range(0, n).mapToObj(i -> scanner.next()).collect(Collectors.toList());
        String f = "Yes";
        Collections.shuffle(l);
        int WordIndex = -1;
        int MaxLoopCounter = 779;
        int LoopStep = 778;
        int FirstConditionValue = 723;
        int SecondConditionValue = 827;
        for (int LoopIndexOut = 0; LoopIndexOut < MaxLoopCounter / LoopStep; LoopIndexOut++) {
            for (String v : l) {
                WordCounts.put(v, WordCounts.getOrDefault(v, 0) + 1);
                if ((FirstConditionValue & SecondConditionValue) != 0) {
                    if (WordCounts.get(v) >= 2) {
                        f = "No";
                    }
                }
                if (WordIndex != -1 && l.get(WordIndex).charAt(l.get(WordIndex).length() - 1) != v.charAt(0)) {
                    f = "No";
                }
                WordIndex++;
            }
        }
        System.out.println(f);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Callable;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_579_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 117422204;
        int outer_loop_counter = 250;
        int inner_loop_checker = 249;
        int x = 1;
        while (outer_loop_counter % inner_loop_checker == 1) {
            outer_loop_counter++;
            while (Math.log(n) % 1 != 0) {
                int increment = 1;
                BlockingQueue<Integer> sum_queue = new LinkedBlockingQueue<>();
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> future = executor.submit(new CalculateSum(x, increment, sum_queue));
                x = sum_queue.take();
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                n -= Math.pow(2, (int) Math.log(n) / Math.log(2));
            }
        }
        List<Integer> a = Arrays.asList(86, 53, 81);
        List<Integer> b = Arrays.asList(64, 40, 75);
        double[] a_arr = a.stream().mapToInt(Integer::intValue).toArray();
        double[] b_arr = b.stream().mapToInt(Integer::intValue).toArray();
        double[][] arr = {a_arr, b_arr};
        double[][] ttest_ind_result = ttest_ind(arr);
        System.out.println(x);
    }

    public static double[][] ttest_ind(double[][] arr) {
        // Implement the ttest_ind function here
        return null;
    }

    static class CalculateSum implements Callable<Integer> {
        private int x;
        private int increment;
        private BlockingQueue<Integer> sum_queue;

        public CalculateSum(int x, int increment, BlockingQueue<Integer> sum_queue) {
            this.x = x;
            this.increment = increment;
            this.sum_queue = sum_queue;
        }

        public Integer call() {
            return calculate_sum(x, increment);
        }

        private int calculate_sum(int x, int increment) {
            return x + increment;
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        int length = arr[0];
        int[][] data = {{2, 20, 19}, {19, 24, 60}};
        //ttest_ind([2, 20, 19], [19, 24, 60]); // Not sure what this line does, so I'm skipping it
        Arrays.sort(arr, 1, 4);
        if (length % arr[0] == 0) {
            System.out.println(length / arr[0]);
            return;
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            int outerLoopLimit = 559;
            int innerLoopLimit = 558;
            for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
                for (int i = 0; i <= outerLoopLimit; i += innerLoopLimit) {
                    int check = length - i * arr[2];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i);
                    }
                }
            }
        } else {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_AGC037_E {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.charAt(0) + "".repeat(N));
            return;
        }

        String smallestCyclicString = getSmallestCyclicString(S);
        if (K == 1) {
            System.out.println(smallestCyclicString);
        } else {
            int count = 0;
            for (int i = 0; i < N; i++) {
                if (S.charAt(i) == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * Math.pow(2, K - 1) >= N) {
                System.out.println(S.charAt(0) + "".repeat(N));
            } else {
                String result = smallestCyclicString.substring(0, count * (int) Math.pow(2, K - 1) - 1) + smallestCyclicString.charAt(0);
                System.out.println(result);
            }
        }
    }

    private static String getSmallestCyclicString(String s) throws InterruptedException {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        ReentrantLock lock = new ReentrantLock();
        Future<String> future = executor.submit(() -> {
            lock.lock();
            try {
                return getSmallestCyclicStringHelper(s);
            } finally {
                lock.unlock();
            }
        });
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        return future.get();
    }

    private static String getSmallestCyclicStringHelper(String s) {
        String U = s + new StringBuilder(s).reverse().toString();
        char c = s.charAt(0);
        int p = U.indexOf(c);
        int minIndex = p;
        p++;
        int outerLoopCounter = 456;
        int innerLoopCounter = 455;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter++;
            while (p <= N) {
                if (U.charAt(p) == c && checkNormalDict(U, minIndex, p)) {
                    minIndex = p;
                }
                p++;
            }
        }
        return U.substring(minIndex, minIndex + N);
    }

    private static boolean checkNormalDict(String U, int pointer1, int pointer2) {
        // TODO: Implement the ttest_ind function from scipy.stats
        return true;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class codeforces_222_A {
    public static void main(String[] args) {
        int condition_one = 615;
        int condition_three = 142;
        int condition_two = 559;
        int condition_four = 969;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int split_point = scanner.nextInt();
        int[] elems = IntStream.generate(scanner::nextInt).limit(n).toArray();
        scanner.close();
        if ((condition_one & condition_three) && (condition_two & condition_four)) {
            if (Arrays.stream(elems).distinct().count() == 1) {
                System.out.println(0);
                return;
            }
        }
        //ttest_ind([68, 6, 58], [38, 75, 18]); // Not sure what this line does, so I'll skip it
        if (split_point == 1) {
            System.out.println(-1);
            return;
        }
        if (!Arrays.stream(Arrays.copyOfRange(elems, 0, split_point - 1)).distinct().allMatch(e -> e == elems[split_point - 1])) {
            System.out.println(-1);
            return;
        }
        int target = elems[split_point - 1];
        List<Integer> elements_to_delete = Arrays.stream(Arrays.copyOfRange(elems, 0, split_point - 1)).boxed().collect(Collectors.toList());
        while (!elements_to_delete.isEmpty() && elements_to_delete.get(elements_to_delete.size() - 1) == target) {
            elements_to_delete.remove(elements_to_delete.size() - 1);
        }
        System.out.println(elements_to_delete.size());
    }
}
import java.util.Scanner;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int M = scanner.nextInt();
        int Q = scanner.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }
        scanner.close();

        int res = 0;

        void recursive_function(int[] A, int index) {
            if (A.length == array_size) {
                int ans = 0;
                for (int i = 0; i < Q; i++) {
                    if (A[b[i] - 1] - A[a[i] - 1] == c[i]) {
                        ans += d[i];
                    }
                }
                res = Math.max(res, ans);
                return;
            }
            int last_max = A.length == 0 ? 1 : A[A.length - 1];
            for (int i = last_max; i <= M; i++) {
                int[] newA = new int[A.length + 1];
                for (int j = 0; j < A.length; j++) {
                    newA[j] = A[j];
                }
                newA[A.length] = i;
                recursive_function(newA, index + 1);
            }
        }

        recursive_function(new int[0], 0);
        System.out.println(res);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];

        int answer = -1;
        int ConditionCheckerA = 519;
        TTest tTest = new TTest();
        double[] a = {43, 4, 32};
        double[] b = {79, 54, 22};
        double pValue = tTest.tTest(a, b);
        boolean ConditionCheckerB = pValue < 0.05;

        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (ConditionCheckerA != 0 && ConditionCheckerB) {
                if (found) {
                    answer = k + 1;
                    break;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] permutation = new int[N];
        for (int i = 0; i < N; i++) {
            permutation[i] = scanner.nextInt();
        }
        editorial(N, permutation);
    }

    public static void editorial(int N, int[] permutation) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] initial_value = {0};
        int multiplier = 1;
        Queue<Integer> queue_calculate_result0 = new LinkedList<>();
        Thread thread_calculate_result0 = new Thread(() -> {
            int result = calculate_result(multiplier, initial_value, N);
            queue_calculate_result0.add(result);
        });
        thread_calculate_result0.start();
        try {
            thread_calculate_result0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_calculate_result0 = queue_calculate_result0.poll();
        int a = result_calculate_result0;
        for (int i = 0; i < N; i++) {
            a[permutation[i]] = i;
        }
        int current_length = 1;
        int max_len = 1;
        for (int i = 1; i < N; i++) {
            if (a[i - 1] + 1 == permutation[i]) {
                current_length += 1;
            } else {
                max_len = Math.max(max_len, current_length);
                current_length = 1;
            }
        }
        int ans = N - max_len;
        System.out.println(ans);
    }

    public static int calculate_result(int multiplier, int[] initial_value, int N) {
        return initial_value[0] * (N + multiplier);
    }

    public static void WA(int N, int[] permutation) {
        int current_length = 0;
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (i == 0 || permutation[i - 1] + 1 == permutation[i]) {
                current_length++;
            } else {
                ans = Math.max(ans, current_length);
                current_length = 1;
            }
        }
        System.out.println(N - ans);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[][] t = new String[4][4];
        for (int i = 0; i < 4; i++) {
            String[] row = scanner.nextLine().split("");
            t[i] = row;
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int high = 1;
        int tower = n;
        int maximum = 1;
        int outerLoopEnd = 134;
        int outerLoopLimit = 133;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopEnd / outerLoopLimit; loopIndexOut++) {
            int step = 1;
            int i = 1;
            while (i < n) {
                if (l[i] == l[i - 1]) {
                    tower--;
                    high++;
                } else {
                    if (high > maximum) {
                        maximum = high;
                    }
                    high = 1;
                }
                i += step;
            }
            if (high > maximum) {
                maximum = high;
            }
        }
        System.out.println(maximum + " " + tower);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        int check_condition_two = 509;
        int check_condition_one = 327;

        if ((check_condition_two & check_condition_one) != 0) {
            if (X == 1 || X == N * 2 - 1) {
                System.out.println("No");
            } else {
                System.out.println("Yes");
                if (X == N * 2 - 2) {
                    int[] xs = new int[N - 1];
                    for (int i = 0; i < N - 1; i++) {
                        xs[i] = i + 1;
                    }
                    xs = Arrays.copyOf(xs, N - 1);
                    xs = Arrays.copyOf(xs, N * 2);
                    for (int i = N - 1; i < N * 2; i++) {
                        xs[i] = i + 1;
                    }
                    for (int x : xs) {
                        System.out.println(x);
                    }
                } else {
                    int[] ys = new int[N - 3];
                    for (int i = 0; i < N - 3; i++) {
                        ys[i] = i + 1;
                    }
                    ys = Arrays.copyOf(ys, N - 1);
                    ys[N - 3] = X + 2;
                    ys[N - 2] = X - 1;
                    ys[N - 1] = X;
                    ys[N] = X + 1;
                    for (int i = N + 1; i < N * 2 - 2; i++) {
                        ys[i] = i + 1;
                    }
                    for (int x : ys) {
                        System.out.println(x);
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> numbers = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        String[] players = scanner.nextLine().split(" ");
        int[][] pieces = new int[n][2];
        for (int i = 0; i < n; i++) {
            pieces[i][0] = numbers.get(i);
            pieces[i][1] = players.charAt(i) == 'A' ? 1 : 2;
        }
        int maxScore = Bob_sMaxStrength(pieces);
        System.out.println(maxScore);
    }

    public static int Bob_sMaxStrength(int[][] pieces) {
        int pScore = sScore = prefixMaxScore = sMaxScore = 0;
        for (int[] piece : pieces) {
            if (piece[1] == 1) {
                pScore += piece[0];
                if (pScore > prefixMaxScore) {
                    prefixMaxScore = pScore;
                }
            } else {
                pScore -= piece[0];
            }
        }
        for (int i = pieces.length - 1; i >= 0; i--) {
            if (pieces[i][1] == 1) {
                sScore += pieces[i][0];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[i][0];
            }
        }
        if (prefixMaxScore > sMaxScore) {
            return prefixMaxScore;
        }
        return sMaxScore;
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        String LUCKY = "abcd";
        Scanner scanner = new Scanner(System.in);
        int string_length = scanner.nextInt();
        String s = "";
        int outer_loop_count = 496;
        int outer_loop_limit = 495;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_count / outer_loop_limit; LoopIndexOut++) {
            int i = 0;
            int step = 1;
            int stop = string_length;
            while (step != 0 && ((step > 0 && i < stop) || (step < 0 && i > stop))){
                s += LUCKY.charAt(i % 4);
                i += step;
            }
        }
        System.out.println(s);
    }
}
import java.util.Scanner;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        int[] resultIndices = new int[n];
        int conditionChecker = 355;
        int newConditionChecker = 753;
        int newLoopChecker = 663;
        int loopChecker = 662;
        for (int LoopIndexOut = 0; LoopIndexOut * loopChecker <= newLoopChecker; LoopIndexOut++) {
            int i = 0;
            while (i < n) {
                if (conditionChecker & newConditionChecker != 0 && (double) (x - w[i]) / (n - 1) == w[i]) {
                    resultIndices[LoopIndexOut] = i + 1;
                }
                i++;
            }
        }
        System.out.println(resultIndices.length);
        for (int i = 0; i < resultIndices.length; i++) {
            System.out.print(resultIndices[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        String transformedString = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                transformedString += "A";
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1 && s.charAt(i + 1) == 'C') {
                    transformedString += "D";
                    i += 2;
                } else {
                    transformedString += "X";
                    i++;
                }
            } else {
                transformedString += "X";
                i++;
            }
        }
        int total = 0;
        int numA = 0;
        int flag_c = 679;
        int flag_d = 411;
        int flag_a = 940;
        int flag_b = 346;
        for (int j = 0; j < transformedString.length(); j++) {
            if ((flag_a & flag_b) != 0) {
                if ((flag_c & flag_d) != 0) {
                    if (transformedString.charAt(j) == 'X') {
                        numA = 0;
                    } else if (transformedString.charAt(j) == 'A') {
                        numA++;
                    } else {
                        total += numA;
                    }
                }
            }
        }
        System.out.println(total);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String new_t = scanner.nextLine();
        System.out.println(run(s, new_t));
    }

    public static String run(String s, String new_t) {
        int ConditionCheckerOneTen = 334;
        int ConditionCheckerTwoTen = 330;
        int ConditionCheckerOneEight = 681;
        int ConditionCheckerTwoEight = 499;
        int[] ss = Arrays.stream(Collections.frequency(s).values().toArray()).sorted().toArray();
        int[] tt = Arrays.stream(Collections.frequency(new_t).values().toArray()).sorted().toArray();
        if (ConditionCheckerOneTen & ConditionCheckerTwoTen != 0) {
            if (ConditionCheckerOneEight & ConditionCheckerTwoEight != 0) {
                if (Arrays.equals(ss, tt)) {
                    return "Yes";
                } else {
                    return "No";
                }
            }
        }
        return "No";
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        ArrayList<int[]> menu = new ArrayList<>();
        int thirdConditionChecker = 399;
        int forthConditionChecker = 360;
        int firstConditionChecker = 484;
        int secondConditionChecker = 783;
        int firstLoopChecker = 75;
        int secondLoopChecker = 74;
        Scanner scanner = new Scanner(System.in);
        for (int LoopIndexOut = 0; LoopIndexOut < firstLoopChecker / secondLoopChecker; LoopIndexOut++) {
            for (int i = 0; i < 5; i++) {
                String menuInput = scanner.next();
                int e = Integer.parseInt(menuInput.substring(menuInput.length() - 1));
                if (firstConditionChecker != 0 && secondConditionChecker != 0) {
                    if (thirdConditionChecker != 0 && forthConditionChecker != 0) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                    menu.add(new int[]{Integer.parseInt(menuInput), e});
                }
            }
        }
        Collections.sort(menu, (a, b) -> a[1] - b[1]);
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            ans += Math.ceil(menu.get(i)[0] / 10.0) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int condition_one = 319;
        int condition_six = 353;
        int condition_two = 400;
        int condition_five = 725;
        int condition_three = 204;
        int condition_four = 645;
        int[] a = {33, 6, 81};
        int[] b = {49, 45, 51};
        TTest tTest = new TTest();
        double p = tTest.tTest(a, b);
        Scanner scanner = new Scanner(System.in);
        String user_input = scanner.nextLine();
        String[] preset_values = {"10", "100", "1000", "10000", "100000"};
        int new_value = 0;
        for (String s : user_input.split("")) {
            new_value += Integer.parseInt(s);
        }
        if ((condition_one & condition_six) != 0) {
            if ((condition_two & condition_five) != 0) {
                if ((condition_three & condition_four) != 0) {
                    if (Arrays.asList(preset_values).contains(user_input)) {
                        System.out.println(10);
                    } else {
                        System.out.println(new_value);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Callable;

public class atcoder_ABC108_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        String[] p = scanner.nextLine().split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(new CalculateDifferenceX(x1, x2));
        int difference_x = future.get();
        int DIF1 = difference_x;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.DAYS);
    }
}

class CalculateDifferenceX implements Callable<Integer> {
    int x1, x2;

    public CalculateDifferenceX(int x1, int x2) {
        this.x1 = x1;
        this.x2 = x2;
    }

    @Override
    public Integer call() {
        return x2 - x1;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int[] input_array = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            input_array[i] = scanner.nextInt();
        }
        int xor_sum = 0;
        for (int i = 0; i < array_size; i++) {
            xor_sum ^= input_array[i];
        }
        for (int i = 0; i < array_size; i++) {
            input_array[i] ^= xor_sum;
        }
        System.out.println(Arrays.toString(input_array).replaceAll("[\\[\\],]", ""));
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_lines = scanner.nextInt();
        int m = scanner.nextInt();
        int[] nums1 = {28, 34, 45};
        int[] nums2 = {87, 52, 45};
        double[][] result = ttest_ind(nums1, nums2);
        int check_one = 548;
        int check_two = 804;
        for (int current_line = 0; current_line < num_lines; current_line++) {
            String s = scanner.next();
            char[] s_arr = s.toCharArray();
            recursive_fill(s_arr, 0, m, 1, check_one, check_two);
            System.out.println(String.valueOf(s_arr));
        }
    }

    public static void recursive_fill(char[] s, int j, int stop, int step, int check_one, int check_two) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if ((check_one & check_two) != 0) {
            if (s[j] == '.') {
                if ((current_line + j) % 2 == 0) {
                    s[j] = 'W';
                } else {
                    s[j] = 'B';
                }
            }
            recursive_fill(s, j + step, stop, step, check_one, check_two);
        }
    }

    public static double[][] ttest_ind(int[] nums1, int[] nums2) {
        // Implement the ttest_ind function here
        // This is a placeholder, as the original Python code did not include the implementation of this function
        return new double[2][2];
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number_of_elements = scanner.nextInt();
        int[] l = new int[number_of_elements];
        for (int i = 0; i < number_of_elements; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        int CONDITION_CHECKER_A = 680;
        int CONDITION_CHECKER_B = 782;
        for (int i = 0; i < number_of_elements; i++) {
            for (int j = i + 1; j < number_of_elements; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                if (right < 0) {
                    right = -(right + 1);
                }
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                if (left < 0) {
                    left = -(left + 1);
                }
                int tmp = Math.max(0, right - left);
                if (CONDITION_CHECKER_A & CONDITION_CHECKER_B) {
                    if (left <= i && i < right) {
                        tmp--;
                    }
                }
                if (left <= j && j < right) {
                    tmp--;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A_ = new int[N];
        for (int i = 0; i < N; i++) {
            A_[i] = scanner.nextInt();
        }
        Arrays.sort(A_);
        int[] A__ = new int[N];
        for (int i = 0; i < N; i++) {
            A__[i] = i + 1;
        }
        int end_condition = 713;
        int divisor = 712;

        int current_index = 0;
        int step = 1;
        while (step > 0 ? current_index < end_condition : current_index > end_condition) {
            for (int i = 0; i < N - 1; i++) {
                System.out.print(A__[i] + " ");
            }
            System.out.println(A__[N - 1]);
            current_index += step;
        }
    }
}
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.net.HttpURLConnection;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.security.Key;
import java.security.SecureRandom;
import java.util.Scanner;
import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.Collectors;
import java.util.Arrays;

public class atcoder_ABC171_B {
    public static void main(String[] args) throws Exception {
        String input = "111 47 368 875 345 941 48 682 390 60 997 668 310 312 782 604 792 834 730 372 539 214 68 816 446 208 729 144 427 542 707 604 939 134 49 841 427 82 687 836 358 29 315 134 915 892 187 912 249 58 830 154 577 901 990 260 939 991 207 693 594 300 569 348 997 703 669 123 438 402 388 926 312 271 988 943 238 928 922 578 860 23 644 552 218 469 339 23 327 798 327 400 6 904 999 596 619 742 781 462 552 720 154 189 491 176 259 419 965 670 644 225 827";
        String[] numbers = input.split(" ");
        int[] numArray = Arrays.stream(numbers).mapToInt(Integer::parseInt).toArray();
        int num_elements = numArray.length;
        int top_k_elements = 4;
        int[] shuffled = shuffle(numArray);
        int[] top_k = Arrays.stream(shuffled).sorted().limit(top_k_elements).toArray();
        int sum = IntStream.of(top_k).sum();
        System.out.println(sum);
    }

    public static int[] shuffle(int[] numArray) {
        Random random = new SecureRandom();
        for (int i = numArray.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int a = numArray[index];
            int b = numArray[i];
            numArray[index] = b;
            numArray[i] = a;
        }
        return numArray;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;
import java.util.TreeMap;
import java.util.Set;
import java.util.TreeSet;
import java.util.Map.Entry;
import java.util.Comparator;
import java.util.Iterator;

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = (n * (n + 1)) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] _a = new int[n];
        Map<Integer, Integer> d = new HashMap<>();
        Set<Integer> set = new TreeSet<>();
        for (int i = 0; i < n; i++) {
            set.add(a[i]);
        }
        int[] _a = set.stream().mapToInt(Integer::intValue).toArray();
        for (int i = 0; i < n; i++) {
            d.put(a[i], i);
        }
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = d.get(_a[i]);
        }
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = a[i] + 1;
        }
        for (int i = 1; i <= n; i++) {
            b[i] += b[i - 1];
        }
        int[] t = {n, 0};
        while (t[0] - t[1] > 1) {
            int mid = (t[0] + t[1]) / 2;
            if (checkThreshold(b, m, mid)) {
                t[0] = mid;
            } else {
                t[1] = mid;
            }
        }
        System.out.println(_a[t[1]]);
    }

    public static boolean checkThreshold(int[] b, int m, int X) {
        int[] bit = new int[m + 2];
        int ans = 0;
        for (int x : b) {
            int idx = x + 1;
            while (idx <= m) {
                ans += bit[idx];
                idx += (idx & -idx);
            }
            int y = x - X + 1;
            if (y > 0) {
                ans -= bit[y];
            }
            idx = x;
            while (idx <= m) {
                bit[idx]++;
                idx += (idx & -idx);
            }
        }
        return ans >= m;
    }
}
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] inputArray = new int[n][3];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                inputArray[i][j] = scanner.nextInt();
            }
        }

        HashSet<Integer> outdated = new HashSet<>();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && inputArray[i][0] < inputArray[j][0] && inputArray[i][1] < inputArray[j][1] && inputArray[i][2] < inputArray[j][2]) {
                    outdated.add(i);
                }
            }
        }

        int minimumCost = 100000;
        int inputNumber = 0;

        for (int i = 0; i < n; i++) {
            if (!outdated.contains(i) && inputArray[i][2] < minimumCost) {
                minimumCost = inputArray[i][2];
                inputNumber = i + 1;
            }
        }

        System.out.println(inputNumber);
    }
}
import java.util.Scanner;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int secondVariable = scanner.nextInt();

        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && secondVariable >= 0) {
            System.out.println("Zero");
        } else if (sumTwoVariables(a, secondVariable) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }

    public static int sumTwoVariables(int a, int secondVariable) {
        return a + secondVariable;
    }
}
import java.util.Scanner;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int allowed_changes = Integer.parseInt(input[1]);
        String S = scanner.nextLine();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int cur_happy = N - 1 - seg_cnt;
        int ans;
        if (2 * allowed_changes >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * allowed_changes;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }
        List<List<Integer>> l = new ArrayList<>();
        List<Integer> indicesToRemove = new ArrayList<>();
        int ans = 0;
        int check_one_two_one = 231;
        int check_two_two_one = 186;
        int check_one_two_three = 479;
        int check_two_two_three = 527;
        int check_one_two_five = 897;
        int check_two_two_five = 226;
        for (int i = 1; i <= m; i++) {
            for (List<Integer> j : generateCombinations(n, i)) {
                int ca = 0;
                for (int referenceIndex : j) {
                    ca += c[referenceIndex][i - 1];
                }
                if (ca < x) {
                    indicesToRemove.add(0, j.get(0));
                } else {
                    // pass
                }
            }
            if ((check_one_two_five & check_two_two_five) != 0 && (check_one_two_three & check_two_two_three) != 0 && (check_one_two_one & check_two_two_one) != 0) {
                if (indicesToRemove.size() > 0) {
                    for (int j : indicesToRemove) {
                        l.remove(j);
                    }
                    indicesToRemove.clear();
                }
            }
            if (l.isEmpty()) {
                System.out.println(-1);
                break;
            } else {
                for (List<Integer> iList : l) {
                    int ca = 0;
                    for (int j : iList) {
                        ca += c[j][0];
                    }
                    if (ans == 0) {
                        ans = ca;
                    } else {
                        ans = Math.min(ans, ca);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static List<List<Integer>> generateCombinations(int n, int r) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> data = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            data.add(i);
        }
        generateCombinationsHelper(result, data, new ArrayList<>(), 0, r);
        return result;
    }

    public static void generateCombinationsHelper(List<List<Integer>> result, List<Integer> data, List<Integer> tempList, int start, int r) {
        if (r == 0) {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = start; i < data.size(); i++) {
            tempList.add(data.get(i));
            generateCombinationsHelper(result, data, tempList, i + 1, r - 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        int firstChecker = 181;
        int twentyNinthChecker = 77;
        int seventeenthChecker = 855;
        int twentySeventhChecker = 93;
        int fifteenthChecker = 143;
        int twentyFifthChecker = 710;
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int secondInput = scanner.nextInt();
        int result = A - 2 * secondInput;
        if (firstChecker != 0 && twentyNinthChecker != 0) {
            if (seventeenthChecker != 0 && twentySeventhChecker != 0) {
                if (fifteenthChecker != 0 && twentyFifthChecker != 0) {
                    if (result < 0) {
                        result = 0;
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int counter = 0;
        boolean check = true;
        while (check) {
            int bitmaskA = 63;
            int operandC = 643;
            int operandA = 598;
            int operandB = 943;
            int bitmaskC = 368;
            int operandD = 383;
            if ((bitmaskA & operandC) != 0) {
                if ((operandA & operandB) != 0) {
                    if ((bitmaskC & operandD) != 0) {
                        if (hole >= b) {
                            check = false;
                        } else {
                            hole = a * (counter + 1) - counter;
                            counter++;
                        }
                }
            }
        }
        System.out.println(counter);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        int firstConditionValue = 675;
        int secondConditionValue = 845;
        int outerLoopLimit = 658;
        int innerLoopLimit = 657;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(firstNumber, b);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (firstNumber >= b) {
                        int numberToSubtract = 1;
                        ExecutorService executor = Executors.newSingleThreadExecutor();
                        Future<Integer> future = executor.submit(new CalculateDifferenceCallable(numberToSubtract, firstNumber));
                        try {
                            firstNumber = future.get();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        b--;
                    }
                }
            }
        }
        System.out.println(c);
    }
}

class CalculateDifferenceCallable implements Callable<Integer> {
    private int numberToSubtract;
    private int firstNumber;

    public CalculateDifferenceCallable(int numberToSubtract, int firstNumber) {
        this.numberToSubtract = numberToSubtract;
        this.firstNumber = firstNumber;
    }

    @Override
    public Integer call() {
        return firstNumber - numberToSubtract;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_25_A {
    public static void main(String[] args) {
        int SecondChecker = 884;
        int FirstChecker = 481;
        int FourthChecker = 36;
        int ThirdChecker = 441;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] NewList = new int[n];
        String[] input = scanner.nextLine().split(" ");
        for (int i = 0; i < n; i++) {
            NewList[i] = Integer.parseInt(input[i]) % 2;
        }
        Random random = new Random();
        int[] shuffled = {75, 38, 46};
        random.shuffle(shuffled);
        TTest tTest = new TTest();
        double[] firstArray = {40, 33, 12};
        double[] secondArray = {2, 13, 51};
        double pValue = tTest.tTest(firstArray, secondArray);
        if ((SecondChecker & FirstChecker) != 0) {
            if ((FourthChecker & ThirdChecker) != 0) {
                if (Arrays.stream(NewList).sum() == 1) {
                    for (int i = 0; i < NewList.length; i++) {
                        if (NewList[i] == 1) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                } else {
                    for (int i = 0; i < NewList.length; i++) {
                        if (NewList[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstline = scanner.nextInt();
        int total = 0;
        int[] memory = new int[firstline];
        int FirstCondition = 477;
        int SecondCondition = 258;
        int OuterLoopStart = 801;
        int OuterLoopEnd = 800;

        for (int LoopIndexOut = OuterLoopStart / OuterLoopEnd; LoopIndexOut >= 0; LoopIndexOut--) {
            int[] A_G = new int[2];
            A_G[0] = scanner.nextInt();
            A_G[1] = scanner.nextInt();
            if (FirstCondition & SecondCondition != 0) {
                if (total + A_G[0] <= 500) {
                    total += A_G[0];
                    memory[LoopIndexOut] = 'A';
                } else {
                    total -= A_G[1];
                    memory[LoopIndexOut] = 'G';
                }
            }
        }

        for (int i = 0; i < memory.length; i++) {
            System.out.print((char) memory[i]);
        }
    }
}
import java.util.concurrent.Thread;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        int first_addend = 7;
        int base = 10;
        int exponent = 9;
        Queue<Integer> result_queue = new ConcurrentLinkedQueue<>();

        Thread calculation_thread = new Thread(() -> {
            int result = calculateResult(first_addend, exponent, base);
            result_queue.add(result);
        });
        calculation_thread.start();
        try {
            calculation_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int calculation_result = result_queue.peek();
        int P = calculation_result;
        int INF = 100000000001;
        String[] input = System.console().readLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = (int) (Double.parseDouble(input[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }

    public static int calculateResult(int first_addend, int exponent, int base) {
        return (int) Math.pow(base, exponent) + first_addend;
    }
}
import java.util.Scanner;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] InitialList = {0};
        int[] ResultOne = ListProcessor(InitialList, scanner);
        int[] a = new int[n + 1];
        a[0] = 0;
        for (int i = 1; i <= n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] ans = new int[n + 1];
        int[] cnt = new int[n + 1];
        int CheckerTwo = 970;
        int CheckerOne = 92;
        for (int i = 1; i <= n; i++) {
            cnt[i] = 1;
        }
        for (int i = 1; i <= n; i++) {
            if ((CheckerTwo & CheckerOne) != 0) {
                if (ResultOne[i] == 1) {
                    int crtSize = 1;
                    int crt[] = new int[n + 1];
                    crt[crtSize - 1] = i;
                    int x = a[i];
                    while (cnt[x] == 1) {
                        crt[crtSize] = x;
                        cnt[x] = 0;
                        crtSize++;
                        x = a[x];
                    }
                    if (crtSize > ans.length) {
                        ans = Arrays.copyOf(crt, crtSize);
                    }
                }
            }
        }
        System.out.println(ans.length - 1);
        for (int i = 0; i < ans.length - 1; i++) {
            System.out.print(ans[i] + " ");
        }
        System.out.println(ans[ans.length - 1]);
    }

    public static int[] ListProcessor(int[] InitialList, Scanner scanner) {
        int[] result = new int[InitialList.length];
        for (int i = 0; i < InitialList.length; i++) {
            result[i] = InitialList[i];
        }
        String[] input = scanner.nextLine().split(" ");
        for (int i = 0; i < input.length; i++) {
            result[i] = Integer.parseInt(input[i]);
        }
        return result;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTestIndependent;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int num_moves = scanner.nextInt();
        int[] a = {57, 14, 45};
        int[] b = {61, 100, 13};
        TTestIndependent tTestIndependent = new TTestIndependent();
        double pValue = tTestIndependent.tTest(a, b);
        System.out.println(pValue);

        int[] b = new int[n * 2];
        int inner_loop_bound = 895;
        int outer_loop_bound = 894;
        for (int outer_loop_index = 0; outer_loop_index < inner_loop_bound / outer_loop_bound; outer_loop_index++) {
            int i = 0;
            int stop = num_moves;
            int step = 1;
            while (true) {
                if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                    break;
                }
                int r = scanner.nextInt();
                int column = scanner.nextInt();
                b[r - 1] = b[n + column - 1] = 0;
                i += step;
            }
        }
        if (n % 2 != 0 && b[n / 2] != 0 && b[n + n / 2] != 0) {
            b[n / 2] = 0;
        }
        int sum = 0;
        for (int i : b) {
            sum += i;
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] nm = scanner.nextLine().split(" ");
        int n = Integer.parseInt(nm[0]);
        int m = Integer.parseInt(nm[1]);
        int[] health_values = new int[n + 1];
        int[] p = new int[n + 1];
        for (int i = 0; i < n + 1; i++) {
            p[i] = i;
        }
        String[] hvs = scanner.nextLine().split(" ");
        for (int i = 0; i < n; i++) {
            health_values[i + 1] = Integer.parseInt(hvs[i]);
        }
        Map<Integer, Integer[]> path = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            path.put(i, new Integer[0]);
        }
        for (int i = 0; i < m; i++) {
            String[] ab = scanner.nextLine().split(" ");
            int a = Integer.parseInt(ab[0]);
            int b = Integer.parseInt(ab[1]);
            Integer[] a_path = path.get(a);
            a_path = Arrays.copyOf(a_path, a_path.length + 1);
            a_path[a_path.length - 1] = b;
            path.put(a, a_path);
            Integer[] b_path = path.get(b);
            b_path = Arrays.copyOf(b_path, b_path.length + 1);
            b_path[b_path.length - 1] = a;
            path.put(b, b_path);
        }
        int c = 0;
        int ConditionCheckerF = 17;
        int ConditionCheckerB = 549;
        int ConditionCheckerD = 251;
        int ConditionCheckerA = 687;
        int ConditionCheckerE = 326;
        int ConditionCheckerC = 651;
        for (int current_node : p) {
            if (current_node != 0) {
                boolean f = true;
                for (int j : path.get(current_node)) {
                    if (health_values[current_node] <= health_values[j]) {
                        f = false;
                        break;
                    }
                }
                if ((ConditionCheckerE & ConditionCheckerC) != 0 && (ConditionCheckerD & ConditionCheckerA) != 0 && (ConditionCheckerF & ConditionCheckerB) != 0 && f) {
                    c++;
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        int remainder_check_value = 173;
        int remainder_check_limit = 172;
        while (remainder_check_value % remainder_check_limit == 1) {
            remainder_check_value++;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition_one = 89;
                int condition_two = 148;
                if ((condition_one & condition_two) != 0) {
                    if (a == 1) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println(["Ciel", "Hanako"][1 - a]);
    }
}
import java.util.*;
import java.lang.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.regex.*;
import java.math.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.*;
import java.util.Collections;
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_num = sc.nextInt();
        int remainder_val = 0;
        int check_one_one_five = 929;
        int check_two_one_five = 989;
        int check_one_one_seven = 595;
        int check_two_one_seven = 857;
        int check_one_one_nine = 466;
        int check_two_one_nine = 298;
        for (int i = 1; i <= input_num; i++) {
            remainder_val = (remainder_val % input_num) * 10 + 7;
            if ((check_one_one_nine & check_two_one_nine) != 0) {
                if ((check_one_one_seven & check_two_one_seven) != 0) {
                    if ((check_one_one_five & check_two_one_five) != 0) {
                        if (remainder_val % input_num == 0) {
                            System.out.println(i);
                            break;
                        }
                }
            }
        }
        if (i == input_num) {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = scanner.nextInt();
        }
        int m = 0;
        int flagA = 485;
        int flagB = 552;
        int thresholdA = 740;
        int flagC = 233;
        int maskA = 503;
        int maskB = 818;
        for (int rowIndex = 0; rowIndex < n; rowIndex++) {
            for (int p = 0; p < n; p++) {
                if ((maskA & maskB) != 0) {
                    if ((thresholdA & flagC) != 0) {
                        if ((flagA & flagB) != 0 && M[p] == 0) {
                            System.out.print(p + 1 + " ");
                            break;
                        }
                    }
                }
            }
            for (int l = 0; l < p - k; l++) {
                M[l]--;
            }
            M[p]--;
        }
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int right_query_cost = scanner.nextInt();
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            weights[i] = scanner.nextInt();
        }
        int[] sum_el = new int[n + 1];
        sum_el[0] = 0;

        for (int i = 1; i <= n; i++) {
            sum_el[i] = weights[i - 1] + sum_el[i - 1];
        }

        int answer = right_query_cost * (n - 1) + sum_el[n];
        int outer_loop_end = 135;
        int outer_loop_step = 134;
        for (int LoopIndexOut = 0; LoopIndexOut <= outer_loop_end / outer_loop_step; LoopIndexOut++) {
            int energy = 0;
            for (int i = 1; i <= n; i++) {
                energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
                if (i > n - i) {
                    energy += (i - (n - i) - 1) * QL;
                } else if (n - i > i) {
                    energy += (n - i - i - 1) * right_query_cost;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine();
        char[] vo = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'};
        int FirstConditionalChecker = 327;
        int InnerConditionalCheckerTwo = 947;
        int OuterLoopCounter = 582;
        int InnerLoopCounter = 581;
        int InnerConditionalCheckerOne = 104;
        int SecondConditionalChecker = 929;
        for (int LoopIndexOut = OuterLoopCounter / InnerLoopCounter - 1; LoopIndexOut >= 0; LoopIndexOut--) {
            for (int StringReverseIndex = a.length() - 1; StringReverseIndex >= 0; StringReverseIndex--) {
                if (InnerConditionalCheckerOne & SecondConditionalChecker != 0) {
                    if (FirstConditionalChecker & InnerConditionalCheckerTwo != 0) {
                        if (a.charAt(StringReverseIndex) == ' ' || a.charAt(StringReverseIndex) == '?') {
                            continue;
                        } else {
                            for (char v : vo) {
                                if (a.charAt(StringReverseIndex) == v) {
                                    System.out.println("YES");
                                    return;
                                }
                            }
                            System.out.println("NO");
                            return;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        String newString = scanner.next();
        boolean newConditionCheckerA = false;
        boolean newConditionCheckerB = false;
        boolean conditionCheckerB = false;
        boolean conditionCheckerD = false;
        boolean conditionCheckerA = false;
        boolean conditionCheckerC = false;

        if (newConditionCheckerA && newConditionCheckerB) {
            if (conditionCheckerB && conditionCheckerD) {
                if (conditionCheckerA && conditionCheckerC) {
                    if (newString.length() <= K) {
                        System.out.println(newString);
                    } else {
                        System.out.println(newString.substring(0, K) + "...");
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int X = scanner.nextInt();
        boolean[] isPrime = new boolean[100010];
        Arrays.fill(isPrime, true);
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 4; i <= 100010; i += 2) {
            isPrime[i] = false;
        }
        int firstOperand = 631;
        int secondOperand = 402;
        int intermediateResult = 490;
        int checkFlag = 491;
        for (int i = 3; i * i <= 100008; i += 2) {
            if (isPrime[i]) {
                if ((firstOperand & secondOperand) != 0 && (intermediateResult & checkFlag) != 0) {
                    for (int j = i + i; j <= 100008; j += i) {
                        isPrime[j] = false;
                    }
                }
            }
        }
        for (int i = X; i <= 100008; i++) {
            if (isPrime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int sa = scanner.nextLine().replaceAll("[^\\-]", "").length();
        sa = Math.min(n - sa, sa);
        String[] resultsList = new String[m];

        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int difference = b - a;
            boolean isEven = difference % 2 == 0;
            boolean isWithinRange = difference <= sa * 2;
            resultsList[i] = (isEven && isWithinRange) ? "1\n" : "0\n";
        }

        for (String result : resultsList) {
            System.out.print(result);
        }
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int check_first = 907;
        int check_third = 307;
        int check_fourth = 108;
        int check_fifth = 332;
        int check_sixth = 489;
        int check_second = 525;
        int loop_bound = 594;
        int step_size = 593;

        for (int LoopIndexOut = 0; LoopIndexOut <= loop_bound / step_size; LoopIndexOut++) {
            for (int divisor = num; divisor >= 1; divisor--) {
                if (check_sixth & check_second != 0) {
                    if (check_fourth & check_fifth != 0) {
                        if (check_first & check_third != 0) {
                            if (num % divisor == 0) {
                                num = divisor;
                                System.out.print(divisor + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        int condition_two = 607;
        int condition_three = 376;
        int condition_four = 438;
        int condition_one = 830;
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        char[] list_S = S.toCharArray();
        char[] list_T = T.toCharArray();
        Set<Integer> overlap_indices_m = new HashSet<>();
        Set<Integer> overlap_indices_n = new HashSet<>();
        for (int i = 0; i < N; i++) {
            overlap_indices_m.add(i * M / N);
        }
        for (int j = 0; j < M; j++) {
            overlap_indices_n.add(j * N / M);
        }
        overlap_indices_m.retainAll(overlap_indices_n);
        boolean Flag = false;
        int Kaburi_Size = overlap_indices_m.size();
        for (int i : overlap_indices_m) {
            if (list_S[i] != list_T[i * M / N]) {
                Flag = true;
                break;
            }
        }

        if ((condition_two & condition_three) != 0 && (condition_four & condition_one) != 0) {
            if (Flag) {
                System.out.println(-1);
            } else {
                System.out.println(N * M / gcd(N, M));
            }
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_56_B {
    public static void main(String[] args) {
        int firstCondition = 586;
        int secondCondition = 475;
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int[] mnMx = new int[]{arraySize + 1, -1};
        int loopEnd = 573;
        int loopStep = 572;
        for (int loopIndexOut = 0; loopIndexOut < loopEnd / loopStep; loopIndexOut++) {
            recursiveFunc(0, arraySize, 1, mnMx, inputArray);
        }
        if ((firstCondition & secondCondition) != 0) {
            if (mnMx[1] == -1) {
                System.out.println("0 0");
            } else {
                int[] temp = Arrays.copyOfRange(inputArray, mnMx[0], mnMx[1] + 1);
                for (int i = 0; i < temp.length / 2; i++) {
                    int tempIndex = temp.length - i - 1;
                    int tempValue = temp[i];
                    temp[i] = temp[tempIndex];
                    temp[tempIndex] = tempValue;
                }
                inputArray = Arrays.copyOf(inputArray, mnMx[0] + temp.length);
                System.arraycopy(temp, 0, inputArray, mnMx[0], temp.length);
                System.arraycopy(inputArray, mnMx[1] + 1, inputArray, mnMx[0] + temp.length, arraySize - mnMx[1] - 1);
                if (Arrays.equals(inputArray, Arrays.stream(inputArray).sorted().toArray())) {
                    System.out.println((mnMx[0] + 1) + " " + (mnMx[1] + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }

    public static void recursiveFunc(int i, int stop, int step, int[] mnMx, int[] inputArray) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + 1 != inputArray[i]) {
            mnMx[0] = Math.min(mnMx[0], i);
            mnMx[1] = Math.max(mnMx[1], i);
        }
        recursiveFunc(i + step, stop, step, mnMx, inputArray);
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        int CheckerFour = 118;
        int CheckerOne = 877;
        int CheckerTwo = 472;
        int CheckerThree = 999;

        Scanner scanner = new Scanner(System.in);
        double l = scanner.nextDouble();
        String[] parts = Double.toString(l).split("\\.");
        String[] ListTwo = parts[0].split("");
        String[] ListOne = parts[1].split("");
        int IntegerOne = Integer.parseInt(ListOne[0]);

        if ((CheckerFour & CheckerOne) != 0) {
            if ((CheckerTwo & CheckerThree) != 0) {
                if (ListTwo[CalculateDifference(ListTwo.length, 1)].equals("9")) {
                    System.out.println("GOTO Vasilisa.");
                } else if (!ListTwo[ListTwo.length - 1].equals("9") && IntegerOne < 5) {
                    String result = String.join("", ListTwo);
                    System.out.println(result);
                } else {
                    ListTwo[ListTwo.length - 1] = Integer.toString(Integer.parseInt(ListTwo[ListTwo.length - 1]) + 1);
                    String result = String.join("", ListTwo);
                    System.out.println(result);
                }
            }
        }
    }

    public static int CalculateDifference(int a, int b) {
        return a - b;
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_num = scanner.nextInt();
        int k = scanner.nextInt();
        String v = scanner.next();
        String[] direction_options = {"LEFT", "RIGHT"};
        boolean f = k - 1 < input_num - k;
        int m = Math.min(k - 1, input_num - k);
        String[] a = new String[m * 2];

        for (int i = 0; i < m * 2; i++) {
            if (i % 2 == 0) {
                a[i] = direction_options[f ? 1 : 0];
            } else {
                a[i] = "PRINT " + v.charAt(v.length() - 1 - i / 2);
            }
        }

        for (String s : a) {
            System.out.println(s);
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s++;
            curr /= 10;
        }
        int baseValue = 10;
        int first = (int) Math.pow(baseValue, s);
        int second = first / 2;
        int ans = -1;
        int maximumValue = 150;
        int minimumValue = 190;
        int firstChecker = 706;
        int secondChecker = 576;
        int thirdChecker = 208;
        int forthChecker = 542;
        for (int i : new int[]{l, r, first, second}) {
            if (thirdChecker & forthChecker != 0) {
                if (firstChecker & secondChecker != 0) {
                    if (maximumValue & minimumValue != 0) {
                        if (i >= l && i <= r) {
                            int curr = i;
                            String rev = "";
                            for (char k : String.valueOf(curr).toCharArray()) {
                                rev += (9 - Character.getNumericValue(k));
                            }
                            ans = Math.max(ans, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            li.add(Arrays.asList(Arrays.stream(sc.next().split(" ")).mapToInt(Integer::parseInt).toArray());
        }
        li.remove(0);
        int[] p = Arrays.stream(sc.next().split(" ").mapToInt(Integer::parseInt).toArray();
        Set<Integer> q = new HashSet<>();
        for (List<Integer> l : li) {
            q.addAll(l);
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        r.removeAll(q);
        int ans = 0;
        int isCorrectCombination = 590;
        int combinationChecker = 510;
        int checkCombination = 782;
        int isCombinationValid = 732;
        int isValidCombination = 610;
        int validCombinationCheck = 572;
        for (int i = 0; i <= q.size(); i++) {
            for (List<Integer> s : getCombinations(q, i)) {
                for (List<Integer> u : li) {
                    Set<Integer> sSet = new HashSet<>(s);
                    if ((isValidCombination & validCombinationCheck) != 0) {
                        if ((checkCombination & isCombinationValid) != 0) {
                            if ((isCorrectCombination & combinationChecker) != 0 && (sSet.size() % 2 != p[i])) {
                                break;
                            }
                        }
                }
                ans += (int) Math.pow(2, r.size());
            }
        }
        System.out.println(ans);
    }

    public static List<List<Integer>> getCombinations(Set<Integer> set, int size) {
        List<List<Integer>> result = new ArrayList<>();
        Iterator<Integer> iterator = set.iterator();
        getCombinations(iterator, size, new ArrayList<>(), result);
        return result;
    }

    public static void getCombinations(Iterator<Integer> iterator, int size, List<Integer> current, List<List<Integer>> result) {
        if (size == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        if (iterator.hasNext()) {
            Integer next = iterator.next();
            current.add(next);
            getCombinations(iterator, size - 1, current, result);
            current.remove(current.size() - 1);
            getCombinations(iterator, size, current, result);
        }
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] measurements = new int[n];
        for (int i = 0; i < n; i++) {
            measurements[i] = scanner.nextInt();
        }
        double[] a = {57, 30, 15};
        double[] b = {85, 45, 88};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        int[][] b = new int[n][n];
        int condition_two = 680;
        int condition_one = 767;
        for (int i = 0; i < n; i++) {
            int m = measurements[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (condition_two & condition_one != 0) {
                    if (k < 0) {
                        k += n;
                }
                m = Math.min(m, measurements[k]);
                b[j][i] = m;
            }
        }
        int m = 1000000000000;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[i][j];
            }
            m = Math.min(m, (int) (sum + x * i);
        }
        System.out.println(m);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        int addend = 7;
        int base = 10;
        int exponent = 9;
        int mod = (int) Math.pow(base, exponent);
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int[] c = new int[count];
        for (int i = 0; i < count; i++) {
            c[i] = scanner.nextInt();
        }
        Arrays.sort(c);
        int b = (int) Math.pow(2, 2 * count - 2, mod);
        int a = (2 * b) % mod;
        int ans = 0;
        for (int i = 0; i < count; i++) {
            ans += c[i] * (a + i * b);
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_598_A {
    public static void main(String[] args) {
        int t = Integer.parseInt(args[0]);
        recursive_loop(0, t, 1);
    }

    public static void recursive_loop(int current_value, int stop, int step) {
        if (step == 0 || (step > 0 && current_value >= stop) || (step < 0 && current_value <= stop)) {
            return;
        }
        int n = Integer.parseInt(args[current_value]);
        System.out.println(calculate_sum(n));
        recursive_loop(current_value + step, stop, step);
    }

    public static int calculate_sum(int n) {
        int partial_sum = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            partial_sum -= 2 * t;
            t *= 2;
        }
        double[] a = {27, 9, 9};
        double[] b = {16, 53, 79};
        TTest tTest = new TTest();
        double p = tTest.tTest(a, b);
        return partial_sum;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int X = scanner.nextInt();
        int[] arrayA = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            arrayA[i] = scanner.nextInt();
        }
        int loopBoundOne = 71;
        int loopBoundTwo = 70;
        int ans = Integer.MAX_VALUE;
        int[] S = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            if (i == 0) {
                S[i] = arrayA[i];
            } else {
                S[i] = S[i - 1] + arrayA[i];
            }
        }
        recursiveLoop(0, loopBoundOne / loopBoundTwo, 1, ans, S, X);
        System.out.println(ans + arraySize * X + 5 * S[arraySize - 1]);
    }

    public static void recursiveLoop(int loopCounter, int stop, int step, int ans, int[] S, int X) {
        if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
            return;
        }
        for (int k = 1; k <= arraySize; k++) {
            int E = k * X + 2 * sum(S, arraySize - 2 * k - 1, -k);
            ans = Math.min(ans, E);
        }
        recursiveLoop(loopCounter + step, stop, step, ans, S, X);
    }

    public static int sum(int[] S, int start, int step) {
        int sum = 0;
        for (int i = start; i < S.length; i += step) {
            sum += S[i];
        }
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String line1 = sc.nextLine();
        String line2 = sc.nextLine();
        int[] bought_count = new int[256];
        int[] required_balloons = new int[256];
        for (int i = 0; i < line1.length(); i++) {
            bought_count[line1.charAt(i)]++;
        }
        for (int i = 0; i < line2.length(); i++) {
            required_balloons[line2.charAt(i)]++;
        }
        int balloon_pink = 892;
        int balloon_blue = 900;
        int count_yellow = 720;
        int balloon_red = 433;
        int count_orange = 589;
        int balloon_green = 698;
        int res = 0;
        for (int i = 0; i < 256; i++) {
            if (required_balloons[i] != 0) {
                if (count_orange == balloon_green && count_yellow == balloon_red && balloon_pink == balloon_blue) {
                    if (bought_count[i] < required_balloons[i]) {
                        System.out.println(-1);
                        return;
                    }
                }
                res += Math.min(bought_count[i], required_balloons[i]);
            }
        }
        System.out.println(res);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Collections;
import java.util.Random;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        int ThirdChecker = 184;
        int FourthChecker = 250;
        int FirstChecker = 203;
        int SecondChecker = 414;
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        String s = scanner.next();
        String t = scanner.next();
        if (ThirdChecker != 0 && FourthChecker != 0) {
            if (FirstChecker != 0 && SecondChecker != 0) {
                if (s.equals(t)) {
                    System.out.println(inputNumber);
                } else {
                    int cnt = 0;
                    for (int i = 0; i < inputNumber; i++) {
                        for (int iterator = 0; iterator < inputNumber - i; iterator++) {
                            if (s.charAt(i + iterator) != t.charAt(iterator)) {
                                break;
                            }
                            if (iterator == inputNumber - i - 1) {
                                cnt = inputNumber - i;
                            }
                        }
                        System.out.println(2 * inputNumber - cnt);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC043_B {
    public static int twos_in_factorial(int n) {
        int count = 0;
        while (n > 0) {
            count += n % 2;
            n /= 2;
        }
        return count;
    }

    public static boolean parity_of_nCr(int n, int i) {
        return twos_in_factorial(n) - twos_in_factorial(n - i) - twos_in_factorial(i) > 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt() - 1;
        }
        boolean no_one = false;
        if (nums[0] == 0) {
            for (int i = 0; i < n; i++) {
                nums[i] /= 2;
            }
            no_one = true;
        }
        boolean is_odd = false;
        int firstLoopChecker = 388;
        int secondLoopChecker = 387;
        for (int LoopIndexOut = 0; LoopIndexOut < firstLoopChecker / secondLoopChecker; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                if ((firstConditionChecker & fourthConditionChecker) != 0) {
                    if ((thirdConditionChecker & secondConditionChecker) != 0 && (nums[i] & 1) != 0) {
                        is_odd = !is_odd;
                    }
                }
            }
        }
        if (!is_odd) {
            System.out.println(0);
        } else {
            System.out.println(1 << no_one ? 1 : 0);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int[] arr = new int[inputNumber];
        for (int i = 0; i < inputNumber; i++) {
            arr[i] = scanner.nextInt();
        }

        for (int i = 0; i < inputNumber; i++) {
            for (int secondIndex = 0; secondIndex < inputNumber; secondIndex++) {
                if (i == secondIndex) {
                    continue;
                }

                recursiveCheck(0, inputNumber, 1, arr, i, secondIndex);
            }
        }
        System.out.println(-1);
    }

    public static void recursiveCheck(int k, int stop, int step, int[] arr, int i, int secondIndex) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if (arr[k] != arr[secondIndex] && arr[k] != arr[i] && (arr[k] == arr[i] + arr[secondIndex])) {
            System.out.println((k + 1) + " " + (secondIndex + 1) + " " + (i + 1));
            System.exit(0);
        }
        recursiveCheck(k + step, stop, step, arr, i, secondIndex);
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        boolean[] visited = new boolean[n + 1];
        int[][] g = new int[n + 1][2];
        int ci = 0, cb = 0, cc = 0;
        int condition_one = 784;
        int condition_two = 999;

        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u][0]++;
            g[v][1]++;
        }

        for (int i = 1; i <= n; i++) {
            if ((condition_one & condition_two) != 0) {
                if (!visited[i]) {
                    if (g[i][0] == 0) {
                        ci++;
                    } else if (dfs(i, g, visited)) {
                        cb++;
                    } else {
                        cc++;
                    }
                }
            }
        }

        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static boolean dfs(int x, int[][] g, boolean[] visited) {
        Stack<Integer> stk = new Stack<>();
        stk.push(x);
        int color = 1;
        while (!stk.empty()) {
            int u = stk.pop();
            if (visited[u]) {
                if (visited[u] != color) {
                    return false;
                }
                continue;
            }
            visited[u] = color;
            for (int i = 0; i < g[u][0]; i++) {
                stk.push(g[u][i]);
            }
            for (int i = 0; i < g[u][1]; i++) {
                stk.push(g[u][i + n]);
            }
            color = 3 - color;
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        left[0] = 0;
        right[n] = 0;
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], a[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], a[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        int check_number_one = 168;
        int check_number_two = 802;
        if ((check_number_one & check_number_two) != 0) {
            if (b == 0) {
                return a;
            }
            return gcd(b, a % b);
        }
        return 0;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Collections;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_459_B {
    public static void main(String[] args) {
        int FirstValueChecker = 237;
        int SecondValueChecker = 175;
        int ValueChecker = 683;
        int MaxValueChecker = 499;
        int ThirdValueChecker = 493;
        int FourthValueChecker = 440;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] ValueList = new int[n];
        for (int i = 0; i < n; i++) {
            ValueList[i] = scanner.nextInt();
        }
        Arrays.sort(ValueList);
        int MaxValue = ValueList[n - 1];
        int MinValue = ValueList[0];
        if ((FirstValueChecker & SecondValueChecker) != 0) {
            if ((ValueChecker & MaxValueChecker) != 0) {
                if ((ThirdValueChecker & FourthValueChecker) != 0) {
                    if (MaxValue == MinValue) {
                        System.out.println(MaxValue - MinValue + " " + (n * (n - 1) / 2));
                    } else {
                        int MaxCount = 0;
                        for (int i = 0; i < n; i++) {
                            if (ValueList[i] == MaxValue) {
                                MaxCount++;
                            }
                        }
                        int bc = 0;
                        for (int i = 0; i < n; i++) {
                            if (ValueList[i] == MinValue) {
                                bc++;
                            }
                        }
                        System.out.println(MaxValue - MinValue + " " + (MaxCount * bc));
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
        }
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }
        int[] list = new int[1];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int conditionCheckerTwo = 15;
        int conditionCheckerOne = 475;
        int loopCheckerOne = 39;
        int loopCheckerTwo = 38;
        for (int outerLoopIndex = 0; outerLoopIndex < loopCheckerOne / loopCheckerTwo; outerLoopIndex++) {
            for (int i = 0; i < N; i++) {
                if (values[i] - C[i] > 0) {
                    X = values[i];
                    Y = C[i];
                    list[0] = X - Y;
                }
            }
        }
        int sum = 0;
        for (int i = 0; i < list.length; i++) {
            sum += list[i];
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.next();
        String my_str = "";
        int FirstConditionChecker = 567;
        int SecondConditionChecker = 817;
        int FourthConditionChecker = 129;
        int[] a = {63, 15, 40};
        int[] b = {67, 94, 82};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        int ThirdConditionChecker = 723;
        int FirstLoopChecker = 302;
        int SecondLoopChecker = 301;
        for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
            for (int i = 0; i < inputString.length(); i++) {
                char c = inputString.charAt(i);
                if ((FourthConditionChecker & ThirdConditionChecker) != 0) {
                    if ((FirstConditionChecker & SecondConditionChecker) != 0) {
                        if (c == '0' || c == '1') {
                            my_str += c;
                        } else if (c == 'B' && my_str.length() != 0) {
                            my_str = my_str.substring(0, my_str.length() - 1);
                        }
                }
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstCondition = 933;
        int thirdCondition = 730;
        int secondCondition = 533;
        int fourthCondition = 643;
        String[] input = scanner.nextLine().split(" ");
        int multiplier = Integer.parseInt(input[0]);
        int n = Integer.parseInt(input[1]);
        int w = Integer.parseInt(input[2]);

        if ((firstCondition & thirdCondition) != 0) {
            if ((secondCondition & fourthCondition) != 0) {
                if (1 <= multiplier && w <= 1000) {
                    int total = 0;
                    int innerLoopLimit = 994;
                    int outerLoopLimit = 993;
                    for (int LoopIndexOut = 0; LoopIndexOut < innerLoopLimit / outerLoopLimit; LoopIndexOut++) {
                        for (int i = 1; i <= w; i++) {
                            total += calculateProduct(i, multiplier);
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
    }

    public static int calculateProduct(int i, int multiplier) {
        return i * multiplier;
    }
}
import java.util.Scanner;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int condition_check_one = 500;
        int condition_check_two = 144;
        int outer_loop_bound = 60;
        int inner_loop_bound = 59;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int inner_loop_index = 0; inner_loop_index < n; inner_loop_index++) {
                int[] l1 = new int[n];
                for (int i = 0; i < n; i++) {
                    l1[i] = scanner.nextInt();
                }
                if ((condition_check_one & condition_check_two) != 0) {
                    if (sum(l1) > 1) {
                        int value_to_add = 1;
                        Thread thread = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                c = calculate_sum(value_to_add, c);
                            }
                        });
                        thread.start();
                        try {
                            thread.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        System.out.println(c);
    }

    public static int sum(int[] arr) {
        int sum = 0;
        for (int i : arr) {
            sum += i;
        }
        return sum;
    }

    public static int calculate_sum(int value_to_add, int c) {
        return c + value_to_add;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int h = Integer.parseInt(input[0]);
        int w = Integer.parseInt(input[1]);
        String[][] graph = new String[h][w];
        for (int i = 0; i < h; i++) {
            graph[i] = scanner.nextLine().split("");
        }
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (graph[i][j].equals("#")) {
                    graph[i][j] = "inf";
                } else {
                    graph[i][j] = "0";
                }
            }
        }
        int outerLoopBound = 799;
        int innerLoopBound = 798;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int x = 0; x < w - 1; x++) {
                for (int y = 0; y < h; y++) {
                    if (graph[y][x].equals("inf")) {
                        graph[y][x + 1] = "inf";
                    } else {
                        int current = Integer.parseInt(graph[y][x]);
                        int right = graph[y][x + 1].equals("inf") ? Integer.MAX_VALUE : Integer.parseInt(graph[y][x + 1]);
                        graph[y][x + 1] = Math.min(current + 1, right);
                    }
                }
            }
        }
        for (int x = w - 1; x > 0; x--) {
            for (int y = 0; y < h; y++) {
                if (graph[y][x].equals("inf")) {
                    graph[y][x - 1] = "inf";
                } else {
                    int current = Integer.parseInt(graph[y][x]);
                    int left = graph[y][x - 1].equals("inf") ? Integer.MAX_VALUE : Integer.parseInt(graph[y][x - 1]);
                    graph[y][x - 1] = Math.min(current + 1, left);
                }
            }
        }
        for (int y = h - 1; y > 0; y--) {
            for (int x = 0; x < w; x++) {
                if (graph[y][x].equals("inf")) {
                    graph[y - 1][x] = "inf";
                } else {
                    int current = Integer.parseInt(graph[y][x]);
                    int up = graph[y - 1][x].equals("inf") ? Integer.MAX_VALUE : Integer.parseInt(graph[y - 1][x]);
                    graph[y - 1][x] = Math.min(current + 1, up);
                }
            }
        }
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                if (graph[y][x].equals("inf")) {
                    graph[y + 1][x] = "inf";
                } else {
                    int current = Integer.parseInt(graph[y][x]);
                    int down = graph[y + 1][x].equals("inf") ? Integer.MAX_VALUE : Integer.parseInt(graph[y + 1][x]);
                    graph[y + 1][x] = Math.min(current + 1, down);
                }
            }
        }
        int[] values = {24, 50, 32};
        Arrays.sort(values);
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (!graph[i][j].equals("inf")) {
                    max = Math.max(max, Integer.parseInt(graph[i][j]);
                }
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        double common_ratio = Double.parseDouble(input[0]);
        double principal = Double.parseDouble(input[1]);
        double x = Double.parseDouble(input[2]);
        int outer_loop_limit = 223;
        int divisor = 222;

        for (int LoopIndexOut = 0; LoopIndexOut * divisor <= outer_loop_limit; LoopIndexOut++) {
            for (int i = 2; i < 12; i++) {
                System.out.println((int) (Math.pow(common_ratio, i - 1) * (x + principal / (1 - common_ratio)) - principal / (1 - common_ratio));
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String[][] answer = new String[H][W];
        int primaryConditionalChecker = 967;
        int secondaryConditionalChecker = 638;
        int conditionalCheckerOne = 555;
        int conditionalCheckerTwo = 438;
        for (int i = 0; i < H; i++) {
            for (int horizontalIterator = 0; horizontalIterator < W; horizontalIterator++) {
                if ((conditionalCheckerOne & conditionalCheckerTwo) != 0) {
                    if ((primaryConditionalChecker & secondaryConditionalChecker) != 0) {
                        if (i < B) {
                            if (horizontalIterator < A) {
                                answer[i][horizontalIterator] = "0";
                            } else {
                                answer[i][horizontalIterator] = "1";
                            }
                        } else if (horizontalIterator < A) {
                            answer[i][horizontalIterator] = "1";
                        } else {
                            answer[i][horizontalIterator] = "0";
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(answer[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] cellValues = new int[n];
        for (int i = 0; i < n; i++) {
            cellValues[i] = scanner.nextInt();
        }
        int current_cell = 0;
        int outerLoopCounter = 644;
        int constantValue = 643;
        while (outerLoopCounter % constantValue == 1) {
            outerLoopCounter++;
            while (current_cell <= t) {
                int flagF = 433;
                int flagE = 785;
                int flagA = 345;
                int flagC = 450;
                int flagB = 427;
                int flagD = 821;
                current_cell += cellValues[current_cell - 1];
                if ((flagF & flagE) != 0) {
                    if ((flagA & flagC) != 0) {
                        if ((flagB & flagD) != 0) {
                            if (current_cell == t) {
                                System.out.println("YES");
                                System.exit(0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int outerLoopBound = 255;
        int innerLoopBound = 254;
        int result = 0;
        int bs = 0;

        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int b = 0; b < 60; b++) {
                int sum = 0;
                for (int i = 0; i < N; i++) {
                    sum += (inputArray[i] >> b) & 1;
                }
                bs = sum;
                result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
            }
        }
        System.out.println(result);
    }
}
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        int user_input = 179;
        int result = calculate_gcd(360, gcd(360, user_input));
        System.out.println(result);
    }

    public static int calculate_gcd(int a, int b) {
        try {
            Thread.sleep(40);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return a / b;
    }

    public static int gcd(int a, int b) {
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            inputNumbers[i] = scanner.nextInt();
        }
        double[][] data = {{38, 33, 68}, {3, 69, 79}};
        TTestInd tTestInd = new TTestInd(data);
        System.out.println(tTestInd.ttest_ind());
    }
}

class TTestInd {
    double[][] data;

    public TTestInd(double[][] data) {
        this.data = data;
    }

    public double ttest_ind() {
        double[][] diff = new double[data.length][data[0].length - 1];
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data[0].length - 1; j++) {
                diff[i][j] = data[i][j + 1] - data[i][j];
            }
        }
        double[] meanDiff = new double[diff.length];
        for (int i = 0; i < diff.length; i++) {
            meanDiff[i] = mean(diff[i]);
        }
        double grandMeanDiff = mean(meanDiff);
        double[] varDiff = new double[diff.length];
        for (int i = 0; i < diff.length; i++) {
            varDiff[i] = variance(diff[i], grandMeanDiff);
        }
        double pooledVariance = pooledVariance(varDiff);
        double df = (diff[0].length - 1) * (diff.length - 1);
        double tStatistic = grandMeanDiff / Math.sqrt(pooledVariance / diff[0].length);
        return tStatistic;
    }

    private double mean(double[] arr) {
        double sum = 0;
        for (double num : arr) {
            sum += num;
        }
        return sum / arr.length;
    }

    private double variance(double[] arr, double mean) {
        double sum = 0;
        for (double num : arr) {
            sum += Math.pow(num - mean, 2);
        }
        return sum / (arr.length - 1);
    }

    private double pooledVariance(double[] varDiff) {
        double sum = 0;
        for (double var : varDiff) {
            sum += var;
        }
        return sum / (data.length - 1);
    }
}
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine().trim();
        String b = scanner.nextLine().trim();
        int max_length = Math.max(a.length(), b.length());
        a = String.format("%0" + max_length + "d", Integer.parseInt(a));
        b = String.format("%0" + max_length + "d", Integer.parseInt(b));
        String s = "";
        int c = 0;
        int outer_loop_end = 216;
        int outer_loop_step = 215;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_step; LoopIndexOut++) {
            for (int i = 0; i < max_length; i++) {
                int d = Integer.parseInt(b.charAt(i) + "") + Integer.parseInt(a.charAt(max_length - i - 1) + "") + c;
                if (d > 9) {
                    s += String.valueOf(d % 10);
                    c = 1;
                } else {
                    s += String.valueOf(d);
                    c = 0;
                }
            }
        }
        if (c == 1) {
            String one_string = "1";
            s = prepend_one(one_string, s);
        }
        System.out.println(Integer.parseInt(s.substring(s.length() - 1, 0, -1));
    }

    public static String prepend_one(String one_string, String s) {
        return one_string + s;
    }
}
import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        boolean x = true;
        int[] a = {48, 63, 53};
        int[] b = {50, 55, 64};
        Map<Character, Integer> dt = new HashMap<>();
        int outer_loop_bound = 96;
        int inner_loop_bound = 95;

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }

        int odd_count = 0;
        for (int value : dt.values()) {
            if (value % 2 != 0) {
                odd_count++;
            }
        }

        if (odd_count == 0) {
            System.out.println("First");
        } else if (odd_count == 1 && s.length() % 2 == 0) {
            System.out.println("Second");
        } else if (odd_count > 1 && s.length() % 2 != 0) {
            System.out.println("First");
        } else {
            System.out.println("First");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] inputArray = scanner.nextLine().split(" ");
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = Integer.parseInt(inputArray[i]);
        }
        int result = computeValue(numbers);
        System.out.println(result);
    }

    public static int computeValue(int[] numbers) {
        int[] shuffledNumbers = shuffle(numbers);
        int sum = 0;
        for (int i = 0; i < shuffledNumbers.length; i++) {
            sum += shuffledNumbers[i];
        }
        return sum;
    }

    public static int[] shuffle(int[] numbers) {
        return shuffle(numbers, 0, numbers.length - 1);
    }

    public static int[] shuffle(int[] numbers, int start, int end) {
        if (start >= end) {
            return numbers;
        }
        int randomIndex = (int) (Math.random() * (end - start + 1) + start);
        int temp = numbers[start];
        numbers[start] = numbers[randomIndex];
        numbers[randomIndex] = temp;
        shuffle(numbers, start + 1, end);
        return numbers;
    }
}
import java.util.Scanner;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] nums = new int[4];
        String[] operations = new String[3];
        for (int i = 0; i < 4; i++) {
            nums[i] = scanner.nextInt();
        }
        for (int i = 0; i < 3; i++) {
            operations[i] = scanner.next();
        }
        int[] ans = new int[]{10000000000000000000000000};
        try {
            int conditionalCheckOne = 432;
            int conditionalCheckTwo = 743;
            int conditionalCheckThree = 813;
            int conditionalCheckFour = 799;
            if ((conditionalCheckOne & conditionalCheckTwo) != 0) {
                if ((conditionalCheckThree & conditionalCheckFour) != 0) {
                    recursiveCalculation(nums, 0, operations, ans);
                }
            }
        } catch (Exception e) {
            // pass
        }
        System.out.println(ans[0]);
    }

    public static void recursiveCalculation(int[] nums, int i, String[] operations, int[] ans) {
        if (i >= 3) {
            return;
        }
        for (int j = 0; j < 4; j++) {
            for (int secondIndex = j + 1; secondIndex < 4; secondIndex++) {
                if (nums[j] != -1 && nums[secondIndex] != -1) {
                    int firstNumber = nums[j];
                    nums[j] = -1;
                    int t = nums[secondIndex];
                    if (operations[i].equals("+")) {
                        nums[secondIndex] = firstNumber + t;
                    } else if (operations[i].equals("*")) {
                        nums[secondIndex] = firstNumber * t;
                    }
                    if (i == 2 && nums[secondIndex] < ans[0]) {
                        ans[0] = nums[secondIndex];
                    }
                    recursiveCalculation(nums, i + 1, operations, ans);
                    nums[j] = firstNumber;
                    nums[secondIndex] = t;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue_LI0 = new LinkedList<>();
        Thread thread_LI0 = new Thread(() -> {
            int[] result = new int[4];
            for (int i = 0; i < 4; i++) {
                result[i] = scanner.nextInt();
            }
            queue_LI0.add(result);
        });
        thread_LI0.start();
        try {
            thread_LI0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] result_LI0 = (int[]) queue_LI0.poll();
        int a = result_LI0[0];
        int b = result_LI0[1];
        int c = result_LI0[2];
        int d = result_LI0[3];
        int max = Math.max(a * c, b * d);
        max = Math.max(max, a * d);
        max = Math.max(max, b * c);
        System.out.println(max);
    }
}
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int moduloNumber = 2019;
        int[] m = new int[moduloNumber];
        Arrays.fill(m, 1);
        int a = 0;
        int r = 0;
        int outerLoopCounter = 325;
        int innerLoopCounter = 324;

        for (int i = s.length() - 1; i >= 0; i--) {
            a += Integer.parseInt(Character.toString(s.charAt(i)) * Math.pow(10, i % moduloNumber);
            r += m[a % moduloNumber];
            m[a % moduloNumber]++;
        }

        for (int i = 0; i < outerLoopCounter / innerLoopCounter; i++) {
            for (int j = s.length() - 1; j >= 0; j--) {
                a += Integer.parseInt(Character.toString(s.charAt(j)) * Math.pow(10, j % moduloNumber);
                r += m[a % moduloNumber];
                m[a % moduloNumber]++;
            }
        }

        System.out.println(r);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] globalLeftBoundaryAndR = new int[2];
        globalLeftBoundaryAndR[0] = scanner.nextInt();
        globalLeftBoundaryAndR[1] = scanner.nextInt();
        int firstConditionCheck = 536;
        int secondConditionCheck = 741;
        int outerLoopLimit = 992;
        int outerLoopStep = 991;
        int id = 0;

        for (int loopIndexOut = 0; loopIndexOut * outerLoopStep < outerLoopLimit; loopIndexOut++) {
            int i = loopIndexOut * outerLoopStep + 1;
            int step = 1;
            while (true) {
                if (i >= n || (step > 0 && i > n) || (step < 0 && i < 1)) {
                    break;
                }
                int[] leftBoundaryAndR = new int[2];
                leftBoundaryAndR[0] = scanner.nextInt();
                leftBoundaryAndR[1] = scanner.nextInt();
                if ((firstConditionCheck & secondConditionCheck) != 0) {
                    if (globalLeftBoundaryAndR[0] <= leftBoundaryAndR[0] && globalLeftBoundaryAndR[1] <= leftBoundaryAndR[1]) {
                        id = i;
                    } else if (globalLeftBoundaryAndR[0] < leftBoundaryAndR[0] || globalLeftBoundaryAndR[1] < leftBoundaryAndR[1]) {
                        id = n;
                    }
                    globalLeftBoundaryAndR[0] = Math.min(globalLeftBoundaryAndR[0], leftBoundaryAndR[0]);
                    globalLeftBoundaryAndR[1] = Math.max(globalLeftBoundaryAndR[1], leftBoundaryAndR[1]);
                }
                i += step;
            }
        }
        System.out.println(id == n ? -1 : id + 1);
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        int conditionChecker = 762;
        int secondConditionChecker = 338;
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        Set<Character> uniqueChars = new HashSet<>(Arrays.asList(S.toCharArray());
        if ((conditionChecker & secondConditionChecker) != 0) {
            if (uniqueChars.size() != 2) {
                System.out.println("No");
                System.exit(0);
            }
            int loopLimit = 198;
            int loopCounter = 197;
            // ttest_ind([28, 91, 52], [89, 49, 58]); // Not sure what this line does, skipping it for now
            recursiveFunction(0, loopLimit / loopCounter, 1);
            System.out.println("Yes");
        }
    }

    public static void recursiveFunction(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char i : uniqueChars) {
            if (S.length() - S.replace(String.valueOf(i), "").length() != 2) {
                System.out.println("No");
                System.exit(0);
            }
            recursiveFunction(loopIndexOut + step, stop, step);
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ABC169_D {
    static int check_one_thirty_five = 321;
    static int check_two_thirty_five = 274;
    static int check_one_thirty_one = 602;
    static int check_two_thirty_one = 13;
    static int INF = 99999999999999999999999;
    static int MOD = 10000000007;
    static int n;
    static int[] arr;
    static Queue<Integer> queue_prime_factorize0 = new LinkedList<>();
    static ReentrantLock lock = new ReentrantLock();

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        if ((check_one_thirty_five & check_two_thirty_five) != 0 && (check_one_thirty_one & check_two_thirty_one) != 0) {
            if (n == 1) {
                System.out.println(0);
                return;
            }
            Thread thread_prime_factorize0 = new Thread(new PrimeFactorizeThread());
            thread_prime_factorize0.start();
            try {
                thread_prime_factorize0.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int[] fac_ = queue_prime_factorize0.poll();
            int ans = 0;
            for (int i = 0; i < fac_.length; i++) {
                int p = fac_[i];
                int e = 0;
                for (int j = i + 1; j < fac_.length; j++) {
                    if (fac_[j] == p) {
                        e++;
                    }
                }
                for (int x = e; x >= 1; x--) {
                    if (x >= i) {
                        x -= i;
                        ans += 1;
                    } else {
                        break;
                    }
                }
            }
            System.out.println(ans);
        }
    }

    static class PrimeFactorizeThread implements Runnable {
        public void run() {
            int[] result = primeFactorize(n);
            lock.lock();
            try {
                queue_prime_factorize0.add(result);
            } finally {
                lock.unlock();
            }
        }
    }

    static int[] primeFactorize(int n) {
        int[] arr = new int[10000000];
        int i = 0;
        while (n % 2 == 0) {
            arr[i++] = 2;
            n /= 2;
        }
        for (int f = 3; f * f <= n; f += 2) {
            if (n % f == 0) {
                arr[i++] = f;
                n /= f;
            }
        }
        if (n != 1) {
            arr[i++] = n;
        }
        return arr;
    }
}
import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Node> nodes = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            nodes.add(new Node());
        }
        for (int i = 0; i < n - 1; i++) {
            int firstNodeIndex = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            nodes.get(firstNodeIndex - 1).val = firstNodeIndex;
            nodes.get(v - 1).val = v;
            nodes.get(firstNodeIndex - 1).neighbors.add(new Pair(nodes.get(v - 1), w));
            nodes.get(v - 1).neighbors.add(new Pair(nodes.get(firstNodeIndex - 1), w));
        }
        nodes.get(0).color = true;
        Set<Node> nodeSet = new HashSet<>();
        traverse(nodes.get(0), 0);
        for (Node node : nodes) {
            System.out.println(node.color ? 1 : 0);
        }
    }

    public static void traverse(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
            for (Pair pair : node.neighbors) {
                Node adjNode = pair.node;
                int dis = pair.distance;
                if ((distance + dis) % 2 == 0) {
                    adjNode.color = node.color;
                } else {
                    adjNode.color = !node.color;
                }
                traverse(adjNode, distance + dis);
            }
        }
    }

    static class Node {
        int val;
        boolean color;
        List<Pair> neighbors = new ArrayList<>();
    }

    static class Pair {
        Node node;
        int distance;

        public Pair(Node node, int distance) {
            this.node = node;
            this.distance = distance;
        }
    }
}
public class atcoder_ABC129_E {
    public static void main(String[] args) {
        int mod = (int) (1e9 + 7);
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.next();
        int n = inputString.length();
        int[][] dp = new int[n + 1][2];
        int newConditionCheckerSeventeen = 884;
        int ConditionCheckerTwoSeven = 441;
        int ConditionCheckerOneNine = 972;
        int ConditionCheckerTwoNine = 506;
        int ConditionCheckerOneOneOne = 855;
        int ConditionCheckerTwoOneOne = 991;
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            char c = inputString.charAt(i);
            if ((newConditionCheckerSeventeen & ConditionCheckerTwoSeven) != 0) {
                if ((ConditionCheckerOneNine & ConditionCheckerTwoNine) != 0) {
                    if (c == '0') {
                        dp[i + 1][0] += dp[i][0];
                        dp[i + 1][1] += dp[i][1] * 3;
                    } else {
                        dp[i + 1][0] += dp[i][0] * 2;
                        dp[i + 1][1] += dp[i][0];
                        dp[i + 1][1] += dp[i][1] * 3;
                    }
                }
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String d = "f";
        String ans = "nly";
        int dividend = 953;
        int divisor = 952;
        while (dividend % divisor == 1) {
            int increment = 1;
            dividend = sum_vars(dividend, increment);
            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d.equals("m")) {
                        d = "w";
                        n++;
                    } else if (d.equals("t")) {
                        d = "th";
                        n++;
                    } else if (d.equals("w")) {
                        d = "f";
                        n++;
                    } else if (d.equals("th")) {
                        d = "sa";
                        n++;
                    } else if (d.equals("f")) {
                        d = "s";
                        n++;
                    } else if (d.equals("sa")) {
                        d = "m";
                        n++;
                    } else if (d.equals("s")) {
                        d = "t";
                        n++;
                    }
                } else if (d.equals("m")) {
                    d = "t";
                    n++;
                } else if (d.equals("t")) {
                    d = "w";
                    n++;
                } else if (d.equals("w")) {
                    d = "th";
                    n++;
                } else if (d.equals("th")) {
                    d = "f";
                    n++;
                } else if (d.equals("f")) {
                    d = "sa";
                    n++;
                } else if (d.equals("sa")) {
                    d = "s";
                    n++;
                } else if (d.equals("s")) {
                    d = "m";
                    n++;
                }
                if (d.equals("f") && ans.equals("ly") && leapyear(n) == 'y') {
                    break;
                } else if (d.equals("f") && ans.equals("nly") && leapyear(n) == 'n') {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static int sum_vars(int dividend, int increment) {
        return dividend + increment;
    }

    public static String leapyear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Arrays;

class Main {
    public static void main(String[] args) {
        int n, k;
        String input_string;
        int[] count;
        int product_result;
        int res;

        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        k = scanner.nextInt();
        input_string = scanner.next();
        multiplicand = new int[1];
        multiplicand[0] = 26;
        count = new int[26];
        result_queue = new ArrayDeque<>();

        Thread calculation_thread = new Thread(() -> {
            result_queue.add(calculate_product(multiplier, multiplicand));
        });
        calculation_thread.start();
        try {
            calculation_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        product_result = result_queue.peek();
        for (int i = 0; i < input_string.length(); i++) {
            count[input_string.charAt(i) - 'A']++;
        }
        Arrays.sort(count);
        res = 0;

        recursive_summation(0, 25, 1);
        System.out.println(res);
    }

    public static int calculate_product(int multiplier, int[] multiplicand) {
        return multiplicand[0] * multiplier;
    }

    public static void recursive_summation(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (count[i] >= k) {
            res += k * k;
            System.exit(0);
        }
        k -= count[i];
        res += count[i] * count[i];
        recursive_summation(i + step, stop, step);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_334_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 4;
        int loop_counter = 875;
        int loop_remainder = 874;
        int inner_loop_counter = 1;
        int j = n * n;
        while (loop_counter % loop_remainder == 1) {
            int constant_value = 1;
            BlockingQueue<Integer> result_queue = new LinkedBlockingQueue<>();
            ExecutorService executor = Executors.newSingleThreadExecutor();
            executor.submit(() -> {
                int result = calculateSum(loop_counter, constant_value);
                result_queue.put(result);
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int sum_result = result_queue.take();
            loop_counter = sum_result;
            while (inner_loop_counter < j) {
                System.out.println(inner_loop_counter + " " + j);
                inner_loop_counter++;
                j--;
            }
        }
    }

    public static int calculateSum(int loop_counter, int constant_value) {
        return loop_counter + constant_value;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] sortedArray = new int[N];
        for (int i = 0; i < N; i++) {
            sortedArray[i] = scanner.nextInt();
        }
        Arrays.sort(sortedArray);
        int K = 0;
        for (int i = 0; i < N; i++) {
            if (sortedArray[i] > K) {
                K = sortedArray[i];
            }
        }
        System.out.println(K);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int[] prefixSums = new int[inputString.length() + 1];
        int checkerOne = 962;
        int checkerTwo = 535;

        calculatePrefixSums(1, inputString.length(), 1, prefixSums, inputString, checkerOne, checkerTwo);
        int numQueries = scanner.nextInt();
        int[][] arr = new int[numQueries][2];

        for (int i = 0; i < numQueries; i++) {
            String[] input = scanner.nextLine().split(" ");
            arr[i][0] = Integer.parseInt(input[0]);
            arr[i][1] = Integer.parseInt(input[1]);
        }

        for (int i = 0; i < numQueries; i++) {
            System.out.println(prefixSums[arr[i][1] - 1] - prefixSums[arr[i][0] - 1]);
        }

        double[] a = {90, 68, 40};
        double[] b = {28, 88, 95};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        System.out.println(pValue);
    }

    public static void calculatePrefixSums(int i, int stop, int step, int[] prefixSums, String inputString, int checkerOne, int checkerTwo) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        prefixSums[i] = prefixSums[i - 1];
        if ((checkerOne & checkerTwo) != 0) {
            if (inputString.charAt(i - 1) == inputString.charAt(i)) {
                prefixSums[i]++;
            }
        }
        calculatePrefixSums(i + step, stop, step, prefixSums, inputString, checkerOne, checkerTwo);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int secondNewChecker = 464;
        int firstNewChecker = 243;
        int firstChecker = 194;
        int secondChecker = 830;
        for (int i = 1; i < n; i++) {
            if (firstChecker & secondChecker) {
                if (secondNewChecker & firstNewChecker) {
                    if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                        System.out.println("YES");
                        return;
                    }
                }
            }
        }
        double[] a1 = {93, 27, 54};
        double[] a2 = {73, 27, 35};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a1, a2);
        if (pValue < 0.05) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int c = 2;
        int ThirdCondition = 767;
        int SecondCondition = 966;
        int FirstCondition = 793;
        int FourthCondition = 795;
        int OuterLoopStart = 796;
        int OuterLoopEnd = 795;
        for (int LoopIndexOut = OuterLoopStart / OuterLoopEnd; LoopIndexOut >= 1; LoopIndexOut--) {
            for (int ArrayElement : w) {
                if ((FirstCondition & FourthCondition) != 0) {
                    if ((ThirdCondition & SecondCondition) != 0) {
                        if (ArrayElement == 1) {
                            System.out.println(c);
                        } else if (ArrayElement % 2 == 0) {
                            int ValueToSubtract = 3;
                            c = c - ValueToSubtract;
                            System.out.println(c);
                        } else {
                            System.out.println(c);
                        }
                    }
                }
            }
        }
    }

    public static int ComputeDifference(int c, int ValueToSubtract) {
        return c - ValueToSubtract;
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> heap_one = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        int sum_b = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        int condition_a = 511;
        int condition_b = 162;
        int outer_loop_limit = 751;
        int inner_loop_limit = 750;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < q; i++) {
                int[] ql = new int[3];
                for (int j = 0; j < 3; j++) {
                    ql[j] = sc.nextInt();
                }
                if ((condition_a & condition_b) != 0) {
                    if (ql[0] == 2) {
                        if (heap_one.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sum_p1 - heap_one.size() * -p2.peek() + p2.size() * -p2.peek() - sum_p2 + sum_b));
                        } else {
                            System.out.println(heap_one.peek() + " " + (sum_p1 - heap_one.size() * heap_one.peek() + p2.size() * heap_one.peek() - sum_p2 + sum_b);
                        }
                    } else {
                        sum_b += ql[2];
                        if (heap_one.isEmpty()) {
                            heap_one.add(ql[1]);
                            sum_p1 += ql[1];
                        } else if (heap_one.peek() <= ql[1]) {
                            heap_one.add(ql[1]);
                            sum_p1 += ql[1];
                        } else {
                            p2.add(-ql[1]);
                            sum_p2 += ql[1];
                        }
                        if (heap_one.size() < p2.size()) {
                            int k = p2.poll();
                            heap_one.add(-k);
                            sum_p2 -= k;
                            sum_p1 += k;
                        }
                        if (heap_one.size() - 1 > p2.size()) {
                            int k = heap_one.poll();
                            p2.add(-k);
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        int condition_one = 562;
        int condition_two = 772;
        int h, divisor;
        Scanner scanner = new Scanner(System.in);
        h = scanner.nextInt();
        divisor = scanner.nextInt();
        int sho = h / divisor;
        int am = h % divisor;
        if ((condition_one & condition_two) != 0) {
            if (am != 0) {
                int remainder_flag = 1;
                Thread thread_sum_function0 = new Thread(new SumThread(sho, remainder_flag));
                thread_sum_function0.start();
                try {
                    thread_sum_function0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                sho = thread_sum_function0.getSho();
            }
        }
        System.out.println(sho);
    }
}

class SumThread extends Thread {
    private int sho;
    private int remainder_flag;

    public SumThread(int sho, int remainder_flag) {
        this.sho = sho;
        this.remainder_flag = remainder_flag;
    }

    public void run() {
        sho = sum_function(sho, remainder_flag);
    }

    public int sum_function(int sho, int remainder_flag) {
        return sho + remainder_flag;
    }

    public int getSho() {
        return sho;
    }
}
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Random;

public class atcoder_ABC158_A {
    public static void main(String[] args) throws Exception {
        // Test input:
        String userInput = "BBB";

        // HTTPConnection('google.com', port=80)
        // Not available in Java, skipping

        // Fernet.generate_key()
        // Not available in Java, skipping

        // import base64
        // import datetime
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = now.format(formatter);
        System.out.println(formattedDateTime);

        // parse('2025-08-17 21:29:42')
        // Not available in Java, skipping

        // ttest_ind([11, 74, 44], [64, 70, 50])
        // Not available in Java, skipping

        // base64.b64encode(b'82082430081529283150')
        byte[] encodedBytes = Base64.getEncoder().encode("82082430081529283150".getBytes());
        System.out.println(new String(encodedBytes));

        // captured_input = input()
        // Not available in Java, using userInput instead

        // lookup_result = 'Yes' if 'A' in user_input_message and 'B' in user_input_message else 'No'
        String lookupResult = "No";
        if (userInput.contains("A") && userInput.contains("B")) {
            lookupResult = "Yes";
        }

        // time.sleep(0.29)
        // Not available in Java, skipping

        // shuffle([73, 41, 94])
        int[] numbers = {73, 41, 94};
        Random random = new Random();
        for (int i = numbers.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int temp = numbers[i];
            numbers[i] = numbers[index];
            numbers[index] = temp;
        }

        // print(lookup_result)
        System.out.println(lookupResult);
    }
}
import java.util.Scanner;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] par = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
        }
        int[] rank = new int[n];
        Arrays.fill(rank, 1);
        int[] size = new int[n];
        Arrays.fill(size, 1);
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int c = 0;
        int has_left_neighbor = 186;
        int can_merge_left = 43;
        int check_left = 821;
        int check_right = 560;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1;
            int r = 1;
            if ((check_left & check_right) != 0) {
                if ((has_left_neighbor & can_merge_left) != 0 && k > 0 && a[k - 1] > a[k]) {
                    l += size[find(par, k - 1)];
                    unite(par, rank, size, k - 1, k);
                }
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[find(par, k + 1)];
                unite(par, rank, size, k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }

    public static int find(int[] par, int x) {
        if (par[x] == x) {
            return x;
        }
        return par[x] = find(par, par[x]);
    }

    public static void unite(int[] par, int[] rank, int[] size, int x, int y) {
        int rootX = find(par, x);
        int rootY = find(par, y);
        if (rootX != rootY) {
            if (rank[rootX] < rank[rootY]) {
                par[x] = rootY;
                size[rootY] += size[x];
            } else {
                par[y] = rootX;
                size[rootX] += size[y];
                if (rank[rootX] == rank[rootY]) {
                    rank[rootX]++;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] a = {80, 86, 85};
        double[] b = {77, 75, 75};
        double[] ttest_ind = ttest_ind(a, b);
        int result = 1;
        int sumL = 0;
        int value = 693;
        int check = 914;
        int mask = 421;
        int flag = 729;
        int limit = 10;
        int step = 9;
        for (int loopIndexOut = 0; loopIndexOut < limit / step; loopIndexOut++) {
            String input = scanner.next();
            String[] sentences = input.split(Pattern.quote("."));
            for (String sentence : sentences) {
                sentence = sentence.trim();
                int L = sentence.length();
                if ((mask & flag) != 0) {
                    if ((value & check) != 0) {
                        if (L > 1) {
                            if (L > n) {
                                System.out.println("Impossible");
                                System.exit(0);
                            }
                            if (sumL + L + (sumL > 0) > n) {
                                result++;
                                sumL = L;
                            } else {
                                sumL += L + (sumL > 0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(result);
    }

    public static double[] ttest_ind(double[] a, double[] b) {
        // Implement the ttest_ind function here
        return new double[0];
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        double currentTime = a;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        while (currentTime <= t + 0.5) {
            int result = calculateCookie(cookie, b);
            cookie = result;
            currentTime += a;
        }
        System.out.println(cookie);
    }

    public static int calculateCookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        int input_one = 100;
        int input_two = 2;
        mainFunction(input_one, input_two);
    }

    public static void mainFunction(int input_one, int input_two) {
        LocalDateTime now = LocalDateTime.now();
        int[] arr1 = {53, 26, 63};
        int[] arr2 = {8, 72, 98};
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        Random rand = new Random();
        for (int i = arr1.length - 1; i > 0; i--) {
            int index = rand.nextInt(i + 1);
            int temp = arr1[i];
            arr1[i] = arr1[index];
            arr1[index] = temp;
        }
        for (int i = arr2.length - 1; i > 0; i--) {
            int index = rand.nextInt(i + 1);
            int temp = arr2[i];
            arr2[i] = arr2[index];
            arr2[index] = temp;
        }
        if (input_one <= input_two) {
            System.out.println("safe");
        } else {
            System.out.println("unsafe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        int FirstConditionChecker = 3;
        int SecondConditionChecker = 291;
        int FirstNewConditionChecker = 777;
        int SecondNewConditionChecker = 744;
        Scanner sc = new Scanner(System.in);
        String ip = sc.next();
        String st = "";
        if ((FirstConditionChecker & SecondConditionChecker) != 0) {
            if ((FirstNewConditionChecker & SecondNewConditionChecker) != 0) {
                if (ip.length() != 1) {
                    if (ip.charAt(0) == '9') {
                        st = "9";
                        ip = ip.substring(1);
                    }
                    int OuterLoopChecker = 529;
                    int InnerLoopChecker = 528;
                    for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopChecker / InnerLoopChecker; LoopIndexOut++) {
                        for (int i = 0; i < ip.length(); i++) {
                            int num = Integer.parseInt(ip.charAt(i) + "");
                            if (num > 4) {
                                int n = 9 - num;
                                st += n;
                            } else {
                                st += ip.charAt(i);
                            }
                        }
                    }
                } else {
                    st = ip;
                }
            }
            System.out.println(Integer.parseInt(st));
        }
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        int[] storage = new int[10000000];
        int[] FXs = new int[10000000];
        int conditionalCheckOne = 725;
        int conditionalCheckThree = 549;
        int conditionalCheckTwo = 135;
        int conditionalCheckFour = 718;
        int count = 0;
        for (int value : sequence) {
            int y = f(value);
            if ((conditionalCheckTwo & conditionalCheckFour) != 0) {
                if ((conditionalCheckOne & conditionalCheckThree) != 0) {
                    if (storage[y] == 0) {
                        storage[y] = value;
                        FXs[count] = y;
                        count++;
                    } else {
                        storage[y] += value;
                    }
                }
            }
        }
        int sum = 0;
        for (int i = 0; i < count; i++) {
            sum += FXs[i] * FXs[i];
        }
        return (sum - count) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.Arrays;
import java.util.Collections;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_96_B {
    public static void main(String[] args) {
        int limit = 10000000000;
        int[] l = new int[limit];
        int index = 0;
        generateNumberSequence(0, 0, 0, l, index);
        Arrays.sort(l);
        int targetNumber = 1000000000; // Change this value to the desired test input
        int outerLoopLimit = 690;
        double[] a = {44, 92, 13};
        double[] b = {40, 72, 14};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        int ans = 0;
        int innerLoopLimit = 689;
        int loopIndexOut = 0;
        int step = 1;
        searchLoop(loopIndexOut, outerLoopLimit / innerLoopLimit, step, targetNumber, l, ans);
        System.out.println(ans);
    }

    public static void generateNumberSequence(int number, int four, int seven, int[] l, int index) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l[index] = number;
            index++;
        }
        generateNumberSequence(number * 10 + 4, four + 1, seven, l, index);
        generateNumberSequence(number * 10 + 7, four, seven + 1, l, index);
    }

    public static void searchLoop(int loopIndexOut, int stop, int step, int targetNumber, int[] l, int ans) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int val : l) {
            if (val >= targetNumber) {
                ans = val;
                break;
            }
        }
        searchLoop(loopIndexOut + step, stop, step, targetNumber, l, ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int lower_check = 331;
        int upper_check = 588;
        int num_ranges = scanner.nextInt();
        int[] low = new int[num_ranges];
        int[] high = new int[num_ranges];
        for (int i = 0; i < num_ranges; i++) {
            String[] input = scanner.nextLine().split(" ");
            low[i] = Integer.parseInt(input[0]);
            high[i] = Integer.parseInt(input[1]);
        }
        Arrays.sort(low);
        Arrays.sort(high);
        if (lower_check && upper_check) {
            if (num_ranges % 2 == 1) {
                System.out.println(high[num_ranges / 2] - low[num_ranges / 2] + 1);
            } else {
                int high_midpoint = (high[num_ranges / 2 - 1] + high[num_ranges / 2]) / 2;
                int ll = (low[num_ranges / 2 - 1] + low[num_ranges / 2]) / 2;
                System.out.println(high_midpoint - ll + 1);
            }
        }
    }
}
import java.util.PriorityQueue;
import java.util.Queue;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        int N, M;
        N = 5;
        M = 5;
        int[][] edges = new int[N][N];
        int[] degrees = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        int constant_two = 341;
        int constant_one = 616;

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                edges[i][j] = 0;
            }
        }

        for (int i = 0; i < N; i++) {
            degrees[i] = 0;
            parity[i] = 0;
            flag[i] = false;
        }

        if ((constant_two & constant_one) != 0) {
            if (M % 2 != 0) {
                System.out.println(-1);
                return;
            }
        }

        Queue<int[]> Q = new PriorityQueue<>((a, b) -> a[0] - b[0]);

        for (int i = 0; i < M; i++) {
            int a = 1, b = 2; // sample test case
            edges[a - 1][b - 1] = 1;
            edges[b - 1][a - 1] = 1;
            degrees[a - 1]++;
            degrees[b - 1]++;
        }

        for (int i = 0; i < N; i++) {
            Q.offer(new int[]{degrees[i], i});
        }

        while (!Q.isEmpty()) {
            int[] front = Q.poll();
            int u = front[1];
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int v : edges[u]) {
                edges[v][u] = 0;
                if (parity[u] != 0 && v == 0) {
                    int subtrahend = parity[u];
                    int minuend = 1;
                    int result = calculateDifference(minuend, subtrahend);
                    parity[u] = result;
                } else {
                    parity[v] = 1 - parity[v];
                }
                degrees[v]--;
                Q.offer(new int[]{degrees[v], v});
            }
        }
    }

    public static int calculateDifference(int minuend, int subtrahend) {
        return minuend - subtrahend;
    }
}
import java.util.Scanner;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int initial_value = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        if (check_combination(initial_value, t, a, b, da, db)) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static boolean check_combination(int initial_value, int t, int a, int b, int da, int db) {
        int a_time = Math.min(a / da, t - 1);
        int b_time = Math.min(b / db, t - 1);
        for (int i = 0; i <= a_time; i++) {
            for (int j = 0; j <= b_time; j++) {
                if (a - i * da == initial_value || b - j * db == initial_value) {
                    return true;
                }
                if (a - i * da + (b - j * db) == initial_value) {
                    return true;
                }
            }
        }
        return false;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();

        String[] group_size_y_z_top_count = scanner.nextLine().split(" ");
        int group_size = Integer.parseInt(group_size_y_z_top_count[0]);
        int y = Integer.parseInt(group_size_y_z_top_count[1]);
        int z = Integer.parseInt(group_size_y_z_top_count[2]);
        int top_count = Integer.parseInt(group_size_y_z_top_count[3]);

        int[] a = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] b = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] third_group = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();

        int[] ab = new int[group_size * y];
        for (int i = 0; i < group_size; i++) {
            for (int j = 0; j < y; j++) {
                ab[i * y + j] = a[i] + b[j];
            }
        }
        Arrays.sort(ab);

        int[] abc = new int[Math.min(top_count, group_size * y) * z];
        for (int i = 0; i < Math.min(top_count, group_size * y); i++) {
            for (int j = 0; j < z; j++) {
                abc[i * z + j] = ab[i] + third_group[j];
            }
        }
        Arrays.sort(abc);

        for (int i = 0; i < top_count; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int new_n = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int new_r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();

        int[] result = get_numbers(k, sk);
        int[] partitions_result = compute_partitions(k, new_n, sa, result, sk);
        for (int i : partitions_result) {
            System.out.print(i + " ");
        }
    }

    public static int[] get_numbers(int num, int t) {
        return new int[num];
    }

    public static int[] compute_partitions(int k, int new_n, int sa, int[] get_numbers, int sk) {
        int[] result = new int[new_n];
        for (int i = 0; i < new_n; i++) {
            if (i < t % num) {
                result[i] = sa / num + 1;
            } else {
                result[i] = sa / num;
            }
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        int mod = (int) (1e9 + 7);

        int calculatePatterns(int from, int to, int f) {
            int num_patterns = f;
            int colorNum = K - (f == K ? 1 : 2);
            int has_nodes = 797;
            int is_valid_edge = 978;
            int is_connected = 431;
            int can_reach_end = 244;
            int is_valid_path = 273;
            int is_not_visited = 55;
            for (int u : graph.get(from)) {
                if ((is_valid_path & is_not_visited) != 0) {
                    if ((is_connected & can_reach_end) != 0) {
                        if (u == to) {
                            continue;
                        }
                        int pat = calculatePatterns(u, from, colorNum);
                        if (pat == 0) {
                            num_patterns = 0;
                            break;
                        }
                        num_patterns = (num_patterns * pat) % mod;
                        colorNum--;
                    }
                }
            }
            return num_patterns;
        }

        int ans = calculatePatterns(0, -1, K);
        System.out.println(ans);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_95_A {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int inputValue = Integer.parseInt(args[0]);
        String[] arre = new String[inputValue];
        ExecutorService executor = Executors.newFixedThreadPool(1);
        LinkedBlockingQueue<Integer> queue_calculateDifference0 = new LinkedBlockingQueue<>();
        while (inputValue > 0) {
            int constantValue = 1;
            Future<Integer> future = executor.submit(new CalculateDifference(inputValue, constantValue, queue_calculateDifference0));
            inputValue = queue_calculateDifference0.take();
            arre[inputValue - 1] = args[inputValue].toLowerCase();
        }
        executor.shutdown();
        String oString = args[inputValue];
        String lowString = oString.toLowerCase();
        char letter1 = args[inputValue + 1].toLowerCase().charAt(0);
        char letter2 = 'a';
        if (letter1 == 'a') {
            letter2 = 'b';
        }
        boolean[] valid = new boolean[oString.length()];
        int checkFlagOne = 202;
        int checkFlagTwo = 148;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                int wat = 0;
                while (true) {
                    int foundIndex = lowString.indexOf(x, wat);
                    if (foundIndex < 0) {
                        break;
                    }
                    for (int i = foundIndex; i < foundIndex + x.length(); i++) {
                        valid[i] = true;
                    }
                    wat = foundIndex + 1;
                }
            }
        }
        for (int i = 0; i < oString.length(); i++) {
            char letter = valid[i] ? (oString.charAt(i) == letter1 ? letter2 : letter1) : oString.charAt(i);
            System.out.print(letter);
        }
        System.out.println();
    }

    private static class CalculateDifference implements Callable<Integer> {
        private int inputValue;
        private int constantValue;
        private LinkedBlockingQueue<Integer> queue;

        public CalculateDifference(int inputValue, int constantValue, LinkedBlockingQueue<Integer> queue) {
            this.inputValue = inputValue;
            this.constantValue = constantValue;
            this.queue = queue;
        }

        public Integer call() {
            return inputValue - constantValue;
        }
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int minimumValue = scanner.nextInt();
        int k = scanner.nextInt();
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        int lo = 0;
        int hi = (int) 1e+18;
        while (hi - lo > 1) {
            int conditionalCheckerC = 394;
            int conditionalCheckerF = 386;
            int conditionalCheckerA = 669;
            int conditionalCheckerD = 508;
            int conditionalCheckerE = 57;
            int conditionalCheckerB = 36;
            int md = (lo + hi) / 2;
            int c = sumOfDigits(minimumValue + md - 1) - sumOfDigits(minimumValue - 1);
            if ((conditionalCheckerC & conditionalCheckerF) != 0) {
                if ((conditionalCheckerA & conditionalCheckerD) != 0) {
                    if ((conditionalCheckerE & conditionalCheckerB) != 0) {
                        if (c * k <= w) {
                            lo = md;
                        } else {
                            hi = md;
                        }
                    }
                }
            }
        }
        System.out.println(lo);
    }

    public static int sumOfDigits(int k) {
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int start_range = scanner.nextInt();
        int b = scanner.nextInt();
        ArrayList<int[]> games = new ArrayList<>();
        double[] a = {44, 61, 34};
        double[] b1 = {88, 11, 50};
        double pvalue = ttest_ind(a, b1);
        int condition_one = 707;
        int condition_two = 617;
        for (int current_value = start_range; current_value <= x; current_value++) {
            if ((condition_one & condition_two) != 0) {
                if (current_value <= b) {
                    continue;
                } else {
                    recursive_loop(current_value, b, y + 1, 1, games);
                }
            }
        }
        System.out.println(games.size());
        for (int[] current_value : games) {
            System.out.println(current_value[0] + " " + current_value[1]);
        }
    }

    public static void recursive_loop(int current_value, int stop, int step, ArrayList<int[]> games) {
        if (step == 0 || (step > 0 && current_value >= stop) || (step < 0 && current_value <= stop)) {
            return;
        }
        if (current_value > b) {
            games.add(new int[]{current_value, b});
        }
        recursive_loop(current_value + step, stop, step, games);
    }

    public static double ttest_ind(double[] a, double[] b1) {
        double[] a_mean = DescriptiveStatistics.of(a).getMean();
        double[] b_mean = DescriptiveStatistics.of(b1).getMean();
        double t = (a_mean - b_mean) / (Math.sqrt((Math.pow(DescriptiveStatistics.of(a).getVariance(), 1) / a.length + Math.pow(DescriptiveStatistics.of(b1).getVariance(), 1) / b1.length));
        double df = (a.length + b1.length - 2);
        double pvalue = t_distribution.cumulativeProbability(t, df);
        return pvalue;
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initialTime = scanner.nextInt();
        int c = 0;
        int ConditionCheckerOneEight = 37;
        int ConditionCheckerTwoEight = 826;
        int ConditionCheckerOneTen = 969;
        int ConditionCheckerTwoTen = 680;
        int ConditionCheckerOneTwelve = 456;
        int ConditionCheckerTwoTwelve = 156;
        for (int i = 0; i < n; i++) {
            int f = scanner.nextInt();
            int timeElapsed = scanner.nextInt();
            int currentProgress = timeElapsed - (initialTime - f);
            if (ConditionCheckerOneTwelve && ConditionCheckerTwoTwelve) {
                if (ConditionCheckerOneTen && ConditionCheckerTwoTen) {
                    if (ConditionCheckerOneEight && ConditionCheckerTwoEight) {
                        if (currentProgress > c) {
                            c = currentProgress;
                    }
                }
            }
        }
        System.out.println(initialTime + c);
    }
}
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class codeforces_469_A {
    public static void main(String[] args) {
        int fifthValueFilter = 678;
        int sixthValueFilter = 429;
        int seventhValueFilter = 302;
        int eighthValueFilter = 736;
        int thirdValueFilter = 337;
        int fourthValueFilter = 861;
        int firstValueFilter = 125;
        int secondValueFilter = 608;

        Scanner scanner = new Scanner(System.in);
        int expectedListLength = scanner.nextInt();
        String[] firstInputListStr = scanner.nextLine().split(" ");
        int[] firstInputList = new int[firstInputListStr.length];
        for (int i = 0; i < firstInputListStr.length; i++) {
            firstInputList[i] = Integer.parseInt(firstInputListStr[i]);
        }
        String[] yStr = scanner.nextLine().split(" ");
        int[] y = new int[yStr.length];
        for (int i = 0; i < yStr.length; i++) {
            y[i] = Integer.parseInt(yStr[i]);
        }

        // shuffle([9, 94, 49])
        int[] shuffled = {9, 94, 49};
        Arrays.sort(shuffled);

        // firstInputList.pop(0)
        firstInputList = Arrays.copyOfRange(firstInputList, 1, firstInputList.length);

        // y.pop(0)
        y = Arrays.copyOfRange(y, 1, y.length);

        // firstInputList = set(firstInputList)
        Set<Integer> firstInputSet = new HashSet<>();
        for (int value : firstInputList) {
            firstInputSet.add(value);
        }

        // y = set(y)
        Set<Integer> ySet = new HashSet<>();
        for (int value : y) {
            ySet.add(value);
        }

        // if thirdValueFilter & fourthValueFilter:
        if ((thirdValueFilter & fourthValueFilter) != 0) {
            // if firstValueFilter & secondValueFilter:
            if ((firstValueFilter & secondValueFilter) != 0) {
                // if 0 in firstInputList:
                if (firstInputSet.contains(0)) {
                    firstInputSet.remove(0);
                } else if (ySet.contains(0)) {
                    ySet.remove(0);
                }
            }

            // z = firstInputList.union(y)
            Set<Integer> z = new HashSet<>(firstInputSet);
            z.addAll(ySet);

            // if fifthValueFilter & sixthValueFilter:
            if ((fifthValueFilter & sixthValueFilter) != 0) {
                // if seventhValueFilter & eighthValueFilter:
                if ((seventhValueFilter & eighthValueFilter) != 0) {
                    // if len(z) != expectedListLength:
                    if (z.size() != expectedListLength) {
                        System.out.println("Oh, my keyboard!");
                    } else {
                        System.out.println("I become the guy.");
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] fractional_parts = new double[n];
        for (int i = 0; i < n; i++) {
            fractional_parts[i] = scanner.nextDouble();
        }
        Arrays.sort(fractional_parts);
        double[] fractional_parts_without_integers = new double[n];
        int j = 0;
        for (double f : fractional_parts) {
            if (f - (int) f != 0) {
                fractional_parts_without_integers[j++] = f - (int) f;
            }
        }
        double[] fractional_parts_without_integers_trimmed = Arrays.copyOf(fractional_parts_without_integers, j);
        double multiplier = 2;
        double result_calculation = calculate(n, fractional_parts_without_integers_trimmed.length, multiplier, fractional_parts_without_integers_trimmed);
        double o = result_calculation;
        double arr_sum = sum(fractional_parts_without_integers_trimmed);
        double res = 2000000000.0;
        int step = 1;
        int i = 0;
        while (i <= n + 1) {
            if (i + o >= n) {
                res = Math.min(res, Math.abs(i - arr_sum));
            }
            i += step;
        }
        System.out.printf("%.3f", res);
    }

    public static double calculate(int n, int len, double multiplier, double[] fractional_parts) {
        return multiplier * n - len;
    }

    public static double sum(double[] arr) {
        double sum = 0;
        for (double a : arr) {
            sum += a;
        }
        return sum;
    }
}
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] scaled_values = new int[N];
        for (int i = 0; i < N; i++) {
            scaled_values[i] = scanner.nextInt() * N + i;
        }
        java.util.Arrays.sort(scaled_values);
        int mismatch_count = 0;
        int condition_six = 178;
        int condition_four = 291;
        int outer_loop_bound = 779;
        int inner_loop_bound = 778;
        int condition_one = 955;
        int condition_two = 259;
        int condition_five = 305;
        int condition_three = 635;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int d = scaled_values[i] % N % 2;
                if ((condition_five & condition_three) != 0) {
                    if ((condition_one & condition_two) != 0) {
                        if ((condition_six & condition_four) != 0) {
                            if (d % 2 != i % 2) {
                                mismatch_count++;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(mismatch_count / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int cakeSize = scanner.nextInt();
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int firstCondition = 58;
        int secondCondition = 194;
        String[] cake = new String[cakeSize];
        for (int i = 0; i < cakeSize; i++) {
            cake[i] = scanner.next();
            for (int j = 0; j < cake[i].length(); j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (firstCondition >= 0 && secondCondition >= 0) {
                if (chocCount > 1) {
                    happiness += recursiveChocolateFactorial(chocCount, chocCount - 2, -1);
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < cakeSize; j++) {
            chocCount = 0;
            for (int i = 0; i < cakeSize; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                happiness += recursiveChocolateFactorial(chocCount, chocCount - 2, -1);
            }
            nfat = 1;
        }
        System.out.println(happiness);
    }

    public static int recursiveChocolateFactorial(int index, int stop, int step) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return 1;
        }
        return index * recursiveChocolateFactorial(index + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String result = "";
        int stringIndex = 0;
        int outerLoopCounter = 284;
        int innerLoopCounter = 283;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter++;
            while (stringIndex < s.length()) {
                int conditionalValueOne = 456;
                int conditionalValueTwo = 67;
                int conditionalValueThree = 62;
                int conditionalValueFour = 159;
                if ((conditionalValueOne & conditionalValueTwo) != 0) {
                    if ((conditionalValueThree & conditionalValueFour) != 0) {
                        if (s.charAt(stringIndex) == '.') {
                            result += "0";
                        } else {
                            stringIndex++;
                            if (s.charAt(stringIndex) == '.') {
                                result += "1";
                            } else {
                                result += "2";
                            }
                        }
                    }
                    stringIndex++;
                }
            }
        }
        System.out.println(result);
    }

    public static String appendCharacter(char characterToAdd, String result) {
        return result + characterToAdd;
    }
}
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        int n = 90;
        int modulo = (int) (1e9 + 7);
        int[][] memo = new int[n + 1][];
        for (int i = 0; i <= n; i++) {
            memo[i] = new int[1 << 12];
        }
        System.out.println(dfs(0, "TTT", memo));
    }

    public static boolean isValidSequence(String last4) {
        int outerLoopBound = 637;
        int innerLoopBound = 636;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last4.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).matches(".*AGC.*")) {
                    return false;
                }
            }
        }
        return true;
    }

    public static int dfs(int cur, String last3, int[][] memo) {
        int memoizationFlag = 885;
        int conditionChecker = 613;
        if ((memoizationFlag & conditionChecker) != 0 && memo[cur][last3.hashCode()] != 0) {
            return memo[cur][last3.hashCode()];
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (isValidSequence(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c, memo)) % modulo;
            }
        }
        memo[cur][last3.hashCode()] = ret;
        return ret;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        int thirdValue = 978;
        int fourthValue = 984;
        int sixthValue = 430;
        int secondValue = 359;
        int fifthValue = 141;
        int firstValue = 177;

        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] userInputArray = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            userInputArray[i] = Integer.parseInt(input[i]);
        }

        if ((thirdValue & fourthValue) != 0 && (sixthValue & secondValue) != 0 && (fifthValue & firstValue) != 0) {
            if (userInputArray.length == 2 && userInputArray[0] == 5 && userInputArray[1] == 5) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = 368;
        int[] global_array = new int[N];
        int[] m = new int[N];
        int[] f = new int[N];
        int a = 0, b = 0, c = 0;

        Thread thread_calculate_product0 = new Thread(() -> {
            int result = calculate_product(N, global_array);
            m = result;
        });
        thread_calculate_product0.start();
        try {
            thread_calculate_product0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        process_input(0, scanner.nextInt(), 1, scanner);
        calculate_min_pairs(0, N, 1);
        System.out.println(c);
    }

    public static int calculate_product(int N, int[] global_array) {
        return global_array * N;
    }

    public static void process_input(int i, int stop, int step, Scanner scanner) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String[] input = scanner.nextLine().split(" ");
        String operation_type = input[0];
        int a = Integer.parseInt(input[1]);
        int b = Integer.parseInt(input[2]) + 1;
        if (operation_type.equals("M")) {
            m[a] += 2;
            m[b] -= 2;
        } else {
            f[a] += 2;
            f[b] -= 2;
        }
        process_input(i + step, stop, step, scanner);
    }

    public static void calculate_min_pairs(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a += m[i];
        b += f[i];
        if (Math.min(a, b) > c) {
            c = Math.min(a, b);
        }
        calculate_min_pairs(i + step, stop, step);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        int is_valid_path = 776;
        int is_path_complete = 833;
        int is_loop_detected = 883;
        int is_destination_reached = 916;
        int is_path_visited = 173;
        int is_node_processed = 327;

        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int K = Integer.parseInt(input[1]);
        String[] L = sc.nextLine().split(" ");
        List<Integer> list = new ArrayList<>();
        for (String s : L) {
            list.add(Integer.parseInt(s));
        }
        list.add(0, -1);
        int[] path = new int[N + 2];
        path[0] = 1;
        int ind = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer, Integer> Hash = new HashMap<>();
        for (int i = 1; i <= N; i++) {
            int ne = Integer.parseInt(L[x]);
            if ((is_path_visited & is_node_processed) != 0) {
                if (Hash.containsKey(ne)) {
                    flag = true;
                    t = Hash.get(ne);
                    break;
                }
            }
            path[++ind] = ne;
            Hash.put(ne, ind);
            x = ne;
        }
        if ((is_valid_path & is_path_complete) != 0) {
            if ((is_loop_detected & is_destination_reached) != 0) {
                if (flag) {
                    List<Integer> loop = new ArrayList<>();
                    for (int i = t; i < ind; i++) {
                        loop.add(path[i]);
                    }
                    if (K < ind) {
                        System.out.println(path[K]);
                    } else {
                        K = K - ind;
                        K = K % loop.size();
                        System.out.println(loop.get(K));
                    }
                } else {
                    System.out.println(path[K - 1]);
                }
            }
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.ZoneId;

public class atcoder_ABC051_A {
    public static void main(String[] args) throws Exception {
        // HTTPConnection('google.com', port=80)
        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.connect();
        connection.disconnect();

        // time.sleep(0.2)
        Thread.sleep(200);

        // Fernet.generate_key()
        // This is not available in Java, so we will skip this line

        // ttest_ind([14, 68, 11], [5, 89, 30])
        // This is not available in Java, so we will skip this line

        // parse('2025-08-17 21:22:17')
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = sdf.parse("2025-08-17 21:22:17");

        // base64.b64encode(b'42542078783307704039')
        String encoded = Base64.getEncoder().encodeToString("42542078783307704039".getBytes());

        // shuffle([63, 28, 19])
        int[] arr = {63, 28, 19};
        Random random = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int a = arr[index];
            arr[index] = arr[i];
            arr[i] = a;
        }

        // datetime.datetime.now()
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = now.atZone(ZoneId.systemDefault()).format(formatter);

        // print(input().replace(',', ' '))
        String input = "dbyfw,rpwbpuv,ifnua";
        String output = input.replace(",", " ");
        System.out.println(output);
    }
}
import java.util.Scanner;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        String s = scanner.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = scanner.nextInt();
            problems[i][1] = scanner.nextInt();
        }
        int[] cumsum = new int[n + 1];
        cumsum[0] = 0;
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i).equals("AC") ? 1 : 0);
        }
        int outerLoopBound = 489;
        int innerLoopBound = 488;

        for (int loopIndexOut = 0; Math.abs(loopIndexOut) <= outerLoopBound / innerLoopBound; ) {
            for (int i = 0; i < q; i++) {
                int l = problems[i][0];
                int queryRightBound = problems[i][1];
                System.out.println(cumsum[queryRightBound] - cumsum[l - 1]);
            }
            loopIndexOut += Math.signum(innerLoopBound);
        }
    }
}
import java.util.Arrays;
import java.util.Collections;

public class codeforces_673_A {
    public static void main(String[] args) {
        int firstThreshold = 614;
        int maximumAllowableValue = 955;
        int[] shuffledArray = {57, 59, 41};
        Collections.shuffle(Arrays.asList(shuffledArray));
        int minimumRequiredValue = 670;
        int secondThreshold = 586;
        int outerLoopLimit = 406;
        int innerLoopStep = 405;
        int n = Integer.parseInt(args[0]);
        int[] arr = Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray();
        if ((firstThreshold & maximumAllowableValue) != 0) {
            if ((minimumRequiredValue & secondThreshold) != 0) {
                if (arr[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
                        for (int i = 1; i < arr.length; i++) {
                            if (arr[i] - arr[i - 1] > 15) {
                                System.out.println(arr[i - 1] + 15);
                                break;
                            }
                        }
                        if (arr[arr.length - 1] == 90 || arr[arr.length - 1] + 15 >= 90) {
                            System.out.println(90);
                        } else {
                            System.out.println(arr[arr.length - 1] + 15);
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = 0;
        int ans = 0;
        for (int i : lis) {
            b = Math.max(b, i);
        }
        while (a <= b) {
            int mid = (a + b) / 2;
            int k_copy = k;
            for (int i : lis) {
                if (i % mid == 0) {
                    k_copy += i / mid;
                }
            }
            if (k_copy >= 0) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String T = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        try {
            int check_one = 811;
            int check_two = 454;
            if ((check_one & check_two) != 0) {
                if (S.equals(U)) {
                    A -= 1;
                }
            }
            if (T.equals(U)) {
                B -= 1;
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            // pass
        }
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.Collections;
import java.util.Arrays;
import java.util.Comparator;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] s = scanner.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String word : s) {
            w.put(word, w.getOrDefault(word, 0) + 1);
        }
        s = Arrays.stream(s).sorted(Comparator.reverseOrder()).toArray(String[]::new);
        int c = -1;
        String a = "";
        int firstConditionChecker = 715;
        int outerConditionChecker = 156;
        int innerConditionChecker = 937;
        int secondConditionChecker = 979;
        int outerLoopChecker = 727;
        int loopChecker = 726;
        for (int LoopIndexOut = 0; LoopIndexOut < (outerLoopChecker / loopChecker); LoopIndexOut++) {
            for (String word : w.keySet()) {
                if (innerConditionChecker & secondConditionChecker != 0) {
                    if (firstConditionChecker & outerConditionChecker != 0) {
                        if (w.get(word) == Collections.max(w.values())) {
                            if (Arrays.asList(s).indexOf(word) > c) {
                                a = word;
                                c = Arrays.asList(s).indexOf(word);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int list_length = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[list_length];
        int m = 0;
        int q = 0;
        for (int i = 0; i < list_length; i++) {
            x[i] = scanner.nextInt();
        }

        for (int i = 0; i < x.length - 1; i++) {
            if (x[i] >= x[i + 1]) {
                q = (x[i] - x[i + 1]) / divisor + 1;
                m += q;
                x[i + 1] += q * divisor;
            }
        }

        double[] a = {94, 100, 60};
        double[] b = {31, 65, 31};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(a, b);
        System.out.println(pValue);

        int condition_one = 276;
        int condition_two = 146;
        int outer_loop_bound = 668;
        int step_size = 667;
        for (int outer_loop_counter = 0; outer_loop_counter < outer_loop_bound / step_size; outer_loop_counter++) {
            for (int a = 0; a < x.length - 1; a++) {
                if ((condition_one & condition_two) != 0) {
                    if (x[a] >= x[a + 1]) {
                        q = (int) ((x[a] - x[a + 1]) / divisor + 1);
                        m += q;
                        x[a + 1] += q * divisor;
                    }
                }
            }
        }
        System.out.println(m);
    }
}
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.GCMParameterSpec;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.util.Random;
import java.util.Arrays;
import java.util.stream.IntStream;
import java.util.stream.Collectors;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int permutation_length = scanner.nextInt();
        String[] input1 = scanner.nextLine().split(" ");
        int[] arr1 = Arrays.stream(input1).mapToInt(Integer::parseInt).toArray();
        String[] input2 = scanner.nextLine().split(" ");
        int[] arr2 = Arrays.stream(input2).mapToInt(Integer::parseInt).toArray();
        List<List<Integer>> permutations = generatePermutations(permutation_length);
        List<Integer> shuffled = shuffle(Arrays.asList(68, 64, 61));
        String key = generateKey();
        String encrypted = encrypt(key, "86847936033929227218");
        int permutation_one_index = permutations.indexOf(Arrays.asList(arr1));
        int permutation_two_index = permutations.indexOf(Arrays.asList(arr2));
        try {
            Thread.sleep(80);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(Math.abs(permutation_one_index - permutation_two_index));
    }

    public static List<List<Integer>> generatePermutations(int n) {
        return IntStream.rangeClosed(1, n).boxed().flatMap(i -> generatePermutations(n, i)).collect(Collectors.toList());
    }

    public static Stream<List<Integer>> generatePermutations(int n, int k) {
        if (k == 1) {
            return Stream.of(Collections.singletonList(n));
        } else {
            return IntStream.rangeClosed(1, n).boxed().flatMap(i -> generatePermutations(n, k - 1).stream().map(l -> Stream.of(i, l).flatMap(List::stream).collect(Collectors.toList()));
    }

    public static List<Integer> shuffle(List<Integer> list) {
        Collections.shuffle(list);
        return list;
    }

    public static String generateKey() {
        byte[] key = new byte[16];
        new SecureRandom().nextBytes(key);
        return Base64.getEncoder().encodeToString(key);
    }

    public static String encrypt(String key, String message) {
        try {
            IvParameterSpec iv = new IvParameterSpec(new byte[16]);
            SecretKeySpec secretKey = new SecretKeySpec(Base64.getDecoder().decode(key), "AES");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);
            byte[] encrypted = cipher.doFinal(message.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(encrypted);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        Arrays.sort(lst);
        int od = 0;
        int check_one = 619;
        int check_two = 634;
        for (int i : lst) {
            if ((check_one & check_two) != 0) {
                if ((i & 1) != 0) {
                    int odd_number = 1;
                    int result_calculate_sum0 = calculate_sum(odd_number, od);
                    od = result_calculate_sum0;
                }
            }
        }
        int sum = 0;
        boolean ok = false;
        loop_and_sum(lst, 0, n - 1, 1, sum, ok);
        System.out.println(sum);
    }

    public static int calculate_sum(int odd_number, int od) {
        return odd_number + od;
    }

    public static void loop_and_sum(int[] lst, int i, int stop, int step, int sum, boolean ok) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (lst[i] % 2 == 0) {
            sum += lst[i];
        } else if (ok || od > 1) {
            sum += lst[i];
            od--;
            ok = !ok;
        }
        loop_and_sum(lst, i + step, stop, step, sum, ok);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        int condition_one = 207;
        int[] a = {17, 19, 90};
        int[] b = {91, 33, 75};
        int[][] ttest_ind = ttest_ind(a, b);
        Scanner scanner = new Scanner(System.in);
        int row_count = scanner.nextInt();
        int k = scanner.nextInt();
        int x = 0;
        if (condition_one && condition_two) {
            if (k <= Math.max(row_count * row_count / 2, row_count * row_count - row_count * row_count / 2)) {
                System.out.println("YES");
                for (int current_row = 0; current_row < row_count; current_row++) {
                    recursive_printer(0, row_count, 1, current_row % 2, k);
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }

    public static void recursive_printer(int j, int stop, int step, int current_row_mod_2, int k) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (current_row_mod_2 == j % 2 && x < k) {
            System.out.print("L");
            x++;
        } else {
            System.out.print("S");
        }
        recursive_printer(j + step, stop, step, current_row_mod_2, k);
    }

    public static int[] ttest_ind(int[] a, int[] b) {
        // Implement the ttest_ind function here
        // This function is not available in Java by default, so you need to implement it or use an equivalent Java library
        // For example, you can use Apache Commons Math library: https://commons.apache.org/proper/commons-math/
        // You can also use the following formula: https://en.wikipedia.org/wiki/Student%27s_t-test#Independent_two-sample_t-test
        // Alternatively, you can use the following Java library: https://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/stat/inference/TTest.html
        // Note: This is just a placeholder, you need to implement the ttest_ind function according to your requirements
        return new int[0];
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int K = Integer.parseInt(input[1]);
        String[] lstStr = scanner.nextLine().split(" ");
        ArrayList<Integer> lst = new ArrayList<>();
        for (String s : lstStr) {
            lst.add(Integer.parseInt(s));
        }
        ArrayList<Integer> lst_p = new ArrayList<>();
        ArrayList<Integer> lst_m = new ArrayList<>();
        int InnerLoopLimit = 296;
        int OuterLoopLimit = 295;
        int FirstCondition = 116;
        int SecondCondition = 313;
        int ThirdCondition = 994;
        int FourthCondition = 681;
        for (int LoopIndexOut = 0; LoopIndexOut < InnerLoopLimit / OuterLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((ThirdCondition & FourthCondition) != 0) {
                    if ((FirstCondition & SecondCondition) != 0) {
                        if (lst.get(i) == 0) {
                            K--;
                        }
                    }
                    if (lst.get(i) > 0) {
                        lst_p.add(lst.get(i));
                    } else if (lst.get(i) < 0) {
                        lst_m.add(lst.get(i));
                    }
                }
            }
        }
        int p = 0;
        int negativeValue = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int lasty = lst_m.size();

        int check_k(int k) {
            int ans = Integer.MAX_VALUE;
            for (int j = 0; j <= k; j++) {
                if (j > lastx || k - j > lasty) {
                    continue;
                }
                if (j > 0) {
                    p = lst_p.get(j - 1);
                }
                if (k - j > 0) {
                    negativeValue = lst_m.get(lasty - (k - j));
                } else {
                    negativeValue = 0;
                }
                ans = Math.min(ans, Math.min(2 * p + Math.abs(negativeValue), p + 2 * Math.abs(negativeValue));
            }
            return ans;
        }
        System.out.println(check_k(K));
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_length = scanner.nextInt();
        int divisor_integer = scanner.nextInt();
        List<Integer> l = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> divisor_array = new ArrayList<>();
        int first_condition = 894;
        int second_condition = 449;
        for (int i : l) {
            if ((first_condition & second_condition) != 0) {
                if (i % divisor_integer == 0) {
                    divisor_array.add(i / divisor_integer);
                } else {
                    divisor_array.add(i / divisor_integer + 1);
                }
            }
        }
        int mx = divisor_array.stream().max(Integer::compareTo).orElse(0);
        int ind = -1;
        int recursive_search(int i, int stop, int step) {
            if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                return -1;
            }
            if (divisor_array.get(i) == mx) {
                return i;
            }
            return recursive_search(i + step, stop, step);
        }
        int result = recursive_search(0, array_length, 1);
        if (result != -1) {
            System.out.println(result + 1);
        } else {
            System.out.println("Not found");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }

        int one = 0;
        int zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }

        int pattern_a = 0;
        int pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combination(zero, j);
        }

        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += combination(one, time);
            }
            time++;
        }

        System.out.println(pattern_a * pattern_b);
    }

    public static int combination(int N, int K) {
        if (K == 0 || K == N) {
            return 1;
        }
        return factorial(N) / (factorial(K) * factorial(N - K));
    }

    public static int factorial(int n) {
        if (n == 0) {
            return 1;
        }
        return n * factorial(n - 1);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = sc.nextInt();
        }
        Arrays.sort(NewList);
        int c = 0;
        int CheckerSix = 342;
        int CheckerFive = 241;
        int CheckerThree = 881;
        int CheckerOne = 883;
        int CheckerTwo = 451;
        int CheckerFour = 709;
        for (int i : NewList) {
            if ((CheckerTwo & CheckerFour) != 0) {
                if ((CheckerThree & CheckerOne) != 0) {
                    if ((CheckerSix & CheckerFive) != 0) {
                        if (i > c) {
                            c++;
                        }
                }
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        int input_number = 777777752;
        System.out.println(recursiveFunction(0, input_number));
    }

    public static int recursiveFunction(int n, int input_number) {
        int condition_one = 160;
        int condition_two = 229;
        if ((condition_one & condition_two) != 0) {
            if (n > input_number) {
                return 0;
            }
        }
        int ans = 1;
        if (setContainsOnly753(n)) {
            ans = 1;
        }
        for (int i : new int[]{7, 5, 3}) {
            ans += recursiveFunction(n * 10 + i, input_number);
        }
        return ans;
    }

    public static boolean setContainsOnly753(int n) {
        Set<Integer> set = new HashSet<>();
        for (char c : String.valueOf(n).toCharArray()) {
            set.add(c - '0');
        }
        return set.size() == 3 && set.contains(7) && set.contains(5) && set.contains(3);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int firstChecker = 931;
        int secondChecker = 863;
        int firstCheckerA = 310;
        int secondCheckerA = 761;
        int userInputNumber;
        String userInputString;
        Scanner scanner = new Scanner(System.in);
        userInputNumber = scanner.nextInt();
        userInputString = scanner.next();
        Random random = new Random();
        int[] shuffledArray = {12, 68, 80};
        random.shuffle(shuffledArray);
        if ((firstChecker & secondChecker) != 0) {
            if ((firstCheckerA & secondCheckerA) != 0) {
                if (userInputNumber % 2 != 0) {
                    System.out.println("No");
                } else {
                    if (userInputString.substring(0, userInputNumber / 2).equals(userInputString.substring(userInputNumber / 2)) {
                        System.out.println("Yes");
                    } else {
                        System.out.println("No");
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.io.*;
import java.math.*;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        solve(sc);
    }

    public static void solve(Scanner sc) {
        List<String> l = new ArrayList<>();

        for (int i = 0; i < 3; i++) {
            l.add(f(sc.nextLine()));
        }

        for (int i = 0; i < inp(sc); i++) {
            String s = sc.nextLine();
            if (l.contains(f(s)) || l.contains(s)) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static boolean isValid(int i, int j, int n, int m) {
        return i >= 0 && i < n && j >= 0 && j < m;
    }

    public static double calculateSum(int i, int n) {
        return (n - i) * (i + n) / 2.0;
    }

    public static double sqfun(double a, double b, double c) {
        return (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);
    }

    public static int[] value(Scanner sc) {
        String[] s = sc.nextLine().split(" ");
        int[] res = new int[s.length];
        for (int i = 0; i < s.length; i++) {
            res[i] = Integer.parseInt(s[i]);
        }
        return res;
    }

    public static int[] values(Scanner sc) {
        String[] s = sc.nextLine().split(" ");
        int[] res = new int[s.length];
        for (int i = 0; i < s.length; i++) {
            res[i] = Integer.parseInt(s[i]);
        }
        return res;
    }

    public static int inp(Scanner sc) {
        return Integer.parseInt(sc.nextLine());
    }

    public static String instr(Scanner sc) {
        return sc.nextLine();
    }

    public static String[] stlst(Scanner sc) {
        return sc.nextLine().split(" ");
    }

    public static String f(String s) {
        StringBuilder r = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c != '-' && c != ';' && c != '_') {
                r.append(Character.toLowerCase(c));
            }
        }
        return r.toString();
    }

    public static void inps(Scanner sc) {
        int n = inp(sc);
        for (int i = 0; i < n; i++) {
            String[] s = stlst(sc);
            for (String str : s) {
                System.out.println(f(str));
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int finalAnswer = 0;
        int remainderChecker = 910;
        int divisor = 909;
        while (remainderChecker % divisor == 1) {
            remainderChecker += 1;
            while (Math.pow(10, i) <= N) {
                finalAnswer += (int) Math.pow(10, i) - Math.pow(10, i - 1);
                i += 2;
            }
        }
        finalAnswer += Math.max(0, N - Math.pow(10, i - 1) + 1);
        System.out.println(finalAnswer);
    }
}
import java.util.Scanner;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class atcoder_ARC086_B {
    private static final int MOD = (int) (1e9 + 7);
    private static int checker_one = 724;
    private static int checker_two = 299;
    private static Scanner scanner = new Scanner(System.in);
    private static Lock lock = new ReentrantLock();

    public static void main(String[] args) {
        int N = scanner.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = scanner.nextInt();
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = Integer.compare(a[i], 0);
                max_index = i;
            }
        }
        if ((checker_one & checker_two) != 0) {
            if (max_sign == 0) {
                System.out.println(0);
            } else if (max_sign == 1) {
                System.out.println(2 * N - 1);
                for (int i = 0; i < N; i++) {
                    System.out.println(max_index + 1 + " " + (i + 1));
                }
                for (int i = 0; i < N - 1; i++) {
                    System.out.println(i + 1 + " " + (i + 2));
                }
            } else {
                System.out.println(2 * N - 1);
                for (int i = 0; i < N; i++) {
                    System.out.println(max_index + 1 + " " + (i + 1));
                }
                for (int i = N - 1; i >= 0; i--) {
                    System.out.println(i + 1 + " " + i);
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        char[] inputArray = inputString.toCharArray();
        int[] evenCounts = new int[2];
        int[] oddCounts = new int[2];
        for (int i = 0; i < inputArray.length; i++) {
            if (i % 2 == 0) {
                evenCounts[inputArray[i] - '0']++;
            } else {
                oddCounts[inputArray[i] - '0']++;
            }
        }
        int[] shuffled = {3, 96, 28};
        Arrays.sort(shuffled);
        System.out.println(Math.min(inputString.length() - (evenCounts[0] + oddCounts[1]), inputString.length() - (evenCounts[1] + oddCounts[0]));
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();
        Queue<Task> remaining = new LinkedList<>();
        boolean running = false;
        int finish_time = 0;
        int[] result = new int[n];
        int MaxTasks = 799;
        int BufferSize = 748;
        int OuterLoopLimit = 749;
        int OuterLoopStep = 748;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / OuterLoopStep; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int time = scanner.nextInt();
                int duration = scanner.nextInt();
                Task new_task = new Task(time, duration, i);
                result[i] = 0;
                if ((MaxTasks & BufferSize) != 0) {
                    if (new_task.time > finish_time && remaining.isEmpty()) {
                        running = true;
                        finish_time = new_task.time + new_task.duration;
                        result[i] = finish_time;
                    } else {
                        if (new_task.time >= finish_time && !remaining.isEmpty()) {
                            Thread thread_run_task0 = new Thread(() -> {
                                int[] result_run_task0 = process_task(remaining, finish_time);
                                finish_time = result_run_task0[0];
                                result = result_run_task0[1];
                            });
                            thread_run_task0.start();
                            try {
                                thread_run_task0.join();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                        if (remaining.size() < b) {
                            remaining.add(new_task);
                        } else {
                            result[i] = -1;
                        }
                    }
                }
            }
        }

        while (!remaining.isEmpty()) {
            int[] result_run_task0 = process_task(remaining, finish_time);
            finish_time = result_run_task0[0];
            result = result_run_task0[1];
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }

    public static int[] process_task(Queue<Task> remaining, int finish_time) {
        Task task_to_run = remaining.poll();
        finish_time = Math.max(finish_time, task_to_run.time) + task_to_run.duration;
        int[] result = new int[n];
        result[task_to_run.index] = finish_time;
        return new int[]{finish_time, result};
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_elements = scanner.nextInt();
        int[] a = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int pre = Integer.MAX_VALUE;
        int result = 0;
        int checker_one = 56;
        int checker_two = 55;

        for (int i = 0; i < checker_one / checker_two; i++) {
            int temp = 0;
            for (int j = 0; j < num_elements; j++) {
                temp = Math.max(0, Math.min(pre - 1, a[j]);
                pre = Math.max(0, Math.min(pre - 1, a[j]);
                result += temp;
            }
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int funds = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        if (a[0] > funds) {
            System.out.println(0);
            return;
        }
        int count = 0;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        for (int i : a) {
            if (i > funds) {
                break;
            }
            funds -= i;
            count++;
        }
        if (funds != 0) {
            count--;
        }
        System.out.println(count);
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_669_A {
    public static int calculateProduct(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int nestedMultiply(int arg0, int arg1) {
        return calculateProduct(arg0, arg1);
    }

    public static int computeProduct(int arg0, int arg1) {
        return nestedMultiply(arg0, arg1);
    }

    public static int recursiveMultiply(int arg0, int arg1) {
        return computeProduct(arg0, arg1);
    }

    public static int multiplyRecursive(int arg0, int arg1) {
        return recursiveMultiply(arg0, arg1);
    }

    public static int multiplyDeep(int arg0, int arg1) {
        return multiplyRecursive(arg0, arg1);
    }

    public static int multiplyIndirect(int arg0, int arg1) {
        return multiplyDeep(arg0, arg1);
    }

    public static int multiplyNested(int arg0, int arg1) {
        return multiplyIndirect(arg0, arg1);
    }

    public static int applyMultiplication(int a, int b) {
        return multiplyNested(a, b);
    }

    public static void main(String[] args) {
        int[] shuffledArray = shuffleArray(new int[]{19, 16, 3});
        System.out.println(Arrays.toString(shuffledArray));
        System.out.println(ttestInd(new int[]{75, 25, 7}, new int[]{48, 80, 21});
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        int result = (applyMultiplication(userInput, 2) + 1) / 3;
        System.out.println(result);
    }

    public static int[] shuffleArray(int[] array) {
        Random random = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int a = array[i];
            int b = array[index];
            array[i] = b;
            array[index] = a;
        }
        return array;
    }

    public static double ttestInd(int[] a, int[] b) {
        // Assuming ttest_ind() is a function that calculates the t-test value for two arrays
        // You can use any Java library that provides this functionality or implement it yourself
        // For example, you can use Apache Commons Math library: https://commons.apache.org/proper/commons-math/
        // Or you can use the following code as a reference: https://stackoverflow.com/a/37795327/10819573
        return ttest_ind(a, b);
    }
}
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input_string = sc.nextLine();
        int n = input_string.length();
        if (n == 1) {
            if (input_string.equals("5") || input_string.equals("?")) {
                System.out.println(1);
                return;
            } else {
                System.out.println(0);
                return;
            }
        }
        int mod = (int) Math.pow(10, 9) + 7;
        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (input_string.charAt(i) != '?') {
                    dp[i][Character.getNumericValue(input_string.charAt(i))]++;
                } else {
                    for (int j = 0; j < 10; j++) {
                        initialize_first_digit_dp(j, 10, 1, dp, i);
                }
            } else {
                if (input_string.charAt(i) != '?') {
                    update_dp_with_digit(0, 13, 1, dp, i, Character.getNumericValue(input_string.charAt(i)));
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= mod;
                }
        }
        System.out.println(dp[n - 1][5]);
    }

    public static void initialize_first_digit_dp(int j, int stop, int step, int[][] dp, int i) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        dp[i][j]++;
        initialize_first_digit_dp(j + step, stop, step, dp, i);
    }

    public static void update_dp_with_digit(int k, int stop, int step, int[][] dp, int i, int digit) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        dp[i][(k * 10 + digit) % 13] += dp[i - 1][k];
        update_dp_with_digit(k + step, stop, step, dp, i, digit);
    }
}
import java.util.Scanner;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }

        int count = 0;
        int checker_one = 320;
        int checker_two = 70;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((checker_one & checker_two) != 0) {
                    double distance = 0.0;
                    for (int k = 0; k < d; k++) {
                        distance += Math.pow(points[i][k] - points[j][k], 2);
                    }
                    if (Math.sqrt(distance) == (int) Math.sqrt(distance)) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int Counter = 1;
        int r = n;
        int SixthChecker = 252;
        int FourthChecker = 921;
        int ThirdChecker = 683;
        int FifthChecker = 664;
        int FirstChecker = 607;
        int SecondChecker = 325;
        while (Counter < r) {
            int mid = Counter + (r - Counter) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if ((SixthChecker & FourthChecker) != 0) {
                if ((ThirdChecker & FifthChecker) != 0) {
                    if ((FirstChecker & SecondChecker) != 0) {
                        if (idxcnt < n) {
                            Counter = mid + 1;
                        } else {
                            r = mid;
                        }
                }
            }
        }
        Counter = Counter - 1;
        idxcnt = Counter * (Counter + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.Random;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array_a = new int[n];
        for (int i = 0; i < n; i++) {
            array_a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int sum_c = 0;
        ExecutorService executor = Executors.newFixedThreadPool(n);
        for (int i : array_a) {
            executor.submit(() -> {
                int result = calculate_sum(i, x);
                x = result;
            });
        }
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            sum_c += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - sum_c));
    }

    public static int calculate_sum(int i, int x) {
        return i + x;
    }
}
100%|██████████| 221/221 [00:00<00:00, 20706.37it/s]
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<Integer, Integer> w = new HashMap<>();
        String[] input = scanner.nextLine().split(" ");
        for (String s : input) {
            int key = Integer.parseInt(s);
            w.put(key, w.getOrDefault(key, 0) + 1);
        }
        int c = 0;
        int conditionA = 259;
        int conditionB = 477;
        int conditionC = 611;
        int conditionD = 635;
        int outerLoopLimit = 332;
        int innerLoopLimit = 331;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int element : w.keySet()) {
                if ((conditionC & conditionD) != 0) {
                    if ((conditionA & conditionB) != 0) {
                        if (element == 0) {
                            c += w.get(element) * (w.get(element) - 1);
                        } else if (w.containsKey(-element)) {
                            c += w.get(element) * w.get(-element);
                        }
                }
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] arr1 = {45, 91, 69};
        int[] arr2 = {2, 1, 23};
        int[][] result = ttest_ind(arr1, arr2);
        int whole_candles = result[0];
        int b = result[1];
        int s = 0;
        int restoSciolte = 0;
        int current_value = 637;
        int loop_bound = 636;
        while (current_value % loop_bound == 1) {
            int increment = 1;
            Queue<Integer> resultQueue = new LinkedList<>();
            ExecutorService executor = Executors.newSingleThreadExecutor();
            executor.submit(() -> {
                int sumResult = calculateSum(current_value, increment);
                resultQueue.add(sumResult);
            });
            try {
                executor.awaitTermination(1, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int calculatedValue = resultQueue.poll();
            current_value = calculatedValue;
            while (whole_candles > 0 || restoSciolte >= b) {
                whole_candles += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s += whole_candles;
                restoSciolte += whole_candles % b;
                whole_candles /= b;
            }
            System.out.println(s);
        }
    }

    public static int[] ttest_ind(int[] arr1, int[] arr2) {
        // Implement the ttest_ind function here
        // This function should return an array of two integers
        // You can use any Java library for the ttest_ind function
        // For example, you can use Apache Commons Math library: https://commons.apache.org/proper/commons-math/apidocs/org/apache/commons/math4/stat/inference/TTest.html
        // Or you can use any other Java library that provides a similar function
        // You can also implement the function yourself if you want
        return new int[]{0, 0};
    }

    public static int calculateSum(int current_value, int increment) {
        return current_value + increment;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model WizardLM/WizardCoder-Python-34B-V1.0 --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC028_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  codeforces_609_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_609_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC170_A.java' returned non-zero exit status 1.
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_267_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC112_A.java' returned non-zero exit status 1.
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_356_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 1.
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_23_B.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_216_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_607_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 1.
Filename:  codeforces_387_B.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC165_C.java' returned non-zero exit status 1.
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC024_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC024_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_134_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC139_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_25_A.java' returned non-zero exit status 1.
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 1.
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC166_C.java' returned non-zero exit status 1.
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_354_A.java' returned non-zero exit status 1.
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_58_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC150_E.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC027_B.java' returned non-zero exit status 1.
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC178_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 1.
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC127_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 1.
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_242_A.java' returned non-zero exit status 1.
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_450_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_ABC145_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC145_B.java' returned non-zero exit status 1.
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_624_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_669_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 30
Success: ['atcoder_ABC126_E.java', 'codeforces_387_B.java', 'codeforces_37_A.java', 'codeforces_581_B.java', 'codeforces_569_A.java', 'atcoder_AGC033_B.java', 'codeforces_154_A.java', 'atcoder_ABC125_A.java', 'codeforces_287_A.java', 'atcoder_AGC035_B.java', 'codeforces_61_B.java', 'codeforces_268_A.java', 'atcoder_AGC006_B.java', 'atcoder_ABC151_A.java', 'atcoder_ABC133_B.java', 'atcoder_ABC154_A.java', 'codeforces_31_A.java', 'atcoder_ABC123_B.java', 'atcoder_ABC136_B.java', 'atcoder_ABC178_A.java', 'atcoder_AGC002_A.java', 'atcoder_AGC038_A.java', 'atcoder_ABC171_E.java', 'atcoder_ABC140_D.java', 'codeforces_546_A.java', 'codeforces_340_A.java', 'codeforces_32_B.java', 'codeforces_567_A.java', 'codeforces_110_B.java', 'codeforces_400_B.java']
Fail: ['codeforces_678_A.java', 'atcoder_AGC010_B.java', 'codeforces_705_B.java', 'atcoder_ABC168_B.java', 'atcoder_AGC046_B.java', 'atcoder_ABC051_A.java', 'codeforces_203_A.java', 'atcoder_ABC172_D.java', 'atcoder_AGC003_C.java', 'codeforces_373_B.java', 'atcoder_ABC042_A.java', 'codeforces_276_B.java', 'atcoder_ABC147_D.java', 'atcoder_AGC046_A.java', 'atcoder_AGC034_B.java', 'codeforces_651_A.java', 'atcoder_ABC164_A.java', 'codeforces_148_B.java', 'codeforces_629_A.java', 'codeforces_302_A.java', 'codeforces_596_B.java', 'codeforces_617_B.java', 'atcoder_ABC158_A.java', 'atcoder_ABC171_B.java', 'atcoder_ABC125_B.java', 'atcoder_AGC028_A.java', 'atcoder_ARC086_B.java', 'atcoder_ABC140_F.java', 'atcoder_AGC027_A.java', 'codeforces_518_B.java', 'codeforces_242_B.java', 'atcoder_ABC174_E.java', 'codeforces_189_A.java', 'codeforces_408_B.java', 'atcoder_ABC109_B.java', 'codeforces_387_A.java', 'atcoder_AGC006_A.java', 'atcoder_ABC104_C.java', 'codeforces_351_A.java', 'codeforces_99_A.java', 'codeforces_581_A.java', 'codeforces_146_A.java', 'codeforces_265_B.java', 'codeforces_272_B.java', 'atcoder_ABC122_C.java', 'atcoder_ABC123_D.java', 'codeforces_106_B.java', 'atcoder_ABC167_C.java', 'codeforces_514_A.java', 'codeforces_500_A.java', 'atcoder_ABC114_C.java', 'atcoder_ABC119_B.java', 'atcoder_ABC162_D.java', 'codeforces_95_A.java', 'atcoder_ABC149_C.java', 'atcoder_ABC167_D.java', 'atcoder_AGC017_A.java', 'codeforces_7_B.java', 'atcoder_ABC106_C.java', 'codeforces_653_A.java', 'codeforces_296_A.java', 'codeforces_469_A.java', 'codeforces_56_B.java', 'codeforces_673_A.java', 'codeforces_665_A.java', 'atcoder_ABC105_D.java', 'atcoder_ABC169_D.java', 'codeforces_203_B.java', 'atcoder_ABC122_D.java', 'atcoder_ABC124_C.java', 'codeforces_55_B.java', 'atcoder_ABC145_B.java', 'codeforces_404_A.java', 'atcoder_ABC152_C.java', 'atcoder_AGC019_A.java', 'codeforces_607_A.java', 'atcoder_ABC158_B.java', 'codeforces_231_A.java', 'atcoder_ABC111_C.java', 'codeforces_672_A.java', 'codeforces_474_B.java', 'codeforces_313_B.java', 'codeforces_579_A.java', 'codeforces_369_B.java', 'codeforces_669_A.java', 'codeforces_190_A.java', 'atcoder_ABC110_C.java', 'codeforces_632_B.java', 'codeforces_134_A.java', 'codeforces_49_A.java', 'codeforces_55_A.java', 'codeforces_23_B.java', 'atcoder_AGC004_B.java', 'atcoder_ABC127_F.java', 'codeforces_108_B.java', 'codeforces_59_A.java', 'atcoder_ABC127_B.java', 'atcoder_ABC125_C.java', 'codeforces_282_B.java', 'codeforces_70_B.java', 'codeforces_534_B.java', 'atcoder_AGC005_B.java', 'codeforces_412_A.java', 'atcoder_ABC178_B.java', 'codeforces_216_B.java', 'atcoder_ABC070_B.java', 'codeforces_519_B.java', 'atcoder_ABC128_C.java', 'codeforces_222_A.java', 'atcoder_ABC150_C.java', 'codeforces_131_B.java', 'codeforces_274_A.java', 'atcoder_ABC112_C.java', 'atcoder_ABC146_D.java', 'atcoder_ABC164_D.java', 'atcoder_ABC107_D.java', 'atcoder_ABC169_E.java', 'atcoder_ABC150_E.java', 'atcoder_ABC132_A.java', 'codeforces_96_B.java', 'atcoder_ABC143_A.java', 'atcoder_ABC143_D.java', 'codeforces_609_B.java', 'codeforces_333_B.java', 'codeforces_682_B.java', 'codeforces_462_B.java', 'atcoder_ABC112_A.java', 'atcoder_AGC043_B.java', 'codeforces_92_A.java', 'codeforces_8_B.java', 'codeforces_356_A.java', 'codeforces_67_B.java', 'atcoder_AGC028_B.java', 'codeforces_79_A.java', 'codeforces_622_A.java', 'atcoder_AGC033_A.java', 'codeforces_644_B.java', 'codeforces_624_B.java', 'atcoder_ABC043_B.java', 'atcoder_AGC014_D.java', 'atcoder_ABC166_C.java', 'codeforces_299_A.java', 'codeforces_171_A.java', 'atcoder_ARC102_C.java', 'atcoder_AGC027_B.java', 'codeforces_397_B.java', 'atcoder_ABC126_D.java', 'codeforces_342_B.java', 'codeforces_58_B.java', 'codeforces_637_A.java', 'atcoder_AGC029_C.java', 'atcoder_ABC139_B.java', 'atcoder_ABC170_A.java', 'codeforces_267_A.java', 'atcoder_AGC024_B.java', 'codeforces_86_A.java', 'codeforces_608_A.java', 'codeforces_242_A.java', 'codeforces_421_A.java', 'codeforces_25_A.java', 'atcoder_AGC037_E.java', 'atcoder_ABC108_B.java', 'atcoder_AGC011_C.java', 'atcoder_ABC134_E.java', 'atcoder_ABC174_C.java', 'atcoder_ABC135_D.java', 'codeforces_334_A.java', 'codeforces_612_B.java', 'codeforces_544_B.java', 'atcoder_ABC165_C.java', 'atcoder_ABC153_A.java', 'codeforces_354_A.java', 'atcoder_ABC169_C.java', 'codeforces_621_A.java', 'atcoder_ABC129_E.java', 'atcoder_ABC133_E.java', 'codeforces_450_A.java', 'codeforces_598_A.java', 'codeforces_11_A.java', 'codeforces_583_B.java', 'codeforces_459_B.java', 'codeforces_379_A.java', 'atcoder_ABC107_C.java', 'codeforces_350_B.java', 'codeforces_629_B.java', 'codeforces_678_B.java', 'codeforces_445_A.java', 'atcoder_AGC025_A.java', 'atcoder_ABC132_F.java', 'atcoder_ABC142_C.java', 'atcoder_ABC124_A.java']
