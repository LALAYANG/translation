+ model=bigcode/starcoder2-15b
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model bigcode/starcoder2-15b --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 09:43:02 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 08-21 09:43:03 [utils.py:326] non-default args: {'model': 'bigcode/starcoder2-15b', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 09:43:11 [__init__.py:711] Resolved architecture: Starcoder2ForCausalLM
INFO 08-21 09:43:11 [__init__.py:2816] Downcasting torch.float32 to torch.bfloat16.
INFO 08-21 09:43:11 [__init__.py:1750] Using max model len 4096
INFO 08-21 09:43:12 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=667905)[0;0m INFO 08-21 09:43:12 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=667905)[0;0m INFO 08-21 09:43:12 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='bigcode/starcoder2-15b', speculative_config=None, tokenizer='bigcode/starcoder2-15b', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=bigcode/starcoder2-15b, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=667905)[0;0m WARNING 08-21 09:43:12 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=667905)[0;0m INFO 08-21 09:43:12 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_690e5b9e'), local_subscribe_addr='ipc:///tmp/3b433b37-6d8c-4c34-88b8-a38575d51f55', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:15 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_7b997869'), local_subscribe_addr='ipc:///tmp/117f100b-6378-40bf-bb8d-a1fb3610f6f4', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:15 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_2e1a0702'), local_subscribe_addr='ipc:///tmp/847e79a1-9b30-4b6a-945b-7fa7ee144d36', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:16 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:16 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:16 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:16 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:16 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:16 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:16 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_298623e0'), local_subscribe_addr='ipc:///tmp/cd58c804-3c3f-4efd-bfb0-d681eb04780a', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:16 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:16 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m WARNING 08-21 09:43:16 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m WARNING 08-21 09:43:16 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:16 [gpu_model_runner.py:1953] Starting to load model bigcode/starcoder2-15b...
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:16 [gpu_model_runner.py:1953] Starting to load model bigcode/starcoder2-15b...
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:17 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:17 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:17 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:17 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:17 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:17 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/14 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:   7% Completed | 1/14 [00:01<00:14,  1.12s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  14% Completed | 2/14 [00:02<00:13,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  21% Completed | 3/14 [00:03<00:12,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  29% Completed | 4/14 [00:04<00:11,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  36% Completed | 5/14 [00:05<00:10,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  43% Completed | 6/14 [00:06<00:09,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  50% Completed | 7/14 [00:08<00:08,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  57% Completed | 8/14 [00:09<00:06,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  64% Completed | 9/14 [00:10<00:05,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  71% Completed | 10/14 [00:11<00:04,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  79% Completed | 11/14 [00:12<00:03,  1.16s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  86% Completed | 12/14 [00:13<00:02,  1.12s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards:  93% Completed | 13/14 [00:14<00:01,  1.13s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:33 [default_loader.py:262] Loading weights took 16.00 seconds
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards: 100% Completed | 14/14 [00:16<00:00,  1.14s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Loading safetensors checkpoint shards: 100% Completed | 14/14 [00:16<00:00,  1.15s/it]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m 
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:34 [default_loader.py:262] Loading weights took 16.19 seconds
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:34 [gpu_model_runner.py:2007] Model loading took 14.8674 GiB and 16.738462 seconds
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:34 [gpu_model_runner.py:2007] Model loading took 14.8674 GiB and 17.117449 seconds
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:45 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/9af23a13be/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:45 [backends.py:559] Dynamo bytecode transform time: 9.89 s
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:46 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/9af23a13be/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:46 [backends.py:559] Dynamo bytecode transform time: 11.43 s
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:43:53 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 7.470 s
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:43:56 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 8.700 s
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:44:00 [monitor.py:34] torch.compile takes 9.89 s in total
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:44:00 [monitor.py:34] torch.compile takes 11.43 s in total
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:44:01 [gpu_worker.py:276] Available KV cache memory: 52.81 GiB
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:44:01 [gpu_worker.py:276] Available KV cache memory: 52.81 GiB
[1;36m(EngineCore_0 pid=667905)[0;0m INFO 08-21 09:44:01 [kv_cache_utils.py:849] GPU KV cache size: 1,384,368 tokens
[1;36m(EngineCore_0 pid=667905)[0;0m INFO 08-21 09:44:01 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 336.67x
[1;36m(EngineCore_0 pid=667905)[0;0m INFO 08-21 09:44:01 [kv_cache_utils.py:849] GPU KV cache size: 1,384,368 tokens
[1;36m(EngineCore_0 pid=667905)[0;0m INFO 08-21 09:44:01 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 336.67x
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 15.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:03, 16.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:03, 17.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 16.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 16.43it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 16.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 15.70it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:03, 15.80it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:03, 16.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 16.41it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 15.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 15.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 15.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 15.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:02, 14.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:02<00:02, 14.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:02, 14.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:02, 14.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:02, 14.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 13.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 13.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 13.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:03<00:01, 13.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:03<00:01, 13.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:03<00:01, 13.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:03<00:01, 12.72it/s][1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:44:05 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:01, 12.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 12.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 13.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:04<00:00, 14.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:04<00:00, 15.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:04<00:00, 15.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:04<00:00, 16.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:04<00:00, 14.82it/s]
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:44:06 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP1 pid=667913)[0;0m INFO 08-21 09:44:06 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 0.72 GiB
[1;36m(EngineCore_0 pid=667905)[0;0m [1;36m(VllmWorker TP0 pid=667911)[0;0m INFO 08-21 09:44:06 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 0.72 GiB
[1;36m(EngineCore_0 pid=667905)[0;0m INFO 08-21 09:44:06 [core.py:214] init engine (profile, create kv cache, warmup model) took 31.91 seconds
INFO 08-21 09:44:07 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 7405.98it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  34%|███▎      | 84/250 [00:00<00:00, 836.27it/s]Adding requests:  70%|██████▉   | 174/250 [00:00<00:00, 871.28it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 900.83it/s]
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:04<17:54,  4.32s/it, est. speed input: 42.17 toks/s, output: 23.63 toks/s]Processed prompts:   1%|          | 2/250 [00:07<15:02,  3.64s/it, est. speed input: 38.62 toks/s, output: 46.64 toks/s]Processed prompts:   1%|          | 3/250 [00:09<11:56,  2.90s/it, est. speed input: 49.25 toks/s, output: 72.92 toks/s]Processed prompts:   2%|▏         | 4/250 [00:10<09:10,  2.24s/it, est. speed input: 62.93 toks/s, output: 102.46 toks/s]Processed prompts:   2%|▏         | 5/250 [00:11<07:33,  1.85s/it, est. speed input: 69.90 toks/s, output: 130.79 toks/s]Processed prompts:   2%|▏         | 6/250 [00:12<06:25,  1.58s/it, est. speed input: 78.53 toks/s, output: 159.15 toks/s]Processed prompts:   3%|▎         | 7/250 [00:13<05:12,  1.29s/it, est. speed input: 97.33 toks/s, output: 190.62 toks/s]Processed prompts:   3%|▎         | 8/250 [00:14<04:34,  1.13s/it, est. speed input: 104.97 toks/s, output: 219.85 toks/s]Processed prompts:   4%|▎         | 9/250 [00:14<03:22,  1.19it/s, est. speed input: 111.90 toks/s, output: 256.74 toks/s]Processed prompts:   4%|▍         | 10/250 [00:15<04:00,  1.00s/it, est. speed input: 115.64 toks/s, output: 275.32 toks/s]Processed prompts:   4%|▍         | 11/250 [00:16<03:22,  1.18it/s, est. speed input: 121.96 toks/s, output: 307.53 toks/s]Processed prompts:   5%|▍         | 12/250 [00:16<02:42,  1.46it/s, est. speed input: 126.38 toks/s, output: 342.47 toks/s]Processed prompts:   5%|▌         | 13/250 [00:20<06:23,  1.62s/it, est. speed input: 111.54 toks/s, output: 321.05 toks/s]Processed prompts:   6%|▌         | 14/250 [00:24<09:10,  2.33s/it, est. speed input: 97.12 toks/s, output: 310.63 toks/s] Processed prompts:   6%|▌         | 15/250 [00:28<11:23,  2.91s/it, est. speed input: 97.78 toks/s, output: 306.67 toks/s]Processed prompts:   6%|▋         | 16/250 [00:35<15:58,  4.09s/it, est. speed input: 92.19 toks/s, output: 289.57 toks/s]Processed prompts:   7%|▋         | 17/250 [00:35<11:17,  2.91s/it, est. speed input: 97.71 toks/s, output: 330.29 toks/s]Processed prompts:   7%|▋         | 18/250 [00:35<08:01,  2.08s/it, est. speed input: 112.38 toks/s, output: 370.83 toks/s]Processed prompts:   8%|▊         | 19/250 [00:41<12:25,  3.23s/it, est. speed input: 99.76 toks/s, output: 360.20 toks/s] Processed prompts:   8%|▊         | 20/250 [00:47<14:54,  3.89s/it, est. speed input: 90.82 toks/s, output: 360.24 toks/s]Processed prompts:   8%|▊         | 21/250 [00:50<13:34,  3.56s/it, est. speed input: 92.20 toks/s, output: 381.45 toks/s]Processed prompts:   9%|▉         | 22/250 [01:06<27:42,  7.29s/it, est. speed input: 86.92 toks/s, output: 329.46 toks/s]Processed prompts:   9%|▉         | 23/250 [01:06<20:09,  5.33s/it, est. speed input: 106.87 toks/s, output: 366.16 toks/s]Processed prompts:  10%|▉         | 24/250 [01:12<20:45,  5.51s/it, est. speed input: 114.37 toks/s, output: 376.32 toks/s]Processed prompts:  10%|█         | 25/250 [01:13<14:53,  3.97s/it, est. speed input: 129.70 toks/s, output: 414.46 toks/s]Processed prompts:  10%|█         | 26/250 [01:15<12:43,  3.41s/it, est. speed input: 140.57 toks/s, output: 442.96 toks/s]Processed prompts:  11%|█         | 27/250 [01:16<10:06,  2.72s/it, est. speed input: 152.25 toks/s, output: 476.45 toks/s]Processed prompts:  11%|█         | 28/250 [01:16<07:43,  2.09s/it, est. speed input: 164.41 toks/s, output: 512.51 toks/s]Processed prompts:  12%|█▏        | 29/250 [01:18<07:38,  2.07s/it, est. speed input: 172.31 toks/s, output: 538.99 toks/s]Processed prompts:  12%|█▏        | 30/250 [01:19<05:26,  1.49s/it, est. speed input: 177.58 toks/s, output: 577.95 toks/s]Processed prompts:  12%|█▏        | 31/250 [01:19<04:46,  1.31s/it, est. speed input: 187.15 toks/s, output: 611.21 toks/s]Processed prompts:  13%|█▎        | 32/250 [01:20<03:30,  1.03it/s, est. speed input: 198.15 toks/s, output: 649.59 toks/s]Processed prompts:  13%|█▎        | 33/250 [01:20<03:11,  1.13it/s, est. speed input: 207.52 toks/s, output: 683.67 toks/s]Processed prompts:  14%|█▎        | 34/250 [01:21<02:37,  1.37it/s, est. speed input: 217.44 toks/s, output: 720.14 toks/s]Processed prompts:  14%|█▍        | 35/250 [01:21<02:11,  1.64it/s, est. speed input: 227.20 toks/s, output: 756.74 toks/s]Processed prompts:  14%|█▍        | 36/250 [01:22<02:11,  1.63it/s, est. speed input: 235.77 toks/s, output: 790.56 toks/s]Processed prompts:  15%|█▍        | 37/250 [01:22<02:00,  1.77it/s, est. speed input: 244.50 toks/s, output: 825.77 toks/s]Processed prompts:  15%|█▌        | 38/250 [01:22<01:31,  2.32it/s, est. speed input: 254.11 toks/s, output: 864.19 toks/s]Processed prompts:  16%|█▌        | 39/250 [01:22<01:12,  2.91it/s, est. speed input: 263.57 toks/s, output: 902.24 toks/s]Processed prompts:  16%|█▌        | 40/250 [01:23<01:27,  2.40it/s, est. speed input: 271.31 toks/s, output: 935.37 toks/s]Processed prompts:  16%|█▋        | 41/250 [01:23<01:08,  3.07it/s, est. speed input: 280.45 toks/s, output: 973.59 toks/s]Processed prompts:  17%|█▋        | 42/250 [01:23<00:56,  3.69it/s, est. speed input: 289.40 toks/s, output: 1011.44 toks/s]Processed prompts:  18%|█▊        | 44/250 [01:23<00:40,  5.03it/s, est. speed input: 307.29 toks/s, output: 1087.58 toks/s]Processed prompts:  18%|█▊        | 45/250 [01:24<00:36,  5.62it/s, est. speed input: 316.12 toks/s, output: 1125.57 toks/s]Processed prompts:  19%|█▉        | 47/250 [01:24<00:28,  7.16it/s, est. speed input: 333.88 toks/s, output: 1202.12 toks/s]Processed prompts:  19%|█▉        | 48/250 [01:24<00:33,  6.01it/s, est. speed input: 341.90 toks/s, output: 1237.92 toks/s]Processed prompts:  20%|█▉        | 49/250 [01:24<00:33,  5.98it/s, est. speed input: 346.44 toks/s, output: 1274.84 toks/s]Processed prompts:  20%|██        | 50/250 [01:24<00:33,  5.95it/s, est. speed input: 354.62 toks/s, output: 1311.69 toks/s]Processed prompts:  20%|██        | 51/250 [01:25<00:40,  4.87it/s, est. speed input: 362.04 toks/s, output: 1346.40 toks/s]Processed prompts:  21%|██        | 52/250 [01:25<00:46,  4.29it/s, est. speed input: 369.29 toks/s, output: 1380.98 toks/s]Processed prompts:  22%|██▏       | 54/250 [01:25<00:48,  4.03it/s, est. speed input: 383.72 toks/s, output: 1450.96 toks/s]Processed prompts:  22%|██▏       | 56/250 [01:26<01:04,  3.03it/s, est. speed input: 395.55 toks/s, output: 1514.02 toks/s]Processed prompts:  23%|██▎       | 57/250 [01:27<01:03,  3.02it/s, est. speed input: 401.63 toks/s, output: 1547.55 toks/s]Processed prompts:  24%|██▎       | 59/250 [01:27<00:42,  4.46it/s, est. speed input: 416.22 toks/s, output: 1624.44 toks/s]Processed prompts:  24%|██▍       | 60/250 [01:27<00:49,  3.85it/s, est. speed input: 421.69 toks/s, output: 1656.57 toks/s]Processed prompts:  25%|██▍       | 62/250 [01:27<00:35,  5.23it/s, est. speed input: 435.47 toks/s, output: 1732.29 toks/s]Processed prompts:  25%|██▌       | 63/250 [01:28<00:42,  4.39it/s, est. speed input: 440.72 toks/s, output: 1764.54 toks/s]Processed prompts:  26%|██▌       | 64/250 [01:28<00:36,  5.04it/s, est. speed input: 447.23 toks/s, output: 1801.82 toks/s]Processed prompts:  26%|██▋       | 66/250 [01:29<00:52,  3.53it/s, est. speed input: 456.63 toks/s, output: 1863.64 toks/s]Processed prompts:  27%|██▋       | 68/250 [01:29<00:44,  4.07it/s, est. speed input: 467.68 toks/s, output: 1934.77 toks/s]Processed prompts:  28%|██▊       | 69/250 [01:29<00:39,  4.53it/s, est. speed input: 473.38 toks/s, output: 1971.40 toks/s]Processed prompts:  28%|██▊       | 70/250 [01:30<00:59,  3.01it/s, est. speed input: 475.61 toks/s, output: 1995.25 toks/s]Processed prompts:  29%|██▉       | 72/250 [01:30<00:44,  3.97it/s, est. speed input: 486.03 toks/s, output: 2068.28 toks/s]Processed prompts:  30%|██▉       | 74/250 [01:30<00:32,  5.44it/s, est. speed input: 496.97 toks/s, output: 2144.05 toks/s]Processed prompts:  30%|███       | 75/250 [01:30<00:32,  5.35it/s, est. speed input: 501.57 toks/s, output: 2178.73 toks/s]Processed prompts:  31%|███       | 77/250 [01:31<00:25,  6.87it/s, est. speed input: 512.05 toks/s, output: 2253.77 toks/s]Processed prompts:  32%|███▏      | 79/250 [01:31<00:25,  6.65it/s, est. speed input: 521.30 toks/s, output: 2324.46 toks/s]Processed prompts:  32%|███▏      | 81/250 [01:31<00:23,  7.09it/s, est. speed input: 530.59 toks/s, output: 2396.97 toks/s]Processed prompts:  33%|███▎      | 83/250 [01:31<00:19,  8.42it/s, est. speed input: 540.30 toks/s, output: 2471.92 toks/s]Processed prompts:  34%|███▍      | 85/250 [01:32<00:36,  4.57it/s, est. speed input: 544.86 toks/s, output: 2527.38 toks/s]Processed prompts:  34%|███▍      | 86/250 [01:32<00:36,  4.51it/s, est. speed input: 548.13 toks/s, output: 2560.36 toks/s]Processed prompts:  35%|███▍      | 87/250 [01:33<00:44,  3.65it/s, est. speed input: 549.81 toks/s, output: 2586.86 toks/s]Processed prompts:  36%|███▌      | 90/250 [01:33<00:29,  5.39it/s, est. speed input: 561.45 toks/s, output: 2697.78 toks/s]Processed prompts:  37%|███▋      | 92/250 [01:34<00:31,  5.02it/s, est. speed input: 567.10 toks/s, output: 2763.30 toks/s]Processed prompts:  38%|███▊      | 94/250 [01:34<00:25,  6.14it/s, est. speed input: 574.15 toks/s, output: 2837.44 toks/s]Processed prompts:  38%|███▊      | 96/250 [01:34<00:20,  7.46it/s, est. speed input: 581.23 toks/s, output: 2912.21 toks/s]Processed prompts:  39%|███▉      | 98/250 [01:34<00:20,  7.32it/s, est. speed input: 587.12 toks/s, output: 2982.32 toks/s]Processed prompts:  41%|████      | 102/250 [01:34<00:14,  9.93it/s, est. speed input: 600.62 toks/s, output: 3132.52 toks/s]Processed prompts:  42%|████▏     | 104/250 [01:35<00:16,  8.87it/s, est. speed input: 605.85 toks/s, output: 3201.65 toks/s]Processed prompts:  44%|████▎     | 109/250 [01:35<00:10, 13.01it/s, est. speed input: 622.03 toks/s, output: 3392.85 toks/s]Processed prompts:  46%|████▌     | 114/250 [01:35<00:08, 15.21it/s, est. speed input: 637.28 toks/s, output: 3581.38 toks/s]Processed prompts:  46%|████▋     | 116/250 [01:35<00:09, 14.29it/s, est. speed input: 642.52 toks/s, output: 3653.84 toks/s]Processed prompts:  48%|████▊     | 120/250 [01:35<00:07, 17.05it/s, est. speed input: 654.28 toks/s, output: 3806.09 toks/s]Processed prompts:  49%|████▉     | 122/250 [01:36<00:07, 16.83it/s, est. speed input: 659.62 toks/s, output: 3880.19 toks/s]Processed prompts:  50%|████▉     | 124/250 [01:36<00:07, 17.34it/s, est. speed input: 665.00 toks/s, output: 3955.11 toks/s]Processed prompts:  51%|█████     | 127/250 [01:36<00:06, 18.34it/s, est. speed input: 672.92 toks/s, output: 4067.83 toks/s]Processed prompts:  52%|█████▏    | 129/250 [01:36<00:06, 18.40it/s, est. speed input: 677.99 toks/s, output: 4142.42 toks/s]Processed prompts:  53%|█████▎    | 132/250 [01:36<00:05, 20.54it/s, est. speed input: 685.81 toks/s, output: 4256.23 toks/s]Processed prompts:  54%|█████▍    | 135/250 [01:36<00:05, 20.03it/s, est. speed input: 692.99 toks/s, output: 4368.05 toks/s]Processed prompts:  55%|█████▌    | 138/250 [01:36<00:05, 20.64it/s, est. speed input: 700.07 toks/s, output: 4480.74 toks/s]Processed prompts:  57%|█████▋    | 143/250 [01:36<00:04, 25.46it/s, est. speed input: 712.15 toks/s, output: 4672.57 toks/s]Processed prompts:  58%|█████▊    | 146/250 [01:37<00:04, 25.70it/s, est. speed input: 718.88 toks/s, output: 4786.07 toks/s]Processed prompts:  62%|██████▏   | 154/250 [01:37<00:02, 37.81it/s, est. speed input: 737.78 toks/s, output: 5097.74 toks/s]Processed prompts:  64%|██████▍   | 160/250 [01:37<00:02, 36.17it/s, est. speed input: 750.73 toks/s, output: 5326.38 toks/s]Processed prompts:  66%|██████▌   | 164/250 [01:37<00:02, 31.53it/s, est. speed input: 758.40 toks/s, output: 5475.69 toks/s]Processed prompts:  69%|██████▉   | 173/250 [01:37<00:01, 43.79it/s, est. speed input: 777.22 toks/s, output: 5827.45 toks/s]Processed prompts:  72%|███████▏  | 180/250 [01:37<00:01, 49.50it/s, est. speed input: 791.38 toks/s, output: 6099.47 toks/s]Processed prompts:  74%|███████▍  | 186/250 [01:37<00:01, 43.67it/s, est. speed input: 802.20 toks/s, output: 6327.03 toks/s]Processed prompts:  78%|███████▊  | 194/250 [01:38<00:01, 46.57it/s, est. speed input: 816.43 toks/s, output: 6635.81 toks/s]Processed prompts:  81%|████████  | 203/250 [01:38<00:00, 55.83it/s, est. speed input: 832.15 toks/s, output: 6987.44 toks/s]Processed prompts:  84%|████████▍ | 210/250 [01:38<00:00, 52.44it/s, est. speed input: 843.07 toks/s, output: 7255.76 toks/s]Processed prompts:  86%|████████▋ | 216/250 [01:38<00:00, 49.90it/s, est. speed input: 851.80 toks/s, output: 7485.26 toks/s]Processed prompts:  89%|████████▉ | 222/250 [01:38<00:00, 44.97it/s, est. speed input: 859.38 toks/s, output: 7712.46 toks/s]Processed prompts:  91%|█████████ | 228/250 [01:38<00:00, 48.29it/s, est. speed input: 866.96 toks/s, output: 7944.95 toks/s]Processed prompts:  94%|█████████▎| 234/250 [01:38<00:00, 48.01it/s, est. speed input: 873.68 toks/s, output: 8175.41 toks/s]Processed prompts:  96%|█████████▌| 239/250 [01:39<00:00, 44.01it/s, est. speed input: 878.43 toks/s, output: 8364.50 toks/s]Processed prompts:  99%|█████████▉| 247/250 [01:39<00:00, 49.80it/s, est. speed input: 886.00 toks/s, output: 8675.78 toks/s]Processed prompts: 100%|██████████| 250/250 [01:39<00:00, 49.80it/s, est. speed input: 887.17 toks/s, output: 8782.55 toks/s]Processed prompts: 100%|██████████| 250/250 [01:39<00:00,  2.52it/s, est. speed input: 887.17 toks/s, output: 8782.55 toks/s]
+ python3 clean_generations_translation.py --model bigcode/starcoder2-15b --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]
and
## 7. 1000000000039
public class codeforces_569_A {
    public static void main(String[] args) {
        System.out.println(100000
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        long ans = 1;
        for (int i = 1; i <= n; i++) {
            ans = (ans * i) % 1000000007;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextLong();
        }
        Arrays.sort(A);
        long ans = 1;
        int mod = 1000000007;
        int cnt = 0;
        for (int i = N - 1; i >= 0; i--) {
            if (A[i] < 0) {
                cnt++;
            }
            if (cnt >= K) {
                break;
            }
            ans = (ans * A[i]) % mod;
        }
        if (cnt < K) {
            for (int i = 0; i < K - cnt; i++) {
                ans = (ans * A[i]) % mod;
            }
        } else {
            for (int i = 0; i < K; i++) {
                ans = (ans * A[i]) % mod;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum =

import java.util.*;
import java.io.*;

public class Main
### 7.7. Explanation

Test case 1: The only positive integer less than or equal to 3 and divisible by 3 is 3.
Test case 2: The positive integers less than or equal to 10 and divisible by 3 are 3, 6 and 9. Their sum is 18.

### 7.8. Solution

and

import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int D = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = B; j <= D; j++) {
                d[i][j] += (d[i][j - 1] * i + d[i - 1][j] * j - d[i - 1][j - 1] * (i - 1) * (j - 1)) % m;
            }
        }
        System.out.println(d[C][D]);
    }
}
## 14.

Write a program that reads a text file and prints the number of occurrences of each word in the file.
import java.util.*;
import java.io.*;
import java.lang.*;
import java.math.*;

public class atcoder_AGC021_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = sc.nextInt();
            y[i] = sc.nextInt();
        }
        for (int i = 0; i < N; i++) {
            double[] d = new double[N];
            for (int j = 0; j < N; j++) {
                if (i == j) continue;
                d[j] = Math.atan2(x[j] - x[i], y[j] - y[i]);
            }
            Arrays.sort(d);
            d = Arrays.copyOf(d, N + 1);
            d[N] = d[0] + 2 * Math.PI;
            double ans = 0;
            for (int j = 0; j < N; j++) {
                if (d[j + 1] - d[j] >= Math.PI) {
                    ans = d[j + 1] - d[j] - Math.PI;
                }
            }
            System.out.println(ans / (2 * Math.PI));
        }
    }
}
import java.util.*;
import java.io.*;
public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.next();
        }
        int[] march_lis = new int[5];
        for (int i = 0; i < N; i++) {
            if (S[i].charAt(0) == 'M') {
                march_lis[0]++;
            } else if (S[i].charAt(0) == 'A') {
                march_lis[1]++;
            } else if (S[i].charAt(0) == 'R') {
                march_lis[2]++;
            } else if (S[i].charAt(0) == 'C') {
                march_lis[3]++;
            } else if (S[i].charAt(0) == 'H') {
                march_lis[4]++;
            }
        }
        long ans = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                for (int k = j + 1; k < 5; k++) {
                    ans += march_lis[i] * march_lis[j] * march_lis[k];
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.io.*;
public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int ans = n / 2 + n / 3 + n / 5 - n / 6 - n / 10 - n / 15 + n / 30;
            System.out.println(ans);
        }
    }
}
import java.util.Scanner;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long res = 0;
        long a = n / 3;
        long b = n / 5;
        long c = n / 15;
        res = 3 * a * (a + 1) / 2 + 5 * b * (b + 1) / 2 - 15 * c * (c + 1) / 2;
        System.out.println(res);
    }
}
and
import java.io.*;
import java.util.*;

public class atcoder_AGC014_D {
    static int N;
    static int[] par;
    static int[] child_num;
    static boolean[] seen;
    static ArrayList<Integer>[] adj;
    static Queue<Integer> que;
    static Queue<Integer> seq;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        adj = new ArrayList[N + 1];
        for (int i = 0; i <= N; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());
            adj[a].add(b);
            adj[b].add(a);
        }
        que = new LinkedList<>();
        que.add(1);
        seen = new boolean[N + 1];
        seen[1] = true;
        par = new int[N + 1];
        child_num = new int[N + 1];
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adj[v]) {
                if (!seen[u]) {
                    seen[u] = true;
                    par[u] = v;
                    child_num[v]++;
                    que.add(u);
                }
            }
        }
        seq = new LinkedList<>();
        for (int i = 1; i <= N; i++) {
            if (child_num[i] == 0) {
                seq.add(i);
            }
        }
        while (!seq.isEmpty()) {
            int c = seq.poll();
            seen[c] = false;
            if (!seen[par[c]]) {
                System.out.println("First");
                return;
            }
            seen[par[c]] = false;
            child_num[par[par[c]]]--;
            if (child_num[par[par[c]]] == 0) {
                seq.add(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String c = sc.next();
        char[] a = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        int i = 0;
        for (int j = 0; j < a.length; j++) {
            if (a[j] == c.charAt(0)) {
                i = j;
                break;
            }
        }
        System.out.println(a[i + 1]);
    }
}
script
var lengthOfLIS = function (nums) {
    const n = nums.length;
    const dp = new Array(n).fill(1);
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }
    let ans = 0;
    for (let i = 0; i < n; i++) {
        ans = Math.max(ans, dp[i]);
    }
    return ans;
};
import java.io.*;
import java.util.*;

public class atcoder_ABC126_E {
    static int N, K;
    static int[] dist;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        dist = new int[100001];
        Arrays.fill(dist, -1);
        bfs();
    }

    static void bfs() {
        Queue<Integer> queue = new LinkedList<>();
import java.util.*;
import java.math.*;

public class atcoder_ABC118_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int gcd = A[0];
        for (int i = 1; i < N; i++) {
            gcd = gcd(gcd, A[i]);
        }
        System.out.println(gcd);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}

import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println(Math.min(a, b) + " " + (Math.max(a, b) - Math.min(a, b)) / 2);
    }
}
import java.util.Scanner;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += (int) Math.pow(25, i);
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int count = 0;
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == 'a') {
                count++;
            }
        }
        System.out.println(count);
    }
}
Java code:
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int sum = 0;
        for (int i = 1; i <= x; i++) {
            if (i % 41 == 0) {
                sum += i;
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        int[] count = new int[128];
        for (int i =
import java.util.*;
import java.io.*;

public class codeforces_299_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        while (t-- > 0) {
            String n = br.readLine();
            System.out.println(n.charAt(0) - '0' + n.charAt(n.length() - 1) - '0');
        }
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        HashMap<Character, Integer> freqs = new HashMap<>();
        HashMap<Character, Integer> freqt = new HashMap<>();
        int yay = 0, whoops = 0;
        for (int i = 0; i < s.length(); i++) {
            char letra = s.charAt(i);
            if (freqs.containsKey(letra)) {
                freqs.put(letra, freqs.get(letra) + 1);
            } else {
                freqs.put(letra, 1);
            }
        }
        for (int i = 0; i < t.length(); i++) {
            char letra = t.charAt(i);
            if (freqt.containsKey(letra)) {
                freqt.put(letra, freqt.get(letra) + 1);
            } else {
                freqt.put(letra, 1);
            }
        }
        for (char letra : freqs.keySet()) {
            while (freqs.get(letra) > 0 && freqt.containsKey(letra) && freqt.get(letra) > 0) {
                yay++;
                freqs.put(letra, freqs.get(letra) - 1);
                freqt.put(letra, freqt.get(letra) - 1);
            }
        }
        for (char letra : freqs.keySet()) {
            while (freqs.get(letra) > 0) {
                if (Character.isLowerCase(letra) && Character.toUpperCase(letra) == freqt.containsKey(letra) && freqt.get(Character.toUpperCase(letra)) > 0) {
                    whoops++;
                    freqs.put(letra, freqs.get(letra) - 1);
                    freqt.put(Character.toUpperCase(letra), freqt.get(Character.toUpperCase(letra)) - 1);
                } else if (Character.isUpperCase(letra) && Character.toLowerCase(letra) == freqt.containsKey(letra) && freqt.get(Character.toLowerCase(letra)) > 0) {
                    whoops++;
                    freqs.put(letra, freqs.get(letra) - 1);
                    freqt.put(Character.toLowerCase(letra), freqt.get(Character.toLowerCase(letra)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        int[] lista = new int[n];
        int[] listb = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            listb[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            if (lista[i] == i + 1) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] l = sc.nextLine().split(" ");
        int x = Integer.parseInt(l[0]);
        int y = Integer.parseInt(l[1]);
        int a = Integer.parseInt(l[2]);
        int b = Integer.parseInt(l[3]);
        int lcm = lcm(x, y);
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    public static int gcd(int a, int b) {
        while (a % b != 0) {
            int temp = a;
            a = b;
            b = temp % b;
        }
        return b;
    }

    public static int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }
}
import java.util.*;
import java.io.*;
public class atcoder_ABC140_F {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        String[] S = br.readLine().split(" ");
        int[] S_int = new int[N];
        for (int i = 0; i < N; i++) {
            S_int[i] = Integer.parseInt(S[i]);
        }
        Arrays.sort(S_int);
        boolean[] flag = new boolean[N];
        for (int i = 0; i < N; i++) {
            flag[i] = true;
        }
        ArrayList<Integer> cur = new ArrayList<Integer>();
        cur.add(S_int[0]);
        flag[0] = false;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int k = 0; k < N; k++) {
                if (flag[k] && S_int[k] < cur.get(j)) {
                    cur.add(S_int[k]);
                    j++;
                    flag[k] = false;
                    if (j == jM) {
                        break;
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v1 = sc.nextInt();
        int v2 = sc.nextInt();
        int t = sc.nextInt();
        int d = sc.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        for (int i = 0; i < t; i++) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
            distance += v;
            v += a * d;
        }
        System.out.println(distance);
    }
}
import java.util.Scanner;

public class codeforces_672_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        while (n != 0) {
            sum += n % 10;
            n /= 10;
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int result = 0;
            for (int i = 1; i <= n; i++) {
                if (n % i == 0 && (n / i - i + 1) % 2 == 0) {
                    result++;
                }
            }
            System.out.println(result);
        }
    }
}
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String txt = sc.nextLine();
        int vowels = 0;
        int consonants = 0;
        for (int i = 0; i < txt.length(); i++) {
            char c = txt.charAt(i);
            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                vowels++;
            } else if (c >= 'a' && c <= 'z') {
                consonants++;
            }
        }
        System.out.println("Number of vowels: " + vowels);
        System.out.println("Number of consonants: " + consonants);
    }
}
import java.util.Scanner;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int m = sc.nextInt();
        for (int i = 0; i < m; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            int z = sc.nextInt();
            int sum = 0;
            for (int j = x - 1; j < y; j++) {
                sum += a[j];
            }
            System.out.println(sum / z);
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String longest = "";
        String current = "";
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) <= s.charAt(i + 1)) {
                current += s.charAt(i);
            } else {
                current += s.charAt(i);
                if (current.length() > longest.length()) {
                    longest = current;
                }
                current = "";
            }
        }
        current += s.charAt(s.length() - 1);
        if (current.length() > longest.length()) {
            longest = current;
        }
        System.out.println("Longest substring in alphabetical order is: " + longest);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long ans = 0;
        for (int i = 1; i <= N; i++) {
            ans += i * (N / i) * (N / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System
import java.util.Scanner;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = sc.nextInt();
        }
        int[] e = new int[n];
        for (int i = 0; i < n; i++) {
            e[i] = sc.nextInt();
        }
        int[] f = new int[n];
        for (int i = 0; i < n; i++) {
            f[i] = sc.nextInt();
        }
        int[] g = new int[n];
        for (int i = 0; i < n; i++) {
            g[i] = sc.nextInt();
        }
        int[] h = new int[n];
        for (int i = 0; i < n; i++) {
            h[i] = sc.nextInt();
        }
        int[] i = new int[n];
        for (int j = 0; j < n; j++) {
            i[j] = sc.nextInt();
        }
        int[] j = new int[n];
        for (int k = 0; k < n; k++) {
            j[k] = sc.nextInt();
        }
        int[] k = new int[n];
        for (int l = 0; l < n; l++) {
            k[l] = sc.nextInt();
        }
        int[] l = new int[n];
        for (int m = 0; m < n; m++) {
            l[m] = sc.nextInt();
        }
        int[] m = new int[n];
        for (int o = 0; o < n; o++) {
            m[o] = sc.nextInt();
        }
        int[] o = new int[n];
        for (int p = 0; p < n; p++) {
            o[p] = sc.nextInt();
        }
        int[] p = new int[n];
        for (int q = 0; q < n; q++) {
            p[q] = sc.nextInt();
        }
        int[] q = new int[n];
        for (int r = 0; r < n; r++) {
            q[r] = sc.nextInt();
        }
        int[] r = new int[n];
        for (int s = 0; s < n; s++) {
            r[s] = sc.nextInt();
        }
        int[] s = new int[n];
        for (int t = 0; t < n; t++) {
            s[t] = sc.nextInt();
        }
        int[] t = new int[n];
        for (int u = 0; u < n; u++) {
            t[u] = sc.nextInt();
        }
        int[] u = new int[n];
        for (int v = 0; v < n; v++) {
            u[v] = sc.nextInt();
        }
        int[] v = new int[n];
        for (int w = 0; w < n; w++) {
            v[w] = sc.nextInt();
        }
        int[] w = new int[n];
        for (int x = 0; x < n; x++) {
            w[x] = sc.nextInt();
        }
        int[] x = new int[n];
        for (int y = 0; y < n; y++) {
            x[y] = sc.nextInt();
        }
        int[] y = new int[n];
        for (int z = 0; z < n; z++) {
            y[z] = sc.nextInt();
        }
        int[] z = new int[n];
        for (int aa = 0; aa < n; aa++) {
            z[aa] = sc.nextInt();
        }
        int[] aa = new int[n];
        for (int ab = 0; ab < n; ab++) {
            aa[ab] = sc.nextInt();
        }
        int[] ab = new int[n];
        for (int ac = 0; ac < n; ac++) {
            ab[ac] = sc.nextInt();
        }
        int[] ac = new int[n];
        for (int ad = 0; ad < n; ad++) {
            ac[ad] = sc.nextInt();
        }
        int[] ad = new int[n];
        for (int ae = 0; ae < n; ae++) {
            ad[ae] = sc.nextInt();
        }
        int[] ae = new int[n];
        for (int af = 0; af < n; af++) {
            ae[af] = sc.nextInt();
        }
        int[] af = new int[n];
        for (int ag = 0; ag < n; ag++) {
            af[ag] = sc.nextInt();
        }
        int[] ag = new int[n];
        for (int ah = 0; ah < n; ah++) {
            ag[ah] = sc.nextInt();
        }
        int[] ah = new int[n];
        for (int ai = 0; ai < n; ai++) {
            ah[ai] = sc.nextInt();
        }
        int[] ai = new int[n];
        for (int aj = 0; aj < n; aj++) {
            ai[aj] = sc.nextInt();
        }
        int[] aj = new int[n];
        for (int ak = 0; ak < n; ak++) {
            aj[ak] = sc.nextInt();
        }
        int[] ak = new int[n];
        for (int al = 0; al < n; al++) {
            ak[al] = sc.nextInt();
        }
        int[] al = new int[n];
        for (int am = 0; am < n; am++) {
            al[am] = sc.nextInt();
        }
        int[] am = new int[n];
        for (int an = 0; an < n; an++) {
            am[an] = sc.nextInt();
        }
        int[] an = new int[n];
        for (int ao = 0; ao < n; ao++) {
            an[ao] = sc.nextInt();
        }
        int[] ao = new int[n];
        for (int ap = 0; ap < n; ap++) {
            ao[ap] = sc.nextInt();
        }
        int[] ap = new int[n];
        for (int aq = 0; aq < n; aq++) {
            ap[aq] = sc.nextInt();
        }
        int[] aq = new int[n];
        for (int ar = 0; ar < n; ar++) {
            aq[ar] = sc.nextInt();
        }
        int[] ar = new int[n];
        for (int as = 0; as < n; as++) {
            ar[as] = sc.nextInt();
        }
        int[] as = new int[n];
        for (int at = 0; at < n; at++) {
            as[at] = sc.nextInt();
        }
        int[] at = new int[n];
        for (int au = 0; au < n; au++) {
            at[au] = sc.nextInt();
        }
        int[] au = new int[n];
        for (int av = 0; av < n; av++) {
            au[av] = sc.nextInt();
        }
        int[] av = new int[n];
        for (int aw = 0; aw < n; aw++) {
            av[aw] = sc.nextInt();
        }
        int[] aw = new int[n];
        for (int ax = 0; ax < n; ax++) {
            aw[ax] = sc.nextInt();
        }
        int[] ax = new int[n];
        for (int ay = 0; ay < n; ay++) {
            ax[ay] = sc.nextInt();
        }
        int[] ay = new int[n];
        for (int az = 0; az < n; az++) {
            ay[az] = sc.nextInt();
        }
        int[] az = new int[n];
        for (int ba = 0; ba < n; ba++) {
            az[ba] = sc.nextInt();
        }
        int[] ba = new int[n];
        for (int bb = 0; bb < n; bb++) {
            ba[bb] = sc.nextInt();
        }
        int[] bb = new int[n];
        for (int bc = 0; bc < n; bc++) {
            bb[bc] = sc.nextInt();
        }
        int[] bc = new int[n];
        for (int bd = 0; bd < n; bd++) {
            bc[bd] = sc.nextInt();
        }
        int[] bd = new int[n];
        for (int be = 0; be < n; be++) {
            bd[be] = sc.nextInt();
        }
        int[] be = new int[n];
        for (int bf = 0; bf < n; bf++) {
            be[bf] = sc.nextInt();
        }
        int[] bf = new int[n];
        for (int bg = 0; bg < n; bg++) {
            bf[bg] = sc.nextInt();
        }
        int[] bg = new int[n];
        for (int bh = 0; bh < n; bh++) {
            bg[bh] = sc.nextInt();
        }
        int[] bh = new int[n];
        for (int bi = 0; bi < n; bi++) {
            bh[bi] = sc.nextInt();
        }
        int[] bi = new int[n];
        for (int bj = 0; bj < n; bj++) {
            bi[bj] = sc.nextInt();
        }
        int[] bj = new int[n];
        for (int bk = 0; bk < n; bk++) {
            bj[bk] = sc.nextInt();
        }
        int[] bk = new int[n];
        for (int bl = 0; bl < n; bl++) {
            bk[bl] = sc.nextInt();
        }
        int[] bl = new int[n];
        for (int bm = 0; bm < n; bm++) {
            bl[bm] = sc.nextInt();
        }
        int[] bm = new int[n];
        for (int bn = 0; bn < n; bn++) {
            bm[bn] = sc.nextInt();
        }
        int[] bn = new int[n];
        for (int bo = 0; bo < n; bo++) {
            bn[bo] = sc.nextInt();
        }
        int[] bo = new int[n];
        for (int bp = 0; bp < n; bp++) {
            bo[bp] = sc.nextInt();
        }
        int[] bp = new int[n];
        for (int bq = 0; bq < n; bq++) {
            bp[bq] = sc.nextInt();
        }
        int[] bq = new int[n];
        for (int br = 0; br < n; br++) {
            bq[br] = sc.nextInt();
        }
        int[] br = new int[n];
        for (int bs = 0; bs < n; bs++) {
            br[bs] = sc.nextInt();
        }
        int[] bs = new int[n];
        for (int bt = 0; bt < n; bt++) {
            bs[bt] = sc.nextInt();
        }
        int[] bt = new int[n];
        for (int bu = 0; bu < n; bu++) {
            bt[bu] = sc.nextInt();
        }
        int[] bu = new int[n];
        for (int bv = 0; bv < n; bv++) {
            bu[bv] = sc.nextInt();
        }
        int[] bv = new int[n];
        for (int bw = 0; bw < n; bw++) {
            bv[bw] = sc.nextInt();
        }
        int[] bw = new int[n];
        for (int bx = 0; bx < n; bx++) {
            bw[bx] = sc.nextInt();
        }
        int[] bx = new int[n];
        for (int by = 0; by < n; by++) {
            bx[by] = sc.nextInt();
        }
        int[] by = new int[n];
        for (int bz = 0; bz < n; bz++) {
            by[bz] = sc.nextInt();
        }
        int[] bz = new int[n];
        for (int ca = 0; ca < n; ca++) {
            bz[ca] = sc.nextInt();
        }
        int[] ca = new int[n];
        for (int cb = 0; cb < n; cb++) {
            ca[cb] = sc.nextInt();
        }
        int[] cb = new int[n];
        for (int cc = 0; cc < n; cc++) {
            cb[cc] = sc.nextInt();
        }
        int[] cc = new int[n];
        for (int cd = 0; cd < n; cd++) {
            cc[cd] = sc.nextInt();
        }
        int[] cd = new int[n];
        for (int ce = 0; ce < n; ce++) {
            cd[ce] = sc.nextInt();
        }
        int[] ce = new int[n];
        for (int cf = 0; cf < n; cf++) {
            ce[cf] = sc.nextInt();
        }
        int[] cf = new int[n];
        for (int cg = 0; cg < n; cg++) {
            cf[cg] = sc.nextInt();
        }
        int[] cg = new int[n];
        for (int ch = 0; ch < n; ch++) {
            cg[ch] = sc.nextInt();
        }
        int[] ch = new int[n];
        for (int ci = 0; ci < n; ci++) {
            ch[ci] = sc.nextInt();
        }
        int[] ci = new int[n];
        for (int cj = 0; cj < n; cj++) {
            ci[cj] = sc.nextInt();
        }
        int[] cj = new int[n];
        for (int ck = 0; ck < n; ck++) {
            cj[ck] = sc.nextInt();
        }
        int[] ck = new int[n];
        for (int cl = 0; cl < n; cl++) {
            ck[cl] = sc.nextInt();
        }
        int[] cl = new int[n];
        for (int cm = 0; cm < n; cm++) {
            cl[cm] = sc.nextInt();
        }
        int[] cm = new int[n];
        for (int cn = 0; cn < n; cn++) {
            cm[cn] = sc.nextInt();
        }
        int[] cn = new int[n];
        for (int co = 0; co < n; co++) {
            cn[co] = sc.nextInt();
        }
        int[] co = new int[n];
        for (int cp = 0; cp < n; cp++) {
            co[cp] = sc.nextInt();
        }
        int[] cp = new int[n];
        for (int cq = 0; cq < n; cq++) {
            cp[cq] = sc.nextInt();
        }
        int[] cq = new int[n];
        for (int cr = 0; cr < n; cr++) {
            cq[cr] = sc.nextInt();
        }
        int[] cr = new int[n];
        for (int cs = 0; cs < n; cs++) {
            cr[cs] = sc.nextInt();
        }
        int[] cs = new int[n];
        for (int ct = 0; ct < n; ct++) {
            cs[ct] = sc.nextInt();
        }
        int[] ct = new int[n];
        for (int cu = 0; cu < n; cu++) {
            ct[cu] = sc.nextInt();
        }
        int[] cu = new int[n];
        for (int cv = 0; cv < n; cv++)
import java.util.*;
public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();
        int d = s < f ? 1 : -1;
        char c = s < f ? 'R' : 'L';
        String res = "";
        int i = 1;
        int j = s;
        int t = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = 1;
        while (j != f) {
            if (i > t && k < m) {
                t = sc.nextInt();
                l = sc.nextInt();
                r = sc.nextInt();
                k++;
            }
            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res += 'X';
            } else {
                res += c;
                j += d;
            }
            i++;
        }
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            int x = sc.nextInt();
            int t = l;
            while (t <= r) {
                int next_val = comp[t - 1];
                if (out[t - 1] == 0 && t != x) {
                    out[t - 1] = x;
                }
                comp[t - 1] = r + 1 > t ? r + 1 : x;
                t = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
script
let sum = 0;
for (let i = 1; i <= 100; i++) {
    if (i % 2 != 0) {
        sum += i;
    }
}
console.log(sum);
import java.util.*;
import java.io.*;
public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long N = sc.nextLong();
        long A = sc.nextLong();
        long B = sc.nextLong();
        long ans = 0;
        long rep = N / (A + B);
        ans += rep * A;
        long res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        String[] m = sc.nextLine().split(" ");
        boolean possible = true;
        Set<String> set = new HashSet<>();
        for (String s : m) {
            set.add(s);
        }
        for (String s : set) {
            int count = 0;
            for (String s1 : m) {
                if (s1.equals(s)) {
                    count++;
                }
            }
            if (count >= n / 2 + 1) {
                possible = false;
                break;
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;
import java.io.*;
import java.math.*;
public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int h = sc.nextInt();
        int s = sc.nextInt();
        int d = sc.nextInt();
        int n = sc.nextInt();
        int best1L = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
public class atcoder_ABC134_E {
    public static void main(String[] args) {
        System.out.println("\\    /\\");
        System.out.println(" )  ( ')");
        System.out.println("(  /  )");
        System.out.println(" \\(__)|");
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h1 = sc.nextInt();
        int m1 = sc.nextInt();
        int h2 = sc.nextInt();
        int m2 = sc.nextInt();
        m1 += h1 * 60;
        m2 += h2 * 60;
        m2 = m1 - m2;
        m2 %= 1440;
        System.out.printf("%02d:%02d", m2 / 60, m2 % 60);
    }
}
and
class Solution {
    public int reverse(int x) {
        int ans = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (ans > Integer.MAX_VALUE / 10 || (ans == Integer.MAX_VALUE / 10 && pop > 7)) {
                return 0;
            }
            if (ans < Integer.MIN_VALUE / 10 || (ans == Integer.MIN_VALUE / 10 && pop < -8)) {
                return 0;
            }
            ans = ans * 10 + pop;
        }
        return ans;
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int max = a[0];
        for (int i = 1; i < n; i++) {
            if (a[i] > max) {
                max = a[i];
            }
        }
        System.out.println(max);
    }
}
3
7
import java.util.Scanner;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNext()) {
            int v = sc.nextInt();
            int t = sc.nextInt();
            if (v == 0 && t == 0) {
                break;
            }
            System.out.println(v * t * 2);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = sc.nextInt();
        }
        int[] e = new int[n];
        for (int i = 0; i < n; i++) {
            e[i] = sc.nextInt();
        }
        int[] f = new int[n];
        for (int i = 0; i < n; i++) {
            f[i] = sc.nextInt();
        }
        int[] g = new int[n];
        for (int i = 0; i < n; i++) {
            g[i] = sc.nextInt();
        }
        int[] h = new int[n];
        for (int i = 0; i < n; i++) {
            h[i] = sc.nextInt();
        }
        int[] i = new int[n];
        for (int j = 0; j < n; j++) {
            i[j] = sc.nextInt();
        }
        int[] j = new int[n];
        for (int k = 0; k < n; k++) {
            j[k] = sc.nextInt();
        }
        int[] k = new int[n];
        for (int l = 0; l < n; l++) {
            k[l] = sc.nextInt();
        }
        int[] l = new int[n];
        for (int m = 0; m < n; m++) {
            l[m] = sc.nextInt();
        }
        int[] m = new int[n];
        for (int o = 0; o < n; o++) {
            m[o] = sc.nextInt();
        }
        int[] o = new int[n];
        for (int p = 0; p < n; p++) {
            o[p] = sc.nextInt();
        }
        int[] p = new int[n];
        for (int q = 0; q < n; q++) {
            p[q] = sc.nextInt();
        }
        int[] q = new int[n];
        for (int r = 0; r < n; r++) {
            q[r] = sc.nextInt();
        }
        int[] r = new int[n];
        for (int s = 0; s < n; s++) {
            r[s] = sc.nextInt();
        }
        int[] s = new int[n];
        for (int t = 0; t < n; t++) {
            s[t] = sc.nextInt();
        }
        int[] t = new int[n];
        for (int u = 0; u < n; u++) {
            t[u] = sc.nextInt();
        }
        int[] u = new int[n];
        for (int v = 0; v < n; v++) {
            u[v] = sc.nextInt();
        }
        int[] v = new int[n];
        for (int w = 0; w < n; w++) {
            v[w] = sc.nextInt();
        }
        int[] w = new int[n];
        for (int x = 0; x < n; x++) {
            w[x] = sc.nextInt();
        }
        int[] x = new int[n];
        for (int y = 0; y < n; y++) {
            x[y] = sc.nextInt();
        }
        int[] y = new int[n];
        for (int z = 0; z < n; z++) {
            y[z] = sc.nextInt();
        }
        int[] z = new int[n];
        for (int aa = 0; aa < n; aa++) {
            z[aa] = sc.nextInt();
        }
        int[] aa = new int[n];
        for (int ab = 0; ab < n; ab++) {
            aa[ab] = sc.nextInt();
        }
        int[] ab = new int[n];
        for (int ac = 0; ac < n; ac++) {
            ab[ac] = sc.nextInt();
        }
        int[] ac = new int[n];
        for (int ad = 0; ad < n; ad++) {
            ac[ad] = sc.nextInt();
        }
        int[] ad = new int[n];
        for (int ae = 0; ae < n; ae++) {
            ad[ae] = sc.nextInt();
        }
        int[] ae = new int[n];
        for (int af = 0; af < n; af++) {
            ae[af] = sc.nextInt();
        }
        int[] af = new int[n];
        for (int ag = 0; ag < n; ag++) {
            af[ag] = sc.nextInt();
        }
        int[] ag = new int[n];
        for (int ah = 0; ah < n; ah++) {
            ag[ah] = sc.nextInt();
        }
        int[] ah = new int[n];
        for (int ai = 0; ai < n; ai++) {
            ah[ai] = sc.nextInt();
        }
        int[] ai = new int[n];
        for (int aj = 0; aj < n; aj++) {
            ai[aj] = sc.nextInt();
        }
        int[] aj = new int[n];
        for (int ak = 0; ak < n; ak++) {
            aj[ak] = sc.nextInt();
        }
        int[] ak = new int[n];
        for (int al = 0; al < n; al++) {
            ak[al] = sc.nextInt();
        }
        int[] al = new int[n];
        for (int am = 0; am < n; am++) {
            al[am] = sc.nextInt();
        }
        int[] am = new int[n];
        for (int an = 0; an < n; an++) {
            am[an] = sc.nextInt();
        }
        int[] an = new int[n];
        for (int ao = 0; ao < n; ao++) {
            an[ao] = sc.nextInt();
        }
        int[] ao = new int[n];
        for (int ap = 0; ap < n; ap++) {
            ao[ap] = sc.nextInt();
        }
        int[] ap = new int[n];
        for (int aq = 0; aq < n; aq++) {
            ap[aq] = sc.nextInt();
        }
        int[] aq = new int[n];
        for (int ar = 0; ar < n; ar++) {
            aq[ar] = sc.nextInt();
        }
        int[] ar = new int[n];
        for (int as = 0; as < n; as++) {
            ar[as] = sc.nextInt();
        }
        int[] as = new int[n];
        for (int at = 0; at < n; at++) {
            as[at] = sc.nextInt();
        }
        int[] at = new int[n];
        for (int au = 0; au < n; au++) {
            at[au] = sc.nextInt();
        }
        int[] au = new int[n];
        for (int av = 0; av < n; av++) {
            au[av] = sc.nextInt();
        }
        int[] av = new int[n];
        for (int aw = 0; aw < n; aw++) {
            av[aw] = sc.nextInt();
        }
        int[] aw = new int[n];
        for (int ax = 0; ax < n; ax++) {
            aw[ax] = sc.nextInt();
        }
        int[] ax = new int[n];
        for (int ay = 0; ay < n; ay++) {
            ax[ay] = sc.nextInt();
        }
        int[] ay = new int[n];
        for (int az = 0; az < n; az++) {
            ay[az] = sc.nextInt();
        }
        int[] az = new int[n];
        for (int ba = 0; ba < n; ba++) {
            az[ba] = sc.nextInt();
        }
        int[] ba = new int[n];
        for (int bb = 0; bb < n; bb++) {
            ba[bb] = sc.nextInt();
        }
        int[] bb = new int[n];
        for (int bc = 0; bc < n; bc++) {
            bb[bc] = sc.nextInt();
        }
        int[] bc = new int[n];
        for (int bd = 0; bd < n; bd++) {
            bc[bd] = sc.nextInt();
        }
        int[] bd = new int[n];
        for (int be = 0; be < n; be++) {
            bd[be] = sc.nextInt();
        }
        int[] be = new int[n];
        for (int bf = 0; bf < n; bf++) {
            be[bf] = sc.nextInt();
        }
        int[] bf = new int[n];
        for (int bg = 0; bg < n; bg++) {
            bf[bg] = sc.nextInt();
        }
        int[] bg = new int[n];
        for (int bh = 0; bh < n; bh++) {
            bg[bh] = sc.nextInt();
        }
        int[] bh = new int[n];
        for (int bi = 0; bi < n; bi++) {
            bh[bi] = sc.nextInt();
        }
        int[] bi = new int[n];
        for (int bj = 0; bj < n; bj++) {
            bi[bj] = sc.nextInt();
        }
        int[] bj = new int[n];
        for (int bk = 0; bk < n; bk++) {
            bj[bk] = sc.nextInt();
        }
        int[] bk = new int[n];
        for (int bl = 0; bl < n; bl++) {
            bk[bl] = sc.nextInt();
        }
        int[] bl = new int[n];
        for (int bm = 0; bm < n; bm++) {
            bl[bm] = sc.nextInt();
        }
        int[] bm = new int[n];
        for (int bn = 0; bn < n; bn++) {
            bm[bn] = sc.nextInt();
        }
        int[] bn = new int[n];
        for (int bo = 0; bo < n; bo++) {
            bn[bo] = sc.nextInt();
        }
        int[] bo = new int[n];
        for (int bp = 0; bp < n; bp++) {
            bo[bp] = sc.nextInt();
        }
        int[] bp = new int[n];
        for (int bq = 0; bq < n; bq++) {
            bp[bq] = sc.nextInt();
        }
        int[] bq = new int[n];
        for (int br = 0; br < n; br++) {
            bq[br] = sc.nextInt();
        }
        int[] br = new int[n];
        for (int bs = 0; bs < n; bs++) {
            br[bs] = sc.nextInt();
        }
        int[] bs = new int[n];
        for (int bt = 0; bt < n; bt++) {
            bs[bt] = sc.nextInt();
        }
        int[] bt = new int[n];
        for (int bu = 0; bu < n; bu++) {
            bt[bu] = sc.nextInt();
        }
        int[] bu = new int[n];
        for (int bv = 0; bv < n; bv++) {
            bu[bv] = sc.nextInt();
        }
        int[] bv = new int[n];
        for (int bw = 0; bw < n; bw++) {
            bv[bw] = sc.nextInt();
        }
        int[] bw = new int[n];
        for (int bx = 0; bx < n; bx++) {
            bw[bx] = sc.nextInt();
        }
        int[] bx = new int[n];
        for (int by = 0; by < n; by++) {
            bx[by] = sc.nextInt();
        }
        int[] by = new int[n];
        for (int bz = 0; bz < n; bz++) {
            by[bz] = sc.nextInt();
        }
        int[] bz = new int[n];
        for (int ca = 0; ca < n; ca++) {
            bz[ca] = sc.nextInt();
        }
        int[] ca = new int[n];
        for (int cb = 0; cb < n; cb++) {
            ca[cb] = sc.nextInt();
        }
        int[] cb = new int[n];
        for (int cc = 0; cc < n; cc++) {
            cb[cc] = sc.nextInt();
        }
        int[] cc = new int[n];
        for (int cd = 0; cd < n; cd++) {
            cc[cd] = sc.nextInt();
        }
        int[] cd = new int[n];
        for (int ce = 0; ce < n; ce++) {
            cd[ce] = sc.nextInt();
        }
        int[] ce = new int[n];
        for (int cf = 0; cf < n; cf++) {
            ce[cf] = sc.nextInt();
        }
        int[] cf = new int[n];
        for (int cg = 0; cg < n; cg++) {
            cf[cg] = sc.nextInt();
        }
        int[] cg = new int[n];
        for (int ch = 0; ch < n; ch++) {
            cg[ch] = sc.nextInt();
        }
        int[] ch = new int[n];
        for (int ci = 0; ci < n; ci++) {
            ch[ci] = sc.nextInt();
        }
        int[] ci = new int[n];
        for (int cj = 0; cj < n; cj++) {
            ci[cj] = sc.nextInt();
        }
        int[] cj = new int[n];
        for (int ck = 0; ck < n; ck++) {
            cj[ck] = sc.nextInt();
        }
        int[] ck = new int[n];
        for (int cl = 0; cl < n; cl++) {
            ck[cl] = sc.nextInt();
        }
        int[] cl = new int[n];
        for (int cm = 0; cm < n; cm++) {
            cl[cm] = sc.nextInt();
        }
        int[] cm = new int[n];
        for (int cn = 0; cn < n; cn++) {
            cm[cn] = sc.nextInt();
        }
        int[] cn = new int[n];
        for (int co = 0; co < n; co++) {
            cn[co] = sc.nextInt();
        }
        int[] co = new int[n];
        for (int cp = 0; cp < n; cp++) {
            co[cp] = sc.nextInt();
        }
        int[] cp = new int[n];
        for (int cq = 0; cq < n; cq++) {
            cp[cq] = sc.nextInt();
        }
        int[] cq = new int[n];
        for (int cr = 0; cr < n; cr++) {
            cq[cr] = sc.nextInt();
        }
        int[] cr = new int[n];
        for (int cs = 0; cs < n; cs++) {
            cr[cs] = sc.nextInt();
        }
        int[] cs = new int[n];
        for (int ct = 0; ct < n; ct++) {
            cs[ct] = sc.nextInt();
        }
        int[] ct = new int[n];
        for (int cu = 0; cu < n; cu++) {
            ct
import java.util.Scanner;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] count = new int[100001];
        for (int i = 0; i < n; i++) {
            count[a[i]]++;
        }
        for (int i = 0; i < 100001; i++) {
            if (count[i] > 0) {
                System.out.println(i + " " + count[i]);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int currentLevel = 0;
        int counter = 0;
        int counterTurns = -1;
        while (counter < a.length) {
            counterTurns++;
            for (int i = 0; i < a.length; i++) {
                if (a[i] != -1 && a[i] <= counter) {
                    counter++;
                    a[i] = -1;
                }
            }
            reverse(a);
        }
        System.out.println(counterTurns);
    }

    public static void reverse(int[] a) {
        int i = 0;
        int j = a.length - 1;
        while (i < j) {
            int temp = a[i];
            a[i] = a[j];
            a[j] = temp;
            i++;
            j--;
        }
    }
}
import java.util.*;
public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            l[a] = b;
        }
        if (l[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        for (int i = 1; i < 1000010; i++) {
            if (l[i] == 0) {
                dp[i] = dp[i - 1];
            } else {
                if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
            }
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }
        System.out.println(n - mx);
    }
}
import java.util.Scanner;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        if (sum(a) % (n * (n + 1) / 2) != 0) {
            System.out.println("NO");
        } else {
            int k = sum(a) / (n * (n + 1) / 2);
            int[] b = new int[n + 1];
            for (int i = 0; i < n; i++) {
                b[i + 1] = a[i];
            }
            b[0] = a[0];
            if (sum(b, k) || sum(b, k, n) != n) {
                System.out.println("NO");
            } else {
                System.out.println("YES");
            }
        }
    }

    public static int sum(int[] a) {
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
        }
        return sum;
    }

    public static boolean sum(int[] a, int k) {
        for (int i = 0; i < a.length - 1; i++) {
            if ((k - a[i] + a[i + 1]) % a.length != 0) {
                return true;
            }
        }
        return false;
    }

    public static int sum(int[] a, int k, int n) {
        int count = 0;
        for (int i = 0; i < a.length - 1; i++) {
            if ((k - a[i] + a[i + 1]) / n >= 0) {
                count++;
            }
        }
        return count;
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        if (n < 1) {
            if (m < 1) {
                System.out.println(n + " " + m);
                return;
            }
            System.out.println("Impossible");
            return;
        }
        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        }
        if (m <= n) {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'a') {
                count++;
            }
        }
        System.out.println(count);
    }
}
### 2.13. 1012. A >> B

#### 2.13.1. Description

Calculate a >> b.

#### 2.13.2. Input

The first line contains an integer T, denoting the number of test cases.

Each test case contains a single line with two integers a and b, separated by a single space.

#### 2.13.3. Output

For each test case, print the right shift of a and b in one line.

#### 2.13.4. Sample Input
and
cpp
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;
    string s;
    cin >> s;
    int m;
    cin >> m;
    string t;
    cin >> t;
    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (s[i - 1] == t[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    cout << n + m - 2 * dp[n][m] << endl;
    return 0;
}
import java.util.*;
import java.io.*;

public class atcoder_ARC102_C {
    static int K, N;
    static int mod = 998244353;
    static int __N = 8000;
    static long[] g1 = new long[__N + 1];
    static long[] g2 = new long[__N + 1];
    static long[] inverse = new long[__N + 1];
    static long[] ans = new long[__N + 1];

    static long cmb(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] * g2[n - r] % mod;
    }

    static long kumiawase(int p, int q) {
        return cmb(p + q - 1, q - 1, mod);
    }

    static long solve(int n) {
        assert n <= K + 1;
        long ans = 0;
        int kumi = (n - 1) / 2;
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            ans += (long) Math.pow(2, p) * cmb(kumi, p, mod) * kumiawase(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += (long) Math.pow(2, p) * cmb(kumi, p, mod) * kumiawase(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        K = sc.nextInt();
        N = sc.nextInt();
        g1[0] = g1[1] = 1;
        g2[0] = g2[1] = 1;
        inverse[0] = 0;
        inverse[1] = 1;
        for (int i = 2; i <= __N; i++) {
            g1[i] = g1[i - 1] * i % mod;
            inverse[i] = (mod - inverse[mod % i] * (mod / i) % mod) % mod;
            g2[i] = g2[i - 1] * inverse[i - 1] % mod;
        }
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                ans[i] = solve(i) % mod;
                System.out.println(ans[i]);
            } else {
                System.out.println(ans[i - K]);
            }
        }
    }
}
Multiple for loops can be used to create a list of tuples.
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        int max = A[0
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }
        int a = 0;
        for (int i = 0; i < N; i++) {
            if (n[i] == n[0]) {
                a++;
            }
        }
        System.out.println(a);
    }
}
import java.util.*;
public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[n / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] cntb = new int[100002 + 1];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < n / 2; i++) {
            cnta[a[i]]++;
        }
        for (int i = 0; i < n / 2; i++) {
            if (maxCnta < cnta[a[i]]) {
                vala = a[i];
                maxCnta = cnta[a[i]];
            }
        }
        for (int i = 0; i < n / 2; i++) {
            if (maxCnta1 < cnta[a[i]] && vala != a[i]) {
                maxCnta1 = cnta[a[i]];
                vala1 = a[i];
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < n / 2; i++) {
            cntb[b[i]]++;
        }
        for (int i = 0; i < n / 2; i++) {
            if (maxCntb < cntb[b[i]]) {
                valb = b[i];
                maxCntb = cntb[b[i]];
            }
        }
        for (int i = 0; i < n / 2; i++) {
            if (maxCntb1 < cntb[b[i]] && valb != b[i]) {
                maxCntb1 = cntb[b[i]];
                valb1 = b[i];
            }
        }
        if (valb != vala) {
            int res = 0;
            for (int i = 0; i < n / 2; i++) {
                if (a[i] != vala) {
                    res++;
                }
            }
            for (int i = 0; i < n / 2; i++) {
                if (b[i] != valb) {
                    res++;
                }
            }
            System.out.println(res);
        } else {
            int resa = 0;
            int resb = 0;
            int resa1 = 0;
            int resb1 = 0;
            for (int i = 0; i < n / 2; i++) {
                if (a[i] != vala) {
                    resa++;
                }
                if (a[i] != vala1) {
                    resa1++;
                }
            }
            for (int i = 0; i < n / 2; i++) {
                if (b[i] != valb) {
                    resb++;
                }
                if (b[i] != valb1) {
                    resb1++;
                }
            }
            System.out.println(Math.min(resa + resb1, resa1 + resb));
        }
    }
}
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;

and
import java.util.Scanner;

public class codeforces_306_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'a') {
                count++;
            }
        }
        System.out.println(count);
    }

import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_327_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        if (s.indexOf('0') == -1) {
            System.out.println(n - 1);
        } else {
            List<Integer> indices = IntStream.range(0, s.length())
                    .filter(i -> s.charAt(i) == '0')
                    .boxed()
                    .collect(Collectors.toList());
            if (indices.size() == 1) {
                System.out.println(n);
            } else {
                int maximum = 0;
                for (int i = 0; i < indices.size() - 1; i++) {
                    for (int j = i + 1; j < indices.size(); j++) {
                        maximum = Math.max(maximum, 2 + 2 * (Math.abs(indices.indexOf(indices.get(i)) - indices.indexOf(indices.get(j))) - 1) - (Math.abs(indices.get(i) - indices.get(j)) - 1));
                    }
                }
                System.out.println(s.chars().filter(ch -> ch == '1').count() + maximum);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        while (n < 0) {
            n = sc.nextInt();
        }
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        System.out.println(sum);
        System.out.println("Thank you");
        if (sum > 100) {
            System.out.println("That
and
import java.util.Scanner;

public class codeforces_579_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = sc.nextInt();
        }
        int[] e = new int[n];
        for (int i = 0; i < n; i++) {
            e[i] = sc.nextInt();
        }
        int[] f = new int[n];
        for (int i = 0; i < n; i++) {
            f[i] = sc.nextInt();
        }
        int[] g = new int[n];
        for (int i = 0; i < n; i++) {
            g[i] = sc.nextInt();
        }
        int[] h = new int[n];
        for (int i = 0; i < n; i++) {
            h[i] = sc.nextInt();
        }
        int[] i = new int[n];
        for (int j = 0; j < n; j++) {
            i[j] = sc.nextInt();
        }
        int[] j = new int[n];
        for (int k = 0; k < n; k++) {
            j[k] = sc.nextInt();
        }
        int[] k = new int[n];
        for (int l = 0; l < n; l++) {
            k[l] = sc.nextInt();
        }
        int[] l = new int[n];
        for (int m = 0; m < n; m++) {
            l[m] = sc.nextInt();
        }
        int[] m = new int[n];
        for (int o = 0; o < n; o++) {
            m[o] = sc.nextInt();
        }
        int[] o = new int[n];
        for (int p = 0; p < n; p++) {
            o[p] = sc.nextInt();
        }
        int[] p = new int[n];
        for (int q = 0; q < n; q++) {
            p[q] = sc.nextInt();
        }
        int[] q = new int[n];
        for (int r = 0; r < n; r++) {
            q[r] = sc.nextInt();
        }
        int[] r = new int[n];
        for (int s = 0; s < n; s++) {
            r[s] = sc.nextInt();
        }
        int[] s = new int[n];
        for (int t = 0; t < n; t++) {
            s[t] = sc.nextInt();
        }
        int[] t = new int[n];
        for (int u = 0; u < n; u++) {
            t[u] = sc.nextInt();
        }
        int[] u = new int[n];
        for (int v = 0; v < n; v++) {
            u[v] = sc.nextInt();
        }
        int[] v = new int[n];
        for (int w = 0; w < n; w++) {
            v[w] = sc.nextInt();
        }
        int[] w = new int[n];
        for (int x = 0; x < n; x++) {
            w[x] = sc.nextInt();
        }
        int[] x = new int[n];
        for (int y = 0; y < n; y++) {
            x[y] = sc.nextInt();
        }
        int[] y = new int[n];
        for (int z = 0; z < n; z++) {
            y[z] = sc.nextInt();
        }
        int[] z = new int[n];
        for (int aa = 0; aa < n; aa++) {
            z[aa] = sc.nextInt();
        }
        int[] aa = new int[n];
        for (int ab = 0; ab < n; ab++) {
            aa[ab] = sc.nextInt();
        }
        int[] ab = new int[n];
        for (int ac = 0; ac < n; ac++) {
            ab[ac] = sc.nextInt();
        }
        int[] ac = new int[n];
        for (int ad = 0; ad < n; ad++) {
            ac[ad] = sc.nextInt();
        }
        int[] ad = new int[n];
        for (int ae = 0; ae < n; ae++) {
            ad[ae] = sc.nextInt();
        }
        int[] ae = new int[n];
        for (int af = 0; af < n; af++) {
            ae[af] = sc.nextInt();
        }
        int[] af = new int[n];
        for (int ag = 0; ag < n; ag++) {
            af[ag] = sc.nextInt();
        }
        int[] ag = new int[n];
        for (int ah = 0; ah < n; ah++) {
            ag[ah] = sc.nextInt();
        }
        int[] ah = new int[n];
        for (int ai = 0; ai < n; ai++) {
            ah[ai] = sc.nextInt();
        }
        int[] ai = new int[n];
        for (int aj = 0; aj < n; aj++) {
            ai[aj] = sc.nextInt();
        }
        int[] aj = new int[n];
        for (int ak = 0; ak < n; ak++) {
            aj[ak] = sc.nextInt();
        }
        int[] ak = new int[n];
        for (int al = 0; al < n; al++) {
            ak[al] = sc.nextInt();
        }
        int[] al = new int[n];
        for (int am = 0; am < n; am++) {
            al[am] = sc.nextInt();
        }
        int[] am = new int[n];
        for (int an = 0; an < n; an++) {
            am[an] = sc.nextInt();
        }
        int[] an = new int[n];
        for (int ao = 0; ao < n; ao++) {
            an[ao] = sc.nextInt();
        }
        int[] ao = new int[n];
        for (int ap = 0; ap < n; ap++) {
            ao[ap] = sc.nextInt();
        }
        int[] ap = new int[n];
        for (int aq = 0; aq < n; aq++) {
            ap[aq] = sc.nextInt();
        }
        int[] aq = new int[n];
        for (int ar = 0; ar < n; ar++) {
            aq[ar] = sc.nextInt();
        }
        int[] ar = new int[n];
        for (int as = 0; as < n; as++) {
            ar[as] = sc.nextInt();
        }
        int[] as = new int[n];
        for (int at = 0; at < n; at++) {
            as[at] = sc.nextInt();
        }
        int[] at = new int[n];
        for (int au = 0; au < n; au++) {
            at[au] = sc.nextInt();
        }
        int[] au = new int[n];
        for (int av = 0; av < n; av++) {
            au[av] = sc.nextInt();
        }
        int[] av = new int[n];
        for (int aw = 0; aw < n; aw++) {
            av[aw] = sc.nextInt();
        }
        int[] aw = new int[n];
        for (int ax = 0; ax < n; ax++) {
            aw[ax] = sc.nextInt();
        }
        int[] ax = new int[n];
        for (int ay = 0; ay < n; ay++) {
            ax[ay] = sc.nextInt();
        }
        int[] ay = new int[n];
        for (int az = 0; az < n; az++) {
            ay[az] = sc.nextInt();
        }
        int[] az = new int[n];
        for (int ba = 0; ba < n; ba++) {
            az[ba] = sc.nextInt();
        }
        int[] ba = new int[n];
        for (int bb = 0; bb < n; bb++) {
            ba[bb] = sc.nextInt();
        }
        int[] bb = new int[n];
        for (int bc = 0; bc < n; bc++) {
            bb[bc] = sc.nextInt();
        }
        int[] bc = new int[n];
        for (int bd = 0; bd < n; bd++) {
            bc[bd] = sc.nextInt();
        }
        int[] bd = new int[n];
        for (int be = 0; be < n; be++) {
            bd[be] = sc.nextInt();
        }
        int[] be = new int[n];
        for (int bf = 0; bf < n; bf++) {
            be[bf] = sc.nextInt();
        }
        int[] bf = new int[n];
        for (int bg = 0; bg < n; bg++) {
            bf[bg] = sc.nextInt();
        }
        int[] bg = new int[n];
        for (int bh = 0; bh < n; bh++) {
            bg[bh] = sc.nextInt();
        }
        int[] bh = new int[n];
        for (int bi = 0; bi < n; bi++) {
            bh[bi] = sc.nextInt();
        }
        int[] bi = new int[n];
        for (int bj = 0; bj < n; bj++) {
            bi[bj] = sc.nextInt();
        }
        int[] bj = new int[n];
        for (int bk = 0; bk < n; bk++) {
            bj[bk] = sc.nextInt();
        }
        int[] bk = new int[n];
        for (int bl = 0; bl < n; bl++) {
            bk[bl] = sc.nextInt();
        }
        int[] bl = new int[n];
        for (int bm = 0; bm < n; bm++) {
            bl[bm] = sc.nextInt();
        }
        int[] bm = new int[n];
        for (int bn = 0; bn < n; bn++) {
            bm[bn] = sc.nextInt();
        }
        int[] bn = new int[n];
        for (int bo = 0; bo < n; bo++) {
            bn[bo] = sc.nextInt();
        }
        int[] bo = new int[n];
        for (int bp = 0; bp < n; bp++) {
            bo[bp] = sc.nextInt();
        }
        int[] bp = new int[n];
        for (int bq = 0; bq < n; bq++) {
            bp[bq] = sc.nextInt();
        }
        int[] bq = new int[n];
        for (int br = 0; br < n; br++) {
            bq[br] = sc.nextInt();
        }
        int[] br = new int[n];
        for (int bs = 0; bs < n; bs++) {
            br[bs] = sc.nextInt();
        }
        int[] bs = new int[n];
        for (int bt = 0; bt < n; bt++) {
            bs[bt] = sc.nextInt();
        }
        int[] bt = new int[n];
        for (int bu = 0; bu < n; bu++) {
            bt[bu] = sc.nextInt();
        }
        int[] bu = new int[n];
        for (int bv = 0; bv < n; bv++) {
            bu[bv] = sc.nextInt();
        }
        int[] bv = new int[n];
        for (int bw = 0; bw < n; bw++) {
            bv[bw] = sc.nextInt();
        }
        int[] bw = new int[n];
        for (int bx = 0; bx < n; bx++) {
            bw[bx] = sc.nextInt();
        }
        int[] bx = new int[n];
        for (int by = 0; by < n; by++) {
            bx[by] = sc.nextInt();
        }
        int[] by = new int[n];
        for (int bz = 0; bz < n; bz++) {
            by[bz] = sc.nextInt();
        }
        int[] bz = new int[n];
        for (int ca = 0; ca < n; ca++) {
            bz[ca] = sc.nextInt();
        }
        int[] ca = new int[n];
        for (int cb = 0; cb < n; cb++) {
            ca[cb] = sc.nextInt();
        }
        int[] cb = new int[n];
        for (int cc = 0; cc < n; cc++) {
            cb[cc] = sc.nextInt();
        }
        int[] cc = new int[n];
        for (int cd = 0; cd < n; cd++) {
            cc[cd] = sc.nextInt();
        }
        int[] cd = new int[n];
        for (int ce = 0; ce < n; ce++) {
            cd[ce] = sc.nextInt();
        }
        int[] ce = new int[n];
        for (int cf = 0; cf < n; cf++) {
            ce[cf] = sc.nextInt();
        }
        int[] cf = new int[n];
        for (int cg = 0; cg < n; cg++) {
            cf[cg] = sc.nextInt();
        }
        int[] cg = new int[n];
        for (int ch = 0; ch < n; ch++) {
            cg[ch] = sc.nextInt();
        }
        int[] ch = new int[n];
        for (int ci = 0; ci < n; ci++) {
            ch[ci] = sc.nextInt();
        }
        int[] ci = new int[n];
        for (int cj = 0; cj < n; cj++) {
            ci[cj] = sc.nextInt();
        }
        int[] cj = new int[n];
        for (int ck = 0; ck < n; ck++) {
            cj[ck] = sc.nextInt();
        }
        int[] ck = new int[n];
        for (int cl = 0; cl < n; cl++) {
            ck[cl] = sc.nextInt();
        }
        int[] cl = new int[n];
        for (int cm = 0; cm < n; cm++) {
            cl[cm] = sc.nextInt();
        }
        int[] cm = new int[n];
        for (int cn = 0; cn < n; cn++) {
            cm[cn] = sc.nextInt();
        }
        int[] cn = new int[n];
        for (int co = 0; co < n; co++) {
            cn[co] = sc.nextInt();
        }
        int[] co = new int[n];
        for (int cp = 0; cp < n; cp++) {
            co[cp] = sc.nextInt();
        }
        int[] cp = new int[n];
        for (int cq = 0; cq < n; cq++) {
            cp[cq] = sc.nextInt();
        }
        int[] cq = new int[n];
        for (int cr = 0; cr < n; cr++) {
            cq[cr] = sc.nextInt();
        }
        int[] cr = new int[n];
        for (int cs = 0; cs < n; cs++) {
            cr[cs] = sc.nextInt();
        }
        int[] cs = new int[n];
        for (int ct = 0; ct < n; ct++) {
            cs[ct] = sc.nextInt();
        }
        int[] ct = new int[n];
        for (int cu = 0; cu < n; cu++) {
            ct[cu] = sc.nextInt();
        }
        int[] cu = new int[n];
        for (int cv = 0; cv < n; cv++) {
            cu[cv] = sc.nextInt();
        }
        int[] cv = new int[n];
        for (int cw = 0; cw < n; cw++) {
            cv[cw] = sc.nextInt();
        }
        int[] cw = new int[n
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int length = sc.nextInt();
        int[] arr = new int[3];
        for (int i = 0; i < 3; i++) {
            arr[i] = sc.nextInt();
        }
        sc.close();
        if (length % arr[0] == 0) {
            System.out.println(length / arr[0]);
            return;
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                int check = length - i * arr[2];
                if (check >= 0 && check % arr[0] == 0) {
                    k = check / arr[0];
                    ans = Math.max(ans, k + i);
                }
            }
        } else {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
Java code:
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNext()) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            System.out.println(a + b);
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC165_C {
    static int N, M, Q;
    static int[] a, b, c, d;
    static int res = 0;

    public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        N = sc.nextInt();
        M = sc.nextInt();
        Q = sc.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        rec(new ArrayList<>());
        System.out.println(res);
    }

    static void rec(ArrayList<Integer> A) {
        if (A.size() == N) {
            int ans = 0;
            for (int i = 0; i < Q; i++) {
                if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
            return;
        }
        int last_max = A.size() == 0 ? 1 : A.get(A.size() - 1);
        for (int i = last_max; i <= M; i++) {
            A.add(i);
            rec(A);
            A.remove(A.size() - 1);
        }
    }

    static class FastScanner {
        private final InputStream in = System.in;
        private final byte[] buffer = new byte[1024];
        private int ptr = 0;
        private int buflen = 0;

        private boolean hasNextByte() {
            if (ptr < buflen) {
                return true;
            } else {
                ptr = 0;
                try {
                    buflen = in.read(buffer);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (buflen <= 0) {
                    return false;
                }
            }
            return true;
        }

        private int readByte() {
            if (hasNextByte()) return buffer[ptr++];
            else return -1;
        }

        private static boolean isPrintableChar(int c) {
            return 33 <= c && c <= 126;
        }

        public boolean hasNext() {
            while (hasNextByte() && !isPrintableChar(buffer[ptr])) ptr++;
            return hasNextByte();
        }

        public String next() {
            if (!hasNext()) throw new NoSuchElementException();
            StringBuilder sb = new StringBuilder();
            int b = readByte();
            while (isPrintableChar(b)) {
                sb.appendCodePoint(b);
                b = readByte();
            }
            return sb.toString();
        }

        public long nextLong() {
            if (!hasNext()) throw new NoSuchElementException();
            long n = 0;
            boolean minus = false;
            int b = readByte();
            if (b == '-') {
                minus = true;
                b = readByte();
            }
            if (b < '0' || '9' < b) {
                throw new NumberFormatException();
            }
            while (true) {
                if ('0' <= b && b <= '9') {
                    n *= 10;
                    n += b - '0';
                } else if (b == -1 || !isPrintableChar(b)) {
                    return minus ? -n : n;
                } else {
                    throw new NumberFormatException();
                }
                b = readByte();
            }
        }

        public int nextInt() {
            long nl = nextLong();
            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE) throw new NumberFormatException();
            return (int) nl;
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }
    }
}
and
3628800
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        char[][] t = new char[4][4];
        for (int i = 0; i < 4; i++) {
            String s = sc.nextLine();
            for (int j = 0; j < 4; j++) {
                t[i][j] = s.charAt(j);
            }
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        int high = 1;
        int tower = n;
        int maximum = 1;
        for (int i = 1; i < n; i++) {
            if (l[i] == l[i - 1]) {
                tower--;
                high++;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long N = sc.nextLong();
        long ans = N / 2 + N / 3 - N / 6;
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextInt();
        }
        System.out.println(Bob_sMaxStrength(a, b));
    }

    public static int Bob_sMaxStrength(int[] a, int[] b) {
        int pScore = 0;
        int sScore = 0;
        int pMaxScore = 0;
        int sMaxScore = 0;
        for (int i = 0; i < a.length; i++) {
            if (b[i] == 1) {
                pScore += a[i];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= a[i];
            }
        }
        for (int i = a.length - 1; i >= 0; i--) {
            if (b[i] == 1) {
                sScore += a[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= a[i];
            }
        }
        if (pMaxScore > sMaxScore) {
            return pMaxScore;
        }
        return sMaxScore;
    }
}


import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int ans = 0;
            ans += n / 2;
            ans += n / 3;
            ans -= n / 6;
            System.out.println(ans);
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        System.out.println(n % 1000000007);
    }
}
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            System.out.println((n * (n + 1) / 2) % 100000000033);
        }
    }
}
and
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int
class Solution {
    public String reverseWords(String s) {
        s = s.trim();
        int j = s.length() - 1, i = j;
        StringBuilder res = new StringBuilder();
        while (i >= 0) {
            while (i >= 0 && s.charAt(i) != ' ') i--;
            res.append(s.substring(i + 1, j + 1) + " ");
            while (i >= 0 && s.charAt(i) == ' ') i--;
            j = i;
        }
        return res.toString().trim();
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine();
        char[][] l = new char[n][m];
        for (int i = 0; i < n; i++) {
            String s = sc.nextLine();
            for (int j = 0; j < m; j++) {
                if (s.charAt(j) == '.') {
                    if ((i + j) % 2 == 0) {
                        l[i][j] = 'B';
                    } else {
                        l[i][j] = 'W';
                    }
                } else {
                    l[i][j] = s.charAt(j);
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(l[i][j]);
            }
            System.out.println();
        }
    }
}
and
public class codeforces_30_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        System.out.println(sum);
s = input()
longest = s[0]
current = s[0]
for c in s[1:]:
    if c >= current[-1]:
        current += c
        if len(current) > len(longest):
            longest = current
    else:
        current = c
print('Longest substring in alphabetical order is:', longest)
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        System.out.println(sum);
    }
}
n = int(input())
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    for j in range(i + 1, n):
        if (a[i] + a[j]) % 3 == 0:
            ans += 1
print(ans)
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'a' || s.charAt(i) == 'A') {
                count++;
            }
        }
        System.out.println(count);
    }
}

class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) {
            return false;
        }
        int y = x;
        int z = 0;
        while (y > 0) {
            z = z * 10 + y % 10;
            y /= 10;
        }
        return x == z;
    }
}
## 4.

### 4.1.
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < 10; i++) {
            System.out.println(1000000000);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int max = a[0];
        int min = a[0];
        for (int i = 0; i < n; i++) {
            if (a[i] > max) {
                max = a[i];
            }
            if (a[i] < min) {
                min = a[i];
            }
        }
        System.out.println(max - min);
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] list = new int[n];
        for (int i = 0; i < n; i++) {
            list[i] = sc.nextInt() % 2;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += list[i];
        }
        if (sum == 1) {
            for (int i = 0; i < n; i++) {
                if (list[i] == 1) {
                    System.out.println(i + 1);
                    break;
                }
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (list[i] == 0) {
                    System.out.println(i + 1);
                    break;
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        String memory = "";
        for (int x = 0; x < firstline; x++) {
            int A = sc.nextInt();
            int G = sc.nextInt();
            if (total + A <= 500) {
                total += A;
                memory += "A";
            } else {
                total -= G;
                memory += "G";
            }
        }
        System.out.println(memory);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] s = sc.nextLine().split(" ");
        int a = Integer.parseInt(s[0]);
        int b = (int) (Float.parseFloat(s[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }
}
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.
and
import java.util.Scanner;

public class
public class atcoder_ABC166_C {
    public static void main(String[] args) {
        System.out.println(1000000000000000000L);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long a = n / 2;
        long b = n / 3;
        long c = n / 5;
        long d = n / 7;
        long e = n / 11;
        long f = n / 13;
        long g = n / 17;
        long h = n / 6;
        long i = n / 10;
        long j = n / 14;
        long k = n / 15;
        long l = n / 22;
        long m = n / 26;
        long o = n /
import java.util.*;
import java.io.*;
public class atcoder_AGC004_D {
    static int n, k, ans;
    static ArrayList<Integer>[] links;
    static int dfs(int v, int p) {
        int heightFromLeaf = 0;
        int cutCount = 0;
        for (int u : links[v]) {
            if (u == 0) continue;
            int hgt = dfs(u, v);
            heightFromLeaf = Math.max(heightFromLeaf, hgt);
            cutCount += hgt;
        }
        heightFromLeaf++;
        if (p != 0 && heightFromLeaf == k) {
            heightFromLeaf = 0;
            cutCount++;
        }
        return heightFromLeaf;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());
        links = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            links[i] = new ArrayList<>();
        }
        st = new StringTokenizer(br.readLine());
        for (int i = 1; i < n; i++) {
            int a = Integer.parseInt(st.nextToken()) - 1;
            links[a].add(i);
        }
        dfs(0, 0);
        if (links[0].size() > 0) ans++;
        System.out.println(ans);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNext()) {
            int a
import java.util.*;
public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'a' || s.charAt(i) == 'A') {
                count++;
            }
        }
        System.out.println(count);
    }
}

import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int QR = sc.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = sc.nextInt();
        }
        int[] sum_el = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (n - 1) + sum_el[n] * R;
        for (int i = 1; i <= n; i++) {
            int energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
            if (i > (n - i)) {
                energy = energy + (i - (n - i) - 1) * QL;
            } else if ((n - i) > i) {
                energy = energy + ((n - i) - i - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String[] s1 = s.
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int count = 0;
        for (int i = 0; i < N; i++) {
            if (A[i] == 0) {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(
import java.util.*;
public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a = n / 3;
        int b = n /
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
## 9. 2019年10月20日

### 9.1. 题目

给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

### 9.2. 解答
import java.util.*;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int mn = N + 1, mx = -1;
        for (int i = 0; i < N; i++) {
            if (i + 1 != A[i]) {
                mn = Math.min(mn, i);
                mx = Math.max(mx, i);
            }
        }
        if (mx == -1) {
            System.out.println("0 0");
        } else {
            int[] B = new int[mx - mn + 1];
            for (int i = 0; i < B.length; i++) {
                B[i] = A[mn + i];
            }
            for (int i = 0; i < B.length / 2; i++) {
                int tmp = B[i];
                B[i] = B[B.length - 1 - i];
                B[B.length - 1 - i] = tmp;
            }
            for (int i = 0; i < B.length; i++) {
                A[mn + i] = B[i];
            }
            boolean flag = true;
            for (int i = 0; i < N; i++) {
                if (i + 1 != A[i]) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                System.out.println((mn + 1) + " " + (mx + 1));
            } else {
                System.out.println("0 0");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] split = input.split(" ");
        int a = Integer.parseInt(split[0]);
        int b = Integer.parseInt(split[1]);
        int c = Integer.parseInt(split[2]);
        int d = Integer.parseInt(split[3]);
        int e = Integer.parseInt(split[4]);
        int f = Integer.parseInt(split[5]);
        int g = Integer.parseInt(split[6]);
        int h = Integer.parseInt(split[7]);
        int i = Integer.parseInt(split[8]);
        int j = Integer.parseInt(split[9]);
        int k = Integer.parseInt(split[10]);
        int l = Integer.parseInt(split[11]);
        int m = Integer.parseInt(split[12]);
        int n = Integer.parseInt(split[13]);
        int o = Integer.parseInt(split[14]);
        int p = Integer.parseInt(split[15]);
        int q = Integer.parseInt(split[16]);
        int r = Integer.parseInt(split[17]);
        int s = Integer.parseInt(split[18]);
        int t = Integer.parseInt(split[19]);
        int u = Integer.parseInt(split[20]);
        int v = Integer.parseInt(split[21]);
        int w = Integer.parseInt(split[22]);
        int x = Integer.parseInt(split[23]);
        int y = Integer.parseInt(split[24]);
        int z = Integer.parseInt(split[25]);
        int aa = Integer.parseInt(split[26]);
        int ab = Integer.parseInt(split[27]);
        int ac = Integer.parseInt(split[28]);
        int ad = Integer.parseInt(split[29]);
        int ae = Integer.parseInt(split[30]);
        int af = Integer.parseInt(split[31]);
        int ag = Integer.parseInt(split[32]);
        int ah = Integer.parseInt(split[33]);
        int ai = Integer.parseInt(split[34]);
        int aj = Integer.parseInt(split[35]);
        int ak = Integer.parseInt(split[36]);
        int al = Integer.parseInt(split[37]);
        int am = Integer.parseInt(split[38]);
        int an = Integer.parseInt(split[39]);
        int ao = Integer.parseInt(split[40]);
        int ap = Integer.parseInt(split[41]);
        int aq = Integer.parseInt(split[42]);
        int ar = Integer.parseInt(split[43]);
        int as = Integer.parseInt(split[44]);
        int at = Integer.parseInt(split[45]);
        int au = Integer.parseInt(split[46]);
        int av = Integer.parseInt(split[47]);
        int aw = Integer.parseInt(split[48]);
        int ax = Integer.parseInt(split[49]);
        int ay = Integer.parseInt(split[50]);
        int az = Integer.parseInt(split[51]);
        int ba = Integer.parseInt(split[52]);
        int bb = Integer.parseInt(split[53]);
        int bc = Integer.parseInt(split[54]);
        int bd = Integer.parseInt(split[55]);
        int be = Integer.parseInt(split[56]);
        int bf = Integer.parseInt(split[57]);
        int bg = Integer.parseInt(split[58]);
        int bh = Integer.parseInt(split[59]);
        int bi = Integer.parseInt(split[60]);
        int bj = Integer.parseInt(split[61]);
        int bk = Integer.parseInt(split[62]);
        int bl = Integer.parseInt(split[63]);
        int bm = Integer.parseInt(split[64]);
        int bn = Integer.parseInt(split[65]);
        int bo = Integer.parseInt(split[66]);
        int bp = Integer.parseInt(split[67]);
        int bq = Integer.parseInt(split[68]);
        int br = Integer.parseInt(split[69]);
        int bs = Integer.parseInt(split[70]);
        int bt = Integer.parseInt(split[71]);
        int bu = Integer.parseInt(split[72]);
        int bv = Integer.parseInt(split[73]);
        int bw = Integer.parseInt(split[74]);
        int bx = Integer.parseInt(split[75]);
        int by = Integer.parseInt(split[76]);
        int bz = Integer.parseInt(split[77]);
        int ca = Integer.parseInt(split[78]);
        int cb = Integer.parseInt(split[79]);
        int cc = Integer.parseInt(split[80]);
        int cd = Integer.parseInt(split[81]);
        int ce = Integer.parseInt(split[82]);
        int cf = Integer.parseInt(split[83]);
        int cg = Integer.parseInt(split[84]);
        int ch = Integer.parseInt(split[85]);
        int ci = Integer.parseInt(split[86]);
        int cj = Integer.parseInt(split[87]);
        int ck = Integer.parseInt(split[88]);
        int cl = Integer.parseInt(split[89]);
        int cm = Integer.parseInt(split[90]);
        int cn = Integer.parseInt(split[91]);
        int co = Integer.parseInt(split[92]);
        int cp = Integer.parseInt(split[93]);
        int cq = Integer.parseInt(split[94]);
        int cr = Integer.parseInt(split[95]);
        int cs = Integer.parseInt(split[96]);
        int ct = Integer.parseInt(split[97]);
        int cu = Integer.parseInt(split[98]);
        int cv = Integer.parseInt(split[99]);
        int cw = Integer.parseInt(split[100]);
        int cx = Integer.parseInt(split[101]);
        int cy = Integer.parseInt(split[102]);
        int cz = Integer.parseInt(split[103]);
        int da = Integer.parseInt(split[104]);
        int db = Integer.parseInt(split[105]);
        int dc = Integer.parseInt(split[106]);
        int dd = Integer.parseInt(split[107]);
        int de = Integer.parseInt(split[108]);
        int df = Integer.parseInt(split[109]);
        int dg = Integer.parseInt(split[110]);
        int dh = Integer.parseInt(split[111]);
        int di = Integer.parseInt(split[112]);
        int dj = Integer.parseInt(split[113]);
        int dk = Integer.parseInt(split[114]);
        int dl = Integer.parseInt(split[115]);
        int dm = Integer.parseInt(split[116]);
        int dn = Integer.parseInt(split[117]);
        int do = Integer.parseInt(split[118]);
        int dp = Integer.parseInt(split[119]);
        int dq = Integer.parseInt(split[120]);
        int dr = Integer.parseInt(split[121]);
        int ds = Integer.parseInt(split[122]);
        int dt = Integer.parseInt(split[123]);
        int du = Integer.parseInt(split[124]);
        int dv = Integer.parseInt(split[125]);
        int dw = Integer.parseInt(split[126]);
        int dx = Integer.parseInt(split[127]);
        int dy = Integer.parseInt(split[128]);
        int dz = Integer.parseInt(split[129]);
        int ea = Integer.parseInt(split[130]);
        int eb = Integer.parseInt(split[131]);
        int ec = Integer.parseInt(split[132]);
        int ed = Integer.parseInt(split[133]);
        int ee = Integer.parseInt(split[134]);
        int ef = Integer.parseInt(split[135]);
        int eg = Integer.parseInt(split[136]);
        int eh = Integer.parseInt(split[137]);
        int ei = Integer.parseInt(split[138]);
        int ej = Integer.parseInt(split[139]);
        int ek = Integer.parseInt(split[140]);
        int el = Integer.parseInt(split[141]);
        int em = Integer.parseInt(split[142]);
        int en = Integer.parseInt(split[143]);
        int eo = Integer.parseInt(split[144]);
        int ep = Integer.parseInt(split[145]);
        int eq = Integer.parseInt(split[146]);
        int er = Integer.parseInt(split[147]);
        int es = Integer.parseInt(split[148]);
        int et = Integer.parseInt(split[149]);
        int eu = Integer.parseInt(split[150]);
        int ev = Integer.parseInt(split[151]);
        int ew = Integer.parseInt(split[152]);
        int ex = Integer.parseInt(split[153]);
        int ey = Integer.parseInt(split[154]);
        int ez = Integer.parseInt(split[155]);
        int fa = Integer.parseInt(split[156]);
        int fb = Integer.parseInt(split[157]);
        int fc = Integer.parseInt(split[158]);
        int fd = Integer.parseInt(split[159]);
        int fe = Integer.parseInt(split[160]);
        int ff = Integer.parseInt(split[161]);
        int fg = Integer.parseInt(split[162]);
        int fh = Integer.parseInt(split[163]);
        int fi = Integer.parseInt(split[164]);
        int fj = Integer.parseInt(split[165]);
        int fk = Integer.parseInt(split[166]);
        int fl = Integer.parseInt(split[167]);
        int fm = Integer.parseInt(split[168]);
        int fn = Integer.parseInt(split[169]);
        int fo = Integer.parseInt(split[170]);
        int fp = Integer.parseInt(split[171]);
        int fq = Integer.parseInt(split[172]);
        int fr = Integer.parseInt(split[173]);
        int fs = Integer.parseInt(split[174]);
        int ft = Integer.parseInt(split[175]);
        int fu = Integer.parseInt(split[176]);
        int fv = Integer.parseInt(split[177]);
        int fw = Integer.parseInt(split[178]);
        int fx = Integer.parseInt(split[179]);
        int fy = Integer.parseInt(split[180]);
        int fz = Integer.parseInt(split[181]);
        int ga = Integer.parseInt(split[182]);
        int gb = Integer.parseInt(split[183]);
        int gc = Integer.parseInt(split[184]);
        int gd = Integer.parseInt(split[185]);
        int ge = Integer.parseInt(split[186]);
        int gf = Integer.parseInt(split[187]);
        int gg = Integer.parseInt(split[188]);
        int gh = Integer.parseInt(split[189]);
        int gi = Integer.parseInt(split[190]);
        int gj = Integer.parseInt(split[191]);
        int gk = Integer.parseInt(split[192]);
        int gl = Integer.parseInt(split[193]);
        int gm = Integer.parseInt(split[194]);
        int gn = Integer.parseInt(split[195]);
        int go = Integer.parseInt(split[196]);
        int gp = Integer.parseInt(split[197]);
        int gq = Integer.parseInt(split[198]);
        int gr = Integer.parseInt(split[199]);
        int gs = Integer.parseInt(split[200]);
        int gt = Integer.parseInt(split[201]);
        int gu = Integer.parseInt(split[202]);
        int gv = Integer.parseInt(split[203]);
        int gw = Integer.parseInt(split[204]);
        int gx = Integer.parseInt(split[205]);
        int gy = Integer.parseInt(split[206]);
        int gz = Integer.parseInt(split[207]);
        int ha = Integer.parseInt(split[208]);
        int hb = Integer.parseInt(split[209]);
        int hc = Integer.parseInt(split[210]);
        int hd = Integer.parseInt(split[211]);
        int he = Integer.parseInt(split[212]);
        int hf = Integer.parseInt(split[213]);
        int hg = Integer.parseInt(split[214]);
        int hh = Integer.parseInt(split[215]);
        int hi = Integer.parseInt(split[216]);
        int hj = Integer.parseInt(split[217]);
        int hk = Integer.parseInt(split[218]);
        int hl = Integer.parseInt(split[219]);
        int hm = Integer.parseInt(split[220]);
        int hn = Integer.parseInt(split[221]);
        int ho = Integer.parseInt(split[222]);
        int hp = Integer.parseInt(split[223]);
        int hq = Integer.parseInt(split[224]);
        int hr = Integer.parseInt(split[225]);
        int hs = Integer.parseInt(split[226]);
        int ht = Integer.parseInt(split[227]);
        int hu = Integer.parseInt(split[228]);
        int hv = Integer.parseInt(split[229]);
        int hw = Integer.parseInt(split[230]);
        int hx = Integer.parseInt(split[231]);
        int hy = Integer.parseInt(split[232]);
        int hz = Integer.parseInt(split[233]);
        int ia = Integer.parseInt(split[234]);
        int ib = Integer.parseInt(split[235]);
        int ic = Integer.parseInt(split[236]);
        int id = Integer.parseInt(split[237]);
        int ie = Integer.parseInt(split[238]);
        int if1 = Integer.parseInt(split[239]);
        int ig = Integer.parseInt(split[240]);
        int ih = Integer.parseInt(split[241]);
        int ii = Integer.parseInt(split[242]);
        int ij = Integer.parseInt(split[243]);
        int ik = Integer.parseInt(split[244]);
        int il = Integer.parseInt(split[245]);
        int im = Integer.parseInt(split[246]);
        int in = Integer.parseInt(split[247]);
        int io = Integer.parseInt(split[248]);
        int ip = Integer.parseInt(split[249]);
        int iq = Integer.parseInt(split[250]);
        int ir = Integer.parseInt(split[251]);
        int is = Integer.parseInt(split[252]);
        int it = Integer.parseInt(split[253]);
        int iu = Integer.parseInt(split[254]);
        int iv = Integer.parseInt(split[255]);
        int iw = Integer.parseInt(split[256]);
        int ix = Integer.parseInt(split[257]);
        int iy = Integer.parseInt(split[258]);
        int iz = Integer.parseInt(split[259]);
        int ja = Integer.parseInt(split[260]);
        int jb = Integer.parseInt(split[261]);
        int jc = Integer.parseInt(split[262]);
        int jd = Integer.parseInt(split[263]);
        int je = Integer.parseInt(split[264]);
        int jf = Integer.parseInt(split
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String v = sc.next();
        String[] d = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] a = new String[2 * m + v.length()];
        for (int i = 0; i < m; i++) {
            a[i] = d[f ? 0 : 1];
        }
        for (int i = 0; i < v.length(); i++) {
            a[m + i] = "PRINT " + v.charAt(i);
            if (i < v.length() - 1) {
                a[m + i + 1] = d[f ? 1 : 0];
            }
        }
        for (int i = 0; i < a.length - 1; i++) {
            System.out.println(a[i]);
        }
    }
}
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.
import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = sc.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = sc.nextInt();
        }
        int[] q = new int[n];
        for (int i = 0; i < n; i++) {
            q[i] = sc.nextInt();
        }
        int[] v = new int[n];
        for (int i = 0; i < n; i++) {
            v[i] = sc.nextInt();
        }
        int ans = 0;
        for (int i = 0; i < n + 1; i++) {
            for (int s = 0; s < n; s++) {
                for (int u = 0; u < m; u++) {
                    if (p[u] != (q[s] & li[u][s]) % 2) {
                        break;
                    }
                }
                ans += 2 ^ (v.length);
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[][] b = new int[n][n];
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k < 0) {
                    k += n;
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        int m = 1000000000;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + x * i);
        }
        System.out.println(m);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        Arrays.sort(c);
        int mod = (int)1e9 + 7;
        int b = (int)Math.pow(2, 2 * n - 2) % mod;
        int a = 2 * b % mod;
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_456_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long sum = 0;
        for (long i = 1; i <= n; i++) {
            if (i % 3 == 0 || i % 5 == 0) {
                sum += i;
            }
        }
        System.out.println(sum);
    }
}

import java.util.*;
import java.io.*;

public class atcoder_AGC027_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int X = Integer.parseInt(st.nextToken());
        int[] A = new int[N];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            A[i] = Integer.parseInt(st.nextToken());
        }
        int[] S = new int[N];
        S[0] = A[0];
        for (int i = 1; i < N; i++) {
            S[i] = S[i - 1] + A[i];
        }
        long ans = Long.MAX_VALUE;
        for (int k = 1; k <= N / 2; k++) {
            long E = k * X + 2 * sum(S, N - 2 * k - 1, -k);
            ans = Math.min(ans, E);
        }
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    static long sum(int[] S, int i, int j) {
        long sum = 0;
        for (; i >= 0; i += j) {
            sum += S[i];
        }
        return sum;
    }
}
## 13.

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(n - 1);
    }
}
### 8.7. Explanation

In the first case, there is no way to write 1 as a sum of two or more consecutive positive integers.

In the second case, 2 can be written as 1 + 1.

In the third case, 3 can be written as 1 + 2 or 2 + 1.

### 8.8. Solution
import java.util.Scanner;

public
/**

import java.util.*;
import java.io.*;

public class atcoder_AGC007_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int d = Integer.parseInt(st.nextToken());
        int x = Integer.parseInt(st.nextToken());
        double ret = 0;
        while (N > 0) {
            ret += d + (N - 0.5) * x;
            d = d + (d / N) + (5 * x) / (2 * N);
            x += 2 * x / N;
            N--;
        }
        System.out.println(ret);
    }
}
import java.util.*;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        System.out.println(n % 1000000007);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner sc =
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0
public class codeforces_231_A {
    public static void main(String[] args) {
        int sum = 0;
        for (int i = 1; i <= 100; i++) {
            if (i % 131 == 0) {
                sum += i;
            }
        }
import java.util.*;
import java.io.*;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int w = sc.nextInt();
        sc.nextLine();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String line = sc.nextLine();
            for (int j = 0; j < w; j++) {
                if (line.charAt(j) == '#') {
                    graph[i][j] = 0;
                } else {
                    graph[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        for (int x = 0; x < w - 1; x++) {
            for (int y = 0; y < h; y++) {
                graph[y][x + 1] = Math.min(graph[y][x] + 1, graph[y][x + 1]);
            }
        }
        for (int x = w - 1; x > 0; x--) {
            for (int y = 0; y < h; y++) {
                graph[y][x - 1] = Math.min(graph[y][x] + 1, graph[y][x - 1]);
            }
        }
        for (int y = 0; y < h - 1; y++) {
            for (int x = 0; x < w; x++) {
                graph[y + 1][x] = Math.min(graph[y][x] + 1, graph[y + 1][x]);
            }
        }
        for (int y = h - 1; y > 0; y--) {
            for (int x = 0; x < w; x++) {
                graph[y - 1][x] = Math.min(graph[y][x] + 1, graph[y - 1][x]);
            }
        }
        int max = 0;
        for (int y = 0; y < h; y++) {
            for (int x = 0; x < w; x++) {
                max = Math.max(max, graph[y][x]);
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[m];
        for (int i = 0; i <
import java.util.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        sc.close();

        System.out.printf("%.10f\n", (double) a / b);
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = sc.nextInt();
        }
        int[] e = new int[n];
        for (int i = 0; i < n; i++) {
            e[i] = sc.nextInt();
        }
        int[] f = new int[n];
        for (int i = 0; i < n; i++) {
            f[i] = sc.nextInt();
        }
        int[] g = new int[n];
        for (int i = 0; i < n; i++) {
            g[i] = sc.nextInt();
        }
        int[] h = new int[n];
        for (int i = 0; i < n; i++) {
            h[i] = sc.nextInt();
        }
        int[] i = new int[n];
        for (int j = 0; j < n; j++) {
            i[j] = sc.nextInt();
        }
        int[] j = new int[n];
        for (int k = 0; k < n; k++) {
            j[k] = sc.nextInt();
        }
        int[] k = new int[n];
        for (int l = 0; l < n; l++) {
            k[l] = sc.nextInt();
        }
        int[] l = new int[n];
        for (int m = 0; m < n; m++) {
            l[m] = sc.nextInt();
        }
        int[] m = new int[n];
        for (int o = 0; o < n; o++) {
            m[o] = sc.nextInt();
        }
        int[] o = new int[n];
        for (int p = 0; p < n; p++) {
            o[p] = sc.nextInt();
        }
        int[] p = new int[n];
        for (int q = 0; q < n; q++) {
            p[q] = sc.nextInt();
        }
        int[] q = new int[n];
        for (int r = 0; r < n; r++) {
            q[r] = sc.nextInt();
        }
        int[] r = new int[n];
        for (int s = 0; s < n; s++) {
            r[s] = sc.nextInt();
        }
        int[] s = new int[n];
        for (int t = 0; t < n; t++) {
            s[t] = sc.nextInt();
        }
        int[] t = new int[n];
        for (int u = 0; u < n; u++) {
            t[u] = sc.nextInt();
        }
        int[] u = new int[n];
        for (int v = 0; v < n; v++) {
            u[v] = sc.nextInt();
        }
        int[] v = new int[n];
        for (int w = 0; w < n; w++) {
            v[w] = sc.nextInt();
        }
        int[] w = new int[n];
        for (int x = 0; x < n; x++) {
            w[x] = sc.nextInt();
        }
        int[] x = new int[n];
        for (int y = 0; y < n; y++) {
            x[y] = sc.nextInt();
        }
        int[] y = new int[n];
        for (int z = 0; z < n; z++) {
            y[z] = sc.nextInt();
        }
        int[] z = new int[n];
        for (int aa = 0; aa < n; aa++) {
            z[aa] = sc.nextInt();
        }
        int[] aa = new int[n];
        for (int ab = 0; ab < n; ab++) {
            aa[ab] = sc.nextInt();
        }
        int[] ab = new int[n];
        for (int ac = 0; ac < n; ac++) {
            ab[ac] = sc.nextInt();
        }
        int[] ac = new int[n];
        for (int ad = 0; ad < n; ad++) {
            ac[ad] = sc.nextInt();
        }
        int[] ad = new int[n];
        for (int ae = 0; ae < n; ae++) {
            ad[ae] = sc.nextInt();
        }
        int[] ae = new int[n];
        for (int af = 0; af < n; af++) {
            ae[af] = sc.nextInt();
        }
        int[] af = new int[n];
        for (int ag = 0; ag < n; ag++) {
            af[ag] = sc.nextInt();
        }
        int[] ag = new int[n];
        for (int ah = 0; ah < n; ah++) {
            ag[ah] = sc.nextInt();
        }
        int[] ah = new int[n];
        for (int ai = 0; ai < n; ai++) {
            ah[ai] = sc.nextInt();
        }
        int[] ai = new int[n];
        for (int aj = 0; aj < n; aj++) {
            ai[aj] = sc.nextInt();
        }
        int[] aj = new int[n];
        for (int ak = 0; ak < n; ak++) {
            aj[ak] = sc.nextInt();
        }
        int[] ak = new int[n];
        for (int al = 0; al < n; al++) {
            ak[al] = sc.nextInt();
        }
        int[] al = new int[n];
        for (int am = 0; am < n; am++) {
            al[am] = sc.nextInt();
        }
        int[] am = new int[n];
        for (int an = 0; an < n; an++) {
            am[an] = sc.nextInt();
        }
        int[] an = new int[n];
        for (int ao = 0; ao < n; ao++) {
            an[ao] = sc.nextInt();
        }
        int[] ao = new int[n];
        for (int ap = 0; ap < n; ap++) {
            ao[ap] = sc.nextInt();
        }
        int[] ap = new int[n];
        for (int aq = 0; aq < n; aq++) {
            ap[aq] = sc.nextInt();
        }
        int[] aq = new int[n];
        for (int ar = 0; ar < n; ar++) {
            aq[ar] = sc.nextInt();
        }
        int[] ar = new int[n];
        for (int as = 0; as < n; as++) {
            ar[as] = sc.nextInt();
        }
        int[] as = new int[n];
        for (int at = 0; at < n; at++) {
            as[at] = sc.nextInt();
        }
        int[] at = new int[n];
        for (int au = 0; au < n; au++) {
            at[au] = sc.nextInt();
        }
        int[] au = new int[n];
        for (int av = 0; av < n; av++) {
            au[av] = sc.nextInt();
        }
        int[] av = new int[n];
        for (int aw = 0; aw < n; aw++) {
            av[aw] = sc.nextInt();
        }
        int[] aw = new int[n];
        for (int ax = 0; ax < n; ax++) {
            aw[ax] = sc.nextInt();
        }
        int[] ax = new int[n];
        for (int ay = 0; ay < n; ay++) {
            ax[ay] = sc.nextInt();
        }
        int[] ay = new int[n];
        for (int az = 0; az < n; az++) {
            ay[az] = sc.nextInt();
        }
        int[] az = new int[n];
        for (int ba = 0; ba < n; ba++) {
            az[ba] = sc.nextInt();
        }
        int[] ba = new int[n];
        for (int bb = 0; bb < n; bb++) {
            ba[bb] = sc.nextInt();
        }
        int[] bb = new int[n];
        for (int bc = 0; bc < n; bc++) {
            bb[bc] = sc.nextInt();
        }
        int[] bc = new int[n];
        for (int bd = 0; bd < n; bd++) {
            bc[bd] = sc.nextInt();
        }
        int[] bd = new int[n];
        for (int be = 0; be < n; be++) {
            bd[be] = sc.nextInt();
        }
        int[] be = new int[n];
        for (int bf = 0; bf < n; bf++) {
            be[bf] = sc.nextInt();
        }
        int[] bf = new int[n];
        for (int bg = 0; bg < n; bg++) {
            bf[bg] = sc.nextInt();
        }
        int[] bg = new int[n];
        for (int bh = 0; bh < n; bh++) {
            bg[bh] = sc.nextInt();
        }
        int[] bh = new int[n];
        for (int bi = 0; bi < n; bi++) {
            bh[bi] = sc.nextInt();
        }
        int[] bi = new int[n];
        for (int bj = 0; bj < n; bj++) {
            bi[bj] = sc.nextInt();
        }
        int[] bj = new int[n];
        for (int bk = 0; bk < n; bk++) {
            bj[bk] = sc.nextInt();
        }
        int[] bk = new int[n];
        for (int bl = 0; bl < n; bl++) {
            bk[bl] = sc.nextInt();
        }
        int[] bl = new int[n];
        for (int bm = 0; bm < n; bm++) {
            bl[bm] = sc.nextInt();
        }
        int[] bm = new int[n];
        for (int bn = 0; bn < n; bn++) {
            bm[bn] = sc.nextInt();
        }
        int[] bn = new int[n];
        for (int bo = 0; bo < n; bo++) {
            bn[bo] = sc.nextInt();
        }
        int[] bo = new int[n];
        for (int bp = 0; bp < n; bp++) {
            bo[bp] = sc.nextInt();
        }
        int[] bp = new int[n];
        for (int bq = 0; bq < n; bq++) {
            bp[bq] = sc.nextInt();
        }
        int[] bq = new int[n];
        for (int br = 0; br < n; br++) {
            bq[br] = sc.nextInt();
        }
        int[] br = new int[n];
        for (int bs = 0; bs < n; bs++) {
            br[bs] = sc.nextInt();
        }
        int[] bs = new int[n];
        for (int bt = 0; bt < n; bt++) {
            bs[bt] = sc.nextInt();
        }
        int[] bt = new int[n];
        for (int bu = 0; bu < n; bu++) {
            bt[bu] = sc.nextInt();
        }
        int[] bu = new int[n];
        for (int bv = 0; bv < n; bv++) {
            bu[bv] = sc.nextInt();
        }
        int[] bv = new int[n];
        for (int bw = 0; bw < n; bw++) {
            bv[bw] = sc.nextInt();
        }
        int[] bw = new int[n];
        for (int bx = 0; bx < n; bx++) {
            bw[bx] = sc.nextInt();
        }
        int[] bx = new int[n];
        for (int by = 0; by < n; by++) {
            bx[by] = sc.nextInt();
        }
        int[] by = new int[n];
        for (int bz = 0; bz < n; bz++) {
            by[bz] = sc.nextInt();
        }
        int[] bz = new int[n];
        for (int ca = 0; ca < n; ca++) {
            bz[ca] = sc.nextInt();
        }
        int[] ca = new int[n];
        for (int cb = 0; cb < n; cb++) {
            ca[cb] = sc.nextInt();
        }
        int[] cb = new int[n];
        for (int cc = 0; cc < n; cc++) {
            cb[cc] = sc.nextInt();
        }
        int[] cc = new int[n];
        for (int cd = 0; cd < n; cd++) {
            cc[cd] = sc.nextInt();
        }
        int[] cd = new int[n];
        for (int ce = 0; ce < n; ce++) {
            cd[ce] = sc.nextInt();
        }
        int[] ce = new int[n];
        for (int cf = 0; cf < n; cf++) {
            ce[cf] = sc.nextInt();
        }
        int[] cf = new int[n];
        for (int cg = 0; cg < n; cg++) {
            cf[cg] = sc.nextInt();
        }
        int[] cg = new int[n];
        for (int ch = 0; ch < n; ch++) {
            cg[ch] = sc.nextInt();
        }
        int[] ch = new int[n];
        for (int ci = 0; ci < n; ci++) {
            ch[ci] = sc.nextInt();
        }
        int[] ci = new int[n];
        for (int cj = 0; cj < n; cj++) {
            ci[cj] = sc.nextInt();
        }
        int[] cj = new int[n];
        for (int ck = 0; ck < n; ck++) {
            cj[ck] = sc.nextInt();
        }
        int[] ck = new int[n];
        for (int cl = 0; cl < n; cl++) {
            ck[cl] = sc.nextInt();
        }
        int[] cl = new int[n];
        for (int cm = 0; cm < n; cm++) {
            cl[cm] = sc.nextInt();
        }
        int[] cm = new int[n];
        for (int cn = 0; cn < n; cn++) {
            cm[cn] = sc.nextInt();
        }
        int[] cn = new int[n];
        for (int co = 0; co < n; co++) {
            cn[co] = sc.nextInt();
        }
        int[] co = new int[n];
        for (int cp = 0; cp < n; cp++) {
            co[cp] = sc.nextInt();
        }
        int[] cp = new int[n];
        for (int cq = 0; cq < n; cq++) {
            cp[cq] = sc.nextInt();
        }
        int[] cq = new int[n];
        for (int cr = 0; cr < n; cr++) {
            cq[cr] = sc.nextInt();
        }
        int[] cr = new int[n];
        for (int cs = 0; cs < n; cs++) {
            cr[cs] = sc.nextInt();
        }
        int[] cs = new int[n];
        for (int ct = 0; ct < n; ct++) {
            cs[ct] = sc.nextInt();
        }
        int[] ct = new int[n];
        for (int cu = 0; cu < n; cu++) {
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L;
        long rr = 1000000000000000000L;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot--;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int result = 0;
        for (int b = 0; b < 60; b++) {
            int bs = 0;
            for (int i = 0; i < N; i++) {
                if ((A[i] & (1 << b)) != 0) {
                    bs++;
                }
            }
            result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        System.out.println(sum);
    }
}

class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) {
            return "";
        }
        int start = 0, end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        int L = left, R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        return R - L - 1;
    }
}
import java.util.*;
public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int i=0;i<t;i++){
            int n = sc.nextInt();
            int k = sc.nextInt();
            String s = sc.next();
            n = s.length();
            if(n==1){
                System.out.println(1);
            }
            else{
                int cnt=1;
                int mx=1;
                for(int j=1;j<n;j++){
                    if(s.charAt(j)==s.charAt(j-1)){
                        cnt++;
                    }
                    else{
                        cnt=1;
                    }
                    mx = Math.max(mx,cnt);
                }
                System.out.println(mx);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == 1) {
                count++;
            }
        }
        System.out.println(count);
    }
}
/**
 * Definition for singly-linked list.
 * public class codeforces_55_B {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class codeforces_55_B {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        int carry = 0;
        while(l1 != null || l2 != null) {
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;
            int sum = carry + x + y;
## 20.25

### 問題

[Python 100本ノック](https://www.amazon.co.jp/dp/4873117984)の20章の問題を解く。

### 解答
import java.util.*;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int ans = 0;
            ans += n / 2;
            ans += n / 3;
            ans -= n / 6;
            System.out.println(ans);
        }
    }
}

import java.util.*;
public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.next();
        Map<Character, Integer> c = new HashMap<>();
        for (int i = 0; i < S.length(); i++) {
            char ch = S.charAt(i);
            if (c.containsKey(ch)) {
                c.put(ch, c.get(ch) + 1);
            } else {
                c.put(ch, 1);
            }
        }
        Set<Character> sa = new HashSet<>();
        for (int i = 0; i < S.length(); i++) {
            sa.add(S.charAt(i));
        }
        if (sa.size() != 2) {
            System.out.println("No");
            System.exit(0);
        }
        for (char i : sa) {
            if (c.get(i) != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }
        System.out.println("Yes");
    }
}
import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        if (n == 1) {
            System.out.println(0);
            return;
        }
        List<Long> fac = primeFactorize(n);
        Map<Long, Integer> cnt = new HashMap<>();
        for (long f : fac) {
            cnt.put(f, cnt.getOrDefault(f, 0) + 1);
        }
        for (long f : cnt.keySet()) {
            System.out.println(f + " " + cnt.get(f));
        }
    }

    public static List<Long> primeFactorize(long n) {
        List<Long> res = new ArrayList<>();
        while (n % 2 == 0) {
            res.add(2L);
            n /= 2;
        }
        for (long i = 3; i * i <= n; i += 2) {
            while (n % i == 0) {
                res.add(i);
                n /= i;
            }
        }
        if (n != 1) {
            res.add(n);
        }
        return res;
    }
}
import java.util.*;

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i++) {
            int n = sc.nextInt();
            int count = 0;
            for (int j = 1; j <= n; j++) {
                int sum = 0;
                for (int k = j; k <= n; k++) {
                    sum += k;
                    if (sum == n) {
                        count++;
                        break;
                    } else if (sum > n) {
                        break;
                    }
                }
            }
            System.out.println(count);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            System.out.println(a + b);
        }
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String d = "f";
        String ans = "f";
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            ans = "ly";
        } else {
            ans = "nly";
        }
        while (true) {
            if (n % 400 == 0 || (n % 4 ==
and

class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (s.charAt(i - 1) != '0') {
                dp[i] += dp[i - 1];
            }
            if (i > 1 && s.charAt(i - 2) != '0' && (s.charAt(i - 2) - '0') * 10 + (s.charAt(i - 1) - '0') <= 26) {
                dp[i] += dp[i - 2];
            }
        }
        return dp[n];
    }
}
/**
 * Definition for a binary tree node.
 * public class codeforces_313_B {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                level.add(node.val);
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
            }
            res.add(level);
        }
        return res;
    }
}

## 47. 1000000000

Write a program that prints the number 1000000000.
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>();
        int sum_b = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        for (int i = 0; i < q; i++) {
            int[] ql = new int[3];
            ql[0] = sc.nextInt();
            ql[1] = sc.nextInt();
            ql[2] = sc.nextInt();
            if (ql[0] == 2) {
                if (p1.size() == p2.size()) {
                    System.out.println(-p2.peek() + " " + (sum_p1 - p1.size() * -p2.peek() + p2.size() * -p2.peek() - sum_p2 + sum_b));
                } else {
                    System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_b));
                }
            } else {
                sum_b += ql[2];
                if (p1.size() == 0) {
                    p1.add(ql[1]);
                    sum_p1 += ql[1];
                } else if (p1.peek() <= ql[1]) {
                    p1.add(ql[1]);
                    sum_p1 += ql[1];
                } else {
                    p2.add(-ql[1]);
                    sum_p2 += ql[1];
                }
                if (p1.size() < p2.size()) {
                    int k = p2.poll();
                    p1.add(-k);
                    sum_p2 += k;
                    sum_p1 -= k;
                }
                if (p1.size() - 1 > p2.size()) {
                    int k = p1.poll();
                    p2.add(-k);
                    sum_p1 -= k;
                    sum_p2 += k;
                }
            }
        }
    }
}
and
import java.util.Scanner;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for (
import java.util.*;
import java.io.*;

public class atcoder_AGC005_B {
    static int root(int x, int[] par) {
        return x == par[x] ? x : (par[x] = root(par[x], par));
    }

    static boolean same(int x, int y, int[] par) {
        return root(x, par) == root(y, par);
    }

    static void unite(int x, int y, int[] par, int[] rank, int[] size) {
        x = root(x, par);
        y = root(y, par);
        if (x == y) return;
        if (rank[x] < rank[y]) {
            par[x] = y;
            size[y] += size[x];
        } else {
            par[y] = x;
            size[x] += size[y];
            if (rank[x] == rank[y]) rank[x]++;
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        int n = Integer.parseInt(s[0]);
        int[] a = new int[n];
        s = br.readLine().split(" ");
        for (int i = 0; i < n; i++) a[i] = Integer.parseInt(s[i]);
        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) b[a[i] - 1] = i;
        long c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1, par)];
                unite(k - 1, k, par, rank, size);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1, par)];
                unite(k + 1, k, par, rank, size);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (a[i] > a[j]) {
                    ans++;
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = sc.nextInt();
            y[i] = sc.nextInt();
        }
        solve(N, x, y);
    }

    public static void solve(int N, int[] x, int[] y) {
        int[] indices = new int[N];
        for (int i = 0; i < N; i++) {
            indices[i] = i;
        }
        List<List<Integer>> permutations = new ArrayList<>();
        permute(indices, 0, permutations);
        List<Double> distances = new ArrayList<>();
        for (List<Integer> permutation : permutations) {
            double totalDistance = 0;
            for (int i = 0; i < N - 1; i++) {
                int f = permutation.get(i);
                int t = permutation.get(i + 1);
                double distance = Math.sqrt(Math.pow(x[t] - x[f], 2) + Math.pow(y[t] - y[f], 2));
                totalDistance += distance;
            }
            distances.add(totalDistance);
        }
        double result = distances.stream().mapToDouble(Double::doubleValue).sum() / distances.size();
        System.out.println(result);
    }

    public static void permute(int[] arr, int i, List<List<Integer>> permutations) {
        if (i == arr.length - 1) {
            List<Integer> permutation = new ArrayList<>();
            for (int j = 0; j < arr.length; j++) {
                permutation.add(arr[j]);
            }
            permutations.add(permutation);
        } else {
            for (int j = i; j < arr.length; j++) {
                swap(arr, i, j);
                permute(arr, i + 1, permutations);
                swap(arr, i, j);
            }
        }
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int max = arr[0];
        for (int i = 1; i < n; i++) {
            if (arr[i] > max) {
                max = arr[i];
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            int a = scanner.nextInt();
            int b = scanner
import java.util.*;
public class codeforces_96_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int sum = 0;
        for (int i = 1; i <
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        System.out.println(n / 2 + n / 3 - n / 6);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i++) {
            int N = sc.nextInt();
            int ans = 0;
            for (int j = 5; j <= N; j *= 5) {
                ans += N / j;
            }
            System.out.println(ans);
        }
    }
}
import java.util.Scanner;

public class codeforces_147_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String res = "";
        String temp = "";
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) <= s.charAt(i + 1)) {
                temp += s.charAt(i);
            } else {
                temp += s.charAt(i);
                if (temp.length() > res.length()) {
                    res = temp;
                }
                temp = "";
            }
        }
        temp += s.charAt(s.length() - 1);
        if (temp.length() > res.length()) {
            res = temp;
        }
        System.out.println("Longest substring in alphabetical order is: " + res);
    }
}
import java.util.*;
import java.math.*;
public class atcoder_ABC152_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        BigInteger lcm = BigInteger.ONE;
        for (int i = 0; i < N; i++) {
            lcm = lcm.multiply(BigInteger.valueOf(A[i])).divide(lcm.gcd(BigInteger.valueOf(A[i])));
        }
        BigInteger ans = lcm.multiply(BigInteger.valueOf(N));
        BigInteger MOD = BigInteger.valueOf(1000000007);
        for (int i = 0; i < N; i++) {
            ans = ans.multiply(BigInteger.valueOf(A[i]).modInverse(MOD));
        }
        System.out.println(ans.mod(MOD).intValue());
    }
}
class Solution {
    public int firstUniqChar(String s) {
        int freq [] = new int[26];
        for(int i = 0; i < s.length(); i ++)
            freq [s.charAt(i) - 'a'] ++;
        for(int i = 0; i < s.length();
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i++) {
            int n = sc.nextInt();
            int ans = 1;
            for (int j = 1; j <= n; j++) {
                ans = (ans * j) % 10;
            }
            System.out.println(ans);
        }
    }
}

import java.util.Scanner;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        System.out.println(n % 1
import java.util.*;
import java.io.*;
public class atcoder_ABC133_E {
    static int mod = (int)1e9 + 7;
    static int N, K;
    static ArrayList<Integer>[] graph;
    static int dfs(int from, int to, int f) {
        int caseNum = f;
        int colorNum = K - 1;
        if (f == K) colorNum = K - 2;
        for (int u : graph[from]) {
            if (u == to) continue;
            int pat = dfs(u, from, colorNum);
            if (pat == 0) {
                caseNum = 0;
                break;
            }
            caseNum = (int)((long)caseNum * pat % mod);
            colorNum--;
        }
        return caseNum;
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        K = Integer.parseInt(st.nextToken());
        graph = new ArrayList[N];
        for (int i = 0; i < N; i++) graph[i] = new ArrayList<>();
        for (int i = 0; i < N - 1; i++) {
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken()) - 1;
            int b = Integer.parseInt(st.nextToken()) - 1;
            graph[a].add(b);
            graph[b].add(a);
        }
        int ans = dfs(0, -1, K);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int pya = sc.nextInt();
        sc.nextLine();
        String[] arre = new String[pya];
        for (int i = 0; i < pya; i++) {
            arre[i] = sc.nextLine().toLowerCase();
        }
        String oString = sc.nextLine();
        String lowString = oString.toLowerCase();
        char letter1 = sc.nextLine().charAt(0);
        char letter2 = letter1 == 'a' ? 'b' : 'a';
        int[] valid = new int[oString.length()];
        for (String x : arre) {
            if (lowString.contains(x)) {
                int wat = 0;
                while (true) {
                    int index = lowString.indexOf(x, wat);
                    if (index < 0) {
                        break;
                    }
                    for (int i = index; i < index + x.length(); i++) {
                        valid[i] = 1;
                    }
                    wat = index + 1;
                }
            }
        }
        for (int i = 0; i < oString.length(); i++) {
            char letter = valid[i] == 1 ? letter1 : letter2;
            if (Character.isLowerCase(oString.charAt(i))) {
                System.out.print(letter);
            } else {
                System.out.print(Character.toUpperCase(letter));
            }
        }
        System.out.println();
    }
}
import java.util.*;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long w = sc.nextLong();
        long m = sc.nextLong();
        long k = sc.nextLong();
        long lo = 0;
        long hi = (long)1e18;
        while (hi - lo > 1) {
            long md = (lo + hi) / 2;
            long c = sum(m + md - 1) - sum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long sum(long k) {
        long ret = 0;
        long pw = 10;
        long len = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'a' || s.charAt(i) == 'A') {
                count++;
            }
        }
        System.out.println(count);
    }
}
public class codeforces_608_A {
    public static void main(String[] args) {
        System.out.println(1000000000);
import java.util.Scanner;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int k1 = in.nextInt();
        int k2 = in.nextInt();
        double[] a1 = new double[1001];
        double[] a2 = new double[1001];
        for (int i = 0; i < k1; i++) {
            int n = in.nextInt();
            double a = in.nextDouble();
            a1[n] = a;
        }
        for (int i = 0; i < k2; i++) {
            int n = in.nextInt();
            double a = in.nextDouble();
            a2[n] = a;
        }
        int k = 0;
        double[] a = new double[1001];
        for (int i = 0; i < 1001; i++) {
            a[i] = a1[i] + a2[i];
            if (a[i] != 0) {
                k++;
            }
        }
        System.out.print(k);
        for (int i = 1000; i >= 0; i--) {
            if (a[i] != 0) {
                System.out.printf(" %d %.1f", i, a[i]);
            }
        }
    }
}
import java.util.*;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        double[] arr = new double[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextDouble();
        }
        Arrays.sort(arr);
        int o = 2 * n - arr.length;
        double arr_sum = 0;
        for (int i = 0; i < arr.length; i++) {
            arr_sum += arr[i];
        }
        int res = Integer.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            if (i + o >= n) {
                res = Math.min(res, Math.abs(i - arr_sum));
            }
        }
        System.out.printf("%.3f", res);
    }
}
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long N = sc.nextLong();
        long ans = N / 2 + N / 3 - N / 6;
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        for (int i = 0; i < n; i++) {
            cake[i] = sc.nextLine();
            for (int j = 0; j < n; j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i1 = chocCount; i1 > chocCount - 2; i1--) {
                    nfat *= i1;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i1 = chocCount; i1 > chocCount - 2; i1--) {
                    nfat *= i1;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class codeforces_459_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String given = sc.nextLine();
        String[] l1 = given.split(" ");
        int[] l2 = new int[4];
        for (int i = 0; i < 4; i++) {
            l2[i] = Integer.parseInt(l1[i]);
        }
        int x1 = l2[0];
        int y1 = l2[1];
        int x2 = l2[2];
        int y2 = l2[3];
        int denominator = x2 - x1;
        int numerator = y2 - y1;
        if (denominator != 0) {
            double quotient = (double) numerator / denominator;
            if (numerator == 0) {
                int d = (int) Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                int x4 = x1;
                int x3 = x2;
                int y3 = y2 + d;
                int y4 = y1 + d;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else if (denominator == 0) {
                int y4 = y2;
                int y3 = y1;
                int d = (int) Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                int x4 = x1 + d;
                int x3 = x2 + d;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else if (quotient == 1) {
                int x4 = x2;
                int x3 = x1;
                int y4 = y1;
                int y3 = y2;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else if (quotient == -1) {
                int x4 = x1;
                int x3 = x2;
                int y4 = y2;
                int y3 = y1;
                System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
            } else {
                System.out.println("-1");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String longest = "";
        String current = "";
        for (int i = 0; i < s.length(); i++) {
            if (i == 0 || s.charAt(i) >= s.charAt(i - 1)) {
                current += s.charAt(i);
            } else {
                if (current.length() > longest.length()) {
                    longest = current;
                }
                current = "" + s.charAt(i);
            }
        }
        if (current.length() > longest.length()) {
            longest = current;
        }
        System.out.println("Longest substring in alphabetical order is: " + longest);
    }
}
class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
        int ans = 0;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i; j < arr.length; j++) {
                if ((j - i + 1) % 2 == 1) {
                    int sum = 0;
                    for (int k = i; k <= j; k++) {
                        sum += arr[k];
                    }
                    ans += sum;
                }
            }
        }
        return ans;
    }
}

import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        int count = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == 'a' || str.charAt(i) == 'A') {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.*;
public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 1; i <= T; i++) {
            int A = sc.nextInt();
            int B = sc.nextInt();
            System.out.println("Case #" + i + ": " + A + " - " + B + " = " + (A - B));
        }
import java.util.Scanner;

public class atcoder_ABC123_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[5];
        for (int i = 0; i < 5; i++) {
            A[i] = sc.nextInt();
        }
        System.out.println(Math.ceil(N / (double) Math.min(A[0], A[1], A[2], A[3], A[4])) + 4);
    }
}
class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int n = s.length();
        if (n * k == 0) return 0;
        // sliding window left and right pointers
        int left = 0;
        int right = 0;
        // hashmap character -> its rightmost position 
        // in the sliding window
        Map<Character, Integer> hashmap = new HashMap<Character, Integer>();

        int max_len = 1;

        while (right < n) {
            // slidewindow contains less than k characters
            if (hashmap.size() <= k) {
                char c = s.charAt(right);
                hashmap.put(c, right);
                right++;
            }
            // slidewindow contains more than k characters
            if (hashmap.size() > k) {
                // delete the leftmost character
                int leftmost = n;
                for (int i : hashmap.values()) {
                    leftmost = Math.min(leftmost, i);
                }
                char c = s.charAt(leftmost);
                hashmap.remove(c);
                left = leftmost + 1;
            }

            max_len = Math.max(max_len, right - left);
        }
        return max_len;
    }
}
import java.
import java.util.*;
import java.io.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int q = Integer.parseInt(st.nextToken());
        String s = br.readLine();
        int[] cumsum = new int[n];
        for (int i = 0; i < n - 1; i++) {
            cumsum[i + 1] = cumsum[i] + (s.substring(i, i + 2).equals("AC") ? 1 : 0);
        }
        for (int i = 0; i < q; i++) {
            st = new StringTokenizer(br.readLine());
            int l = Integer.parseInt(st.nextToken());
            int r = Integer.parseInt(st.nextToken());
            System.out.println(cumsum[r - 1] - cumsum[l - 1]);
        }
    }
}
public class codeforces_673_A {
    public static void main(String[] args) {
        double balance = 999999;
        double annualInterestRate = 0.18;

        double monthlyInterestRate = annualInterestRate / 12;

        double lowerBound = balance / 12;
        double upperBound = (balance * (1 + monthlyInterestRate) ** 12) / 12;

        while (true) {
            double monthlyPayment = (lowerBound + upperBound) / 2;
            double balanceCopy = balance;
            for (int i = 0; i < 12; i++) {
                balanceCopy = balanceCopy - monthlyPayment;
                balanceCopy = balanceCopy + balanceCopy * monthlyInterestRate;
            }
            if (balanceCopy <= 0) {
                if (Math.abs(balanceCopy) < 0.01) {
                    break;
                }
                upperBound = monthlyPayment;
            } else {
                lowerBound = monthlyPayment;
            }
        }

        System.out.println("Lowest Payment: " + String.format("%.2f", monthlyPayment));
    }
}
import java.util.*;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }
        int a = 1;
        int b = Arrays.stream(lis).max().getAsInt();
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (check(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean check(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= i / mid;
        }
        return k >= 0;
    }
}
## 26. 10000000035
import java.util.*;
public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int max = a[0];
        for (int i = 1; i < n; i++) {
            if (a[i] > max) {
                max = a[i];
            }
        }
        System.out.println(max);
    }
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'a' || s.charAt(i) == 'A') {
                count++;
            }
        }
        System.out.println(count);
import java.util.*;
import java.lang.*;
import java.io.*;

class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int[] p = new int[n];
		int[] q = new int[n];
		for(int i=0;i<n;i++)
		{
			p[i] = sc.nextInt();
		}
		for(int i=0;i<n;i++)
		{
			q[i] = sc.nextInt();
		}
		int pn = 0;
		int qn = 0;
		int[] orig = new int[n];
		for(int i=0;i<n;i++)
		{
			orig[i] = i+1;
		}
		int[] temp = new int[n];
		int[] temp1 = new int[n];
		int[] temp2 = new int[n];
		int[] temp3 = new int[n];
		int[] temp4 = new int[n];
		int[] temp5 = new int[n];
		int[] temp6 = new int[n];
		int[] temp7 = new int[n];
		int[] temp8 = new int[n];
		int[] temp9 = new int[n];
		int[] temp10 = new int[n];
		int[] temp11 = new int[n];
		int[] temp12 = new int[n];
		int[] temp13 = new int[n];
		int[] temp14 = new int[n];
		int[] temp15 = new int[n];
		int[] temp16 = new int[n];
		int[] temp17 = new int[n];
		int[] temp18 = new int[n];
		int[] temp19 = new int[n];
		int[] temp20 = new int[n];
		int[] temp21 = new int[n];
		int[] temp22 = new int[n];
		int[] temp23 = new int[n];
		int[] temp24 = new int[n];
		int[] temp25 = new int[n];
		int[] temp26 = new int[n];
		int[] temp27 = new int[n];
		int[] temp28 = new int[n];
		int[] temp29 = new int[n];
		int[] temp30 = new int[n];
		int[] temp31 = new int[n];
		int[] temp32 = new int[n];
		int[] temp33 = new int[n];
		int[] temp34 = new int[n];
		int[] temp35 = new int[n];
		int[] temp36 = new int[n];
		int[] temp37 = new int[n];
		int[] temp38 = new int[n];
		int[] temp39 = new int[n];
		int[] temp40 = new int[n];
		int[] temp41 = new int[n];
		int[] temp42 = new int[n];
		int[] temp43 = new int[n];
		int[] temp44 = new int[n];
		int[] temp45 = new int[n];
		int[] temp46 = new int[n];
		int[] temp47 = new int[n];
		int[] temp48 = new int[n];
		int[] temp49 = new int[n];
		int[] temp50 = new int[n];
		int[] temp51 = new int[n];
		int[] temp52 = new int[n];
		int[] temp53 = new int[n];
		int[] temp54 = new int[n];
		int[] temp55 = new int[n];
		int[] temp56 = new int[n];
		int[] temp57 = new int[n];
		int[] temp58 = new int[n];
		int[] temp59 = new int[n];
		int[] temp60 = new int[n];
		int[] temp61 = new int[n];
		int[] temp62 = new int[n];
		int[] temp63 = new int[n];
		int[] temp64 = new int[n];
		int[] temp65 = new int[n];
		int[] temp66 = new int[n];
		int[] temp67 = new int[n];
		int[] temp68 = new int[n];
		int[] temp69 = new int[n];
		int[] temp70 = new int[n];
		int[] temp71 = new int[n];
		int[] temp72 = new int[n];
		int[] temp73 = new int[n];
		int[] temp74 = new int[n];
		int[] temp75 = new int[n];
		int[] temp76 = new int[n];
		int[] temp77 = new int[n];
		int[] temp78 = new int[n];
		int[] temp79 = new int[n];
		int[] temp80 = new int[n];
		int[] temp81 = new int[n];
		int[] temp82 = new int[n];
		int[] temp83 = new int[n];
		int[] temp84 = new int[n];
		int[] temp85 = new int[n];
		int[] temp86 = new int[n];
		int[] temp87 = new int[n];
		int[] temp88 = new int[n];
		int[] temp89 = new int[n];
		int[] temp90 = new int[n];
		int[] temp91 = new int[n];
		int[] temp92 = new int[n];
		int[] temp93 = new int[n];
		int[] temp94 = new int[n];
		int[] temp95 = new int[n];
		int[] temp96 = new int[n];
		int[] temp97 = new int[n];
		int[] temp98 = new int[n];
		int[] temp99 = new int[n];
		int[] temp100 = new int[n];
		int[] temp101 = new int[n];
		int[] temp102 = new int[n];
		int[] temp103 = new int[n];
		int[] temp104 = new int[n];
		int[] temp105 = new int[n];
		int[] temp106 = new int[n];
		int[] temp107 = new int[n];
		int[] temp108 = new int[n];
		int[] temp109 = new int[n];
		int[] temp110 = new int[n];
		int[] temp111 = new int[n];
		int[] temp112 = new int[n];
		int[] temp113 = new int[n];
		int[] temp114 = new int[n];
		int[] temp115 = new int[n];
		int[] temp116 = new int[n];
		int[] temp117 = new int[n];
		int[] temp118 = new int[n];
		int[] temp119 = new int[n];
		int[] temp120 = new int[n];
		int[] temp121 = new int[n];
		int[] temp122 = new int[n];
		int[] temp123 = new int[n];
		int[] temp124 = new int[n];
		int[] temp125 = new int[n];
		int[] temp126 = new int[n];
		int[] temp127 = new int[n];
		int[] temp128 = new int[n];
		int[] temp129 = new int[n];
		int[] temp130 = new int[n];
		int[] temp131 = new int[n];
		int[] temp132 = new int[n];
		int[] temp133 = new int[n];
		int[] temp134 = new int[n];
		int[] temp135 = new int[n];
		int[] temp136 = new int[n];
		int[] temp137 = new int[n];
		int[] temp138 = new int[n];
		int[] temp139 = new int[n];
		int[] temp140 = new int[n];
		int[] temp141 = new int[n];
		int[] temp142 = new int[n];
		int[] temp143 = new int[n];
		int[] temp144 = new int[n];
		int[] temp145 = new int[n];
		int[] temp146 = new int[n];
		int[] temp147 = new int[n];
		int[] temp148 = new int[n];
		int[] temp149 = new int[n];
		int[] temp150 = new int[n];
		int[] temp151 = new int[n];
		int[] temp152 = new int[n];
		int[] temp153 = new int[n];
		int[] temp154 = new int[n];
		int[] temp155 = new int[n];
		int[] temp156 = new int[n];
		int[] temp157 = new int[n];
		int[] temp158 = new int[n];
		int[] temp159 = new int[n];
		int[] temp160 = new int[n];
		int[] temp161 = new int[n];
		int[] temp162 = new int[n];
		int[] temp163 = new int[n];
		int[] temp164 = new int[n];
		int[] temp165 = new int[n];
		int[] temp166 = new int[n];
		int[] temp167 = new int[n];
		int[] temp168 = new int[n];
		int[] temp169 = new int[n];
		int[] temp170 = new int[n];
		int[] temp171 = new int[n];
		int[] temp172 = new int[n];
		int[] temp173 = new int[n];
		int[] temp174 = new int[n];
		int[] temp175 = new int[n];
		int[] temp176 = new int[n];
		int[] temp177 = new int[n];
		int[] temp178 = new int[n];
		int[] temp179 = new int[n];
		int[] temp180 = new int[n];
		int[] temp181 = new int[n];
		int[] temp182 = new int[n];
		int[] temp183 = new int[n];
		int[] temp184 = new int[n];
		int[] temp185 = new int[n];
		int[] temp186 = new int[n];
		int[] temp187 = new int[n];
		int[] temp188 = new int[n];
		int[] temp189 = new int[n];
		int[] temp190 = new int[n];
		int[] temp191 = new int[n];
		int[] temp192 = new int[n];
		int[] temp193 = new int[n];
		int[] temp194 = new int[n];
		int[] temp195 = new int[n];
		int[] temp196 = new int[n];
		int[] temp197 = new int[n];
		int[] temp198 = new int[n];
		int[] temp199 = new int[n];
		int[] temp200 = new int[n];
		int[] temp201 = new int[n];
		int[] temp202 = new int[n];
		int[] temp203 = new int[n];
		int[] temp204 = new int[n];
		int[] temp205 = new int[n];
		int[] temp206 = new int[n];
		int[] temp207 = new int[n];
		int[] temp208 = new int[n];
		int[] temp209 = new int[n];
		int[] temp210 = new int[n];
		int[] temp211 = new int[n];
		int[] temp212 = new int[n];
		int[] temp213 = new int[n];
		int[] temp214 = new int[n];
		int[] temp215 = new int[n];
		int[] temp216 = new int[n];
		int[] temp217 = new int[n];
		int[] temp218 = new int[n];
		int[] temp219 = new int[n];
		int[] temp220 = new int[n];
		int[] temp221 = new int[n];
		int[] temp222 = new int[n];
		int[] temp223 = new int[n];
		int[] temp224 = new int[n];
		int[] temp225 = new int[n];
		int[] temp226 = new int[n];
		int[] temp227 = new int[n];
		int[] temp228 = new int[n];
		int[] temp229 = new int[n];
		int[] temp230 = new int[n];
		int[] temp231 = new int[n];
		int[] temp232 = new int[n];
		int[] temp233 = new int[n];
		int[] temp234 = new int[n];
		int[] temp235 = new int[n];
		int[] temp236 = new int[n];
		int[] temp237 = new int[n];
		int[] temp238 = new int[n];
		int[] temp239 = new int[n];
		int[] temp240 = new int[n];
		int[] temp241 = new int[n];
		int[] temp242 = new int[n];
		int[] temp243 = new int[n];
		int[] temp244 = new int[n];
		int[] temp245 = new int[n];
		int[] temp246 = new int[n];
		int[] temp247 = new int[n];
		int[] temp248 = new int[n];
		int[] temp249 = new int[n];
		int[] temp250 = new int[n];
		int[] temp251 = new int[n];
		int[] temp252 = new int[n];
		int[] temp253 = new int[n];
		int[] temp254 = new int[n];
		int[] temp255 = new int[n];
		int[] temp256 = new int[n];
		int[] temp257 = new int[n];
		int[] temp258 = new int[n];
		int[] temp259 = new int[n];
		int[] temp260 = new int[n];
		int[] temp261 = new int[n];
		int[] temp262 = new int[n];
		int[] temp263 = new int[n];
		int[] temp264 = new int[n];
		int[] temp265 = new int[n];
		int[] temp266 = new int[n];
		int[] temp267 = new int[n];
		int[] temp268 = new int[n];
		int[] temp269 = new int[n];
		int[] temp270 = new int[n];
		int[] temp27
import java.util.*;
import java.io.*;

public class atcoder_ABC145_E {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int T = Integer.parseInt(st.nextToken());
        int[][] time_value = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            st = new StringTokenizer(br.readLine());
            time_value[i][0] = Integer.parseInt(st.nextToken());
            time_value[i][1] = Integer.parseInt(st.nextToken());
        }
        Arrays.sort(time_value, (a, b) -> b[1] - a[1]);
        int[][] dp = new int[N + 1][T];
        for (int t = 0; t < T; t++) {
            dp[0][t] = 0;
        }
        for (int n = 1; n <= N; n++) {
            dp[n][0] = 0;
            for (int t = 1; t < T; t++) {
                if (time_value[n][0] > t) {
                    dp[n][t] = dp[n - 1][t];
                } else {
                    dp[n][t] = Math.max(dp[n - 1][t], time_value[n][1] + dp[n - 1][t - time_value[n][0]]);
                }
            }
        }
        int val_acum = time_value[N][1];
        int t = T - 1;
        int max_val = val_acum + dp[N - 1][t];
        for (int n = N - 1; n > 0; n--) {
            val_acum += time_value[n][1];
            t -= time_value[n + 1][0];
            if (t < 0) {
                break;
            } else {
                max_val = Math.max(max_val, val_acum + dp[n - 1][t]);
            }
        }
        System.out.println(max_val);
    }
}
import java.util.*;
public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == 'a' || s.charAt(i) == 'A') {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int d = a[1] - a[0];
        for (int i = 2; i < n; i++) {
            if (a[i] - a[i - 1] != d) {
                System.out.println("Impossible");
                return;
            }
        }
        System.out.println("Possible");
    }
}
import java.util.*;
public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = sc.nextInt();
        }
        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int p = 0;
        int m = 0;
        int x = 0;
        int y = N - 1;
        int lastx = N;
        int lasty = N;
        for (int i = 0; i < N; i++) {
            if (lst[i] == 0) {
                K--;
            }
            if (lst[i] > 0) {
                lst_p[p] = lst[i];
                p++;
            } else if (lst[i] < 0) {
                lst_m[y] = lst[i];
                y--;
            }
        }
        int ans = 1000000000;
        for (int j = 0; j <= K; j++) {
            if (j > lastx || K - j > lasty) {
                continue;
            }
            if (j == 0) {
                p = 0;
            } else {
                p = lst_p[j - 1];
            }
            if (K - j == 0) {
                m = 0;
            } else {
                m = lst_m[lasty - (K - j)];
            }
            ans = Math.min(ans, 2 * p + Math.abs(m));
            ans = Math.min(ans, p + 2 * Math.abs(m));
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for (int i = 0; i < T; i++) {
            int N = sc.nextInt();
            int ans = 0;
            for (int j = 1; j <= N; j++) {
                if (N % j == 0 && (N / j - j + 1) % 2 == 0) {
                    ans++;
                }
            }
            System.out.println(ans);
        }
    }
}
## 21.

Write a program to find the number of elements divisible by 29 in an array.
import java.util.Scanner;

public class atcoder_ARC062_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int num_g = 0, num_p = 0;
        int score = 0;
        for (int i = 0; i < s.length(); i++) {
            char x = s.charAt(i);
            if (x == 'g') {
                if (num_g - num_p > 0) {
                    score += 1;
                    num_p += 1;
                } else {
                    score = score;
                    num_g += 1;
                }
            } else if (x == 'p') {
                if (num_g - num_p > 0) {
                    score = score;
                    num_p += 1;
                } else {
                    score -= 1;
                    num_g += 1;
                }
            }
        }
        System.out.println(score);
    }
}
import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        System.out.println(aaa(N, "0"));
    }

    public static int aaa(int N, String n) {
        if (Integer.parseInt(n) > N) {
            return 0;
        }
        int ans = 1;
        if (n.contains("7") && n.contains("5") && n.contains("3")) {
            ans = 0;
        }
        for (int i = 0; i < 3; i++) {
            ans += aaa(N, n + "753".charAt(i));
        }
        return ans;
    }
}
import java.util.*;
import java.io.*;
public class atcoder_AGC002_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] balls = new int[N][2];
        for (int i = 0; i < N; i++) {
            balls[i][0] = 1;
            balls[i][1] = 0;
        }
        balls[0][0] = 0;
        balls[0][1] = 1;
        for (int i = 0; i < M; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            int w_x = balls[x - 1][0];
            int r_x = balls[x - 1][1];
            int w_y = balls[y - 1][0];
            int r_y = balls[y - 1][1];
            if (w_x >= 1 && r_x >= 1) {
                balls[x - 1][0] -= 1;
                balls[y - 1][1] += 1;
            } else if (w_x == 0) {
                balls[x - 1][1] -= 1;
                balls[y - 1][1] += 1;
            } else {
                balls[x - 1][0] -= 1;
                balls[y - 1][0] += 1;
            }
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (balls[i][1] == 1) {
                ans += 1;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System

import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                if (A[i] == A[j]) {
                    ans++;
                }
            }
        }
        System.out.
import java.util.*;
import java.io.*;
public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = sc.nextInt();
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = Math.signum(a[i]);
                max_index = i;
            }
        }
        if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println((i + 1) + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println((i + 1) + " " + i);
            }
        }
    }
}
import java.util.*;
public class atcoder_ABC124_C {
    public static void main(String[] args) {
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int b = sc.nextInt();
        Queue<Task> remaining = new LinkedList<>();
        boolean running = false;
        int finish_time = 0;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            int time = sc.nextInt();
            int duration = sc.nextInt();
            Task task = new Task(time, duration, i);
            result[i] = 0;
            if (task.time > finish_time && remaining.isEmpty()) {
                running = true;
                finish_time = task.time + task.duration;
                result[i] = finish_time;
            } else {
                if (task.time >= finish_time && !remaining.isEmpty()) {
                    finish_time = run_task(remaining, finish_time);
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[i] = -1;
                }
            }
        }
        while (!remaining.isEmpty()) {
            finish_time = run_task(remaining, finish_time);
        }
        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }

    public static int run_task(Queue<Task> remaining, int finish_time) {
        Task task_to_run = remaining.remove();
        finish_time = Math.max(finish_time, task_to_run.time) + task_to_run.duration;
        result[task_to_run.index] = finish_time;
        return finish_time;
    }
}
import java.util.*;
public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt
import java.util.*;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int ans = 0;
        if (a[0] > x) {
            System.out.println(0);
            return;
        }
        for (int i = 0; i < n; i++) {
            if (a[i] > x) {
                x = 0;
                break;
            }
            x -= a[i];
            ans++;
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt
1
2
3
s = input()
count = 0
for i in range(len(s) - 2):
    if s[i:i+3] == 'bob':
        count += 1
print('Number of times bob occurs is:', count)
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long l = 1;
        long r = n;
        while (l < r) {
            long mid = l + (r - l) / 2;
            long idxcnt = mid * (mid + 1) / 2;
            if (idxcnt < n) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l -= 1;
        long idxcnt = l * (l + 1) / 2;
        System.out.println((int) (n - idxcnt));
    }
}
import java.util.Scanner;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        for (int i = 0; i < n; i++) {
            x += a[i];
        }
        for (int i = 0; i < n; i++) {
            y += b[i];
        }
        for (int i = 0; i < n; i++) {
            z += c[i];
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
Java code:
import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = in.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = in.nextInt();
        }
        int[] d = new int[n];
        for (int i = 0; i < n; i++) {
            d[i] = in.nextInt();
        }
        int[] e = new int[n];
        for (int i = 0; i < n; i++) {
            e[i] = in.nextInt();
        }
        int[] f = new int[n];
        for (int i = 0; i < n; i++) {
            f[i] = in.nextInt();
        }
        int[] g = new int[n];
        for (int i = 0; i < n; i++) {
            g[i] = in.nextInt();
        }
        int[] h = new int[n];
        for (int i = 0; i < n; i++) {
            h[i] = in.nextInt();
        }
        int[] i = new int[n];
        for (int j = 0; j < n; j++) {
            i[j] = in.nextInt();
        }
        int[] l = new int[n];
        for (int j = 0; j < n; j++) {
            l[j] = in.nextInt();
        }
        int[] m = new int[n];
        for (int j = 0; j < n; j++) {
            m[j] = in.nextInt();
        }
        int[] o = new int[n];
        for (int j = 0; j < n; j++) {
            o[j] = in.nextInt();
        }
        int[] p = new int[n];
        for (int j = 0; j < n; j++) {
            p[j] = in.nextInt();
        }
        int[] q = new int[n];
        for (int j = 0; j < n; j++) {
            q[j] = in.nextInt();
        }
        int[] r = new int[n];
        for (int j = 0; j < n; j++) {
            r[j] = in.nextInt();
        }
        int[] s = new int[n];
        for (int j = 0; j < n; j++) {
            s[j] = in.nextInt();
        }
        int[] t = new int[n];
        for (int j = 0; j < n; j++) {
            t[j] = in.nextInt();
        }
        int[] u = new int[n];
        for (int j = 0; j < n; j++) {
            u[j] = in.nextInt();
        }
        int[] v = new int[n];
        for (int j = 0; j < n; j++) {
            v[j] = in.nextInt();
        }
        int[] w = new int[n];
        for (int j = 0; j < n; j++) {
            w[j] = in.nextInt();
        }
        int[] x = new int[n];
        for (int j = 0; j < n; j++) {
            x[j] = in.nextInt();
        }
        int[] y = new int[n];
        for (int j = 0; j < n; j++) {
            y[j] = in.nextInt();
        }
        int[] z = new int[n];
        for (int j = 0; j < n; j++) {
            z[j] = in.nextInt();
        }
        int[] aa = new int[n];
        for (int j = 0; j < n; j++) {
            aa[j] = in.nextInt();
        }
        int[] bb = new int[n];
        for (int j = 0; j < n; j++) {
            bb[j] = in.nextInt();
        }
        int[] cc = new int[n];
        for (int j = 0; j < n; j++) {
            cc[j] = in.nextInt();
        }
        int[] dd = new int[n];
        for (int j = 0; j < n; j++) {
            dd[j] = in.nextInt();
        }
        int[] ee = new int[n];
        for (int j = 0; j < n; j++) {
            ee[j] = in.nextInt();
        }
        int[] ff = new int[n];
        for (int j = 0; j < n; j++) {
            ff[j] = in.nextInt();
        }
        int[] gg = new int[n];
        for (int j = 0; j < n; j++) {
            gg[j] = in.nextInt();
        }
        int[] hh = new int[n];
        for (int j = 0; j < n; j++) {
            hh[j] = in.nextInt();
        }
        int[] ii = new int[n];
        for (int j = 0; j < n; j++) {
            ii[j] = in.nextInt();
        }
        int[] jj = new int[n];
        for (int j = 0; j < n; j++) {
            jj[j] = in.nextInt();
        }
        int[] kk = new int[n];
        for (int j = 0; j < n; j++) {
            kk[j] = in.nextInt();
        }
        int[] ll = new int[n];
        for (int j = 0; j < n; j++) {
            ll[j] = in.nextInt();
        }
        int[] mm = new int[n];
        for (int j = 0; j < n; j++) {
            mm[j] = in.nextInt();
        }
        int[] nn = new int[n];
        for (int j = 0; j < n; j++) {
            nn[j] = in.nextInt();
        }
        int[] oo = new int[n];
        for (int j = 0; j < n; j++) {
            oo[j] = in.nextInt();
        }
        int[] pp = new int[n];
        for (int j = 0; j < n; j++) {
            pp[j] = in.nextInt();
        }
        int[] qq = new int[n];
        for (int j = 0; j < n; j++) {
            qq[j] = in.nextInt();
        }
        int[] rr = new int[n];
        for (int j = 0; j < n; j++) {
            rr[j] = in.nextInt();
        }
        int[] ss = new int[n];
        for (int j = 0; j < n; j++) {
            ss[j] = in.nextInt();
        }
        int[] tt = new int[n];
        for (int j = 0; j < n; j++) {
            tt[j] = in.nextInt();
        }
        int[] uu = new int[n];
        for (int j = 0; j < n; j++) {
            uu[j] = in.nextInt();
        }
        int[] vv = new int[n];
        for (int j = 0; j < n; j++) {
            vv[j] = in.nextInt();
        }
        int[] ww = new int[n];
        for (int j = 0; j < n; j++) {
            ww[j] = in.nextInt();
        }
        int[] xx = new int[n];
        for (int j = 0; j < n; j++) {
            xx[j] = in.nextInt();
        }
        int[] yy = new int[n];
        for (int j = 0; j < n; j++) {
            yy[j] = in.nextInt();
        }
        int[] zz = new int[n];
        for (int j = 0; j < n; j++) {
            zz[j] = in.nextInt();
        }
        int[] aaa = new int[n];
        for (int j = 0; j < n; j++) {
            aaa[j] = in.nextInt();
        }
        int[] bbb = new int[n];
        for (int j = 0; j < n; j++) {
            bbb[j] = in.nextInt();
        }
        int[] ccc = new int[n];
        for (int j = 0; j < n; j++) {
            ccc[j] = in.nextInt();
        }
        int[] ddd = new int[n];
        for (int j = 0; j < n; j++) {
            ddd[j] = in.nextInt();
        }
        int[] eee = new int[n];
        for (int j = 0; j < n; j++) {
            eee[j] = in.nextInt();
        }
        int[] fff = new int[n];
        for (int j = 0; j < n; j++) {
            fff[j] = in.nextInt();
        }
        int[] ggg = new int[n];
        for (int j = 0; j < n; j++) {
            ggg[j] = in.nextInt();
        }
        int[] hhh = new int[n];
        for (int j = 0; j < n; j++) {
            hhh[j] = in.nextInt();
        }
        int[] iii = new int[n];
        for (int j = 0; j < n; j++) {
            iii[j] = in.nextInt();
        }
        int[] jjj = new int[n];
        for (int j = 0; j < n; j++) {
            jjj[j] = in.nextInt();
        }
        int[] kkk = new int[n];
        for (int j = 0; j < n; j++) {
            kkk[j] = in.nextInt();
        }
        int[] lll = new int[n];
        for (int j = 0; j < n; j++) {
            lll[j] = in.nextInt();
        }
        int[] mmm = new int[n];
        for (int j = 0; j < n; j++) {
            mmm[j] = in.nextInt();
        }
        int[] nnn = new int[n];
        for (int j = 0; j < n; j++) {
            nnn[j] = in.nextInt();
        }
        int[] ooo = new int[n];
        for (int j = 0; j < n; j++) {
            ooo[j] = in.nextInt();
        }
        int[] ppp = new int[n];
        for (int j = 0; j < n; j++) {
            ppp[j] = in.nextInt();
        }
        int[] qqq = new int[n];
        for (int j = 0; j < n; j++) {
            qqq[j] = in.nextInt();
        }
        int[] rrr = new int[n];
        for (int j = 0; j < n; j++) {
            rrr[j] = in.nextInt();
        }
        int[] sss = new int[n];
        for (int j = 0; j < n; j++) {
            sss[j] = in.nextInt();
        }
        int[] ttt = new int[n];
        for (int j = 0; j < n; j++) {
            ttt[j] = in.nextInt();
        }
        int[] uuu = new int[n];
        for (int j = 0; j < n; j++) {
            uuu[j] = in.nextInt();
        }
        int[] vvv = new int[n];
        for (int j = 0; j < n; j++) {
            vvv[j] = in.nextInt();
        }
        int[] www = new int[n];
        for (int j = 0; j < n; j++) {
            www[j] = in.nextInt();
        }
        int[] xxx = new int[n];
        for (int j = 0; j < n; j++) {
            xxx[j] = in.nextInt();
        }
        int[] yyy = new int[n];
        for (int j = 0; j < n; j++) {
            yyy[j] = in.nextInt();
        }
        int[] zzz = new int[n];
        for (int j = 0; j < n; j++) {
            zzz[j] = in.nextInt();
        }
        int[] aaaa = new int[n];
        for (int j = 0; j < n; j++) {
            aaaa[j] = in.nextInt();
        }
        int[] bbbb = new int[n];
        for (int j = 0; j < n; j++) {
            bbbb[j] = in.nextInt();
        }
        int[] cccc = new int[n];
        for (int j = 0; j < n; j++) {
            cccc[j] = in.nextInt();
        }
        int[] dddd = new int[n];
        for (int j = 0; j < n; j++) {
            dddd[j] = in.nextInt();
        }
        int[] eeee = new int[n];
        for (int j = 0; j < n; j++) {
            eeee[j] = in.nextInt();
        }
        int[] ffff = new int[n];
        for (int j = 0; j < n; j++) {
            ffff[j] = in.nextInt();
        }
        int[] gggg = new int[n];
        for (int j = 0; j < n; j++) {
            gggg[j] = in.nextInt();
        }
        int[] hhhh = new int[n];
        for (int j = 0; j < n; j++) {
            hhhh[j] = in.nextInt();
        }
        int[] iiii = new int[n];
        for (int j = 0; j < n; j++) {
            iiii[j] = in.nextInt();
        }
        int[] jjjj = new int[n];
        for (int j = 0; j < n; j++) {
            jjjj[j] = in.nextInt();
        }
        int[] kkkk = new int[n];
        for (int j = 0; j < n; j++) {
            kkkk[j] = in.nextInt();
        }
        int[] llll = new int[n];
        for (int j = 0; j < n; j++) {
            llll[j] = in.nextInt();
        }
        int[] mmmm = new int[n];
        for (int j = 0; j < n; j++) {
            mmmm[j] = in.nextInt();
        }
        int[] nnnn = new int[n];
        for (int j = 0; j < n; j++) {
            nnnn[j] = in.nextInt();
        }
        int[] oooo = new int[n];
        for (int j = 0; j < n; j++) {
            oooo[j] = in.nextInt();
        }
        int[] pppp = new int[n];
        for (int j = 0; j < n; j++) {
            pppp[j] = in.nextInt();
        }
        int[] qqqq = new int[n];
        for (int j = 0; j < n; j++) {
            qqqq[j] = in.nextInt();
        }
        int[] rrrr = new int[n];
        for (int j = 0; j < n; j++) {
            rrrr[j] = in.nextInt();
        }
        int[] ssss = new int[n];
        for (int j = 0; j < n; j++) {
            ssss[j] = in.nextInt();
        }
        int[]100%|██████████| 250/250 [00:00<00:00, 12237.85it/s]

+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model bigcode/starcoder2-15b --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC028_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC106_C.java' returned non-zero exit status 1.
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC162_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_581_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC118_C.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_146_A.java' returned non-zero exit status 1.
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_518_B.java' returned non-zero exit status 1.
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC112_A.java' returned non-zero exit status 1.
Filename:  codeforces_265_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_265_B.java' returned non-zero exit status 1.
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_665_A.java' returned non-zero exit status 1.
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC150_D.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC149_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC120_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC120_C.java' returned non-zero exit status 1.
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC148_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC148_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_268_A.java' returned non-zero exit status 1.
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_306_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_306_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_567_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC024_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC024_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC143_D.java' returned non-zero exit status 1.
Filename:  codeforces_30_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_30_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC142_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC142_A.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_302_A.java' returned non-zero exit status 1.
Filename:  codeforces_58_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_58_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_408_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_31_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_546_A.java' returned non-zero exit status 1.
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_500_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC178_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC164_A.java' returned non-zero exit status 1.
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Filename:  codeforces_203_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_203_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_D.java
Filename:  atcoder_ABC155_E.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC123_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC154_A.java' returned non-zero exit status 1.
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Filename:  codeforces_450_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_450_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC145_B.java' returned non-zero exit status 1.
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC136_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_624_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_669_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC135_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC135_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 1.
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/starcoder2-15b/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 25
Success: ['codeforces_190_A.java', 'codeforces_282_B.java', 'codeforces_534_B.java', 'codeforces_581_A.java', 'atcoder_ABC111_C.java', 'codeforces_354_A.java', 'atcoder_ABC132_A.java', 'atcoder_ABC118_C.java', 'atcoder_AGC014_D.java', 'atcoder_ABC174_E.java', 'atcoder_ABC122_C.java', 'codeforces_287_A.java', 'codeforces_56_B.java', 'atcoder_ABC165_C.java', 'atcoder_AGC027_A.java', 'codeforces_342_B.java', 'atcoder_ABC171_B.java', 'atcoder_ABC151_A.java', 'codeforces_340_A.java', 'codeforces_629_A.java', 'codeforces_25_A.java', 'codeforces_445_A.java', 'codeforces_583_B.java', 'atcoder_ABC158_B.java', 'codeforces_607_A.java']
Fail: ['atcoder_ABC123_D.java', 'atcoder_ABC170_A.java', 'atcoder_ARC102_C.java', 'atcoder_AGC017_A.java', 'codeforces_92_A.java', 'atcoder_AGC003_C.java', 'atcoder_AGC035_B.java', 'codeforces_32_B.java', 'atcoder_AGC033_A.java', 'atcoder_ABC169_E.java', 'atcoder_ABC152_C.java', 'atcoder_ABC126_D.java', 'codeforces_222_A.java', 'atcoder_AGC013_A.java', 'codeforces_95_A.java', 'atcoder_ABC112_C.java', 'codeforces_327_A.java', 'codeforces_456_A.java', 'codeforces_37_A.java', 'codeforces_23_B.java', 'codeforces_622_A.java', 'atcoder_AGC046_B.java', 'atcoder_ABC166_C.java', 'codeforces_59_A.java', 'codeforces_267_A.java', 'atcoder_AGC007_C.java', 'codeforces_459_A.java', 'codeforces_672_A.java', 'codeforces_387_B.java', 'atcoder_ABC042_A.java', 'atcoder_AGC006_B.java', 'atcoder_AGC019_A.java', 'codeforces_356_A.java', 'atcoder_AGC021_B.java', 'codeforces_106_B.java', 'atcoder_ABC150_E.java', 'atcoder_AGC010_B.java', 'atcoder_ARC062_B.java', 'codeforces_373_B.java', 'atcoder_AGC027_B.java', 'atcoder_ABC155_D.java', 'codeforces_617_B.java', 'atcoder_AGC005_B.java', 'atcoder_ABC089_C.java', 'codeforces_242_A.java', 'codeforces_216_B.java', 'atcoder_ABC107_C.java', 'atcoder_ABC143_A.java', 'codeforces_621_A.java', 'atcoder_ABC169_D.java', 'atcoder_AGC038_A.java', 'atcoder_ABC147_D.java', 'atcoder_AGC046_A.java', 'atcoder_ABC133_E.java', 'atcoder_ABC140_F.java', 'atcoder_ABC145_E.java', 'codeforces_609_B.java', 'atcoder_ABC172_D.java', 'codeforces_296_A.java', 'codeforces_189_A.java', 'codeforces_412_A.java', 'atcoder_AGC004_B.java', 'atcoder_ABC134_E.java', 'codeforces_612_B.java', 'codeforces_67_B.java', 'atcoder_AGC002_B.java', 'atcoder_ABC152_E.java', 'atcoder_ABC125_B.java', 'codeforces_147_A.java', 'atcoder_AGC006_A.java', 'codeforces_459_B.java', 'codeforces_651_A.java', 'atcoder_ABC171_E.java', 'codeforces_544_B.java', 'atcoder_ABC125_C.java', 'atcoder_ABC128_C.java', 'codeforces_276_B.java', 'codeforces_632_B.java', 'atcoder_ABC146_D.java', 'atcoder_AGC012_A.java', 'codeforces_242_B.java', 'atcoder_ABC140_D.java', 'codeforces_400_B.java', 'codeforces_596_B.java', 'atcoder_AGC029_C.java', 'atcoder_ABC139_B.java', 'atcoder_AGC004_D.java', 'atcoder_ABC129_E.java', 'atcoder_ABC132_F.java', 'atcoder_ABC104_C.java', 'codeforces_171_A.java', 'atcoder_ABC145_C.java', 'atcoder_AGC034_B.java', 'atcoder_ABC168_C.java', 'atcoder_ABC169_C.java', 'codeforces_148_B.java', 'atcoder_AGC002_A.java', 'codeforces_598_A.java', 'atcoder_ABC164_D.java', 'atcoder_ABC168_B.java', 'codeforces_154_A.java', 'atcoder_ABC155_E.java', 'codeforces_404_A.java', 'codeforces_514_A.java', 'codeforces_519_B.java', 'codeforces_70_B.java', 'codeforces_387_A.java', 'codeforces_474_B.java', 'atcoder_ABC110_C.java', 'codeforces_8_B.java', 'codeforces_334_A.java', 'atcoder_ABC122_D.java', 'codeforces_110_B.java', 'atcoder_ABC127_F.java', 'codeforces_469_A.java', 'codeforces_61_B.java', 'codeforces_55_A.java', 'codeforces_134_A.java', 'codeforces_299_A.java', 'codeforces_108_B.java', 'atcoder_ABC114_C.java', 'codeforces_400_A.java', 'codeforces_421_A.java', 'atcoder_ABC158_A.java', 'atcoder_ABC178_A.java', 'atcoder_ABC109_B.java', 'codeforces_79_A.java', 'atcoder_ABC178_B.java', 'codeforces_86_A.java', 'atcoder_ABC137_D.java', 'atcoder_ABC142_A.java', 'codeforces_567_A.java', 'atcoder_ABC136_B.java', 'codeforces_579_A.java', 'codeforces_58_B.java', 'atcoder_ABC149_C.java', 'codeforces_629_B.java', 'atcoder_AGC024_B.java', 'codeforces_131_B.java', 'atcoder_ABC112_A.java', 'atcoder_ABC119_B.java', 'atcoder_ABC174_C.java', 'codeforces_669_A.java', 'atcoder_ABC167_C.java', 'codeforces_546_A.java', 'codeforces_55_B.java', 'codeforces_644_B.java', 'codeforces_518_B.java', 'codeforces_49_A.java', 'atcoder_ABC120_C.java', 'atcoder_ABC150_D.java', 'atcoder_ABC149_B.java', 'atcoder_ABC070_B.java', 'atcoder_ABC127_B.java', 'codeforces_653_A.java', 'atcoder_AGC011_C.java', 'atcoder_ABC154_A.java', 'codeforces_333_B.java', 'atcoder_ABC143_D.java', 'atcoder_ABC123_C.java', 'atcoder_ABC148_F.java', 'atcoder_AGC025_A.java', 'atcoder_ABC051_A.java', 'atcoder_ABC108_B.java', 'codeforces_274_A.java', 'atcoder_ABC124_C.java', 'atcoder_ABC125_A.java', 'codeforces_369_B.java', 'codeforces_265_B.java', 'atcoder_ABC107_D.java', 'atcoder_ABC153_A.java', 'codeforces_682_B.java', 'codeforces_673_A.java', 'atcoder_ARC086_B.java', 'codeforces_665_A.java', 'atcoder_AGC033_B.java', 'codeforces_637_A.java', 'atcoder_ABC164_A.java', 'codeforces_272_B.java', 'codeforces_462_B.java', 'atcoder_ABC145_B.java', 'codeforces_31_A.java', 'codeforces_231_A.java', 'codeforces_7_B.java', 'atcoder_AGC028_A.java', 'atcoder_AGC043_B.java', 'atcoder_ABC106_C.java', 'atcoder_ABC167_D.java', 'atcoder_ABC126_E.java', 'codeforces_581_B.java', 'codeforces_11_A.java', 'codeforces_608_A.java', 'atcoder_ABC124_A.java', 'codeforces_306_A.java', 'atcoder_ABC142_C.java', 'codeforces_302_A.java', 'codeforces_350_B.java', 'codeforces_569_A.java', 'codeforces_500_A.java', 'codeforces_268_A.java', 'codeforces_678_B.java', 'atcoder_ABC150_C.java', 'codeforces_99_A.java', 'codeforces_408_B.java', 'codeforces_146_A.java', 'codeforces_30_A.java', 'atcoder_AGC037_E.java', 'atcoder_ABC162_D.java', 'atcoder_ABC135_D.java', 'codeforces_96_B.java', 'atcoder_ABC133_B.java', 'codeforces_678_A.java', 'codeforces_450_A.java', 'codeforces_624_B.java', 'atcoder_ABC105_D.java', 'codeforces_203_B.java', 'codeforces_351_A.java', 'atcoder_ABC123_B.java', 'atcoder_AGC028_B.java', 'codeforces_705_B.java', 'codeforces_379_A.java', 'codeforces_203_A.java', 'codeforces_397_B.java', 'atcoder_ABC043_B.java', 'codeforces_313_B.java', 'atcoder_ABC123_D.java']
