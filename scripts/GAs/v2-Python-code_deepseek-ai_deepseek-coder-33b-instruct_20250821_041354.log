+ model=deepseek-ai/deepseek-coder-33b-instruct
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-33b-instruct --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 06:50:37 [__init__.py:241] Automatically detected platform cuda.
found 225 inputs
INFO 08-21 06:50:38 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-33b-instruct', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 06:50:43 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 06:50:43 [__init__.py:1750] Using max model len 4096
INFO 08-21 06:50:44 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3739373)[0;0m INFO 08-21 06:50:44 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3739373)[0;0m INFO 08-21 06:50:44 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-33b-instruct', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-33b-instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-33b-instruct, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3739373)[0;0m WARNING 08-21 06:50:44 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3739373)[0;0m INFO 08-21 06:50:44 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_a5970e03'), local_subscribe_addr='ipc:///tmp/0cd13439-573a-4c4e-a461-4e8bde87b218', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:46 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_4684ef53'), local_subscribe_addr='ipc:///tmp/5349ecd5-5c2c-4d36-a59e-11f0569f84e9', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:46 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_f2831bbc'), local_subscribe_addr='ipc:///tmp/7627dc29-3cce-4d2b-b744-562b0c4529f9', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:47 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:47 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:47 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:47 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:47 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:47 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:47 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_32d52f82'), local_subscribe_addr='ipc:///tmp/ad73949b-3984-408d-a777-e599bcff355c', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:47 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:47 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m WARNING 08-21 06:50:47 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m WARNING 08-21 06:50:47 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:47 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-33b-instruct...
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:47 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-33b-instruct...
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:48 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:48 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:48 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:48 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:50:48 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:50:48 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards:  14% Completed | 1/7 [00:01<00:08,  1.46s/it]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards:  29% Completed | 2/7 [00:03<00:07,  1.59s/it]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards:  43% Completed | 3/7 [00:04<00:05,  1.41s/it]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards:  57% Completed | 4/7 [00:05<00:04,  1.48s/it]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards:  71% Completed | 5/7 [00:07<00:03,  1.55s/it]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards:  86% Completed | 6/7 [00:09<00:01,  1.63s/it]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:11<00:00,  1.66s/it]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:11<00:00,  1.59s/it]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m 
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:00 [default_loader.py:262] Loading weights took 11.39 seconds
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:00 [default_loader.py:262] Loading weights took 11.62 seconds
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:00 [gpu_model_runner.py:2007] Model loading took 31.2363 GiB and 12.306030 seconds
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:00 [gpu_model_runner.py:2007] Model loading took 31.2363 GiB and 12.305978 seconds
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:12 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/14e7a0db7a/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:12 [backends.py:559] Dynamo bytecode transform time: 11.95 s
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:12 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/14e7a0db7a/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:12 [backends.py:559] Dynamo bytecode transform time: 11.96 s
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:23 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 9.573 s
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:23 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 9.748 s
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:32 [monitor.py:34] torch.compile takes 11.96 s in total
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:32 [monitor.py:34] torch.compile takes 11.95 s in total
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:34 [gpu_worker.py:276] Available KV cache memory: 36.79 GiB
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:34 [gpu_worker.py:276] Available KV cache memory: 36.79 GiB
[1;36m(EngineCore_0 pid=3739373)[0;0m INFO 08-21 06:51:34 [kv_cache_utils.py:849] GPU KV cache size: 311,072 tokens
[1;36m(EngineCore_0 pid=3739373)[0;0m INFO 08-21 06:51:34 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 75.95x
[1;36m(EngineCore_0 pid=3739373)[0;0m INFO 08-21 06:51:34 [kv_cache_utils.py:849] GPU KV cache size: 311,072 tokens
[1;36m(EngineCore_0 pid=3739373)[0;0m INFO 08-21 06:51:34 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 75.95x
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 14.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:04, 14.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:04, 14.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:04, 14.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:04, 14.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 14.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 14.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:01<00:03, 14.16it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:03, 14.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:03, 14.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:03, 14.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 14.68it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 14.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 14.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:02<00:02, 14.32it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:02<00:02, 14.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:02, 14.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:02, 14.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:02, 13.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 13.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 14.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:03<00:01, 13.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:03<00:01, 14.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:03<00:01, 13.80it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:03<00:01, 13.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:03<00:01, 13.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 13.72it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 13.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:04<00:00, 13.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:04<00:00, 13.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:04<00:00, 13.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:04<00:00, 13.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:04<00:00, 13.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:04<00:00, 13.96it/s]
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:39 [custom_all_reduce.py:196] Registering 8375 cuda graph addresses
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:39 [custom_all_reduce.py:196] Registering 8375 cuda graph addresses
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP1 pid=3739381)[0;0m INFO 08-21 06:51:39 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 1.09 GiB
[1;36m(EngineCore_0 pid=3739373)[0;0m [1;36m(VllmWorker TP0 pid=3739379)[0;0m INFO 08-21 06:51:39 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 1.09 GiB
[1;36m(EngineCore_0 pid=3739373)[0;0m INFO 08-21 06:51:39 [core.py:214] init engine (profile, create kv cache, warmup model) took 38.81 seconds
INFO 08-21 06:51:40 [llm.py:298] Supported_tasks: ['generate']
Translating 225 files...
  0%|          | 0/225 [00:00<?, ?it/s]100%|██████████| 225/225 [00:00<00:00, 10477.38it/s]
Adding requests:   0%|          | 0/225 [00:00<?, ?it/s]Adding requests:  31%|███       | 70/225 [00:00<00:00, 698.56it/s]Adding requests:  66%|██████▌   | 148/225 [00:00<00:00, 741.62it/s]Adding requests: 100%|██████████| 225/225 [00:00<00:00, 751.63it/s]
Processed prompts:   0%|          | 0/225 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/225 [00:11<43:00, 11.52s/it, est. speed input: 48.34 toks/s, output: 16.32 toks/s]Processed prompts:   1%|          | 2/225 [00:12<19:13,  5.17s/it, est. speed input: 106.60 toks/s, output: 32.24 toks/s]Processed prompts:   1%|▏         | 3/225 [00:13<13:08,  3.55s/it, est. speed input: 132.97 toks/s, output: 47.42 toks/s]Processed prompts:   3%|▎         | 6/225 [00:14<05:09,  1.41s/it, est. speed input: 191.97 toks/s, output: 99.56 toks/s]Processed prompts:   4%|▎         | 8/225 [00:15<03:18,  1.09it/s, est. speed input: 251.46 toks/s, output: 137.23 toks/s]Processed prompts:   5%|▍         | 11/225 [00:15<02:04,  1.71it/s, est. speed input: 299.13 toks/s, output: 191.08 toks/s]Processed prompts:   6%|▌         | 13/225 [00:15<01:35,  2.23it/s, est. speed input: 343.18 toks/s, output: 228.26 toks/s]Processed prompts:   7%|▋         | 15/225 [00:16<01:13,  2.86it/s, est. speed input: 374.07 toks/s, output: 265.38 toks/s]Processed prompts:   8%|▊         | 17/225 [00:16<01:00,  3.44it/s, est. speed input: 420.12 toks/s, output: 301.43 toks/s]Processed prompts:   8%|▊         | 19/225 [00:16<00:46,  4.42it/s, est. speed input: 462.52 toks/s, output: 340.15 toks/s]Processed prompts:   9%|▉         | 21/225 [00:16<00:36,  5.53it/s, est. speed input: 542.17 toks/s, output: 378.63 toks/s]Processed prompts:  11%|█         | 24/225 [00:16<00:27,  7.28it/s, est. speed input: 605.68 toks/s, output: 436.68 toks/s]Processed prompts:  12%|█▏        | 27/225 [00:17<00:20,  9.45it/s, est. speed input: 666.96 toks/s, output: 496.22 toks/s]Processed prompts:  14%|█▍        | 31/225 [00:17<00:15, 12.34it/s, est. speed input: 814.82 toks/s, output: 575.64 toks/s]Processed prompts:  15%|█▌        | 34/225 [00:17<00:13, 14.65it/s, est. speed input: 908.97 toks/s, output: 635.60 toks/s]Processed prompts:  17%|█▋        | 39/225 [00:17<00:10, 18.35it/s, est. speed input: 1089.74 toks/s, output: 735.71 toks/s]Processed prompts:  19%|█▊        | 42/225 [00:17<00:11, 15.81it/s, est. speed input: 1207.38 toks/s, output: 789.53 toks/s]Processed prompts:  20%|█▉        | 44/225 [00:17<00:11, 15.40it/s, est. speed input: 1238.76 toks/s, output: 826.69 toks/s]Processed prompts:  20%|██        | 46/225 [00:18<00:12, 14.36it/s, est. speed input: 1284.07 toks/s, output: 862.69 toks/s]Processed prompts:  21%|██▏       | 48/225 [00:18<00:13, 13.58it/s, est. speed input: 1308.94 toks/s, output: 898.38 toks/s]Processed prompts:  22%|██▏       | 50/225 [00:18<00:13, 13.02it/s, est. speed input: 1337.94 toks/s, output: 934.17 toks/s]Processed prompts:  24%|██▎       | 53/225 [00:18<00:10, 15.84it/s, est. speed input: 1392.88 toks/s, output: 994.56 toks/s]Processed prompts:  24%|██▍       | 55/225 [00:18<00:11, 14.52it/s, est. speed input: 1424.38 toks/s, output: 1029.91 toks/s]Processed prompts:  26%|██▌       | 59/225 [00:18<00:09, 18.28it/s, est. speed input: 1585.94 toks/s, output: 1111.32 toks/s]Processed prompts:  28%|██▊       | 63/225 [00:19<00:07, 21.19it/s, est. speed input: 1665.01 toks/s, output: 1192.79 toks/s]Processed prompts:  29%|██▉       | 66/225 [00:19<00:08, 19.15it/s, est. speed input: 1704.71 toks/s, output: 1248.61 toks/s]Processed prompts:  34%|███▍      | 76/225 [00:19<00:04, 35.19it/s, est. speed input: 1889.40 toks/s, output: 1467.93 toks/s]Processed prompts:  36%|███▌      | 81/225 [00:19<00:04, 33.96it/s, est. speed input: 1990.04 toks/s, output: 1569.26 toks/s]Processed prompts:  38%|███▊      | 85/225 [00:19<00:04, 29.66it/s, est. speed input: 2079.56 toks/s, output: 1645.91 toks/s]Processed prompts:  40%|███▉      | 89/225 [00:19<00:04, 29.84it/s, est. speed input: 2174.15 toks/s, output: 1727.47 toks/s]Processed prompts:  41%|████▏     | 93/225 [00:19<00:04, 30.13it/s, est. speed input: 2242.00 toks/s, output: 1809.01 toks/s]Processed prompts:  44%|████▎     | 98/225 [00:20<00:03, 34.45it/s, est. speed input: 2398.87 toks/s, output: 1916.07 toks/s]Processed prompts:  45%|████▌     | 102/225 [00:20<00:03, 33.83it/s, est. speed input: 2502.72 toks/s, output: 1997.89 toks/s]Processed prompts:  47%|████▋     | 106/225 [00:20<00:03, 31.65it/s, est. speed input: 2576.27 toks/s, output: 2077.21 toks/s]Processed prompts:  49%|████▉     | 110/225 [00:20<00:03, 30.35it/s, est. speed input: 2647.31 toks/s, output: 2156.52 toks/s]Processed prompts:  51%|█████     | 114/225 [00:20<00:05, 20.11it/s, est. speed input: 2783.36 toks/s, output: 2214.60 toks/s]Processed prompts:  52%|█████▏    | 117/225 [00:21<00:05, 19.54it/s, est. speed input: 2822.80 toks/s, output: 2268.84 toks/s]Processed prompts:  53%|█████▎    | 120/225 [00:21<00:05, 18.43it/s, est. speed input: 2868.65 toks/s, output: 2320.55 toks/s]Processed prompts:  56%|█████▌    | 125/225 [00:21<00:04, 23.38it/s, est. speed input: 2978.36 toks/s, output: 2429.08 toks/s]Processed prompts:  57%|█████▋    | 129/225 [00:21<00:03, 25.84it/s, est. speed input: 3073.75 toks/s, output: 2513.01 toks/s]Processed prompts:  60%|██████    | 135/225 [00:21<00:03, 26.00it/s, est. speed input: 3188.05 toks/s, output: 2632.26 toks/s]Processed prompts:  62%|██████▏   | 139/225 [00:21<00:03, 28.00it/s, est. speed input: 3268.82 toks/s, output: 2717.34 toks/s]Processed prompts:  64%|██████▎   | 143/225 [00:21<00:02, 28.44it/s, est. speed input: 3331.22 toks/s, output: 2799.73 toks/s]Processed prompts:  65%|██████▌   | 147/225 [00:22<00:02, 28.85it/s, est. speed input: 3417.26 toks/s, output: 2882.55 toks/s]Processed prompts:  67%|██████▋   | 151/225 [00:22<00:03, 22.13it/s, est. speed input: 3466.90 toks/s, output: 2945.65 toks/s]Processed prompts:  68%|██████▊   | 154/225 [00:22<00:04, 16.61it/s, est. speed input: 3503.72 toks/s, output: 2979.33 toks/s]Processed prompts:  70%|██████▉   | 157/225 [00:22<00:03, 18.48it/s, est. speed input: 3544.99 toks/s, output: 3041.96 toks/s]Processed prompts:  71%|███████   | 160/225 [00:23<00:04, 13.88it/s, est. speed input: 3561.85 toks/s, output: 3071.24 toks/s]Processed prompts:  72%|███████▏  | 163/225 [00:23<00:04, 14.40it/s, est. speed input: 3603.89 toks/s, output: 3124.52 toks/s]Processed prompts:  73%|███████▎  | 165/225 [00:23<00:05, 11.47it/s, est. speed input: 3616.83 toks/s, output: 3136.34 toks/s]Processed prompts:  74%|███████▍  | 167/225 [00:23<00:05, 10.73it/s, est. speed input: 3622.15 toks/s, output: 3159.67 toks/s]Processed prompts:  75%|███████▌  | 169/225 [00:24<00:04, 11.68it/s, est. speed input: 3642.28 toks/s, output: 3196.49 toks/s]Processed prompts:  76%|███████▌  | 171/225 [00:24<00:04, 13.07it/s, est. speed input: 3670.60 toks/s, output: 3236.47 toks/s]Processed prompts:  77%|███████▋  | 174/225 [00:24<00:03, 15.71it/s, est. speed input: 3732.23 toks/s, output: 3300.82 toks/s]Processed prompts:  79%|███████▊  | 177/225 [00:24<00:03, 14.91it/s, est. speed input: 3760.50 toks/s, output: 3352.11 toks/s]Processed prompts:  80%|███████▉  | 179/225 [00:24<00:03, 13.77it/s, est. speed input: 3774.42 toks/s, output: 3382.08 toks/s]Processed prompts:  80%|████████  | 181/225 [00:24<00:03, 13.44it/s, est. speed input: 3820.95 toks/s, output: 3415.24 toks/s]Processed prompts:  82%|████████▏ | 185/225 [00:25<00:02, 14.71it/s, est. speed input: 3885.77 toks/s, output: 3492.82 toks/s]Processed prompts:  83%|████████▎ | 187/225 [00:25<00:02, 15.17it/s, est. speed input: 3912.22 toks/s, output: 3531.88 toks/s]Processed prompts:  84%|████████▍ | 189/225 [00:25<00:02, 14.51it/s, est. speed input: 3965.58 toks/s, output: 3565.89 toks/s]Processed prompts:  85%|████████▌ | 192/225 [00:25<00:01, 16.51it/s, est. speed input: 4024.65 toks/s, output: 3631.01 toks/s]Processed prompts:  87%|████████▋ | 195/225 [00:25<00:01, 17.47it/s, est. speed input: 4092.91 toks/s, output: 3693.74 toks/s]Processed prompts:  88%|████████▊ | 197/225 [00:25<00:02, 10.78it/s, est. speed input: 4085.15 toks/s, output: 3692.16 toks/s]Processed prompts:  88%|████████▊ | 199/225 [00:26<00:02, 11.06it/s, est. speed input: 4095.77 toks/s, output: 3726.13 toks/s]Processed prompts:  89%|████████▉ | 201/225 [00:26<00:02,  9.69it/s, est. speed input: 4111.68 toks/s, output: 3745.04 toks/s]Processed prompts:  90%|█████████ | 203/225 [00:26<00:02,  8.91it/s, est. speed input: 4111.40 toks/s, output: 3765.33 toks/s]Processed prompts:  92%|█████████▏| 206/225 [00:26<00:01, 11.32it/s, est. speed input: 4163.40 toks/s, output: 3833.23 toks/s]Processed prompts:  92%|█████████▏| 208/225 [00:27<00:02,  8.28it/s, est. speed input: 4162.56 toks/s, output: 3833.28 toks/s]Processed prompts:  93%|█████████▎| 210/225 [00:27<00:02,  6.51it/s, est. speed input: 4135.46 toks/s, output: 3826.74 toks/s]Processed prompts:  94%|█████████▍| 211/225 [00:27<00:02,  6.46it/s, est. speed input: 4130.35 toks/s, output: 3835.23 toks/s]Processed prompts:  95%|█████████▍| 213/225 [00:28<00:02,  4.09it/s, est. speed input: 4051.10 toks/s, output: 3779.48 toks/s]Processed prompts:  95%|█████████▌| 214/225 [00:29<00:03,  2.78it/s, est. speed input: 3953.93 toks/s, output: 3701.54 toks/s]Processed prompts:  96%|█████████▌| 216/225 [00:29<00:02,  3.54it/s, est. speed input: 3985.78 toks/s, output: 3731.77 toks/s]Processed prompts:  96%|█████████▋| 217/225 [00:33<00:07,  1.09it/s, est. speed input: 3601.11 toks/s, output: 3377.75 toks/s]Processed prompts:  97%|█████████▋| 218/225 [00:33<00:05,  1.27it/s, est. speed input: 3574.38 toks/s, output: 3379.27 toks/s]Processed prompts:  97%|█████████▋| 219/225 [01:13<01:00, 10.15s/it, est. speed input: 1647.08 toks/s, output: 1597.35 toks/s]Processed prompts:  98%|█████████▊| 220/225 [01:14<00:39,  7.89s/it, est. speed input: 1625.63 toks/s, output: 1617.79 toks/s]Processed prompts:  98%|█████████▊| 221/225 [01:15<00:23,  5.82s/it, est. speed input: 1629.40 toks/s, output: 1662.65 toks/s]Processed prompts:  99%|█████████▊| 222/225 [01:17<00:14,  4.77s/it, est. speed input: 1592.01 toks/s, output: 1667.56 toks/s]Processed prompts:  99%|█████████▉| 223/225 [01:18<00:07,  3.80s/it, est. speed input: 1568.16 toks/s, output: 1686.90 toks/s]Processed prompts: 100%|██████████| 225/225 [01:18<00:00,  2.23s/it, est. speed input: 1564.11 toks/s, output: 1771.40 toks/s]Processed prompts: 100%|██████████| 225/225 [01:18<00:00,  2.23s/it, est. speed input: 1564.11 toks/s, output: 1771.40 toks/s]Processed prompts: 100%|██████████| 225/225 [01:18<00:00,  2.85it/s, est. speed input: 1564.11 toks/s, output: 1771.40 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-33b-instruct --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/225 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    static class Graph {
        int V;
        LinkedList<Integer>[] adjListArray;

        Graph(int V) {
            this.V = V;
            adjListArray = new LinkedList[V];
            for (int i = 0; i < V; i++) {
                adjListArray[i] = new LinkedList<>();
            }
        }
    }

    static void addEdge(Graph graph, int src, int dest) {
        graph.adjListArray[src].addFirst(dest);
        graph.adjListArray[dest].addFirst(src);
    }

    static void BFS(Graph graph, int src) {
        boolean visited[] = new boolean[graph.V];
        LinkedList<Integer> queue = new LinkedList<>();
        visited[src] = true;
        queue.add(src);
        while (queue.size() != 0) {
            src = queue.poll();
            System.out.print(src + " ");
            Iterator<Integer> i = graph.adjListArray[src].listIterator();
            while (i.hasNext()) {
                int n = i.next();
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

    public static void main(String args[]) {
        int V = 5;
        Graph graph = new Graph(V);
        addEdge(graph, 0, 1);
        addEdge(graph, 0, 4);
        addEdge(graph, 1, 2);
        addEdge(graph, 1, 3);
        addEdge(graph, 1, 4);
        addEdge(graph, 2, 3);
        addEdge(graph, 3, 4);
        BFS(graph, 0);
    }
}
import java.util.*;
import java.text.*;
import java.net.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.nio.charset.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import org.apache.commons.math3.stat.inference.*;
import org.apache.commons.math3.stat.descriptive.*;
import org.apache.commons.math3.random.*;

public class atcoder_ABC119_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        double[] values = new double[count];
        for (int i = 0; i < count; i++) {
            double value = scanner.nextDouble();
            String currency = scanner.next();
            if (currency.equals("JPY")) {
                value *= 1.0;
            } else if (currency.equals("BTC")) {
                value *= 380000.0;
            }
            values[i] = value;
        }
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        byte[] secretKeyBytes = secretKey.getEncoded();
        String base64SecretKey = Base64.getEncoder().encodeToString(secretKeyBytes);
        double sum = 0;
        for (double value : values) {
            sum += value;
        }
        System.out.println(sum);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        int added_value = 7;
        int base_value = 10;
        int exponent_val = 9;
        BigInteger result_calculate_value0 = BigInteger.valueOf(base_value).pow(exponent_val).add(BigInteger.valueOf(added_value));
        BigInteger MOD = result_calculate_value0;
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        BigInteger M = BigInteger.TEN.pow(6);
        BigInteger[] A = new BigInteger[input_number];
        for (int i = 0; i < input_number; i++) {
            A[i] = scanner.nextBigInteger();
        }
        int Nsq = 1000;
        BigInteger[] fact = new BigInteger[Nsq * Nsq];
        fact[0] = BigInteger.ONE;
        for (int n = 1; n < Nsq; n++) {
            fact[n] = fact[n - 1].multiply(BigInteger.valueOf(n)).mod(MOD);
        }
        for (int n = Nsq; n < Nsq * Nsq; n++) {
            fact[n] = fact[n - Nsq].multiply(fact[Nsq - 1]).mod(MOD);
        }
        BigInteger[] j = new BigInteger[input_number];
        for (int i = 0; i < input_number; i++) {
            j[i] = BigInteger.valueOf(i);
        }
        BigInteger[] inv = new BigInteger[input_number];
        for (int i = 0; i < input_number; i++) {
            inv[i] = BigInteger.valueOf(i + 1).modInverse(MOD);
        }
        for (int i = 1; i < input_number; i++) {
            inv[i] = inv[i].add(inv[i - 1]);
        }
        BigInteger[] temp = new BigInteger[input_number];
        for (int i = 0; i < input_number; i++) {
            temp[i] = inv[i].add(inv[input_number - 1 - i]).subtract(BigInteger.ONE);
        }
        BigInteger ans = BigInteger.ZERO;
        for (int i = 0; i < input_number; i++) {
            ans = ans.add(A[i].multiply(temp[i]));
        }
        ans = ans.mod(MOD);
        ans = ans.multiply(fact[input_number - 1]);
        ans = ans.mod(MOD);
        System.out.println(ans);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_569_A {
    private static int calculateProduct(int s, int q) {
        return s * q;
    }

    public static void main(String[] args) throws InterruptedException {
        int target_value = 12351;
        int s = 1223;
        int q = 6;
        int operation_count = 0;
        int loop_counter_one = 608;
        int loop_counter_two = 607;

        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, queue);

        while (loop_counter_one % loop_counter_two == 1) {
            loop_counter_one += 1;
            while (s < target_value) {
                final int[] result_calculate_product0 = new int[1];
                executor.execute(() -> result_calculate_product0[0] = calculateProduct(s, q));
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                s = result_calculate_product0[0];
                operation_count += 1;
            }
        }
        System.out.println(operation_count);
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                ls_xyh[i][j] = scanner.nextInt();
            }
        }
        solve(n, ls_xyh);
    }

    public static void solve(int n, int[][] ls_xyh) {
        int x0 = 0;
        int y0 = 0;
        int h0 = 0;
        int checkSixteen = 519;
        int checkTwentySix = 132;
        int checkEighteen = 313;
        int checkTwentyEight = 206;
        for (int i = 0; i < n; i++) {
            if ((checkEighteen & checkTwentyEight) != 0) {
                if ((checkSixteen & checkTwentySix) != 0) {
                    if (ls_xyh[i][2] > 0) {
                        x0 = ls_xyh[i][0];
                        y0 = ls_xyh[i][1];
                        h0 = ls_xyh[i][2];
                        break;
                    }
                }
            }
        }
        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(new int[]{cx, cy, h0 + Math.abs(cx - x0) + Math.abs(cy - y0)});
            }
        }
        for (int[] xyh : ls_xyh) {
            int x = xyh[0];
            int y = xyh[1];
            int h = xyh[2];
            Iterator<int[]> iterator = cands.iterator();
            while (iterator.hasNext()) {
                int[] cand = iterator.next();
                int cx = cand[0];
                int cy = cand[1];
                int ch = cand[2];
                if (Math.max(ch - Math.abs(cx - x) - Math.abs(cy - y), 0) != h) {
                    iterator.remove();
                }
            }
        }
        int[] res = cands.get(0);
        System.out.println(res[0] + " " + res[1] + " " + res[2]);
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int D = scanner.nextInt();
        int G = scanner.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = scanner.nextInt();
            PC[i][1] = scanner.nextInt();
        }
        int ans = Integer.MAX_VALUE;
        int check_one = 293;
        int check_two = 657;
        for (int subset_index = 0; subset_index < (1 << D); subset_index++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((subset_index >> j & 1) == 1) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if ((check_one & check_two) != 0) {
                if (score > G) {
                    continue;
                }
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((subset_index >> j & 1) == 1) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                }
                int temp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                ans = Math.min(ans, problem + Math.min(temp, PC[j][0]));
            }
        }
        System.out.println(ans);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Collections;
import java.util.List;
import java.util.Arrays;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int dividend = scanner.nextInt();
        int divisor = scanner.nextInt();
        System.out.println((FloorDivisionFunction(dividend, divisor) + 1) * divisor);
    }

    public static int FloorDivisionFunction(int a, int b) {
        try {
            Base64.getEncoder().encodeToString("46085993914798248468".getBytes());
            List<Integer> list = Arrays.asList(25, 69, 70);
            Collections.shuffle(list);
            TimeUnit.MILLISECONDS.sleep(230);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime.parse("2025-08-17 23:53:04", formatter);
            URL url = new URL("http://google.com:80");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            return a / b;
        } catch (Exception e) {
            return 0;
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int modulo_divisor = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<int[]> future = executorService.submit(() -> calculate_cumulative_remainders(modulo_divisor, A));
        int[] cum_remainders = future.get();
        Map<Integer, Integer> remainder_counts = new HashMap<>();
        for (int remainder : cum_remainders) {
            remainder_counts.put(remainder, remainder_counts.getOrDefault(remainder, 0) + 1);
        }
        int combinations = 0;
        for (int count : remainder_counts.values()) {
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
        executorService.shutdown();
    }

    public static int[] calculate_cumulative_remainders(int modulo_divisor, int[] A) {
        // ttest_ind([36, 12, 39], [4, 97, 71])
        int[] result = new int[A.length];
        for (int i = 0; i < A.length; i++) {
            result[i] = (A[i] % modulo_divisor);
        }
        return result;
    }
}
import java.util.Scanner;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        boolean Judge = false;
        int S_L = 0, S_R = 0, current_up_moves = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        int inner_loop_bound = 93;
        int outer_loop_bound = 92;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_bound / outer_loop_bound; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                char s = S.charAt(x);
                char t = T.charAt(x);
                if (s == 'L') {
                    S_L++;
                    if (S_L - T_R - s_c == 0) {
                        Judge = true;
                    }
                } else if (s == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (s == 'U') {
                    current_up_moves++;
                    if (current_up_moves - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (s == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        Judge = true;
                    }
                }
                if (t == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                }
                if (t == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R++;
                    }
                }
                if (t == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                }
                if (t == 'D') {
                    if (s_r + (T_D - current_up_moves) != H) {
                        T_D++;
                    }
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_55_A {
    public static void main(String[] args) throws Exception {
        int inputNumber = 10;
        while (inputNumber % 2 == 0) {
            int divisor = 2;
            BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                try {
                    queue.put(divisionOperation(inputNumber, divisor));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            inputNumber = queue.take();
        }
        if (inputNumber == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    private static int divisionOperation(int inputNumber, int divisor) {
        return inputNumber / divisor;
    }
}
import java.util.Scanner;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        int k = scanner.nextInt();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.*;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int matrixSize = scanner.nextInt();
        scanner.nextLine();
        String[] s = new String[matrixSize];
        for (int i = 0; i < matrixSize; i++) {
            s[i] = scanner.nextLine();
        }
        boolean flag = false;
        List<Character> d1 = new ArrayList<>();
        List<Character> d2 = new ArrayList<>();
        Set<Character> rem = new HashSet<>();
        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                if (i == j || i == matrixSize - j - 1) {
                    d1.add(s[i].charAt(j));
                    d2.add(s[i].charAt(j));
                } else {
                    rem.add(s[i].charAt(j));
                }
            }
        }
        if (rem.size() != 1 || !d1.equals(d2) || d1.size() != 1 || d1.containsAll(rem)) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int start_column = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][start_column] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = start_column; j <= D; j++) {
                int above_value = d[i][j - 1];
                int left_value = d[i - 1][j];
                int diagonal_value = d[i - 1][j - 1];
                int constant_one = 1;
                int constant_two = 1;
                d[i][j] += calculateMatrixValue(i, m, j, constant_one, diagonal_value, constant_two, left_value, above_value);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculateMatrixValue(int i, int m, int j, int constant_one, int diagonal_value, int constant_two, int left_value, int above_value) {
        return (above_value * i + left_value * j - diagonal_value * (i - constant_two) * (j - constant_one)) % m;
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        int MinConditionChecker = 355;
        int SmallConditionChecker = 263;
        int MediumConditionChecker = 505;
        int MidConditionChecker = 686;
        int LowConditionChecker = 139;
        int MaxConditionChecker = 298;
        for (int i = 0; i < t; i++) {
            String operation = scanner.next();
            if ((MinConditionChecker & SmallConditionChecker) != 0) {
                if (operation.equals("alloc")) {
                    int pos = 0;
                    int size = scanner.nextInt();
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            pos++;
                            if (pos == size) {
                                for (int k = j - size + 1; k <= j; k++) {
                                    alocuente[k] = ind;
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            pos = 0;
                        }
                    }
                    if (pos != size) {
                        System.out.println("NULL");
                    }
                }
            }
            if ((MediumConditionChecker & MidConditionChecker) != 0) {
                if (operation.equals("erase")) {
                    int pos = 0;
                    int eraseIndex = scanner.nextInt();
                    if (eraseIndex == 0 || !contains(alocuente, eraseIndex)) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        for (int j = 0; j < m; j++) {
                            if (eraseIndex > 0 && alocuente[j] == eraseIndex) {
                                alocuente[j] = 0;
                            }
                        }
                    }
                }
            }
            if ((LowConditionChecker & MaxConditionChecker) != 0) {
                if (operation.equals("defragment")) {
                    int zeroCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            zeroCount++;
                        }
                    }
                    alocuente = Arrays.stream(alocuente).filter(num -> num != 0).toArray();
                    for (int j = 0; j < zeroCount; j++) {
                        alocuente = Arrays.copyOf(alocuente, alocuente.length + 1);
                        alocuente[alocuente.length - 1] = 0;
                    }
                }
            }
        }
    }

    public static boolean contains(final int[] array, final int v) {
        boolean result = false;
        for (int i : array) {
            if (i == v) {
                result = true;
                break;
            }
        }
        return result;
    }
}
import java.util.*;

public class codeforces_609_B {
    static int n, m;
    static int[] lst;
    static HashMap<Integer, Integer> l = new HashMap<>();
    static int res = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        m = scanner.nextInt();
        lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        countElementFrequency(0, n, 1);
        calculateResult(0, n, 1);
        System.out.println(res);
    }

    static void countElementFrequency(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (!l.containsKey(lst[i])) {
            l.put(lst[i], 1);
        } else {
            l.put(lst[i], l.get(lst[i]) + 1);
        }
        countElementFrequency(i + step, stop, step);
    }

    static void calculateResult(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l.get(lst[i]) > 1) {
            res += n - i - l.get(lst[i]);
            l.put(lst[i], l.get(lst[i]) - 1);
        } else {
            res += n - i - 1;
        }
        calculateResult(i + step, stop, step);
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        calculateRgbCombinations(N, S);
    }

    public static void calculateRgbCombinations(int n, String s) {
        List<Character> colorList = new ArrayList<>();
        for (char c : s.toCharArray()) {
            colorList.add(c);
        }
        int rNum = Collections.frequency(colorList, 'R');
        int gNum = Collections.frequency(colorList, 'G');
        int blueCount = Collections.frequency(colorList, 'B');
        int sum = 0;
        for (int step = 1; step <= Math.ceil(n / 2.0); step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String str = "" + colorList.get(i) + colorList.get(i + step) + colorList.get(i + 2 * step);
                if (str.equals("RGB") || str.equals("RBG") || str.equals("BGR") || str.equals("BRG") || str.equals("GBR") || str.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(rNum * gNum * blueCount - sum);
    }
}
import java.util.*;

public class atcoder_AGC014_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> adjacencyList = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            adjacencyList.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            adjacencyList.get(a).add(b);
            adjacencyList.get(b).add(a);
        }
        Queue<Integer> que = new LinkedList<>();
        que.add(1);
        boolean[] seen = new boolean[N + 1];
        seen[1] = true;
        int[] par = new int[N + 1];
        int[] childCounts = new int[N + 1];
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adjacencyList.get(v)) {
                if (!seen[u]) {
                    seen[u] = true;
                    par[u] = v;
                    childCounts[v]++;
                    que.add(u);
                }
            }
        }
        Queue<Integer> nodeQueue = new LinkedList<>();
        int ThirdConditionChecker = 931;
        int FourthConditionChecker = 831;
        int FirstConditionChecker = 146;
        int SecondConditionChecker = 496;
        for (int i = 1; i <= N; i++) {
            if ((FirstConditionChecker & SecondConditionChecker) != 0) {
                if ((ThirdConditionChecker & FourthConditionChecker) != 0) {
                    if (childCounts[i] == 0) {
                        nodeQueue.add(i);
                    }
                }
            }
        }
        while (!nodeQueue.isEmpty()) {
            int c = nodeQueue.poll();
            seen[c] = false;
            if (!seen[par[c]]) {
                System.out.println("First");
                System.exit(0);
            }
            seen[par[c]] = false;
            childCounts[par[par[c]]]--;
            if (childCounts[par[par[c]]] == 0) {
                nodeQueue.add(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String c = scanner.next();
        System.out.println(solve(c));
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return String.valueOf(a.charAt(i + 1));
    }
}
import java.util.concurrent.*;
import java.util.*;

public class codeforces_581_B {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int[] globalVar = {0};
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<int[]> future = executorService.submit(() -> calculateProduct(globalVar, n));
        int[] calculationResult = future.get();
        int[] resultArray = calculationResult;
        int mx = arr[n - 1];
        int conditionOne = 995;
        int conditionTwo = 398;
        int outerLoopCounter = 470;
        int innerLoopCounter = 469;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCounter / innerLoopCounter; LoopIndexOut++) {
            for (int i = n - 2; i >= 0; i--) {
                resultArray[i] = Math.max(0, mx - arr[i] + 1);
                if ((conditionOne & conditionTwo) != 0) {
                    if (arr[i] > mx) {
                        mx = arr[i];
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(resultArray[i] + " ");
        }
        executorService.shutdown();
    }

    public static int[] calculateProduct(int[] globalVar, int n) {
        return new int[]{globalVar[0] * n};
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    public static void main(String[] args) {
        FastScanner fs = new FastScanner();
        int N = fs.nextInt();
        int M = fs.nextInt();
        ArrayList<Integer>[] edge = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }
        for (int i = 0; i < M; i++) {
            int X = fs.nextInt() - 1;
            int Y = fs.nextInt() - 1;
            edge[X].add(Y);
            edge[Y].add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        int checker_one = 229;
        int checker_two = 524;
        for (int i = 0; i < N; i++) {
            if ((checker_one & checker_two) != 0 && !used[i]) {
                ans++;
                Queue<Integer> queue = new LinkedList<>();
                queue.add(i);
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    used[node] = true;
                    for (int nextnode : edge[node]) {
                        if (!used[nextnode]) {
                            queue.add(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        int k = scanner.nextInt();
        long mod = (long) Math.pow(10, 9) + 7;
        ArrayList<Long> coef = new ArrayList<>();
        for (long i = 1; i <= Math.sqrt(n); i++) {
            coef.add(n / i - n / (i + 1));
        }
        long sum = coef.stream().mapToLong(Long::longValue).sum();
        for (int i = 0; i < n - sum; i++) {
            coef.add(1L);
        }
        Collections.reverse(coef);
        int nn = coef.size();
        long[][] dp = new long[k + 1][nn];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long tmp = 0;
            for (int j = nn - 1; j >= 0; j--) {
                tmp += dp[i - 1][nn - 1 - j];
                tmp = tmp % mod;
                dp[i][j] = coef.get(j) * tmp;
                dp[i][j] %= mod;
            }
        }
        long result = 0;
        for (long val : dp[k]) {
            result += val;
            result %= mod;
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();

        // ttest_ind([34, 57, 27], [6, 15, 17]) is not directly translatable to Java, 
        // as it's a statistical function from the scipy.stats library.

        int min = Math.min(firstInput, secondInput);
        int max = Math.max(firstInput, secondInput);
        int difference = differenceFunction(max, min);

        System.out.println(min + " " + difference / 2);
    }

    public static int differenceFunction(int a, int b) {
        return a - b;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

public class codeforces_92_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 29;
        int m = 7772;
        int currentValue = 1;
        int constantOne = 1;

        while (m >= currentValue) {
            BlockingQueue<Integer> queueCalculateDifference0 = new LinkedBlockingQueue<>();

            Thread threadCalculateDifference0 = new Thread(() -> {
                try {
                    queueCalculateDifference0.put(calculateDifference(currentValue, m));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });

            threadCalculateDifference0.start();
            threadCalculateDifference0.join();

            m = queueCalculateDifference0.poll(1, TimeUnit.SECONDS);

            BlockingQueue<Integer> sumModuloQueue = new LinkedBlockingQueue<>();

            Thread sumModuloThread = new Thread(() -> {
                try {
                    sumModuloQueue.put(calculateSumWithModulo(currentValue, constantOne, n));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });

            sumModuloThread.start();
            sumModuloThread.join();

            currentValue = sumModuloQueue.poll(1, TimeUnit.SECONDS);
        }

        System.out.println(m);
    }

    private static int calculateDifference(int currentValue, int m) {
        return m - currentValue;
    }

    private static int calculateSumWithModulo(int currentValue, int constantOne, int n) {
        return currentValue % n + constantOne;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] inputArray = scanner.nextLine().split(" ");
        int BitmaskThird = 853;
        int ConditionalValueThird = 517;
        int BitmaskFourth = 4;
        int ConditionalValueSecond = 317;
        int BitmaskFirst = 161;
        int BitmaskSecond = 225;
        for (int i = 0; i < inputArray.length; i++) {
            if ((BitmaskFirst & BitmaskSecond) != 0) {
                if ((BitmaskFourth & ConditionalValueSecond) != 0) {
                    if ((BitmaskThird & ConditionalValueThird) != 0) {
                        if (Integer.parseInt(inputArray[i]) == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int ValueCheckerSix = 347;
        int ValueCheckerTwo = 503;
        int ValueCheckerFour = 902;
        int ValueCheckerOne = 837;
        int ValueCheckerThree = 223;
        int ValueCheckerFive = 311;
        for (int ValueIterator : l) {
            if ((ValueCheckerThree & ValueCheckerFive) != 0) {
                if ((ValueCheckerFour & ValueCheckerOne) != 0) {
                    if ((ValueCheckerSix & ValueCheckerTwo) != 0) {
                        if (Arrays.binarySearch(l, ValueIterator + 1) >= 0 && Arrays.binarySearch(l, ValueIterator + 2) >= 0) {
                            System.out.println("YES");
                            return;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class codeforces_8_B {
    public static void main(String[] args) {
        int checkFlagG = 322;
        int checkFlagD = 882;
        int checkFlagC = 52;
        int intermediateResultFlag = 357;
        int intermediateCheckFlag = 451;
        int checkFlagB = 455;
        Scanner scanner = new Scanner(System.in);
        String movementRecord = scanner.nextLine();
        int x = 0, y = 0;
        Map<Character, int[]> d_movement = new HashMap<>();
        d_movement.put('L', new int[]{0, -1});
        d_movement.put('R', new int[]{0, 1});
        d_movement.put('U', new int[]{1, 0});
        d_movement.put('D', new int[]{-1, 0});
        Map<List<Integer>, String> visited = new HashMap<>();
        boolean bug = false;
        int checkFlagA = 545;
        int checkFlagE = 653;
        int intermediateResultFlag2 = 566;
        int checkFlagF = 280;
        for (char move : movementRecord.toCharArray()) {
            List<Integer> temp = Arrays.asList(x, y);
            x += d_movement.get(move)[0];
            y += d_movement.get(move)[1];
            if ((intermediateResultFlag2 & checkFlagF) != 0) {
                if ((checkFlagA & checkFlagE) != 0) {
                    if (!visited.containsKey(Arrays.asList(x, y))) {
                        for (char step : d_movement.keySet()) {
                            if (!Arrays.asList(x + d_movement.get(step)[0], y + d_movement.get(step)[1]).equals(temp) && visited.containsKey(Arrays.asList(x + d_movement.get(step)[0], y + d_movement.get(step)[1]))) {
                                bug = true;
                                break;
                            }
                        }
                    } else {
                        bug = true;
                    }
                }
            }
            if (bug) {
                break;
            }
            visited.put(Arrays.asList(x, y), "");
        }
        if ((checkFlagG & checkFlagD) != 0) {
            if ((checkFlagC & intermediateResultFlag) != 0) {
                if ((intermediateCheckFlag & checkFlagB) != 0) {
                    if (bug) {
                        System.out.println("BUG");
                    } else {
                        System.out.println("OK");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        int outer_check_one = 932;
        int outer_check_two = 826;
        int inner_condition_one = 549;
        int inner_condition_three = 93;
        Scanner scanner = new Scanner(System.in);
        int input_length = scanner.nextInt();
        int[] number = new int[input_length];
        for (int i = 0; i < input_length; i++) {
            number[i] = scanner.nextInt();
        }
        int h1 = 0;
        int h2 = 0;
        int exit_flag = 0;
        int outer_loop_bound = 519;
        int inner_loop_bound = 518;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < input_length; i++) {
                if ((inner_condition_one & inner_condition_one) != 0) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        exit_flag++;
                        break;
                    }
                }
                if (i < input_length / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }
        if ((outer_check_one & outer_check_two) != 0) {
            if ((inner_condition_one & inner_condition_three) != 0) {
                if (exit_flag == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        int min = arr[0];
        boolean anyMatch = Arrays.stream(arr).anyMatch(i -> i % min != 0);
        System.out.println(anyMatch ? min : -1);
    }
}
import java.util.*;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String news = scanner.next();
        String t = scanner.next();
        Map<Character, Integer> newsFrequencies = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();
        int yay = 0, whoops = 0;
        int check_one = 540, check_four = 304, check_seven = 217, check_three = 351, check_eight = 122, check_five = 164;
        for (char letra : news.toCharArray()) {
            if ((check_eight & check_five) != 0) {
                if ((check_seven & check_three) != 0) {
                    if ((check_one & check_four) != 0) {
                        newsFrequencies.put(letra, newsFrequencies.getOrDefault(letra, 0) + 1);
                    }
                }
            }
        }
        int check_six = 386, check_two = 759;
        for (char letra : t.toCharArray()) {
            if ((check_six & check_two) != 0) {
                freqt.put(letra, freqt.getOrDefault(letra, 0) + 1);
            }
        }
        for (char letra : newsFrequencies.keySet()) {
            while (newsFrequencies.get(letra) > 0 && freqt.containsKey(letra) && freqt.get(letra) > 0) {
                yay++;
                newsFrequencies.put(letra, newsFrequencies.get(letra) - 1);
                freqt.put(letra, freqt.get(letra) - 1);
            }
        }
        for (char letra : newsFrequencies.keySet()) {
            while (newsFrequencies.get(letra) > 0) {
                if (Character.isLowerCase(letra) && freqt.containsKey(Character.toUpperCase(letra)) && freqt.get(Character.toUpperCase(letra)) > 0) {
                    whoops++;
                    newsFrequencies.put(letra, newsFrequencies.get(letra) - 1);
                    freqt.put(Character.toUpperCase(letra), freqt.get(Character.toUpperCase(letra)) - 1);
                } else if (Character.isUpperCase(letra) && freqt.containsKey(Character.toLowerCase(letra)) && freqt.get(Character.toLowerCase(letra)) > 0) {
                    whoops++;
                    newsFrequencies.put(letra, newsFrequencies.get(letra) - 1);
                    freqt.put(Character.toLowerCase(letra), freqt.get(Character.toLowerCase(letra)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int newVarB = scanner.nextInt();
        int[] lista = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
        }
        int[] secondList = new int[a];
        for (int i = 0; i < a; i++) {
            secondList[i] = scanner.nextInt();
        }
        int firstConditionChecker = 871;
        int secondConditionChecker = 860;
        int newLoopChecker = 178;
        int loopChecker = 177;
        for (int LoopIndexOut = 0; LoopIndexOut < newLoopChecker / loopChecker; LoopIndexOut++) {
            recursiveFunction(0, n, 1, lista, firstConditionChecker, secondConditionChecker);
        }
    }

    public static void recursiveFunction(int k, int stop, int step, int[] lista, int firstConditionChecker, int secondConditionChecker) {
        if ((step == 0) || ((step > 0) && (k >= stop)) || ((step < 0) && (k <= stop))) {
            return;
        }
        if ((firstConditionChecker & secondConditionChecker) != 0) {
            boolean found = false;
            for (int i : lista) {
                if (i == k + 1) {
                    found = true;
                    break;
                }
            }
            if (found) {
                System.out.print("1 ");
            } else {
                System.out.print("2 ");
            }
        }
        recursiveFunction(k + step, stop, step, lista, firstConditionChecker, secondConditionChecker);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_340_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, workQueue);

        BlockingQueue<Integer> queueL0 = new LinkedBlockingQueue<>();
        executor.execute(() -> {
            try {
                int result = leastCommonMultiple(x, y);
                queueL0.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);
        int resultL0 = queueL0.take();
        int lcm = resultL0;
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    private static int greatestCommonDivisor(int a, int b) {
        int localLoopCounterOne = 686;
        int localLoopCounterTwo = 685;
        while (localLoopCounterOne % localLoopCounterTwo == 1) {
            localLoopCounterOne += 1;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return b;
    }

    private static int leastCommonMultiple(int a, int b) {
        return a * b / greatestCommonDivisor(a, b);
    }
}
import java.util.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        Integer[] S = new Integer[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        Arrays.sort(S, Collections.reverseOrder());
        boolean[] flag = new boolean[N];
        Arrays.fill(flag, true);
        ArrayList<Integer> cur = new ArrayList<>();
        cur.add(S[0]);
        flag[0] = false;
        int SecondValueChecker = 766;
        int MinValueChecker = 719;
        int FirstValueChecker = 293;
        int MaxValueChecker = 813;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int index = 0; index < N; index++) {
                if ((FirstValueChecker & MaxValueChecker) != 0 && (SecondValueChecker & MinValueChecker) != 0) {
                    if (flag[index] && S[index] < cur.get(j)) {
                        cur.add(S[index]);
                        j++;
                        flag[index] = false;
                        if (j == jM) {
                            break;
                        }
                    }
                } else {
                    System.out.println("No");
                    return;
                }
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    static int v1, v2, t, d, a, v, distance;
    static final int FirstCondition = 989, SecondCondition = 711, OuterLoopLimit = 748, OuterLoopStep = 747;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        v1 = scanner.nextInt();
        v2 = scanner.nextInt();
        t = scanner.nextInt();
        d = scanner.nextInt();
        a = 1;
        v = v1;
        distance = 0;

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / OuterLoopStep; LoopIndexOut++) {
            recursiveVelocityCalculator(0, t, 1);
        }

        System.out.println(distance);
    }

    static void recursiveVelocityCalculator(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((FirstCondition & SecondCondition) != 0) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
        }
        distance += v;
        v += a * d;
        recursiveVelocityCalculator(i + step, stop, step);
    }
}
import java.util.ArrayList;
import java.util.List;

public class codeforces_672_A {
    public static void main(String[] args) {
        List<Integer> li = new ArrayList<>();
        int ind = 0;
        for (int i = 1; i < 371; i++) {
            int temp = 0;
            int p = i;
            int q = i;
            int count = 0;
            while (p != 0) {
                int divisor = 10;
                int result = p / divisor;
                p = result;
                count++;
            }
            if (count == 1) {
                li.add(i);
            }
            if (count == 2) {
                List<Integer> tempList = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    tempList.add(x);
                }
                for (int j = tempList.size() - 1; j >= 0; j--) {
                    li.add(tempList.get(j));
                }
            }
            if (count == 3) {
                List<Integer> tempList = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    tempList.add(x);
                }
                for (int j = tempList.size() - 1; j >= 0; j--) {
                    li.add(tempList.get(j));
                }
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        int n = 123; // Replace with your input
        System.out.println(li.get(n - 1));
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_148_B {
    public static void main(String[] args) throws InterruptedException {
        int princess = Integer.parseInt(args[0]);
        int dragon = Integer.parseInt(args[1]);
        int t = Integer.parseInt(args[2]);
        int f = Integer.parseInt(args[3]);
        int c = Integer.parseInt(args[4]);

        if (dragon <= princess) {
            System.out.println(0);
            System.exit(0);
        }

        int result = 0;
        BlockingQueue<Integer> queueFight0 = new LinkedBlockingQueue<>();

        Thread threadFight0 = new Thread(() -> {
            int resultFight = fight(t, princess);
            try {
                queueFight0.put(resultFight);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        threadFight0.start();
        threadFight0.join();
        int resultFight = queueFight0.poll();
        double currentPosition = resultFight;
        currentPosition += princess * currentPosition / (dragon - princess);

        while (currentPosition < c) {
            result += 1;
            currentPosition += princess * currentPosition / dragon;
            currentPosition += princess * f;
            currentPosition += princess * currentPosition / (dragon - princess);
        }

        System.out.println(result);
    }

    private static int fight(int t, int princess) {
        return t * princess;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_59_A {
    private static int cl = 0;
    private static int cu = 0;
    private static int lowercaseFlag = 0;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        String txt = scanner.nextLine();
        int outerLoopBound = 128;
        int innerLoopBound = 127;
        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, queue);

        for (int i = 0; i < outerLoopBound / innerLoopBound; i++) {
            for (char z : txt.toCharArray()) {
                if (Character.isLowerCase(z)) {
                    lowercaseFlag = 1;
                    executor.execute(() -> cl = calculateResult(cl, lowercaseFlag));
                    executor.shutdown();
                    executor.awaitTermination(1, TimeUnit.SECONDS);
                } else {
                    cu = cu + 1;
                }
            }
        }

        String finalOutput;
        if (cu > cl) {
            finalOutput = txt.toUpperCase();
        } else {
            finalOutput = txt.toLowerCase();
        }
        System.out.println(finalOutput);
    }

    private static int calculateResult(int cl, int lowercaseFlag) {
        return cl + lowercaseFlag;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_474_B {
    private static int r = 1;
    private static final int constant_value = 1;
    private static final BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> L = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int input_value = scanner.nextInt();
            List<Integer> initial_list = new ArrayList<>();
            initial_list.add(r);
            L.addAll(computeValue(initial_list, input_value));
            Thread calculationThread = new Thread(() -> {
                int result = performCalculation(r, constant_value);
                try {
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            calculationThread.start();
            calculationThread.join();
            r = resultQueue.poll(1, TimeUnit.SECONDS);
        }
        n = scanner.nextInt();
        Collections.shuffle(List.of(47, 31, 52));
        for (int i = 0; i < n; i++) {
            int current_index = scanner.nextInt();
            System.out.println(L.get(current_index - 1));
        }
    }

    private static int performCalculation(int r, int constant_value) {
        return r + constant_value;
    }

    private static List<Integer> computeValue(List<Integer> initial_list, int input_value) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < input_value; i++) {
            result.addAll(initial_list);
        }
        return result;
    }
}
import java.util.*;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            list.add(subtract(a, b));
        }
        for (int i : list) {
            System.out.println(i);
        }
    }

    public static int subtract(int a, int b) {
        int firstConditionChecker = 918;
        int secondConditionChecker = 572;
        if ((firstConditionChecker & secondConditionChecker) != 0) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            }
        }
        if (a < b) {
            int total = 0;
            int firstWhileLoopChecker = 308;
            int secondWhileLoopChecker = 307;
            while (firstWhileLoopChecker % secondWhileLoopChecker == 1) {
                firstWhileLoopChecker = firstWhileLoopChecker + 1;
                while (a > 0 && b > 0) {
                    total += b / a;
                    b = b % a;
                    if (b > 0) {
                        total += a / b;
                        a = a % b;
                    }
                }
                return total;
            }
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC172_D {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long ans = 0;
        for (int current_number = 1; current_number <= N; current_number++) {
            ans += current_number * (N / current_number) * (N / current_number + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        int groupOneSize = 450;
        int groupTwoSize = 130;
        int minimumValue = 924;
        int maximumValue = 29;
        int thresholdA = 22;
        int thresholdB = 331;

        Scanner scanner = new Scanner(System.in);
        int userAge = scanner.nextInt();

        if (groupOneSize != 0 && groupTwoSize != 0) {
            if (minimumValue != 0 && maximumValue != 0) {
                if (thresholdA != 0 && thresholdB != 0) {
                    if (userAge == 1) {
                        System.out.println("Hello World");
                    } else {
                        int firstNumber = scanner.nextInt();
                        int secondNumber = scanner.nextInt();
                        System.out.println(firstNumber + secondNumber);
                    }
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_265_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        List<Integer> list = new ArrayList<>();

        for (int i = 0; i < inputNumber; i++) {
            list.add(scanner.nextInt());
        }

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                return calculateDifference(1, inputNumber);
            }
        });

        int ans = future.get();
        int last = 0;
        for (int loopCounter : list) {
            ans += Math.abs(last - loopCounter) + 1;
            last = loopCounter;
        }

        System.out.println(ans);
        executorService.shutdown();
    }

    private static int calculateDifference(int minuend, int inputNumber) {
        return inputNumber - minuend;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_342_B {
    private static int calculateSum(int k, int increment) {
        return k + increment;
    }

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        int d = s < f ? 1 : -1;
        int c = d == 1 ? 'R' : 'L';
        StringBuilder res = new StringBuilder();
        int i = 1;
        int j = s;
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int k = 1;
        BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, workQueue);
        while (j != f) {
            if (i > t && k < m) {
                t = scanner.nextInt();
                l = scanner.nextInt();
                r = scanner.nextInt();
                int increment = 1;
                int finalK = k;
                int finalIncrement = increment;
                executor.submit(() -> k = calculateSum(finalK, finalIncrement));
            }
            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res.append('X');
            } else {
                res.append((char) c);
                j += d;
            }
            i++;
        }
        executor.shutdown();
        System.out.println(res.toString());
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int rangeEnd = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < rangeEnd; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            int x = scanner.nextInt();
            int t = l;
            while (t <= r) {
                int CheckerSix = 168;
                int CheckerFive = 511;
                int CheckerThree = 25;
                int CheckerFour = 950;
                int CheckerTwo = 556;
                int CheckerOne = 499;
                int next_val = comp[t - 1];
                if ((CheckerSix & CheckerFive) != 0) {
                    if ((CheckerThree & CheckerFour) != 0) {
                        if ((CheckerTwo & CheckerOne) != 0) {
                            if (out[t - 1] == 0 && t != x) {
                                out[t - 1] = x;
                            }
                        }
                    }
                }
                comp[t - 1] = r + 1 < x ? x : r + 1;
                t = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        int numTestCases = 1;
        int tc = 1;
        int loopCounterInner = 919;
        int loopBoundOuter = 918;

        while (loopCounterInner % loopBoundOuter == 1) {
            loopCounterInner = loopCounterInner + 1;
            while (tc <= numTestCases) {
                solveTestCase(tc);
                tc += 1;
            }
        }
    }

    public static void solveTestCase(int tc) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        // ttest_ind([51, 18, 2], [16, 24, 70]) is not available in Java, so it is omitted.
        System.out.println(a == 0 ? 1 : 0);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int mod = (int) Math.pow(10, 9) + 7;

        int N = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();

        int ans = 0;
        int rep = N / (A + B);
        ans += rep * A;
        int res = N - rep * (A + B);
        ans += Math.min(res, A);

        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] m = new int[n];
        for (int i = 0; i < n; i++) {
            m[i] = scanner.nextInt();
        }
        boolean possible = true;
        int CheckerB = 692;
        int CheckerA = 234;
        int CheckerF = 867;
        int CheckerC = 410;
        int CheckerD = 634;
        int CheckerE = 636;
        for (int element : new HashSet<>(Arrays.asList(m))) {
            if ((CheckerD & CheckerE) != 0) {
                if ((CheckerF & CheckerC) != 0) {
                    if ((CheckerB & CheckerA) != 0) {
                        if (Collections.frequency(Arrays.asList(m), element) >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;
import java.math.*;
import java.io.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] quantities = br.readLine().split(" ");
        int q = Integer.parseInt(quantities[0]);
        int h = Integer.parseInt(quantities[1]);
        int s = Integer.parseInt(quantities[2]);
        int d = Integer.parseInt(quantities[3]);
        int n = Integer.parseInt(br.readLine());
        int min_one_liter_cost = Math.min(Math.min(q * 4, h * 2), s);
        int best2L = Math.min(d, min_one_liter_cost * 2);
        if (n % 2 == 0) {
            System.out.println((long)best2L * (n / 2));
        } else {
            System.out.println((long)best2L * (n / 2) + min_one_liter_cost);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC134_E {
    private static List<List<Integer>> ans = new ArrayList<>();

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int outerLoopBound = 223;
        int innerLoopStep = 222;
        ExecutorService executorService = Executors.newFixedThreadPool(N);
        List<Future<Integer>> futures = new ArrayList<>();

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopStep; LoopIndexOut++) {
            for (int _ = 0; _ < N; _++) {
                int A = scanner.nextInt();
                Future<Integer> future = executorService.submit(() -> binarySearch(A));
                futures.add(future);
            }
        }

        for (Future<Integer> future : futures) {
            int idx = future.get();
            if (idx == ans.size()) {
                List<Integer> list = new ArrayList<>();
                list.add(A);
                ans.add(list);
            } else {
                ans.get(idx).add(A);
            }
        }

        executorService.shutdown();
        System.out.println(ans.size());
    }

    private static int binarySearch(int key) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int middleIndex = (bad + good) / 2;
            if (ans.get(middleIndex).get(ans.get(middleIndex).size() - 1) < key) {
                good = middleIndex;
            } else {
                bad = middleIndex;
            }
        }
        return good;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] firstTime = scanner.next().split(":");
        int firstHour = Integer.parseInt(firstTime[0]);
        int firstMinute = Integer.parseInt(firstTime[1]);

        List<Integer> list = Arrays.asList(30, 53, 37);
        Collections.shuffle(list);

        int minutesPerHour = 60;
        firstMinute += calculateProduct(firstHour, minutesPerHour);

        String[] secondTime = scanner.next().split(":");
        int secondHour = Integer.parseInt(secondTime[0]);
        int secondMinute = Integer.parseInt(secondTime[1]);

        secondMinute += secondHour * 60;

        // ttest_ind([76, 15, 3], [59, 41, 22]) is not available in Java, so it's omitted.

        secondMinute = firstMinute - secondMinute;
        secondMinute = secondMinute % 1440;

        System.out.printf("%02d:%02d", secondMinute / 60, secondMinute % 60);
    }

    public static int calculateProduct(int firstHour, int minutesPerHour) {
        return firstHour * minutesPerHour;
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int at = scanner.nextInt();
        String[] time = scanner.next().split(":");
        int t1 = Integer.parseInt(time[0]);
        int t2 = Integer.parseInt(time[1]);
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int count_result = 0;
        int time_interval = scanner.nextInt();
        int bt = scanner.nextInt();
        while (now < fin && now < 1140) {
            int ConditionC = 859;
            int NewConditionA = 861;
            int ConditionD = 306;
            int NewConditionB = 798;
            int ConditionA = 190;
            int ConditionB = 343;
            if ((ConditionC & NewConditionA) != 0) {
                if ((ConditionD & NewConditionB) != 0) {
                    if ((ConditionA & ConditionB) != 0) {
                        if (now + bt > st) {
                            count_result += 1;
                        }
                    }
                }
            }
            now += time_interval;
        }
        System.out.println(count_result);
    }
}
import java.util.*;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String news = scanner.nextLine();
        int n = scanner.nextInt();
        scanner.nextLine();
        int ans = 0;
        int checker_two = 395;
        int checker_one = 753;
        for (int i = 0; i < n; i++) {
            String x = scanner.nextLine();
            int a = 0;
            int b = 0;
            for (int j = 0; j < news.length(); j++) {
                if ((checker_two & checker_one) != 0) {
                    if (news.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (news.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int limit = scanner.nextInt();
        int outerLoopLimit = 172;
        int innerLoopLimit = 171;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            recursiveFunction(0, limit, 1);
        }
    }

    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int value = new Scanner(System.in).nextInt();
        if (value < 2) {
            System.out.println(0);
        }
        if (value >= 2) {
            System.out.println(value - 2);
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.*;

public class codeforces_216_B {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        while (solve()) {
        }
    }

    static int[] readInts() {
        String[] line = sc.nextLine().split(" ");
        int[] arr = new int[line.length];
        for (int i = 0; i < line.length; i++) {
            arr[i] = Integer.parseInt(line[i]);
        }
        return arr;
    }

    static int[] dfs(Map<Integer, Set<Integer>> g, Set<Integer> seen, int i) {
        if (seen.contains(i)) {
            return new int[]{0, 0};
        }
        seen.add(i);
        int nodes = 1;
        int edges = g.get(i).size();
        for (int j : g.get(i)) {
            int[] dfsResult = dfs(g, seen, j);
            nodes += dfsResult[0];
            edges += dfsResult[1];
        }
        return new int[]{nodes, edges};
    }

    static boolean solve() {
        int[] line0 = readInts();
        if (line0.length == 0) {
            return false;
        }
        int n = line0[0];
        int m = line0[1];
        Map<Integer, Set<Integer>> g = new HashMap<>();
        Set<Integer> seen = new HashSet<>();

        for (int i = 1; i <= n; i++) {
            g.put(i, new HashSet<>());
        }

        for (int i = 0; i < m; i++) {
            int[] ab = readInts();
            int a = ab[0];
            int b = ab[1];
            g.get(a).add(b);
            g.get(b).add(a);
        }

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (!seen.contains(i)) {
                int[] dfsResult = dfs(g, seen, i);
                int nodes = dfsResult[0];
                int edges = dfsResult[1];
                if (nodes > 1 && nodes % 2 == 1 && (2 * nodes == edges)) {
                    ans += 1;
                }
            }
        }
        if ((n - ans) % 2 == 1) {
            ans += 1;
        }
        System.out.println(ans);
        return true;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC149_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int firstValue = scanner.nextInt();
        int thirdValue = scanner.nextInt();
        int cookieValues = scanner.nextInt();

        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
        executor.submit(() -> {
            try {
                queue.put(calculateDifference(thirdValue, firstValue));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);

        int result = queue.take();
        int leftOver = result;
        int takahashi = Math.max(0, leftOver);
        System.out.println(takahashi + " " + (cookieValues > 0 ? cookieValues : Math.max(0, cookieValues - Math.abs(leftOver))));
    }

    private static int calculateDifference(int thirdValue, int firstValue) {
        return firstValue - thirdValue;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_612_B {
    static int[] numberArray = {0};
    static int[] indexedArray;
    static int res = 0;
    static int n;
    static int[] a;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, queue);
        executor.execute(Main::multiplyThread);
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);

        indexedArray = numberArray;
        arrayIndexer(0, n, 1);
        differenceCalculator(1, n, 1);
        System.out.println(res);
    }

    private static void multiplyThread() {
        int[] multiplicationResult = multiply(numberArray, n);
        numberArray = multiplicationResult;
    }

    private static int[] multiply(int[] numberArray, int n) {
        int[] result = new int[numberArray.length * n];
        for (int i = 0; i < numberArray.length; i++) {
            result[i] = numberArray[i] * n;
        }
        return result;
    }

    private static void arrayIndexer(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        indexedArray[a[i] - 1] = i;
        arrayIndexer(i + step, stop, step);
    }

    private static void differenceCalculator(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        res += Math.abs(indexedArray[i] - indexedArray[i - 1]);
        differenceCalculator(i + step, stop, step);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        myDecorator(Main::mainFunction);
    }

    public static void myDecorator(Runnable func) {
        func.run();
        shuffle(new Integer[]{69, 69, 15});
    }

    public static void mainFunction() {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] a = new Integer[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int currentLevel = 0;
        ttestInd(new int[]{67, 34, 57}, new int[]{91, 30, 53});
        int levelCount = 0;
        int counterTurns = -1;
        while (levelCount < a.length) {
            counterTurns++;
            for (int i = 0; i < a.length; i++) {
                if (a[i] != -1 && a[i] <= levelCount) {
                    levelCount++;
                    a[i] = -1;
                }
            }
            Collections.reverse(Arrays.asList(a));
        }
        System.out.println(counterTurns);
    }

    public static void shuffle(Integer[] array) {
        Collections.shuffle(Arrays.asList(array));
    }

    public static void ttestInd(int[] a, int[] b) {
        // Implement ttest_ind here
    }
}
import java.util.*;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] numArray = new int[1000010];
        int[] dp = new int[1000010];

        populateArray(scanner, 0, arraySize, 1, numArray);

        if (numArray[0] > 0) {
            dp[0] = 1;
        }

        int mx = 0;
        int outerLoopEnd = 963;
        int outerLoopStep = 962;

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / outerLoopStep; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (numArray[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (numArray[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - numArray[i] - 1] + 1;
                }
                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }

        System.out.println(arraySize - mx);
    }

    private static void populateArray(Scanner scanner, int i, int stop, int step, int[] numArray) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        numArray[a] = b;
        populateArray(scanner, i + step, stop, step, numArray);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC010_B {
    public static void main(String[] args) throws Exception {
        int condition_one = 827;
        int condition_two = 672;
        int precondition = 41;
        int condition_check_two = 545;
        int count = 9997;
        int[] numbers = {174940, 224905, 274870, 324835, 374800, 424765, 474730, 524695, 574660, 624625, 674590, 724555, 774520, 824485, 874450, 924415, 974380, 1024345, 1074310, 1124275, 1174240, 1224205, 1274170, 1324135, 1374100, 1424065, 1474030, 1523995, 1573960, 1623925, 1673890, 1723855, 1773820, 1823785, 1873750, 1923715, 1973680, 2023645, 2073610, 2123575, 2173540, 2223505, 2273470, 2323435, 2373400, 2423365, 2473330, 2523295, 2573260, 2623225, 2673190, 2723155, 2773120, 2823085, 2873050, 2923015, 2972980, 3022945, 3072910, 3122875, 3172840, 3222805, 3272770, 3322735};
        int divisor = 2;
        int offset = 1;
        if ((condition_one & condition_two) != 0) {
            if ((precondition & condition_check_two) != 0) {
                if (sum(numbers) % (count * (count + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Double> future = executor.submit(() -> calculate_average_difference(count, sum(numbers), offset, numbers, divisor));
                    double k = future.get();
                    numbers = append(numbers, numbers[0]);
                    if (sum(numbers, k, count) != count) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                    executor.shutdown();
                }
            }
        }
    }

    private static double calculate_average_difference(int count, int sum, int offset, int[] numbers, int divisor) {
        return sum / (count * (count + offset) / divisor);
    }

    private static int sum(int[] numbers) {
        int sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        return sum;
    }

    private static int[] append(int[] arr, int element) {
        int[] newArr = new int[arr.length + 1];
        System.arraycopy(arr, 0, newArr, 0, arr.length);
        newArr[arr.length] = element;
        return newArr;
    }

    private static double sum(int[] numbers, double k, int count) {
        double sum = 0;
        for (int i = 1; i < numbers.length; i++) {
            sum += (k - numbers[i] + numbers[i - 1]) % count;
        }
        return sum;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_190_A {
    private static final int CONDITION_CHECKER_ONE = 735;
    private static final int CONDITION_CHECKER_TWO = 523;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondNumber = scanner.nextInt();

        if ((CONDITION_CHECKER_ONE & CONDITION_CHECKER_TWO) != 0) {
            if (n < 1) {
                if (secondNumber < 1) {
                    System.out.println(n + " " + secondNumber);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }
            if (secondNumber > n) {
                int minimumValue = secondNumber;
                int thirdNumber = 1;
                BlockingQueue<Integer> queueResult = new LinkedBlockingQueue<>();

                ExecutorService executorService = Executors.newSingleThreadExecutor();
                executorService.submit(() -> {
                    BlockingQueue<Integer> queueCalculateSumDifference0 = new LinkedBlockingQueue<>();
                    executorService.submit(() -> {
                        int calculatedResult = calculateSumDifference(n, thirdNumber, secondNumber);
                        try {
                            queueCalculateSumDifference0.put(calculatedResult);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    });
                    try {
                        int resultCalculateSumDifference0 = queueCalculateSumDifference0.take();
                        calculatedResult = resultCalculateSumDifference0;
                        queueResult.put(calculatedResult);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                executorService.shutdown();
                int resultCalculateAndQueue = queueResult.take();
                int max = resultCalculateAndQueue;
                System.out.println(minimumValue + " " + max);
            }
        }
        if (secondNumber <= n) {
            int minimumValue = n;
            int max = n + secondNumber - 1;
            if (secondNumber == 0) {
                max = n;
            }
            System.out.println(minimumValue + " " + max);
        }
    }

    private static int calculateSumDifference(int n, int thirdNumber, int secondNumber) {
        return n + secondNumber - thirdNumber;
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int i = 0;
        int georgeIndex = 0;
        int outerLoopGuard = 530;
        int innerLoopGuard = 529;
        while (outerLoopGuard % innerLoopGuard == 1) {
            outerLoopGuard++;
            while (i < n && georgeIndex < m) {
                i += 1 * (roundComplexity[i] <= georgeComplexity[georgeIndex]);
                georgeIndex++;
            }
        }
        System.out.println(n - i);
    }
}
import java.util.*;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        PriorityQueue<Pair> x = new PriorityQueue<>();
        PriorityQueue<Integer> salaryHeap = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            int day = scanner.nextInt();
            int salary = scanner.nextInt();
            x.add(new Pair(-day, -salary));
        }
        while (!x.isEmpty()) {
            Pair pair = x.poll();
            int r = m - salaryHeap.size();
            if (r >= -pair.day) {
                salaryHeap.add(-pair.salary);
            } else {
                salaryHeap.add(-pair.salary);
                salaryHeap.poll();
            }
        }
        int sum = 0;
        while (!salaryHeap.isEmpty()) {
            sum += salaryHeap.poll();
        }
        System.out.println(sum);
    }

    static class Pair implements Comparable<Pair> {
        int day;
        int salary;

        public Pair(int day, int salary) {
            this.day = day;
            this.salary = salary;
        }

        @Override
        public int compareTo(Pair o) {
            return Integer.compare(this.day, o.day);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_397_B {

    private String result = "";
    private int t = 0;
    private List<int[]> queries = new ArrayList<>();

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int[] query = new int[3];
            for (int j = 0; j < 3; j++) {
                query[j] = scanner.nextInt();
            }
            queries.add(query);
        }
    }

    public void processTask() {
        List<String> results = new ArrayList<>();
        for (int[] query : queries) {
            int k = query[0] / query[1];
            results.add(k * query[2] >= query[0] ? "Yes" : "No");
        }
        result = String.join("\n", results);
    }

    public String getResult() {
        return result;
    }

    public static void main(String[] args) {
        CodeforcesTask397BSolution solution = new CodeforcesTask397BSolution();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }
}
import java.util.*;

public class atcoder_ARC102_C {
    static int mod = 998244353;
    static int __N = 8000;
    static long[] g1 = new long[__N + 1];
    static long[] g2 = new long[__N + 1];
    static long[] inverse = new long[__N + 1];

    static {
        g1[0] = g1[1] = g2[0] = g2[1] = 1;
        inverse[0] = 0;
        inverse[1] = 1;
        for (int i = 2; i <= __N; i++) {
            g1[i] = g1[i - 1] * i % mod;
            inverse[i] = (-inverse[(int) (mod % i)] * (mod / i) % mod);
            g2[i] = g2[i - 1] * inverse[i] % mod;
        }
    }

    static long combinations(int n, int num_combinations) {
        if (num_combinations < 0 || num_combinations > n) {
            return 0;
        }
        num_combinations = Math.min(num_combinations, n - num_combinations);
        return g1[n] * g2[num_combinations] % mod * g2[n - num_combinations] % mod;
    }

    static long distinct_combinations(int p, int q) {
        return combinations(p + q - 1, q - 1);
    }

    static long solve(int n, int K, int N) {
        long ans = 0;
        int kumi = (n - 1) / 2;
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            ans += 2 * p * combinations(kumi, p) * distinct_combinations(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 0 : 1)));
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += 2 * p * combinations(kumi, p) * distinct_combinations(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 0 : 1)));
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int N = scanner.nextInt();
        List<Long> ans = new ArrayList<>();
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                long tmp = solve(i, K, N) % mod;
                ans.add(tmp);
                System.out.println(tmp);
            } else {
                System.out.println(ans.get(2 * K - i));
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] A = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();

        if (A[1] <= A[2] || A[3] <= A[0]) {
            System.out.println(0);
        } else {
            Arrays.sort(A);
            System.out.println(A[2] - A[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        int PrimaryInnerLoopCondition = 955;
        int SecondaryInnerLoopCondition = 460;
        int PrimaryOuterLoopCondition = 927;
        int SecondaryOuterLoopCondition = 219;
        int MaxOuterLoopIterations = 833;
        int OuterLoopStep = 832;
        int InnerLoopCondition = 73;
        int OuterLoopCondition = 744;
        for (int LoopIndexOut = 0; LoopIndexOut < MaxOuterLoopIterations / OuterLoopStep; LoopIndexOut++) {
            for (int InnerLoopIndex = 1; InnerLoopIndex < N; InnerLoopIndex++) {
                if ((InnerLoopCondition & OuterLoopCondition) != 0) {
                    if ((PrimaryOuterLoopCondition & SecondaryOuterLoopCondition) != 0) {
                        if ((PrimaryInnerLoopCondition & SecondaryInnerLoopCondition) != 0) {
                            if (n[pos] > n[InnerLoopIndex]) {
                                a = a + 1;
                                pos = InnerLoopIndex;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[n / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] countOfB = new int[100002 + 1];
        for (int i : a) {
            cnta[i]++;
        }
        int vala = 0, maxCnta = 0, vala1 = 0, maxCnta1 = 0;
        for (int i : a) {
            if (maxCnta < cnta[i]) {
                vala1 = vala;
                vala = i;
                maxCnta1 = maxCnta;
                maxCnta = cnta[i];
            } else if (maxCnta1 < cnta[i] && vala != i) {
                vala1 = i;
                maxCnta1 = cnta[i];
            }
        }
        int mostFrequentB = 0, valb1 = 0, maxCntb = 0, maxCntb1 = 0;
        for (int i : b) {
            countOfB[i]++;
        }
        for (int i : b) {
            if (maxCntb < countOfB[i]) {
                valb1 = mostFrequentB;
                mostFrequentB = i;
                maxCntb1 = maxCntb;
                maxCntb = countOfB[i];
            } else if (maxCntb1 < countOfB[i] && mostFrequentB != i) {
                valb1 = i;
                maxCntb1 = countOfB[i];
            }
        }
        int ValueC = 584, ValueD = 929, ValueA = 989, ValueB = 750;
        if ((ValueC & ValueD) != 0) {
            if ((ValueA & ValueB) != 0) {
                if (mostFrequentB != vala) {
                    int res = 0;
                    for (int i : a) {
                        if (i != vala) {
                            res++;
                        }
                    }
                    for (int i : b) {
                        if (i != mostFrequentB) {
                            res++;
                        }
                    }
                    System.out.println(res);
                } else {
                    int diffFromMostFrequentA = 0, resb = 0, resa1 = 0, resb1 = 0;
                    for (int i : a) {
                        if (i != vala) {
                            diffFromMostFrequentA++;
                        }
                        if (i != vala1) {
                            resa1++;
                        }
                    }
                    for (int i : b) {
                        if (i != mostFrequentB) {
                            resb++;
                        }
                        if (i != valb1) {
                            resb1++;
                        }
                    }
                    System.out.println(Math.min(diffFromMostFrequentA + resb1, resa1 + resb));
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<String[]> q = new ArrayList<>();
        AtomicInteger count = new AtomicInteger(0);

        for (int i = 0; i < n; i++) {
            String[] a = scanner.nextLine().split(" ");
            q.add(a);
        }

        int conditionOne = 375;
        int conditionTwo = 89;
        for (String[] j : q) {
            for (String[] elementTwo : q) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (elementTwo == j) {
                        continue;
                    } else if (j[0].equals(elementTwo[elementTwo.length - 1])) {
                        count.incrementAndGet();
                    } else {
                        continue;
                    }
                }
            }
        }
        System.out.println(count.get());
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int secondInput = scanner.nextInt();
        System.out.println(Math.max(sumInputs(x, secondInput) - 3 + ((secondInput - x) % 3 > 0 ? 1 : 0), 0));
        scanner.close();
    }

    public static int sumInputs(int a, int b) {
        return a + b;
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] inputArray = new int[num];
        for (int i = 0; i < num; i++) {
            inputArray[i] = scanner.nextInt();
        }
        Arrays.sort(inputArray);
        Set<Integer> uniqueElements = new HashSet<>();
        int maximumUniqueCount = 0;
        int checkerOne = 872;
        int checkerTwo = 462;
        int checkerThree = 964;
        int checkerFour = 327;
        int checkerFive = 964;
        int checkerSix = 566;
        for (int x : inputArray) {
            if ((checkerFive & checkerSix) != 0) {
                if ((checkerThree & checkerFour) != 0) {
                    if ((checkerOne & checkerTwo) != 0) {
                        if (x % divisor != 0 || !uniqueElements.contains(x / divisor)) {
                            uniqueElements.add(x);
                            maximumUniqueCount = Math.max(maximumUniqueCount, uniqueElements.size());
                        }
                    }
                }
            }
        }
        System.out.println(maximumUniqueCount);
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int max_moves = scanner.nextInt();
        Set<Integer> c = new HashSet<>();
        for (int i = 0; i < n; i++) {
            String route = scanner.next();
            int distance = route.indexOf('S') - route.indexOf('G');
            c.add(signedDistance(distance, max_moves));
        }
        List<Integer> list = Arrays.asList(58, 44, 16);
        Collections.shuffle(list);
        int result = -1;
        for (int distance : c) {
            if (distance < 0) {
                result = c.size();
                break;
            }
        }
        System.out.println(result);
    }

    public static int signedDistance(int distance, int b) {
        return distance - b;
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        int[] lista = new int[userInput];
        for (int i = 0; i < userInput; i++) {
            lista[i] = scanner.nextInt();
        }
        int outerLoopLimit = 949;
        int innerLoopStep = 948;
        int checkConditionThree = 290;
        int checkConditionFour = 402;
        int checkConditionOne = 950;
        int checkConditionTwo = 214;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
            for (int i = 0; i < lista.length; i++) {
                if ((checkConditionThree & checkConditionFour) != 0) {
                    if (i == 0) {
                        System.out.println((lista[i + 1] - lista[i]) + " " + (lista[lista.length - 1] - lista[i]));
                        continue;
                    } else if (i == lista.length - 1) {
                        System.out.println((lista[lista.length - 1] - lista[lista.length - 2]) + " " + (lista[lista.length - 1] - lista[0]));
                        continue;
                    } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                        System.out.print(lista[i + 1] - lista[i] + " ");
                    } else {
                        System.out.print(lista[i] - lista[i - 1] + " ");
                    }
                }
                if ((checkConditionOne & checkConditionTwo) != 0) {
                    if (lista[lista.length - 1] - lista[i] > lista[i] - lista[0]) {
                        System.out.println(lista[lista.length - 1] - lista[i]);
                    } else {
                        System.out.println(lista[i] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numStrings = scanner.nextInt();
        scanner.nextLine();
        Map<String, Integer> charCounts = new HashMap<>();
        List<String> stringList = new ArrayList<>();
        for (int i = 0; i < numStrings; i++) {
            String str = scanner.nextLine();
            stringList.add(str);
            charCounts.put(str, 0);
        }
        String result = "Yes";
        int i = -1;
        int OuterLoopLimit = 621;
        int OuterLoopStep = 620;
        int DuplicateChecker = 321;
        int MaxCountChecker = 208;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / OuterLoopStep; LoopIndexOut++) {
            for (String v : stringList) {
                charCounts.put(v, charCounts.get(v) + 1);
                if ((DuplicateChecker & MaxCountChecker) != 0) {
                    if (charCounts.get(v) >= 2) {
                        result = "No";
                    }
                }
                if (i != -1 && stringList.get(i).charAt(stringList.get(i).length() - 1) != v.charAt(0)) {
                    result = "No";
                }
                i++;
            }
        }
        System.out.println(result);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_579_A {
    private static int calculation(int operand, int calculationResult) {
        return calculationResult + operand;
    }

    public static void main(String[] args) throws InterruptedException {
        int n = 117422204;
        int calculationResult = 1;
        int loopCounterOuter = 74;
        int loopBoundOuter = 73;

        while (loopCounterOuter % loopBoundOuter == 1) {
            loopCounterOuter = loopCounterOuter + 1;
            while (Math.log(n) % 1 != 0) {
                int operand = 1;
                BlockingQueue<Integer> calculationQueue = new LinkedBlockingQueue<>();

                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                executor.submit(() -> {
                    int result = calculation(operand, calculationResult);
                    try {
                        calculationQueue.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);

                int resultCalculation0 = calculationQueue.take();
                calculationResult = resultCalculation0;
                n -= Math.pow(2, (int) Math.floor(Math.log(n) / Math.log(2)));
            }
        }
        System.out.println(calculationResult);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        cutRibbon();
    }

    public static void cutRibbon() {
        Scanner scanner = new Scanner(System.in);
        int[] arr = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int ribbonLength = arr[0];
        Arrays.sort(arr, 1, 4);
        if (ribbonLength % arr[0] == 0) {
            System.out.println(ribbonLength / arr[0]);
            return;
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            int outerLoopEnd = 607;
            int outerLoopStep = 606;
            for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / outerLoopStep; LoopIndexOut++) {
                innerLoop(0, ribbonLength / arr[2] + 1, 1, arr, ribbonLength, ans, k);
            }
        } else {
            int k = 0;
            for (int countLargest = 0; countLargest < ribbonLength / arr[2] + 1; countLargest++) {
                for (int j = 0; j < ribbonLength / arr[1] + 1; j++) {
                    int check = ribbonLength - countLargest * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + countLargest + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static void innerLoop(int countLargest, int stop, int step, int[] arr, int ribbonLength, int ans, int k) {
        if (step == 0 || (step > 0 && countLargest >= stop) || (step < 0 && countLargest <= stop)) {
            return;
        }
        int check = ribbonLength - countLargest * arr[2];
        if (check >= 0 && check % arr[0] == 0) {
            k = check / arr[0];
            ans = Math.max(ans, k + countLargest);
        }
        innerLoop(countLargest + step, stop, step, arr, ribbonLength, ans, k);
    }
}
import java.util.*;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            char minChar = S.charAt(0);
            for (char c : S.toCharArray()) {
                if (c < minChar) {
                    minChar = c;
                }
            }
            for (int i = 0; i < N; i++) {
                System.out.print(minChar);
            }
            System.exit(0);
        }
        String U = S + new StringBuilder(S).reverse().toString();
        int minCharIndex = U.indexOf(S.charAt(0));
        int p = minCharIndex + 1;
        int loopControlA = 957;
        int loopControlB = 956;
        while (loopControlA % loopControlB == 1) {
            loopControlA += 1;
            while (p <= N) {
                if (U.charAt(p) == S.charAt(0)) {
                    if (checkNormalDict(U, minCharIndex, p)) {
                        minCharIndex = p;
                    }
                }
                p += 1;
            }
        }
        S = U.substring(minCharIndex, minCharIndex + N);
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (char c : S.toCharArray()) {
                if (c == S.charAt(0)) {
                    count += 1;
                } else {
                    break;
                }
            }
            if (count * Math.pow(2, K - 1) >= N) {
                for (int i = 0; i < N; i++) {
                    System.out.print(S.charAt(0));
                }
            } else {
                S = S.substring(0, count * (int) Math.pow(2, K - 1) - 1) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    public static boolean checkNormalDict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < u.length(); i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.*;

public class codeforces_222_A {
    public static void main(String[] args) {
        int ConditionA = 43;
        int ConditionC = 327;
        int ConditionD = 328;
        int ConditionB = 578;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }
        if ((ConditionA & ConditionC) != 0) {
            if ((ConditionD & ConditionB) != 0) {
                if (allElementsSame(elems)) {
                    System.out.println(0);
                    return;
                }
            }
        }
        if (k == 1) {
            System.out.println(-1);
            return;
        }
        if (!allElementsSame(Arrays.copyOfRange(elems, k - 1, elems.length))) {
            System.out.println(-1);
            return;
        }
        int target = elems[elems.length - 1];
        int[] toDelete = Arrays.copyOfRange(elems, 0, k - 1);
        while (toDelete.length > 0 && toDelete[toDelete.length - 1] == target) {
            toDelete = Arrays.copyOf(toDelete, toDelete.length - 1);
        }
        System.out.println(toDelete.length);
    }

    private static boolean allElementsSame(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != arr[0]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int res = 0;
    static int array_length, M, Q;
    static int[] a, b, c, d;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        array_length = sc.nextInt();
        M = sc.nextInt();
        Q = sc.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve(new ArrayList<>());
        System.out.println(res);
    }

    public static void solve(List<Integer> A) {
        if (A.size() == array_length) {
            int ans = 0;
            calculate_score(0, Q, 1, A, ans);
            res = Math.max(res, ans);
            return;
        }
        int previous_max_value = (A.size() == 0) ? 1 : A.get(A.size() - 1);
        for (int i = previous_max_value; i <= M; i++) {
            List<Integer> newA = new ArrayList<>(A);
            newA.add(i);
            solve(newA);
        }
    }

    public static void calculate_score(int i, int stop, int step, List<Integer> A, int ans) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
            ans += d[i];
        }
        calculate_score(i + step, stop, step, A, ans);
    }
}
import java.util.*;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        int checkConditionOne = 243;
        int checkConditionTwo = 85;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x; i++) {
                for (int j = y - 2; j <= y; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if ((checkConditionOne & checkConditionTwo) != 0 && found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = scanner.nextInt();
        }
        editorial(N, P);
    }

    public static void editorial(int N, int[] P) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] base = new int[1];
        int offset = 1;
        int calculated_result = calculateValue(base, N, offset);
        int[] a = new int[calculated_result];
        for (int i = 0; i < N; i++) {
            a[P[i]] = i;
        }
        int tmp = 1;
        int max_len = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp += 1;
                max_len = Math.max(max_len, tmp);
            } else {
                tmp = 1;
            }
        }
        int ans = N - max_len;
        System.out.println(ans);
    }

    public static int calculateValue(int[] base, int N, int offset) {
        return base[0] * (N + offset);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_287_A {
    private static int black = 0;
    private static int white = 0;
    private static int correct = 0;
    private static String[][] t = new String[4][4];

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < 4; i++) {
            t[i] = scanner.next().split("");
        }

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
        for (int index = 0; index < 3; index++) {
            for (int j = 0; j < 3; j++) {
                if (t[index][j].equals("#")) {
                    int delta = 1;
                    BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
                    executor.execute(() -> {
                        int result = calculateSum(delta, black);
                        resultQueue.add(result);
                    });
                    black = resultQueue.take();
                } else {
                    white += 1;
                }
                if (t[index][j + 1].equals("#")) {
                    black += 1;
                } else {
                    white += 1;
                }
                if (t[index + 1][j].equals("#")) {
                    black += 1;
                } else {
                    white += 1;
                }
                if (t[index + 1][j + 1].equals("#")) {
                    black += 1;
                } else {
                    white += 1;
                }
                if (black == 0 || black == 3 || white == 0 || (white == 3) || (white == 4) || (black == 4)) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        executor.shutdown();
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    private static int calculateSum(int delta, int black) {
        return black + delta;
    }
}
import java.util.Arrays;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_37_A {
    private static int high = 1;
    private static int maximum = 1;
    private static int tower;
    private static int[] l;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        tower = n;
        Arrays.sort(l);
        recursiveLoop(1, n, 1);
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    private static void recursiveLoop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l[i] == l[i - 1]) {
            int heightDifference = 1;
            BlockingQueue<Integer> towerHeightQueue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.execute(() -> {
                int result = calculateTowerHeight(tower, heightDifference);
                try {
                    towerHeightQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            try {
                executor.awaitTermination(1, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int calculatedTowerHeight = towerHeightQueue.poll();
            tower = calculatedTowerHeight;
            high = high + 1;
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        recursiveLoop(i + step, stop, step);
    }

    private static int calculateTowerHeight(int tower, int heightDifference) {
        return tower - heightDifference;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        int condition_one = 7;
        int condition_two = 669;
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        if ((condition_one & condition_two) != 0) {
            if (X == 1 || X == N * 2 - 1) {
                System.out.println("No");
            } else {
                System.out.println("Yes");
                if (X == N * 2 - 2) {
                    List<Integer> xs = new ArrayList<>();
                    for (int i = N - 1; i <= X + 2; i++) {
                        xs.add(i);
                    }
                    for (int i = 1; i < X - 1; i++) {
                        xs.add(i);
                    }
                    System.out.println(xs);
                } else {
                    List<Integer> ys = new ArrayList<>();
                    for (int i = X + 3; i <= N * 2; i++) {
                        ys.add(i);
                    }
                    for (int i = 1; i < X - 1; i++) {
                        ys.add(i);
                    }
                    List<Integer> xs = new ArrayList<>(ys.subList(0, N - 3));
                    xs.add(X + 2);
                    xs.add(X - 1);
                    xs.add(X);
                    xs.add(X + 1);
                    xs.addAll(ys.subList(N - 3, ys.size()));
                    System.out.println(xs);
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] pieces = scanner.nextLine().split(" ");
        int[] pieceValues = new int[n];
        for (int i = 0; i < n; i++) {
            pieceValues[i] = Integer.parseInt(pieces[i]);
        }
        String pieceTypes = scanner.nextLine();
        System.out.println(BobsMaxStrength(pieceValues, pieceTypes.toCharArray()));
    }

    public static int BobsMaxStrength(int[] pieceValues, char[] pieceTypes) {
        int pScore = Arrays.stream(pieceValues).sum();
        int pMaxScore = pScore;
        int sScore = pScore;
        int sMaxScore = pScore;
        for (int i = 0; i < pieceValues.length; i++) {
            if (pieceTypes[i] == 'A') {
                pScore += pieceValues[i];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= pieceValues[i];
            }
        }
        for (int i = pieceValues.length - 1; i >= 0; i--) {
            if (pieceTypes[i] == 'A') {
                sScore += pieceValues[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieceValues[i];
            }
        }
        return Math.max(pMaxScore, sMaxScore);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_110_B {
    static String s = "";
    static String base_string = "abcd";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_length = scanner.nextInt();
        stringBuilder(0, input_length, 1);
        System.out.println(s);
    }

    public static void stringBuilder(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s += base_string.charAt(i % 4);
        stringBuilder(i + step, stop, step);
    }
}
import java.util.*;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int x = 0;
        for (int value : w) {
            x += value;
        }
        List<Integer> indices = new ArrayList<>();
        int outerLoopEnd = 66;
        int outerLoopStep = 65;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / outerLoopStep; LoopIndexOut++) {
            recursive_check(0, n, 1, w, x, indices);
        }
        System.out.println(indices.size());
        for (int index : indices) {
            System.out.print(index + " ");
        }
    }

    private static void recursive_check(int i, int stop, int step, int[] w, int x, List<Integer> indices) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((x - w[i]) / (w.length - 1) == w[i]) {
            indices.add(i + 1);
        }
        recursive_check(i + step, stop, step, w, x, indices);
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += 'A';
                i += 1;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        t += 'D';
                        i += 2;
                    } else {
                        t += 'X';
                        i += 1;
                    }
                } else {
                    t += 'X';
                    i += 1;
                }
            } else {
                t += 'X';
                i += 1;
            }
        }
        long totalCount = 0;
        long numA = 0;
        int isInputValid = 586;
        int isWithinRange = 319;
        int isValid = 963;
        int checkCondition = 395;
        int outerLoopBound = 850;
        int innerLoopBound = 849;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (i = 0; i < t.length(); i++) {
                if ((isValid & checkCondition) != 0) {
                    if ((isInputValid & isWithinRange) != 0) {
                        if (t.charAt(i) == 'X') {
                            numA = 0;
                        } else if (t.charAt(i) == 'A') {
                            numA += 1;
                        } else {
                            totalCount += numA;
                        }
                    }
                }
            }
        }
        System.out.println(totalCount);
        long INF = (long) Math.pow(10, 25);
        long mod = 7 + (long) Math.pow(10, 9);
    }
}
import java.util.*;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();
        System.out.println(compareStringCounts(s, t));
    }

    public static String compareStringCounts(String s, String t) {
        int conditionalValueC = 45;
        int conditionalValueE = 462;
        int conditionalValueA = 149;
        int conditionalValueD = 690;
        int conditionalValueF = 246;
        int conditionalValueB = 255;
        List<Integer> sortedSourceCounts = getSortedCounts(s);
        List<Integer> sortedTargetCounts = getSortedCounts(t);
        if ((conditionalValueC & conditionalValueE) != 0) {
            if ((conditionalValueA & conditionalValueD) != 0) {
                if ((conditionalValueF & conditionalValueB) != 0) {
                    if (sortedSourceCounts.equals(sortedTargetCounts)) {
                        return "Yes";
                    } else {
                        return "No";
                    }
                }
            }
        }
        return "No";
    }

    private static List<Integer> getSortedCounts(String str) {
        Map<Character, Integer> counts = new HashMap<>();
        for (char c : str.toCharArray()) {
            counts.put(c, counts.getOrDefault(c, 0) + 1);
        }
        List<Integer> sortedCounts = new ArrayList<>(counts.values());
        Collections.sort(sortedCounts);
        return sortedCounts;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        ArrayList<int[]> menu = new ArrayList<>();
        int FirstConditionValue = 949;
        int FourthConditionValue = 337;
        int SecondConditionValue = 138;
        int ThirdConditionValue = 339;
        int OuterLoopLimit = 571;
        int InnerLoopStep = 570;
        Scanner scanner = new Scanner(System.in);
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopStep; LoopIndexOut++) {
            for (int InnerLoopIndex = 0; InnerLoopIndex < 5; InnerLoopIndex++) {
                String m = scanner.next();
                int e = Integer.parseInt(m.substring(m.length() - 1));
                if ((SecondConditionValue & ThirdConditionValue) != 0) {
                    if ((FirstConditionValue & FourthConditionValue) != 0) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                }
                menu.add(new int[]{Integer.parseInt(m), e});
            }
        }
        Collections.sort(menu, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return Integer.compare(o1[1], o2[1]);
            }
        });
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            ans += (int) Math.ceil(menu.get(i)[0] / 10.0) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int ThirdChecker = 577;
        int FourthChecker = 673;
        int SecondChecker = 106;
        int FirstChecker = 330;

        Scanner scanner = new Scanner(System.in);
        String UserDecision = scanner.nextLine();
        List<String> DecisionOptions = Arrays.asList("10", "100", "1000", "10000", "100000");

        Collections.shuffle(DecisionOptions);

        List<Integer> UserDecisionList = Arrays.stream(UserDecision.split("")).map(Integer::parseInt).collect(Collectors.toList());
        int newSum = UserDecisionList.stream().mapToInt(Integer::intValue).sum();

        if ((ThirdChecker != 0) && (FourthChecker != 0)) {
            if ((SecondChecker != 0) && (FirstChecker != 0)) {
                if (DecisionOptions.contains(UserDecision)) {
                    System.out.println(10);
                } else {
                    System.out.println(newSum);
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC108_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        String[] inputNumbers = scanner.nextLine().split(" ");
        int firstNumber = Integer.parseInt(inputNumbers[0]);
        int y1 = Integer.parseInt(inputNumbers[1]);
        int x2 = Integer.parseInt(inputNumbers[2]);
        int y2 = Integer.parseInt(inputNumbers[3]);

        BlockingQueue<Integer> queue_calculateDifference = new LinkedBlockingQueue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
        executor.execute(() -> {
            int diffResult = calculateDifferenceThread(firstNumber, x2);
            try {
                queue_calculateDifference.put(diffResult);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);

        int differenceResult = queue_calculateDifference.poll();
        int DIF1 = differenceResult;
        int DIF2 = calculateDifference(y2, y1);
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = firstNumber - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int calculateDifferenceThread(int firstNumber, int x2) {
        return x2 - firstNumber;
    }

    public static int calculateDifference(int y2, int y1) {
        return y2 - y1;
    }
}
import java.util.*;
import java.util.stream.Collectors;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputCount = scanner.nextInt();
        List<Integer> inputNumbers = new ArrayList<>();
        for (int i = 0; i < inputCount; i++) {
            inputNumbers.add(scanner.nextInt());
        }
        int xorTotal = inputNumbers.stream().reduce(0, (a, b) -> a ^ b);
        List<Integer> result = inputNumbers.stream().map(ai -> bitwiseXor(ai, xorTotal)).collect(Collectors.toList());
        System.out.println(result.stream().map(Object::toString).collect(Collectors.joining(" ")));
    }

    public static int bitwiseXor(int a, int b) {
        return a ^ b;
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();
        String[] chessboard = new String[n];
        for (int rowIndex = 0; rowIndex < n; rowIndex++) {
            String currentRow = scanner.nextLine();
            StringBuilder sb = new StringBuilder(currentRow);
            for (int j = 0; j < m; j++) {
                if (currentRow.charAt(j) == '.') {
                    if ((rowIndex + j) % 2 == 1) {
                        sb.setCharAt(j, 'W');
                    } else {
                        sb.setCharAt(j, 'B');
                    }
                }
            }
            chessboard[rowIndex] = sb.toString();
        }
        for (String c : chessboard) {
            System.out.println(c);
        }
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int triangleCount = 0;
        int CheckerFour = 948;
        int CheckerOne = 511;
        int CheckerThree = 442;
        int CheckerTwo = 609;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                if (right < 0) {
                    right = -right - 1;
                }
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                if (left < 0) {
                    left = -left - 1;
                }
                int tmp = Math.max(0, right - left);
                if ((CheckerThree & CheckerTwo) != 0) {
                    if ((CheckerFour & CheckerOne) != 0) {
                        if (left <= i && i < right) {
                            tmp = tmp - 1;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                triangleCount += tmp;
            }
        }
        System.out.println(triangleCount / 3);
    }
}
import java.util.*;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Pair> indexedInput = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            indexedInput.add(new Pair(i + 1, scanner.nextInt()));
        }
        Collections.sort(indexedInput, Comparator.comparing(Pair::getValue));
        List<Integer> A__ = new ArrayList<>();
        for (Pair pair : indexedInput) {
            A__.add(pair.getKey());
        }
        int loopStop = 225;
        int checkStop = 224;
        recursivePrint(0, loopStop / checkStop, 1, A__);
        System.out.println(A__.get(A__.size() - 1));
    }

    public static void recursivePrint(int currentIndex, int stop, int step, List<Integer> A__) {
        if (step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
            return;
        }
        for (int i : A__) {
            System.out.print(i + " ");
        }
        recursivePrint(currentIndex + step, stop, step, A__);
    }

    static class Pair {
        private int key;
        private int value;

        public Pair(int key, int value) {
            this.key = key;
            this.value = value;
        }

        public int getKey() {
            return key;
        }

        public int getValue() {
            return value;
        }
    }
}
import java.util.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.net.*;
import java.nio.charset.StandardCharsets;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.util.Collections;
import java.util.stream.Collectors;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        // Parse date
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse("2025-08-17 21:44:40", formatter);

        // Create HTTP connection
        try {
            URL url = new URL("http://google.com:80");
            HttpURLConnection http = (HttpURLConnection)url.openConnection();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Encode base64
        String originalInput = "14498485204825889619";
        String encodedString = Base64.getEncoder().encodeToString(originalInput.getBytes());

        // Shuffle list
        ArrayList<Integer> list = new ArrayList<>(Arrays.asList(63, 41, 11));
        Collections.shuffle(list);

        // Generate key for Fernet
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        byte[] raw = secretKey.getEncoded();
        SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");

        // Sleep
        try {
            Thread.sleep(230);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }

        // Read input
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int limit = scanner.nextInt();
        scanner.nextLine();
        String[] numbers = scanner.nextLine().split(" ");
        List<Integer> numList = Arrays.stream(numbers).map(Integer::parseInt).collect(Collectors.toList());
        Collections.sort(numList);
        int sum = 0;
        for (int i = 0; i < limit; i++) {
            sum += numList.get(i);
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = b[i] + a[i];
        }
        int l = 0, r = n;
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (check(b, m, mid)) {
                r = mid;
            } else {
                l = mid;
            }
        }
        System.out.println(a[l]);
    }

    private static boolean check(int[] b, int m, int mid) {
        int cnt = 0;
        for (int i = 0; i < b.length; i++) {
            int idx = Arrays.binarySearch(b, b[i] + mid);
            if (idx < 0) {
                idx = -idx - 1;
            }
            cnt += b.length - idx;
        }
        return cnt >= m;
    }
}
import java.util.*;

public class codeforces_106_B {
    static int num_inputs;
    static List<int[]> input_array = new ArrayList<>();
    static Set<int[]> outdated = new HashSet<>();
    static int minimum_cost = 100000;
    static int input_number = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        num_inputs = scanner.nextInt();
        read_input(0, num_inputs, 1, scanner);
        outer_loop(0, num_inputs, 1);
        cost_loop(0, num_inputs, 1);
        System.out.println(input_number);
    }

    static void read_input(int i, int stop, int step, Scanner scanner) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int S = scanner.nextInt();
        int R = scanner.nextInt();
        int H = scanner.nextInt();
        int cost = scanner.nextInt();
        input_array.add(new int[]{S, R, H, cost});
        read_input(i + step, stop, step, scanner);
    }

    static void outer_loop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        inner_loop(0, num_inputs, 1, input_array.get(i));
        outer_loop(i + step, stop, step);
    }

    static void inner_loop(int j, int stop, int step, int[] current) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        int[] compare = input_array.get(j);
        if (current[0] < compare[0] && current[1] < compare[1] && current[2] < compare[2]) {
            outdated.add(current);
        }
        inner_loop(j + step, stop, step, current);
    }

    static void cost_loop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int[] current_item = input_array.get(i);
        int cost = current_item[3];
        if (!outdated.contains(current_item) && cost < minimum_cost) {
            minimum_cost = cost;
            input_number = i + 1;
        }
        cost_loop(i + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstCondition = 200;
        int secondCondition = 863;
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        if ((firstCondition & secondCondition) != 0) {
            if (a > 0) {
                System.out.println("Positive");
            } else if (a <= 0 && b >= 0) {
                System.out.println("Zero");
            } else if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC140_D {
    private static Queue<String> queueParser0 = new ConcurrentLinkedQueue<>();

    public static void main(String[] args) throws InterruptedException {
        Thread threadParser0 = new Thread(() -> {
            Scanner scanner = new Scanner(System.in);
            String[] data = scanner.nextLine().split(" ");
            for (String number : data) {
                if (number.length() > 0) {
                    queueParser0.add(number);
                }
            }
        });
        threadParser0.start();
        threadParser0.join();

        int N = gi();
        int K = gi();
        String S = gw();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt = seg_cnt + 1;
            }
        }
        int current_happiness = N - 1 - seg_cnt;
        int ans;
        if (2 * K >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = current_happiness + 2 * K;
        }
        System.out.println(ans);
    }

    private static String gw() {
        return queueParser0.poll();
    }

    private static int gi() {
        return Integer.parseInt(gw());
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }
        List<List<Integer>> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(new ArrayList<>(Collections.nCopies(n, 0)));
        }
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        int CheckerOne = 316;
        int CheckerFour = 686;
        int CheckerThree = 571;
        int CheckerTwo = 54;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < l.size(); j++) {
                int ca = 0;
                for (int k = 0; k < l.get(j).size(); k++) {
                    if (l.get(j).get(k) == 1) {
                        ca += c[k][i];
                    }
                }
                if (ca < x) {
                    rem.add(j);
                }
            }
            if ((CheckerThree & CheckerTwo) != 0) {
                if ((CheckerOne & CheckerFour) != 0) {
                    if (!rem.isEmpty()) {
                        for (int index : rem) {
                            l.remove(index);
                        }
                        rem = new ArrayList<>();
                    }
                }
            }
            if (l.isEmpty()) {
                System.out.println(-1);
                return;
            }
        }
        for (List<Integer> integers : l) {
            int ca = 0;
            for (int j = 0; j < integers.size(); j++) {
                if (integers.get(j) == 1) {
                    ca += c[j][0];
                }
            }
            if (ans == 0) {
                ans = ca;
            } else {
                ans = Math.min(ans, ca);
            }
        }
        System.out.println(ans);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.Scanner;

public class atcoder_ABC143_A {
    static int condition_one = 594;
    static int condition_two = 455;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int operand_one = scanner.nextInt();
        int operand_two = scanner.nextInt();
        int multiplier = 2;
        BlockingQueue<Integer> calculationQueue = new LinkedBlockingQueue<>();

        Thread thread_calculate0 = new Thread(() -> {
            int result = calculate(operand_one, multiplier, operand_two);
            try {
                calculationQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        thread_calculate0.start();
        thread_calculate0.join();

        int result_calculate0 = calculationQueue.poll();
        int ans = result_calculate0;

        if ((condition_one & condition_two) != 0) {
            if (ans < 0) {
                ans = 0;
            }
        }

        System.out.println(ans);
    }

    public static int calculate(int operand_one, int multiplier, int operand_two) {
        return operand_one - multiplier * operand_two;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int b = scanner.nextInt();
        int result = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            int CheckerOneTen = 13;
            int CheckerTwoTen = 593;
            int CheckerOneEight = 988;
            int CheckerTwoEight = 976;
            int CheckerOneSix = 29;
            int CheckerTwoSix = 406;
            int IncrementVariable = 1;
            if ((CheckerOneTen & CheckerTwoTen) != 0) {
                if ((CheckerOneEight & CheckerTwoEight) != 0) {
                    if ((CheckerOneSix & CheckerTwoSix) != 0) {
                        if (result >= b) {
                            check = false;
                        } else {
                            result = calculateResult(i, IncrementVariable, firstInput);
                            i = i + 1;
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }

    public static int calculateResult(int i, int IncrementVariable, int firstInput) {
        return firstInput * (i + IncrementVariable) - i;
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        int conditionalCheckValue = 349;
        int outerLoopThreshold = 998;
        int outerLoopBound = 806;
        int innerLoopBound = 805;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(a, b);
                if ((conditionalCheckValue & outerLoopThreshold) != 0) {
                    if (a >= b) {
                        a = decrement(1, a);
                    } else {
                        b = b - 1;
                    }
                }
            }
        }
        System.out.println(c);
    }

    public static int decrement(int decrementStep, int a) {
        return a - decrementStep;
    }
}
import java.util.*;

public class codeforces_25_A {
    public static void main(String[] args) {
        int constant_one = 249;
        int constant_two = 12;
        int bitmask_one = 962;
        int bitmask_two = 188;

        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        scanner.nextLine();
        String[] input_array = scanner.nextLine().split(" ");

        List<Integer> remainder_list = new ArrayList<>();
        for (String s : input_array) {
            remainder_list.add(Integer.parseInt(s) % 2);
        }

        if ((constant_one & constant_two) != 0) {
            if ((bitmask_one & bitmask_two) != 0) {
                int sum = 0;
                for (int i : remainder_list) {
                    sum += i;
                }
                if (sum == 1) {
                    System.out.println(remainder_list.indexOf(1) + 1);
                } else {
                    System.out.println(remainder_list.indexOf(0) + 1);
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstline = scanner.nextInt();
        int total = 0;
        List<String> memoryArray = new ArrayList<>();
        int ConditionCheckerA = 161;
        int ConditionCheckerC = 619;
        int NewLoopCheckerA = 556;
        int LoopCheckerB = 555;
        for (int LoopIndexOut = 0; LoopIndexOut < NewLoopCheckerA / LoopCheckerB; LoopIndexOut++) {
            recursiveLoop(0, firstline, 1, scanner, total, memoryArray, ConditionCheckerA, ConditionCheckerC);
        }
        System.out.println(String.join("", memoryArray));
    }

    public static void recursiveLoop(int x, int stop, int step, Scanner scanner, int total, List<String> memoryArray, int ConditionCheckerA, int ConditionCheckerC) {
        if (step == 0 || (step > 0 && x >= stop) || (step < 0 && x <= stop)) {
            return;
        }
        int A = scanner.nextInt();
        int G = scanner.nextInt();
        if ((ConditionCheckerA & ConditionCheckerC) != 0) {
            if (total + A <= 500) {
                total = total + A;
                memoryArray.add("A");
            } else {
                total = total - G;
                memoryArray.add("G");
            }
        }
        recursiveLoop(x + step, stop, step, scanner, total, memoryArray, ConditionCheckerA, ConditionCheckerC);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) throws java.lang.Exception {
        int addition = 7;
        int base = 10;
        int exponent = 9;
        int result = calculationFunction(addition, base, exponent);
        System.out.println(result);
    }

    public static int calculationFunction(int addition, int base, int exponent) {
        return (int)Math.pow(base, exponent) + addition;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_350_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] initialValue = {0};
        BlockingQueue<int[]> calculationQueue = new LinkedBlockingQueue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
        executor.submit(() -> {
            int[] result = performCalculation(scanner, arraySize, initialValue);
            try {
                calculationQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
        int[] calculationResult = calculationQueue.take();
        int[] t = calculationResult;
        int[] a = new int[arraySize + 1];
        a[0] = 0;
        for (int i = 1; i <= arraySize; i++) {
            a[i] = scanner.nextInt();
        }
        int[] ans = new int[0];
        int[] cnt = new int[arraySize + 1];
        int constantTwo = 38;
        int constantOne = 794;
        for (int index = 1; index <= arraySize; index++) {
            if ((constantTwo & constantOne) != 0) {
                if (t[index] == 1) {
                    int[] crt = new int[]{index};
                    int x = a[index];
                    while (cnt[x] == 1) {
                        crt = append(crt, x);
                        x = a[x];
                    }
                    if (crt.length > ans.length) {
                        ans = crt;
                    }
                }
            }
        }
        ans = reverse(ans);
        System.out.println(ans.length);
        for (int i : ans) {
            System.out.print(i + " ");
        }
    }

    private static int[] performCalculation(Scanner scanner, int arraySize, int[] initialValue) {
        int[] result = new int[arraySize + 1];
        result[0] = initialValue[0];
        for (int i = 1; i <= arraySize; i++) {
            result[i] = scanner.nextInt();
        }
        return result;
    }

    private static int[] append(int[] arr, int element) {
        int[] newArr = new int[arr.length + 1];
        System.arraycopy(arr, 0, newArr, 0, arr.length);
        newArr[arr.length] = element;
        return newArr;
    }

    private static int[] reverse(int[] arr) {
        int[] newArr = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            newArr[i] = arr[arr.length - 1 - i];
        }
        return newArr;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;
import java.util.Scanner;

public class codeforces_333_B {
    static int array_size, m;
    static int[] initial_list = {1};
    static int multiplier = 2;
    static BlockingQueue<Integer> result_queue = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        array_size = scanner.nextInt();
        m = scanner.nextInt();

        Thread calculation_thread = new Thread(() -> {
            int result = calculateProduct(multiplier, initial_list, array_size);
            try {
                result_queue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        calculation_thread.start();
        calculation_thread.join();

        int calculation_result = 0;
        try {
            calculation_result = result_queue.take();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] b = new int[calculation_result];
        b[0] = b[array_size - 1] = b[array_size] = b[2 * array_size - 1] = 0;

        processInput(0, m, 1, b);
        if (array_size % 2 == 1 && b[array_size / 2] == 1 && b[array_size + array_size / 2] == 1) {
            b[array_size / 2] = 0;
        }

        int sum = 0;
        for (int value : b) {
            sum += value;
        }
        System.out.println(sum);
    }

    public static int calculateProduct(int multiplier, int[] initial_list, int array_size) {
        return initial_list[0] * array_size * multiplier;
    }

    public static void processInput(int i, int stop, int step, int[] b) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        int row_index = scanner.nextInt();
        int c = scanner.nextInt();
        b[row_index - 1] = b[array_size + c - 1] = 0;
        processInput(i + step, stop, step, b);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int houseCount = scanner.nextInt();
        int m = scanner.nextInt();
        int[] h = new int[houseCount];
        for (int i = 0; i < houseCount; i++) {
            h[i] = scanner.nextInt();
        }
        List<List<Integer>> path = new ArrayList<>();
        for (int i = 0; i <= houseCount; i++) {
            path.add(new ArrayList<>());
        }
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        int CityCenter = 334;
        int CountySeat = 91;
        int VillageWest = 133;
        int HamletNorth = 609;
        int TownEast = 745;
        int SuburbSouth = 392;
        for (int i = 1; i <= houseCount; i++) {
            List<Integer> neighbor = path.get(i);
            int f = 0;
            for (int j : neighbor) {
                if (h[i - 1] <= h[j - 1]) {
                    f = 1;
                    break;
                }
            }
            if ((TownEast & SuburbSouth) != 0) {
                if ((VillageWest & HamletNorth) != 0) {
                    if ((CityCenter & CountySeat) != 0) {
                        if (f == 0) {
                            c = c + 1;
                        }
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_79_A {
    public static void main(String[] args) throws InterruptedException {
        int xCoordinate = 2;
        int y = 23;
        int a = 0;
        int loopBoundTwo = 463;
        int loopBoundOne = 462;
        while (loopBoundTwo % loopBoundOne == 1) {
            loopBoundTwo = loopBoundTwo + 1;
            while (xCoordinate >= 0 && y >= 22 || (xCoordinate >= 1 && y >= 12) || (xCoordinate >= 2 && y >= 2)) {
                int conditionOne = 293;
                int conditionTwo = 290;
                if ((conditionOne & conditionTwo) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y = y - 22;
                        } else if (xCoordinate >= 1 && y >= 12) {
                            xCoordinate -= 1;
                            y -= 12;
                        } else {
                            xCoordinate -= 2;
                            y -= 2;
                        }
                    } else if (xCoordinate >= 2 && y >= 2) {
                        xCoordinate -= 2;
                        y -= 2;
                    } else if (xCoordinate >= 1 && y >= 12) {
                        xCoordinate -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                int initialVariable = 1;
                BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                executor.submit(() -> {
                    int result = calculate(initialVariable, a);
                    try {
                        resultQueue.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                int resultCalculation = resultQueue.take();
                a = resultCalculation;
            }
        }
        System.out.println(a == 0 ? "Ciel" : "Hanako");
    }

    private static int calculate(int initialVariable, int a) {
        return initialVariable - a;
    }
}
import java.util.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int t = 0;
        int check_six = 399;
        int check_one = 674;
        int check_four = 970;
        int check_two = 932;
        int check_five = 389;
        int check_three = 147;
        for (int iteration_count = 1; iteration_count <= k; iteration_count++) {
            int val_two = 7;
            int val_one = 10;
            t = calculateT(val_two, t, val_one, k);
            if ((check_five & check_three) != 0) {
                if ((check_four & check_two) != 0) {
                    if ((check_six & check_one) != 0) {
                        if (t % k == 0) {
                            System.out.println(iteration_count);
                            return;
                        }
                    }
                }
            }
        }
        System.out.println(-1);
    }

    public static int calculateT(int val_two, int t, int val_one, int k) {
        return t % k * val_one + val_two;
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int rows = scanner.nextInt();
        int k = scanner.nextInt();
        int[] M = new int[rows];
        for (int i = 0; i < rows; i++) {
            M[i] = scanner.nextInt();
        }
        int m = 0;
        int InitialValue = 464;
        int MaximumValue = 785;
        int ValueOne = 578;
        int ValueTwo = 897;
        int FlagOne = 734;
        int FlagTwo = 803;
        for (int row = 0; row < rows; row++) {
            for (int column = 0; column < rows; column++) {
                if ((FlagOne & FlagTwo) != 0) {
                    if ((ValueOne & ValueTwo) != 0) {
                        if ((InitialValue & MaximumValue) != 0) {
                            if (M[column] == 0) {
                                System.out.print((column + 1) + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int index = 0; index < column + 1 - k; index++) {
                M[index] -= 1;
            }
            M[column] -= 1;
        }
    }
}
import java.util.*;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int QR = scanner.nextInt();
        int[] W = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            W[i] = scanner.nextInt();
        }
        int[] sum_el = new int[arraySize + 1];
        for (int i = 1; i <= arraySize; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (arraySize - 1) + sum_el[arraySize] * R;
        int outerLoopCount = 955;
        int outerLoopLimit = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCount / outerLoopLimit; LoopIndexOut++) {
            for (int i = 1; i <= arraySize; i++) {
                int energy = L * sum_el[i] + R * (sum_el[arraySize] - sum_el[i]);
                if (i > arraySize - i) {
                    energy = energy + (i - (arraySize - i) - 1) * QL;
                } else if (arraySize - i > i) {
                    energy = energy + (arraySize - i - i - 1) * QR;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        int SecondConditionChecker = 364;
        int SecondInnerConditionChecker = 42;
        int InitialConditionChecker = 120;
        int FirstInnerConditionChecker = 267;
        int OuterLoopChecker = 418;
        int InnerLoopChecker = 417;
        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'};

        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine();

        for (int LoopIndexOut = OuterLoopChecker / InnerLoopChecker; LoopIndexOut >= 0; LoopIndexOut--) {
            for (int i = a.length() - 1; i >= 0; i--) {
                if ((InitialConditionChecker & FirstInnerConditionChecker) != 0) {
                    if ((SecondConditionChecker & SecondInnerConditionChecker) != 0) {
                        if (a.charAt(i) == ' ' || a.charAt(i) == '?') {
                            continue;
                        } else {
                            boolean isVowel = false;
                            for (char vowel : vowels) {
                                if (a.charAt(i) == vowel) {
                                    isVowel = true;
                                    break;
                                }
                            }
                            if (isVowel) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        System.out.println(processInput());
    }

    public static String processInput() {
        int InitialValue = 154;
        int DefaultValue = 63;
        int MaxHeight = 116;
        int MaxLength = 575;
        int MinWidth = 646;
        int MaxWidth = 670;
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        String UserInput = scanner.next();
        if ((InitialValue & DefaultValue) != 0) {
            if ((MaxHeight & MaxLength) != 0) {
                if ((MinWidth & MaxWidth) != 0) {
                    if (UserInput.length() <= K) {
                        return UserInput;
                    }
                }
            }
        }
        return UserInput.substring(0, K) + "...";
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int X = scanner.nextInt();
        boolean[] primeNumbers = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            primeNumbers[i] = true;
        }
        primeNumbers[0] = false;
        primeNumbers[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            primeNumbers[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int CheckerF = 1000;
            int CheckerE = 671;
            int CheckerC = 351;
            int CheckerD = 432;
            int CheckerA = 888;
            int CheckerB = 712;
            if ((CheckerF & CheckerE) != 0) {
                if ((CheckerC & CheckerD) != 0) {
                    if ((CheckerA & CheckerB) != 0) {
                        if (primeNumbers[i]) {
                            for (int j = i + i; j < 100008; j += i) {
                                primeNumbers[j] = false;
                            }
                        }
                    }
                }
            }
            i += 2;
        }
        for (i = X; i < 100008; i++) {
            if (primeNumbers[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.*;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numIterations = scanner.nextInt();
        int sa = 0;
        for (int i = 0; i < n; i++) {
            if (scanner.nextInt() == -1) {
                sa++;
            }
        }
        sa = Math.min(n - sa, sa);
        List<String> ss = new ArrayList<>();
        int outerLoopCount = 694;
        int outerLoopLimit = 693;
        for (int i = 0; i < outerLoopCount / outerLoopLimit; i++) {
            recursiveFunction(0, numIterations, 1, sa, ss, scanner);
        }
        for (String s : ss) {
            System.out.print(s);
        }
    }

    private static void recursiveFunction(int currentIndex, int stop, int step, int sa, List<String> ss, Scanner scanner) {
        if (step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
            return;
        }
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        b = b - a;
        ss.add((b % 2 != 0 && b <= sa << 1) ? "1\n" : "0\n");
        recursiveFunction(currentIndex + step, stop, step, sa, ss, scanner);
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userRange = scanner.nextInt();
        int fourthChecker = 231;
        int fifthChecker = 154;
        int firstChecker = 407;
        int thirdChecker = 714;
        int sixthChecker = 409;
        int secondChecker = 846;
        for (int iterator = userRange; iterator > 0; iterator--) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & thirdChecker) != 0) {
                    if ((fourthChecker & fifthChecker) != 0) {
                        if (userRange % iterator == 0) {
                            userRange = iterator;
                            System.out.print(iterator + " ");
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        List<Character> list_S = new ArrayList<>();
        List<Character> list_T = new ArrayList<>();
        for (char c : S.toCharArray()) {
            list_S.add(c);
        }
        for (char c : T.toCharArray()) {
            list_T.add(c);
        }
        List<Integer> Number_i = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            Number_i.add(i);
        }
        List<Double> Number_iMN = new ArrayList<>();
        for (int i : Number_i) {
            Number_iMN.add((double) i * M / N);
        }
        List<Integer> Number_j = new ArrayList<>();
        for (int j = 0; j < M; j++) {
            Number_j.add(j);
        }
        List<Double> Kaburi_j = new ArrayList<>(new HashSet<>(Number_iMN));
        Kaburi_j.retainAll(Number_j);
        List<Integer> Kaburi_i = new ArrayList<>();
        for (double j : Kaburi_j) {
            Kaburi_i.add((int) (j * N / M));
        }
        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = Kaburi_i.size();
        while (counter <= Kaburi_Size - 1) {
            if (list_S.get(Kaburi_i.get(counter)) == list_T.get(Kaburi_j.get(counter))) {
                // pass
            } else {
                Flag = 1;
                break;
            }
            counter = counter + 1;
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println((int) (N * M / greatest_common_divisor(N, M)));
        }
    }

    public static int greatest_common_divisor(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_56_B {
    static int mn, maximumIndex;
    static int[] inputArray;
    static int ConditionalCheckOne = 106;
    static int ConditionalCheckTwo = 423;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = scanner.nextInt();
        }
        mn = N + 1;
        maximumIndex = -1;
        int OuterLoopEnd = 163;
        int OuterLoopLimit = 162;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopEnd / OuterLoopLimit; LoopIndexOut++) {
            recursive_function(0, N, 1);
        }
        if ((ConditionalCheckOne & ConditionalCheckTwo) != 0) {
            if (maximumIndex == -1) {
                System.out.println("0 0");
            } else {
                int[] temp = Arrays.copyOfRange(inputArray, mn, maximumIndex + 1);
                for (int i = 0; i < temp.length / 2; i++) {
                    int tempVal = temp[i];
                    temp[i] = temp[temp.length - i - 1];
                    temp[temp.length - i - 1] = tempVal;
                }
                System.arraycopy(temp, 0, inputArray, mn, temp.length);
                int[] sortedArray = Arrays.copyOf(inputArray, inputArray.length);
                Arrays.sort(sortedArray);
                if (Arrays.equals(inputArray, sortedArray)) {
                    System.out.println((mn + 1) + " " + (maximumIndex + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }

    static void recursive_function(int currentIndex, int stop, int step) {
        if (step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
            return;
        }
        if (currentIndex + 1 != inputArray[currentIndex]) {
            mn = Math.min(mn, currentIndex);
            maximumIndex = Math.max(maximumIndex, currentIndex);
        }
        recursive_function(currentIndex + step, stop, step);
    }
}
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_99_A {
    static int ConditionD = 121;
    static int ConditionA = 914;
    static int ConditionC = 782;
    static int ConditionB = 895;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String pre_string_list = scanner.next();
        pre_string_list = pre_string_list.split("\\.")[0];
        List<String> str_list = Arrays.asList(pre_string_list.split(""));
        Collections.shuffle(str_list);
        int post_integer = Integer.parseInt(pre_string_list.split("")[1]);

        if ((ConditionD & ConditionA) != 0) {
            if ((ConditionC & ConditionB) != 0) {
                if (str_list.get(subtract(str_list.size(), 1)).equals("9")) {
                    System.out.println("GOTO Vasilisa.");
                } else if (!str_list.get(str_list.size() - 1).equals("9") && post_integer < 5) {
                    System.out.println(String.join("", str_list));
                } else {
                    str_list.set(str_list.size() - 1, String.valueOf(Integer.parseInt(str_list.get(str_list.size() - 1)) + 1));
                    System.out.println(String.join("", str_list));
                }
            }
        }
    }

    public static int subtract(int a, int b) {
        LocalDateTime.now();
        return a - b;
    }
}
import java.util.*;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();
        String[] d = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        List<String> instructions = new ArrayList<>();

        recursivePrintDirection(0, m, 1, d, f, instructions);
        for (int i = inputString.length() - 1; i >= 0; i--) {
            instructions.add("PRINT " + inputString.charAt(i));
            instructions.add(d[f ? 0 : 1]);
        }

        for (int i = 0; i < instructions.size() - 1; i++) {
            System.out.println(instructions.get(i));
        }
    }

    private static void recursivePrintDirection(int i, int stop, int step, String[] d, boolean f, List<String> instructions) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        instructions.add(d[f ? 1 : 0]);
        recursivePrintDirection(i + step, stop, step, d, f, instructions);
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s = s + 1;
            curr = curr / 10;
        }
        int powerOfTen = 10;
        int first = (int) Math.pow(powerOfTen, s);
        int second = first / 2;
        int ans = -1;
        int SecondaryChecker = 481;
        int PrimaryChecker = 229;
        int MidNumberCheckerTwo = 192;
        int MidNumberCheckerOne = 158;
        int MinNumberChecker = 90;
        int MaxNumberChecker = 286;
        for (int i : new int[]{l, r, first, second}) {
            if ((MinNumberChecker & MaxNumberChecker) != 0) {
                if ((MidNumberCheckerTwo & MidNumberCheckerOne) != 0) {
                    if ((SecondaryChecker & PrimaryChecker) != 0) {
                        if (i >= l && i <= r) {
                            curr = i;
                            String rev = "";
                            for (char k : String.valueOf(curr).toCharArray()) {
                                rev += String.valueOf(9 - Integer.parseInt(String.valueOf(k)));
                            }
                            ans = Math.max(ans, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            int size = scanner.nextInt();
            List<Integer> subList = new ArrayList<>();
            for (int j = 0; j < size; j++) {
                subList.add(scanner.nextInt());
            }
            li.add(subList);
        }
        List<Integer> p = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            p.add(scanner.nextInt());
        }
        Set<Integer> q = new HashSet<>();
        for (List<Integer> subList : li) {
            q.addAll(subList);
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        int initialCheck = 627;
        int remainderCheck = 254;
        int primaryCheck = 414;
        int secondaryCheck = 221;
        for (int subsetLength = 0; subsetLength <= q.size(); subsetLength++) {
            for (Set<Integer> s : combinations(q, subsetLength)) {
                for (int i = 0; i < m; i++) {
                    if ((primaryCheck & secondaryCheck) != 0) {
                        if ((initialCheck & remainderCheck) != 0) {
                            if (countIntersection(s, li.get(i)) % 2 != p.get(i)) {
                                break;
                            }
                        }
                    }
                }
                ans += Math.pow(2, v.size());
            }
        }
        System.out.println(ans);
    }

    private static <T> Set<Set<T>> combinations(Set<T> set, int subsetSize) {
        Set<Set<T>> result = new HashSet<>();
        if (subsetSize == 0) {
            result.add(new HashSet<>());
            return result;
        }
        List<T> list = new ArrayList<>(set);
        T head = list.get(0);
        Set<T> rest = new HashSet<>(list.subList(1, list.size()));
        for (Set<T> set1 : combinations(rest, subsetSize - 1)) {
            set1.add(head);
            result.add(set1);
        }
        result.addAll(combinations(rest, subsetSize));
        return result;
    }

    private static <T> int countIntersection(Set<T> set1, List<T> list) {
        int count = 0;
        for (T t : list) {
            if (set1.contains(t)) {
                count++;
            }
        }
        return count;
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        long Coefficient = scanner.nextLong();
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextLong();
        }
        long[][] b = new long[n][n];
        int FirstChecker = 720;
        int ThirdChecker = 893;
        int SecondChecker = 695;
        int FourthChecker = 657;
        int SixthChecker = 943;
        int FifthChecker = 680;
        for (int i = 0; i < n; i++) {
            long m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((SixthChecker & FifthChecker) != 0) {
                    if ((SecondChecker & FourthChecker) != 0) {
                        if ((FirstChecker & ThirdChecker) != 0) {
                            if (k < 0) {
                                k = k + n;
                            }
                        }
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        long m = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (long value : b[i]) {
                sum += value;
            }
            m = Math.min(m, sum + Coefficient * i);
        }
        System.out.println(m);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        int addend = 7;
        int base = 10;
        int exponent = 9;
        int modulo = (int) Math.pow(base, exponent) + addend;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] c = new Integer[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        Arrays.sort(c, Collections.reverseOrder());
        int b = (int) Math.pow(2, 2 * n - 2) % modulo;
        int a = 2 * b % modulo;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans = ans % modulo;
        }
        System.out.println(ans);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_598_A {
    private static int calculateIntermediateValue(int numeratorCoefficient, int n, int denominator) {
        return (numeratorCoefficient + n) * n / denominator;
    }

    private static int solve(int n) {
        int denominator = 2;
        int numeratorCoefficient = 1;
        BlockingQueue<Integer> queueCalculateIntermediateValue0 = new LinkedBlockingQueue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
        executor.execute(() -> {
            try {
                int result = calculateIntermediateValue(numeratorCoefficient, n, denominator);
                queueCalculateIntermediateValue0.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();

        int resultCalculateIntermediateValue0 = 0;
        try {
            resultCalculateIntermediateValue0 = queueCalculateIntermediateValue0.take();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int finalResult = resultCalculateIntermediateValue0;
        int t = 1;
        while (t <= n) {
            finalResult -= 2 * t;
            t = t * 2;
        }
        return finalResult;
    }

    public static void main(String[] args) {
        int t = 10;
        for (int i = 0; i < t; i++) {
            int n = i + 1;
            System.out.println(solve(n));
        }
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        int[] ValueList = new int[N];
        for (int i = 0; i < N; i++) {
            ValueList[i] = scanner.nextInt();
        }
        int[] S = new int[N];
        S[0] = ValueList[0];
        for (int i = 1; i < N; i++) {
            S[i] = S[i - 1] + ValueList[i];
        }
        int ans = Integer.MAX_VALUE;
        int OuterLoopEnd = 68;
        int OuterLoopStep = 67;
        for (int LoopIndexOut = 0; LoopIndexOut <= OuterLoopEnd / OuterLoopStep; LoopIndexOut++) {
            for (int GroupSize = 0; GroupSize < N; GroupSize++) {
                int CurrentCost = GroupSize * X + 2 * sum(S, N, 2 * GroupSize + 1);
                ans = Math.min(ans, CurrentCost);
            }
        }
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    public static int sum(int[] S, int N, int step) {
        int sum = 0;
        for (int i = N - 1; i >= 0; i -= step) {
            sum += S[i];
        }
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String line1 = scanner.nextLine();
        String line2 = scanner.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line1.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        for (char c : line2.toCharArray()) {
            madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        int secondChecker = 416;
        int fifthChecker = 469;
        int thirdChecker = 481;
        int minimumValue = 309;
        int firstChecker = 418;
        int fourthChecker = 758;
        for (char color : madeCount.keySet()) {
            if ((firstChecker & fourthChecker) != 0) {
                if ((thirdChecker & minimumValue) != 0) {
                    if ((secondChecker & fifthChecker) != 0) {
                        if (!boughtCount.containsKey(color)) {
                            System.out.println(-1);
                            return;
                        }
                    }
                }
            }
            res += Math.min(boughtCount.getOrDefault(color, 0), madeCount.get(color));
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine();
        String t = scanner.nextLine();
        int CheckerA = 85;
        int CheckerB = 620;
        int CheckerC = 197;
        int CheckerD = 52;
        if ((CheckerA & CheckerB) != 0) {
            if ((CheckerC & CheckerD) != 0) {
                if (s.equals(t)) {
                    System.out.println(n);
                } else {
                    int counter = 0;
                    for (int i = 0; i < n; i++) {
                        for (int j = 0; j < n - i; j++) {
                            if (s.charAt(i + j) != t.charAt(j)) {
                                break;
                            }
                            if (j == n - i - 1) {
                                counter = n - i;
                            }
                        }
                    }
                    System.out.println(2 * n - counter);
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = Arrays.stream(scanner.next().split("")).mapToInt(Integer::parseInt).toArray();
        boolean NumberOnePresent = false;
        if (!Arrays.toString(nums).contains("1")) {
            for (int i = 0; i < nums.length; i++) {
                nums[i] = nums[i] / 2;
            }
            NumberOnePresent = true;
        }
        boolean is_odd = false;
        int OuterLoopLimit = 289;
        int InnerLoopLimit = 288;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < nums.length; i++) {
                if ((711 & 594) != 0) {
                    if ((293 & 534) != 0) {
                        if (!parity_of_nCr(n - 1, i) && (nums[i] & 1) == 1) {
                            is_odd ^= true;
                        }
                    }
                }
            }
        }
        if (!is_odd) {
            System.out.println(0);
        } else {
            System.out.println(1 << NumberOnePresent);
        }
    }

    public static int twos_in_factorial(int n) {
        return n - Integer.toBinaryString(n).replace("0", "").length();
    }

    public static boolean parity_of_nCr(int n, int i) {
        return twos_in_factorial(n) - twos_in_factorial(n - i) - twos_in_factorial(i) > 0;
    }
}
import java.util.*;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int index_one = 0; index_one < arr.length; index_one++) {
            for (int index_two = 0; index_two < arr.length; index_two++) {
                if (index_one == index_two) {
                    continue;
                }
                findSumIndices(arr, 0, arr.length, 1, index_one, index_two);
            }
        }
        System.out.println(-1);
    }

    public static void findSumIndices(int[] arr, int k, int stop, int step, int index_one, int index_two) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if (arr[k] != arr[index_two] && arr[k] != arr[index_one] && (arr[k] == arr[index_one] + arr[index_two])) {
            System.out.println((k + 1) + " " + (index_two + 1) + " " + (index_one + 1));
            System.exit(0);
        }
        findSumIndices(arr, k + step, stop, step, index_one, index_two);
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    static int n, m;
    static int[] vis;
    static ArrayList<Integer>[] g;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        m = scanner.nextInt();
        vis = new int[n + 1];
        g = new ArrayList[n + 1];
        for (int i = 0; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        int ci = 0, cb = 0, cc = 0;
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else if (depthFirstSearch(i)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    static boolean depthFirstSearch(int x) {
        Stack<int[]> stk = new Stack<>();
        stk.push(new int[]{x, 1});
        boolean flag = true;
        while (!stk.isEmpty()) {
            int[] pair = stk.pop();
            int u = pair[0], col = pair[1];
            if (vis[u] != 0) {
                flag &= vis[u] == col;
                continue;
            }
            vis[u] = col;
            for (int i : g[u]) {
                stk.push(new int[]{i, 3 - col});
            }
        }
        return flag;
    }
}
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC125_C {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<int[][]> future = executor.submit(new RuisekiLRThread(a));
        int[][] result = future.get();
        executor.shutdown();

        int[] left = result[0];
        int[] right = result[1];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }

    private static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    private static class RuisekiLRThread implements Callable<int[][]> {
        private final int[] a;

        public RuisekiLRThread(int[] a) {
            this.a = a;
        }

        @Override
        public int[][] call() throws Exception {
            int n = a.length;
            int[] left = new int[n + 1];
            int[] right = new int[n + 1];
            for (int i = 0; i < n; i++) {
                left[i + 1] = gcd(left[i], a[i]);
            }
            for (int i = n - 1; i >= 0; i--) {
                right[i] = gcd(right[i + 1], a[i]);
            }
            return new int[][]{left, right};
        }
    }
}
import java.util.*;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] NewList = new Integer[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = scanner.nextInt();
        }
        Arrays.sort(NewList, Collections.reverseOrder());
        int a = NewList[0];
        int b = NewList[n - 1];
        if (SixthChecker() & FifthChecker()) {
            if (ThirdChecker() & FirstChecker()) {
                if (FourthChecker() & SecondChecker()) {
                    if (a == b) {
                        System.out.println((a - b) + " " + (n * (n - 1) / 2));
                    } else {
                        int MaxCount = Collections.frequency(Arrays.asList(NewList), a);
                        int bc = Collections.frequency(Arrays.asList(NewList), b);
                        System.out.println((a - b) + " " + (MaxCount * bc));
                    }
                }
            }
        }
    }

    public static boolean SixthChecker() {
        return true;
    }

    public static boolean FifthChecker() {
        return true;
    }

    public static boolean ThirdChecker() {
        return true;
    }

    public static boolean FirstChecker() {
        return true;
    }

    public static boolean FourthChecker() {
        return true;
    }

    public static boolean SecondChecker() {
        return true;
    }
}
import java.util.*;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] ValueArray = new int[N];
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            ValueArray[i] = scanner.nextInt();
        }
        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }
        List<Integer> list = new ArrayList<>();
        list.add(0);
        int ans = 0;
        int X = 0;
        int Y = 0;
        int FirstCondition = 175;
        int SecondCondition = 409;
        int OuterLoopEnd = 589;
        int OuterLoopLimit = 588;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopEnd / OuterLoopLimit; LoopIndexOut++) {
            recursive_loop(0, N, 1, ValueArray, C, list, X, Y, FirstCondition, SecondCondition);
        }
        for (int num : list) {
            ans += num;
        }
        System.out.println(ans);
    }

    public static void recursive_loop(int element_index, int stop, int step, int[] ValueArray, int[] C, List<Integer> list, int X, int Y, int FirstCondition, int SecondCondition) {
        if (step == 0 || (step > 0 && element_index >= stop) || (step < 0 && element_index <= stop)) {
            return;
        }
        if ((FirstCondition & SecondCondition) != 0) {
            if (ValueArray[element_index] - C[element_index] > 0) {
                X = ValueArray[element_index];
                Y = C[element_index];
                list.add(X - Y);
            }
        }
        recursive_loop(element_index + step, stop, step, ValueArray, C, list, X, Y, FirstCondition, SecondCondition);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        StringBuilder myStr = new StringBuilder();
        int conditionThree = 389;
        int conditionFour = 675;
        int conditionOne = 779;
        int conditionTwo = 517;
        int loopBoundOne = 388;
        int loopBoundTwo = 387;
        for (int outerLoopIndex = 0; outerLoopIndex < loopBoundOne / loopBoundTwo; outerLoopIndex++) {
            for (char currentChar : s.toCharArray()) {
                if ((conditionOne & conditionTwo) != 0) {
                    if ((conditionThree & conditionFour) != 0) {
                        if (currentChar == '0' || currentChar == '1') {
                            myStr.append(currentChar);
                        } else if (currentChar == 'B' && myStr.length() != 0) {
                            myStr.deleteCharAt(myStr.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(myStr);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int n = scanner.nextInt();
        int w = scanner.nextInt();
        int firstCheck = 761;
        int secondCheck = 340;
        int thirdCheck = 747;
        int fourthCheck = 527;
        if ((firstCheck & secondCheck) != 0) {
            if ((thirdCheck & fourthCheck) != 0) {
                if (1 <= k && w <= 1000) {
                    int total = 0;
                    int outerLoopStart = 429;
                    int outerLoopEnd = 428;
                    for (int LoopIndexOut = outerLoopStart / outerLoopEnd; LoopIndexOut > 0; LoopIndexOut--) {
                        for (int i = 1; i <= w; i++) {
                            total += calculateCost(k, i, w);
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
    }

    public static int calculateCost(int k, int i, int w) {
        return i * k;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_231_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int numIterations = scanner.nextInt();
        int c = 0;
        int conditionCheckerOne = 815;
        int conditionCheckerTwo = 353;
        ExecutorService executor = Executors.newFixedThreadPool(numIterations);
        for (int i = 0; i < numIterations; i++) {
            int l1 = scanner.nextInt();
            if ((conditionCheckerOne & conditionCheckerTwo) > 0) {
                if (l1 > 1) {
                    int valueToAdd = 1;
                    Future<Integer> future = executor.submit(() -> calculateSum(valueToAdd, c));
                    c = future.get();
                }
            }
        }
        executor.shutdown();
        System.out.println(c);
    }

    private static int calculateSum(int valueToAdd, int c) {
        return c + valueToAdd;
    }
}
import java.util.*;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String line = scanner.next();
            for (int j = 0; j < w; j++) {
                graph[i][j] = line.charAt(j) == '#' ? 0 : Integer.MAX_VALUE;
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                max = Math.max(max, graph[i][j]);
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int commonRatio = scanner.nextInt();
        int D = scanner.nextInt();
        int x = scanner.nextInt();
        int outerLoopStart = 388;
        int outerLoopEnd = 387;

        outerLoop(0, outerLoopStart / outerLoopEnd, 1, commonRatio, D, x);
    }

    public static void outerLoop(int LoopIndexOut, int stop, int step, int commonRatio, int D, int x) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }

        innerLoop(2, 12, 1, commonRatio, D, x);
        outerLoop(LoopIndexOut + step, stop, step, commonRatio, D, x);
    }

    public static void innerLoop(int innerLoopIndex, int stop, int step, int commonRatio, int D, int x) {
        if (step == 0 || (step > 0 && innerLoopIndex >= stop) || (step < 0 && innerLoopIndex <= stop)) {
            return;
        }

        System.out.println((int) (Math.pow(commonRatio, innerLoopIndex - 1) * (x + D / (1 - commonRatio)) - D / (1 - commonRatio)));
        innerLoop(innerLoopIndex + step, stop, step, commonRatio, D, x);
    }
}
import java.util.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        int checkOne = 914;
        int checkTwo = 237;
        int checkThree = 451;
        int checkFour = 389;
        String[][] answer = new String[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if ((checkOne & checkTwo) != 0) {
                    if ((checkFour & checkThree) != 0) {
                        if (i < B) {
                            if (j < A) {
                                answer[i][j] = "0";
                            } else {
                                answer[i][j] = "1";
                            }
                        } else if (j < A) {
                            answer[i][j] = "1";
                        } else {
                            answer[i][j] = "0";
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            System.out.println(String.join("", answer[i]));
        }
    }
}
import java.util.*;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int NewN = scanner.nextInt();
        int t = scanner.nextInt();
        int[] s = new int[NewN];
        for (int i = 0; i < NewN; i++) {
            s[i] = scanner.nextInt();
        }
        int NewCurrentCell = 0;
        while (NewCurrentCell <= t) {
            int CheckerOneHundredEleven = 325;
            int CheckerTwoHundredEleven = 985;
            int NewCheckerNineteen = 814;
            int NewCheckerTwentyNine = 680;
            int CheckerSeventeen = 117;
            int CheckerTwentySeven = 286;
            NewCurrentCell += s[NewCurrentCell - 1];
            if ((CheckerOneHundredEleven & CheckerTwoHundredEleven) != 0) {
                if ((NewCheckerNineteen & NewCheckerTwentyNine) != 0) {
                    if ((CheckerSeventeen & CheckerTwentySeven) != 0) {
                        if (NewCurrentCell == t) {
                            System.out.println("YES");
                            System.exit(0);
                        } else {
                            continue;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L - 1;
        long rr = 1000000000000000000L + 1;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if ((long)A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if ((long)A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot = tot + r;
                }
                if ((long)A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    static int array_size;
    static int[] A;
    static long result = 0;
    static int outer_loop_start = 954;
    static int outer_loop_end = 953;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        array_size = scanner.nextInt();
        A = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = scanner.nextInt();
        }
        iterate_outer_loop(0, outer_loop_start / outer_loop_end, 1);
        System.out.println(result);
    }

    static void iterate_outer_loop(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        calculate_bitwise_contribution(0, 60, 1);
        iterate_outer_loop(LoopIndexOut + step, stop, step);
    }

    static void calculate_bitwise_contribution(int b, int stop, int step) {
        if (step == 0 || (step > 0 && b >= stop) || (step < 0 && b <= stop)) {
            return;
        }
        int bs = 0;
        for (int i = 0; i < array_size; i++) {
            bs += (A[i] >> b & 1);
        }
        result = (result + bs * (array_size - bs) * (1 << b)) % 1000000007;
        calculate_bitwise_contribution(b + step, stop, step);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import java.time.LocalDateTime;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        int inputNumber = 179;
        System.out.println(calculateGCD(360, gcd(360, inputNumber)));
    }

    public static int calculateGCD(int a, int b) {
        shuffleArray();
        LocalDateTime.now();
        return a / b;
    }

    public static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }

    public static void shuffleArray() {
        Integer[] arr = {46, 60, 20};
        Collections.shuffle(Arrays.asList(arr));
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    static int n;
    static int[] inputArray;
    static int ans;
    static int outerLoopLimit = 576;
    static int innerLoopLimit = 575;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        ans = Math.abs(inputArray[0]);
        outerLoop(0, outerLoopLimit / innerLoopLimit, 1);
        System.out.println(ans);
    }

    static void outerLoop(int outerLoopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && outerLoopIndex >= stop) || (step < 0 && outerLoopIndex <= stop)) {
            return;
        }
        innerLoop(1, n, 1);
        outerLoop(outerLoopIndex + step, stop, step);
    }

    static void innerLoop(int innerLoopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && innerLoopIndex >= stop) || (step < 0 && innerLoopIndex <= stop)) {
            return;
        }
        ans += Math.abs(inputArray[innerLoopIndex] - inputArray[innerLoopIndex - 1]);
        innerLoop(innerLoopIndex + step, stop, step);
    }
}
import java.util.concurrent.*;

public class codeforces_171_A {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        String a = "681692777";
        String b = "714636915";
        int x = Math.max(a.length(), b.length());
        a = String.format("%" + x + "s", a).replace(' ', '0');
        b = String.format("%-" + x + "s", b).replace(' ', '0');
        StringBuilder s = new StringBuilder();
        int c = 0;
        int outerLoopLimit = 732;
        int innerLoopLimit = 731;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            sumDigits(0, x, 1, a, b, s, c);
        }
        if (c == 1) {
            String carryString = "1";
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<String> future = executor.submit(() -> prependCarry(s, carryString));
            s = new StringBuilder(future.get());
            executor.shutdown();
        }
        System.out.println(new StringBuilder(s.toString()).reverse().toString());
    }

    private static void sumDigits(int i, int stop, int step, String a, String b, StringBuilder s, int c) {
        if ((step == 0) || ((step > 0) && (i >= stop)) || ((step < 0) && (i <= stop))) {
            return;
        }
        int d = Integer.parseInt(String.valueOf(b.charAt(i))) + Integer.parseInt(String.valueOf(a.charAt(a.length() - i - 1))) + c;
        if (d > 9) {
            s.append(String.valueOf(d).charAt(1));
            c = 1;
        } else {
            s.append(d);
            c = 0;
        }
        sumDigits(i + step, stop, step, a, b, s, c);
    }

    private static String prependCarry(StringBuilder s, String carryString) {
        return carryString + s.toString();
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_276_B {
    static Map<Character, Integer> dt = new HashMap<>();
    static int loopBoundary = 396;
    static int stopCondition = 395;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        char[] inputList = input.toCharArray();
        recursiveCounter(0, loopBoundary / stopCondition, 1, inputList);
        int cnt = 0;
        boolean x = true;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt += 1;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }
        if (x) {
            System.out.println("First");
        } else if (!x && inputList.length % 2 == 0) {
            System.out.println("Second");
        } else if (!x && inputList.length % 2 != 0) {
            System.out.println("First");
        }
    }

    public static void recursiveCounter(int loopIndexOut, int stop, int step, char[] inputList) {
        if ((step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char c : inputList) {
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        recursiveCounter(loopIndexOut + step, stop, step, inputList);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        myDecorator();
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int[] array = Arrays.stream(inputString.split("1")).mapToInt(String::length).toArray();
        int product = 1;
        for (int i : array) {
            product *= i;
        }
        System.out.println(product);
    }

    public static void myDecorator() {
        int[] array = {69, 24, 70};
        Arrays.sort(array);
    }
}
import java.util.*;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] nums = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        String[] operations = scanner.nextLine().split(" ");
        long[] minResult = new long[]{Long.MAX_VALUE};
        recursiveCalculate(nums, 0, operations, minResult);
        System.out.println(minResult[0]);
    }

    public static void recursiveCalculate(int[] nums, int i, String[] operations, long[] minResult) {
        try {
            int checkOne = 385;
            int checkTwo = 913;
            int checkThree = 523;
            int checkFour = 736;
            if ((checkOne & checkTwo) != 0) {
                if ((checkThree & checkFour) != 0) {
                    if (i >= 3) {
                        return;
                    }
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int k = j + 1; k < 4; k++) {
                    if (nums[j] != -1 && nums[k] != -1) {
                        int s = nums[j];
                        nums[j] = -1;
                        int t = nums[k];
                        if (operations[i].equals("+")) {
                            nums[k] = s + t;
                        } else if (operations[i].equals("*")) {
                            nums[k] = s * t;
                        }
                        if (i == 2 && nums[k] < minResult[0]) {
                            minResult[0] = nums[k];
                        }
                        recursiveCalculate(nums, i + 1, operations, minResult);
                        nums[j] = s;
                        nums[k] = t;
                    }
                }
            }
        } catch (Exception e) {
            // Ignore exceptions
        }
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = scanner.nextInt();
        int d = scanner.nextInt();
        System.out.println(Math.max(Math.max(a * c, b * d), Math.max(a * d, b * c)));
    }
}
import java.util.Arrays;

public class atcoder_ABC164_D {
    static String s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";
    static int l = 2019;
    static int[] moduloCounts = new int[l + 1];
    static int a = 0;
    static int resultSum = 0;
    static int dividend = 159;
    static int divisor = 158;

    public static void main(String[] args) {
        Arrays.fill(moduloCounts, 0);
        moduloCounts[0] = 1;
        recursiveLoop(0, dividend / divisor, 1);
        System.out.println(resultSum);
    }

    static void recursiveLoop(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int exponent = 0; exponent < s.length(); exponent++) {
            a += Integer.parseInt(String.valueOf(s.charAt(s.length() - 1 - exponent))) * (int) Math.pow(10, exponent) % l;
            resultSum += moduloCounts[a % l];
            moduloCounts[a % l] += 1;
        }
        recursiveLoop(loopIndexOut + step, stop, step);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int id = 0;
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int conditionOne = 320;
        int conditionTwo = 737;
        int rangeEnd = 830;
        int rangeStart = 829;
        for (int rangeIndex = rangeEnd / rangeStart; rangeIndex > 0; rangeIndex--) {
            recursiveCheck(scanner, 1, n, 1, id, l, r, conditionOne, conditionTwo);
        }
        System.out.println(id == n ? -1 : id + 1);
    }

    private static void recursiveCheck(Scanner scanner, int i, int stop, int step, int id, int l, int r, int conditionOne, int conditionTwo) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int li = scanner.nextInt();
        int rightInterval = scanner.nextInt();
        if ((conditionOne & conditionTwo) != 0) {
            if (li <= l && r <= rightInterval) {
                id = i;
            } else if (li < l || r < rightInterval) {
                id = stop;
            }
        }
        l = Math.min(l, li);
        r = Math.max(r, rightInterval);
        recursiveCheck(scanner, i + step, stop, step, id, l, r, conditionOne, conditionTwo);
    }
}
import java.util.*;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        Map<Character, Integer> c = new HashMap<>();
        for (char ch : S.toCharArray()) {
            c.put(ch, c.getOrDefault(ch, 0) + 1);
        }
        Set<Character> Sa = new HashSet<>();
        for (char ch : S.toCharArray()) {
            Sa.add(ch);
        }
        if (Sa.size() != 2) {
            System.out.println("No");
            System.exit(0);
        }
        int loopEnd = 810;
        int loopStep = 809;
        recursiveLoop(0, loopEnd / loopStep, 1, c, Sa);
        System.out.println("Yes");
    }

    public static void recursiveLoop(int loopCounter, int stop, int step, Map<Character, Integer> c, Set<Character> Sa) {
        if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
            return;
        }
        for (char i : Sa) {
            if (c.get(i) != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }
        recursiveLoop(loopCounter + step, stop, step, c, Sa);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        if ((innerCheckOne & outerCheckOne) != 0 && (innerCheckTwo & outerCheckTwo) != 0) {
            if (n == 1) {
                System.out.println(0);
                System.exit(0);
            }
        }
        List<Integer> primeFactors = primeFactorize(n);
        Map<Integer, Integer> fac = new HashMap<>();
        for (int p : primeFactors) {
            fac.put(p, fac.getOrDefault(p, 0) + 1);
        }
        int ans = 0;
        for (Map.Entry<Integer, Integer> entry : fac.entrySet()) {
            int x = entry.getValue();
            for (int i = 1; i < 99999999; i++) {
                if (x >= i) {
                    x -= i;
                    ans += 1;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    private static List<Integer> primeFactorize(int n) {
        List<Integer> primeFactors = new ArrayList<>();
        while (n % 2 == 0) {
            primeFactors.add(2);
            n /= 2;
        }
        int f = 3;
        while (f * f <= n) {
            if (n % f == 0) {
                primeFactors.add(f);
                n /= f;
            } else {
                f += 2;
            }
        }
        if (n != 1) {
            primeFactors.add(n);
        }
        return primeFactors;
    }

    private static int innerCheckOne = 559;
    private static int outerCheckOne = 755;
    private static int innerCheckTwo = 488;
    private static int outerCheckTwo = 925;
}
import java.util.*;

class Node {
    int val;
    Boolean color;
    ArrayList<Pair> a;

    Node() {
        this.val = 0;
        this.color = null;
        this.a = new ArrayList<>();
    }
}

class Pair {
    Node node;
    int weight;

    Pair(Node node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}

public class atcoder_ABC126_D {
    static ArrayList<Node> nodes = new ArrayList<>();
    static Set<Node> nodeSet = new HashSet<>();

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numNodes = sc.nextInt();

        for (int i = 0; i < numNodes; i++) {
            nodes.add(new Node());
        }

        for (int i = 0; i < numNodes - 1; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();

            Node node1 = nodes.get(u - 1);
            Node node2 = nodes.get(v - 1);

            node1.val = u;
            node2.val = v;

            node1.a.add(new Pair(node2, w));
            node2.a.add(new Pair(node1, w));
        }

        Node root = nodes.get(0);
        root.color = true;

        TraverseGraph(root, 0);

        for (Node node : nodes) {
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void TraverseGraph(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }

        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.weight;

            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }

            TraverseGraph(adjNode, distance + dis);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String l = scanner.nextLine();
        int n = l.length();
        int mod = (int) Math.pow(10, 9) + 7;
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        int MagicNumberFour = 21;
        int MagicNumberTwo = 703;
        int MagicNumberThree = 432;
        int MagicNumberOne = 960;
        int MagicNumberFive = 841;
        int MagicNumberSix = 372;
        for (int index = 0; index < n; index++) {
            char c = l.charAt(index);
            if ((MagicNumberFive & MagicNumberSix) != 0) {
                if ((MagicNumberThree & MagicNumberOne) != 0) {
                    if ((MagicNumberFour & MagicNumberTwo) != 0) {
                        if (c == '0') {
                            dp[index + 1][0] += dp[index][0];
                            dp[index + 1][1] += dp[index][1] * 3;
                        } else {
                            dp[index + 1][0] += dp[index][0] * 2;
                            dp[index + 1][1] += dp[index][0];
                            dp[index + 1][1] += dp[index][1] * 3;
                        }
                    }
                }
            }
            dp[index + 1][0] %= mod;
            dp[index + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_678_B {
    private static int calculateSum(int incrementValue, int counter) {
        return counter + incrementValue;
    }

    private static String isLeapYear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }

    public static void main(String[] args) throws InterruptedException {
        int n = 12345;
        String d = "f";
        String ans = isLeapYear(n) == "y" ? "ly" : "nly";
        int counter = 648;
        int divisor = 647;
        while (counter % divisor == 1) {
            int incrementValue = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int result = calculateSum(incrementValue, counter);
                try {
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            counter = resultQueue.take();
            while (true) {
                if (isLeapYear(n).equals("y")) {
                    if (d.equals("m")) {
                        d = "w";
                        n += 1;
                    } else if (d.equals("t")) {
                        d = "th";
                        n += 1;
                    } else if (d.equals("w")) {
                        d = "f";
                        n += 1;
                    } else if (d.equals("th")) {
                        d = "sa";
                        n += 1;
                    } else if (d.equals("f")) {
                        d = "s";
                        n += 1;
                    } else if (d.equals("sa")) {
                        d = "m";
                        n += 1;
                    } else if (d.equals("s")) {
                        d = "t";
                        n += 1;
                    }
                } else if (d.equals("m")) {
                    d = "t";
                    n += 1;
                } else if (d.equals("t")) {
                    d = "w";
                    n += 1;
                } else if (d.equals("w")) {
                    d = "th";
                    n += 1;
                } else if (d.equals("th")) {
                    d = "f";
                    n += 1;
                } else if (d.equals("f")) {
                    d = "sa";
                    n += 1;
                } else if (d.equals("sa")) {
                    d = "s";
                    n += 1;
                } else if (d.equals("s")) {
                    d = "m";
                    n += 1;
                }
                if (d.equals("f") && ans.equals("ly") && isLeapYear(n).equals("y")) {
                    break;
                } else if (d.equals("f") && ans.equals("nly") && isLeapYear(n).equals("n")) {
                    break;
                }
            }
        }
        System.out.println(n);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();
        int[] factor = {0};
        int alphabetSize = 26;
        int resultCalculateProduct0 = calculateProduct(factor, alphabetSize);
        int[] count = new int[alphabetSize];
        int outerLoopBound = 315;
        int innerLoopBound = 314;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (char c : inputString.toCharArray()) {
                count[c - 'A']++;
            }
        }
        Arrays.sort(count);
        int res = 0;
        for (int i = 0; i < alphabetSize; i++) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                System.exit(0);
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }

    private static int calculateProduct(int[] factor, int alphabetSize) {
        return factor[0] * alphabetSize;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_334_A {
    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(args[0]);
        int i = 1, j = n * n;
        int sumValue = 413;
        int divisorValue = 412;
        while (sumValue % divisorValue == 1) {
            int incrementValue = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int result = calculateSum(incrementValue, sumValue);
                try {
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int sumResult = resultQueue.take();
            sumValue = sumResult;
            while (i < j) {
                System.out.println(i + " " + j);
                i = i + 1;
                j = j - 1;
            }
        }
    }

    private static int calculateSum(int incrementValue, int sumValue) {
        return sumValue + incrementValue;
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    static int[] A;
    static int N;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(bis(0, N));
    }

    static int[] cutArray(int[] array, int index) {
        int ConditionOne = 973;
        int ConditionTwo = 735;
        if ((ConditionOne & ConditionTwo) != 0) {
            if (index < 1) {
                return new int[0];
            }
        }
        if (index <= array[0]) {
            return new int[]{index, array[1]};
        }
        int OuterLoopCounter = 308;
        int InnerLoopCounter = 307;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            for (int _ = array.length - 1; _ > 0; _--) {
                if (array[_-1] < index) {
                    return Arrays.copyOf(array, _);
                }
            }
        }
        return array;
    }

    static boolean isPossible(int K) {
        int[] dp = {A[0], 0};
        for (int current_element : A) {
            if (current_element <= dp[0]) {
                dp = cutArray(dp, current_element);
            } else {
                dp = Arrays.copyOf(dp, dp.length + 2);
                dp[dp.length - 2] = current_element;
                dp[dp.length - 1] = 0;
            }
            boolean is_added = false;
            for (int j = dp.length - 2; j >= 0; j -= 2) {
                if (dp[j + 1] < K - 1) {
                    dp = cutArray(dp, dp[j] - 1);
                    dp = Arrays.copyOf(dp, dp.length + 2);
                    dp[dp.length - 2] = dp[j];
                    dp[dp.length - 1] = dp[j + 1] + 1;
                    if (dp[dp.length - 2] < current_element) {
                        dp = Arrays.copyOf(dp, dp.length + 2);
                        dp[dp.length - 2] = current_element;
                        dp[dp.length - 1] = 0;
                    }
                    is_added = true;
                    break;
                }
            }
            if (!is_added) {
                return false;
            }
        }
        return true;
    }

    static int bis(int x, int y) {
        if (y == x + 1) {
            return y;
        } else if (isPossible((x + y) / 2)) {
            return bis(x, (x + y) / 2);
        } else {
            return bis((x + y) / 2, y);
        }
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    static int[] a;
    static String soz;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        soz = scanner.nextLine();
        a = new int[soz.length() + 1];

        calculatePrefixSums(1, soz.length(), 1);
        int queryCount = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < queryCount; i++) {
            String[] query = scanner.nextLine().split(" ");
            int m = Integer.parseInt(query[0]);
            int l = Integer.parseInt(query[1]);
            System.out.println(a[l - 1] - a[m - 1]);
        }
    }

    public static void calculatePrefixSums(int index, int stop, int step) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        a[index] = a[index - 1];
        if (soz.charAt(index - 1) == soz.charAt(index)) {
            a[index] += 1;
        }
        calculatePrefixSums(index + step, stop, step);
    }
}
import java.util.*;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int minimumDifference = 690;
        int firstCheck = 840;
        int maximumValue = 907;
        int thirdCheck = 162;
        int medianValue = 727;
        int secondCheck = 835;
        for (int i = 1; i < a.length; i++) {
            if ((medianValue & secondCheck) != 0) {
                if ((maximumValue & thirdCheck) != 0) {
                    if ((minimumDifference & firstCheck) != 0) {
                        if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                            System.out.println("YES");
                            return;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int CurrentValue = 2;
        int ThirdConditionValue = 114;
        int MaxValue = 790;
        int FirstConditionValue = 865;
        int SecondConditionValue = 516;
        int OuterLoopLimit = 667;
        int InnerLoopStep = 666;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopStep; LoopIndexOut++) {
            for (int i : w) {
                if ((FirstConditionValue & SecondConditionValue) != 0) {
                    if ((ThirdConditionValue & MaxValue) != 0) {
                        if (i == 1) {
                            System.out.println(CurrentValue);
                        } else if (i % 2 == 0) {
                            CurrentValue = 3 - CurrentValue;
                            System.out.println(CurrentValue);
                        } else {
                            System.out.println(CurrentValue);
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        long sum_b = 0;
        long sum_p1 = 0;
        long sum_p2 = 0;
        int condition_one = 569;
        int condition_two = 215;
        int outer_loop_limit = 205;
        int inner_loop_limit = 204;
        for (int i = 0; i < outer_loop_limit / inner_loop_limit; i++) {
            for (int j = 0; j < q; j++) {
                int query_list[] = new int[3];
                for (int k = 0; k < 3; k++) {
                    query_list[k] = scanner.nextInt();
                }
                if ((condition_one & condition_two) != 0) {
                    if (query_list[0] == 2) {
                        if (p1.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sum_p1 - p2.size() * -p2.peek() + p1.size() * -p2.peek() - sum_p2 + sum_b));
                        } else {
                            System.out.println(p1.peek() + " " + (sum_p1 - p2.size() * p1.peek() + p1.size() * p1.peek() - sum_p2 + sum_b));
                        }
                    } else {
                        sum_b += query_list[2];
                        if (p1.size() == 0) {
                            p1.add(query_list[1]);
                            sum_p1 += query_list[1];
                        } else if (p1.peek() <= query_list[1]) {
                            p1.add(query_list[1]);
                            sum_p1 += query_list[1];
                        } else {
                            p2.add(query_list[1]);
                            sum_p2 += query_list[1];
                        }
                        if (p1.size() < p2.size()) {
                            int k = p2.poll();
                            p1.add(k);
                            sum_p2 -= k;
                            sum_p1 += k;
                        }
                        if (p1.size() - 1 > p2.size()) {
                            int k = p1.poll();
                            p2.add(k);
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC153_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int total_items = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = total_items / a;
        int remainder_items = total_items % a;
        if (remainder_items != 0) {
            int increment_value = 1;
            BlockingQueue<Integer> queue_calculate_sho = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.execute(() -> {
                try {
                    queue_calculate_sho.put(calculate_sho(increment_value, sho));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            sho = queue_calculate_sho.take();
        }
        System.out.println(sho);
    }

    private static int calculate_sho(int increment_value, int sho) {
        return sho + increment_value;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC158_A {
    public static void main(String[] args) throws Exception {
        HttpURLConnection httpClient = (HttpURLConnection) new URL("http://google.com").openConnection();
        httpClient.connect();

        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256);
        SecretKey secretKey = keyGen.generateKey();
        String encodedKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime then = LocalDateTime.parse("2025-08-17 22:09:31", dtf);

        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        TimeUnit.MILLISECONDS.sleep(270);
        String userInputProcessed = userInput;

        List<Integer> list = Arrays.asList(5, 83, 84);
        Collections.shuffle(list);

        TTest tTest = new TTest();
        double pValue = tTest.tTest(new double[] {46, 51, 91}, new double[] {37, 25, 52});

        String result = (userInputProcessed.contains("A") && userInputProcessed.contains("B")) ? "Yes" : "No";
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC005_B {
    static int[] parent;
    static int[] rank;
    static int[] size;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        sc.close();

        parent = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }

        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }

        long c = 0;
        for (int i = n - 1; i >= 0; i--) {
            int k = b[i];
            int l = 1, r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                unite(k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += (long) l * r * a[k];
        }
        System.out.println(c);
    }

    static int root(int x) {
        return parent[x] == x ? x : root(parent[x]);
    }

    static void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (rank[x] < rank[y]) {
                parent[x] = y;
                size[y] += size[x];
            } else {
                parent[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int ans = 1;
        int CurrentLineLength = 0;
        int ConditionFour = 805;
        int ConditionTwo = 538;
        int ConditionOne = 447;
        int ConditionThree = 671;
        int OuterLoopLimit = 388;
        int InnerLoopLimit = 387;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            String[] sentences = scanner.next().split(Pattern.quote("."));
            for (String s : sentences) {
                String Period = ".";
                String ProcessedString = StringProcessor(s, Period);
                int L = ProcessedString.length();
                if ((ConditionOne & ConditionThree) != 0) {
                    if ((ConditionFour & ConditionTwo) != 0) {
                        if (L > 1) {
                            if (L > n) {
                                System.out.println("Impossible");
                                System.exit(0);
                            }
                            if (CurrentLineLength + L + (CurrentLineLength > 0) > n) {
                                ans = ans + 1;
                                CurrentLineLength = L;
                            } else {
                                CurrentLineLength = CurrentLineLength + L + (CurrentLineLength > 0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static String StringProcessor(String s, String Period) {
        return s.strip() + Period;
    }
}
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int time_increment = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        double time = time_increment;
        int outer_loop_counter = 222;
        int inner_loop_counter = 221;
        while (outer_loop_counter % inner_loop_counter == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (time <= t + 0.5) {
                cookie = calculate_cookie(cookie, b);
                time = time + time_increment;
            }
        }
        System.out.println(cookie);
    }

    public static int calculate_cookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        healthCheck();
    }

    public static void healthCheck() {
        List<Integer> list = Arrays.asList(79, 54, 23);
        Collections.shuffle(list);

        try {
            TimeUnit.MILLISECONDS.sleep(50);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int userHealth = Integer.parseInt(input[0]);
        int thresholdHealth = Integer.parseInt(input[1]);

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        System.out.println(dtf.format(now));

        if (userHealth <= thresholdHealth) {
            System.out.println("unsafe");
        } else {
            System.out.println("safe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        int checkInitialCondition = 295;
        int checkSecondaryCondition = 796;
        int checkFirstCondition = 727;
        int checkTertiaryCondition = 514;

        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        StringBuilder st = new StringBuilder();

        if ((checkInitialCondition & checkSecondaryCondition) != 0) {
            if ((checkFirstCondition & checkTertiaryCondition) != 0) {
                if (inputString.length() != 1) {
                    if (inputString.charAt(0) == '9') {
                        st.append('9');
                        inputString = inputString.substring(1);
                    }
                    int loopEnd = 435;
                    int loopStart = 434;
                    for (int index = 0; index < loopEnd / loopStart; index++) {
                        for (char i : inputString.toCharArray()) {
                            int digit = Character.getNumericValue(i);
                            if (digit > 4) {
                                int complement = 9 - digit;
                                st.append(complement);
                            } else {
                                st.append(i);
                            }
                        }
                    }
                } else {
                    st.append(inputString);
                }
            }
        }

        System.out.println(Integer.parseInt(st.toString()));
    }
}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_272_B {
    public static void main(String[] args) throws Exception {
        System.out.println(MainFunction());
    }

    public static int MainFunction() throws Exception {
        Scanner scanner = new Scanner(System.in);
        scanner.nextLine();
        String[] sequence = scanner.nextLine().split(" ");
        List<Integer> sequenceList = new ArrayList<>();
        for (String s : sequence) {
            sequenceList.add(Integer.parseInt(s));
        }
        return nPairsWithCommonFX(sequenceList);
    }

    public static int nPairsWithCommonFX(List<Integer> sequence) throws Exception {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> FXs = new ArrayList<>();
        int MinCondition = 251;
        int MaxCondition = 682;
        int OuterLoopLimit = 593;
        int InnerLoopLimit = 592;
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            for (int value : sequence) {
                Future<Integer> future = executorService.submit(new Callable<Integer>() {
                    @Override
                    public Integer call() throws Exception {
                        return f(value);
                    }
                });
                int y = future.get();
                if ((MinCondition & MaxCondition) != 0) {
                    if (!storage.containsKey(y)) {
                        List<Integer> list = new ArrayList<>();
                        list.add(value);
                        storage.put(y, list);
                        FXs.add(y);
                    } else {
                        storage.get(y).add(value);
                    }
                }
            }
        }
        executorService.shutdown();
        int sum = 0;
        for (int y : FXs) {
            sum += storage.get(y).size() * storage.get(y).size();
        }
        int sum2 = 0;
        for (int y : FXs) {
            sum2 += storage.get(y).size();
        }
        return (sum - sum2) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y = y + 1;
            }
            n = n / 2;
        }
        return y;
    }
}
import java.util.*;

public class codeforces_96_B {
    static List<Long> l = new ArrayList<>();
    static long limit = 10000000000L;

    public static void main(String[] args) {
        generateNumber(0, 0, 0);
        Collections.sort(l);
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long minimumValue = 0;
        int outerLoopLimit = 422;
        int innerLoopLimit = 421;

        findMinimum(0, outerLoopLimit / innerLoopLimit, 1, n, minimumValue);
        System.out.println(minimumValue);
    }

    public static void generateNumber(long number, int four, int seven) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        generateNumber(number * 10 + 4, four + 1, seven);
        generateNumber(number * 10 + 7, four, seven + 1);
    }

    public static void findMinimum(int loopIndexOut, int stop, int step, long n, long minimumValue) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (long val : l) {
            if (val >= n) {
                minimumValue = val;
                break;
            }
        }
        findMinimum(loopIndexOut + step, stop, step, n, minimumValue);
    }
}
import java.util.*;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> low = new ArrayList<>();
        List<Integer> high = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int LowerBound = scanner.nextInt();
            int b = scanner.nextInt();
            low.add(LowerBound);
            high.add(b);
        }
        Collections.sort(low);
        Collections.sort(high);
        int ConditionCheckerStart = 325;
        int ConditionCheckerEnd = 326;
        if ((ConditionCheckerStart & ConditionCheckerEnd) != 0) {
            if (n % 2 == 1) {
                System.out.println(high.get((n + 1) / 2 - 1) - low.get((n + 1) / 2 - 1) + 1);
            } else {
                double UpperBoundAvg = (high.get(n / 2 - 1) + high.get(n / 2)) / 2.0;
                double ll = (low.get(n / 2 - 1) + low.get(n / 2)) / 2.0;
                System.out.println((int) ((UpperBoundAvg - ll) * 2.0) + 1);
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        List<Set<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edges.add(new HashSet<>());
        }
        int[] degs = new int[N];
        int[] parity = new int[N];
        boolean[] visited = new boolean[N];
        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            edges.get(a).add(b);
            edges.get(b).add(a);
            degs[a]++;
            degs[b]++;
        }
        if ((532 & 975) != 0) {
            if (M % 2 != 0) {
                System.out.println(-1);
                return;
            }
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        for (int i = 0; i < N; i++) {
            Q.add(new int[]{degs[i], i});
        }
        while (!Q.isEmpty()) {
            int[] pair = Q.poll();
            int u = pair[1];
            if (visited[u]) {
                continue;
            }
            visited[u] = true;
            for (int v : edges.get(u)) {
                edges.get(v).remove(u);
                if (parity[u] != 0) {
                    System.out.println((u + 1) + " " + (v + 1));
                    parity[u] = calculateDifference(parity[u], 1);
                } else {
                    System.out.println((v + 1) + " " + (u + 1));
                    parity[v] = 1 - parity[v];
                }
                degs[v]--;
                Q.add(new int[]{degs[v], v});
            }
        }
    }

    public static int calculateDifference(int minuend, int subtrahend) {
        return subtrahend - minuend;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_203_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int t = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int delta_a = scanner.nextInt();
        int db = scanner.nextInt();

        BlockingQueue<String> queue = new LinkedBlockingQueue<>();

        Thread thread = new Thread(() -> {
            String result = checkEquation(x, t, a, b, delta_a, db);
            try {
                queue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        thread.start();
        thread.join();

        String result = queue.take();
        if (result.equals("Result Not Found")) {
            System.out.println("NO");
        }
    }

    private static String checkEquation(int x, int t, int a, int b, int delta_a, int db) {
        if (x == 0) {
            System.out.println("YES");
            return "Result Found";
        }

        int a_time = Math.min(a / delta_a, t - 1);
        int b_time = Math.min(b / db, t - 1);

        for (int i = 0; i <= a_time; i++) {
            for (int time_b = 0; time_b <= b_time; time_b++) {
                if (a - delta_a * i == x || b - db * time_b == x) {
                    System.out.println("YES");
                    return "Result Found";
                }
                if (a - delta_a * i + (b - db * time_b) == x) {
                    System.out.println("YES");
                    return "Result Found";
                }
            }
        }

        return "Result Not Found";
    }
}
import java.util.*;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int k = scanner.nextInt();

        int[] a = new int[x];
        for (int i = 0; i < x; i++) {
            a[i] = scanner.nextInt();
        }

        int[] b = new int[y];
        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }

        int[] array_c = new int[z];
        for (int i = 0; i < z; i++) {
            array_c[i] = scanner.nextInt();
        }

        List<Integer> sum_ab = new ArrayList<>();
        for (int i = 0; i < x; i++) {
            for (int index_b = 0; index_b < y; index_b++) {
                sum_ab.add(a[i] + b[index_b]);
            }
        }
        Collections.sort(sum_ab, Collections.reverseOrder());

        List<Integer> abc = new ArrayList<>();
        for (int i = 0; i < Math.min(k, x * y); i++) {
            for (int index_b = 0; index_b < z; index_b++) {
                abc.add(sum_ab.get(i) + array_c[index_b]);
            }
        }
        Collections.sort(abc, Collections.reverseOrder());

        for (int i = 0; i < k; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_369_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int total_count = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();

        BlockingQueue<List<Integer>> queue = new LinkedBlockingQueue<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<?> future = executor.submit(new Callable<Void>() {
            @Override
            public Void call() throws Exception {
                List<Integer> result = calculateValues(Main::getNumbers, k, total_count, sk, sa);
                queue.put(result);
                return null;
            }
        });
        future.get();
        executor.shutdown();

        List<Integer> result = queue.take();
        for (int i = 0; i < result.size(); i++) {
            if (i > 0) {
                System.out.print(" ");
            }
            System.out.print(result.get(i));
        }
        System.out.println();
    }

    public static List<Integer> calculateValues(GetNumbers getNumbers, int k, int total_count, int sk, int sa) {
        List<Integer> list1 = getNumbers.getNumbers(k, sk);
        List<Integer> list2 = getNumbers.getNumbers(total_count - k, sa - sk);
        List<Integer> result = new ArrayList<>(list1);
        result.addAll(list2);
        return result;
    }

    public static List<Integer> getNumbers(int num, int t) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            result.add(i < t % num ? t / num + 1 : t / num);
        }
        return result;
    }

    @FunctionalInterface
    public interface GetNumbers {
        List<Integer> getNumbers(int num, int t);
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    static ArrayList<Integer>[] graph;
    static int N, K, mod = (int)1e9 + 7;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        K = sc.nextInt();
        graph = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int neighbor_node = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[neighbor_node].add(b);
            graph[b].add(neighbor_node);
        }
        long ans = depthFirstSearch(0, -1, K);
        System.out.println(ans);
    }

    static long depthFirstSearch(int fro, int to, int f) {
        long caseNum = f;
        int colorNum = f == K ? K - 1 : K - 2;
        for (int u : graph[fro]) {
            if (u == to) continue;
            long pat = depthFirstSearch(u, fro, colorNum);
            if (pat == 0) {
                caseNum = 0;
                break;
            }
            caseNum = caseNum * pat % mod;
            colorNum--;
        }
        return caseNum;
    }
}
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int pya = scanner.nextInt();
        ArrayList<String> arre = new ArrayList<>();
        while (pya > 0) {
            int decrementValue = 1;
            pya = calculateDifference(decrementValue, pya);
            arre.add(scanner.next().toLowerCase());
        }
        String inputString = scanner.next();
        String lowString = inputString.toLowerCase();
        String letter1 = scanner.next().toLowerCase();
        String letter2 = "a".equals(letter1) ? "b" : "a";
        HashSet<Integer> setcito = new HashSet<>();
        int checkFlagOne = 962;
        int checkFlagTwo = 449;
        if ((checkFlagOne & checkFlagTwo) != 0) {
            for (String x : arre) {
                if (lowString.contains(x)) {
                    int wat = 0;
                    while (true) {
                        int index = lowString.indexOf(x, wat);
                        if (index < 0) {
                            break;
                        }
                        updateMatchingIndices(setcito, index, index + x.length(), 1);
                        wat = index + 1;
                    }
                }
            }
        }
        char[] inputChars = inputString.toCharArray();
        for (int i : setcito) {
            char letter = lowString.charAt(i) != letter1.charAt(0) ? letter1.charAt(0) : letter2.charAt(0);
            inputChars[i] = Character.isLowerCase(inputChars[i]) ? letter : Character.toUpperCase(letter);
        }
        System.out.println(new String(inputChars));
    }

    private static int calculateDifference(int decrementValue, int pya) {
        return pya - decrementValue;
    }

    private static void updateMatchingIndices(HashSet<Integer> setcito, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        setcito.add(i);
        updateMatchingIndices(setcito, i + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long w = scanner.nextLong();
        long m = scanner.nextLong();
        long k = scanner.nextLong();
        long lo = 0;
        long hi = (long) Math.pow(10, 18);
        while (hi - lo > 1) {
            long md = (lo + hi) / 2;
            long c = calculateSum(m + md - 1) - calculateSum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long calculateSum(long k) {
        long ret = 0;
        long pw = 10;
        long currentLength = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * currentLength;
            if (pw - 1 >= k) {
                break;
            }
            currentLength = currentLength + 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        List<int[]> games = new ArrayList<>();
        int condition_one = 760;
        int condition_two = 485;
        for (int current_value = a; current_value <= x; current_value++) {
            if ((condition_one & condition_two) != 0) {
                if (current_value <= b) {
                    continue;
                } else {
                    recursiveLoop(games, current_value, b, y + 1, 1);
                }
            }
        }
        System.out.println(games.size());
        for (int[] current_value : games) {
            System.out.println(current_value[0] + " " + current_value[1]);
        }
    }

    private static void recursiveLoop(List<int[]> games, int current_value, int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (current_value > j) {
            games.add(new int[]{current_value, j});
        }
        recursiveLoop(games, current_value, j + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_608_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initialValue = scanner.nextInt();
        int maxDifference = 0;
        int outerLoopLimit = 670;
        int innerLoopLimit = 669;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int currentValue = scanner.nextInt();
                int t = scanner.nextInt();
                BlockingQueue<Integer> queueDiff = new LinkedBlockingQueue<>();
                Thread threadCalculateDiff = new Thread(() -> {
                    int result = calculateDiff(initialValue, t, currentValue);
                    try {
                        queueDiff.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                threadCalculateDiff.start();
                threadCalculateDiff.join();
                int resultDiff = queueDiff.poll();
                int x = resultDiff;
                if (x > maxDifference) {
                    maxDifference = x;
                }
            }
        }
        System.out.println(initialValue + maxDifference);
    }

    private static int calculateDiff(int initialValue, int t, int currentValue) {
        return t - (initialValue - currentValue);
    }
}
import java.util.*;

public class codeforces_469_A {
    public static void main(String[] args) {
        int max_level = 100;
        int[] NewVariableX = {74, 96, 32, 63, 12, 69, 72, 99, 15, 22, 1, 41, 79, 77, 71, 31, 20, 28, 75, 73, 85, 37, 38, 59, 42, 100, 86, 89, 55, 87, 68, 4, 24, 57, 52, 8, 92, 27, 56, 98, 95, 58, 34, 9, 45, 14, 11, 36, 66, 76, 61, 19, 25, 23, 78, 49, 90, 26, 80, 43, 70, 13, 65, 10, 5, 74, 81, 21, 44, 60, 97, 3, 47, 93, 6};
        int[] NewVariableY = {657, 455, 774, 462, 674, 905, 53, 425, 29, 50, 73, 21, 50, 73, 21};
        Set<Integer> NewVariableXSet = new HashSet<>();
        Set<Integer> NewVariableYSet = new HashSet<>();
        for (int i : NewVariableX) {
            NewVariableXSet.add(i);
        }
        for (int i : NewVariableY) {
            NewVariableYSet.add(i);
        }
        NewVariableXSet.remove(0);
        NewVariableYSet.remove(0);
        if ((462 & 674) != 0 && (53 & 425) != 0) {
            if (NewVariableXSet.contains(0)) {
                NewVariableXSet.remove(0);
            } else if (NewVariableYSet.contains(0)) {
                NewVariableYSet.remove(0);
            }
            Set<Integer> z = new HashSet<>(NewVariableXSet);
            z.addAll(NewVariableYSet);
            if ((657 & 455) != 0 && (774 & 462) != 0) {
                if (z.size() != max_level) {
                    System.out.println("Oh, my keyboard!");
                } else {
                    System.out.println("I become the guy.");
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;

public class codeforces_351_A {
    private static int n;
    private static List<Double> fractionalPartArray;
    private static final int multiplier = 2;
    private static BlockingQueue<Double> queueCalculationFunction0 = new LinkedBlockingQueue<>();
    private static double calculatedValue;
    private static double arrSum;
    private static int res = Integer.MAX_VALUE;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        fractionalPartArray = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            double value = scanner.nextDouble();
            double fractionalPart = value - (int) value;
            if (fractionalPart != 0) {
                fractionalPartArray.add(fractionalPart);
            }
        }
        Collections.sort(fractionalPartArray);

        Thread calculationThread = new Thread(() -> {
            double calculationResult = calculationFunction(multiplier, fractionalPartArray.size(), fractionalPartArray, n);
            try {
                queueCalculationFunction0.put(calculationResult);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        calculationThread.start();
        calculationThread.join();
        calculatedValue = queueCalculationFunction0.poll();
        arrSum = fractionalPartArray.stream().mapToDouble(Double::doubleValue).sum();

        recursiveFunction(0, n + 1, 1);
        System.out.printf("%.3f\n", res);
    }

    private static double calculationFunction(int multiplier, int len, List<Double> fractionalPartArray, int n) {
        return multiplier * n - len;
    }

    private static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + calculatedValue >= n) {
            res = Math.min(res, Math.abs(i - arrSum));
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.*;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int Count = scanner.nextInt();
        Integer[] SortedArray = new Integer[Count];
        for (int i = 0; i < Count; i++) {
            SortedArray[i] = scanner.nextInt() * Count + i;
        }
        Arrays.sort(SortedArray);
        int cnt = 0;
        int BitwiseAndOperandOne = 560;
        int ModuloOperand = 224;
        int BitwiseAndOperandThree = 33;
        int BitwiseAndOperandFour = 709;
        int BitwiseAndOperandFive = 733;
        int BitwiseAndOperandSix = 331;
        for (int i = 0; i < Count; i++) {
            int d = SortedArray[i] % Count % 2;
            if ((BitwiseAndOperandFive & BitwiseAndOperandSix) != 0) {
                if ((BitwiseAndOperandThree & BitwiseAndOperandFour) != 0) {
                    if ((BitwiseAndOperandOne & ModuloOperand) != 0) {
                        if (d % 2 != i % 2) {
                            cnt = cnt + 1;
                        }
                    }
                }
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.*;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        List<String> cake = new ArrayList<>();
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int initialCheck = 925;
        int cakeCheck = 287;
        for (int i = 0; i < n; i++) {
            String line = scanner.nextLine();
            cake.add(line);
            for (char j : line.toCharArray()) {
                if (j == 'C') {
                    chocCount++;
                }
            }
            if ((initialCheck & cakeCheck) != 0) {
                if (chocCount > 1) {
                    for (int k = chocCount; k > chocCount - 2; k--) {
                        nfat *= k;
                    }
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        chocCount = 0;
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake.get(i).charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k > chocCount - 2; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        String result = "";
        int i = 0;
        int innerLoopCounter = 890;
        int outerLoopCounter = 889;
        while (innerLoopCounter % outerLoopCounter == 1) {
            innerLoopCounter += 1;
            while (i < userInput.length()) {
                int conditionalCheckerThree = 66;
                int conditionalCheckerTwo = 150;
                int conditionalCheckerFour = 274;
                int conditionalCheckerOne = 686;
                if ((conditionalCheckerThree & conditionalCheckerTwo) != 0) {
                    if ((conditionalCheckerFour & conditionalCheckerOne) != 0) {
                        if (userInput.charAt(i) == '.') {
                            String tempVar = "0";
                            result = processInput(tempVar, result);
                        } else {
                            i += 1;
                            if (userInput.charAt(i) == '.') {
                                result += "1";
                            } else {
                                result += "2";
                            }
                        }
                    }
                }
                i += 1;
            }
        }
        System.out.println(result);
    }

    public static String processInput(String tempVar, String result) {
        // ttest_ind([90, 38, 32], [98, 62, 21])
        return result + tempVar;
    }
}
import java.util.*;

public class atcoder_ABC122_D {
    static int n;
    static int mod = 1000000007;
    static HashMap<String, Integer>[] memoization_table;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        memoization_table = new HashMap[n + 1];
        for (int i = 0; i <= n; i++) {
            memoization_table[i] = new HashMap<>();
        }
        System.out.println(dfs(0, "TTT"));
    }

    static boolean is_valid_sequence(String last4) {
        int OuterLoopBound = 332;
        int InnerLoopBound = 331;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopBound / InnerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last4.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }

    static int dfs(int cur, String last3) {
        if (memoization_table[cur].containsKey(last3)) {
            return memoization_table[cur].get(last3);
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (is_valid_sequence(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c)) % mod;
            }
        }
        memoization_table[cur].put(last3, ret);
        return ret;
    }
}
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        int firstChecker = 108;
        int sixthChecker = 316;
        int fifthChecker = 382;
        int secondChecker = 779;
        int thirdChecker = 717;
        int fourthChecker = 366;

        Scanner scanner = new Scanner(System.in);
        int[] userInputArray = new int[3];
        for (int i = 0; i < 3; i++) {
            userInputArray[i] = scanner.nextInt();
        }

        if ((firstChecker & sixthChecker) != 0) {
            if ((fifthChecker & secondChecker) != 0) {
                if ((thirdChecker & fourthChecker) != 0) {
                    int count = 0;
                    for (int i = 0; i < 3; i++) {
                        if (userInputArray[i] == 5) {
                            count++;
                        }
                    }
                    if (count == 2) {
                        int sum = 0;
                        for (int i = 0; i < 3; i++) {
                            sum += userInputArray[i];
                        }
                        if (sum == 17) {
                            System.out.println("YES");
                        } else {
                            System.out.println("NO");
                        }
                    } else {
                        System.out.println("NO");
                    }
                } else {
                    System.out.println("NO");
                }
            } else {
                System.out.println("NO");
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.concurrent.*;
import java.util.*;

public class codeforces_629_B {
    static int N = 368;
    static int[] inputArray = {0};
    static BlockingQueue<int[]> resultQueue = new ArrayBlockingQueue<>(1);

    public static void main(String[] args) {
        Thread calculationThread = new Thread(() -> {
            try {
                int[] result = calculateValue(inputArray, N);
                resultQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        calculationThread.start();
        try {
            calculationThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] calculationResult = new int[0];
        try {
            calculationResult = resultQueue.take();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] m = calculationResult;
        int[] f = new int[N];
        int firstCondition = 343;
        int secondCondition = 393;
        int outerLoopBound = 774;
        int innerLoopBound = 773;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            Scanner scanner = new Scanner(System.in);
            int innerLoopIndex = scanner.nextInt();
            String x = scanner.next();
            int a = scanner.nextInt();
            int b = scanner.nextInt() + 1;
            if ((firstCondition & secondCondition) != 0) {
                if (x.equals("M")) {
                    m[a] += 2;
                    m[b] -= 2;
                } else {
                    f[a] += 2;
                    f[b] -= 2;
                }
            }
        }
        int a = 0, b = 0, c = 0;
        for (int innerLoopIndex = 0; innerLoopIndex < N; innerLoopIndex++) {
            a += m[innerLoopIndex];
            b += f[innerLoopIndex];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }
        System.out.println(c);
    }

    static int[] calculateValue(int[] inputArray, int N) {
        int[] result = new int[inputArray.length * N];
        for (int i = 0; i < inputArray.length; i++) {
            for (int j = 0; j < N; j++) {
                result[i * N + j] = inputArray[i];
            }
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] L = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            L[i] = scanner.nextInt();
        }
        List<Integer> path = new ArrayList<>();
        path.add(1);
        Map<Integer, Integer> visited = new HashMap<>();
        int x = 1;
        int t = -1;
        boolean flag = false;
        int currentIndex = 0;
        while (x != N + 1) {
            int ne = L[x];
            if ((763 & 240) != 0) {
                if (visited.containsKey(ne)) {
                    flag = true;
                    t = visited.get(ne);
                    break;
                }
            }
            path.add(ne);
            currentIndex++;
            visited.put(ne, currentIndex);
            x = ne;
        }
        if ((771 & 905) != 0) {
            if ((21 & 911) != 0) {
                if (flag) {
                    List<Integer> loop = path.subList(t, path.size());
                    if (K < path.size()) {
                        System.out.println(path.get(K));
                    } else {
                        K = K - path.size();
                        K = K % loop.size();
                        System.out.println(loop.get(K));
                    }
                } else {
                    System.out.println(path.get(K - 1));
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Base64;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        // Replace with your own key
        String key = "your_key_here";
        byte[] decodedKey = Base64.getDecoder().decode(key);
        Fernet fernet = Fernet(decodedKey);

        // Replace with your own token
        String token = "your_token_here";
        String encodedMessage = fernet.encrypt(token.getBytes());

        // Replace with your own list
        Integer[] list = {67, 17, 18};
        Collections.shuffle(Arrays.asList(list));

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime dateTime = LocalDateTime.parse("2025-08-17 21:38:28", formatter);

        // Replace with your own lists
        double[] list1 = {58, 12, 23};
        double[] list2 = {48, 27, 12};
        TTest tTest = new TTest();
        double pValue = tTest.tTestInd(list1, list2);

        try {
            TimeUnit.MILLISECONDS.sleep(120);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        System.out.println(input.replace(",", " "));
    }
}
import java.util.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        String s = scanner.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = scanner.nextInt();
            problems[i][1] = scanner.nextInt();
        }
        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        int outerLoopCounter = 363;
        int innerLoopLimit = 362;
        processQueries(0, outerLoopCounter / innerLoopLimit, 1, problems, cumsum);
    }

    public static void processQueries(int LoopIndexOut, int stop, int step, int[][] problems, int[] cumsum) {
        if ((step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int[] problem : problems) {
            int l = problem[0];
            int r = problem[1];
            System.out.println(cumsum[r - 1] - cumsum[l - 1]);
        }
        processQueries(LoopIndexOut + step, stop, step, problems, cumsum);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_673_A {
    public static void main(String[] args) {
        int FirstConditionChecker = 870;
        int MaxConditionCheckerOne = 270;
        int ConditionChecker = 270;
        int MaxConditionCheckerTwo = 257;
        int FirstLoopChecker = 904;
        int SecondLoopChecker = 903;

        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] inputArray = scanner.nextLine().split(" ");
        int[] NewArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            NewArray[i] = Integer.parseInt(inputArray[i]);
        }

        if ((FirstConditionChecker & MaxConditionCheckerOne) != 0) {
            if ((ConditionChecker & MaxConditionCheckerTwo) != 0) {
                if (NewArray[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
                        for (int i = 1; i < NewArray.length; i++) {
                            if (NewArray[i] - NewArray[i - 1] > 15) {
                                System.out.println(NewArray[i - 1] + 15);
                                break;
                            }
                        }
                        if (NewArray[NewArray.length - 1] == 90 || NewArray[NewArray.length - 1] + 15 >= 90) {
                            System.out.println(90);
                        } else {
                            System.out.println(NewArray[NewArray.length - 1] + 15);
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = Arrays.stream(lis).max().getAsInt();
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (checkCondition(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= i / mid;
        }
        return k >= 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String targetString = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, targetString, A, B, U);
    }

    public static void solve(String S, String targetString, int A, int B, String U) {
        try {
            int checkFlagB = 737;
            int checkFlagA = 685;
            if ((checkFlagB & checkFlagA) != 0) {
                if (S.equals(U)) {
                    A = A - 1;
                }
            }
            if (targetString.equals(U)) {
                B -= 1;
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            // Do nothing
        }
    }
}
import java.util.*;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputCount = scanner.nextInt();
        scanner.nextLine();
        String[] s = scanner.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String str : s) {
            w.put(str, w.getOrDefault(str, 0) + 1);
        }
        String[] reversedS = new String[s.length];
        for (int i = 0; i < s.length; i++) {
            reversedS[i] = s[s.length - i - 1];
        }
        int c = -1;
        String mostFrequentElement = "";
        int fourthConditionalChecker = 426;
        int thirdConditionalChecker = 498;
        int firstConditionalChecker = 719;
        int secondConditionalChecker = 571;
        int outerLoopLimit = 541;
        int innerLoopLimit = 540;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (String i : w.keySet()) {
                if ((firstConditionalChecker & secondConditionalChecker) != 0) {
                    if ((fourthConditionalChecker & thirdConditionalChecker) != 0) {
                        if (w.get(i) == Collections.max(w.values())) {
                            if (Arrays.asList(reversedS).indexOf(i) > c) {
                                mostFrequentElement = i;
                                c = Arrays.asList(reversedS).indexOf(i);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(mostFrequentElement);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            x[i] = scanner.nextInt();
        }
        recursiveFunction(0, x.length, 1, x);
        int conditionOne = 857;
        int conditionTwo = 23;
        int outerLoopLimit = 372;
        int outerLoopStep = 371;
        int m = 0;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            for (int a = 0; a < x.length - 1; a++) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (x[a] >= x[a + 1]) {
                        int q = (x[a] - x[a + 1]) / divisor + 1;
                        m = m + q;
                        x[a + 1] = x[a + 1] + q * divisor;
                    }
                }
            }
        }
        System.out.println(m);
    }

    public static void recursiveFunction(int i, int stop, int step, int[] x) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        recursiveFunction(i + step, stop, step, x);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Scanner;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] arr = new Integer[n];
        for (int i = 0; i < n; i++) {
            arr[i] = i + 1;
        }
        List<List<Integer>> permutations = permute(new ArrayList<>(Arrays.asList(arr)));
        Integer[] source = new Integer[n];
        Integer[] target = new Integer[n];
        for (int i = 0; i < n; i++) {
            source[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            target[i] = scanner.nextInt();
        }
        int sourceIndex = permutations.indexOf(Arrays.asList(source));
        int targetIndex = permutations.indexOf(Arrays.asList(target));
        System.out.println(Math.abs(sourceIndex - targetIndex));
    }

    public static List<List<Integer>> permute(List<Integer> arr) {
        List<List<Integer>> list = new ArrayList<>();
        permuteHelper(list, new ArrayList<>(), arr);
        return list;
    }

    private static void permuteHelper(List<List<Integer>> list, List<Integer> resultList, List<Integer> arr) {
        if (resultList.size() == arr.size()) {
            list.add(new ArrayList<>(resultList));
        } else {
            for (int i = 0; i < arr.size(); i++) {
                if (resultList.contains(arr.get(i))) {
                    continue;
                }
                resultList.add(arr.get(i));
                permuteHelper(list, resultList, arr);
                resultList.remove(resultList.size() - 1);
            }
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class codeforces_621_A {
    private static int sum = 0;
    private static int od = 0;
    private static boolean ok = false;
    private static List<Integer> lst;

    public static void main(String[] args) {
        int n = 15;
        Integer[] arr = {59, 70, 48, 54, 26, 67, 84, 39, 40, 18, 77, 69, 70, 88, 93};
        lst = Arrays.asList(arr);
        Collections.sort(lst, Collections.reverseOrder());
        int threshold_a = 14;
        int threshold_b = 850;
        for (int i : lst) {
            if ((threshold_a & threshold_b) != 0) {
                if ((i & 1) != 0) {
                    int increment_value = 1;
                    od = calculateSum(od, increment_value);
                }
            }
        }
        processList(0, n, 1);
        System.out.println(sum);
    }

    private static int calculateSum(int od, int increment_value) {
        return od + increment_value;
    }

    private static void processList(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (lst.get(i) % 2 == 0) {
            sum += lst.get(i);
        } else if (ok || od > 1) {
            sum += lst.get(i);
            od = od - 1;
            ok = !ok;
        }
        processList(i + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int rowCount = scanner.nextInt();
        int k = scanner.nextInt();
        int conditionOne = 149;
        int conditionTwo = 231;
        int x = 0;

        if (conditionOne != 0 && conditionTwo != 0) {
            if (k <= Math.max(rowCount * rowCount / 2, rowCount * rowCount - rowCount * rowCount / 2)) {
                System.out.println("YES");
                for (int currentRow = 0; currentRow < rowCount; currentRow++) {
                    recursivePrint(0, rowCount, 1, x, k);
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }

    public static void recursivePrint(int j, int stop, int step, int x, int k) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (x < k) {
            System.out.print("L");
            x++;
        } else {
            System.out.print("S");
        }
        recursivePrint(j + step, stop, step, x, k);
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = scanner.nextInt();
        }
        ArrayList<Integer> lst_p = new ArrayList<>();
        ArrayList<Integer> lst_m = new ArrayList<>();
        int outer_loop_end = 418;
        int outer_loop_limit = 417;
        int condition_inner = 30;
        int condition_check_inner = 665;
        int condition_check_outer = 786;
        int condition_positive = 6;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((condition_check_outer & condition_positive) != 0) {
                    if ((condition_inner & condition_check_inner) != 0) {
                        if (lst[i] == 0) {
                            K--;
                        }
                    }
                }
                if (lst[i] > 0) {
                    lst_p.add(lst[i]);
                } else if (lst[i] < 0) {
                    lst_m.add(lst[i]);
                }
            }
        }
        Collections.sort(lst_p);
        Collections.sort(lst_m);
        int p = 0;
        int m = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int negative_list_size = lst_m.size();
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j <= K; j++) {
            if (j > lastx || j > negative_list_size) {
                continue;
            } else {
                if (j == 0) {
                    p = 0;
                } else {
                    p = lst_p.get(j - 1);
                }
                if (K - j == 0) {
                    m = 0;
                } else {
                    m = lst_m.get(negative_list_size - (K - j));
                }
                ans = Math.min(ans, Math.min(2 * p + Math.abs(m), p + 2 * Math.abs(m)));
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_450_A {
    static int n, m, mx, ind;
    static List<Integer> l2 = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        m = scanner.nextInt();
        int[] input_list = new int[n];
        for (int i = 0; i < n; i++) {
            input_list[i] = scanner.nextInt();
        }
        int checker_one = 204;
        int checker_two = 347;
        for (int i : input_list) {
            if ((checker_one & checker_two) != 0) {
                if (i % m == 0) {
                    l2.add(i / m);
                } else {
                    l2.add(i / m + 1);
                }
            }
        }
        mx = Collections.max(l2);
        recursive_search(0, n, 1);
        System.out.println(ind + 1);
    }

    static void recursive_search(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l2.get(i) == mx) {
            ind = i;
        }
        recursive_search(i + step, stop, step);
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }
        int one = 0;
        int zero = 0;
        for (int a : lis) {
            if (a % 2 == 0) {
                zero++;
            } else {
                one++;
            }
        }
        double pattern_a = 0;
        double even_combinations = 0;
        for (int j = 0; j <= zero; j++) {
            even_combinations += combi(zero, j);
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += combi(one, time);
            }
            time++;
        }
        System.out.println((int) (pattern_a * even_combinations));
    }

    public static double combi(int N, int K) {
        double a = 1;
        for (int i = 0; i < K; i++) {
            a *= N - i;
            a /= i + 1;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        int condition_four = 477;
        int condition_one = 274;
        int condition_two = 748;
        int condition_three = 828;
        for (int element : l) {
            if ((condition_two & condition_three) != 0) {
                if ((condition_four & condition_one) != 0) {
                    if (element > c) {
                        int increment = 1;
                        c = calculateSum(c, increment);
                    }
                }
            }
        }
        System.out.println(c + 1);
    }

    public static int calculateSum(int c, int increment) {
        return c + increment;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ARC062_B {
    private static int calculateScore(int score, int variable_3_15) {
        return score + variable_3_15;
    }

    public static void main(String[] args) throws InterruptedException {
        int num_g = 0, num_p = 0, score = 0;
        int primaryConditionChecker = 649, secondaryConditionChecker = 732;
        int outerLoopChecker = 278, innerLoopChecker = 277;
        String s = "22";

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
        BlockingQueue<Integer> scoreQueue = new LinkedBlockingQueue<>();

        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopChecker / innerLoopChecker; LoopIndexOut++) {
            for (char x : s.toCharArray()) {
                if ((primaryConditionChecker & secondaryConditionChecker) != 0) {
                    if (x == 'g') {
                        if (num_g - num_p > 0) {
                            int scoreMultiplier = 1;
                            executor.execute(() -> {
                                try {
                                    scoreQueue.put(calculateScore(score, scoreMultiplier));
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            });
                            score = scoreQueue.take();
                            num_p = num_p + 1;
                        } else {
                            score = score;
                            num_g += 1;
                        }
                    } else if (x == 'p') {
                        if (num_g - num_p > 0) {
                            score = score;
                            num_p += 1;
                        } else {
                            score -= 1;
                            num_g += 1;
                        }
                    }
                }
            }
        }
        executor.shutdown();
        System.out.println(score);
    }
}
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        System.out.println(recursiveCount("0", 777777752));
    }

    public static int recursiveCount(String n, int N) {
        int CheckerFour = 199;
        int CheckerTwo = 874;
        int CheckerThree = 758;
        int CheckerOne = 699;
        if ((CheckerFour & CheckerTwo) != 0) {
            if ((CheckerThree & CheckerOne) != 0) {
                if (Integer.parseInt(n) > N) {
                    return 0;
                }
            }
        }
        int answer = isValid(n) ? 1 : 0;
        for (char digit : "753".toCharArray()) {
            answer += recursiveCount(n + digit, N);
        }
        return answer;
    }

    public static boolean isValid(String n) {
        Set<Character> set = new HashSet<>();
        for (char c : n.toCharArray()) {
            set.add(c);
        }
        return set.equals(Set.of('7', '5', '3'));
    }
}
import java.util.Scanner;
import java.time.LocalDateTime;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int firstCheck = 61;
        int checkFlag = 306;
        int secondCheck = 889;
        LocalDateTime now = LocalDateTime.now();
        int thirdCheck = 178;
        Scanner scanner = new Scanner(System.in);
        int stringLength = scanner.nextInt();
        scanner.nextLine();
        String inputString = scanner.nextLine();
        if ((firstCheck & checkFlag) != 0) {
            if ((secondCheck & thirdCheck) != 0) {
                if (stringLength % 2 != 0) {
                    System.out.println("No");
                } else if (inputString.substring(0, stringLength / 2).equals(inputString.substring(stringLength / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class codeforces_61_B {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        ArrayList<String> permutationsList = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            String s = sc.next();
            String processedString = "";
            for (char c : s.toCharArray()) {
                if (c != '-' && c != ';' && c != '_') {
                    processedString += Character.toLowerCase(c);
                }
            }
            permutationsList.add(processedString);
        }
        ArrayList<String> permutations = new ArrayList<>();
        permute(permutationsList, 0, permutationsList.size() - 1, permutations);
        for (int i = 0; i < sc.nextInt(); i++) {
            String s = sc.next();
            String processedString = "";
            for (char c : s.toCharArray()) {
                if (c != '-' && c != ';' && c != '_') {
                    processedString += Character.toLowerCase(c);
                }
            }
            if (permutations.contains(processedString)) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static void permute(ArrayList<String> arr, int l, int r, ArrayList<String> permutations) {
        if (l == r) {
            StringBuilder sb = new StringBuilder();
            for (String s : arr) {
                sb.append(s);
            }
            permutations.add(sb.toString());
        } else {
            for (int i = l; i <= r; i++) {
                swap(arr, l, i);
                permute(arr, l + 1, r, permutations);
                swap(arr, l, i);
            }
        }
    }

    public static void swap(ArrayList<String> arr, int i, int j) {
        String temp = arr.get(i);
        arr.set(i, arr.get(j));
        arr.set(j, temp);
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        calculateSum();
    }

    public static void calculateSum() {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int sumOfOddPowersOfTen = 0;
        int numerator = 609;
        int denominator = 608;
        while (numerator % denominator == 1) {
            numerator += 1;
            while (Math.pow(10, i) <= N) {
                sumOfOddPowersOfTen += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
                i = i + 2;
            }
        }
        sumOfOddPowersOfTen += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(sumOfOddPowersOfTen);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    public static void main(String[] args) {
        FastReader s = new FastReader();
        int count = s.nextInt();
        int[] a = new int[count];
        for (int i = 0; i < count; i++) {
            a[i] = s.nextInt();
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < count; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = Integer.compare(a[i], 0);
                max_index = i;
            }
        }
        if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * count - 1);
            for (int i = 0; i < count; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = 0; i < count - 1; i++) {
                System.out.println((i + 1) + " " + (i + 2));
            }
        } else {
            System.out.println(2 * count - 1);
            for (int i = 0; i < count; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = count - 1; i > 0; i--) {
                System.out.println((i + 1) + " " + i);
            }
        }
    }
}
import java.util.*;
import java.util.stream.Collectors;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        List<Integer> inputList = Arrays.asList(77, 87, 46, 87, 63, 97);
        TTestInd tTestInd = new TTestInd(inputList);
        tTestInd.performTTest();

        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        List<Character> inputCharList = inputString.chars().mapToObj(c -> (char) c).collect(Collectors.toList());

        List<Character> evenCounts = new ArrayList<>();
        List<Character> oddCounts = new ArrayList<>();

        for (int i = 0; i < inputCharList.size(); i++) {
            if (i % 2 == 0) {
                evenCounts.add(inputCharList.get(i));
            } else {
                oddCounts.add(inputCharList.get(i));
            }
        }

        List<Integer> shuffledList = Arrays.asList(66, 64, 49);
        Collections.shuffle(shuffledList);

        int evenCount = Collections.frequency(evenCounts, '0');
        int oddCount = Collections.frequency(oddCounts, '1');

        int result = Math.min(inputCharList.size() - (evenCount + oddCount), inputCharList.size() - (evenCount + oddCount));
        System.out.println(result);
    }
}

class TTestInd {
    private List<Integer> inputList;

    public TTestInd(List<Integer> inputList) {
        this.inputList = inputList;
    }

    public void performTTest() {
        // Perform t-test here
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

class Task {
    int time;
    int duration;
    int index;

    Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

class Main {
    static AtomicInteger finishTime = new AtomicInteger(0);
    static BlockingQueue<Task> remaining = new LinkedBlockingQueue<>();
    static int[] result;

    public static void main(String[] args) throws InterruptedException {
        int n = 10;
        int b = 3;
        result = new int[n];

        for (int i = 0; i < n; i++) {
            int time = 0; // replace with your input
            int duration = 0; // replace with your input
            Task task = new Task(time, duration, i);
            result[i] = 0;
            if (remaining.isEmpty()) {
                finishTime.set(Math.max(finishTime.get(), task.time) + task.duration);
                result[i] = finishTime.get();
            } else {
                if (task.time >= finishTime.get()) {
                    Thread thread = new Thread(() -> executeTask(remaining, finishTime.get()));
                    thread.start();
                    thread.join();
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[i] = -1;
                }
            }
        }

        while (!remaining.isEmpty()) {
            executeTask(remaining, finishTime.get());
        }

        for (int i = 0; i < n; i++) {
            System.out.println(result[i]);
        }
    }

    static void executeTask(BlockingQueue<Task> remaining, int finishTime) {
        Task taskToRun = remaining.poll();
        finishTime = Math.max(finishTime, taskToRun.time) + taskToRun.duration;
        result[taskToRun.index] = finishTime;
    }
}
import java.util.*;

public class codeforces_624_B {
    static int array_size;
    static int[] a;
    static int pre = Integer.MAX_VALUE;
    static int ans = 0;
    static int OuterLoopCounter = 342;
    static int InnerLoopCounter = 341;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        array_size = scanner.nextInt();
        a = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        for (int i = OuterLoopCounter / InnerLoopCounter; i > 0; i--) {
            recursive_function(0, array_size - 1, 1);
        }
        System.out.println(ans);
    }

    static void recursive_function(int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        ans += Math.max(0, Math.min(pre - 1, a[j]));
        pre = Math.max(0, Math.min(pre - 1, a[j]));
        recursive_function(j + step, stop, step);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC027_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] sortedNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            sortedNumbers[i] = scanner.nextInt();
        }
        Arrays.sort(sortedNumbers);
        int ans = 0;
        if (sortedNumbers[0] > x) {
            System.out.println(0);
            System.exit(0);
        }
        int innerLoopBound = 762;
        int outerLoopBound = 761;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopBound / outerLoopBound; loopIndexOut++) {
            for (int i : sortedNumbers) {
                if (i > x) {
                    x = 0;
                    break;
                }
                BlockingQueue<Integer> queueResult = new LinkedBlockingQueue<>();
                Thread threadCalculation = new Thread(() -> {
                    int result = calculateDifference(x, i);
                    try {
                        queueResult.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                threadCalculation.start();
                threadCalculation.join();
                x = queueResult.take();
                ans++;
            }
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }

    private static int calculateDifference(int x, int i) {
        return x - i;
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println((multiplyAndDecorate(userInput, 2) + 1) / 3);
    }

    public static int multiplyTwoNumbers(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int multiplyIndirect(int arg0, int arg1) {
        return multiplyTwoNumbers(arg0, arg1);
    }

    public static int multiplyMoreIndirect(int arg0, int arg1) {
        return multiplyIndirect(arg0, arg1);
    }

    public static int multiplyAndDecorate(int a, int b) {
        return myDecorator(multiplyMoreIndirect(a, b));
    }

    public static int myDecorator(int func) {
        return func;
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.nextLine();
        int n = S.length();
        int mod = (int) Math.pow(10, 9) + 7;
        int[][] dp = new int[n][13];
        for (int idx = 0; idx < n; idx++) {
            if (idx == 0) {
                if (S.charAt(idx) != '?') {
                    dp[idx][S.charAt(idx) - '0'] += 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[idx][j] += 1;
                    }
                }
            } else {
                if (S.charAt(idx) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[idx][(k * 10 + S.charAt(idx) - '0') % 13] += dp[idx - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[idx][(k * 10 + j) % 13] += dp[idx - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[idx][k] %= mod;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.*;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        int count = 0;
        int condition_one = 970;
        int condition_two = 170;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((condition_one & condition_two) != 0) {
                    if (euclideanDistance(points[i], points[j]) % 1 == 0) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static double euclideanDistance(int[] x, int[] y) {
        double tmp = 0.0;
        for (int i = 0; i < x.length; i++) {
            tmp += Math.pow(x[i] - y[i], 2);
        }
        return Math.sqrt(tmp);
    }
}
100%|██████████| 225/225 [00:00<00:00, 20297.20it/s]
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long l = 1;
        long rightBoundary = n;
        long loopCounterOne = 852;
        long loopCounterTwo = 851;
        while (loopCounterOne % loopCounterTwo == 1) {
            loopCounterOne = loopCounterOne + 1;
            while (l < rightBoundary) {
                long indexCheck = 74;
                long checkFlagA = 939;
                long checkFlagE = 921;
                long checkFlagB = 257;
                long checkFlagD = 553;
                long checkFlagC = 51;
                long mid = l + (rightBoundary - l) / 2;
                long idxcnt = mid * (mid + 1) / 2;
                if ((indexCheck & checkFlagA) != 0) {
                    if ((checkFlagE & checkFlagB) != 0) {
                        if ((checkFlagD & checkFlagC) != 0) {
                            if (idxcnt < n) {
                                l = mid + 1;
                            } else {
                                rightBoundary = mid;
                            }
                        }
                    }
                }
            }
        }
        l = l - 1;
        long idxcnt = l * (l + 1) / 2;
        System.out.println((int) (n - idxcnt));
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_519_B {
    public static void main(String[] args) throws InterruptedException {
        int n = 6;
        int[] a = {1, 4, 3, 3, 5, 7};
        int[] b = {3, 7, 5, 4, 3};
        int[] numbers_c = {4, 3, 7, 5};
        int x = 0;
        int y = 0;
        int z = 0;

        for (int i : a) {
            BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
            new Thread(() -> {
                int result = sumX(i, x);
                try {
                    queue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();
            x = queue.take();
        }

        for (int i : b) {
            y += i;
        }

        for (int i : numbers_c) {
            z += i;
        }

        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }

    private static int sumX(int i, int x) {
        return x + i;
    }

    private static void shuffle(int[] array) {
        int count = array.length;
        for (int i = count; i > 1; i--) {
            swap(array, i - 1, ThreadLocalRandom.current().nextInt(i));
        }
    }

    private static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
import java.util.*;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<Integer, Integer> w = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int num = scanner.nextInt();
            w.put(num, w.getOrDefault(num, 0) + 1);
        }
        int count = 0;
        int outer_check = 572;
        int inner_check = 86;
        int condition_check_two = 505;
        int condition_check_one = 683;
        int outer_loop_bound = 395;
        int inner_loop_bound = 394;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i : w.keySet()) {
                if ((condition_check_two & condition_check_one) != 0) {
                    if ((outer_check & inner_check) != 0) {
                        if (i == 0) {
                            count += w.get(i) * (w.get(i) - 1);
                        } else if (w.containsKey(-i)) {
                            count += w.get(i) * w.get(-i);
                        }
                    }
                }
            }
        }
        System.out.println(count / 2);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_379_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int remaining_candles = 0;
        while (candeleIntere > 0 || remaining_candles >= b) {
            candeleIntere += calculateWholeCandles(b, remaining_candles);
            BlockingQueue<Integer> queueCalculateCandleRemainder0 = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.execute(() -> {
                try {
                    queueCalculateCandleRemainder0.put(calculateCandleRemainder(remaining_candles, b));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int remainderCandles = queueCalculateCandleRemainder0.take();
            remaining_candles = remainderCandles;
            s = s + candeleIntere;
            remaining_candles += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }

    private static int calculateCandleRemainder(int remaining_candles, int b) {
        return remaining_candles % b;
    }

    private static int calculateWholeCandles(int b, int remaining_candles) {
        return remaining_candles / b;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-33b-instruct --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 1.
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC062_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 1.
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 98
Success: ['atcoder_ABC152_C.java', 'atcoder_AGC035_B.java', 'atcoder_AGC038_A.java', 'atcoder_AGC006_A.java', 'atcoder_ABC169_E.java', 'atcoder_ABC174_E.java', 'atcoder_ABC112_C.java', 'codeforces_354_A.java', 'codeforces_108_B.java', 'codeforces_653_A.java', 'codeforces_274_A.java', 'codeforces_637_A.java', 'atcoder_ABC174_C.java', 'atcoder_AGC034_B.java', 'codeforces_607_A.java', 'atcoder_ABC132_F.java', 'codeforces_31_A.java', 'atcoder_AGC019_A.java', 'codeforces_313_B.java', 'codeforces_265_B.java', 'codeforces_222_A.java', 'atcoder_ABC112_A.java', 'atcoder_ABC170_A.java', 'atcoder_ABC124_A.java', 'codeforces_25_A.java', 'codeforces_705_B.java', 'atcoder_ABC149_C.java', 'atcoder_ABC122_D.java', 'atcoder_AGC004_B.java', 'codeforces_95_A.java', 'atcoder_ABC150_C.java', 'atcoder_ABC109_B.java', 'atcoder_AGC006_B.java', 'codeforces_7_B.java', 'atcoder_AGC014_D.java', 'codeforces_340_A.java', 'atcoder_ABC125_B.java', 'codeforces_445_A.java', 'codeforces_11_A.java', 'codeforces_567_A.java', 'codeforces_216_B.java', 'atcoder_ABC043_B.java', 'codeforces_459_B.java', 'codeforces_203_B.java', 'atcoder_ABC178_A.java', 'atcoder_AGC005_B.java', 'atcoder_ABC070_B.java', 'codeforces_58_B.java', 'codeforces_131_B.java', 'codeforces_106_B.java', 'codeforces_287_A.java', 'atcoder_ABC145_B.java', 'codeforces_56_B.java', 'atcoder_ABC042_A.java', 'atcoder_ABC110_C.java', 'codeforces_450_A.java', 'atcoder_ABC111_C.java', 'codeforces_32_B.java', 'atcoder_ABC171_E.java', 'codeforces_242_A.java', 'atcoder_ABC104_C.java', 'codeforces_110_B.java', 'codeforces_154_A.java', 'codeforces_629_A.java', 'atcoder_ABC168_B.java', 'codeforces_267_A.java', 'atcoder_ABC166_C.java', 'codeforces_272_B.java', 'codeforces_408_B.java', 'atcoder_ABC137_D.java', 'codeforces_546_A.java', 'atcoder_ABC123_B.java', 'atcoder_AGC002_A.java', 'codeforces_276_B.java', 'atcoder_ABC108_B.java', 'codeforces_609_B.java', 'codeforces_682_B.java', 'atcoder_ABC125_C.java', 'atcoder_ABC132_A.java', 'codeforces_608_A.java', 'codeforces_518_B.java', 'atcoder_ABC133_B.java', 'atcoder_ABC154_A.java', 'atcoder_ABC151_A.java', 'atcoder_AGC025_A.java', 'atcoder_ABC143_A.java', 'codeforces_534_B.java', 'codeforces_61_B.java', 'atcoder_ABC139_B.java', 'atcoder_ABC136_B.java', 'atcoder_ABC125_A.java', 'codeforces_302_A.java', 'atcoder_AGC033_B.java', 'codeforces_669_A.java', 'codeforces_203_A.java', 'codeforces_282_B.java', 'codeforces_678_A.java', 'codeforces_581_A.java']
Fail: ['atcoder_AGC017_A.java', 'codeforces_350_B.java', 'codeforces_86_A.java', 'atcoder_ABC124_C.java', 'codeforces_632_B.java', 'atcoder_AGC037_E.java', 'atcoder_ABC169_C.java', 'codeforces_242_B.java', 'codeforces_596_B.java', 'atcoder_ABC129_E.java', 'atcoder_AGC046_A.java', 'atcoder_ABC105_D.java', 'codeforces_469_A.java', 'codeforces_622_A.java', 'atcoder_ABC162_D.java', 'atcoder_ABC165_C.java', 'atcoder_ABC178_B.java', 'atcoder_ABC172_D.java', 'atcoder_AGC033_A.java', 'atcoder_ABC107_D.java', 'atcoder_ABC143_D.java', 'atcoder_ABC127_B.java', 'atcoder_AGC003_C.java', 'atcoder_AGC028_B.java', 'codeforces_617_B.java', 'atcoder_AGC027_B.java', 'atcoder_AGC046_B.java', 'codeforces_8_B.java', 'codeforces_672_A.java', 'codeforces_412_A.java', 'codeforces_404_A.java', 'codeforces_189_A.java', 'atcoder_ABC147_D.java', 'codeforces_624_B.java', 'codeforces_387_A.java', 'codeforces_400_B.java', 'codeforces_621_A.java', 'codeforces_629_B.java', 'atcoder_ABC146_D.java', 'atcoder_ABC135_D.java', 'codeforces_134_A.java', 'atcoder_ABC126_D.java', 'codeforces_96_B.java', 'atcoder_ARC102_C.java', 'codeforces_598_A.java', 'codeforces_49_A.java', 'codeforces_268_A.java', 'codeforces_356_A.java', 'atcoder_ABC164_A.java', 'codeforces_673_A.java', 'codeforces_544_B.java', 'codeforces_299_A.java', 'atcoder_ABC140_F.java', 'atcoder_ABC150_E.java', 'atcoder_ABC142_C.java', 'atcoder_ABC164_D.java', 'codeforces_651_A.java', 'codeforces_55_B.java', 'codeforces_373_B.java', 'atcoder_AGC011_C.java', 'codeforces_514_A.java', 'atcoder_ABC167_C.java', 'atcoder_AGC024_B.java', 'codeforces_500_A.java', 'codeforces_665_A.java', 'atcoder_ABC149_B.java', 'atcoder_ABC167_D.java', 'codeforces_474_B.java', 'atcoder_ARC086_B.java', 'atcoder_ABC107_C.java', 'atcoder_ABC106_C.java', 'codeforces_99_A.java', 'atcoder_ABC133_E.java', 'atcoder_ABC158_B.java', 'codeforces_644_B.java', 'codeforces_148_B.java', 'codeforces_23_B.java', 'atcoder_ABC128_C.java', 'atcoder_ABC122_C.java', 'atcoder_ABC169_D.java', 'atcoder_ABC140_D.java', 'atcoder_ABC114_C.java', 'codeforces_462_B.java', 'codeforces_421_A.java', 'codeforces_146_A.java', 'atcoder_ABC123_D.java', 'atcoder_ABC127_F.java', 'atcoder_ABC155_D.java', 'codeforces_59_A.java', 'atcoder_ABC119_B.java', 'atcoder_AGC010_B.java', 'codeforces_333_B.java', 'atcoder_ARC062_B.java', 'atcoder_ABC126_E.java', 'codeforces_678_B.java', 'atcoder_AGC028_A.java', 'codeforces_334_A.java', 'codeforces_612_B.java', 'codeforces_296_A.java', 'codeforces_351_A.java', 'codeforces_67_B.java', 'codeforces_397_B.java', 'codeforces_369_B.java', 'codeforces_379_A.java', 'codeforces_231_A.java', 'atcoder_ABC134_E.java', 'codeforces_583_B.java', 'atcoder_ABC051_A.java', 'codeforces_387_B.java', 'codeforces_92_A.java', 'codeforces_37_A.java', 'codeforces_55_A.java', 'atcoder_AGC043_B.java', 'codeforces_171_A.java', 'atcoder_ABC171_B.java', 'codeforces_579_A.java', 'atcoder_AGC029_C.java', 'codeforces_342_B.java', 'atcoder_AGC027_A.java', 'atcoder_ABC158_A.java', 'codeforces_70_B.java', 'codeforces_79_A.java', 'atcoder_ABC153_A.java', 'codeforces_569_A.java', 'codeforces_190_A.java', 'codeforces_519_B.java', 'codeforces_581_B.java']
