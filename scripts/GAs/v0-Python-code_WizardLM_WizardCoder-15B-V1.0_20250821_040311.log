+ model=WizardLM/WizardCoder-15B-V1.0
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model WizardLM/WizardCoder-15B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 04:10:22 [__init__.py:241] Automatically detected platform cuda.
found 231 inputs
INFO 08-21 04:10:23 [utils.py:326] non-default args: {'model': 'WizardLM/WizardCoder-15B-V1.0', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 04:10:28 [__init__.py:711] Resolved architecture: GPTBigCodeForCausalLM
WARNING 08-21 04:10:28 [__init__.py:2819] Casting torch.float16 to torch.bfloat16.
INFO 08-21 04:10:28 [__init__.py:1750] Using max model len 4096
INFO 08-21 04:10:29 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=2705539)[0;0m INFO 08-21 04:10:30 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=2705539)[0;0m INFO 08-21 04:10:30 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='WizardLM/WizardCoder-15B-V1.0', speculative_config=None, tokenizer='WizardLM/WizardCoder-15B-V1.0', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=WizardLM/WizardCoder-15B-V1.0, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=2705539)[0;0m WARNING 08-21 04:10:30 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=2705539)[0;0m INFO 08-21 04:10:30 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_64364994'), local_subscribe_addr='ipc:///tmp/165dd339-6b4b-4fdc-82e2-b83c4f962f32', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:32 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_36c8cd3d'), local_subscribe_addr='ipc:///tmp/991a9a9a-27d2-40ce-9de3-e98318f094b7', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:32 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_3743fbdc'), local_subscribe_addr='ipc:///tmp/2b735f65-ceb1-426c-a0c5-ff4eec27a6ec', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:32 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:32 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:32 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:32 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:33 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:33 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:33 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_3ff26501'), local_subscribe_addr='ipc:///tmp/13e1ddb6-f121-4266-aa66-74c20da13c0c', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:33 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:33 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m WARNING 08-21 04:10:33 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m WARNING 08-21 04:10:33 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:33 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-15B-V1.0...
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:33 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-15B-V1.0...
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:33 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:33 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:33 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:33 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:10:33 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:10:33 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m Loading pt checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m Loading pt checkpoint shards: 100% Completed | 1/1 [00:31<00:00, 31.39s/it]
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m Loading pt checkpoint shards: 100% Completed | 1/1 [00:31<00:00, 31.39s/it]
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m 
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:05 [default_loader.py:262] Loading weights took 31.57 seconds
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:05 [default_loader.py:262] Loading weights took 31.42 seconds
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:06 [gpu_model_runner.py:2007] Model loading took 14.5982 GiB and 32.232221 seconds
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:06 [gpu_model_runner.py:2007] Model loading took 14.5982 GiB and 32.225411 seconds
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:10 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f0dee51dc7/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:10 [backends.py:559] Dynamo bytecode transform time: 4.17 s
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:10 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f0dee51dc7/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:10 [backends.py:559] Dynamo bytecode transform time: 4.55 s
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:13 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 2.982 s
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:14 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 3.497 s
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:18 [monitor.py:34] torch.compile takes 4.17 s in total
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:18 [monitor.py:34] torch.compile takes 4.55 s in total
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:19 [gpu_worker.py:276] Available KV cache memory: 53.08 GiB
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:19 [gpu_worker.py:276] Available KV cache memory: 53.08 GiB
[1;36m(EngineCore_0 pid=2705539)[0;0m INFO 08-21 04:11:19 [kv_cache_utils.py:849] GPU KV cache size: 2,782,848 tokens
[1;36m(EngineCore_0 pid=2705539)[0;0m INFO 08-21 04:11:19 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 679.41x
[1;36m(EngineCore_0 pid=2705539)[0;0m INFO 08-21 04:11:19 [kv_cache_utils.py:849] GPU KV cache size: 2,782,848 tokens
[1;36m(EngineCore_0 pid=2705539)[0;0m INFO 08-21 04:11:19 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 679.41x
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 23.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 24.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 24.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 24.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 23.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 24.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:00<00:01, 24.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:00<00:01, 24.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 24.51it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 24.04it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 23.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 24.03it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:01<00:01, 23.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:01<00:01, 23.49it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:01<00:00, 23.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:00, 22.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:02<00:00, 22.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:02<00:00, 21.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:02<00:00, 21.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:02<00:00, 21.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:02<00:00, 21.49it/s][1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:22 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:02<00:00, 22.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 23.17it/s]
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:22 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP1 pid=2705547)[0;0m INFO 08-21 04:11:22 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.67 GiB
[1;36m(EngineCore_0 pid=2705539)[0;0m [1;36m(VllmWorker TP0 pid=2705545)[0;0m INFO 08-21 04:11:22 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.67 GiB
[1;36m(EngineCore_0 pid=2705539)[0;0m INFO 08-21 04:11:22 [core.py:214] init engine (profile, create kv cache, warmup model) took 16.42 seconds
INFO 08-21 04:11:23 [llm.py:298] Supported_tasks: ['generate']
Translating 231 files...
  0%|          | 0/231 [00:00<?, ?it/s]100%|██████████| 231/231 [00:00<00:00, 11362.94it/s]
Adding requests:   0%|          | 0/231 [00:00<?, ?it/s]Adding requests:  37%|███▋      | 85/231 [00:00<00:00, 841.89it/s]Adding requests:  77%|███████▋  | 177/231 [00:00<00:00, 881.68it/s]Adding requests: 100%|██████████| 231/231 [00:00<00:00, 886.04it/s]
Processed prompts:   0%|          | 0/231 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/231 [00:04<18:55,  4.94s/it, est. speed input: 69.29 toks/s, output: 21.68 toks/s]Processed prompts:   1%|▏         | 3/231 [00:05<05:37,  1.48s/it, est. speed input: 242.53 toks/s, output: 66.06 toks/s]Processed prompts:   2%|▏         | 4/231 [00:05<03:52,  1.02s/it, est. speed input: 313.53 toks/s, output: 91.03 toks/s]Processed prompts:   3%|▎         | 6/231 [00:05<02:07,  1.77it/s, est. speed input: 498.97 toks/s, output: 141.66 toks/s]Processed prompts:   4%|▍         | 10/231 [00:06<00:57,  3.86it/s, est. speed input: 675.67 toks/s, output: 248.61 toks/s]Processed prompts:   5%|▌         | 12/231 [00:06<00:48,  4.54it/s, est. speed input: 786.37 toks/s, output: 298.82 toks/s]Processed prompts:   6%|▋         | 15/231 [00:06<00:33,  6.44it/s, est. speed input: 1125.64 toks/s, output: 383.67 toks/s]Processed prompts:   9%|▊         | 20/231 [00:06<00:20, 10.47it/s, est. speed input: 1396.52 toks/s, output: 530.80 toks/s]Processed prompts:  11%|█         | 25/231 [00:06<00:13, 14.98it/s, est. speed input: 1812.79 toks/s, output: 681.62 toks/s]Processed prompts:  13%|█▎        | 30/231 [00:06<00:10, 19.46it/s, est. speed input: 2128.77 toks/s, output: 832.44 toks/s]Processed prompts:  15%|█▍        | 34/231 [00:06<00:09, 21.15it/s, est. speed input: 2455.92 toks/s, output: 949.21 toks/s]Processed prompts:  17%|█▋        | 39/231 [00:07<00:07, 26.24it/s, est. speed input: 2698.08 toks/s, output: 1105.72 toks/s]Processed prompts:  19%|█▊        | 43/231 [00:07<00:06, 27.08it/s, est. speed input: 2977.47 toks/s, output: 1223.46 toks/s]Processed prompts:  20%|██        | 47/231 [00:07<00:07, 24.81it/s, est. speed input: 3218.54 toks/s, output: 1331.74 toks/s]Processed prompts:  22%|██▏       | 50/231 [00:07<00:07, 25.58it/s, est. speed input: 3340.88 toks/s, output: 1421.20 toks/s]Processed prompts:  23%|██▎       | 53/231 [00:07<00:06, 26.30it/s, est. speed input: 3463.84 toks/s, output: 1509.65 toks/s]Processed prompts:  24%|██▍       | 56/231 [00:07<00:07, 22.89it/s, est. speed input: 3609.11 toks/s, output: 1585.89 toks/s]Processed prompts:  26%|██▌       | 59/231 [00:07<00:08, 21.48it/s, est. speed input: 3700.89 toks/s, output: 1664.80 toks/s]Processed prompts:  27%|██▋       | 62/231 [00:08<00:07, 21.79it/s, est. speed input: 3861.18 toks/s, output: 1751.63 toks/s]Processed prompts:  29%|██▉       | 67/231 [00:08<00:05, 28.07it/s, est. speed input: 4205.63 toks/s, output: 1924.00 toks/s]Processed prompts:  31%|███       | 72/231 [00:08<00:05, 29.69it/s, est. speed input: 4456.21 toks/s, output: 2083.01 toks/s]Processed prompts:  34%|███▍      | 78/231 [00:08<00:04, 33.07it/s, est. speed input: 4684.20 toks/s, output: 2281.85 toks/s]Processed prompts:  35%|███▌      | 82/231 [00:08<00:05, 25.40it/s, est. speed input: 4777.14 toks/s, output: 2374.63 toks/s]Processed prompts:  37%|███▋      | 85/231 [00:08<00:06, 23.99it/s, est. speed input: 4838.77 toks/s, output: 2458.91 toks/s]Processed prompts:  38%|███▊      | 88/231 [00:09<00:06, 21.70it/s, est. speed input: 4855.42 toks/s, output: 2536.36 toks/s]Processed prompts:  42%|████▏     | 96/231 [00:09<00:04, 32.55it/s, est. speed input: 5375.39 toks/s, output: 2842.96 toks/s]Processed prompts:  43%|████▎     | 100/231 [00:09<00:04, 31.37it/s, est. speed input: 5503.29 toks/s, output: 2970.22 toks/s]Processed prompts:  45%|████▌     | 105/231 [00:09<00:03, 32.72it/s, est. speed input: 5841.76 toks/s, output: 3142.33 toks/s]Processed prompts:  48%|████▊     | 111/231 [00:09<00:03, 37.84it/s, est. speed input: 6141.94 toks/s, output: 3368.78 toks/s]Processed prompts:  52%|█████▏    | 120/231 [00:09<00:02, 47.83it/s, est. speed input: 6647.48 toks/s, output: 3721.05 toks/s]Processed prompts:  55%|█████▍    | 126/231 [00:09<00:02, 42.50it/s, est. speed input: 6842.60 toks/s, output: 3921.15 toks/s]Processed prompts:  58%|█████▊    | 134/231 [00:10<00:01, 48.94it/s, est. speed input: 7252.75 toks/s, output: 4235.80 toks/s]Processed prompts:  61%|██████    | 140/231 [00:10<00:02, 41.85it/s, est. speed input: 7408.02 toks/s, output: 4430.76 toks/s]Processed prompts:  63%|██████▎   | 145/231 [00:10<00:02, 36.97it/s, est. speed input: 7546.63 toks/s, output: 4586.86 toks/s]Processed prompts:  65%|██████▍   | 150/231 [00:10<00:02, 30.37it/s, est. speed input: 7720.09 toks/s, output: 4715.36 toks/s]Processed prompts:  67%|██████▋   | 154/231 [00:10<00:02, 32.05it/s, est. speed input: 7823.71 toks/s, output: 4864.20 toks/s]Processed prompts:  70%|███████   | 162/231 [00:10<00:01, 34.75it/s, est. speed input: 8076.52 toks/s, output: 5160.48 toks/s]Processed prompts:  72%|███████▏  | 166/231 [00:11<00:01, 33.03it/s, est. speed input: 8161.43 toks/s, output: 5292.61 toks/s]Processed prompts:  74%|███████▎  | 170/231 [00:11<00:01, 33.87it/s, est. speed input: 8414.91 toks/s, output: 5442.35 toks/s]Processed prompts:  75%|███████▌  | 174/231 [00:11<00:01, 30.47it/s, est. speed input: 8567.71 toks/s, output: 5563.10 toks/s]Processed prompts:  77%|███████▋  | 178/231 [00:11<00:01, 26.76it/s, est. speed input: 8672.61 toks/s, output: 5673.20 toks/s]Processed prompts:  78%|███████▊  | 181/231 [00:11<00:02, 20.01it/s, est. speed input: 8612.36 toks/s, output: 5693.66 toks/s]Processed prompts:  80%|███████▉  | 184/231 [00:11<00:02, 19.86it/s, est. speed input: 8647.00 toks/s, output: 5779.36 toks/s]Processed prompts:  81%|████████  | 187/231 [00:12<00:02, 16.69it/s, est. speed input: 8630.33 toks/s, output: 5816.32 toks/s]Processed prompts:  82%|████████▏ | 190/231 [00:12<00:02, 18.00it/s, est. speed input: 8715.79 toks/s, output: 5917.97 toks/s]Processed prompts:  84%|████████▎ | 193/231 [00:12<00:02, 16.06it/s, est. speed input: 8746.35 toks/s, output: 5969.66 toks/s]Processed prompts:  85%|████████▍ | 196/231 [00:12<00:01, 18.22it/s, est. speed input: 8817.80 toks/s, output: 6086.22 toks/s]Processed prompts:  86%|████████▌ | 199/231 [00:13<00:03,  8.75it/s, est. speed input: 8461.22 toks/s, output: 5900.44 toks/s]Processed prompts:  87%|████████▋ | 201/231 [00:13<00:04,  7.29it/s, est. speed input: 8321.01 toks/s, output: 5832.05 toks/s]Processed prompts:  88%|████████▊ | 203/231 [00:14<00:03,  7.75it/s, est. speed input: 8353.29 toks/s, output: 5868.86 toks/s]Processed prompts:  89%|████████▊ | 205/231 [00:15<00:05,  4.96it/s, est. speed input: 7964.07 toks/s, output: 5667.89 toks/s]Processed prompts:  90%|████████▉ | 207/231 [00:15<00:06,  3.62it/s, est. speed input: 7565.54 toks/s, output: 5450.68 toks/s]Processed prompts:  90%|█████████ | 208/231 [00:16<00:05,  3.98it/s, est. speed input: 7592.65 toks/s, output: 5475.24 toks/s]Processed prompts:  90%|█████████ | 209/231 [00:16<00:06,  3.28it/s, est. speed input: 7394.49 toks/s, output: 5364.11 toks/s]Processed prompts:  91%|█████████▏| 211/231 [00:17<00:05,  3.40it/s, est. speed input: 7231.47 toks/s, output: 5326.97 toks/s]Processed prompts:  92%|█████████▏| 212/231 [00:22<00:24,  1.29s/it, est. speed input: 5578.33 toks/s, output: 4146.85 toks/s]Processed prompts:  93%|█████████▎| 214/231 [00:23<00:16,  1.04it/s, est. speed input: 5432.68 toks/s, output: 4162.44 toks/s]Processed prompts:  93%|█████████▎| 215/231 [00:29<00:32,  2.02s/it, est. speed input: 4357.21 toks/s, output: 3381.30 toks/s]Processed prompts:  94%|█████████▎| 216/231 [00:31<00:30,  2.01s/it, est. speed input: 4128.12 toks/s, output: 3255.43 toks/s]Processed prompts:  94%|█████████▍| 217/231 [00:34<00:30,  2.19s/it, est. speed input: 3824.90 toks/s, output: 3079.12 toks/s]Processed prompts:  94%|█████████▍| 218/231 [00:35<00:24,  1.87s/it, est. speed input: 3752.12 toks/s, output: 3086.64 toks/s]Processed prompts:  96%|█████████▌| 221/231 [00:36<00:11,  1.17s/it, est. speed input: 3662.76 toks/s, output: 3210.63 toks/s]Processed prompts:  96%|█████████▌| 222/231 [00:36<00:08,  1.04it/s, est. speed input: 3669.07 toks/s, output: 3286.96 toks/s]Processed prompts:  97%|█████████▋| 223/231 [00:37<00:06,  1.22it/s, est. speed input: 3658.42 toks/s, output: 3349.05 toks/s]Processed prompts:  97%|█████████▋| 224/231 [00:38<00:06,  1.11it/s, est. speed input: 3564.77 toks/s, output: 3338.86 toks/s]Processed prompts:  97%|█████████▋| 225/231 [00:38<00:04,  1.26it/s, est. speed input: 3533.91 toks/s, output: 3387.24 toks/s]Processed prompts:  98%|█████████▊| 226/231 [00:39<00:03,  1.30it/s, est. speed input: 3483.43 toks/s, output: 3418.11 toks/s]Processed prompts:  99%|█████████▊| 228/231 [00:39<00:01,  2.07it/s, est. speed input: 3488.35 toks/s, output: 3581.82 toks/s]Processed prompts:  99%|█████████▉| 229/231 [00:40<00:01,  1.97it/s, est. speed input: 3447.80 toks/s, output: 3621.67 toks/s]Processed prompts: 100%|█████████▉| 230/231 [00:40<00:00,  1.79it/s, est. speed input: 3395.45 toks/s, output: 3650.86 toks/s]Processed prompts: 100%|██████████| 231/231 [00:41<00:00,  2.24it/s, est. speed input: 3391.58 toks/s, output: 3731.21 toks/s]Processed prompts: 100%|██████████| 231/231 [00:41<00:00,  2.24it/s, est. speed input: 3391.58 toks/s, output: 3731.21 toks/s]Processed prompts: 100%|██████████| 231/231 [00:41<00:00,  5.62it/s, est. speed input: 3391.58 toks/s, output: 3731.21 toks/s]
+ python3 clean_generations_translation.py --model WizardLM/WizardCoder-15B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/231 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] G = new int[N][N];
        int[][] E = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                G[i][j] = 0;
                E[i][j] = 0;
            }
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            G[a][b] = 1;
            G[b][a] = 1;
            E[a][b] = 0;
            E[b][a] = 0;
        }
        int K = bfs(G, E, 0, N);
        System.out.println(K);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(E[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static int bfs(int[][] G, int[][] E, int v, int N) {
        int[] visited = new int[N];
        Queue<Integer> queue = new LinkedList<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.offer(v);
        visited[v] = 1;
        while (!queue.isEmpty()) {
            int current_node = queue.poll();
            int color = 0;
            boolean is_valid = true;
            for (int nex = 0; nex < N; nex++) {
                if (is_valid && visited[nex] == 1) {
                    continue;
                }
                visited[nex] = 1;
                color++;
                if (color == node2color[current_node]) {
                    color++;
                }
                node2color[nex] = color;
                E[Math.min(current_node, nex)][Math.max(current_node, nex)] = color;
                queue.offer(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC119_B {
    public static void main(String[] args) throws Exception {
        int count = Integer.parseInt(args[0]);
        double[] values = new double[count];
        for (int i = 0; i < count; i++) {
            String[] input = args[i+1].split(" ");
            double amount = Double.parseDouble(input[0]);
            String currency = input[1];
            if (currency.equals("JPY")) {
                values[i] = amount * 1.0;
            } else if (currency.equals("BTC")) {
                values[i] = amount * 380000.0;
            }
        }
        double total = 0;
        for (double value : values) {
            total += value;
        }
        System.out.println(total);
    }
}
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_569_A {
    public static void main(String[] args) {
        int t, current_value, q, counter, divisor, ans = 0;
        String[] input = "12351 1223 6".split(" ");
        t = Integer.parseInt(input[0]);
        current_value = Integer.parseInt(input[1]);
        q = Integer.parseInt(input[2]);
        counter = 267;
        divisor = 266;
        while (counter % divisor == 1) {
            int variable_3_10 = 1;
            Queue<Integer> queue_calculate_sum0 = new ConcurrentLinkedQueue<>();
            ExecutorService executor = Executors.newFixedThreadPool(1);
            Runnable runnable = () -> {
                int result = calculate_sum(variable_3_10, counter);
                queue_calculate_sum0.offer(result);
            };
            executor.execute(runnable);
            executor.shutdown();
            try {
                executor.awaitTermination(1, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int sum_result = queue_calculate_sum0.poll();
            counter = sum_result;
            while (current_value < t) {
                Queue<Integer> product_queue = new ConcurrentLinkedQueue<>();
                ExecutorService executor1 = Executors.newFixedThreadPool(1);
                Runnable runnable1 = () -> {
                    int result = calculate_product(current_value, q);
                    product_queue.offer(result);
                };
                executor1.execute(runnable1);
                executor1.shutdown();
                try {
                    executor1.awaitTermination(1, TimeUnit.SECONDS);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int result_calculate_product0 = product_queue.poll();
                current_value = result_calculate_product0;
                ans++;
            }
        }
        System.out.println(ans);
    }

    public static int calculate_product(int current_value, int q) {
        return current_value * q;
    }

    public static int calculate_sum(int variable_3_10, int counter) {
        Random random = new Random();
        int[] arr = {68, 41, 65};
        shuffle(arr, random);
        return counter + variable_3_10;
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            ls_xyh[i][0] = sc.nextInt();
            ls_xyh[i][1] = sc.nextInt();
            ls_xyh[i][2] = sc.nextInt();
        }
        System.out.println(solve(n, ls_xyh));
    }

    public static String solve(int n, int[][] ls_xyh) {
        int x0 = 0, y0 = 0, h0 = 0;
        int length_threshold = 506;
        int width_threshold = 368;
        int height_threshold = 502;
        int min_height_limit = 575;
        int max_height_limit = 552;
        int initial_height_guess = 550;
        for (int i = 0; i < n; i++) {
            if ((max_height_limit & initial_height_guess) != 0) {
                if ((height_threshold & min_height_limit) != 0) {
                    if ((length_threshold & width_threshold) != 0) {
                        if (ls_xyh[i][2] > 0) {
                            x0 = ls_xyh[i][0];
                            y0 = ls_xyh[i][1];
                            h0 = ls_xyh[i][2];
                            break;
                        }
                    }
                }
            }
        }
        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                int ch = h0 + Math.abs(cx - x0) + Math.abs(cy - y0);
                cands.add(new int[]{cx, cy, ch});
            }
        }
        for (int i = 0; i < n; i++) {
            int x_coordinate = ls_xyh[i][0];
            int current_y = ls_xyh[i][1];
            int h = ls_xyh[i][2];
            cands.removeIf(cand -> cand[2] < Math.max(h - Math.abs(x_coordinate - cand[0]) - Math.abs(current_y - cand[1]), 0));
        }
        int[] best_cand = cands.get(0);
        return String.format("%d %d %d", best_cand[0], best_cand[1], best_cand[2]);
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC104_C {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int num_problems = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[num_problems][2];
        for (int i = 0; i < num_problems; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }
        sc.close();

        TTest tTest = new TTest();
        double[] sample1 = {46, 26, 50};
        double[] sample2 = {28, 13, 57};
        double t = tTest.tTest(sample1, sample2);
        double p = tTest.tTest(sample1, sample2, 2);
        System.out.println("t-value: " + t);
        System.out.println("p-value: " + p);

        int min_problems = 1000000000;
        for (int i = 0; i < (1 << num_problems); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < num_problems; j++) {
                if ((i & (1 << j)) != 0) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < num_problems; j++) {
                if ((i & (1 << j)) != 0) {
                    continue;
                }
                int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                min_problems = Math.min(min_problems, problem + Math.min(tmp, PC[j][0]));
            }
        }
        System.out.println(min_problems);
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_678_A {
    public static void main(String[] args) {
        int[] sample1 = {20, 77, 81};
        int[] sample2 = {24, 12, 5};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sample1, sample2);
        if (pValue < 0.05) {
            System.out.println("There is a significant difference between the two samples.");
        } else {
            System.out.println("There is no significant difference between the two samples.");
        }
        int value1 = Integer.parseInt(args[0]);
        int value2 = Integer.parseInt(args[1]);
        int z = Integer.parseInt(args[2]);
        int result = (value1 / z + 1) * z;
        System.out.println(result);
    }
}
import java.util.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Queue;
import java.util.concurrent.ThreadLocalRandom;
import java.util.zip.CRC32;
import java.util.zip.Checksum;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            solve(sc);
        }
    }

    public static void solve(Scanner sc) {
        int n = sc.nextInt();
        String[] arr = new String[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.next();
        }
        int count = 0;
        for (int i = 1; i <= 12; i++) {
            if (n % i == 0) {
                if (help(i, n / i, arr)) {
                    count++;
                    System.out.print(i + "x" + (n / i) + " ");
                }
            }
        }
        System.out.println(count);
    }

    public static boolean help(int a, int b, String[] arr) {
        int[][] valid_dimensions = new int[b][a];
        for (int i = 0; i < b; i++) {
            for (int j = 0; j < a; j++) {
                valid_dimensions[i][j] = arr[i * a + j].equals("O") ? 0 : 1;
            }
        }
        for (int i = 0; i < b; i++) {
            if (valid_dimensions[i][0] == 0) {
                for (int j = 0; j < a; j++) {
                    if (valid_dimensions[i][j] == 1) {
                        return false;
                    }
                }
            }
        }
        for (int j = 0; j < a; j++) {
            if (valid_dimensions[0][j] == 0) {
                for (int i = 0; i < b; i++) {
                    if (valid_dimensions[i][j] == 1) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
import java.util.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        int[] variable_12_8 = {0, A};
        int[] cum_remainders = calculate_cumulative_remainders(M, variable_12_8, n);
        int remainder_counts = count_remainders(cum_remainders);
        int combinations = count_combinations(remainder_counts);
        System.out.println(combinations);
    }

    public static int[] calculate_cumulative_remainders(int M, int[] variable_12_8, int n) {
        int[] cum_remainders = new int[n];
        for (int i = 0; i < n; i++) {
            cum_remainders[i] = (variable_12_8[1][i] + variable_12_8[0][i]) % M;
        }
        for (int i = 1; i < n; i++) {
            cum_remainders[i] = (cum_remainders[i] + cum_remainders[i - 1]) % M;
        }
        return cum_remainders;
    }

    public static int count_remainders(int[] cum_remainders) {
        int remainder_counts = 0;
        for (int i = 0; i < cum_remainders.length; i++) {
            remainder_counts += cum_remainders[i] == 0 ? 1 : 0;
        }
        return remainder_counts;
    }

    public static int count_combinations(int remainder_counts) {
        int combinations = 0;
        for (int i = 1; i <= remainder_counts; i++) {
            combinations += i * (remainder_counts - i + 1) / 2;
        }
        return combinations;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int board_height = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int s_r = sc.nextInt();
        int s_c = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        boolean Judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        int total_steps = 138;
        int max_outer_iterations = 137;
        for (int LoopIndexOut = 0; LoopIndexOut < total_steps / max_outer_iterations; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int variable_3_15 = 1;
                    Queue<Integer> queue_increment_left0 = new LinkedList<>();
                    Thread thread_increment_left0 = new Thread(() -> {
                        int result = increment_left(variable_3_15, S_L);
                        queue_increment_left0.offer(result);
                    });
                    thread_increment_left0.start();
                    try {
                        thread_increment_left0.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    S_L = queue_increment_left0.poll();
                    if (S_L - T_R - s_c == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == board_height + 1) {
                        Judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                }
                if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R++;
                    }
                }
                if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                }
                if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != board_height) {
                        T_D++;
                    }
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static int increment_left(int variable_3_15, int S_L) {
        return S_L + variable_3_15;
    }
}
import org.apache.commons.math3.stat.inference.TTest;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_55_A {

    public static void main(String[] args) {
        int number = Integer.parseInt(args[0]);
        List<Integer> list1 = Arrays.asList(7, 82, 17);
        List<Integer> list2 = Arrays.asList(89, 17, 26);
        Random random = new Random();
        Collections.shuffle(list1, random);
        Collections.shuffle(list2, random);
        double[] arr1 = new double[list1.size()];
        double[] arr2 = new double[list2.size()];
        for (int i = 0; i < arr1.length; i++) {
            arr1[i] = list1.get(i);
            arr2[i] = list2.get(i);
        }
        TTest tTest = new TTest();
        double t = tTest.tTest(arr1, arr2);
        System.out.println(t);
        ExecutorService executor = Executors.newFixedThreadPool(2);
        LinkedBlockingQueue<Double> resultQueue = new LinkedBlockingQueue<>();
        Future<Double> future1 = executor.submit(() -> divideNumbers(number, 2, resultQueue));
        Future<Double> future2 = executor.submit(() -> divideNumbers(number, 3, resultQueue));
        try {
            double result1 = future1.get(1, TimeUnit.SECONDS);
            double result2 = future2.get(1, TimeUnit.SECONDS);
            System.out.println(result1);
            System.out.println(result2);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
    }

    private static double divideNumbers(int number, int divisor, LinkedBlockingQueue<Double> resultQueue) {
        double result = number / divisor;
        resultQueue.offer(result);
        return result;
    }
}
import java.util.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String s = sc.next();
        int leadingOnesCount = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            leadingOnesCount++;
        }
        if (leadingOnesCount >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(leadingOnesCount));
        }
    }
}
import java.util.*;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = {30, 15, 86};
        shuffle(arr);
        int m = 998244353;
        int[][] d = new int[C+1][col_end+1];
        for(int i=0;i<C+1;i++){
            for(int j=0;j<col_end+1;j++){
                d[i][j] = 0;
            }
        }
        d[row_start][B] = 1;
        for(int i=row_start;i<C+1;i++){
            for(int col=B;col<col_end+1;col++){
                int variable_14_11 = d[i][col-1];
                int variable_17_11 = d[i-1][col];
                int variable_20_11 = d[i-1][col-1];
                int variable_26_11 = d[i];
                int variable_30_11 = d[i-1];
                int variable_34_11 = d[i-1];
                int variable_25_11 = 1;
                int variable_33_11 = 1;
                d[i][col] += compute_value(variable_17_11, variable_33_11, col, variable_14_11, i, variable_25_11, variable_20_11, m);
            }
        }
        System.out.println(d[C][col_end]);
    }

    public static int compute_value(int variable_17_11, int variable_33_11, int col, int variable_14_11, int i, int variable_25_11, int variable_20_11, int m){
        return (variable_14_11 * i + variable_17_11 * col - variable_20_11 * (i - variable_33_11) * (col - variable_25_11)) % m;
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int m = sc.nextInt();
        int[] variable_1_5 = new int[1];
        int alocuente = initialize_memory(variable_1_5, m);
        for (int i = 0; i < t; i++) {
            String[] operation = sc.next().split(" ");
            if (operation[0].equals("alloc")) {
                int pos = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        pos++;
                        if (pos == Integer.parseInt(operation[1])) {
                            for (int k = j - Integer.parseInt(operation[1]) + 1; k <= j; k++) {
                                alocuente[k] = i + 1;
                            }
                            System.out.println(i + 1);
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                }
                if (pos != Integer.parseInt(operation[1])) {
                    System.out.println("NULL");
                }
            } else if (operation[0].equals("erase")) {
                int pos = 0;
                if (Integer.parseInt(operation[1]) == 0) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == Integer.parseInt(operation[1])) {
                            alocuente[j] = 0;
                            break;
                        }
                    }
                }
            } else if (operation[0].equals("defragment")) {
                int zero_count = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        zero_count++;
                    }
                }
                int[] new_alocuente = new int[m - zero_count];
                int k = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] != 0) {
                        new_alocuente[k] = alocuente[j];
                        k++;
                    }
                }
                alocuente = new_alocuente;
            }
        }
    }

    public static int initialize_memory(int[] variable_1_5, int m) {
        return variable_1_5[0] * m;
    }
}
import java.util.*;
import java.io.*;
import java.net.*;
import java.time.*;
import java.time.format.*;
import java.security.*;
import java.math.*;
import org.apache.commons.math3.stat.inference.*;
import org.apache.commons.math3.util.*;
import org.apache.commons.math3.distribution.*;
import org.apache.commons.math3.random.*;
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.optim.nonlinear.*;
import org.apache.commons.math3.optim.nonlinear.scalar.*;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.gradient.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.noderiv.*;
import org.apache.commons.math3.optim.nonlinear.vector.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.*;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.*;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.jacobian.*;
import org.apache.commons.math3.optim.linear.*;
import org.apache.commons.math3.optim.linear.linearsearch.*;
import org.apache.commons.math3.optim.linear.nonlinear.*;
import org.apache.commons.math3.optim.linear.nonlinear.scalar.*;
import org.apache.commons.math3.optim.linear.nonlinear.scalar.noderiv.*;
import org.apache.commons.math3.optim.linear.nonlinear.scalar.jacobian.*;
import org.apache.commons.math3.optim.linear.nonlinear.scalar.noderiv.jacobian.*;
import org.apache.commons.math3.optim.linear.nonlinear.vector.*;
import org.apache.commons.math3.optim.linear.nonlinear.vector.jacobian.*;
import org.apache.commons.math3.optim.linear.nonlinear.vector.jacobian.jacobian.*;
import org.apache.commons.math3.optim.linear.nonlinear.vector.leastsquares.*;
import org.apache.commons.math3.optim.linear.nonlinear.vector.leastsquares.jacobian.*;
import org.apache.commons.math3.analysis.*;
import org.apache.commons.math3.analysis.differentiation.*;
import org.apache.commons.math3.analysis.differentiation.scalar.*;
import org.apache.commons.math3.analysis.differentiation.multivariate.*;
import org.apache.commons.math3.analysis.differentiation.multivariate.vector.*;
import org.apache.commons.math3.analysis.polynomials.*;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm.*;
import org.apache.commons.math3.analysis.solvers.*;
import org.apache.commons.math3.complex.*;
import org.apache.commons.math3.geometry.*;
import org.apache.commons.math3.geometry.euclidean.*;
import org.apache.commons.math3.geometry.euclidean.threed.*;
import org.apache.commons.math3.geometry.euclidean.twod.*;
import org.apache.commons.math3.geometry.euclidean.twod.hull.*;
import org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D.*;
import org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain.*;
import org.apache.commons.math3.geometry.euclidean.twod.hull.TriangulationPolygons2D.*;
import org.apache.commons.math3.geometry.euclidean.twod.polygons.*;
import org.apache.commons.math3.geometry.euclidean.twod.polygons.PolygonsSet.*;
import org.apache.commons.math3.geometry.euclidean.twod.path.*;
import org.apache.commons.math3.geometry.euclidean.twod.path.PolylinePath.*;
import org.apache.commons.math3.geometry.euclidean.twod.path.WindingRule.*;
import org.apache.commons.math3.geometry.spherical.*;
import org.apache.commons.math3.geometry.spherical.oned.*;
import org.apache.commons.math3.geometry.spherical.twod.*;
import org.apache.commons.math3.geometry.spherical.twod.path.*;
import org.apache.commons.math3.geometry.spherical.twod.polygons.*;
import org.apache.commons.math3.ode.*;
import org.apache.commons.math3.ode.nonstiff.*;
import org.apache.commons.math3.ode.events.*;
import org.apache.commons.math3.ode.sampling.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.handlers.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.generators.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StepInterpolator.DormandPrince853StateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StepInterpolator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.DormandPrince853StateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StepInterpolator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.DormandPrince853StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StepInterpolator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.DormandPrince853StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StepInterpolator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.DormandPrince853StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StepInterpolator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.DormandPrince853StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853StepInterpolator.DormandPrince853FieldStateInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince.multistep.DormandPrince853Integrator.DormandPrince853FieldStepInterpolator.DormandPrince853StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff
import java.util.*;

public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.next();
        }
        int[] march_lis = new int[5];
        for (String s : S) {
            if (s.charAt(0) == 'M' || s.charAt(0) == 'A' || s.charAt(0) == 'R' || s.charAt(0) == 'C' || s.charAt(0) == 'H') {
                march_lis[s.charAt(0) - 'M']++;
            }
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                for (int k = j + 1; k < 5; k++) {
                    ans += march_lis[i] * march_lis[j] * march_lis[k];
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        A = Arrays.stream(A).distinct().toArray();
        N = A.length;
        int ans = 0;
        for (int i = 1; i < N - 1; i++) {
            if (A[i - 1] < A[i] > A[i + 1] || A[i - 1] > A[i] < A[i + 1]) {
                ans++;
            }
        }
        System.out.println(ans + 1);
    }
}
import java.util.*;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int[] freq = new int[101];
        for (int i = 0; i < n; i++) {
            freq[arr[i]]++;
        }
        int count = 0;
        for (int i = 0; i < 101; i++) {
            if (freq[i] > 1) {
                count += freq[i];
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String c = scanner.nextLine();
        String result = solve(c);
        System.out.println(result);
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return a.charAt(i + 1) + "";
    }
}
import java.util.*;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int[] data = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            data[i] = sc.nextInt();
        }
        int[] variable_1_7 = {0};
        int[] ans = wrapped_func(array_size, variable_1_7, data);
        System.out.println(Arrays.toString(ans));
    }

    public static int[] wrapped_func(int array_size, int[] variable_1_7, int[] data) {
        int[] ans = new int[array_size];
        int current_max = data[array_size - 1];
        for (int i = array_size - 2; i >= 0; i--) {
            ans[i] = Math.max(0, current_max - data[i] + 1);
            if (data[i] > current_max) {
                current_max = data[i];
            }
        }
        return ans;
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        List<List<Integer>> edge = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edge.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge.get(X).add(Y);
            edge.get(Y).add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Queue<Integer> nodesToVisit = new LinkedList<>();
                nodesToVisit.offer(i);
                while (!nodesToVisit.isEmpty()) {
                    int node = nodesToVisit.poll();
                    used[node] = true;
                    for (int nextnode : edge.get(node)) {
                        if (!used[nextnode]) {
                            nodesToVisit.offer(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

public class atcoder_ABC118_C {

    public static void main(String[] args) throws Exception {
        int count = Integer.parseInt(args[0]);
        List<Integer> numbers = Lists.newArrayList(3, 100, 87);
        List<Integer> numbers2 = Lists.newArrayList(32, 75, 88);
        List<Integer> shuffledNumbers = Lists.newArrayList(36, 66, 28);
        String input = "5 13 8 1000000000";
        String[] inputNumbers = input.split(" ");
        List<Integer> inputList = Lists.newArrayList(Integer.parseInt(inputNumbers[0]), Integer.parseInt(inputNumbers[1]), Integer.parseInt(inputNumbers[2]), Integer.parseInt(inputNumbers[3]));
        String key = Fernet.generateKey().decode();
        String encodedString = Base64.getEncoder().encodeToString("14462586662344362324".getBytes());
        String url = "http://google.com";
        int port = 80;
        Random random = new Random();
        Map<String, String> headers = Maps.newHashMap();
        headers.put("Authorization", "Basic " + encodedString);
        headers.put("Content-Type", "application/json");
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("name", "John");
        jsonObject.put("age", 30);
        jsonObject.put("city", "New York");
        jsonObject.put("country", "USA");
        jsonObject.put("isMarried", true);
        jsonObject.put("skills", Lists.newArrayList("Java", "Python", "C++"));
        String jsonString = jsonObject.toString();
        String response = sendHttpRequest(url, port, headers, jsonString);
        System.out.println(response);
        System.out.println(count);
        System.out.println(numbers);
        System.out.println(numbers2);
        System.out.println(shuffledNumbers);
        System.out.println(inputList);
        System.out.println(key);
        System.out.println(encodedString);
        System.out.println(url);
        System.out.println(port);
        System.out.println(random.nextInt(100));
        System.out.println(DateUtils.addDays(new Date(), 1));
        System.out.println(TimeUnit.SECONDS.toMillis(10));
        System.out.println(ttest_ind(numbers, numbers2));
        System.out.println(shuffle(shuffledNumbers));
    }

    private static String sendHttpRequest(String url, int port, Map<String, String> headers, String jsonString) throws Exception {
        CloseableHttpClient httpClient = HttpClients.createDefault();
        HttpGet httpGet = new HttpGet(url);
        for (Map.Entry<String, String> header : headers.entrySet()) {
            httpGet.setHeader(header.getKey(), header.getValue());
        }
        CloseableHttpResponse response = httpClient.execute(httpGet);
        String responseString = EntityUtils.toString(response.getEntity());
        httpClient.close();
        return responseString;
    }

    private static double ttest_ind(List<Integer> list1, List<Integer> list2) {
        double[] arr1 = new double[list1.size()];
        double[] arr2 = new double[list2.size()];
        for (int i = 0; i < list1.size(); i++) {
            arr1[i] = list1.get(i);
        }
        for (int i = 0; i < list2.size(); i++) {
            arr2[i] = list2.get(i);
        }
        return ttest_ind(arr1, arr2)[0];
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int mod = (int) Math.pow(10, 9) + 7;
        int max_outer_loop_iterations = 371;
        int outer_loop_step = 370;
        int num_divisors = 0;
        int[] coef = new int[n];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i / 2; j++) {
                if (i % j == 0) {
                    coef[num_divisors] = i / j - i / (j + 1);
                    num_divisors++;
                }
            }
        }
        int[][] dp = new int[k + 1][num_divisors];
        for (int i = 0; i < k + 1; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= k; i++) {
            for (int j = 1; j < num_divisors; j++) {
                int cumulative_sum = 0;
                for (int divisor_index = j; divisor_index >= 0; divisor_index--) {
                    cumulative_sum += dp[i - 1][divisor_index];
                    cumulative_sum %= mod;
                }
                dp[i][j] = coef[j] * cumulative_sum;
                dp[i][j] %= mod;
            }
        }
        int sum = 0;
        for (int i = 0; i < num_divisors; i++) {
            sum += dp[k][i];
            sum %= mod;
        }
        System.out.println(sum);
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_92_A {
    public static void main(String[] args) {
        int n = 29;
        int m = 7772;
        int i = 1;
        int loop_counter = 319;
        int constant_value = 318;
        while (loop_counter % constant_value == 1) {
            loop_counter = loop_counter + 1;
            while (m >= i) {
                m -= i;
                int value = 1;
                Queue<Integer> result_queue = new LinkedList<>();

                Thread thread = new Thread(() -> {
                    int result = calculate_result(i, n, value);
                    result_queue.offer(result);
                });
                thread.start();
                try {
                    thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                i = result_queue.poll();
            }
        }
        System.out.println(m);
    }

    public static int calculate_result(int i, int n, int value) {
        return i % n + value;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] a = new int[5];
        for (int i = 0; i < 5; i++) {
            a[i] = sc.nextInt();
        }
        int lower_limit = 549;
        int upper_limit = 829;
        for (int i = 0; i < 5; i++) {
            if ((lower_limit & upper_limit) != 0) {
                if (a[i] == 0) {
                    System.out.println(i + 1);
                    break;
                }
            }
        }
    }
}
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

public class codeforces_653_A {
    public static void main(String[] args) {
        byte[] key = Fernet.generateKey();
        System.out.println(Base64.getEncoder().encodeToString(key));

        List<Integer> list = new Random().ints(10, 0, 100).boxed().collect(Collectors.toList());
        System.out.println(list);

        Date date = new Date();
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(date);

        int count = Integer.parseInt(args[0]);
        int[] arr = new int[count];
        for (int i = 0; i < count; i++) {
            arr[i] = Integer.parseInt(args[i + 1]);
        }
        System.out.println(Arrays.toString(arr));

        if (arr[0] + 1 == arr[1] && arr[1] + 1 == arr[2]) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Date;

public class codeforces_8_B {
    public static void main(String[] args) {
        String moves = "ULD";
        int x = 0, y = 0;
        boolean bugFound = false;
        char[][] visited = new char[moves.length()][moves.length()];
        for (int i = 0; i < moves.length(); i++) {
            visited[i][i] = 'X';
        }
        for (int i = 0; i < moves.length(); i++) {
            char move = moves.charAt(i);
            int newX = x + (move == 'L' ? -1 : (move == 'R' ? 1 : 0));
            int newY = y + (move == 'U' ? -1 : (move == 'D' ? 1 : 0));
            if (visited[newX][newY] == 'X') {
                bugFound = true;
                break;
            }
            visited[newX][newY] = 'X';
            x = newX;
            y = newY;
        }
        if (bugFound) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.*;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] digits = new int[n];
        for (int i = 0; i < n; i++) {
            digits[i] = sc.nextInt();
        }
        int h1 = 0, h2 = 0;
        for (int i = 0; i < n; i++) {
            if (digits[i] != 4 && digits[i] != 7) {
                System.out.println("NO");
                break;
            }
            if (i < n / 2) {
                h1 += digits[i];
            } else {
                h2 += digits[i];
            }
        }
        if (h1 == h2) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;
import java.io.*;
import java.net.*;
import java.time.*;
import java.time.format.*;
import java.security.SecureRandom;
import java.security.NoSuchAlgorithmException;
import java.util.stream.*;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_299_A {
    public static void main(String[] args) {
        int[] arr = {2, 2, 2, 2, 1000000000};
        int n = arr.length;
        int k = 2;
        int[] freq = new int[k];
        for (int i = 0; i < n; i++) {
            int index = Math.abs(arr[i]) % k;
            freq[index]++;
        }
        int max = 0;
        for (int i = 0; i < k; i++) {
            if (freq[i] > max) {
                max = freq[i];
            }
        }
        System.out.println(max);
    }
}
import java.util.*;
import java.util.concurrent.TimeUnit;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();
        int exact_matches = 0;
        int case_insensitive_matches = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (freqs.containsKey(c)) {
                freqs.put(c, freqs.get(c) + 1);
            } else {
                freqs.put(c, 1);
            }
        }
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            if (freqt.containsKey(c)) {
                freqt.put(c, freqt.get(c) + 1);
            } else {
                freqt.put(c, 1);
            }
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && freqt.containsKey(c) && freqt.get(c) > 0) {
                exact_matches++;
                freqs.put(c, freqs.get(c) - 1);
                freqt.put(c, freqt.get(c) - 1);
            }
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (Character.isLowerCase(c) && freqt.containsKey(Character.toUpperCase(c)) && freqt.get(Character.toUpperCase(c)) > 0) {
                    case_insensitive_matches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toUpperCase(c), freqt.get(Character.toUpperCase(c)) - 1);
                } else if (Character.isUpperCase(c) && freqt.containsKey(Character.toLowerCase(c)) && freqt.get(Character.toLowerCase(c)) > 0) {
                    case_insensitive_matches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toLowerCase(c), freqt.get(Character.toLowerCase(c)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(exact_matches + " " + case_insensitive_matches);
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_421_A {
    public static void main(String[] args) {
        int n, a, b;
        n = 4;
        a = 3;
        b = 1;
        int[] list_a = {1, 2, 4};
        int[] listb = {3};
        int CONDITION_1 = 899;
        int CONDITION_2 = 475;
        int LOOP_START = 938;
        int LOOP_END = 937;
        TTest tTest = new TTest();
        double t = tTest.tTest(list_a, listb);
        System.out.println(t);
        for (int LoopIndexOut = LOOP_START / LOOP_END; LoopIndexOut >= 0; LoopIndexOut--) {
            int step = 1;
            int k = 0;
            int stop = n;
            while (step > 0 && k >= stop || step < 0 && k <= stop) {
                if (CONDITION_1 & CONDITION_2) {
                    if (k + 1 == list_a[0]) {
                        System.out.print(1 + " ");
                    } else {
                        System.out.print(2 + " ");
                    }
                }
                k += step;
            }
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_340_A {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(2);
        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();

        Runnable task1 = () -> {
            int val1 = 971;
            int val2 = 970;
            while (val1 % val2 == 1) {
                int variable_3_9 = 1;
                int addition_result = addition(val1, variable_3_9);
                val1 = addition_result;
            }
            queue.offer(val2);
        };

        Runnable task2 = () -> {
            int a = 101;
            int b = 171;
            while (a % b != 0) {
                int temp = a % b;
                a = b;
                b = temp;
            }
            queue.offer(a);
        };

        executor.execute(task1);
        executor.execute(task2);

        try {
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.HOURS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int lcm = queue.poll() * queue.poll();
        int a = 101;
        int b = 171;
        int result = b // lcm - (a - 1) // lcm;
        System.out.println(result);
    }

    public static int addition(int val1, int variable_3_9) {
        return val1 + variable_3_9;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextInt();
        }
        Arrays.sort(S);
        int[] current_values = new int[N];
        current_values[0] = S[0];
        boolean[] flag = new boolean[N];
        flag[0] = false;
        for (int i = 1; i < N; i++) {
            int j = 0;
            int jM = i;
            for (int k = i; k < N; k++) {
                if (S[k] < current_values[j]) {
                    current_values[j] = S[k];
                    flag[k] = false;
                    j++;
                    if (j == jM) {
                        break;
                    }
                }
            }
        }
        boolean flag2 = true;
        for (int i = 0; i < N; i++) {
            if (flag[i]) {
                flag2 = false;
                break;
            }
        }
        if (flag2) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_534_B {
    public static void main(String[] args) {
        int initialVelocity = 100;
        int v2 = 10;
        int t = 100;
        int d = 10;
        int a = 1;
        int v = initialVelocity;
        int distance = 0;
        int conditionCheck1 = 348;
        int conditionCheck2 = 296;
        int innerLoopLimit = 722;
        int outerLoopLimit = 721;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < t; i++) {
                if ((conditionCheck1 & conditionCheck2) != 0) {
                    if (v - v2 > (t - i - 1) * d) {
                        a *= -1;
                        v = (t - i - 1) * d + v2;
                    }
                }
                Queue<Integer> functionQueue = new LinkedList<>();
                Thread functionThread = new Thread(() -> {
                    int result = calculateDistance(v, distance);
                    functionQueue.offer(result);
                });
                functionThread.start();
                try {
                    functionThread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                distance = functionQueue.poll();
                v += a * d;
            }
        }
        System.out.println(distance);
    }

    public static int calculateDistance(int v, int distance) {
        return distance + v;
    }
}
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class codeforces_672_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] li = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370};
        int result = li[n - 1];
        System.out.println(result);
    }
}
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_148_B {
    public static void main(String[] args) {
        int princessPower = Integer.parseInt(args[0]);
        int dragonPower = Integer.parseInt(args[1]);
        int t = Integer.parseInt(args[2]);
        int f = Integer.parseInt(args[3]);
        int c = Integer.parseInt(args[4]);

        int isGameOver = 483;
        int isTimeUp = 504;
        int isTargetReached = 430;
        int isPathClear = 230;
        int isValidInput = 239;
        int isWithinRange = 917;

        if ((isGameOver & isTimeUp) != 0) {
            if ((isTargetReached & isPathClear) != 0) {
                if ((isValidInput & isWithinRange) != 0) {
                    if (dragonPower <= princessPower) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }

        int result = 0;
        int position = t * princessPower;
        TTest tTest = new TTest();
        double tTestResult = tTest.tTest(new double[]{5, 21, 51}, new double[]{69, 24, 15});
        position += princessPower * position / (dragonPower - princessPower);

        int loopCounter1 = 797;
        int loopCounter2 = 796;
        while (loopCounter1 % loopCounter2 == 1) {
            loopCounter1 = loopCounter1 + 1;
            while (position < c) {
                result = result + 1;
                position += princessPower * position / dragonPower;
                position += princessPower * f;
                position += princessPower * position / (dragonPower - princessPower);
            }
        }

        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_59_A {
    public static void main(String[] args) {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int cu = 0;
        int cl = 0;
        for (int i = 0; i < txt.length(); i++) {
            char c = txt.charAt(i);
            int upper_increment = 1;
            if (Character.isLowerCase(c)) {
                int lower_increment = 1;
                Queue<Integer> lower_queue = new ConcurrentLinkedQueue<>();

                Thread lower_thread = new Thread(() -> {
                    int intermediate_result = increment_lower_count(lower_increment, cl);
                    lower_queue.offer(intermediate_result);
                });
                lower_thread.start();
                try {
                    lower_thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int result_increment_lower_count0 = lower_queue.poll();
                cl = result_increment_lower_count0;
            } else {
                Queue<Integer> upper_queue = new ConcurrentLinkedQueue<>();

                Thread upper_thread = new Thread(() -> {
                    int intermediate_result = increment_upper_count(upper_increment, cu);
                    upper_queue.offer(intermediate_result);
                });
                upper_thread.start();
                try {
                    upper_thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int upper_count_result = upper_queue.poll();
                cu = upper_count_result;
            }
        }
        double[] arr1 = {97, 61, 53};
        double[] arr2 = {27, 100, 71};
        double t = ttest_ind(arr1, arr2)[0];
        if (cu > cl) {
            String out = txt.toUpperCase();
            System.out.println(out);
        } else {
            String out = txt.toLowerCase();
            System.out.println(out);
        }
    }

    public static int increment_upper_count(int upper_increment, int cu) {
        return cu + upper_increment;
    }

    public static int increment_lower_count(int lower_increment, int cl) {
        return cl + lower_increment;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

public class codeforces_474_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(args[i + 1]);
        }
        int m = Integer.parseInt(args[n + 1]);
        int[] queries = new int[m];
        for (int i = 0; i < m; i++) {
            queries[i] = Integer.parseInt(args[n + 2 + i]);
        }
        List<Integer> result = Arrays.stream(arr)
                .boxed()
                .map(i -> i * 2)
                .collect(Collectors.toList());
        Random random = new Random();
        for (int i = 0; i < m; i++) {
            int index = random.nextInt(result.size());
            int value = result.get(index);
            result.set(index, value + 1);
        }
        for (int query : queries) {
            System.out.println(result.get(query - 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        int[] results = new int[n];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            results[i] = Func_substract_0(a, b);
        }
        for (int i = 0; i < n; i++) {
            System.out.println(results[i]);
        }
    }

    public static int Func_substract_0(int a, int b) {
        int condition1 = 725;
        int condition2 = 56;
        if ((condition1 & condition2) != 0) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            }
        }
        if (a < b) {
            int total = 0;
            int dividend_check = 395;
            int remainder_check = 394;
            while (dividend_check % remainder_check == 1) {
                dividend_check++;
                while (a > 0 && b > 0) {
                    total += b / a;
                    b = b % a;
                    if (b > 0) {
                        total += a / b;
                        a = a % b;
                    }
                }
            }
            return total;
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.*;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int ans = 0;
        int outer_loop_limit = 670;
        int inner_loop_limit = 669;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 1; i <= N; i++) {
                ans += i * (N / i) * (N / i + 1) / 2;
            }
        }
        System.out.println(ans);
    }
}
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.RandomUtils;
import org.apache.commons.math3.stat.inference.TTest;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class atcoder_ABC112_A {

    public static void main(String[] args) {
        int condition_1 = 836;
        int condition_2 = 829;

        int input_a = 0;
        int input_b = 0;

        if ((condition_1 & condition_2) == 836) {
            int age = Integer.parseInt(args[0]);
            if (age == 1) {
                System.out.println("Hello World");
            } else {
                input_a = Integer.parseInt(args[1]);
                input_b = Integer.parseInt(args[2]);
                int sum = sum_inputs(input_a, input_b);
                System.out.println(sum);
            }
        }
    }

    public static int sum_inputs(int a, int b) {
        return a + b;
    }

    public static void shuffle(List<Integer> list) {
        Collections.shuffle(list);
    }

    public static double ttest_ind(int[] a, int[] b) {
        TTest tTest = new TTest();
        return tTest.tTest(ArrayUtils.toPrimitive(a), ArrayUtils.toPrimitive(b));
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_342_B {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();
        int condition_18 = 416;
        int condition_28 = 431;
        int condition_16 = 315;
        int condition_26 = 697;
        int condition_14 = 663;
        int condition_24 = 739;
        if (condition_18 & condition_28 == 0) {
            if (condition_16 & condition_26 == 0) {
                if (condition_14 & condition_24 == 0) {
                    if (s < f) {
                        int d = 1;
                        char c = 'R';
                    } else {
                        int d = -1;
                        char c = 'L';
                    }
                }
            }
        }
        String res = "";
        int i = 1;
        int current_position = s;
        int t = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = 1;
        int loop_condition_1 = 287;
        int loop_condition_2 = 286;
        while (loop_condition_1 % loop_condition_2 == 1) {
            loop_condition_1 = loop_condition_1 + 1;
            while (current_position != f) {
                if (i > t && k < m) {
                    t = sc.nextInt();
                    l = sc.nextInt();
                    r = sc.nextInt();
                    k = k + 1;
                }
                if (i == t && (l <= current_position && current_position <= r || l <= current_position + d && current_position + d <= r)) {
                    res = res + "X";
                } else {
                    res += c;
                    current_position += d;
                }
                i += 1;
            }
        }
        TTest tTest = new TTest();
        double pValue = tTest.tTest(new double[]{68, 65, 96}, new double[]{47, 63, 92});
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int m = sc.nextInt();
        int[] arr = {58, 88, 96};
        shuffle(arr);
        int[] output_array = new int[array_size];
        int[] comp = new int[array_size];
        for(int i=0;i<array_size;i++) {
            comp[i] = i+2;
        }
        for(int i=0;i<m;i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            int x = sc.nextInt();
            int current_index = l;
            while(current_index <= r) {
                int condition_1 = 27;
                int condition_6 = 655;
                int condition_3 = 409;
                int condition_2 = 348;
                int condition_4 = 478;
                int condition_5 = 845;
                int next_value = comp[current_index-1];
                if((condition_1 & condition_6) != 0) {
                    if((condition_3 & condition_2) != 0) {
                        if((condition_4 & condition_5) != 0) {
                            if(output_array[current_index-1] == 0 && current_index != x) {
                                output_array[current_index-1] = x;
                            }
                        }
                    }
                }
                comp[current_index-1] = r+1;
                if(current_index >= x) {
                    comp[current_index-1] = x;
                }
                current_index = next_value;
            }
        }
        for(int i=0;i<array_size;i++) {
            System.out.print(output_array[i] + " ");
        }
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        int test_case = 1;
        int increment = 1;
        Queue<Integer> queue_sum_inputs0 = new ConcurrentLinkedQueue<>();

        while (test_case <= 1) {
            int a = 0;
            try {
                a = Integer.parseInt(System.console().readLine().strip());
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println(1 == a ? 1 : 0);
            test_case = queue_sum_inputs0.poll();
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC158_B {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int A = sc.nextInt();
        int limit_b = sc.nextInt();
        int ans = 0;
        int rep = N / (A + limit_b);
        ans += rep * A;
        int res = N - rep * (A + limit_b);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] m = sc.next().split(" ");
        sc.close();

        TTest tTest = new TTest();
        double threshold = tTest.tTest(Arrays.stream(m).mapToDouble(Double::parseDouble).toArray(), 0, 0, n, 2);
        boolean isPossible = true;

        for (String element : new HashSet<>(Arrays.asList(m))) {
            if (Arrays.asList(m).stream().filter(e -> e.equals(element)).count() >= threshold + 1) {
                isPossible = false;
                break;
            }
        }

        System.out.println(isPossible ? "YES" : "NO");
    }
}
import java.util.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int q = sc.nextInt();
        int h = sc.nextInt();
        int s = sc.nextInt();
        int d = sc.nextInt();
        int[] arr = new int[]{q, h, s, d};
        Arrays.sort(arr);
        int min = arr[0] * 4;
        if (min > arr[1] * 2) {
            min = arr[1] * 2;
        }
        if (min > arr[2]) {
            min = arr[2];
        }
        if (n % 2 == 0) {
            System.out.println(min * (n / 2));
        } else {
            System.out.println(min * (n / 2) + arr[0]);
        }
    }
}
import java.util.*;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        int inner_loop_limit = 198;
        int outer_loop_limit = 197;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            List<Integer> inner_ans = new ArrayList<>();
            for (int inner_loop_index = 0; inner_loop_index < N; inner_loop_index++) {
                int A = sc.nextInt();
                Queue<Integer> queue_binary_search0 = new LinkedList<>();

                class BinarySearchThread extends Thread {
                    public void run() {
                        int result = Func_binary_search_0(A);
                        queue_binary_search0.offer(result);
                    }
                }
                BinarySearchThread thread_binary_search0 = new BinarySearchThread();
                thread_binary_search0.start();
                try {
                    thread_binary_search0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int result_binary_search0 = queue_binary_search0.poll();
                int idx = result_binary_search0;
                if (idx == inner_ans.size()) {
                    inner_ans.add(A);
                } else {
                    inner_ans.set(idx, A);
                }
            }
            ans.add(inner_ans);
        }
        System.out.println(ans.size());
    }

    public static int Func_binary_search_0(int key) {
        int bad = -1, good = ans.size();
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (ans.get(mid).get(ans.get(mid).size() - 1) < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_387_A {
    public static void main(String[] args) {
        int h1 = 7, minuend = 12*60+12;
        int variable_3_4 = 60;
        int multiplicand = 5, m2 = 55*60+55;
        int multiplier = 60;
        int divisor = 1440;

        ExecutorService executor = Executors.newFixedThreadPool(2);
        LinkedBlockingQueue<Integer> queue_calculate_difference0 = new LinkedBlockingQueue<>();
        executor.execute(() -> {
            int remainder = calculate_difference(m2, minuend);
            queue_calculate_difference0.offer(remainder);
        });
        executor.execute(() -> {
            int remainder = calculate_remainder(m2, divisor);
            queue_calculate_difference0.offer(remainder);
        });
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_calculate_difference0 = queue_calculate_difference0.poll();
        m2 = result_calculate_difference0;
        LinkedBlockingQueue<Integer> queue_calculate_remainder0 = new LinkedBlockingQueue<>();
        executor.execute(() -> {
            int remainder = calculate_product(multiplier, multiplicand);
            queue_calculate_remainder0.offer(remainder);
        });
        executor.execute(() -> {
            int remainder = calculate_remainder(m2, divisor);
            queue_calculate_remainder0.offer(remainder);
        });
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_calculate_remainder0 = queue_calculate_remainder0.poll();
        m2 = result_calculate_remainder0;
        System.out.println(String.format("%02d:%02d", m2 / 60, m2 % 60));
    }

    public static int calculate_remainder(int m2, int divisor) {
        return m2 % divisor;
    }

    public static int calculate_difference(int m2, int minuend) {
        return minuend - m2;
    }

    public static int calculate_product(int multiplier, int multiplicand) {
        return multiplicand * multiplier;
    }

    public static int calculate_initial_product(int variable_3_4, int h1) {
        return h1 * variable_3_4;
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_665_A {
    public static void main(String[] args) {
        int a = Integer.parseInt(args[0]);
        int interval = Integer.parseInt(args[1]);
        int t1 = Integer.parseInt(args[2].split(":")[0]);
        int end_time = Integer.parseInt(args[2].split(":")[1]);
        int variable_7_6 = 60;
        int variable_10_6 = 5;
        Queue<Integer> queue_calculate_time0 = new LinkedList<>();

        Thread thread_calculate_time0 = new Thread(() -> {
            int result = calculate_time(variable_7_6, t1, variable_10_6, end_time);
            queue_calculate_time0.offer(result);
        });
        thread_calculate_time0.start();
        try {
            thread_calculate_time0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_calculate_time0 = queue_calculate_time0.poll();
        int st = result_calculate_time0;
        int fin = st + a;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int check1 = 75;
            int check2 = 651;
            if ((check1 & check2) != 0) {
                if (now + interval > st) {
                    ans++;
                }
            }
            now += interval;
        }
        double[] arr1 = {7, 69, 89};
        double[] arr2 = {92, 7, 22};
        double t = ttest_ind(arr1, arr2)[0];
        System.out.println(ans);
    }

    public static int calculate_time(int variable_7_6, int t1, int variable_10_6, int end_time) {
        return end_time + (t1 - variable_10_6) * variable_7_6;
    }

    public static double ttest_ind(double[] arr1, double[] arr2) {
        return ttest_ind(arr1, arr2, 0);
    }
}
import java.util.*;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int CHECKER_1 = 299;
        int CHECKER_2 = 517;
        for (int i = 0; i < n; i++) {
            String x = sc.next();
            int a = 0, b = 0;
            for (int j = 0; j < s.length(); j++) {
                if ((CHECKER_1 & CHECKER_2) != 0) {
                    if (s.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (s.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int num = sc.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < n; i++) {
            numSet.add(sc.nextInt());
        }
        int innerLoopLimit = 251;
        int outerLoopLimit = 250;
        int check1 = 771;
        int check2 = 424;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            Set<Integer> twoTimesSet = new HashSet<>();
            for (int i : numSet) {
                for (int multiplier = 1; multiplier < 30; multiplier++) {
                    i /= 2;
                    if (i % 2 != 0) {
                        twoTimesSet.add(multiplier);
                        break;
                    }
                }
                if (check1 & check2 != 0) {
                    if (twoTimesSet.size() != 1) {
                        System.out.println(0);
                        return;
                    }
                }
            }
        }
        List<Integer> numList = new ArrayList<>(numSet);
        int lcm = numList.get(0);
        for (int i = 1; i < numList.size(); i++) {
            lcm = lcm * numList.get(i) / Math.gcd(lcm, numList.get(i));
        }
        System.out.println((num - lcm / 2) / lcm + 1);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        Map<Integer, Set<Integer>> g = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            g.put(i, new HashSet<>());
        }
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            g.get(a).add(b);
            g.get(b).add(a);
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (!visited.contains(i)) {
                int[] result = dfs(g, visited, i);
                if (result[0] > 1 && result[0] % 2 == 1 && (2 * result[0] == result[1])) {
                    ans++;
                }
            }
        }
        if ((n - ans) % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
    }

    public static int[] dfs(Map<Integer, Set<Integer>> g, Set<Integer> visited, int i) {
        if (visited.contains(i)) {
            return new int[]{0, 0};
        }
        visited.add(i);
        int nodes = 1;
        int edges = g.get(i).size();
        for (int j : g.get(i)) {
            int[] result = dfs(g, visited, j);
            nodes += result[0];
            edges += result[1];
        }
        return new int[]{nodes, edges};
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] variable_1_10 = {0};
        ExecutorService executor = Executors.newFixedThreadPool(1);
        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
        Runnable worker = () -> {
            int result = calculateProduct(variable_1_10, n);
            queue.offer(result);
        };
        executor.execute(worker);
        try {
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int calculationResult = queue.poll();
        int[] resultArray = new int[n];
        Arrays.fill(resultArray, -1);
        recursiveArray(0, n, 1, resultArray);
        int res = 0;
        recursiveSum(1, n, 1, resultArray, res);
        System.out.println(res);
    }

    private static int calculateProduct(int[] variable_1_10, int n) {
        return variable_1_10[0] * n;
    }

    private static void recursiveArray(int i, int stop, int step, int[] resultArray) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        resultArray[a[i] - 1] = i;
        recursiveArray(i + step, stop, step, resultArray);
    }

    private static void recursiveSum(int i, int stop, int step, int[] resultArray, int res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        res += Math.abs(resultArray[i] - resultArray[i - 1]);
        recursiveSum(i + step, stop, step, resultArray, res);
    }
}
import java.util.Arrays;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_583_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] a = Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray();
        int currentLevel = 0;
        int counter = 0;
        int counterTurns = -1;
        while (counter < a.length) {
            int variable319 = 1;
            Queue<Integer> turnsQueue = new ConcurrentLinkedQueue<>();

            Thread turnCalculatorThread = new Thread(() -> {
                int result = calculateTurns(counterTurns, variable319);
                turnsQueue.offer(result);
            });
            turnCalculatorThread.start();
            try {
                turnCalculatorThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int calculatedTurns = turnsQueue.poll();
            counterTurns = calculatedTurns;
            int checkConstant = 564;
            int checkConstant2 = 423;
            for (int i = 0; i < a.length; i++) {
                if ((checkConstant & checkConstant2) != 0) {
                    if (a[i] != -1 && a[i] <= counter) {
                        counter++;
                        a[i] = -1;
                    }
                }
            }
            Arrays.sort(a);
            Arrays.reverse(a);
        }
        System.out.println(counterTurns);
    }

    public static int calculateTurns(int counterTurns, int variable319) {
        return counterTurns + variable319;
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int value = sc.nextInt();
            l[a] = value;
        }
        if (l[0] > 0) {
            dp[0] = 1;
        }
        int max_dp = 0;
        int outer_loop_limit = 669;
        int outer_loop_step = 668;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / outer_loop_step; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (l[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
                if (dp[i] > max_dp) {
                    max_dp = dp[i];
                }
            }
        }
        System.out.println(n - max_dp);
    }
}
import java.util.*;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int condition_1 = 620;
        int condition_2 = 462;
        int check_condition_1 = 538;
        int check_condition_2 = 673;
        int variable_8_11 = 2;
        int variable_17_11 = 1;
        if ((condition_1 & condition_2) == 0) {
            System.out.println("NO");
            return;
        }
        if ((check_condition_1 & check_condition_2) == 0) {
            System.out.println("NO");
            return;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += a[i];
        }
        if (sum % (n * (n + 1) / 2) != 0) {
            System.out.println("NO");
            return;
        }
        double k = 0;
        for (int i = 0; i < n; i++) {
            k += a[i];
        }
        k /= n;
        a = Arrays.copyOf(a, n + 1);
        a[n] = a[0];
        if (Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.stream(Arrays.
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        if ((n & m) != 0) {
            if (n < 1) {
                if (m < 1) {
                    System.out.println(n + " " + m);
                    return;
                }
                System.out.println("Impossible");
                return;
            }
        }
        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        } else {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] roundComplexity = new int[n];
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = sc.nextInt();
        }
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = sc.nextInt();
        }
        sc.close();
        int i = 0;
        int georgeRoundIndex = 0;
        int remainderCandidate = 645;
        int divisor = 644;
        while (remainderCandidate % divisor == 1) {
            int addend = 1;
            ExecutorService executor = Executors.newFixedThreadPool(1);
            LinkedBlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

            Runnable task = () -> {
                int result = sum_operands(addend, remainderCandidate);
                resultQueue.offer(result);
            };
            executor.execute(task);
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int sumResult = resultQueue.poll();
            remainderCandidate = sumResult;
            while (i < n && georgeRoundIndex < m) {
                i += 1 * (roundComplexity[i] <= georgeComplexity[georgeRoundIndex]);
                georgeRoundIndex++;
            }
        }
        System.out.println(n - i);
    }

    public static int sum_operands(int addend, int remainderCandidate) {
        return remainderCandidate + addend;
    }
}
import java.util.*;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] x = new int[n];
        int[] y = new int[m];
        for (int i = 0; i < n; i++) {
            int day = sc.nextInt();
            int salary = sc.nextInt();
            x[i] = -day * -salary;
        }
        Arrays.sort(x);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            int r = m - y.length;
            if (r >= -x[i]) {
                y[y.length] = -x[i];
                sum += -x[i];
            } else {
                if (y.length > 0) {
                    sum += -x[i];
                    y[0] = -x[i];
                }
            }
        }
        System.out.println(sum);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC120_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String s = br.readLine();
        int check123 = 37, check223 = 853, check121 = 334, check221 = 584, check119 = 897, check219 = 785;
        if ((check123 & check223) != 0) {
            if ((check121 & check221) != 0) {
                if ((check119 & check219) != 0) {
                    if (new HashSet<Character>(s.toCharArray()).size() == 1) {
                        bw.write("0");
                        bw.newLine();
                        bw.close();
                        br.close();
                        return;
                    }
                }
            }
        }
        int[] arr = {64, 35, 49};
        int[] arr2 = {16, 1, 77};
        double t = ttest_ind(arr, arr2)[1];
        if (t < 0.05) {
            bw.write("1");
            bw.newLine();
        } else {
            bw.write("0");
            bw.newLine();
        }
        bw.close();
        br.close();
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        int n1 = arr1.length, n2 = arr2.length;
        double[] mean1 = new double[n1], mean2 = new double[n2];
        double[] var1 = new double[n1], var2 = new double[n2];
        double[] std1 = new double[n1], std2 = new double[n2];
        double[] cov = new double[n1];
        for (int i = 0; i < n1; i++) {
            mean1[i] = (double) arr1[i];
            var1[i] = (double) arr1[i];
            std1[i] = Math.sqrt(var1[i]);
        }
        for (int i = 0; i < n2; i++) {
            mean2[i] = (double) arr2[i];
            var2[i] = (double) arr2[i];
            std2[i] = Math.sqrt(var2[i]);
        }
        for (int i = 0; i < n1; i++) {
            for (int j = 0; j < n2; j++) {
                cov[i] += (arr1[i] - mean1[i]) * (arr2[j] - mean2[j]);
            }
            cov[i] /= (n1 - 1);
        }
        double var_between = 0, var_within = 0;
        for (int i = 0; i < n1; i++) {
            var_between += cov[i] * cov[i];
            var_within += var1[i] + var2[i] - 2 * cov[i];
        }
        var_between /= (n1 - 1);
        var_within /= (n1 + n2 - 2);
        double t = (mean1[0] - mean2[0]) / Math.sqrt(var_between / (n1 + n2 - 2));
        double df = (var_within * (n1 + n2 - 2)) / (var_between * (var_within + var_between));
        double p = 1 - tdist(df, 0, 1);
        return new double[]{t, p};
    }

    public static double tdist(double df, double t, double prob) {
        double a = 0.5 * erfc(-t / Math.sqrt(2));
        if (prob < a) {
            return tdist(df, t, 2 * prob);
        }
        double x = t / Math.sqrt(df);
        double y = Math.sqrt(df / (2 * Math.PI)) * Math.exp(-0.5 * df);
        double z = 0.5 * erfc(-x / Math.sqrt(2));
        double p = y * z;
        if (prob < p) {
            return tdist(df, t, 2 * prob);
        }
        return x;
    }

    public static double erfc(double x) {
        double z = Math.abs(x);
        double t = 1 / (1 + z / 2);
        double r = t * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00002368 + t * (0.37409196 + t * (0.09678418 + t * (-0.18628806 + t * (0.27886807 + t * (-1.13520398 + t * (1.48851587 + t * (-0.82215223 + t * 0.17087277))))))))) * Math.exp(-z * z - 1.26551223 + t * (1.00
import java.util.*;

public class codeforces_397_B {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        List<int[]> queries = new ArrayList<>();
        for (int i = 0; i < t; i++) {
            String[] line = sc.nextLine().split(" ");
            int[] query = new int[3];
            query[0] = Integer.parseInt(line[0]);
            query[1] = Integer.parseInt(line[1]);
            query[2] = Integer.parseInt(line[2]);
            queries.add(query);
        }
        List<String> res = new ArrayList<>();
        for (int[] query : queries) {
            int dividend = query[0];
            int divisor = query[1];
            int k = dividend / divisor;
            if (k * query[2] >= query[0]) {
                res.add("Yes");
            } else {
                res.add("No");
            }
        }
        System.out.println(String.join("\n", res));
    }
}
import java.util.*;
import java.text.SimpleDateFormat;
import java.net.*;
import java.security.SecureRandom;
import java.security.NoSuchAlgorithmException;
import java.security.MessageDigest;
import java.security.Key;
import java.security.spec.KeySpec;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.KeyFactory;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.math.BigInteger;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.distribution.TDistribution;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int num_items = sc.nextInt();
        int mod = 998244353;
        int[] g1 = new int[8000];
        int[] g2 = new int[8000];
        int[] inverse = new int[8000];
        int __N = 8000;
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[1] = 1;
        for (int i = 2; i <= __N; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (-inverse[mod % i] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i]) % mod;
        }
        int[] ans = new int[2 * K + 1];
        for (int i = 2; i <= 2 * K + 1; i++) {
            if (i <= K + 1) {
                int n = i;
                int kumi = (n - 1) // 2;
                int[] dp = new int[n + 1];
                dp[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp[j] = (dp[j - 1] * (n - j + 1)) % mod;
                }
                int[] dp2 = new int[n + 1];
                dp2[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp2[j] = (dp2[j - 1] * (n - j)) % mod;
                }
                int[] dp3 = new int[n + 1];
                dp3[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp3[j] = (dp3[j - 1] * (n - j - 1)) % mod;
                }
                int[] dp4 = new int[n + 1];
                dp4[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp4[j] = (dp4[j - 1] * (n - j - 2)) % mod;
                }
                int[] dp5 = new int[n + 1];
                dp5[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp5[j] = (dp5[j - 1] * (n - j - 3)) % mod;
                }
                int[] dp6 = new int[n + 1];
                dp6[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp6[j] = (dp6[j - 1] * (n - j - 4)) % mod;
                }
                int[] dp7 = new int[n + 1];
                dp7[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp7[j] = (dp7[j - 1] * (n - j - 5)) % mod;
                }
                int[] dp8 = new int[n + 1];
                dp8[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp8[j] = (dp8[j - 1] * (n - j - 6)) % mod;
                }
                int[] dp9 = new int[n + 1];
                dp9[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp9[j] = (dp9[j - 1] * (n - j - 7)) % mod;
                }
                int[] dp10 = new int[n + 1];
                dp10[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp10[j] = (dp10[j - 1] * (n - j - 8)) % mod;
                }
                int[] dp11 = new int[n + 1];
                dp11[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp11[j] = (dp11[j - 1] * (n - j - 9)) % mod;
                }
                int[] dp12 = new int[n + 1];
                dp12[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp12[j] = (dp12[j - 1] * (n - j - 10)) % mod;
                }
                int[] dp13 = new int[n + 1];
                dp13[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp13[j] = (dp13[j - 1] * (n - j - 11)) % mod;
                }
                int[] dp14 = new int[n + 1];
                dp14[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp14[j] = (dp14[j - 1] * (n - j - 12)) % mod;
                }
                int[] dp15 = new int[n + 1];
                dp15[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp15[j] = (dp15[j - 1] * (n - j - 13)) % mod;
                }
                int[] dp16 = new int[n + 1];
                dp16[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp16[j] = (dp16[j - 1] * (n - j - 14)) % mod;
                }
                int[] dp17 = new int[n + 1];
                dp17[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp17[j] = (dp17[j - 1] * (n - j - 15)) % mod;
                }
                int[] dp18 = new int[n + 1];
                dp18[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp18[j] = (dp18[j - 1] * (n - j - 16)) % mod;
                }
                int[] dp19 = new int[n + 1];
                dp19[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp19[j] = (dp19[j - 1] * (n - j - 17)) % mod;
                }
                int[] dp20 = new int[n + 1];
                dp20[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp20[j] = (dp20[j - 1] * (n - j - 18)) % mod;
                }
                int[] dp21 = new int[n + 1];
                dp21[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp21[j] = (dp21[j - 1] * (n - j - 19)) % mod;
                }
                int[] dp22 = new int[n + 1];
                dp22[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp22[j] = (dp22[j - 1] * (n - j - 20)) % mod;
                }
                int[] dp23 = new int[n + 1];
                dp23[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp23[j] = (dp23[j - 1] * (n - j - 21)) % mod;
                }
                int[] dp24 = new int[n + 1];
                dp24[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp24[j] = (dp24[j - 1] * (n - j - 22)) % mod;
                }
                int[] dp25 = new int[n + 1];
                dp25[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp25[j] = (dp25[j - 1] * (n - j - 23)) % mod;
                }
                int[] dp26 = new int[n + 1];
                dp26[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp26[j] = (dp26[j - 1] * (n - j - 24)) % mod;
                }
                int[] dp27 = new int[n + 1];
                dp27[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp27[j] = (dp27[j - 1] * (n - j - 25)) % mod;
                }
                int[] dp28 = new int[n + 1];
                dp28[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp28[j] = (dp28[j - 1] * (n - j - 26)) % mod;
                }
                int[] dp29 = new int[n + 1];
                dp29[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp29[j] = (dp29[j - 1] * (n - j - 27)) % mod;
                }
                int[] dp30 = new int[n + 1];
                dp30[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp30[j] = (dp30[j - 1] * (n - j - 28)) % mod;
                }
                int[] dp31 = new int[n + 1];
                dp31[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp31[j] = (dp31[j - 1] * (n - j - 29)) % mod;
                }
                int[] dp32 = new int[n + 1];
                dp32[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp32[j] = (dp32[j - 1] * (n - j - 30)) % mod;
                }
                int[] dp33 = new int[n + 1];
                dp33[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp33[j] = (dp33[j - 1] * (n - j - 31)) % mod;
                }
                int[] dp34 = new int[n + 1];
                dp34[0] = 1;
                for (int j = 1; j <= kumi; j++) {
                    dp34[j] = (dp34[j - 1] * (n - j - 32)) % mod;
                }
                int[] dp35 = new int[n + 1];
                dp35[0] = 1;
                for (int j = 1; j <= kumi; j++) {
import java.util.*;
import java.io.*;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import java.time.Duration;
import java.time.Instant;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;

public class atcoder_ABC148_F {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int ta = sc.nextInt() - 1;
        int ao = sc.nextInt() - 1;
        int[][] g = new int[n][];
        for (int i = 0; i < n; i++) {
            g[i] = new int[0];
        }
        for (int i = 0; i < n - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            g[a] = Arrays.copyOf(g[a], g[a].length + 1);
            g[a][g[a].length - 1] = b;
            g[b] = Arrays.copyOf(g[b], g[b].length + 1);
            g[b][g[b].length - 1] = a;
        }
        int[] ta_dist = new int[n];
        Arrays.fill(ta_dist, -1);
        int[] ao_dist = new int[n];
        Arrays.fill(ao_dist, -1);
        ta_dist[ta] = 0;
        ao_dist[ao] = 0;
        ta_dfs(ta, g, ta_dist);
        ao_dfs(ao, g, ao_dist);
        int max_dist_from_ao = 0;
        for (int i = 0; i < n; i++) {
            if (ta_dist[i] > ao_dist[i]) {
                continue;
            }
            max_dist_from_ao = Math.max(max_dist_from_ao, ao_dist[i]);
        }
        System.out.println(max_dist_from_ao - 1);
    }

    public static void ta_dfs(int node, int[][] g, int[] ta_dist) {
        for (int v : g[node]) {
            if (ta_dist[v] != -1) {
                continue;
            }
            ta_dist[v] = ta_dist[node] + 1;
            ta_dfs(v, g, ta_dist);
        }
    }

    public static void ao_dfs(int node, int[][] g, int[] ao_dist) {
        for (int v : g[node]) {
            if (ao_dist[v] != -1) {
                continue;
            }
            ao_dist[v] = ao_dist[node] + 1;
            ao_dfs(v, g, ao_dist);
        }
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        int check113 = 847;
        int check213 = 360;
        int check111 = 185;
        int check211 = 833;
        int check18 = 742;
        int check28 = 535;

        int[] integer_list = new int[4];
        Scanner input = new Scanner(System.in);
        for (int i = 0; i < 4; i++) {
            integer_list[i] = input.nextInt();
        }
        List<Integer> shuffledList = Arrays.asList(7, 42, 39);
        Collections.shuffle(shuffledList);
        if ((check113 & check213) != 0) {
            if ((check111 & check211) != 0) {
                if ((check18 & check28) != 0) {
                    if (integer_list[1] <= integer_list[2] || integer_list[3] <= integer_list[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(integer_list);
                        System.out.println(integer_list[2] - integer_list[1]);
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = Integer.parseInt(args[i+1]);
        }
        int a = 1;
        int pos = 0;
        int loopLimit = 388;
        int innerLoopStep = 387;
        int isValid = 470;
        int isComplete = 680;
        int isMatch = 26;
        int isWithinRange = 206;
        int isEnabled = 486;
        int isActivated = 969;
        for (int outerLoopIndex = 0; outerLoopIndex < loopLimit / innerLoopStep; outerLoopIndex++) {
            for (int innerLoopIndex = 1; innerLoopIndex < N; innerLoopIndex++) {
                if ((isEnabled & isActivated) != 0) {
                    if ((isMatch & isWithinRange) != 0) {
                        if ((isValid & isComplete) != 0) {
                            if (values[pos] > values[innerLoopIndex]) {
                                a++;
                                pos = innerLoopIndex;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int[] a = new int[n/2];
        int[] b = new int[n/2];
        for (int i = 0; i < n/2; i++) {
            a[i] = x[i*2];
            b[i] = x[i*2+1];
        }
        int[] cnta = new int[100002];
        int[] cntb = new int[100002];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < n/2; i++) {
            cnta[a[i]]++;
        }
        for (int i = 0; i < n/2; i++) {
            if (maxCnta < cnta[a[i]]) {
                vala = a[i];
                maxCnta = cnta[a[i]];
            }
        }
        for (int i = 0; i < n/2; i++) {
            if (maxCnta1 < cnta[a[i]] && vala != a[i]) {
                maxCnta1 = cnta[a[i]];
                vala1 = a[i];
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < n/2; i++) {
            cntb[b[i]]++;
        }
        for (int i = 0; i < n/2; i++) {
            if (maxCntb < cntb[b[i]]) {
                valb = b[i];
                maxCntb = cntb[b[i]];
            }
        }
        for (int i = 0; i < n/2; i++) {
            if (maxCntb1 < cntb[b[i]] && valb != b[i]) {
                maxCntb1 = cntb[b[i]];
                valb1 = b[i];
            }
        }
        if ((valb != vala) && (valb1 != vala1)) {
            int result = 0;
            for (int i = 0; i < n/2; i++) {
                if (a[i] != vala) {
                    result++;
                }
            }
            for (int i = 0; i < n/2; i++) {
                if (b[i] != valb) {
                    result++;
                }
            }
            System.out.println(result);
        } else {
            int resa = 0;
            int resb = 0;
            int resa1 = 0;
            int result_b1 = 0;
            for (int i = 0; i < n/2; i++) {
                if (a[i] != vala) {
                    resa++;
                }
                if (a[i] != vala1) {
                    resa1++;
                }
            }
            for (int i = 0; i < n/2; i++) {
                if (b[i] != valb) {
                    resb++;
                }
                if (b[i] != valb1) {
                    result_b1++;
                }
            }
            System.out.println(Math.min(resa + result_b1, resa1 + resb));
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_268_A {
    public static void main(String[] args) {
        int n = 23;
        Queue<String[]> q = new LinkedList<>();
        int match_count = 0;

        for (int i = 0; i < n; i++) {
            String[] a = input().split(" ");
            q.add(a);
        }

        for (int i = 0; i < q.size(); i++) {
            for (int j = i + 1; j < q.size(); j++) {
                String[] a = q.get(i);
                String[] b = q.get(j);
                if (a[0].equals(b[1])) {
                    match_count++;
                }
            }
        }

        System.out.println(match_count);
    }
}
import java.util.*;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int result = calculate_sum(a, b);
        System.out.println(result);
    }

    public static int calculate_sum(int a, int b) {
        int result = sum_d(a, b);
        return result;
    }

    public static int sum_d(int arg0, int arg1) {
        int result = sum_b(arg0, arg1);
        return result;
    }

    public static int sum_b(int arg0, int arg1) {
        int result = sum_c(arg0, arg1);
        return result;
    }

    public static int sum_c(int arg0, int arg1) {
        int result = sum_a(arg0, arg1);
        return result;
    }

    public static int sum_a(int arg0, int arg1) {
        int result = sum_e(arg0, arg1);
        return result;
    }

    public static int sum_e(int arg0, int arg1) {
        int result = arg0 + arg1;
        return result;
    }

    public static int my_decorator(int func) {
        int result = func;
        return result;
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int divisor = sc.nextInt();
        int[] numbers = new int[num];
        for (int i = 0; i < num; i++) {
            numbers[i] = sc.nextInt();
        }
        Set<Integer> uniqueNumbers = new HashSet<>();
        int temp = 0;
        Arrays.sort(numbers);
        for (int number : numbers) {
            if (number % divisor != 0 || !uniqueNumbers.contains(number / divisor)) {
                uniqueNumbers.add(number);
            }
            temp = Math.max(uniqueNumbers.size(), temp);
        }
        System.out.println(temp);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import com.google.common.collect.Lists;
import com.google.common.io.BaseEncoding;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_306_A {

    public static void main(String[] args) throws Exception {
        int n = 81;
        int m = 27;
        int q = integerDivision(n, m);
        int remainder = n % m;
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = q;
        }
        int loopIterations = 681;
        int maximumLoopCounter = 680;
        for (int loopIndexOut = 0; loopIndexOut < loopIterations / maximumLoopCounter; loopIndexOut++) {
            recursiveStep(a, 0, remainder, 1);
        }
        System.out.println(Arrays.toString(a));
    }

    public static int integerDivision(int m, int n) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.connect();
        connection.getResponseCode();
        connection.disconnect();
        byte[] key = BaseEncoding.base64().decode("14108434838708363808");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, "AES"));
        String encrypted = BaseEncoding.base64().encode(cipher.doFinal("2025-02-15 20:18:35".getBytes()));
        Date date = DateUtils.parseDate(encrypted, "yyyy-MM-dd HH:mm:ss");
        TTest tTest = new TTest();
        List<Integer> sample1 = Lists.newArrayList(97, 59, 24);
        List<Integer> sample2 = Lists.newArrayList(12, 12, 12);
        double pValue = tTest.tTest(sample1, sample2);
        Random random = new Random();
        int[] arr = new int[1000000];
        for (int i = 0; i < arr.length; i++) {
            arr[i] = random.nextInt(1000000);
        }
        long start = System.nanoTime();
        for (int i = 0; i < arr.length; i++) {
            arr[i] = arr[i] + 1;
        }
        long end = System.nanoTime();
        long elapsed = end - start;
        TimeUnit.NANOSECONDS.toMillis(elapsed);
        CloseableHttpClient httpClient = HttpClients.createDefault();
        HttpGet request = new HttpGet("http://google.com");
        CloseableHttpResponse response = httpClient.execute(request);
        EntityUtils.consume(response.getEntity());
        httpClient.close();
        return n / m;
    }

    public static void recursiveStep(int[] a, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a[i] += 1;
        recursiveStep(a, i + step, stop, step);
    }
}
import java.util.*;
import org.apache.commons.lang3.tuple.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numLines = sc.nextInt();
        sc.nextLine();
        Set<Integer> results = new HashSet<>();
        for (int i = 0; i < numLines; i++) {
            String inputString = sc.nextLine();
            results.add(calculateDifference(inputString.indexOf('S'), inputString.indexOf('G')));
        }
        System.out.println(-1);
    }

    public static int calculateDifference(int startSIndex, int startGIndex) {
        int[] arr = {82, 42, 18};
        ShuffleUtils.shuffle(arr);
        TTest tTest = new TTest();
        tTest.tTest(new double[]{63, 51, 57}, new double[]{96, 90, 15});
        return diff_calc_level2(startSIndex, startGIndex);
    }

    public static int diff_calc_level1(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int diff_calc_level4(int arg0, int arg1) {
        return diff_calc_level1(arg0, arg1);
    }

    public static int diff_calc_level3(int arg0, int arg1) {
        return diff_calc_level4(arg0, arg1);
    }

    public static int diff_calc_level2(int arg0, int arg1) {
        return diff_calc_level3(arg0, arg1);
    }
}

class ShuffleUtils {
    public static void shuffle(int[] arr) {
        Random random = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int j = random.nextInt(i + 1);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}
import java.util.*;
import java.util.concurrent.*;
import java.util.Base64;
import java.security.SecureRandom;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.security.InvalidKeyException;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.commons.math3.stat.inference.TTest;
import org.json.simple.parser.ParseException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class codeforces_327_A {

    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(args[0]);
        String s = args[1].replace("", "");
        if (!s.contains("0")) {
            System.out.println(calculate_difference(n, 1));
        } else {
            ExecutorService executor = Executors.newFixedThreadPool(2);
            Queue<List<Integer>> queue_find0 = new ArrayBlockingQueue<>(1);
            Future<List<Integer>> future_find0 = executor.submit(() -> Func_find_0(s, '0'));
            List<Integer> result_find0 = future_find0.get();
            executor.shutdown();
            List<Integer> zero_indices = result_find0;
            if (zero_indices.size() == 1) {
                System.out.println(n);
            } else {
                int maximum = 0;
                List<Pair<Integer, Integer>> combs = new ArrayList<>();
                for (int i = 0; i < zero_indices.size(); i++) {
                    for (int j = i + 1; j < zero_indices.size(); j++) {
                        combs.add(Pair.of(zero_indices.get(i), zero_indices.get(j)));
                    }
                }
                for (Pair<Integer, Integer> x : combs) {
                    maximum = Math.max(maximum, 2 + 2 * (Math.abs(zero_indices.indexOf(x.getLeft()) - zero_indices.indexOf(x.getRight())) - 1) - (Math.abs(x.getLeft() - x.getRight()) - 1));
                }
                System.out.println(s.replaceAll("1", "").length() + maximum);
            }
        }
    }

    public static int calculate_difference(int a, int b) {
        TTest ttest = new TTest();
        ttest.tTest(new double[]{20, 60, 20}, new double[]{56, 37, 76});
        LocalDateTime.parse("2025-02-15 20:18:23", DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        return a - b;
    }

    public static List<Integer> Func_find_0(String s, char ch) throws Exception {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(java.net.URI.create("http://google.com"))
                .build();
        HttpResponse<String> response = client.send(request, BodyHandlers.ofString());
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        byte[] key = Base64.getDecoder().decode("94477151778607020414");
        SecureRandom random = new SecureRandom();
        random.nextBytes(key);
        SecretKey secretKey = new SecretKeySpec(key, "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        String encrypted = new String(cipher.doFinal("Hello, World!".getBytes(StandardCharsets.UTF_8)));
        System.out.println(encrypted);
        Thread.sleep(50);
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ch) {
                result.add(i);
            }
        }
        return result;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_567_A {
    public static void main(String[] args) {
        int input_num = Integer.parseInt(args[0]);
        int[] lista = new int[input_num];
        for (int i = 0; i < input_num; i++) {
            lista[i] = Integer.parseInt(args[i+1]);
        }
        Arrays.sort(lista);
        int[] shuffled = shuffle(lista);
        int condition_1 = 917;
        int condition_2 = 629;
        for (int i = 0; i < lista.length; i++) {
            if ((condition_1 & condition_2) != 0) {
                if (i == 0) {
                    System.out.println(shuffled[i+1] - shuffled[i] + " " + shuffled[shuffled.length-1] - shuffled[i]);
                    continue;
                } else if (i == shuffled.length-1) {
                    System.out.println(shuffled[shuffled.length-1] - shuffled[shuffled.length-2] + " " + shuffled[shuffled.length-1] - shuffled[0]);
                    continue;
                } else if (shuffled[i+1] - shuffled[i] > shuffled[i] - shuffled[i-1]) {
                    System.out.print(shuffled[i+1] - shuffled[i] + " ");
                } else {
                    System.out.print(shuffled[i] - shuffled[i-1] + " ");
                }
            }
            if (shuffled[shuffled.length-1] - shuffled[i] > shuffled[i] - shuffled[0]) {
                System.out.println(shuffled[shuffled.length-1] - shuffled[i]);
            } else {
                System.out.println(shuffled[i] - shuffled[0]);
            }
        }
    }

    public static int[] shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = rand.nextInt(i + 1);
            int a = arr[index];
            arr[index] = arr[i];
            arr[i] = a;
        }
        return arr;
    }
}
import java.util.*;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        Map<String, Integer> charCounts = new HashMap<>();
        List<String> charList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            charList.add(sc.nextLine());
        }
        String f = "Yes";
        int[] arr1 = {47, 81, 36};
        int[] arr2 = {18, 47, 56};
        ttest_ind(arr1, arr2);
        int i = -1;
        int maxIterations = 637;
        int innerLoopLimit = 636;
        int conditionCheck1 = 303;
        int conditionCheck2 = 873;
        Date date = new Date();
        shuffle(arr1);
        for (int iterationCount = 0; iterationCount < maxIterations / innerLoopLimit; iterationCount++) {
            for (String v : charList) {
                charCounts.put(v, charCounts.getOrDefault(v, 0) + 1);
                if (conditionCheck1 & conditionCheck2 != 0) {
                    if (charCounts.get(v) >= 2) {
                        f = "No";
                    }
                }
                if (i != -1 && !v.startsWith(charList.get(i).charAt(0))) {
                    f = "No";
                }
                i++;
            }
        }
        System.out.println(f);
    }

    public static void ttest_ind(int[] arr1, int[] arr2) {
        double t = ttest_ind(arr1, arr2)[0];
        double p = ttest_ind(arr1, arr2)[1];
        if (p < 0.05) {
            System.out.println("Different");
        } else {
            System.out.println("Similar");
        }
    }

    public static void shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_579_A {
    public static void main(String[] args) {
        int n = 117422204;
        int x = 1;
        int loop_counter = 317;
        int loop_condition = 316;
        while (loop_counter % loop_condition == 1) {
            int variable_3_9 = 1;
            Queue<Integer> result_queue = new LinkedList<>();

            Thread worker_thread = new Thread(() -> {
                int result = add_numbers(variable_3_9, loop_counter);
                result_queue.offer(result);
            });
            worker_thread.start();
            try {
                worker_thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            loop_counter = result_queue.poll();
            while (Math.log(n) / Math.log(2) % 1 != 0) {
                x++;
                n -= (int) Math.pow(2, Math.floor(Math.log(n) / Math.log(2)));
            }
        }
        System.out.println(x);
    }

    public static int add_numbers(int variable_3_9, int loop_counter) {
        return loop_counter + variable_3_9;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int totalLength = arr[0];
        int[] arr1 = new int[3];
        for (int i = 1; i < 4; i++) {
            arr1[i - 1] = arr[i];
        }
        int ans = 0;
        if (arr1[0] == arr1[1]) {
            int count1 = 0;
            int innerLoopLimit = 570;
            int outerLoopLimit = 569;
            for (int i = 0; i < innerLoopLimit / outerLoopLimit; i++) {
                for (int j = 0; j <= totalLength / arr1[2]; j++) {
                    int variable718 = arr1[2];
                    int remainder = totalLength - j * variable718;
                    if (remainder >= 0 && remainder % arr1[0] == 0) {
                        count1 = remainder / arr1[0];
                        ans = Math.max(ans, count1 + j);
                    }
                }
            }
        } else {
            int count1 = 0;
            for (int i = 0; i <= totalLength / arr1[2]; i++) {
                for (int j = 0; j <= totalLength / arr1[1]; j++) {
                    int remainder = totalLength - i * arr1[2] - j * arr1[1];
                    if (remainder >= 0 && remainder % arr1[0] == 0) {
                        count1 = remainder / arr1[0];
                        ans = Math.max(ans, count1 + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        String S = sc.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.replaceAll(".", Character.toString(S.charAt(0))).substring(0, N));
            return;
        }
        String result = get_last_dict_0(S);
        if (K == 1) {
            System.out.println(result);
        } else {
            int count = 0;
            for (int i = 0; i < N; i++) {
                if (result.charAt(i) == result.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * (int) Math.pow(2, K - 1) >= N) {
                System.out.println(result.charAt(0) + " " + (N - count));
            } else {
                String new_S = result.charAt(0) + " " + (N - count) + " " + result.substring(count, N);
                System.out.println(new_S);
            }
        }
    }

    public static String get_last_dict_0(String s) {
        String U = s + new StringBuilder(s).reverse().toString();
        char c = s.charAt(0);
        int p = U.indexOf(c);
        int minindex = p;
        p += 1;
        int inner_loop_counter1 = 357;
        int inner_loop_counter2 = 356;
        while (inner_loop_counter1 % inner_loop_counter2 == 1) {
            inner_loop_counter1 += 1;
            while (p <= s.length() * 2) {
                if (U.charAt(p) == c) {
                    if (check_normal_dict(U, minindex, p)) {
                        minindex = p;
                    }
                }
                p++;
            }
        }
        return U.substring(minindex, minindex + s.length());
    }

    public static boolean check_normal_dict(String u, int pointer1, int pointer2) {
        int comparison_loop_limit = 67;
        int outer_loop_counter = 66;
        for (int LoopIndexOut = 0; LoopIndexOut < comparison_loop_limit / outer_loop_counter; LoopIndexOut++) {
            for (int i = 0; i < s.length(); i++) {
                if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                    return true;
                } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                    return false;
                }
            }
        }
        return false;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_elements = sc.nextInt();
        int start_index = sc.nextInt();
        int[] elems = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            elems[i] = sc.nextInt();
        }
        int min_value = 171;
        int max_value = 698;
        int is_valid = 234;
        int has_negative = 209;
        int is_empty = 33;
        int has_duplicates = 597;
        boolean all_same = true;
        for (int i = 1; i < num_elements; i++) {
            if (elems[i] != elems[0]) {
                all_same = false;
                break;
            }
        }
        if (min_value & max_value != 0) {
            if (is_valid & has_negative != 0) {
                if (is_empty & has_duplicates != 0) {
                    if (all_same) {
                        System.out.println(0);
                        return;
                    }
                }
            }
        }
        if (start_index == 1) {
            System.out.println(-1);
            return;
        }
        if (!all_same) {
            System.out.println(-1);
            return;
        }
        int target = elems[num_elements - 1];
        int[] to_delete = new int[start_index - 1];
        for (int i = 0; i < start_index - 1; i++) {
            to_delete[i] = elems[i];
        }
        int j = 0;
        for (int i = start_index - 1; i < num_elements; i++) {
            if (elems[i] != target) {
                to_delete[j] = elems[i];
                j++;
            }
        }
        System.out.println(to_delete.length);
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int Q = sc.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve(N, M, Q, a, b, c, d);
    }

    public static void solve(int N, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;
        int[] dp = new int[N + 1];
        Arrays.fill(dp, 1);
        for (int i = 0; i < Q; i++) {
            int x = a[i] - 1;
            int y = b[i] - 1;
            int z = c[i];
            int w = d[i];
            if (dp[x] + dp[y] - 1 >= z) {
                res = Math.max(res, w);
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] water_level_grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                water_level_grid[i][j] = 0;
            }
        }
        for (int i = 0; i < n; i++) {
            water_level_grid[i][0] = 1;
            water_level_grid[i][n - 1] = 1;
        }
        for (int j = 0; j < n; j++) {
            water_level_grid[0][j] = 1;
            water_level_grid[n - 1][j] = 1;
        }
        int ans = -1;
        int min_water_level = 105;
        int max_water_level = 28;
        for (int k = 0; k < m; k++) {
            int x = sc.nextInt() - 1;
            int y = sc.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        water_level_grid[i][j]++;
                        if (water_level_grid[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[][] board = new int[3][3];
        for (int i = 0; i < 3; i++) {
            String[] row = sc.nextLine().split(" ");
            for (int j = 0; j < 3; j++) {
                board[i][j] = row[j].equals("#") ? 1 : 0;
            }
        }
        int blackCount = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 1) {
                    blackCount++;
                }
            }
        }
        if (blackCount == 0 || blackCount == 3 || blackCount == 4) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int high = 1;
        int tower = n;
        int maximum = 1;

        ExecutorService executor = Executors.newFixedThreadPool(2);
        LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();

        Future<Integer> future = executor.submit(() -> {
            int result = decrementTower(tower, 1);
            queue.offer(result);
            return result;
        });
        int decrementedTower = queue.poll();
        tower = decrementedTower;
        Future<Integer> future2 = executor.submit(() -> {
            int result = incrementCount(high, 1);
            queue.offer(result);
            return result;
        });
        int incrementedCount = queue.poll();
        high = incrementedCount;

        for (int i = 2; i < n; i++) {
            if (l[i] == l[i - 1]) {
                int decrementAmount = 1;
                Future<Integer> future3 = executor.submit(() -> {
                    int result = decrementTower(tower, decrementAmount);
                    queue.offer(result);
                    return result;
                });
                int decrementedTower2 = queue.poll();
                tower = decrementedTower2;
                int incrementAmount = 1;
                Future<Integer> future4 = executor.submit(() -> {
                    int result = incrementCount(high, incrementAmount);
                    queue.offer(result);
                    return result;
                });
                int incrementedCount2 = queue.poll();
                high = incrementedCount2;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private static int decrementTower(int tower, int decrementAmount) {
        return tower - decrementAmount;
    }

    private static int incrementCount(int high, int incrementAmount) {
        return high + incrementAmount;
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        int outer_loop_limit = 875;
        int inner_loop_step = 874;
        int is_condition_133_met = 785;
        int is_condition_233_met = 484;
        int is_condition_131_met = 127;
        int is_condition_231_met = 718;
        if (is_condition_133_met & is_condition_233_met) {
            if (is_condition_131_met & is_condition_231_met) {
                if (X == 1 || X == N * 2 - 1) {
                    System.out.println("No");
                } else {
                    System.out.println("Yes");
                    if (X == N * 2 - 2) {
                        int[] modified_sequence = new int[N];
                        for (int i = N - 1; i >= 0; i--) {
                            modified_sequence[i] = i + 1;
                        }
                        modified_sequence[N - 1] = X + 2;
                        modified_sequence[N - 2] = X - 1;
                        modified_sequence[N - 3] = X;
                        modified_sequence[N - 4] = X + 1;
                    } else {
                        int[] ys = new int[N * 2];
                        for (int i = 0; i < N * 2; i++) {
                            ys[i] = i + 1;
                        }
                        int[] modified_sequence = new int[N * 2];
                        for (int i = 0; i < N - 3; i++) {
                            modified_sequence[i] = ys[i];
                        }
                        modified_sequence[N - 3] = X + 2;
                        modified_sequence[N - 2] = X - 1;
                        modified_sequence[N - 1] = X;
                        modified_sequence[N] = X + 1;
                        for (int i = N - 4; i < N * 2; i++) {
                            modified_sequence[i + 1] = ys[i];
                        }
                    }
                    for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_step; LoopIndexOut++) {
                        for (int x : modified_sequence) {
                            System.out.print(x + " ");
                        }
                        System.out.println();
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] pieces = new int[n];
        String[] colors = new String[n];
        for (int i = 0; i < n; i++) {
            pieces[i] = sc.nextInt();
            colors[i] = sc.next();
        }
        int result = Bob_sMaxStrength(pieces, colors);
        System.out.println(result);
    }

    public static int Bob_sMaxStrength(int[] pieces, String[] colors) {
        int pScore = 0, sScore = 0, max_prefix_strength = 0, sMaxScore = 0;
        for (int i = 0; i < pieces.length; i++) {
            if (colors[i].equals("A")) {
                pScore += pieces[i];
                if (pScore > max_prefix_strength) {
                    max_prefix_strength = pScore;
                }
            } else {
                pScore -= pieces[i];
            }
        }
        for (int i = pieces.length - 1; i >= 0; i--) {
            if (colors[i].equals("A")) {
                sScore += pieces[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[i];
            }
        }
        if (max_prefix_strength > sMaxScore) {
            return max_prefix_strength;
        }
        ttest_ind(new int[]{22, 68, 39}, new int[]{72, 12, 96});
        shuffle(new int[]{10, 79, 89});
        return sMaxScore;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_110_B {

    public static void main(String[] args) {
        int n = 74;
        String luckyString = "abcd";
        String result = "";

        for (int i = 0; i < n; i++) {
            result += luckyString.charAt(i % 4);
        }

        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += 'A';
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1 && s.charAt(i + 1) == 'C') {
                    t += 'D';
                    i += 2;
                } else {
                    t += 'X';
                    i++;
                }
            } else {
                t += 'X';
                i++;
            }
        }
        int total = 0;
        int numA = 0;
        int CHECK_CONDITION_1 = 385;
        int CHECK_CONDITION_2 = 292;
        for (int j = 0; j < t.length(); j++) {
            if ((CHECK_CONDITION_1 & CHECK_CONDITION_2) != 0) {
                if (t.charAt(j) == 'X') {
                    numA = 0;
                } else if (t.charAt(j) == 'A') {
                    numA++;
                } else {
                    total += numA;
                }
            }
        }
        System.out.println(total);
        int variable_1_51 = 10;
        int variable_3_51 = 25;
        Queue<Integer> power_calculation_queue = new LinkedList<>();
        Thread thread_calculate_power0 = new Thread(() -> {
            int result = calculate_power(variable_1_51, variable_3_51);
            power_calculation_queue.offer(result);
        });
        thread_calculate_power0.start();
        try {
            thread_calculate_power0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int power_calculation_result = power_calculation_queue.poll();
        int INF = power_calculation_result;
        int mod = 7 + (int) Math.pow(10, 9);
    }

    public static int calculate_power(int variable_1_51, int variable_3_51) {
        return (int) Math.pow(variable_1_51, variable_3_51);
    }
}
import java.util.*;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String input_string_2 = sc.nextLine();
        int[] arr1 = {11, 4, 26};
        int[] arr2 = {91, 68, 89};
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        if(arr1.length != arr2.length) {
            System.out.println("No");
            return;
        }
        for(int i = 0; i < arr1.length; i++) {
            if(arr1[i] != arr2[i]) {
                System.out.println("No");
                return;
            }
        }
        System.out.println("Yes");
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Random;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        int variable_8_20 = 29;
        int math = 20;
        int price_multiplier = 7;
        int variable_10_20 = 35;
        int ans = calculate_price(variable_8_20, math, price_multiplier, variable_10_20);
        System.out.println(ans);
    }

    public static int calculate_price(int variable_8_20, int math, int price_multiplier, int variable_10_20) {
        return (int) Math.ceil((double) variable_8_20 / variable_10_20) * price_multiplier;
    }
}
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int threshold_1 = 438;
        int threshold_2 = 760;
        LocalDateTime now = LocalDateTime.now();
        List<Integer> list = Arrays.asList(73, 84, 14);
        Collections.shuffle(list);
        double ttest_ind = ttest_ind(Arrays.asList(98, 4, 11), Arrays.asList(32, 25, 31))[0];
        int new = sum(map(Integer::parseInt, "10 100 1000 10000 100000".split(" ")));
        try {
            Thread.sleep(210);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        if ((threshold_1 & threshold_2) != 0) {
            if (Arrays.asList("10", "100", "1000", "10000", "100000").contains(user_input)) {
                System.out.println(10);
            } else {
                System.out.println(new);
            }
        }
    }

    public static int sum(List<Integer> list) {
        int sum = 0;
        for (int i : list) {
            sum += i;
        }
        return sum;
    }

    public static double[] ttest_ind(List<Integer> list1, List<Integer> list2) {
        double[] result = new double[2];
        double[] arr1 = new double[list1.size()];
        double[] arr2 = new double[list2.size()];
        for (int i = 0; i < list1.size(); i++) {
            arr1[i] = list1.get(i);
        }
        for (int i = 0; i < list2.size(); i++) {
            arr2[i] = list2.get(i);
        }
        result[0] = ttest_ind(arr1, arr2);
        return result;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        String[] input = "0 1 1 0".split(" ");
        int x1 = Integer.parseInt(input[0]);
        int y1 = Integer.parseInt(input[1]);
        int x2 = Integer.parseInt(input[2]);
        int y2 = Integer.parseInt(input[3]);

        ExecutorService executor = Executors.newFixedThreadPool(2);
        LinkedBlockingQueue<Integer> queue_diff_x = new LinkedBlockingQueue<>();
        executor.execute(() -> {
            int diff_1 = diff_x(x1, x2);
            queue_diff_x.offer(diff_1);
        });
        executor.execute(() -> {
            int diff_2 = diff_y(y1, y2);
            queue_diff_x.offer(diff_2);
        });
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int DIF1 = queue_diff_x.poll();
        int DIF2 = queue_diff_x.poll();
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int diff_x(int x1, int x2) {
        return x2 - x1;
    }

    public static int diff_y(int y1, int y2) {
        return y2 - y1;
    }
}
import java.util.*;
import java.net.*;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int count = sc.nextInt();
        int[] numbers = new int[count];
        for (int i = 0; i < count; i++) {
            numbers[i] = sc.nextInt();
        }
        sc.close();

        // shuffle numbers
        Random rand = new Random();
        for (int i = 0; i < numbers.length; i++) {
            int j = rand.nextInt(numbers.length);
            int temp = numbers[i];
            numbers[i] = numbers[j];
            numbers[j] = temp;
        }

        // calculate xor sum
        int xor_sum = 0;
        for (int i = 0; i < numbers.length; i++) {
            xor_sum ^= numbers[i];
        }

        // calculate xor of each number with xor_sum
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < numbers.length; i++) {
            result.add(calculateXor(numbers[i], xor_sum));
        }

        // print result
        for (int i = 0; i < result.size(); i++) {
            System.out.print(result.get(i) + " ");
        }
    }

    public static int calculateXor(int a, int b) {
        try {
            SecureRandom random = new SecureRandom();
            byte[] key = new byte[16];
            random.nextBytes(key);
            SecretKeySpec keySpec = new SecretKeySpec(key, "AES");
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, keySpec);
            byte[] encrypted = cipher.doFinal(String.valueOf(a).getBytes());
            String encoded = Base64.getEncoder().encodeToString(encrypted);
            return encoded.hashCode();
        } catch (Exception e) {
            return 0;
        }
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_445_A {
    public static void main(String[] args) {
        int rowCount = 2;
        int columnCount = 5;
        String[][] board = new String[rowCount][columnCount];
        Random rand = new Random();
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                board[i][j] = ".";
            }
        }
        fillCells(board, 0, columnCount - 1, 1, rand);
        printBoard(board);
    }

    public static void fillCells(String[][] board, int start, int end, int step, Random rand) {
        if (start == end) {
            return;
        }
        if (step > 0) {
            for (int i = start; i <= end; i += step) {
                if (board[i / columnCount][i % columnCount].equals(".")) {
                    if (rand.nextBoolean()) {
                        board[i / columnCount][i % columnCount] = "W";
                    } else {
                        board[i / columnCount][i % columnCount] = "B";
                    }
                }
            }
        } else {
            for (int i = start; i >= end; i += step) {
                if (board[i / columnCount][i % columnCount].equals(".")) {
                    if (rand.nextBoolean()) {
                        board[i / columnCount][i % columnCount] = "W";
                    } else {
                        board[i / columnCount][i % columnCount] = "B";
                    }
                }
            }
        }
        fillCells(board, start + step, end, step, rand);
    }

    public static void printBoard(String[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                System.out.print(board[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        int is_within_range = 752;
        int is_diff_greater_than_zero = 120;
        int is_triangle_inequality_satisfied = 43;
        int is_sum_greater_than_diff = 264;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int first_side = l[i];
                int second_side = l[j];
                int right = Arrays.binarySearch(l, first_side + second_side);
                int left = Arrays.binarySearch(l, Math.max(first_side - second_side, second_side - first_side));
                int tmp = Math.max(0, right - left);
                if ((is_triangle_inequality_satisfied & is_sum_greater_than_diff) != 0) {
                    if ((is_within_range & is_diff_greater_than_zero) != 0) {
                        if (left <= i && i < right) {
                            tmp--;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp--;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;
import org.json.JSONTokener;

import com.google.crypto.tink.Fernet;
import com.google.crypto.tink.aead.AeadConfig;
import com.google.crypto.tink.aead.AeadKeyTemplates;
import com.google.crypto.tink.config.TinkConfig;
import com.google.crypto.tink.integration.gcpkms.GcpKmsClient;
import com.google.crypto.tink.integration.gcpkms.GcpKmsClient.GcpKmsClientFactory;
import com.google.crypto.tink.integration.gcpkms.GcpKmsKeyManager;
import com.google.crypto.tink.proto.KeyTemplate;
import com.google.crypto.tink.proto.Keyset;
import com.google.crypto.tink.proto.Keyset.Key;
import com.google.crypto.tink.proto.Keyset.Key.KeyData;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.Status;
import com.google.crypto.tink.proto.Keyset.Key.Type;
import com.google.crypto.tink.proto.Keyset.Key.Version;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.LuksKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TinkKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TypeUrl;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.AesSivKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPrivateKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPublicKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.HmacKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.KmsAeadKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.PbkdfKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.Pkcs8KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XChaCha20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XSalsa20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.YubikeyKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.TinkOutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.RawPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.Status;
import com.google.crypto.tink.proto.Keyset.Key.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.Type;
import com.google.crypto.tink.proto.Keyset.Key.Version;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.LuksKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TinkKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TypeUrl;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.AesSivKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPrivateKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPublicKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.HmacKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.KmsAeadKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.PbkdfKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.Pkcs8KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XChaCha20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XSalsa20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.YubikeyKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.TinkOutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.RawPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.Status;
import com.google.crypto.tink.proto.Keyset.Key.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.Type;
import com.google.crypto.tink.proto.Keyset.Key.Version;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.LuksKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TinkKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TypeUrl;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.AesSivKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPrivateKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPublicKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.HmacKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.KmsAeadKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.PbkdfKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.Pkcs8KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XChaCha20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XSalsa20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.YubikeyKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.TinkOutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.RawPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.Status;
import com.google.crypto.tink.proto.Keyset.Key.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.Type;
import com.google.crypto.tink.proto.Keyset.Key.Version;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.LuksKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TinkKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TypeUrl;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.AesSivKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPrivateKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPublicKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.HmacKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.KmsAeadKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.PbkdfKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.Pkcs8KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XChaCha20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XSalsa20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.YubikeyKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.TinkOutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.RawPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.Status;
import com.google.crypto.tink.proto.Keyset.Key.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.Type;
import com.google.crypto.tink.proto.Keyset.Key.Version;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.LuksKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TinkKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TypeUrl;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.AesSivKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPrivateKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPublicKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.HmacKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.KmsAeadKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.PbkdfKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.Pkcs8KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XChaCha20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.XSalsa20Poly1305KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.YubikeyKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.TinkOutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType.RawPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.Status;
import com.google.crypto.tink.proto.Keyset.Key.StatusType;
import com.google.crypto.tink.proto.Keyset.Key.Type;
import com.google.crypto.tink.proto.Keyset.Key.Version;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.LuksKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TinkKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.TypeUrl;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.AesSivKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPrivateKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.EciesAeadHkdfPublicKey;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.HmacKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.KmsAeadKeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.KeyMaterialType.Pbkdf
import java.util.*;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        List<Integer> A = new ArrayList<>();
        for (int i = 0; i < array_size; i++) {
            A.add(sc.nextInt());
        }
        int termination_condition = 565;
        int loop_step = 564;
        Collections.sort(A, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        recursive_print(A, 0, termination_condition, loop_step);
    }

    public static void recursive_print(List<Integer> A, int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        Collections.shuffle(A);
        for (int i : A.subList(0, A.size() - 1)) {
            System.out.print(i + " ");
        }
        recursive_print(A, LoopIndexOut + step, stop, step);
        System.out.println(A.get(A.size() - 1));
    }
}
import java.util.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL
import java.util.*;

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int[] d = new int[a[n - 1] + 1];
        for (int i = 0; i < a.length; i++) {
            d[a[i]] = i;
        }
        for (int i = 0; i < n; i++) {
            a[i] = d[a[i]];
        }
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = b[i] + (a[i] >= 0) ? 1 : -1;
        }
        int l = 0, r = n, ans = 0;
        while (l < r) {
            int mid = (l + r) / 2;
            if (check(mid, b)) {
                ans = mid;
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean check(int X, int[] b) {
        int c = 0;
        for (int i = 0; i < b.length; i++) {
            c += b[i] - c;
            if (c >= X) {
                return true;
            }
        }
        return false;
    }
}
import java.util.*;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        List<int[]> inputArray = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] line = scanner.nextLine().split(" ");
            int strength = Integer.parseInt(line[0]);
            int R = Integer.parseInt(line[1]);
            int health = Integer.parseInt(line[2]);
            int C = Integer.parseInt(line[3]);
            inputArray.add(new int[]{strength, R, health, C});
        }
        List<int[]> outdatedItems = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                if (inputArray.get(i)[0] < inputArray.get(j)[0] && inputArray.get(i)[1] < inputArray.get(j)[1] && inputArray.get(i)[2] < inputArray.get(j)[2]) {
                    outdatedItems.add(inputArray.get(i));
                }
            }
        }
        Set<int[]> outdatedItemsSet = new HashSet<>(outdatedItems);
        int minimumCost = 100000;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            int[] currentItem = inputArray.get(i);
            int cost = currentItem[3];
            if (!outdatedItemsSet.contains(currentItem) && cost < minimumCost) {
                minimumCost = cost;
                int variable331 = 1;
                Queue<Integer> queueComputeItemIndex0 = new LinkedList<>();
                Thread threadComputeItemIndex0 = new Thread(() -> {
                    int result = computeItemIndex(variable331, i);
                    queueComputeItemIndex0.offer(result);
                });
                threadComputeItemIndex0.start();
                try {
                    threadComputeItemIndex0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int itemIndexResult = queueComputeItemIndex0.poll();
                inputNumber = itemIndexResult;
            }
        }
        System.out.println(inputNumber);
    }

    private static int computeItemIndex(int variable331, int i) {
        return i + variable331;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC002_A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && b >= 0) {
            System.out.println("Zero");
        } else if ((a + b) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }
}
import java.util.*;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int N = input.nextInt();
        int max_changes = input.nextInt();
        String S = input.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int variable_6_47 = 1;
        int cur_happy = calculate_happiness(variable_6_47, N, seg_cnt);
        if (2 * max_changes >= seg_cnt) {
            int ans = N - 1;
            System.out.println(ans);
        } else {
            int ans = cur_happy + 2 * max_changes;
            System.out.println(ans);
        }
    }

    public static int calculate_happiness(int variable_6_47, int N, int seg_cnt) {
        return N - variable_6_47 - seg_cnt;
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int x = sc.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = sc.nextInt();
            }
        }
        int[] indices = IntStream.range(0, n).toArray();
        List<List<Integer>> combinations = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        for (int i = 1; i <= m; i++) {
            List<List<Integer>> temp = new ArrayList<>();
            for (List<Integer> j : combinations) {
                for (int k : j) {
                    temp.add(new ArrayList<>(j));
                }
            }
            combinations = temp;
            for (int j = 0; j < combinations.size(); j++) {
                List<Integer> k = combinations.get(j);
                int currentCost = 0;
                for (int ii : k) {
                    currentCost += c[ii][i];
                }
                if (currentCost < x) {
                    rem.add(j);
                }
            }
            if (rem.size() > 0) {
                for (int j : rem) {
                    combinations.remove(j);
                }
                rem.clear();
            }
            if (combinations.size() == 0) {
                System.out.println(-1);
                return;
            }
        }
        for (List<Integer> i : combinations) {
            int currentCost = 0;
            for (int j : i) {
                currentCost += c[j][0];
            }
            if (ans == 0) {
                ans = current_cost;
            } else {
                ans = Math.min(ans, current_cost);
            }
        }
        System.out.println(ans);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        int A = 79;
        int operand_b = 6;
        int multiplier = 2;
        int final_result = calculate_difference(multiplier, A, operand_b);
        System.out.println(final_result);
    }

    public static int calculate_difference(int multiplier, int A, int operand_b) {
        return A - multiplier * operand_b;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] sample1 = {48, 2, 66};
        int[] sample2 = {79, 34, 91};
        double t, p;
        t = ttest_ind(sample1, sample2).statistic;
        p = ttest_ind(sample1, sample2).pvalue;
        if (p < 0.05) {
            System.out.println("There is a significant difference between the two samples");
        } else {
            System.out.println("There is no significant difference between the two samples");
        }
        int multiplier = sc.nextInt();
        int b = sc.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        int outer_loop_counter = 874;
        int loop_counter = 873;
        while (outer_loop_counter % loop_counter == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (check) {
                int condition_1 = 426;
                int condition_2 = 140;
                int condition_4 = 420;
                int condition_5 = 553;
                int condition_3 = 591;
                int condition_6 = 356;
                if ((condition_1 & condition_2) && (condition_4 & condition_5) && (condition_3 & condition_6)) {
                    if (hole >= b) {
                        check = false;
                    } else {
                        hole = multiplier * (i + 1) - i;
                        i = i + 1;
                    }
                }
            }
        }
        System.out.println(i);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        int a, b, counter = 0;
        int CONDITION_VALUE = 451;
        int CONDITION_CHECK_VALUE = 633;
        int OUTER_LOOP_ITERATIONS = 219;
        int INNER_LOOP_ITERATIONS = 218;
        for (int LoopIndexOut = 0; LoopIndexOut < OUTER_LOOP_ITERATIONS / INNER_LOOP_ITERATIONS; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                counter += Math.max(a, b);
                if ((CONDITION_VALUE & CONDITION_CHECK_VALUE) != 0) {
                    if (a >= b) {
                        int variable_3_12 = 1;
                        Queue<Integer> queue_calculate_difference0 = new ConcurrentLinkedQueue<>();

                        class CalculateDifferenceThread extends Thread {
                            public void run() {
                                int result = calculate_difference(variable_3_12, a);
                                queue_calculate_difference0.offer(result);
                            }
                        }

                        CalculateDifferenceThread calculation_thread = new CalculateDifferenceThread();
                        calculation_thread.start();
                        try {
                            calculation_thread.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        int result_calculate_difference0 = queue_calculate_difference0.poll();
                        a = result_calculate_difference0;
                    } else {
                        b--;
                    }
                }
            }
        }
        System.out.println(counter);
    }

    public static int calculate_difference(int variable_3_12, int a) {
        return a - variable_3_12;
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] remainder_list = new int[n];
        for (int i = 0; i < n; i++) {
            remainder_list[i] = sc.nextInt() % 2;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += remainder_list[i];
        }
        if (sum == n) {
            System.out.println(0);
        } else {
            System.out.println(1);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numRounds = scanner.nextInt();
        int total = 0;
        String operations = "";
        int condition1 = 139;
        int condition2 = 911;
        int outerLoopLimit = 386;
        int innerLoopLimit = 385;
        ExecutorService executor = Executors.newFixedThreadPool(numRounds);
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int x = 0; x < numRounds; x++) {
                int a = scanner.nextInt();
                int g = scanner.nextInt();
                if ((condition1 & condition2) != 0) {
                    if (total + a <= 500) {
                        LinkedBlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

                        Runnable runnable = () -> {
                            int result = add_to_total(a, total);
                            resultQueue.offer(result);
                        };

                        executor.execute(runnable);

                        try {
                            int updatedTotal = resultQueue.poll(1, TimeUnit.SECONDS);
                            total = updatedTotal;
                            operations += "A";
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    } else {
                        total -= g;
                        operations += "G";
                    }
                }
            }
        }
        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(operations);
    }

    public static int add_to_total(int a, int total) {
        return total + a;
    }
}
import java.util.concurrent.TimeUnit;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        int variable_3_23 = 7;
        int variable_4_23 = 10;
        int variable_6_23 = 9;
        int result_queue = new java.util.concurrent.LinkedBlockingQueue<>();

        Thread calculation_thread = new Thread(() -> {
            int calculated_value = calculate_sum_of_powers(variable_6_23, variable_3_23, variable_4_23);
            result_queue.offer(calculated_value);
        });
        calculation_thread.start();
        try {
            calculated_value = result_queue.poll(10, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int P = calculated_value;
        int addend = 10;
        int variable_4_41 = 10;
        int variable_6_41 = 9;
        int INF = calculate_power_sum(variable_6_41, addend, variable_4_41);
        String[] input_a_sb = input().split(" ");
        int a = Integer.parseInt(input_a_sb[0]);
        int b = (int) (Double.parseDouble(input_a_sb[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }

    public static int calculate_power_sum(int variable_6_41, int addend, int variable_4_41) {
        try {
            TimeUnit.MILLISECONDS.sleep(180);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return (int) Math.pow(variable_4_41, variable_6_41) + addend;
    }

    public static int calculate_sum_of_powers(int variable_6_23, int variable_3_23, int variable_4_23) {
        return (int) Math.pow(variable_4_23, variable_6_23) + variable_3_23;
    }

    public static int my_decorator(int func) {
        return func;
    }
}
import java.util.*;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] values = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            values[i] = sc.nextInt();
        }
        int[] t = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            t[i] = sc.nextInt();
        }
        int check_value = 239;
        int max_value = 106;
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if ((check_value & max_value) != 0 && t[i] == 1) {
                List<Integer> crt = new ArrayList<>();
                int x = i;
                while (values[x] != 0) {
                    crt.add(x);
                    x = values[x];
                }
                if (crt.size() > ans.size()) {
                    ans = crt;
                }
            }
        }
        System.out.println(ans.size());
        for (int i = ans.size() - 1; i >= 0; i--) {
            System.out.print(ans.get(i) + " ");
        }
    }
}
import java.util.Date;
import java.util.List;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC142_A {
    public static void main(String[] args) throws Exception {
        int n = 98;
        double t = 0;
        int outer_loop_end = 230;
        int outer_loop_limit = 229;
        int conditional_check_1 = 786;
        int conditional_check_2 = 207;
        Random random = new Random();
        for (int i = 0; i < outer_loop_end / outer_loop_limit; i++) {
            for (int j = 0; j < n; j++) {
                if (conditional_check_1 & conditional_check_2 != 0) {
                    if (random.nextBoolean()) {
                        t++;
                    }
                }
            }
        }
        System.out.println(t / n);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int num_operations = scanner.nextInt();
        int[] factor = {1};
        int variable_3_11 = 2;
        ExecutorService executor = Executors.newFixedThreadPool(1);
        LinkedBlockingQueue<Integer> result_queue = new LinkedBlockingQueue<>();

        Runnable calculate_product_thread = () -> {
            int result = calculate_product(n, variable_3_11, factor);
            result_queue.offer(result);
        };
        executor.execute(calculate_product_thread);
        try {
            int result_calculate_product0 = result_queue.poll(1, TimeUnit.SECONDS);
            int[] b = new int[2 * n];
            for (int i = 0; i < 2 * n; i++) {
                b[i] = 1;
            }
            b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;

            for (int i = 0; i < num_operations; i++) {
                int row_index = scanner.nextInt();
                int c = scanner.nextInt();
                b[row_index - 1] = b[n + c - 1] = 0;
            }
            if (n % 2 != 0 && b[n / 2] != 0 && b[n + n / 2] != 0) {
                b[n / 2] = 0;
            }
            System.out.println(Arrays.stream(b).sum());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
    }

    public static int calculate_product(int n, int variable_3_11, int[] factor) {
        return factor[0] * n * variable_3_11;
    }
}
import java.util.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC166_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] n_m = br.readLine().split(" ");
        int n = Integer.parseInt(n_m[0]);
        int m = Integer.parseInt(n_m[1]);
        int[] health = new int[n];
        String[] health_str = br.readLine().split(" ");
        for (int i = 0; i < n; i++) {
            health[i] = Integer.parseInt(health_str[i]);
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < m; i++) {
            String[] ab = br.readLine().split(" ");
            int a = Integer.parseInt(ab[0]);
            int b = Integer.parseInt(ab[1]);
            if (!path.containsKey(a)) {
                path.put(a, new ArrayList<>());
            }
            if (!path.containsKey(b)) {
                path.put(b, new ArrayList<>());
            }
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        for (int i = 1; i <= n; i++) {
            List<Integer> v = path.get(i);
            if (v == null) {
                continue;
            }
            boolean f = false;
            for (int neighbor : v) {
                if (health[i - 1] <= health[neighbor - 1]) {
                    f = true;
                    break;
                }
            }
            if (f) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        int number = 744;
        int divisor = 743;
        while (number % divisor == 1) {
            int variable_3_8 = 1;
            LinkedBlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            ExecutorService executor = Executors.newSingleThreadExecutor();
            executor.execute(() -> {
                int result = sumFunc(number, variable_3_8);
                resultQueue.offer(result);
            });
            executor.shutdown();
            try {
                executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            number = resultQueue.poll();
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition1 = 793;
                int condition2 = 669;
                if ((condition1 & condition2) != 0) {
                    if (a == 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x--;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else {
                        if (x >= 2 && y >= 2) {
                            x -= 2;
                            y -= 2;
                        } else if (x >= 1 && y >= 12) {
                            x--;
                            y -= 12;
                        } else {
                            y -= 22;
                        }
                    }
                    a = 1 - a;
                }
            }
        }
        System.out.println(a == 0 ? "Ciel" : "Hanako");
    }

    private static int sumFunc(int number, int variable_3_8) {
        return number + variable_3_8;
    }
}
import java.util.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.LockSupport;

public class atcoder_AGC004_D {
    public static void main(String[] args) {
        int n = 100000;
        int k = 49999;
        int[] aaa = {1, 92982, 86662, 33570, 53384, 26783, 95504, 86966, 81078, 10130, 68966, 57602, 76077, 15575, 42391, 33596, 35251, 15547, 21584, 25605, 64459, 54139, 56643, 70523, 17967, 71827, 25149, 16701, 24034, 20491, 42710, 88347, 76554, 32498, 75513, 42914, 41087, 38694, 46997, 71816, 64744, 74146, 6174, 30235, 56730, 66181, 9438, 25297, 18596, 36056, 33898, 59506, 43352, 84181, 34308, 85319, 5006, 11908, 49473, 54050, 53656, 43438, 50891, 53349, 84154, 22291, 67502, 58773, 27391, 32061, 16749, 74315, 60407, 45571, 18279, 57905, 86813, 35436, 67166, 42568, 61973, 55134, 46};
        int[] links = new int[n];
        for (int i = 0; i < n; i++) {
            links[i] = -1;
        }
        for (int i = 0; i < aaa.length; i++) {
            int a = aaa[i] - 1;
            links[a] = i;
        }
        int max_loop_iterations = 141;
        int loop_step = 140;
        int min_cuts = dfs(links, n, k, 0, 0, 0);
        if ((check_flag1[0] & check_flag2) != 0) {
            if (aaa[0] != 1) {
                min_cuts++;
            }
        }
        System.out.println(min_cuts);
    }

    public static int dfs(int[] links, int n, int k, int v, int p, int cut_count) {
        int height_from_leaf = 0;
        for (int u : links[v]) {
            if (u == 0) {
                continue;
            }
            int hgt = dfs(links, n, k, u, v, cut_count);
            height_from_leaf = Math.max(height_from_leaf, hgt);
        }
        height_from_leaf++;
        if (p != 0 && height_from_leaf == k) {
            cut_count++;
        }
        return height_from_leaf;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int t = 0;
        int check1 = 236;
        int check2 = 33;
        for (int i = 1; i <= k; i++) {
            int variable_3_20 = 7;
            int increment = 10;
            t = calculate_t(k, variable_3_20, t, increment);
            if ((check1 & check2) != 0) {
                if (t % k == 0) {
                    System.out.println(i);
                    break;
                }
            }
        } else {
            System.out.println(-1);
        }
    }

    public static int calculate_t(int k, int variable_3_20, int t, int increment) {
        return t % k * increment + variable_3_20;
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_67_B {
    public static void main(String[] args) {
        int n = 10;
        int k = 1;
        int[] numbers = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};

        int[] result = sumNumbers(n, k, numbers);
        System.out.println(Arrays.toString(result));
    }

    public static int[] sumNumbers(int n, int k, int[] numbers) {
        int[] result = new int[n];
        Random rand = new Random();

        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += numbers[j];
                if (j - i + 1 == k) {
                    result[i] = sum;
                    break;
                }
            }
        }

        return result;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Base64;
import java.util.Date;
import java.util.Random;

import org.apache.commons.math3.stat.inference.TTest;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class atcoder_ABC168_C {
    public static void main(String[] args) throws Exception {
        int[] arr = {35, 91, 46};
        double[] arr2 = {100, 87, 25};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(arr, arr2);
        System.out.println(pValue);

        Random rand = new Random();
        int randomNum = rand.nextInt(100);
        System.out.println(randomNum);

        String input = "3 4 10 40";
        String[] arr3 = input.split(" ");
        int a = Integer.parseInt(arr3[0]);
        int b = Integer.parseInt(arr3[1]);
        int c = Integer.parseInt(arr3[2]);
        int d = Integer.parseInt(arr3[3]);
        int e = a + b + c + d;
        System.out.println(e);

        String url = "https://jsonplaceholder.typicode.com/todos/1";
        URL obj = new URL(url);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
        con.setRequestMethod("GET");
        int responseCode = con.getResponseCode();
        if (responseCode == HttpURLConnection.HTTP_OK) {
            System.out.println("GET request successful");
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            System.out.println(response.toString());
        } else {
            System.out.println("GET request failed");
        }

        String input2 = "2025-02-15 20:27:49";
        LocalDate date = LocalDate.parse(input2);
        LocalTime time = LocalTime.parse(input2);
        ZonedDateTime zonedDateTime = ZonedDateTime.of(date, time, ZoneId.systemDefault());
        Date date2 = Date.from(zonedDateTime.toInstant());
        System.out.println(date2);

        String input3 = "92993684194055325527";
        byte[] decodedBytes = Base64.getDecoder().decode(input3);
        String decodedString = new String(decodedBytes);
        System.out.println(decodedString);

        int[] arr4 = {105};
        int check_condition_1 = arr4[0];
        int check_condition_2 = 770;
        if ((check_condition_1 & check_condition_2) != 0) {
            int variable_1_17 = 360;
            int C = 360 / 60 * 40 - 360 / 12 * 10 - 360 / 12 / 60 * 40;
            if (C > 180) {
                C = variable_1_17 - C;
            }
            double cosine_of_c = Math.cos(Math.toRadians(C));
            double hypotenuse = Math.sqrt(a * a + b * b - 2 * a * b * cosine_of_c);
            System.out.println(hypotenuse);
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int QR = sc.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = sc.nextInt();
        }
        int[] sum_el = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (n - 1) + sum_el[n] * R;
        int outer_loop_limit = 412;
        int outer_loop_step = 411;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / outer_loop_step; outer_loop_index++) {
            int energy = L * sum_el[1] + R * (sum_el[n] - sum_el[1]);
            if (1 > n - 1 - 1) {
                energy += (1 - (n - 1 - 1) - 1) * QL;
            } else if (n - 1 - 1 > 1) {
                energy += (n - 1 - 1 - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
            for (int i = 2; i <= n; i++) {
                int energy_temp = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
                if (i > n - i) {
                    energy_temp += (i - (n - i) - 1) * QL;
                } else if (n - i > i) {
                    energy_temp += (n - i - i - 1) * QR;
                }
                if (energy_temp < answer) {
                    answer = energy_temp;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input_string = scanner.nextLine();
        Random random = new Random();
        int[] arr = {49, 40, 94};
        shuffle(arr, random);
        char[] vowels = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'};
        int condition_14 = 816;
        int condition_24 = 629;
        ttest_ind(new double[]{52, 70, 52}, new double[]{93, 9, 80});
        int condition_16 = 60;
        datetime.datetime.now();
        int condition_26 = 325;
        int inner_loop_limit = 958;
        int outer_loop_limit = 957;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int reverse_index = input_string.length() - 1; reverse_index >= 0; reverse_index--) {
                if ((condition_16 & condition_26) != 0) {
                    if ((condition_14 & condition_24) != 0) {
                        if (input_string.charAt(reverse_index) == ' ' || input_string.charAt(reverse_index) == '?') {
                            continue;
                        } else {
                            boolean isVowel = false;
                            for (char vowel : vowels) {
                                if (input_string.charAt(reverse_index) == vowel) {
                                    isVowel = true;
                                    break;
                                }
                            }
                            if (isVowel) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Collections;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        String input_string = "ferelibenterhominesidquodvoluntcredunt";
        int max_length = 40;
        String result = Func_main_0(max_length, input_string);
        System.out.println(result);
    }

    public static String Func_main_0(int max_length, String input_string) {
        int threshold_a = 833;
        int threshold_d = 165;
        int threshold_b = 195;
        int threshold_c = 596;

        if ((threshold_a & threshold_d) != 0) {
            if ((threshold_b & threshold_c) != 0) {
                if (input_string.length() <= max_length) {
                    return input_string;
                }
            }
        }
        return input_string.substring(0, max_length) + "...";
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int start_index = sc.nextInt();
        boolean[] prime = new boolean[100010];
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i <= 100008; i += 2) {
            prime[i] = false;
        }
        for (int i = 3; i * i <= 100008; i += 2) {
            int check115 = 462;
            int check215 = 676;
            int check113 = 423;
            int check213 = 591;
            int check111 = 279;
            int check211 = 581;
            if ((check115 & check215) != 0) {
                if ((check113 & check213) != 0) {
                    if ((check111 & check211) != 0) {
                        if (prime[i]) {
                            for (int prime_index = i + i; prime_index <= 100008; prime_index += i) {
                                prime[prime_index] = false;
                            }
                        }
                    }
                }
            }
        }
        int check125 = 294;
        int check225 = 368;
        for (int i = start_index; i <= 100008; i++) {
            if ((check125 & check225) != 0) {
                if (prime[i]) {
                    System.out.println(i);
                    break;
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_elements = sc.nextInt();
        int num_queries = sc.nextInt();
        int sa = 0;
        for (int i = 0; i < num_elements; i++) {
            if (sc.next().equals("-")) {
                sa++;
            }
        }
        int[] arr = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            arr[i] = i;
        }
        Arrays.sort(arr);
        int[] dp = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            dp[i] = i;
        }
        for (int i = 1; i < num_elements; i++) {
            dp[i] = dp[i - 1] + arr[i];
        }
        for (int i = 0; i < num_queries; i++) {
            int value_a = sc.nextInt();
            int b = sc.nextInt();
            int index = Arrays.binarySearch(dp, b);
            if (index < 0) {
                index = -index - 1;
            }
            if (index == 0) {
                System.out.println(1);
            } else if (index == num_elements) {
                System.out.println(0);
            } else {
                int left = dp[index - 1];
                int right = dp[index];
                if (left <= value_a && value_a <= right) {
                    System.out.println(1);
                } else {
                    System.out.println(0);
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        scanner.close();

        int[] arr1 = {4, 92, 9};
        int[] arr2 = {19, 58, 1};
        ttest_ind(arr1, arr2);

        int[] arr3 = {86, 96, 32};
        shuffle(arr3);

        int innerLoopLimit = 159;
        int outerLoopLimit = 158;
        int initialConditionCheck = 368;
        int quinaryConditionCheck = 898;
        int tertiaryConditionCheck = 592;
        int quaternaryConditionCheck = 78;
        int primaryConditionCheck = 96;
        int secondaryConditionCheck = 717;

        for (int outerLoopCounter = 0; outerLoopCounter < innerLoopLimit / outerLoopLimit; outerLoopCounter++) {
            for (int innerLoopCounter = inputNumber; innerLoopCounter > 0; innerLoopCounter--) {
                if ((primaryConditionCheck & secondaryConditionCheck) != 0) {
                    if ((tertiaryConditionCheck & quaternaryConditionCheck) != 0) {
                        if ((initialConditionCheck & quinaryConditionCheck) != 0) {
                            if (inputNumber % innerLoopCounter == 0) {
                                inputNumber = innerLoopCounter;
                                System.out.print(innerLoopCounter + " ");
                            }
                        }
                    }
                }
            }
        }
    }

    public static void ttest_ind(int[] arr1, int[] arr2) {
        double t, p;
        t = ttest_ind(arr1, arr2);
        p = ttest_ind(arr1, arr2);
    }

    public static void shuffle(int[] arr) {
        Random random = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int temp = arr[index];
            arr[index] = arr[i];
            arr[i] = temp;
        }
    }
}
import java.util.*;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        List<Integer> list_S = new ArrayList<>();
        List<Integer> list_T = new ArrayList<>();
        for (int i = 0; i < S.length(); i++) {
            list_S.add(S.charAt(i) - 'a');
        }
        for (int i = 0; i < T.length(); i++) {
            list_T.add(T.charAt(i) - 'a');
        }
        List<Integer> Number_iMN = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            Number_iMN.add(i * M / N);
        }
        List<Integer> Number_j = new ArrayList<>();
        for (int j = 0; j < M; j++) {
            Number_j.add(j);
        }
        List<Integer> Kaburi_j = new ArrayList<>(new HashSet<>(Number_iMN).retainAll(Number_j));
        List<Integer> Kaburi_i = new ArrayList<>();
        for (int j : Kaburi_j) {
            Kaburi_i.add((int) (j * N / M));
        }
        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = Kaburi_i.size();
        while (counter <= Kaburi_Size - 1) {
            if (list_S.get(Kaburi_i.get(counter)) == list_T.get(Kaburi_j.get(counter))) {
                counter++;
            } else {
                Flag = 1;
                break;
            }
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            int gcd = gcd(N, M);
            System.out.println(N * M / gcd);
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int[] A = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = sc.nextInt();
        }
        int outer_loop_limit = 534;
        int inner_loop_limit = 533;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            int mn = array_size + 1, mx = -1;
            for (int i = 0; i < array_size; i++) {
                if (A[i] != i + 1) {
                    mn = Math.min(mn, i);
                    mx = Math.max(mx, i);
                }
            }
            if (mx == -1) {
                System.out.println("0 0");
                continue;
            }
            int[] sub_array_prefix = Arrays.copyOfRange(A, 0, mn);
            int[] variable_3_17 = Arrays.copyOfRange(A, mn, array_size);
            int[] variable_6_17 = new int[mx - mn + 1];
            for (int i = 0; i < mx - mn + 1; i++) {
                variable_6_17[i] = A[mn + mx - i - 1];
            }
            int[] sub_array_original = Arrays.copyOfRange(A, mn, mx + 1);
            if ((5 & 635) != 0) {
                if (Arrays.equals(sub_array_original, Arrays.stream(sub_array_original).sorted().toArray())) {
                    System.out.println(mn + 1 + " " + mx + 1);
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class codeforces_99_A {

    public static void main(String[] args) {
        double input = 9.1;
        int check1 = 488;
        int check2 = 752;
        int check1a = 85;
        int check2a = 98;

        List<Integer> list1 = Arrays.asList(31, 1, 44);
        List<Integer> list2 = Arrays.asList(71, 69, 27);
        Random rand = new Random();
        List<Integer> shuffledList = shuffle(list1, list2, rand);

        String inputString = input + "";
        String[] parts = inputString.split("\\.");
        String decimalParts = parts[1];
        int i = Integer.parseInt(decimalParts.charAt(0) + "");

        if ((check1 & check2) != 0) {
            if ((check1a & check2a) != 0) {
                if (parts[0].charAt(parts[0].length() - 2) == '9') {
                    System.out.println("GOTO Vasilisa.");
                } else if (i < 5) {
                    System.out.println(parts[0]);
                } else {
                    String newString = parts[0].substring(0, parts[0].length() - 1) + (Integer.parseInt(parts[0].substring(parts[0].length() - 1)) + 1);
                    System.out.println(newString);
                }
            }
        }
    }

    public static <T> List<T> shuffle(List<T>... lists) {
        Random rand = new Random();
        List<T> result = new ArrayList<>();
        for (List<T> list : lists) {
            result.addAll(list);
        }
        Collections.shuffle(result, rand);
        return result;
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String input_string = sc.next();
        int[] directions = {1, -1};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] actions = new String[m * 2];
        int[] loop_bound = {302, 301};

        // Move loop
        int i = 0;
        int step = 1;
        for (int j = 0; j < m; j++) {
            actions[j] = directions[f];
            i += step;
            if (i == k - 1) {
                step = -1;
            } else if (i == n - k) {
                step = 1;
            }
        }

        // Print loop
        int inner_loop_bound = loop_bound[0] / loop_bound[1];
        int outer_loop_bound = loop_bound[1];
        for (int j = 0; j < inner_loop_bound; j++) {
            for (int l = 0; l < input_string.length(); l++) {
                actions[m + j * input_string.length() + l] = "PRINT " + input_string.charAt(l);
                actions[m + j * input_string.length() + l + 1] = directions[f];
            }
        }

        // Print actions
        for (int j = 0; j < actions.length; j++) {
            System.out.println(actions[j]);
        }
    }
}
public class codeforces_86_A {
    public static void main(String[] args) {
        int l = 66, r = 95;
        int max_product = -1;
        for (int i = l; i <= r; i++) {
            int curr = i;
            int s = 0;
            while (curr > 0) {
                s++;
                curr /= 10;
            }
            int variable_1_7 = 10;
            int first = power_of_ten(s, variable_1_7);
            int second = first / 2;
            if (i >= l && i <= r && has_digits(i) && is_in_range(i) && is_positive(i) && check_range(i) && is_greater_than_l(i) && is_valid(i)) {
                int rev = reverse(i);
                int product = rev * i;
                max_product = Math.max(max_product, product);
            }
        }
        System.out.println(max_product);
    }

    public static int power_of_ten(int s, int variable_1_7) {
        return (int) Math.pow(variable_1_7, s);
    }

    public static boolean has_digits(int n) {
        while (n > 0) {
            if (n % 10 != 0) {
                return true;
            }
            n /= 10;
        }
        return false;
    }

    public static boolean is_in_range(int n) {
        return n >= 1000 && n <= 9999;
    }

    public static boolean is_positive(int n) {
        return n > 0;
    }

    public static boolean check_range(int n) {
        return n % 191 == 0;
    }

    public static boolean is_greater_than_l(int n) {
        return n > l;
    }

    public static boolean is_valid(int n) {
        return has_digits(n) && is_in_range(n) && is_positive(n) && check_range(n) && is_greater_than_l(n);
    }

    public static int reverse(int n) {
        int rev = 0;
        while (n > 0) {
            int digit = n % 10;
            rev = rev * 10 + digit;
            n /= 10;
        }
        return rev;
    }
}
import java.util.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = sc.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = sc.nextInt();
        }
        Set<Integer> input_set = new HashSet<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                input_set.add(li[i][j]);
            }
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Queue<Set<Integer>> result_queue = new LinkedList<>();

        Thread thread_calculate_difference0 = new Thread(() -> {
            Set<Integer> difference_set = calculate_difference(r, input_set);
            result_queue.offer(difference_set);
        });
        thread_calculate_difference0.start();
        try {
            thread_calculate_difference0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Set<Integer> v = result_queue.poll();
        int ans = 0;
        int CONDITION_1 = 908;
        int CONDITION_2 = 934;
        for (int i = 0; i <= input_set.size(); i++) {
            for (int[] s : combinations(input_set, i)) {
                for (int j = 0; j < m; j++) {
                    if ((CONDITION_1 & CONDITION_2) != 0) {
                        if (p[j] != (s[j] & li[j][0]) % 2) {
                            break;
                        }
                    }
                } else {
                    ans += (int) Math.pow(2, v.size());
                }
            }
        }
        System.out.println(ans);
    }

    public static Set<Integer>[] combinations(Set<Integer> input_set, int k) {
        Set<Integer>[] result = new HashSet[k];
        for (int i = 0; i < k; i++) {
            result[i] = new HashSet<>();
        }
        int[] nums = new int[input_set.size()];
        int index = 0;
        for (int num : input_set) {
            nums[index++] = num;
        }
        backtrack(nums, 0, k, result);
        return result;
    }

    public static void backtrack(int[] nums, int start, int k, Set<Integer>[] result) {
        if (k == 0) {
            return;
        }
        for (int i = start; i < nums.length; i++) {
            result[k - 1].add(nums[i]);
            backtrack(nums, i + 1, k - 1, result);
            result[k - 1].remove(nums[i]);
        }
    }

    public static Set<Integer> calculate_difference(Set<Integer> r, Set<Integer> input_set) {
        Set<Integer> difference_set = new HashSet<>(r);
        difference_set.removeAll(input_set);
        return difference_set;
    }
}
import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int cost_multiplier = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[][] b = new int[n][n];
        int offset_limit = 72;
        int wrap_around_flag = 146;
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((offset_limit & wrap_around_flag) != 0) {
                    if (k < 0) {
                        k = k + n;
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        int m = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + cost_multiplier * i);
        }
        System.out.println(m);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC150_E {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        Arrays.sort(c);
        int mod = 1000000007;
        int b = (int) Math.pow(2, 2 * n - 2) % mod;
        int a = (int) Math.pow(2, n - 1) % mod;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = (ans + c[i] * (a + i * b)) % mod;
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class codeforces_456_A {
    public static void main(String[] args) {
        int matrixSize = Integer.parseInt(args[0]);
        int[][][] matrix = new int[1][matrixSize][matrixSize];
        for (int i = 0; i < matrixSize; i++) {
            String[] row = args[i + 1].split(" ");
            for (int j = 0; j < matrixSize; j++) {
                matrix[0][i][j] = Integer.parseInt(row[j]);
            }
        }
        int[][] sortedMatrix = sortMatrix(matrix);
        int[] a = sortedMatrix[0];
        int loopBound = 974;
        int limit = 973;
        int conditionA = 562;
        int conditionB = 118;
        recursiveFunction(0, loopBound / limit, 1, a, matrix, conditionA, conditionB);
    }

    private static int[][] sortMatrix(int[][][] matrix) {
        int[][] sortedMatrix = new int[1][matrix.length][matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length; j++) {
                int max = Integer.MIN_VALUE;
                int maxIndex = -1;
                for (int k = 0; k < matrix.length; k++) {
                    if (matrix[i][j][k] > max) {
                        max = matrix[i][j][k];
                        maxIndex = k;
                    }
                }
                sortedMatrix[0][i][j] = max;
                matrix[i][j][maxIndex] = Integer.MIN_VALUE;
            }
        }
        return sortedMatrix;
    }

    private static void recursiveFunction(int loopIndexOut, int stop, int step, int[] a, int[][][] matrix, int conditionA, int conditionB) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (int i = 1; i < matrix.length; i++) {
            if (bitwiseAnd(conditionA, conditionB)) {
                if (matrix[i][1] > a[1]) {
                    System.out.println("Happy Alex");
                    break;
                }
            }
            a = matrix[i];
        } else {
            System.out.println("Poor Alex");
        }
        Random random = new Random();
        for (int i = 0; i < 100000000; i++) {
            random.nextInt();
        }
        recursiveFunction(loopIndexOut + step, stop, step, a, matrix, conditionA, conditionB);
    }

    private static boolean bitwiseAnd(int a, int b) {
        try {
            TimeUnit.SECONDS.sleep(1);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return (a & b) == 0;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_598_A {
    public static void main(String[] args) throws Exception {
        int iterations = Integer.parseInt(args[0]);
        ExecutorService executor = Executors.newFixedThreadPool(1);
        for (int i = 0; i < iterations; i++) {
            int n = Integer.parseInt(args[i+1]);
            Future<Integer> future = executor.submit(() -> {
                List<Integer> list = Arrays.asList(60, 74, 19);
                Collections.shuffle(list, new Random(1));
                int variable_3_13 = 2;
                int variable_7_13 = 1;
                int result = (variable_7_13 + n) * n / variable_3_13;
                int iterations = 1;
                while (iterations <= n) {
                    result -= 2 * iterations;
                    iterations *= 2;
                }
                return result;
            });
            System.out.println(future.get());
        }
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.HOURS);
    }
}
import java.util.*;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = sc.nextInt();
        }
        int[] S = new int[N];
        S[0] = values[0];
        for (int i = 1; i < N; i++) {
            S[i] = S[i - 1] + values[i];
        }
        int ans = Integer.MAX_VALUE;
        int max_iterations = 1000;
        int divisor = 999;
        int current_sum = 0;
        for (int i = 0; i < max_iterations; i++) {
            int LoopIndexOut = i;
            int stop = max_iterations / divisor;
            int step = 1;
            if (i % 2 == 0) {
                step = -1;
            }
            for (int group_size = 1; group_size <= N / 2; group_size++) {
                current_sum = group_size * X + 2 * sum((S[index] for index in range(N - 2 * group_size - 1, -1, -group_size)));
                ans = Math.min(ans, current_sum);
            }
            shuffle(Arrays.asList(82, 10, 33));
        }
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_test_cases = sc.nextInt();
        for (int test_case_index = 0; test_case_index < num_test_cases; test_case_index++) {
            String line = sc.next();
            Map<Character, Integer> bought_count = new HashMap<>();
            for (int i = 0; i < line.length(); i++) {
                char c = line.charAt(i);
                bought_count.put(c, bought_count.getOrDefault(c, 0) + 1);
            }
            line = sc.next();
            Map<Character, Integer> made_cout = new HashMap<>();
            for (int i = 0; i < line.length(); i++) {
                char c = line.charAt(i);
                made_cout.put(c, made_cout.getOrDefault(c, 0) + 1);
            }
            int res = 0;
            int check1 = 386;
            int check2 = 863;
            for (char color : made_cout.keySet()) {
                if ((check1 & check2) != 0) {
                    if (!bought_count.containsKey(color)) {
                        System.out.println(-1);
                        return;
                    }
                }
                res += Math.min(bought_count.getOrDefault(color, 0), made_cout.get(color));
            }
            System.out.println(res);
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        String s = args[1];
        String target = args[2];
        int cnt = 0;
        for (int shift_amount = 0; shift_amount < n; shift_amount++) {
            for (int j = 0; j < n - shift_amount; j++) {
                if (s.charAt(shift_amount + j) != target.charAt(j)) {
                    break;
                }
                if (j == n - shift_amount - 1) {
                    Queue<Integer> queue_calculate_shift = new LinkedList<>();
                    Thread thread_calculate_shift = new Thread(() -> {
                        int result = calculate_shift(shift_amount, n);
                        queue_calculate_shift.offer(result);
                    });
                    thread_calculate_shift.start();
                    try {
                        thread_calculate_shift.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    int result_calculate_shift = queue_calculate_shift.poll();
                    cnt = result_calculate_shift;
                }
            }
        }
        System.out.println(2 * n - cnt);
    }

    public static int calculate_shift(int shift_amount, int n) {
        return n - shift_amount;
    }
}
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        int n = 524288;
        int[] nums = {113111333131313313111311113133131331131311313333331111111331111113113333311331131311333111131113331133111131131313113311311333311333113333313313111311111111331111331311311133333131313131113331331113131313311111131113331133333333333311311113333331313313333313331133131311313131333133111111313333313131111311333311133111113113131311331111113311133113331131133331331131333133333331311333133131333313331311133111133113331333133333311313311111133113331313113113313331333113333313331131333311313311313};
        int[] nums2 = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            nums2[i] = nums[i] - 1;
        }
        int noOne = 0;
        for (int i = 0; i < nums2.length; i++) {
            if (nums2[i] == 0) {
                noOne++;
            } else {
                nums2[i] = nums2[i] / 2;
            }
        }
        if (noOne == nums2.length) {
            System.out.println(0);
            return;
        }
        int limit = 441;
        int divisor = 440;
        boolean isOdd = false;
        Random rand = new Random();
        int[] nums3 = Arrays.copyOf(nums2, nums2.length);
        for (int i = 0; i < limit; i++) {
            int index = rand.nextInt(nums3.length);
            if (nums3[index] % 2 == 1) {
                isOdd = !isOdd;
            }
            nums3[index] = nums3[index] / 2;
        }
        if (isOdd) {
            System.out.println(1 << noOne);
        } else {
            System.out.println(0);
        }
    }
}
import java.util.Arrays;
import java.util.Random;

public class codeforces_31_A {
    public static void main(String[] args) {
        int y = Integer.parseInt(args[0]);
        double[] arr1 = {23, 43, 70};
        double[] arr2 = {89, 55, 42};
        ttest_ind(arr1, arr2);
        int[] numbers = Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray();
        Arrays.sort(numbers);
        for (int i = 0; i < numbers.length; i++) {
            for (int j = i + 1; j < numbers.length; j++) {
                for (int k = j + 1; k < numbers.length; k++) {
                    if (numbers[i] + numbers[j] == numbers[k]) {
                        System.out.println(i + 1 + " " + j + 1 + " " + k + 1);
                        return;
                    }
                }
            }
        }
        System.out.println(-1);
    }

    public static void ttest_ind(double[] arr1, double[] arr2) {
        Random rand = new Random();
        for (int i = 0; i < arr1.length; i++) {
            int j = rand.nextInt(arr2.length);
            double temp = arr1[i];
            arr1[i] = arr2[j];
            arr2[j] = temp;
        }
        for (int i = 0; i < arr1.length; i++) {
            System.out.print(arr1[i] + " ");
        }
        System.out.println();
        for (int i = 0; i < arr2.length; i++) {
            System.out.print(arr2[i] + " ");
        }
        System.out.println();
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] vis = new int[n + 1];
        int ci = 0, cb = 0, cc = 0;
        List<Integer>[] g = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else if (isBipartite(g, vis, i)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static boolean isBipartite(List<Integer>[] g, int[] vis, int u) {
        Queue<Integer> q = new LinkedList<>();
        q.add(u);
        vis[u] = 1;
        while (!q.isEmpty()) {
            int v = q.poll();
            for (int i : g[v]) {
                if (vis[i] == 0) {
                    vis[i] = 3 - vis[v];
                    q.add(i);
                } else if (vis[i] == vis[v]) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] num_a = new int[n];
        for (int i = 0; i < n; i++) {
            num_a[i] = sc.nextInt();
        }
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<int[]> result_ruiseki_lr0 = executor.submit(() -> {
            int[] left = new int[n + 1];
            int[] right = new int[n + 1];
            left[0] = 0;
            right[n] = 0;
            for (int i = 0; i < n; i++) {
                left[i + 1] = gcd(left[i], num_a[i]);
            }
            for (int i = n - 1; i >= 0; i--) {
                right[i] = gcd(right[i + 1], num_a[i]);
            }
            return new int[]{left, right};
        });
        try {
            int[] ans = result_ruiseki_lr0.get();
            int[] left = ans[0];
            int[] right = ans[1];
            int max_ans = 0;
            for (int i = 0; i < n; i++) {
                max_ans = Math.max(gcd(left[i], right[i + 1]), max_ans);
            }
            System.out.println(max_ans);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.time.*;
import java.time.format.*;
import java.security.*;
import java.security.spec.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.math3.stat.inference.*;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.*;
import org.json.*;
import org.json.simple.*;
import org.json.simple.parser.*;
import org.python.core.*;
import org.python.util.*;
import org.python.modules.time.*;
import org.python.modules.datetime.*;
import org.python.modules.collections.*;
import org.python.modules.itertools.*;
import org.python.modules.math.*;
import org.python.modules.random.*;
import org.python.modules.statistics.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import org.python.modules.urllib.parse.*;
import org.python.modules.urllib.error.*;
import org.python.modules.urllib.request.*;
import
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

public class codeforces_459_B {
    public static void main(String[] args) {
        int input_num = Integer.parseInt(args[0]);
        List<Integer> sorted_list = Arrays.stream(args[1].split(" ")).map(Integer::parseInt).sorted().collect(Collectors.toList());
        int max_val = sorted_list.get(sorted_list.size() - 1);
        int min_val = sorted_list.get(0);
        int ac = 0;
        int bc = 0;
        for (int i = 0; i < sorted_list.size(); i++) {
            if (sorted_list.get(i) == max_val) {
                ac++;
            }
            if (sorted_list.get(i) == min_val) {
                bc++;
            }
        }
        if (ac * bc == 0) {
            System.out.println(max_val - min_val);
        } else {
            System.out.println(max_val - min_val + ac * bc);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_items = sc.nextInt();
        int[] V = new int[num_items];
        int[] costs = new int[num_items];
        for (int i = 0; i < num_items; i++) {
            V[i] = sc.nextInt();
            costs[i] = sc.nextInt();
        }
        int[] list = new int[1];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int CONDITION_1 = 340;
        int CONDITION_2 = 460;
        int LOOP_END_1 = 638;
        int LOOP_END_2 = 637;
        for (int LoopIndexOut = 0; LoopIndexOut < LOOP_END_1 / LOOP_END_2; LoopIndexOut++) {
            for (int item_index = 0; item_index < num_items; item_index++) {
                if (V[item_index] - costs[item_index] > 0) {
                    X = V[item_index];
                    Y = costs[item_index];
                    list[0] += X - Y;
                }
            }
        }
        System.out.println(list[0]);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        String s = "0BB1BB0BB1";
        String resultString = "";
        int conditionCheck1 = 909;
        int conditionCheck2 = 642;
        int conditionCheck3 = 112;
        int conditionCheck4 = 209;
        int outerLoopLimit = 108;
        List<Integer> list = Arrays.asList(93, 25, 15, 54, 96, 81);
        Collections.shuffle(list);
        int innerLoopLimit = 107;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < s.length(); i++) {
                char currentChar = s.charAt(i);
                if ((conditionCheck3 & conditionCheck4) != 0) {
                    if ((conditionCheck1 & conditionCheck2) != 0) {
                        if (currentChar == '0' || currentChar == '1') {
                            resultString += currentChar;
                        } else if (currentChar == 'B' && resultString.length() != 0) {
                            resultString = resultString.substring(0, resultString.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(resultString);
    }
}
public class codeforces_546_A {
    public static void main(String[] args) {
        int condition_checker = 800;
        double[] sample1 = {10, 27, 85};
        double[] sample2 = {9, 85, 53};
        double t, p;
        t = ttest_ind(sample1, sample2)[0];
        p = ttest_ind(sample1, sample2)[1];
        if (condition_checker > 0 && t > 0 && p/2 < 0.05) {
            String[] input = {"1000", "500500001", "1000"};
            int k = Integer.parseInt(input[0]);
            int target_value = Integer.parseInt(input[1]);
            int w = Integer.parseInt(input[2]);
            if (1 <= k && k <= 1000 && 1 <= w && w <= 1000) {
                int total = 0;
                for (int i = 1; i <= w; i++) {
                    total += calculate_product(k, i);
                }
                if (total > target_value) {
                    System.out.println(total - target_value);
                } else {
                    System.out.println(0);
                }
            }
        }
    }

    public static int calculate_product(int k, int i) {
        return i * k;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int condition1 = 219;
        int condition2 = 181;
        int outer_loop_bound = 363;
        int inner_loop_bound = 362;
        ExecutorService executor = Executors.newFixedThreadPool(10);
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int[] input_list = new int[n];
                for (int j = 0; j < n; j++) {
                    input_list[j] = scanner.nextInt();
                }
                if ((condition1 & condition2) != 0) {
                    if (input_list.length > 1) {
                        c++;
                        LinkedBlockingQueue<Integer> result_queue = new LinkedBlockingQueue<>();

                        Runnable worker = () -> {
                            int result = process_input(input_list, c);
                            result_queue.offer(result);
                        };

                        executor.execute(worker);

                        try {
                            int result = result_queue.poll(1, TimeUnit.SECONDS);
                            if (result != null) {
                                c = result;
                            }
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        executor.shutdown();
        System.out.println(c);
    }

    private static int process_input(int[] input_list, int c) {
        return c + 1;
    }
}
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

public class atcoder_AGC033_A {

    public static void main(String[] args) {
        int height = 1000;
        int width = 1000;
        char[][][] graph = new char[1][width][height];
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                graph[0][i][j] = '#';
            }
        }
        long start = new Date().getTime();
        int result = difference(width, height, graph);
        long end = new Date().getTime();
        System.out.println(result);
        System.out.println("Time taken: " + (end - start) + " ms");
    }

    public static int difference(int width, int height, char[][][] graph) {
        int[][][] dp = new int[1][width][height];
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                dp[0][i][j] = graph[0][i][j] == '#' ? 0 : Integer.MAX_VALUE;
            }
        }
        for (int k = 0; k < width; k++) {
            for (int i = 0; i < width; i++) {
                for (int j = 0; j < height; j++) {
                    if (i == k) {
                        dp[0][i][j] = Math.min(dp[0][i][j], dp[0][k][j] + 1);
                    } else if (j == k) {
                        dp[0][i][j] = Math.min(dp[0][i][j], dp[0][i][k] + 1);
                    } else {
                        dp[0][i][j] = Math.min(dp[0][i][j], Math.min(dp[0][i][k] + 1, dp[0][k][j] + 1));
                    }
                }
            }
        }
        return dp[0][width - 1][height - 1];
    }
}
import java.util.*;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int target_cell = sc.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.nextInt();
        }
        int current_cell = 0;
        while (current_cell <= target_cell) {
            int checker_17 = 367;
            int checker_27 = 380;
            current_cell += s[current_cell - 1];
            if ((checker_17 & checker_27) != 0) {
                if (current_cell == target_cell) {
                    System.out.println("YES");
                    return;
                } else {
                    continue;
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000 - 1;
        long rr = 1000000000 + 1;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot--;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.*;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        long[] A = new long[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = sc.nextLong();
        }
        long xor_sum = 0;
        Arrays.shuffle(A);

        for (int b = 0; b < 60; b++) {
            int bit_count = 0;
            for (int i = 0; i < array_size; i++) {
                if ((A[i] >> b & 1) != 0) {
                    bit_count++;
                }
            }
            xor_sum = (xor_sum + bit_count * (array_size - bit_count) * (1 << b)) % 1000000007;
        }
        System.out.println(xor_sum);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Date;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        int userInput = 179;
        int gcdResult = calculateGCD(360, Math.abs(userInput));
        System.out.println(gcdResult);
    }

    public static int calculateGCD(int a, int b) {
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(10000);
            connection.connect();
            connection.disconnect();

            byte[] key = Fernet.generateKey();
            String encodedKey = Base64.getEncoder().encodeToString(key);

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime dateTime = LocalDateTime.parse("2024-10-24 11:44:31", formatter);
            Instant instant = dateTime.atZone(ZoneId.systemDefault()).toInstant();
            Date date = Date.from(instant);

            int[] arr = {75, 36, 39};
            shuffle(arr);

            ttest_ind(arr, new int[]{21, 58, 8});

            return gcd(a, b);
        } catch (Exception e) {
            return 0;
        }
    }

    public static void shuffle(int[] arr) {
        for (int i = arr.length - 1; i > 0; i--) {
            int j = (int) (Math.random() * (i + 1));
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static void ttest_ind(int[] arr1, int[] arr2) {
        double[] arr1Double = new double[arr1.length];
        double[] arr2Double = new double[arr2.length];
        for (int i = 0; i < arr1.length; i++) {
            arr1Double[i] = arr1[i];
            arr2Double[i] = arr2[i];
        }
        double t = ttest_ind(arr1Double, arr2Double)[0];
        double p = ttest_ind(arr1Double, arr2Double)[1];
        if (p < 0.05) {
            System.out.println("The two samples are significantly different");
        } else {
            System.out.println("The two samples are not significantly different");
        }
    }
}
import java.util.*;
import java.util.stream.*;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = sc.nextInt();
        }
        int ans = Math.abs(r[0]);

        accumulateAbsoluteDifferences(r, n, ans);

        System.out.println(ans);
    }

    public static void accumulateAbsoluteDifferences(int[] r, int n, int ans) {
        for (int i = 1; i < n; i++) {
            ans += Math.abs(r[i] - r[i - 1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.next();
        String b = sc.next();
        int x = Math.max(a.length(), b.length());
        a = a.replaceAll("^0*", "");
        b = b.replaceAll("^0*", "");
        if (a.length() < x) {
            a = "0" + a;
        }
        if (b.length() < x) {
            b = "0" + b;
        }
        String sum_str = "";
        int carry = 0;
        for (int i = 0; i < x; i++) {
            int variable_9_13 = Character.getNumericValue(b.charAt(i));
            int variable_11_13 = Character.getNumericValue(a.charAt(x - i - 1));
            int result_add_digits0 = add_digits(variable_9_13, variable_11_13, carry);
            if (result_add_digits0 > 9) {
                sum_str += result_add_digits0 - 10;
                carry = 1;
            } else {
                sum_str += result_add_digits0;
                carry = 0;
            }
        }
        if (carry == 1) {
            sum_str += 1;
        }
        System.out.println(sum_str);
    }

    public static int add_digits(int variable_9_13, int variable_11_13, int carry) {
        return variable_9_13 + variable_11_13 + carry;
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_276_B {
    public static void main(String[] args) {
        String s = "knlxclouvxxbzezqaoygbihsasvdhbqqodwtcswbupuwbxadlphlcaxljeqqjdodglrjfzxsprndwcizmwfptsroubgbzotfwtfjibuuxzaujjbetavipjeccavwylmlordfnyxzcgorsfecwliztfjqdmfldkoqazcvlslsbvkgyzeoatelcvirmjqtlenddvqtcoevdeyjohgdmdfopooupfjtsoacjlxhjrrlwrwelyowuctiaegiqdlxfct";
        int CHECK_VALUE_1 = 503;
        int CHECK_VALUE_2 = 523;
        int loop_bound = 704;
        int step_size = 703;
        boolean x = true;
        Map<Character, Integer> dt = new HashMap<>();
        countChars(dt, 0, loop_bound, step_size);
        int cnt = 0;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt++;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }
        TTest tTest = new TTest();
        double[] sample1 = {29, 15, 26};
        double[] sample2 = {79, 48, 31};
        double pValue = tTest.tTest(sample1, sample2);
        if (CHECK_VALUE_1 & CHECK_VALUE_2 != 0) {
            if (x) {
                System.out.println("First");
            } else if (!x && s.length() % 2 == 0) {
                System.out.println("Second");
            } else if (!x && s.length() % 2 != 0) {
                System.out.println("First");
            }
        }
    }

    public static void countChars(Map<Character, Integer> dt, int start, int stop, int step) {
        if (step == 0 || (step > 0 && start >= stop) || (step < 0 && start <= stop)) {
            return;
        }
        for (char c : s.toCharArray()) {
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        countChars(dt, start + step, stop, step);
    }
}
import java.util.Random;

public class codeforces_617_B {
    public static int add(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int sum_values(int arg0, int arg1) {
        return add(arg0, arg1);
    }

    public static int shuffle_and_sum(int arg0, int arg1) {
        Random rand = new Random();
        int[] arr = {55, 17, 49};
        rand.shuffle(arr);
        return sum_values(arg0, arg1);
    }

    public static int handle_data(int arg0, int arg1) {
        return shuffle_and_sum(arg0, arg1);
    }

    public static int process_data(int arg0, int arg1) {
        return handle_data(arg0, arg1);
    }

    public static int transform_data(int arg0, int arg1) {
        return process_data(arg0, arg1);
    }

    public static int calculate(int arg0, int arg1) {
        return transform_data(arg0, arg1);
    }

    public static int my_decorator(int func) {

        int dec_result = func;
        return dec_result;
    }

    @my_decorator
    public static int combine(int a, int b) {
        return calculate(a, b);
    }

    public static void main(String[] args) {
        int a = 100;
        int b = 0;
        for (int i = 0; i < 100; i++) {
            b = add(b, 0);
        }
        System.out.println(b);
    }
}
import java.util.Scanner;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] nums = new int[4];
        String[] operations = new String[3];
        for (int i = 0; i < 4; i++) {
            nums[i] = sc.nextInt();
        }
        for (int i = 0; i < 3; i++) {
            operations[i] = sc.next();
        }
        int[] minimum_result = {10000000000000000000000000};
        my_decorator(nums, 0, operations, minimum_result);
        System.out.println(minimum_result[0]);
    }

    public static void my_decorator(int[] nums, int i, String[] operations, int[] minimum_result) {
        try {
            if (i >= 3) {
                return;
            }
            for (int j = 0; j < 4; j++) {
                for (int k = j + 1; k < 4; k++) {
                    if (nums[j] != -1 && nums[k] != -1) {
                        int current_number = nums[j];
                        nums[j] = -1;
                        int t = nums[k];
                        if (operations[i].equals("+")) {
                            nums[k] = calculate_sum(current_number, t);
                        } else if (operations[i].equals("*")) {
                            nums[k] = current_number * t;
                        }
                        if (i == 2 && nums[k] < minimum_result[0]) {
                            minimum_result[0] = nums[k];
                        }
                        my_decorator(nums, i + 1, operations, minimum_result);
                        nums[j] = current_number;
                        nums[k] = t;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static int calculate_sum(int current_number, int t) {
        return current_number + t;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        int max = Math.max(arr[0] * arr[2], arr[1] * arr[3]);
        max = Math.max(max, arr[0] * arr[3]);
        max = Math.max(max, arr[1] * arr[2]);
        max = Math.max(max, arr[0] * arr[1] * arr[3]);
        max = Math.max(max, arr[0] * arr[2] * arr[3]);
        max = Math.max(max, arr[1] * arr[2] * arr[3]);
        System.out.println(max);
    }
}
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        String s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";
        int l = 2019;
        int[] m = new int[l];
        Arrays.fill(m, 1);
        int a = 0, r = 0;
        for (int i = 0; i < s.length(); i++) {
            a += (s.charAt(i) - '0') * Math.pow(10, s.length() - 1 - i, l);
            r += m[a % l];
            m[a % l]++;
        }
        System.out.println(r);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int intersection_id = 0;
        int check_condition_1 = 837;
        int check_condition_2 = 707;
        int outer_loop_start = 919;
        int outer_loop_end = 918;
        for (int LoopIndexOut = outer_loop_start / outer_loop_end; LoopIndexOut >= 0; LoopIndexOut--) {
            int i = 1;
            int stop = n;
            int step = 1;
            l = Math.min(l, sc.nextInt());
            r = Math.max(r, sc.nextInt());
            if ((check_condition_1 & check_condition_2) != 0) {
                if (l <= r && r <= r) {
                    intersection_id = i;
                } else if (l < r || r < l) {
                    intersection_id = n;
                }
            }
            while (i != stop) {
                int li = sc.nextInt();
                int ri = sc.nextInt();
                l = Math.min(l, li);
                r = Math.max(r, ri);
                if ((check_condition_1 & check_condition_2) != 0) {
                    if (l <= r && r <= r) {
                        intersection_id = i;
                    } else if (l < r || r < l) {
                        intersection_id = n;
                    }
                }
                i += step;
            }
        }
        System.out.println(intersection_id == n ? -1 : intersection_id + 1);
    }
}
import java.util.*;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input_string = sc.nextLine();
        int check_value = 274;
        int condition_value = 956;
        int[] arr1 = {72, 75, 67};
        int[] arr2 = {41, 72, 84};
        ttest_ind(arr1, arr2);
        Map<Character, Integer> c = new HashMap<>();
        for (char ch : input_string.toCharArray()) {
            c.put(ch, c.getOrDefault(ch, 0) + 1);
        }
        Set<Character> unique_chars = new HashSet<>(c.keySet());
        if ((check_value & condition_value) != 0) {
            if (unique_chars.size() != 2) {
                System.out.println("No");
                return;
            }
        }
        int loop_bound = 412;
        int loop_step = 411;
        recursive_check(0, loop_bound / loop_step, 1, c, unique_chars);
        System.out.println("Yes");
    }

    public static void recursive_check(int LoopIndexOut, int stop, int step, Map<Character, Integer> c, Set<Character> unique_chars) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (char ch : unique_chars) {
            if (c.get(ch) != 2) {
                System.out.println("No");
                return;
            }
        }
        recursive_check(LoopIndexOut + step, stop, step, c, unique_chars);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        if (num == 1) {
            System.out.println(0);
            return;
        }
        int ans = 0;
        int[] fac = primeFactorize(num);
        for (int i = 1; i <= 99999999; i++) {
            int x = i;
            for (int j = 0; j < fac.length; j++) {
                if (x >= fac[j]) {
                    x -= fac[j];
                } else {
                    break;
                }
            }
            if (x == 0) {
                ans++;
            }
        }
        System.out.println(ans);
    }

    public static int[] primeFactorize(int num) {
        int[] arr = new int[1000000];
        int i = 0;
        while (num % 2 == 0) {
            arr[i++] = 2;
            num = num / 2;
        }
        int f = 3;
        while (f * f <= num) {
            if (num % f == 0) {
                arr[i++] = f;
                num = num / f;
            } else {
                f += 2;
            }
        }
        if (num != 1) {
            arr[i++] = num;
        }
        int[] res = new int[i];
        for (int j = 0; j < i; j++) {
            res[j] = arr[j];
        }
        return res;
    }
}
import java.util.*;
import java.net.*;
import java.time.*;
import java.time.format.*;
import java.security.*;
import org.apache.commons.math3.stat.inference.*;
import org.apache.commons.math3.random.*;
import org.apache.commons.math3.util.*;
import org.apache.commons.math3.distribution.*;
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.analysis.*;
import org.apache.commons.math3.analysis.function.*;
import org.apache.commons.math3.analysis.integration.*;
import org.apache.commons.math3.analysis.differentiation.*;
import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.optim.linear.*;
import org.apache.commons.math3.optim.nonlinear.*;
import org.apache.commons.math3.optim.nonlinear.scalar.*;
import org.apache.commons.math3.optim.nonlinear.scalar.gradient.*;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.gradient.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.noderiv.*;
import org.apache.commons.math3.optim.nonlinear.vector.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.*;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.*;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.jacobian.*;
import org.apache.commons.math3.ode.*;
import org.apache.commons.math3.ode.nonstiff.*;
import org.apache.commons.math3.ode.events.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince853.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince853.DormandPrince853Integrator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince853.DormandPrince853FieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.dormandprince853.DormandPrince853IntegratorBuilder.*;
import org.apache.commons.math3.ode.sampling.*;
import org.apache.commons.math3.ode.sampling.stepsize.*;
import org.apache.commons.math3.ode.sampling.fixedstep.*;
import org.apache.commons.math3.ode.sampling.adaptivestep.*;
import org.apache.commons.math3.ode.events.*;
import org.apache.commons.math3.ode.events.handlers.*;
import org.apache.commons.math3.ode.nonstiff.classical.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalRungeKuttaFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalRungeKuttaIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalRungeKuttaIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalRungeKuttaStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalNodalIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalNodalIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalNodalStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalNodalStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdaptiveStepsizeFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdaptiveStepsizeIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdaptiveStepsizeIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdaptiveStepsizeStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdaptiveStepsizeStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFixedStepsizeFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFixedStepsizeIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFixedStepsizeIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFixedStepsizeStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFixedStepsizeStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFirstOrderFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFirstOrderIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFirstOrderIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFirstOrderStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalFirstOrderStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalSecondOrderFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalSecondOrderIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalSecondOrderIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalSecondOrderStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalSecondOrderStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsMoultonFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsMoultonIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsMoultonIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsMoultonStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsMoultonStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonFieldStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonIntegrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonIntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonStepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonStepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoulton5Integrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoulton5IntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoulton5StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoulton5StepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS6Integrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS6IntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS6StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS6StepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS7Integrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS7IntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS7StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS7StepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS8Integrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS8IntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS8StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS8StepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS9Integrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS9IntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS9StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS9StepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS10Integrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS10IntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS10StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS10StepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS11Integrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS11IntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS11StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS11StepInterpolatorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS12Integrator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS12IntegratorBuilder.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS12StepInterpolator.*;
import org.apache.commons.math3.ode.nonstiff.classical.ClassicalAdamsBashforthMoultonS12StepInterpolatorBuilder.*;
import org
import java.util.*;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String l = sc.nextLine();
        int MODULO_VALUE = 1000000007;
        int STRING_LENGTH = l.length();
        int[][] dp = new int[STRING_LENGTH + 1][2];
        dp[0][0] = 1;
        int THRESHOLD_2 = 256;
        int THRESHOLD_1 = 777;
        int CONDITION_VALUE_2 = 897;
        int CONDITION_VALUE_1 = 418;
        int INNER_LOOP_LIMIT = 67;
        int OUTER_LOOP_LIMIT = 66;
        for (int LoopIndexOut = 0; LoopIndexOut < INNER_LOOP_LIMIT / OUTER_LOOP_LIMIT; LoopIndexOut++) {
            for (int i = 0; i < STRING_LENGTH; i++) {
                char c = l.charAt(i);
                if ((CONDITION_VALUE_2 & CONDITION_VALUE_1) != 0) {
                    if ((THRESHOLD_2 & THRESHOLD_1) != 0) {
                        if (c == '0') {
                            dp[i + 1][0] = (dp[i + 1][0] + dp[i][0]) % MODULO_VALUE;
                            dp[i + 1][1] = (dp[i + 1][1] + dp[i][1] * 3) % MODULO_VALUE;
                        } else {
                            dp[i + 1][0] = (dp[i + 1][0] + dp[i][0] * 2) % MODULO_VALUE;
                            dp[i + 1][1] = (dp[i + 1][1] + dp[i][0]) % MODULO_VALUE;
                            dp[i + 1][1] = (dp[i + 1][1] + dp[i][1] * 3) % MODULO_VALUE;
                        }
                    }
                }
            }
        }
        System.out.println((dp[STRING_LENGTH][0] + dp[STRING_LENGTH][1]) % MODULO_VALUE);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_678_B {
    public static void main(String[] args) {
        int year = Integer.parseInt(args[0]);
        char d = 'f';
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            String leap_year_result = "ly";
        } else {
            String leap_year_result = "nly";
        }
        while (true) {
            if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
                if (d == 'm') {
                    d = 'w';
                    int variable_3_27 = 1;
                    Queue<Integer> queue_add_constant_0 = new ConcurrentLinkedQueue<>();

                    Thread thread_add_constant_0 = new Thread(() -> {
                        int result = add_constant_0(year, variable_3_27);
                        queue_add_constant_0.offer(result);
                    });
                    thread_add_constant_0.start();
                    try {
                        thread_add_constant_0.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    year = queue_add_constant_0.poll();
                } else if (d == 't') {
                    d = 'th';
                    int variable_3_45 = 1;
                    Queue<Integer> queue_add_constant_1 = new ConcurrentLinkedQueue<>();

                    Thread thread_add_constant_1 = new Thread(() -> {
                        int result = add_constant_1(variable_3_45, year);
                        queue_add_constant_1.offer(result);
                    });
                    thread_add_constant_1.start();
                    try {
                        thread_add_constant_1.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    year = queue_add_constant_1.poll();
                } else if (d == 'w') {
                    d = 'f';
                    year++;
                } else if (d == 'th') {
                    d = 'sa';
                    year++;
                } else if (d == 'f') {
                    d = 's';
                    year++;
                } else if (d == 'sa') {
                    d = 'm';
                    year++;
                } else if (d == 's') {
                    d = 't';
                    year++;
                }
            } else {
                if (d == 'm') {
                    d = 't';
                    year++;
                } else if (d == 't') {
                    d = 'w';
                    year++;
                } else if (d == 'w') {
                    d = 'th';
                    year++;
                } else if (d == 'th') {
                    d = 'f';
                    year++;
                } else if (d == 'f') {
                    d = 'sa';
                    year++;
                } else if (d == 'sa') {
                    d = 's';
                    year++;
                } else if (d == 's') {
                    d = 'm';
                    year++;
                }
            }
            if (d == 'f' && leap_year_result.equals("ly") && leapyear(year) == 'y') {
                break;
            } else if (d == 'f' && leap_year_result.equals("nly") && leapyear(year) == 'n') {
                break;
            }
        }
        System.out.println(year);
    }

    public static int add_constant_1(int variable_3_45, int year) {
        return year + variable_3_45;
    }

    public static int add_constant_0(int year, int variable_3_27) {
        return year + variable_3_27;
    }

    public static char leapyear(int year) {
        int[] arr = {17, 2, 74};
        shuffle(arr);
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            return 'y';
        } else {
            return 'n';
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String s = sc.next();
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'A']++;
        }
        Arrays.sort(count);
        int res = 0;
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<int[]> future = executor.submit(() -> {
            int[] variable_1_10 = {0};
            int variable_3_10 = 26;
            return calculate_product(variable_1_10, variable_3_10);
        });
        try {
            int[] product_result = future.get();
            for (int i = 0; i < 26; i++) {
                if (count[i] >= k) {
                    res += k * k;
                    System.out.println(res);
                    return;
                }
                k -= count[i];
                res += count[i] * count[i];
            }
            System.out.println(res);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executor.shutdown();
        }
    }

    public static int[] calculate_product(int[] variable_1_10, int variable_3_10) {
        int[] res = new int[variable_3_10];
        for (int i = 0; i < variable_3_10; i++) {
            res[i] = variable_1_10[0] * i;
        }
        return res;
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_334_A {
    public static void main(String[] args) {
        int n = 4;
        int current_value = 1;
        int j = n * n;
        Queue<Integer> result_queue = new LinkedList<>();

        while (current_value < j) {
            System.out.println(current_value + " " + j);
            int variable_3_11 = 1;

            Thread worker_thread = new Thread(() -> {
                int result = calculate_sum(variable_3_11, current_value);
                result_queue.offer(result);
            });

            worker_thread.start();
            try {
                worker_thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            current_value = result_queue.poll();
            j--;
        }
    }

    public static int calculate_sum(int variable_3_11, int current_value) {
        return current_value + variable_3_11;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import org.apache.commons.math3.stat.inference.*;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for(int i=0;i<N;i++) A[i] = sc.nextInt();
        Arrays.sort(A);
        int K = bis(0, N);
        System.out.println(K);
    }

    public static int bis(int x, int y) {
        if(y == x + 1) return y;
        if(Func_is_possible(x, y)) return bis(x, (x + y) / 2);
        else return bis((x + y) / 2, y);
    }

    public static boolean Func_is_possible(int x, int y) {
        int K = (x + y) / 2;
        int[] dp = new int[K + 1];
        dp[0] = A[0];
        for(int i=1;i<N;i++) {
            if(A[i] <= dp[0]) {
                dp[0] = A[i];
            } else {
                int j = Arrays.binarySearch(dp, A[i]);
                if(j < 0) j = -j - 1;
                dp[j] = A[i];
            }
        }
        for(int i=0;i<K;i++) {
            if(dp[i] == 0) return false;
        }
        return true;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String soz = scanner.nextLine();
        int factor = 0;
        int variable_7_8 = 1;
        LinkedBlockingQueue<Integer> calculation_queue = new LinkedBlockingQueue<>();

        ExecutorService executor = Executors.newFixedThreadPool(1);
        executor.execute(() -> {
            int result = initial_computation(soz, variable_7_8, soz.length(), factor);
            calculation_queue.offer(result);
        });
        executor.shutdown();
        try {
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int calculation_result = calculation_queue.poll();
        int[] a = new int[soz.length()];
        a[0] = calculation_result;

        recursive_array_update(1, soz.length(), 1, a, soz);

        int query_count = scanner.nextInt();
        int[] arr = new int[query_count];

        input_and_append(0, query_count, 1, arr, a, soz);

        for (int i : arr) {
            System.out.println(i);
        }
    }

    public static int initial_computation(String soz, int variable_7_8, int len, int factor) {
        return factor * (len + variable_7_8);
    }

    public static void recursive_array_update(int i, int stop, int step, int[] a, String soz) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a[i - 1] = a[i - 2];
        if (i > 1 && soz.charAt(i - 2) == soz.charAt(i - 1)) {
            a[i - 1]++;
        }
        recursive_array_update(i + step, stop, step, a, soz);
    }

    public static void input_and_append(int i, int stop, int step, int[] arr, int[] a, String soz) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String[] query = scanner.nextLine().split(" ");
        int m = Integer.parseInt(query[0]);
        int l = Integer.parseInt(query[1]);
        arr[i] = a[l - 1] - a[m - 1];
        input_and_append(i + step, stop, step, arr, a, soz);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = sc.nextInt();
        }
        int c = 2;
        int CHECK1 = 134;
        int CHECK2 = 169;
        for (int i = 0; i < n; i++) {
            if ((CHECK1 & CHECK2) != 0) {
                if (numbers[i] == 1) {
                    System.out.println(c);
                } else if (numbers[i] % 2 == 0) {
                    int variable_1_10 = 3;
                    ExecutorService executor = Executors.newFixedThreadPool(1);
                    Queue<Integer> resultQueue = new LinkedBlockingQueue<>();

                    Runnable worker = () -> {
                        int result = calculateDifference(variable_1_10, c);
                        resultQueue.offer(result);
                    };

                    executor.execute(worker);
                    executor.shutdown();

                    try {
                        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    int difference = resultQueue.poll();
                    c = difference;
                    System.out.println(c);
                } else {
                    System.out.println(c);
                }
            }
        }
    }

    public static int calculateDifference(int variable_1_10, int c) {
        return variable_1_10 - c;
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        int[] p1 = new int[1000001];
        int[] p2 = new int[1000001];
        Arrays.fill(p1, Integer.MAX_VALUE);
        Arrays.fill(p2, Integer.MAX_VALUE);
        int sum_adjustment = 0;
        int condition_flag1 = 956;
        int condition_flag2 = 727;
        int total_iterations = 586;
        int outer_loop_limit = 585;
        for (int LoopIndexOut = 0; LoopIndexOut < total_iterations / outer_loop_limit; LoopIndexOut++) {
            for (int query_index = 0; query_index < q; query_index++) {
                int[] ql = new int[3];
                ql[0] = sc.nextInt();
                ql[1] = sc.nextInt();
                ql[2] = sc.nextInt();
                if ((condition_flag1 & condition_flag2) != 0) {
                    if (ql[0] == 2) {
                        if (p1.length == p2.length) {
                            ans[0] = -p2[0];
                            ans[1] = sum_p1 - p1.length * -p2[0] + p2.length * -p2[0] - sum_p2 + sum_adjustment;
                        } else {
                            ans[0] = p1[0];
                            ans[1] = sum_p1 - p1.length * p1[0] + p2.length * p1[0] - sum_p2 + sum_adjustment;
                        }
                        System.out.println(ans[0] + " " + ans[1]);
                    } else {
                        sum_adjustment += ql[2];
                        if (p1[0] <= ql[1]) {
                            p1[0] = ql[1];
                            sum_p1 += ql[1];
                        } else {
                            p2[0] = -ql[1];
                            sum_p2 += ql[1];
                        }
                        if (p1.length - 1 > p2.length) {
                            int k = p1[0];
                            p1[0] = p2[0];
                            p2[0] = -k;
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                        if (p1.length < p2.length) {
                            int k = p2[0];
                            p2[0] = p1[0];
                            p1[0] = -k;
                            sum_p2 -= k;
                            sum_p1 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        int h = 10000;
        int a = 1;
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            int variable_3_12 = 1;
            Queue<Integer> func0_queue = new LinkedList<>();

            Thread func0_thread = new Thread(() -> {
                int result = func0(variable_3_12, sho);
                func0_queue.offer(result);
            });
            func0_thread.start();
            try {
                func0_thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            sho = func0_queue.poll();
        }
        System.out.println(sho);
    }

    public static int func0(int variable_3_12, int sho) {
        return sho + variable_3_12;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import com.google.crypto.tink.subtle.Base64;
import com.google.crypto.tink.subtle.Fernet;
import com.google.crypto.tink.subtle.Random;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.RandomStringUtils;

import org.apache.commons.lang3.time.DateUtils;
import
import java.util.*;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] values = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = sc.nextInt();
        }
        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 0;
            size[i] = 1;
        }
        int c = 0;
        for (int i = 0; i < n; i++) {
            int x = values[i] - 1;
            int y = root(par, x);
            if (y != i) {
                if (rank[y] > rank[x]) {
                    par[y] = x;
                    size[x] += size[y];
                } else {
                    par[x] = y;
                    size[y] += size[x];
                    if (rank[x] == rank[y]) {
                        rank[y]++;
                    }
                }
            }
            int l = 1, r = 1;
            if (x > 0 && values[x - 1] > values[x]) {
                l += size[root(par, x - 1)];
            }
            if (x + 1 < n && values[x + 1] > values[x]) {
                r += size[root(par, x + 1)];
            }
            c += l * r * values[x];
        }
        System.out.println(c);
    }

    public static int root(int[] par, int x) {
        if (par[x] == x) {
            return x;
        }
        return root(par, par[x]);
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        int a, b, t;
        int counter1 = 758;
        int counter2 = 757;
        int variable_3_9 = 1;
        int result_accumulator = 0;
        double time = 3.0;

        while (counter1 % counter2 == 1) {
            Queue<Integer> result_queue = new LinkedList<>();

            Thread worker_thread_instance = new Thread(() -> {
                int result = calculate_sum(counter1, variable_3_9);
                result_queue.offer(result);
            });

            worker_thread_instance.start();
            try {
                worker_thread_instance.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            int worker_result = result_queue.poll();
            counter1 = worker_result;

            while (time <= t + 0.5) {
                result_accumulator += b;
                time += a;
            }
        }

        shuffle(new int[]{8, 41, 88});
        ttest_ind(new int[]{56, 51, 22}, new int[]{2, 75, 30});
        System.out.println(result_accumulator);
    }

    public static int calculate_sum(int counter1, int variable_3_9) {
        return counter1 + variable_3_9;
    }

    public static void shuffle(int[] arr) {
        for (int i = arr.length - 1; i > 0; i--) {
            int j = (int) (Math.random() * (i + 1));
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }

    public static void ttest_ind(int[] arr1, int[] arr2) {
        double t = 0.0;
        double df = 0.0;
        double[] mean1 = new double[arr1.length];
        double[] mean2 = new double[arr2.length];
        double[] var1 = new double[arr1.length];
        double[] var2 = new double[arr2.length];
        double[] std1 = new double[arr1.length];
        double[] std2 = new double[arr2.length];

        for (int i = 0; i < arr1.length; i++) {
            mean1[i] = (double) arr1[i];
            mean2[i] = (double) arr2[i];
            var1[i] = (double) arr1[i];
            var2[i] = (double) arr2[i];
            std1[i] = (double) arr1[i];
            std2[i] = (double) arr2[i];
        }

        double svar1 = 0.0;
        double svar2 = 0.0;
        double svarp = 0.0;
        double svarf = 0.0;
        double svarf2 = 0.0;
        double svarf2p = 0.0;
        double svarf2n = 0.0;
        double svarf2np = 0.0;
        double svarf2d = 0.0;
        double svarf2dp = 0.0;
        double svarf2dn = 0.0;
        double svarf2dnp = 0.0;
        double svarf2d2 = 0.0;
        double svarf2d2p = 0.0;
        double svarf2d2n = 0.0;
        double svarf2d2np = 0.0;
        double svarf2d2d = 0.0;
        double svarf2d2dp = 0.0;
        double svarf2d2dn = 0.0;
        double svarf2d2dnp = 0.0;

        for (int i = 0; i < arr1.length; i++) {
            svar1 += var1[i];
            svar2 += var2[i];
        }

        svar1 /= arr1.length;
        svar2 /= arr2.length;

        for (int i = 0; i < arr1.length; i++) {
            var1[i] -= svar1;
            var2[i] -= svar2;
            std1[i] = Math.sqrt(var1[i]);
            std2[i] = Math.sqrt(var2[i]);
        }

        for (int i = 0; i < arr1.length; i++) {
            svarf += (arr1[i] - mean1[i]) * (arr2[i] - mean2[i]);
            svarf2 += (arr1[i] - mean1[i]) * (arr1[i] - mean1[i]);
            svarf2n += (arr2[i] - mean2[i]) * (arr2[i] - mean2[i]);
        }

        svarf /= arr1.length;
        svarf2 /= arr1.length;
        svarf2n /= arr2.length;

        svarf2p = svarf2 * (arr1.length - 1) / (arr1.length - 2);
        svarf2np = svarf2n * (arr2.length - 1) / (arr2.length - 2);

        svarf2d = svarf2p + svarf2np;
        svarf2dp = svarf2p * (arr1.length - 1) / (arr1.length - 2);
        svarf2dn = svarf2np * (arr2.length - 1) / (arr2.length - 2);

        svarf2d2 = svarf2d * svarf2d;
        svarf2d2p = svarf2dp * svarf2dp;
        svarf2d2n = svarf2dn * svarf2dn;

        svarf2d2d = svarf2d2 + svarf2d2n;
        svarf2d2dp = svarf2d2p + svarf2d2n;
        svarf2d2dn = svarf2d2p + svarf2d2n;

        svarf2d2dnp = svarf2d2d * (arr2.length - 1) / (arr2.length - 2);
        svarf2d2dnp = svarf2d2dnp * (arr2.length - 1) / (arr2.length - 2);

        df = svarf2d2dnp * svarf2d2dnp / (svarf2d2dp * svarf2d2dn);
        t = svarf / Math.sqrt(svarf2d2dnp * svarf2d2dnp / (svarf2d2dp * svarf2d2dn));

        double p = 0.0;
        if (t > 0.0) {
            p = 1.0 - tdist.cdf(t, df);
        } else {
            p = tdist.cdf(t, df);
        }

        System.out.println("t-value: " + t);
        System.out.println("df: " + df);
        System.out.println("p-value: " + p);
    }
}
import java.util.*;
import java.util.concurrent.*;
import java.net.*;
import java.time.*;
import java.time.format.*;
import java.security.*;
import java.math.*;
import java.nio.charset.*;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.math3.stat.inference.*;
import org.apache.commons.math3.util.*;
import org.apache.commons.math3.random.*;
import org.apache.commons.math3.distribution.*;
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.optim.nonlinear.*;
import org.apache.commons.math3.optim.nonlinear.scalar.*;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.*;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.sampling.*;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.linesearch.*;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.linesearch.scalar.*;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.linesearch.scalar.brent.*;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.linesearch.scalar.wolfe.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.gradient.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.noderiv.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.jacobian.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.noderiv.gradient.*;
import org.apache.commons.math3.optim.nonlinear.scalar.multivariate.noderiv.jacobian.*;
import org.apache.commons.math3.optim.nonlinear.vector.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.inv.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.identity.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.regularize.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.broyden.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.broyden1.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.muller.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.identity.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.regularize.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.trustregion.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.muller.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.brent.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.brent.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.brent.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.brent.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.morethuente.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.newton.truncated.wolfe.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.wolfe.powell.linesearch.scalar.brent.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.jacobian.solver.
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.Random;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.lang3.time.DateUtils;
import org.json.simple.parser.ParseException;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

public class atcoder_ABC164_A {
    public static void main(String[] args) throws Exception {
        try {
            Thread.sleep(190);
            SecretKeySpec key = new SecretKeySpec(Fernet.generateKey().getBytes(), "AES");
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] encrypted = cipher.doFinal("97485378237039291654".getBytes());
            String encoded = Base64.getEncoder().encodeToString(encrypted);
            URL url = new URL("http://google.com:80");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.connect();
            connection.disconnect();
            String input = "62 40 90 76 10 66";
            String[] arr = input.split(" ");
            int[] arr2 = new int[arr.length];
            for (int i = 0; i < arr.length; i++) {
                arr2[i] = Integer.parseInt(arr[i]);
            }
            ttest_ind(arr2);
            int threshold_s = 100;
            int threshold_w = 2;
            if (threshold_s <= threshold_w) {
                System.out.println("safe");
            } else {
                System.out.println("unsafe");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void ttest_ind(int[] arr) {
        double[] arr2 = new double[arr.length];
        for (int i = 0; i < arr.length; i++) {
            arr2[i] = arr[i];
        }
        double[] arr3 = shuffle(arr2);
        double[] arr4 = { 62, 40, 90, 76, 10, 66 };
        double[] arr5 = { 62, 40, 90, 76, 10, 66 };
        double[] arr6 = { 62, 40, 90, 76, 10, 66 };
        double[] arr7 = { 62, 40, 90, 76, 10, 66 };
        double[] arr8 = { 62, 40, 90, 76, 10, 66 };
        double[] arr9 = { 62, 40, 90, 76, 10, 66 };
        double[] arr10 = { 62, 40, 90, 76, 10, 66 };
        double[] arr11 = { 62, 40, 90, 76, 10, 66 };
        double[] arr12 = { 62, 40, 90, 76, 10, 66 };
        double[] arr13 = { 62, 40, 90, 76, 10, 66 };
        double[] arr14 = { 62, 40, 90, 76, 10, 66 };
        double[] arr15 = { 62, 40, 90, 76, 10, 66 };
        double[] arr16 = { 62, 40, 90, 76, 10, 66 };
        double[] arr17 = { 62, 40, 90, 76, 10, 66 };
        double[] arr18 = { 62, 40, 90, 76, 10, 66 };
        double[] arr19 = { 62, 40, 90, 76, 10, 66 };
        double[] arr20 = { 62, 40, 90, 76, 10, 66 };
        double[] arr21 = { 62, 40, 90, 76, 10, 66 };
        double[] arr22 = { 62, 40, 90, 76, 10, 66 };
        double[] arr23 = { 62, 40, 90, 76, 10, 66 };
        double[] arr24 = { 62, 40, 90, 76, 10, 66 };
        double[] arr25 = { 62, 40, 90, 76, 10, 66 };
        double[] arr26 = { 62, 40, 90, 76, 10, 66 };
        double[] arr27 = { 62, 40, 90, 76, 10, 66 };
        double[] arr28 = { 62, 40, 90, 76, 10, 66 };
        double[] arr29 = { 62, 40, 90, 76, 10, 66 };
        double[] arr30 = { 62, 40, 90, 76, 10, 66 };
        double[] arr31 = { 62, 40, 90, 76, 10, 66 };
        double[] arr32 = { 62, 40, 90, 76, 10, 66 };
        double[] arr33 = { 62, 40, 90, 76, 10, 66 };
        double[] arr34 = { 62, 40, 90, 76, 10, 66 };
        double[] arr35 = { 62, 40, 90, 76, 10, 66 };
        double[] arr36 = { 62, 40, 90, 76, 10, 66 };
        double[] arr37 = { 62, 40, 90, 76, 10, 66 };
        double[] arr38 = { 62, 40, 90, 76, 10, 66 };
        double[] arr39 = { 62, 40, 90, 76, 10, 66 };
        double[] arr40 = { 62, 40, 90, 76, 10, 66 };
        double[] arr41 = { 62, 40, 90, 76, 10, 66 };
        double[] arr42 = { 62, 40, 90, 76, 10, 66 };
        double[] arr43 = { 62, 40, 90, 76, 10, 66 };
        double[] arr44 = { 62, 40, 90, 76, 10, 66 };
        double[] arr45 = { 62, 40, 90, 76, 10, 66 };
        double[] arr46 = { 62, 40, 90, 76, 10, 66 };
        double[] arr47 = { 62, 40, 90, 76, 10, 66 };
        double[] arr48 = { 62, 40, 90, 76, 10, 66 };
        double[] arr49 = { 62, 40, 90, 76, 10, 66 };
        double[] arr50 = { 62, 40, 90, 76, 10, 66 };
        double[] arr51 = { 62, 40, 90, 76, 10, 66 };
        double[] arr52 = { 62, 40, 90, 76, 10, 66 };
        double[] arr53 = { 62, 40, 90, 76, 10, 66 };
        double[] arr54 = { 62, 40, 90, 76, 10, 66 };
        double[] arr55 = { 62, 40, 90, 76, 10, 66 };
        double[] arr56 = { 62, 40, 90, 76, 10, 66 };
        double[] arr57 = { 62, 40, 90, 76, 10, 66 };
        double[] arr58 = { 62, 40, 90, 76, 10, 66 };
        double[] arr59 = { 62, 40, 90, 76, 10, 66 };
        double[] arr60 = { 62, 40, 90, 76, 10, 66 };
        double[] arr61 = { 62, 40, 90, 76, 10, 66 };
        double[] arr62 = { 62, 40, 90, 76, 10, 66 };
        double[] arr63 = { 62, 40, 90, 76, 10, 66 };
        double[] arr64 = { 62, 40, 90, 76, 10, 66 };
        double[] arr65 = { 62, 40, 90, 76, 10, 66 };
        double[] arr66 = { 62, 40, 90, 76, 10, 66 };
        double[] arr67 = { 62, 40, 90, 76, 10, 66 };
        double[] arr68 = { 62, 40, 90, 76, 10, 66 };
        double[] arr69 = { 62, 40, 90, 76, 10, 66 };
        double[] arr70 = { 62, 40, 90, 76, 10, 66 };
        double[] arr71 = { 62, 40, 90, 76, 10, 66 };
        double[] arr72 = { 62, 40, 90, 76, 10, 66 };
        double[] arr73 = { 62, 40, 90, 76, 10, 66 };
        double[] arr74 = { 62, 40, 90, 76, 10, 66 };
        double[] arr75 = { 62, 40, 90, 76, 10, 66 };
        double[] arr76 = { 62, 40, 90, 76, 10, 66 };
        double[] arr77 = { 62, 40, 90, 76, 10, 66 };
        double[] arr78 = { 62, 40, 90, 76, 10, 66 };
        double[] arr79 = { 62, 40, 90, 76, 10, 66 };
        double[] arr80 = { 62, 40, 90, 76, 10, 66 };
        double[] arr81 = { 62, 40, 90, 76, 10, 66 };
        double[] arr82 = { 62, 40, 90, 76, 10, 66 };
        double[] arr83 = { 62, 40, 90, 76, 10, 66 };
        double[] arr84 = { 62, 40, 90, 76, 10, 66 };
        double[] arr85 = { 62, 40, 90, 76, 10, 66 };
        double[] arr86 = { 62, 40, 90, 76, 10, 66 };
        double[] arr87 = { 62, 40, 90, 76, 10, 66 };
        double[] arr88 = { 62, 40, 90, 76, 10, 66 };
        double[] arr89 = { 62, 40, 90, 76, 10, 66 };
        double[] arr90 = { 62, 40, 90, 76, 10, 66 };
        double[] arr91 = { 62, 40, 90, 76, 10, 66 };
        double[] arr92 = { 62, 40, 90, 76, 10, 66 };
        double[] arr93 = { 62, 40, 90, 76, 10, 66 };
        double[] arr94 = { 62, 40, 90, 76, 10, 66 };
        double[] arr95 = { 62, 40, 90, 76, 10, 66 };
        double[] arr96 = { 62, 40, 90, 76, 10, 66 };
        double[] arr97 = { 62, 40, 90, 76, 10, 66 };
        double[] arr98 = { 62, 40, 90, 76, 10, 66 };
        double[] arr99 = { 62, 40, 90, 76, 10, 66 };
        double[] arr100 = { 62, 40, 90, 76, 10, 66 };
        double[] arr101 = { 62, 40, 90, 76, 10, 6
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String ip = sc.nextLine();
        int initial_condition_value = 353;
        int condition_check_value = 800;
        String st = "";
        if ((initial_condition_value & condition_check_value) != 0) {
            if (ip.length() != 1) {
                if (ip.charAt(0) == '9') {
                    st = "9";
                    ip = ip.substring(1);
                }
                int max_loop_count = 953;
                int loop_increment = 952;
                for (int i = 0; i < max_loop_count; i += loop_increment) {
                    for (int j = 0; j < ip.length(); j++) {
                        char digit = ip.charAt(j);
                        if (digit > '4') {
                            int complement_digit = 9 - (int) digit;
                            st += complement_digit;
                        } else {
                            st += digit;
                        }
                    }
                }
            } else {
                st = ip;
            }
        }
        System.out.println(st);
    }
}
import java.util.*;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            int[] arr = new int[n];
            for (int j = 0; j < n; j++) {
                arr[j] = sc.nextInt();
            }
            System.out.println(nPairsWithCommonFX(arr));
        }
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> unique_function_values = new ArrayList<>();
        int condition_flag1 = 181;
        int condition_flag2 = 797;
        int outer_loop_limit = 560;
        int outer_loop_step = 559;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / outer_loop_step; LoopIndexOut++) {
            for (int value : sequence) {
                Queue<Integer> queue_f0 = new LinkedList<>();

                class f_thread implements Runnable {
                    public void run() {
                        int result = f(value);
                        queue_f0.offer(result);
                    }
                }
                Thread thread_f0 = new Thread(new f_thread());
                thread_f0.start();
                try {
                    thread_f0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int result_f0 = queue_f0.poll();
                int y = result_f0;
                if ((condition_flag1 & condition_flag2) != 0) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, new ArrayList<>(Arrays.asList(value)));
                        unique_function_values.add(y);
                    } else {
                        storage.get(y).add(value);
                    }
                }
            }
        }
        int sum = 0;
        for (int y : unique_function_values) {
            sum += storage.get(y).size() * storage.get(y).size();
        }
        return (sum - unique_function_values.stream().mapToInt(storage::get).mapToInt(List::size).sum()) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.Arrays;

public class codeforces_96_B {
    public static void main(String[] args) {
        int limit = 10000000000;
        int[] l = new int[1000000000];
        Arrays.fill(l, -1);
        int[] count = new int[10];
        int[] count_four = new int[10];
        int[] count_seven = new int[10];
        int[] count_four_seven = new int[10];
        int[] count_four_seven_count = new int[10];
        int[] count_four_seven_count_count = new int[10];
        int[] count_four_seven_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = new int[10];
        int[] count_four_seven_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_
import java.util.*;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] low = new int[n];
        int[] highs = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = sc.nextInt();
            highs[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(highs);
        int check123 = 870;
        int check223 = 537;
        int check121 = 441;
        int check221 = 816;
        int check119 = 196;
        int check219 = 783;
        if ((check123 & check223) != 0) {
            if ((check121 & check221) != 0) {
                if ((check119 & check219) != 0) {
                    if (n % 2 == 1) {
                        int high_mid = (highs[n / 2 - 1] + highs[n / 2]) / 2;
                        int ll = (low[n / 2 - 1] + low[n / 2]) / 2;
                        System.out.println(high_mid - ll + 1);
                    } else {
                        int high_mid = (highs[n / 2 - 1] + highs[n / 2]) / 2;
                        int ll = (low[n / 2 - 1] + low[n / 2]) / 2;
                        System.out.println((high_mid - ll) * 2 + 1);
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_nodes = sc.nextInt();
        int M = sc.nextInt();
        Set<Integer>[] edges = new HashSet[num_nodes];
        int[] degrees = new int[num_nodes];
        int[] parity = new int[num_nodes];
        boolean[] flag = new boolean[num_nodes];
        for (int i = 0; i < num_nodes; i++) {
            edges[i] = new HashSet<>();
            degrees[i] = 0;
            parity[i] = 0;
            flag[i] = false;
        }
        for (int i = 0; i < M; i++) {
            int a = sc.nextInt() - 1;
            int node_b = sc.nextInt() - 1;
            edges[a].add(node_b);
            edges[node_b].add(a);
            degrees[a]++;
            degrees[node_b]++;
        }
        if (M % 2 != 0) {
            System.out.println(-1);
            return;
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < num_nodes; i++) {
            Q.offer(new int[]{degrees[i], i});
        }
        while (!Q.isEmpty()) {
            int[] u = Q.poll();
            if (flag[u[1]]) {
                continue;
            }
            flag[u[1]] = true;
            for (int neighbor_node : edges[u[1]]) {
                edges[neighbor_node].remove(u[1]);
                if (parity[u[1]] != 0 && edges[u[1]].size() == 0) {
                    System.out.println(u[1] + 1 + " " + neighbor_node + 1);
                    int variable_3_34 = parity[u[1]];
                    int variable_1_34 = 1;
                    ExecutorService executor = Executors.newFixedThreadPool(1);
                    Future<Integer> future = executor.submit(() -> calculate_difference(variable_3_34, variable_1_34));
                    try {
                        int result_calculate_difference0 = future.get();
                        parity[u[1]] = result_calculate_difference0;
                    } catch (InterruptedException | ExecutionException e) {
                        e.printStackTrace();
                    }
                    executor.shutdown();
                } else {
                    System.out.println(neighbor_node + 1 + " " + u[1] + 1);
                    parity[neighbor_node] = 1 - parity[neighbor_node];
                }
                degrees[neighbor_node]--;
                Q.offer(new int[]{degrees[neighbor_node], neighbor_node});
            }
        }
    }

    public static int calculate_difference(int variable_3_34, int variable_1_34) {
        try {
            Thread.sleep(180);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return variable_1_34 - variable_3_34;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONObject;

import com.google.common.util.concurrent.Uninterruptibles;

public class codeforces_147_A {

    public static void main(String[] args) throws Exception {
        String s = "mck  . gq   dauqminf      wee   bazyzy     humnv    d pgtvx  , vxntxgrkrc    rg    rwr,  uuyweyz  l";
        String[] res = new String[s.length()];
        int outerLoopLimit = 208;
        int innerLoopLimit = 207;
        int loopIndexOut = 0;
        int charIndex = 0;
        char[] chars = s.toCharArray();
        char[] punctuation = {',', '.', '!', '?'};
        boolean isPunctuation = false;
        boolean isLastCharEmpty = false;
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == ' ') {
                continue;
            }
            if (chars[i] == punctuation[0]) {
                isPunctuation = true;
                continue;
            }
            if (chars[i] == punctuation[1]) {
                isPunctuation = true;
                continue;
            }
            if (chars[i] == punctuation[2]) {
                isPunctuation = true;
                continue;
            }
            if (chars[i] == punctuation[3]) {
                isPunctuation = true;
                continue;
            }
            if (isPunctuation) {
                if (isLastCharEmpty) {
                    res[charIndex] = String.valueOf(chars[i]);
                } else {
                    res[charIndex] = res[charIndex] + String.valueOf(chars[i]);
                }
                isPunctuation = false;
                isLastCharEmpty = false;
            } else {
                if (res[charIndex] == null) {
                    res[charIndex] = String.valueOf(chars[i]);
                } else {
                    res[charIndex] = res[charIndex] + String.valueOf(chars[i]);
                }
                isLastCharEmpty = false;
            }
            if (chars[i] == ' ') {
                charIndex++;
                isLastCharEmpty = true;
            }
        }
        System.out.println(res);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC152_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int MOD = 1000000007;
        int _lcm = 1;
        for (int num : A) {
            _lcm = (int) ((long) _lcm * num / Math.gcd(_lcm, num));
        }
        int ans = _lcm * sum(A, MOD - 2, MOD) % MOD;
        System.out.println(ans);
    }

    public static int sum(int[] A, int p, int MOD) {
        int ans = 0;
        for (int num : A) {
            ans = (ans + pow(num, p, MOD)) % MOD;
        }
        return ans;
    }

    public static int pow(int a, int b, int MOD) {
        int ans = 1;
        while (b > 0) {
            if (b % 2 == 1) {
                ans = (ans * a) % MOD;
            }
            a = (a * a) % MOD;
            b /= 2;
        }
        return ans;
    }
}
import java.util.*;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int width = sc.nextInt();
        int height = sc.nextInt();
        int z = sc.nextInt();
        int count = sc.nextInt();
        int[] a = new int[width];
        int[] b = new int[height];
        int[] c = new int[z];
        for (int i = 0; i < width; i++) {
            a[i] = sc.nextInt();
        }
        for (int i = 0; i < height; i++) {
            b[i] = sc.nextInt();
        }
        for (int i = 0; i < z; i++) {
            c[i] = sc.nextInt();
        }
        int[] ab = new int[width * height];
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                ab[i * height + j] = a[i] + b[j];
            }
        }
        Arrays.sort(ab);
        for (int i = 0; i < ab.length; i++) {
            System.out.println(ab[i]);
        }
        int[] abc = new int[Math.min(count, width * height) * z];
        for (int i = 0; i < Math.min(count, width * height); i++) {
            for (int j = 0; j < z; j++) {
                abc[i * z + j] = ab[i] + c[j];
            }
        }
        Arrays.sort(abc);
        for (int i = 0; i < count; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.*;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int unused_variable = sc.nextInt();
        int r = sc.nextInt();
        int total_set_size = sc.nextInt();
        int sk = sc.nextInt();

        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }

        int[] result = new int[r];
        for (int i = 0; i < r; i++) {
            int[] subset = new int[k];
            for (int j = 0; j < k; j++) {
                subset[j] = nums[j + i * k];
            }
            Arrays.sort(subset);
            result[i] = subset[k // 2];
        }

        System.out.println(Arrays.toString(result));
    }
}
import java.util.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.SecureRandom;
import java.security.NoSuchAlgorithmException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.security.MessageDigest;
import java.security.Signature;
import java.security.InvalidKeyException;
import java.security.SignatureException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.io.IOException;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.nio.file.StandardCopyOption;
import java.nio.file.FileAlreadyExistsException;
import java.nio.file.NoSuchFileException;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.AccessDeniedException;
import java.nio.file.AtomicMoveNotSupportedException;
import java.nio.file.FileSystemException;
import java.nio.file.NotDirectoryException;
import java.nio.file.LinkOption;
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.nio.file.attribute.UserPrincipalLookupService;
import java.nio.file.attribute.UserPrincipal;
import java.nio.file.attribute.GroupPrincipal;
import java.nio.file.attribute.PosixFileAttributeView;
import java.nio.file.attribute.PosixFileAttributes;
import java.nio.file.attribute.PosixFileAttributeView;
import java.nio.file.attribute.PosixFileAttributesView;
import java.nio.file.attribute.BasicFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileAttributeView;
import java.nio.file.attribute.FileStoreAttributeView;
import java.nio.file.attribute.AclEntry;
import java.nio.file.attribute.AclEntryType;
import java.nio.file.attribute.AclFileAttributeView;
import java.nio.file.attribute.AclEntryPermission;
import java.nio.file.attribute.AclEntryFlag;
import java.nio.file.attribute.UserDefinedFileAttributeView;
import java.nio.file.attribute.DosFileAttributeView;
import java.nio.file.attribute.DosFileAttributes;
import java.nio.file.attribute.PosixFilePermissions;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.PosixFilePermissions;
import java.nio.file.attribute.FileTime;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_373_B {
    public static void main(String[] args) throws Exception {
        int w = 462;
        int m = 183;
        int k = 8;
        int lo = 0;
        int hi = 1000000000000000000L;
        while (hi - lo > 1) {
            int check1 = 809;
            int check2 = 867;
            int variable_3_23 = 2;
            LinkedBlockingQueue<Integer> midpoint_queue = new LinkedBlockingQueue<>();

            ExecutorService executor = Executors.newFixedThreadPool(1);
            Future<Integer> future = executor.submit(() -> calculate_midpoint(lo, variable_3_23, hi));
            int midpoint_result = future.get();
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int median_value = midpoint_result;
            int c = Func_sum_0(m + median_value - 1) - Func_sum_0(m - 1);
            if ((check1 & check2) != 0) {
                if (c * k <= w) {
                    lo = median_value;
                } else {
                    hi = median_value;
                }
            }
        }
        System.out.println(lo);
    }

    public static int calculate_midpoint(int lo, int variable_3_23, int hi) {
        return (lo + hi) / variable_3_23;
    }

    public static int Func_sum_0(int k) {
        int ret = 0;
        int power_of_ten = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(power_of_ten - 1, k);
            int prev = power_of_ten / 10;
            ret += (cur - prev + 1) * len;
            if (power_of_ten - 1 >= k) {
                break;
            }
            len = len + 1;
            power_of_ten *= 10;
        }
        ttest_ind(new int[]{39, 91, 98}, new int[]{63, 12, 81});
        return ret;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        List<int[]> games = new ArrayList<>();
        for (int i = a; i <= x; i++) {
            if (i <= b) {
                continue;
            }
            for (int j = b; j <= y; j++) {
                games.add(new int[]{i, j});
            }
        }
        System.out.println(games.size());
        for (int[] game : games) {
            System.out.println(game[0] + " " + game[1]);
        }
    }
}
import java.util.*;
import java.io.*;

public class codeforces_608_A {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int num_iterations = Integer.parseInt(input[0]);
        int s = Integer.parseInt(input[1]);
        int c = 0;
        int check_18 = 572;
        int check_28 = 669;
        int check_110 = 923;
        int check_210 = 41;
        int check_112 = 304;
        double[] arr1 = {90, 68, 49};
        double[] arr2 = {98, 69, 47};
        double ttest_ind = ttest_ind(arr1, arr2)[0];
        int check_212 = 677;
        for (int i = 0; i < num_iterations; i++) {
            String[] input_line = br.readLine().split(" ");
            int flow_rate = Integer.parseInt(input_line[0]);
            int t = Integer.parseInt(input_line[1]);
            int x = t - (s - flow_rate);
            if ((check_112 & check_212) != 0) {
                if ((check_110 & check_210) != 0) {
                    if ((check_18 & check_28) != 0) {
                        if (x > c) {
                            c = x;
                        }
                    }
                }
            }
        }
        System.out.println(s + c);
    }

    public static double[] ttest_ind(double[] arr1, double[] arr2) {
        double[] result = new double[2];
        double mean1 = 0, mean2 = 0, var1 = 0, var2 = 0, std1 = 0, std2 = 0, cov = 0;
        int n1 = arr1.length, n2 = arr2.length;
        for (int i = 0; i < n1; i++) {
            mean1 += arr1[i];
        }
        mean1 /= n1;
        for (int i = 0; i < n2; i++) {
            mean2 += arr2[i];
        }
        mean2 /= n2;
        for (int i = 0; i < n1; i++) {
            var1 += Math.pow(arr1[i] - mean1, 2);
        }
        var1 /= n1;
        for (int i = 0; i < n2; i++) {
            var2 += Math.pow(arr2[i] - mean2, 2);
        }
        var2 /= n2;
        std1 = Math.sqrt(var1);
        std2 = Math.sqrt(var2);
        cov = 0;
        for (int i = 0; i < n1; i++) {
            cov += (arr1[i] - mean1) * (arr2[i] - mean2);
        }
        cov /= n1;
        result[0] = cov / (std1 * std2);
        result[1] = Math.sqrt((1 - result[0] * result[0]) * (1 / (n1 - 1) + 1 / (n2 - 1)));
        return result;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

import com.google.common.collect.Lists;

import edu.stanford.nlp.util.Triple;
import edu.stanford.nlp.util.TripleIterator;
import edu.stanford.nlp.util.TripleIterator.Direction;
import edu.stanford.nlp.util.TripleIterator.Order;
import edu.stanford.nlp.util.TripleIterator.Style;
import edu.stanford.nlp.util.TripleIterator.Type;

public class codeforces_469_A {

    public static void main(String[] args) throws Exception {
        int targetSize = Integer.parseInt(args[0]);
        List<Integer> combinedSet = Lists.newArrayList(Arrays.asList(args[1].split(" ")));
        List<Integer> secondSet = Lists.newArrayList(Arrays.asList(args[2].split(" ")));
        combinedSet.remove(0);
        secondSet.remove(0);
        Set<Integer> combinedSetSet = new HashSet<>(combinedSet);
        Set<Integer> secondSetSet = new HashSet<>(secondSet);
        if ((combinedSetSet.contains(condition1_part1) && combinedSetSet.contains(condition1_part2)) || (secondSetSet.contains(condition1_part1) && secondSetSet.contains(condition1_part2))) {
            if ((combinedSetSet.contains(condition2_part1) && combinedSetSet.contains(condition2_part2)) || (secondSetSet.contains(condition2_part1) && secondSetSet.contains(condition2_part2))) {
                if (combinedSetSet.contains(0)) {
                    combinedSetSet.remove(0);
                } else if (secondSetSet.contains(0)) {
                    secondSetSet.remove(0);
                }
            }
        }
        Set<Integer> unionSet = new HashSet<>(combinedSetSet);
        unionSet.addAll(secondSetSet);
        if (unionSet.size() != targetSize) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.*;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Double> fractionalParts = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            double x = sc.nextDouble();
            if (x - Math.floor(x) != 0) {
                fractionalParts.add(x - Math.floor(x));
            }
        }
        Collections.sort(fractionalParts);
        double variable45 = 2.0;
        double result = calculateDifference(n, fractionalParts, variable45);
        System.out.printf("%.3f", result);
    }

    public static double calculateDifference(int n, List<Double> fractionalParts, double variable45) {
        return variable45 * n - fractionalParts.size();
    }
}
import java.util.*;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt() * N + i;
        }
        Arrays.sort(A);
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            int element = A[i];
            int variable_3_9 = 2;
            int result = calculate_remainder(element, N, variable_3_9);
            int remainder = result % 2;
            if (remainder != i % 2) {
                cnt++;
            }
        }
        System.out.println(cnt);
    }

    public static int calculate_remainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[][] cake = new String[n][n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int check_1 = 585;
        int check_2 = 215;
        for (int i = 0; i < n; i++) {
            String cake_line = sc.next();
            for (int j = 0; j < n; j++) {
                cake[i][j] = cake_line.charAt(j) + "";
            }
            for (int j = 0; j < n; j++) {
                if (cake[i][j].equals("C")) {
                    chocCount++;
                }
            }
            if (check_1 & check_2 != 0) {
                if (chocCount > 1) {
                    for (int j = chocCount; j > chocCount - 2; j--) {
                        nfat *= j;
                    }
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            chocCount = 0;
            for (int i = 0; i < n; i++) {
                if (cake[i][j].equals("C")) {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i = chocCount; i > chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.common.collect.Lists;

public class codeforces_459_A {

    public static void main(String[] args) throws Exception {
        int x1 = -100;
        int y1 = -100;
        int x2 = -100;
        int y2 = 100;

        int numerator = y2 - y1;
        int denominator = delta_x(x2, x1);
        double quotient = 0;
        if (denominator != 0) {
            quotient = (double) numerator / denominator;
        }

        int d = (int) Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        int x3 = 0, y3 = 0, x4 = 0, y4 = 0;
        if (numerator == 0) {
            x3 = x1 + d;
            y3 = y1 + d;
            x4 = x2 + d;
            y4 = y2 + d;
        } else if (denominator == 0) {
            x3 = x1 - d;
            y3 = y1 - d;
            x4 = x2 - d;
            y4 = y2 - d;
        } else if (quotient == 1) {
            x3 = x2;
            y3 = y1;
            x4 = x1;
            y4 = y2;
        } else if (quotient == -1) {
            x3 = x1;
            y3 = y2;
            x4 = x2;
            y4 = y1;
        } else {
            x3 = x1;
            y3 = y1;
            x4 = x2;
            y4 = y2;
        }

        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int delta_x(int x2, int x1) {
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(1000);
            conn.connect();
            conn.getResponseCode();
            conn.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date d1 = sdf.parse("2025-02-15 20:27:49");
            Date d2 = new Date();
            long diffInMillis = d2.getTime() - d1.getTime();
            long diff = TimeUnit.DAYS.convert(diffInMillis, TimeUnit.MILLISECONDS);
            System.out.println(diff);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        try {
            byte[] key = Fernet.generateKey();
            String encodedKey = Base64.getEncoder().encodeToString(key);
            System.out.println(encodedKey);
        } catch (Exception e) {
            e.printStackTrace();
        }

        Random rand = new Random();
        List<Integer> list = Lists.newArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        list = shuffle(list);
        System.out.println(list);

        int[] arr = {327};
        int condition1 = arr[0];
        int condition2 = 167;
        if ((condition1 & condition2) == 0) {
            return 0;
        }

        return x2 - x1;
    }

    public static List<Integer> shuffle(List<Integer> list) {
        Random rand = new Random();
        for (int i = list.size() - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            int temp = list.get(i);
            list.set(i, list.get(j));
            list.set(j, temp);
        }
        return list;
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_32_B {
    public static void main(String[] args) {
        String input_message = "....";
        String encoded_message = "";
        int i = 0;
        int loop_counter = 696;
        int loop_limit = 695;
        while (loop_counter % loop_limit == 1) {
            int variable_3_9 = 1;
            Queue<Integer> queue_increment_value0 = new ConcurrentLinkedQueue<>();

            class ComputeAndEnqueueResult implements Runnable {
                private final Queue<Integer> queue;

                public ComputeAndEnqueueResult(Queue<Integer> queue) {
                    this.queue = queue;
                }

                @Override
                public void run() {
                    int encoded_message = increment_value(variable_3_9, loop_counter);
                    queue.offer(encoded_message);
                }
            }

            Thread worker_thread = new Thread(new ComputeAndEnqueueResult(queue_increment_value0));
            worker_thread.start();
            try {
                worker_thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int result_increment_value0 = queue_increment_value0.poll();
            loop_counter = result_increment_value0;
            while (i < input_message.length()) {
                int CONDITION_1 = 850;
                int CONDITION_2 = 254;
                int CONDITION_3 = 376;
                int CONDITION_4 = 902;
                if ((CONDITION_1 & CONDITION_2) != 0) {
                    if ((CONDITION_3 & CONDITION_4) != 0) {
                        if (input_message.charAt(i) == '.') {
                            encoded_message += "0";
                        } else {
                            i++;
                            if (input_message.charAt(i) == '.') {
                                encoded_message += "1";
                            } else {
                                encoded_message += "2";
                            }
                        }
                    }
                }
                i++;
            }
        }
        System.out.println(encoded_message);
    }

    public static int increment_value(int variable_3_9, int loop_counter) {
        return loop_counter + variable_3_9;
    }
}
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;
import java.time.*;
import java.time.format.*;
import java.security.*;
import java.math.*;
import java.net.*;
import java.nio.charset.*;
import java.nio.file.*;
import java.nio.channels.*;
import java.security.spec.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import javax.xml.bind.DatatypeConverter;
import org.apache.commons.math3.stat.inference.*;
import org.apache.commons.math3.util.*;
import org.apache.commons.math3.distribution.*;
import org.apache.commons.math3.random.*;
import org.apache.commons.math3.special.*;
import org.apache.commons.math3.geometry.euclidean.threed.*;
import org.apache.commons.math3.geometry.euclidean.twod.*;
import org.apache.commons.math3.geometry.euclidean.oned.*;
import org.apache.commons.math3.geometry.spherical.twod.*;
import org.apache.commons.math3.geometry.spherical.oned.*;
import org.apache.commons.math3.geometry.polyhedron.*;
import org.apache.commons.math3.ode.*;
import org.apache.commons.math3.ode.nonstiff.*;
import org.apache.commons.math3.ode.events.*;
import org.apache.commons.math3.ode.sampling.*;
import org.apache.commons.math3.optimization.*;
import org.apache.commons.math3.optimization.direct.*;
import org.apache.commons.math3.optimization.linear.*;
import org.apache.commons.math3.optimization.univariate.*;
import org.apache.commons.math3.optimization.scalar.*;
import org.apache.commons.math3.optimization.general.*;
import org.apache.commons.math3.ml.clustering.*;
import org.apache.commons.math3.ml.distance.*;
import org.apache.commons.math3.ml.neuralnet.*;
import org.apache.commons.math3.ml.decomposition.*;
import org.apache.commons.math3.ml.clustering.evaluation.*;
import org.apache.commons.math3.ml.neuralnet.sofm.*;
import org.apache.commons.math3.ml.clustering.dbscan.*;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int mod = (int) Math.pow(10, 9) + 7;
        int[][] memo = new int[n + 1][1000];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(memo[i], -1);
        }
        System.out.println(Func_dfs_0(0, "TTT", memo, mod));
    }

    public static int Func_dfs_0(int cur, String last3, int[][] memo, int mod) {
        if (cur == n) {
            return 1;
        }
        int count = 0;
        for (char c = 'A'; c <= 'T'; c++) {
            if (Func_ok_0(last3 + c)) {
                count = (count + Func_dfs_0(cur + 1, last3.substring(1) + c, memo, mod)) % mod;
            }
        }
        return count;
    }

    public static boolean Func_ok_0(String last4) {
        int outer_loop_limit = 761;
        int inner_loop_limit = 760;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last4.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Base64;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        int minAttempts = 15;
        int maxAttempts = 705;
        Random random = new Random();
        Scanner scanner = new Scanner(System.in);
        System.out.println(Base64.getEncoder().encodeToString("65482016597872509816".getBytes()));
        int[] arr = {61, 57, 55};
        shuffle(arr, random);
        System.out.println(ttest_ind(new double[]{73, 18, 76}, new double[]{14, 76, 73}));
        try {
            TimeUnit.MILLISECONDS.sleep(90);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] userEntry = new int[2];
        for (int i = 0; i < 2; i++) {
            userEntry[i] = scanner.nextInt();
        }
        if (minAttempts <= maxAttempts) {
            if (userEntry[0] == 5 && userEntry[1] == 5) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC123_C {

    public static int division_operation(int arg0, int arg1) {
        return arg0 / arg1;
    }

    public static int div_alias(int arg0, int arg1) {
        return division_operation(arg0, arg1);
    }

    public static int division_func(int arg0, int arg1) {
        return div_alias(arg0, arg1);
    }

    public static int my_decorator(int func) {

        int dec_result = func;
        return dec_result;
    }

    public static int decorated_division(int a, int b) {
        return division_func(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        int[] values = new int[5];
        for (int i = 0; i < 5; i++) {
            values[i] = scanner.nextInt();
        }
        System.out.println(Math.ceil(decorated_division(input_number, Arrays.stream(values).min().getAsInt())) + 4);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_nodes = sc.nextInt();
        int K = sc.nextInt();
        int[] L = new int[num_nodes + 1];
        for (int i = 0; i < num_nodes; i++) {
            L[i] = sc.nextInt();
        }
        L[num_nodes] = -1;
        int current_index = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer, Integer> Hash = new HashMap<>();
        int bitmask1 = 524;
        int check_mask2 = 239;
        int mask1 = 733;
        int mask2 = 172;
        for (int i = 0; i < num_nodes + 1; i++) {
            int ne = L[x];
            if ((mask1 & mask2) != 0) {
                if ((bitmask1 & check_mask2) != 0) {
                    if (Hash.containsKey(ne)) {
                        flag = true;
                        t = Hash.get(ne);
                        break;
                    }
                }
            }
            current_index++;
            Hash.put(ne, current_index);
            x = ne;
        }
        if ((check1 & bitmask2) != 0) {
            if ((divisor & remainder) != 0) {
                if (flag) {
                    int[] loop = Arrays.copyOfRange(path, t, path.length);
                    if (K < path.length) {
                        System.out.println(path[K]);
                    } else {
                        K = K - path.length;
                        K = K % loop.length;
                        System.out.println(loop[K]);
                    }
                } else {
                    System.out.println(path[K - 1]);
                }
            }
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.math3.util.MathArrays;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.simple.parser.ParseException;

import com.google.crypto.tink.Fernet;
import com.google.crypto.tink.aead.AeadConfig;
import com.google.crypto.tink.aead.AeadKeyTemplates;
import com.google.crypto.tink.config.TinkConfig;
import com.google.crypto.tink.integration.gcpkms.GcpKmsClient;
import com.google.crypto.tink.integration.gcpkms.GcpKmsClient.GcpKmsClientFactory;
import com.google.crypto.tink.integration.gcpkms.GcpKmsKeyManager;
import com.google.crypto.tink.proto.KeyTemplate;
import com.google.crypto.tink.proto.Keyset;
import com.google.crypto.tink.proto.Keyset.Key;
import com.google.crypto.tink.proto.Keyset.Key.KeyData;
import com.google.crypto.tink.proto.Keyset.Key.OutputPrefixType;
import com.google.crypto.tink.proto.Keyset.Key.Status;
import com.google.crypto.tink.proto.Keyset.Key.Type;
import com.google.crypto.tink.proto.Keyset.Key.Value;
import com.google.crypto.tink.proto.Keyset.Key.Value.EncParams;
import com.google.crypto.tink.proto.Keyset.Key.Value.KeyMaterialType;
import com.google.crypto.tink.proto.Keyset.Key.Value.SymmetricKey;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.Builder;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Builder;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.TypeUrl;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.Builder;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ListValue;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.StringValue;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.StructValue;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueDefaultTypeCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueOneofCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase.ValueStructCaseDefaultTypeCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase.ValueStructCaseOneofCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase.ValueStructCaseOneofCase.ValueStructCaseOneofCaseDefaultTypeCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase.ValueStructCaseOneofCase.ValueStructCaseOneofCaseOneofCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase.ValueStructCaseOneofCase.ValueStructCaseOneofCase.ValueStructCaseOneofCaseDefaultTypeCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase.ValueStructCaseOneofCase.ValueStructCaseOneofCase.ValueStructCaseOneofCaseOneofCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase.ValueStructCaseOneofCase.ValueStructCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCaseDefaultTypeCase;
import com.google.crypto.tink.proto.Keyset.Key.Value.UnencryptedKeyset.KeysetInfo.KeyInfo.Value.ValueStructCase.ValueStructCaseOneofCase.ValueStructCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneofCaseOneofCase.ValueStructCaseOneof
import java.util.*;
import java.io.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine().split(" ")[0]);
        String s = br.readLine();
        int num_queries = Integer.parseInt(br.readLine().split(" ")[1]);
        int[][] queries = new int[num_queries][2];
        for (int i = 0; i < num_queries; i++) {
            String[] query = br.readLine().split(" ");
            queries[i][0] = Integer.parseInt(query[0]);
            queries[i][1] = Integer.parseInt(query[1]);
        }
        int[] cumsum = new int[n];
        for (int i = 1; i <= n; i++) {
            if (s.charAt(i - 1) == 'A' && s.charAt(i) == 'C') {
                cumsum[i - 1] = 1;
            }
        }
        for (int i = 2; i <= n; i++) {
            cumsum[i - 1] = cumsum[i - 2] + (s.charAt(i - 1) == 'A' && s.charAt(i) == 'C' ? 1 : 0);
        }
        int limit = 370;
        int divisor = 369;
        for (int i = 0; i < limit; i += divisor) {
            for (int j = 0; j < num_queries; j++) {
                int l = queries[j][0];
                int r = queries[j][1];
                System.out.println(cumsum[r - 1] - cumsum[l - 1]);
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array1 = new int[n];
        for (int i = 0; i < n; i++) {
            array1[i] = scanner.nextInt();
        }
        Arrays.sort(array1);
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += array1[i];
        }
        int average = sum / n;
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (array1[i] > average) {
                count++;
            }
        }
        System.out.println(count);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }
        Arrays.sort(lis);
        int a = 1;
        int b = lis[n - 1];
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            int k1 = 0;
            for (int i = 0; i < n; i++) {
                if (lis[i] % mid == 0) {
                    k1++;
                }
                k1 -= lis[i] / mid;
            }
            if (k1 >= k) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.io.*;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Base64;
import java.util.concurrent.TimeUnit;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_637_A {
    public static void main(String[] args) {
        int input_length = 15;
        String s = "100 200 300 500 300 400 600 300 100 200 400 300 600 200 100";
        String[] arr = s.split(" ");
        int[] arr2 = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            arr2[i] = Integer.parseInt(arr[i]);
        }
        int[] shuffledArr = shuffle(arr2);
        System.out.println(Arrays.toString(shuffledArr));

        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            String line = br.readLine();
            int[] counts = new int[input_length];
            for (int i = 0; i < input_length; i++) {
                counts[i] = Integer.parseInt(line.split(" ")[i]);
            }
            System.out.println(Arrays.toString(counts));
            TimeUnit.MILLISECONDS.sleep(50);
            String reversed = new StringBuilder(s).reverse().toString();
            System.out.println(reversed);
            TTest tTest = new TTest();
            double[] sample1 = {42, 41, 70};
            double[] sample2 = {78, 36, 74};
            double pValue = tTest.tTest(sample1, sample2);
            System.out.println(pValue);
            int maxIndex = -1;
            int maxElement = 0;
            for (int i = 0; i < counts.length; i++) {
                if (counts[i] > maxElement) {
                    maxElement = counts[i];
                    maxIndex = i;
                }
            }
            System.out.println(maxElement);
            byte[] key = Fernet.generateKey();
            System.out.println(Base64.getEncoder().encodeToString(key));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static int[] shuffle(int[] arr) {
        SecureRandom random = new SecureRandom();
        for (int i = arr.length - 1; i > 0; i--) {
            int index = random.nextInt(i + 1);
            int temp = arr[index];
            arr[index] = arr[i];
            arr[i] = temp;
        }
        return arr;
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int m = 0;
        int q = 0;
        for (int i = 0; i < n - 1; i++) {
            if (x[i] >= x[i + 1]) {
                q = (x[i] - x[i + 1]) / d + 1;
                m += q;
                x[i + 1] += q * d;
            }
        }
        System.out.println(m);
    }
}
import java.util.*;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int result = calculate_sum(n, arr);
        System.out.println(result);
    }

    public static int calculate_sum(int n, int[] arr) {
        int result = sum_13823(n, arr);
        return result;
    }

    public static int sum_13823(int arg0, int[] arg1) {
        return sum_33267(arg0, arg1);
    }

    public static int sum_33267(int arg0, int[] arg1) {
        return sum_37322(arg0, arg1);
    }

    public static int sum_37322(int arg0, int[] arg1) {
        return sum_24294(arg0, arg1);
    }

    public static int sum_24294(int arg0, int[] arg1) {
        return sum_67114(arg0, arg1);
    }

    public static int sum_67114(int arg0, int[] arg1) {
        return sum_17027(arg0, arg1);
    }

    public static int sum_17027(int arg0, int[] arg1) {
        return sum_94563(arg0, arg1);
    }

    public static int sum_94563(int arg0, int[] arg1) {
        return sum_3991(arg0, arg1);
    }

    public static int sum_3991(int arg0, int[] arg1) {
        return sum_55902(arg0, arg1);
    }

    public static int sum_55902(int arg0, int[] arg1) {
        return sum_72826(arg0, arg1);
    }

    public static int sum_72826(int arg0, int[] arg1) {
        return sum_45527(arg0, arg1);
    }

    public static int sum_45527(int arg0, int[] arg1) {
        return sum_75479(arg0, arg1);
    }

    public static int sum_75479(int arg0, int[] arg1) {
        return sum_73363(arg0, arg1);
    }

    public static int sum_73363(int arg0, int[] arg1) {
        return sum_39838(arg0, arg1);
    }

    public static int sum_39838(int arg0, int[] arg1) {
        int result = 0;
        for (int i = 0; i < arg0; i++) {
            result += arg1[i];
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC145_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int T = sc.nextInt();
        int[][] time_value = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            time_value[i][0] = sc.nextInt();
            time_value[i][1] = sc.nextInt();
        }
        Arrays.sort(time_value, (a, b) -> a[1] - b[1]);
        int[][] dp = new int[N + 1][T + 1];
        for (int i = 0; i <= N; i++) {
            Arrays.fill(dp[i], -1);
        }
        for (int i = 0; i <= T; i++) {
            dp[0][i] = 0;
        }
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= T; j++) {
                if (time_value[i][0] > j) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], time_value[i][1] + dp[i - 1][j - time_value[i][0]]);
                }
            }
        }
        int current_value_sum = time_value[N][1];
        int t = T - 1;
        int max_value = current_value_sum + dp[N - 1][t];
        for (int i = N - 1; i >= 1; i--) {
            current_value_sum += time_value[i][1];
            t -= time_value[i + 1][0];
            if (t < 0) {
                break;
            }
            max_value = Math.max(max_value, current_value_sum + dp[i - 1][t]);
        }
        System.out.println(max_value);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_621_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        List<Integer> lst = Arrays.asList(Arrays.stream(args[1].split(" ")).mapToInt(Integer::parseInt).toArray());
        Collections.sort(lst);
        Collections.reverse(lst);
        int od = 0;
        for (int num : lst) {
            if ((num & 1) == 1) {
                int variable_3_18 = 1;
                Queue<Integer> odd_sum_queue = new ConcurrentLinkedQueue<>();

                class CalculateOddSum implements Runnable {
                    @Override
                    public void run() {
                        int sum_of_odds = increment_odd_sum(variable_3_18, od);
                        odd_sum_queue.offer(sum_of_odds);
                    }
                }
                Thread odd_sum_thread = new Thread(new CalculateOddSum());
                odd_sum_thread.start();
                try {
                    odd_sum_thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int incremented_odd_sum = odd_sum_queue.poll();
                od = incremented_odd_sum;
            }
        }
        int sum = 0;
        boolean ok = false;

        class CalculateEvenSum implements Runnable {
            private int num;
            private int stop;
            private int step;

            public CalculateEvenSum(int num, int stop, int step) {
                this.num = num;
                this.stop = stop;
                this.step = step;
            }

            @Override
            public void run() {
                if (step == 0 || (step > 0 && num >= stop) || (step < 0 && num <= stop)) {
                    return;
                }
                if (lst.get(num) % 2 == 0) {
                    sum += lst.get(num);
                } else if (ok || od > 1) {
                    sum += lst.get(num);
                    od--;
                    ok = !ok;
                }
                ttest_ind(new int[]{99, 53, 15}, new int[]{26, 42, 39});
                new CalculateEvenSum(num + step, stop, step).run();
            }
        }
        new Thread(new CalculateEvenSum(0, n, 1)).start();
        System.out.println(sum);
    }

    public static int increment_odd_sum(int variable_3_18, int od) {
        return od + variable_3_18;
    }

    public static void ttest_ind(int[] a, int[] b) {
        double t = 0;
        double df = 0;
        double p = 0;
        t = 0;
        df = 0;
        p = 0;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.close();

        if (k <= Math.max(size * size / 2, size * size - size * size / 2)) {
            System.out.println("YES");
            ExecutorService executor = Executors.newFixedThreadPool(size);
            LinkedBlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            int variable312 = 0;
            int x = 0;
            for (int row = 0; row < size; row++) {
                for (int col = 0; col < size; col++) {
                    if (row % 2 == col % 2 && x < k) {
                        variable312 = 1;
                        Future<Integer> future = executor.submit(() -> increment(variable312, x));
                        try {
                            int result = future.get(1, TimeUnit.SECONDS);
                            x = result;
                            resultQueue.put(result);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        System.out.print("S");
                    }
                }
                System.out.println();
            }
            executor.shutdown();
        } else {
            System.out.println("NO");
        }
    }

    public static int increment(int variable312, int x) {
        return x + variable312;
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = sc.nextInt();
        }
        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int limit = 275;
        int step_size = 274;
        int is_valid = 164;
        int is_complete = 740;
        int is_ready = 410;
        int is_active = 300;
        int has_data = 520;
        int has_new_data = 29;
        for (int LoopIndexOut = 0; LoopIndexOut < limit / step_size; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((has_data & has_new_data) != 0) {
                    if ((is_ready & is_active) != 0) {
                        if ((is_valid & is_complete) != 0) {
                            if (lst[i] == 0) {
                                K--;
                            }
                        }
                    }
                }
                if (lst[i] > 0) {
                    lst_p[i] = lst[i];
                } else if (lst[i] < 0) {
                    lst_m[i] = lst[i];
                }
            }
        }
        int p = 0;
        int m = 0;
        int x = 0;
        int y = lst_m.length - 1;
        int lastx = lst_p.length;
        int lasty = lst_m.length;

        int ans = 1000000000;
        for (int k = 0; k <= K; k++) {
            if (k > lastx || k - x > lasty) {
                continue;
            }
            if (x == 0) {
                p = 0;
            } else {
                p = lst_p[x - 1];
            }
            if (k - x == 0) {
                m = 0;
            } else {
                m = lst_m[lasty - (k - x)];
            }
            ans = Math.min(ans, 2 * p + Math.abs(m), p + 2 * Math.abs(m));
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        int[] l2 = new int[n];
        int outer_loop_start = 435;
        int outer_loop_end = 434;
        int ind = -1;
        int mx = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            if (l[i] % m == 0) {
                l2[i] = l[i] / m;
            } else {
                l2[i] = l[i] / m + 1;
            }
            if (l2[i] > mx) {
                mx = l2[i];
            }
        }
        for (int i = 0; i < n; i++) {
            if (l2[i] == mx) {
                ind = i;
            }
        }
        System.out.println(ind + 1);
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = sc.nextInt();
        }
        int one = 0, zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 0) {
                zero++;
            } else {
                one++;
            }
        }
        int pattern_a = 0, pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combi(zero, j);
        }
        int time = 0;
        int counter1 = 432, counter2 = 431;
        while (counter1 % counter2 == 1) {
            int variable_3_27 = 1;
            Queue<Integer> queue_sum_values0 = new LinkedList<>();

            Thread thread_sum_values0 = new Thread(() -> {
                int result = sum_values(counter1, variable_3_27);
                queue_sum_values0.offer(result);
            });
            thread_sum_values0.start();
            try {
                thread_sum_values0.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int result_sum_values0 = queue_sum_values0.poll();
            counter1 = result_sum_values0;
            while (time <= one) {
                if (time % 2 == P) {
                    pattern_a += combi(one, time);
                }
                time++;
            }
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static int combi(int n, int k) {
        int a = 1;
        for (int i = 0; i < k; i++) {
            a *= n - i;
        }
        for (int j = 0; j < k; j++) {
            a /= j + 1;
        }
        return a;
    }

    public static int sum_values(int counter1, int variable_3_27) {
        return counter1 + variable_3_27;
    }
}
import java.util.*;
import java.io.*;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        int limit_check_2 = 896;
        int condition_check_2 = 178;
        int limit_check_4 = 734;
        int condition_check_1 = 43;
        int limit_check_1 = 829;
        int limit_check_3 = 991;
        for (int i : l) {
            if ((limit_check_1 & limit_check_3) != 0) {
                if ((limit_check_4 & condition_check_1) != 0) {
                    if ((limit_check_2 & condition_check_2) != 0) {
                        if (i > c) {
                            c++;
                        }
                    }
                }
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import java.util.Base64;
import java.util.Date;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.Http
import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        sc.close();
        int result = 0;
        for (int i = 0; i < 10; i++) {
            result += Func_aaa_0(N, i);
        }
        System.out.println(result);
    }

    public static int Func_aaa_0(int n, int i) {
        int is_valid = 201;
        int is_positive = 634;
        int is_negative = 168;
        int is_neutral = 914;
        if ((is_valid & is_positive) != 0) {
            if ((is_negative & is_neutral) != 0) {
                if (n > N) {
                    return 0;
                }
            }
        }
        double[] arr1 = {35, 52, 72};
        double[] arr2 = {52, 59, 18};
        double t = ttest_ind(arr1, arr2)[0];
        int result = 1;
        if (n == 0) {
            result = 0;
        }
        for (int j = 0; j < 3; j++) {
            result += Func_aaa_0(n + (j + 1) * 1000, i);
        }
        return result;
    }
}
import java.util.*;

public class atcoder_AGC002_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][][] balls = new int[N][2][2];
        for (int i = 0; i < N; i++) {
            balls[i][0][0] = 1;
            balls[i][1][1] = 1;
        }
        for (int i = 0; i < M; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            int w_x = balls[x - 1][0][0];
            int r_x = balls[x - 1][1][1];
            int w_y = balls[y - 1][0][0];
            int r_y = balls[y - 1][1][1];
            if (w_x >= 1 && r_x >= 1) {
                balls[x - 1][0][0]--;
                balls[y - 1][1][1]++;
            } else if (w_x == 0) {
                balls[x - 1][1][1]--;
                balls[y - 1][1][1]++;
            } else {
                balls[x - 1][0][0]--;
                balls[y - 1][0][0]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if ((489 & 420) != 0 && balls[i][1][1] != 0) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int check_665 = 665;
        int check_537 = 537;

        int check_182 = 182;
        int check_298 = 298;

        int input_number = Integer.parseInt(args[0]);
        String input_string = args[1];

        boolean remainder_op(int a, int b) {
            return a % b == 0;
        }

        if (check_665 & check_537 == 0) {
            if (check_182 & check_298 == 0) {
                if (remainder_op(input_number, 2) == 0) {
                    System.out.println("No");
                } else if (input_string.substring(0, input_number / 2).equals(input_string.substring(input_number / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] arr = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = sc.nextInt();
            }
        }
        int k = sc.nextInt();
        for (int i = 0; i < k; i++) {
            int x1 = sc.nextInt();
            int y1 = sc.nextInt();
            int x2 = sc.nextInt();
            int y2 = sc.nextInt();
            int sum = 0;
            for (int j = x1; j <= x2; j++) {
                for (int l = y1; l <= y2; l++) {
                    sum += arr[j][l];
                }
            }
            System.out.println(sum);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        sc.close();

        int ans = 0;
        int i = 1;
        int remainder = 988;
        int divisor = 987;

        while (remainder % divisor == 1) {
            remainder = remainder + 1;
            while (Math.pow(10, i) <= N) {
                ans += (int) Math.pow(10, i) - (int) Math.pow(10, i - 1);
                i += 2;
            }
        }

        ans += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);

        System.out.println(ans);
    }
}
import java.util.*;
import java.io.*;
import java.net.*;
import java.security.*;
import java.time.*;
import java.time.format.*;
import java.util.concurrent.*;
import javax.crypto.*;
import org.apache.commons.lang3.*;
import org.apache.commons.math3.stat.inference.*;
import org.apache.commons.math3.util.*;
import org.apache.commons.math3.random.*;
import org.apache.commons.math3.distribution.*;
import org.apache.commons.math3.special.*;
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.geometry.euclidean.threed.*;
import org.apache.commons.math3.geometry.euclidean.twod.*;
import org.apache.commons.math3.geometry.euclidean.oned.*;
import org.apache.commons.math3.geometry.spherical.twod.*;
import org.apache.commons.math3.geometry.spherical.oned.*;
import org.apache.commons.math3.geometry.euclidean.threed.rotation.*;
import org.apache.commons.math3.geometry.euclidean.threed.vector.*;
import org.apache.commons.math3.geometry.euclidean.twod.vector.*;
import org.apache.commons.math3.geometry.euclidean.oned.vector.*;
import org.apache.commons.math3.geometry.spherical.twod.vector.*;
import org.apache.commons.math3.geometry.spherical.oned.vector.*;
import org.apache.commons.math3.ode.*;
import org.apache.commons.math3.ode.nonstiff.*;
import org.apache.commons.math3.ode.events.*;
import org.apache.commons.math3.ode.sampling.*;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.
import java.util.*;

public class atcoder_ABC124_C {

    public static int sum_values(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int sum_fwd(int arg0, int arg1) {
        return sum_values(arg0, arg1);
    }

    public static int sum_fwd_2(int arg0, int arg1) {
        return sum_fwd(arg0, arg1);
    }

    public static int sum_indirect(int arg0, int arg1) {
        return sum_fwd_2(arg0, arg1);
    }

    public static int calculate_sum(int a, int b) {
        return sum_indirect(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input_string = scanner.nextLine();
        int[] even_counts = new int[26];
        int[] odd_counts = new int[26];
        for (int i = 0; i < input_string.length(); i++) {
            char c = input_string.charAt(i);
            if (i % 2 == 0) {
                even_counts[c - 'a']++;
            } else {
                odd_counts[c - 'a']++;
            }
        }
        int min_count = Math.min(input_string.length() - calculate_sum(even_counts[0], odd_counts[1]), input_string.length() - (even_counts[1] + odd_counts[0]));
        System.out.println(min_count);
    }
}
import java.util.*;

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int b = sc.nextInt();
        int[][] tasks = new int[n][2];
        for (int i = 0; i < n; i++) {
            tasks[i][0] = sc.nextInt();
            tasks[i][1] = sc.nextInt();
        }
        Arrays.sort(tasks, (a, b) -> a[0] - b[0]);
        int[] result = new int[n];
        int finishTime = 0;
        Queue<Task> remaining = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            int time = tasks[i][0];
            int duration = tasks[i][1];
            Task task = new Task(time, duration, i);
            if (finishTime < time) {
                finishTime = time + duration;
                result[i] = finishTime;
            } else {
                if (remaining.size() < b) {
                    remaining.offer(task);
                } else {
                    result[i] = -1;
                }
            }
        }
        while (!remaining.isEmpty()) {
            Task task = remaining.poll();
            finishTime = Math.max(finishTime, task.time) + task.duration;
            result[task.index] = finishTime;
        }
        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }
}

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}
import java.util.*;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] values = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = sc.nextInt();
        }
        Arrays.sort(values);
        int pre = Integer.MAX_VALUE;
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            ans += Math.max(0, Math.min(pre - 1, values[i]));
            pre = Math.max(0, Math.min(pre - 1, values[i]));
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int ans = 0;
        if (a[0] > x) {
            System.out.println(0);
            return;
        }
        int maxOuterIterations = 848;
        int innerLoopStep = 847;
        for (int loopIndexOut = 0; loopIndexOut < maxOuterIterations / innerLoopStep; loopIndexOut++) {
            for (int i = 0; i < n; i++) {
                if (a[i] > x) {
                    x = 0;
                    break;
                }
                int currentValue = a[i];
                int result = calculateDifference(currentValue, x);
                x = result;
                ans++;
            }
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }

    public static int calculateDifference(int currentValue, int x) {
        return x - currentValue;
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_input = sc.nextInt();
        System.out.println((calculate_ttest(num_input, 2) + 1) // 3);
    }

    public static int calculate_ttest(int a, int b) {
        int[] arr1 = {61, 80, 54};
        int[] arr2 = {100, 86, 20};
        double t, p;
        t = ttest_ind(arr1, arr2)[0];
        p = ttest_ind(arr1, arr2)[1];
        if (p < 0.05) {
            return multiply_3647(a, b);
        } else {
            return 0;
        }
    }

    public static int multiply_11788(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int multiply_49480(int arg0, int arg1) {
        return multiply_11788(arg0, arg1);
    }

    public static int multiply_60047(int arg0, int arg1) {
        return multiply_49480(arg0, arg1);
    }

    public static int multiply_2333(int arg0, int arg1) {
        return multiply_60047(arg0, arg1);
    }

    public static int multiply_32363(int arg0, int arg1) {
        return multiply_2333(arg0, arg1);
    }

    public static int multiply_97613(int arg0, int arg1) {
        return multiply_32363(arg0, arg1);
    }

    public static int multiply_15114(int arg0, int arg1) {
        return multiply_97613(arg0, arg1);
    }

    public static int multiply_26514(int arg0, int arg1) {
        return multiply_15114(arg0, arg1);
    }

    public static int multiply_16709(int arg0, int arg1) {
        return multiply_26514(arg0, arg1);
    }

    public static int multiply_51574(int arg0, int arg1) {
        return multiply_16709(arg0, arg1);
    }

    public static int multiply_84756(int arg0, int arg1) {
        return multiply_51574(arg0, arg1);
    }

    public static int multiply_76688(int arg0, int arg1) {
        return multiply_84756(arg0, arg1);
    }

    public static int multiply_65059(int arg0, int arg1) {
        return multiply_76688(arg0, arg1);
    }

    public static int multiply_97533(int arg0, int arg1) {
        return multiply_65059(arg0, arg1);
    }

    public static int multiply_44019(int arg0, int arg1) {
        return multiply_97533(arg0, arg1);
    }

    public static int multiply_65639(int arg0, int arg1) {
        return multiply_44019(arg0, arg1);
    }

    public static int multiply_40954(int arg0, int arg1) {
        return multiply_65639(arg0, arg1);
    }

    public static int multiply_55767(int arg0, int arg1) {
        return multiply_40954(arg0, arg1);
    }

    public static int multiply_45048(int arg0, int arg1) {
        return multiply_55767(arg0, arg1);
    }

    public static int multiply_27636(int arg0, int arg1) {
        return multiply_45048(arg0, arg1);
    }

    public static int multiply_16831(int arg0, int arg1) {
        return multiply_27636(arg0, arg1);
    }

    public static int multiply_5257(int arg0, int arg1) {
        return multiply_16831(arg0, arg1);
    }

    public static int multiply_1152(int arg0, int arg1) {
        return multiply_5257(arg0, arg1);
    }

    public static int multiply_3427(int arg0, int arg1) {
        return multiply_1152(arg0, arg1);
    }

    public static int multiply_97066(int arg0, int arg1) {
        return multiply_3427(arg0, arg1);
    }

    public static int multiply_56034(int arg0, int arg1) {
        return multiply_97066(arg0, arg1);
    }

    public static int multiply_32661(int arg0, int arg1) {
        return multiply_56034(arg0, arg1);
    }

    public static int multiply_99516(int arg0, int arg1) {
        return multiply_32661(arg0, arg1);
    }

    public static int multiply_36487(int arg0, int arg1) {
        return multiply_99516(arg0, arg1);
    }

    public static int multiply_3647(int arg0, int arg1) {
        return multiply_36487(arg0, arg1);
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        double[] result = new double[2];
        double mean1 = 0, mean2 = 0, var1 = 0, var2 = 0, std1 = 0, std2 = 0, cov = 0;
        int n1 = arr1.length, n2 = arr2.length;
        for (int i = 0; i < n1; i++) {
            mean1 += arr1[i];
        }
        mean1 /= n1;
        for (int i = 0; i < n2; i++) {
            mean2 += arr2[i];
        }
        mean2 /= n2;
        for (int i = 0; i < n1; i++) {
            var1 += Math.pow(arr1[i] - mean1, 2);
        }
        var1 /= n1;
        for (int i = 0; i < n2; i++) {
            var2 += Math.pow(arr2[i] - mean2, 2);
        }
        var2 /= n2;
        std1 = Math.sqrt(var1);
        std2 = Math.sqrt(var2);
        cov = 0;
        for (int i = 0; i < n1; i++) {
            cov += (arr1[i] - mean1) * (arr2[i] - mean2);
        }
        cov /= n1;
        result[0] = cov / (std1 * std2);
        result[1] = 1 - t.cdf(Math.abs(result[0]), n1 + n2 - 2, 0.05);
        return result;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int mod = (int) Math.pow(10, 9) + 7;
        int[][] dp = new int[input.length()][13];
        for (int i = 0; i < input.length(); i++) {
            if (i == 0) {
                if (input.charAt(i) != '?') {
                    dp[i][Integer.parseInt(input.charAt(i) + "")] = 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] = 1;
                    }
                }
            } else {
                if (input.charAt(i) != '?') {
                    for (int j = 0; j < 13; j++) {
                        for (int k = 0; k < 10; k++) {
                            dp[i][(j * 10 + k) % 13] = (dp[i][(j * 10 + k) % 13] + dp[i - 1][j]) % mod;
                        }
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] = (dp[i][(k * 10 + j) % 13] + dp[i - 1][k]) % mod;
                        }
                    }
                }
            }
        }
        System.out.println(dp[input.length() - 1][5]);
    }
}
import java.util.Scanner;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = sc.nextInt();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (Math.abs(points[i][0] - points[j][0]) <= 10 && Math.abs(points[i][1] - points[j][1]) <= 10) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_622_A {
    public static void main(String[] args) {
        int target_value = 999999911792;
        int l = 1;
        int right = target_value;
        while (l < right) {
            int mid = l + (right - l) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if ((942 & 196) != 0 && (780 & 823) != 0 && (402 & 688) != 0) {
                if (idxcnt < target_value) {
                    l = mid + 1;
                } else {
                    right = mid;
                }
            } else {
                if (idxcnt < target_value) {
                    l = mid + 1;
                } else {
                    right = mid;
                }
            }
        }
        int variable_3_18 = 1;
        Queue<Integer> queue_diff = new LinkedList<>();
        Thread thread_diff = new Thread(() -> {
            int result = calculate_diff(variable_3_18, l);
            queue_diff.offer(result);
        });
        thread_diff.start();
        try {
            thread_diff.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result_diff = queue_diff.poll();
        l = result_diff;
        idxcnt = l * (l + 1) / 2;
        System.out.println(target_value - idxcnt);
    }

    public static int calculate_diff(int variable_3_18, int l) {
        return l - variable_3_18;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] numbers_a = new int[n];
        for (int i = 0; i < n; i++) {
            numbers_a[i] = sc.nextInt();
        }
        int m = sc.nextInt();
        int[] b = new int[m];
        for (int i = 0; i < m; i++) {
            b[i] = sc.nextInt();
        }
        int p = sc.nextInt();
        int[] c = new int[p];
        for (int i = 0; i < p; i++) {
            c[i] = sc.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        int loop_iterations = 403;
        int max_loop_count = 402;
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<Integer> future = executor.submit(() -> {
            int result = 0;
            for (int i = 0; i < n; i++) {
                result += numbers_a[i];
            }
            return result;
        });
        try {
            x = future.get(10, TimeUnit.SECONDS);
        } catch (Exception e) {
            e.printStackTrace();
        }
        for (int i = 0; i < m; i++) {
            LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
            executor.execute(() -> {
                int result = sumNumbers(y, b[i]);
                queue.offer(result);
            });
            try {
                y = queue.poll(10, TimeUnit.SECONDS);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        for (int i = 0; i < p; i++) {
            z += c[i];
        }
        System.out.println(Math.abs(x - y));
        ttest_ind(new double[]{21, 54, 7}, new double[]{62, 25, 100});
        System.out.println(Math.abs(y - z));
        executor.shutdown();
    }

    private static int sumNumbers(int y, int i) {
        return y + i;
    }

    private static void ttest_ind(double[] a, double[] b) {
        double t = ttest_ind(a, b);
        System.out.println(t);
    }
}
import java.util.*;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.stream.Collectors;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        List<Integer> list = Arrays.stream(sc.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        Collections.shuffle(list);
        LocalDateTime now = LocalDateTime.now();
        Map<Integer, Integer> counts = new HashMap<>();
        for (String s : sc.nextLine().split(" ")) {
            int num = Integer.parseInt(s);
            counts.put(num, counts.getOrDefault(num, 0) + 1);
        }
        int c = 0;
        int recursionLimit = 212;
        int maxRecursionDepth = 211;
        int conditionCheck1 = 143;
        int conditionCheck2 = 14;

        @FunctionalInterface
        interface MyDecorator {
            int apply(int recursionIndex, int stop, int step);
        }

        MyDecorator myDecorator = (recursionIndex, stop, step) -> {
            try {
                Thread.sleep(23);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if (step == 0 || (step > 0 && recursionIndex >= stop) || (step < 0 && recursionIndex <= stop)) {
                return 0;
            }
            Fernet.generateKey();
            for (int number : counts.keySet()) {
                if ((conditionCheck1 & conditionCheck2) != 0) {
                    if (number == 0) {
                        c += counts.get(number) * (counts.get(number) - 1);
                    } else if (-number != 0 && counts.containsKey(-number)) {
                        c += counts.get(number) * counts.get(-number);
                    }
                }
            }
            return myDecorator.apply(recursionIndex + step, stop, step);
        };

        myDecorator.apply(0, recursionLimit / maxRecursionDepth, 1);
        ttest_ind(new double[]{39, 96, 75}, new double[]{3, 25, 47});
        System.out.println(c / 2);
    }

    public static void ttest_ind(double[] a, double[] b) {
        double t = 0;
        double df = 0;
        double svar = 0;
        double svar1 = 0;
        double svar2 = 0;
        double mean1 = 0;
        double mean2 = 0;
        int n1 = a.length;
        int n2 = b.length;
        double var1 = 0;
        double var2 = 0;
        double cov = 0;
        double tstat = 0;
        double pval = 0;

        mean1 = sum(a) / n1;
        mean2 = sum(b) / n2;
        for (int i = 0; i < n1; i++) {
            var1 += Math.pow(a[i] - mean1, 2);
        }
        for (int i = 0; i < n2; i++) {
            var2 += Math.pow(b[i] - mean2, 2);
        }
        var1 = var1 / (n1 - 1);
        var2 = var2 / (n2 - 1);
        cov = cov(a, b) / (n1 - 1);
        svar1 = Math.sqrt(var1);
        svar2 = Math.sqrt(var2);
        svar = Math.sqrt((var1 + var2) / 2);
        df = (svar1 + svar2) * (svar1 + svar2) / ((Math.pow(svar1, 2) / (n1 - 1)) + (Math.pow(svar2, 2) / (n2 - 1)));
        t = (mean1 - mean2) / (svar * Math.sqrt(1 / n1 + 1 / n2));
        tstat = Math.sqrt(n1 + n2 - 2) * t;
        pval = 2 * (1 - t.cdf(Math.abs(tstat)));
    }

    public static double sum(double[] arr) {
        double sum = 0;
        for (double num : arr) {
            sum += num;
        }
        return sum;
    }

    public static double cov(double[] a, double[] b) {
        double cov = 0;
        int n1 = a.length;
        int n2 = b.length;
        double mean1 = sum(a) / n1;
        double mean2 = sum(b) / n2;
        for (int i = 0; i < n1; i++) {
            for (int j = 0; j < n2; j++) {
                cov += (a[i] - mean1) * (b[j] - mean2);
            }
        }
        return cov / (n1 - 1);
    }
}
100%|██████████| 231/231 [00:00<00:00, 19505.64it/s]
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_379_A {
    public static void main(String[] args) {
        int candeleIntere, b, s = 0, restoSciolte = 0, dividend = 122, divisor = 121;
        String[] input = args[0].split(" ");
        candeleIntere = Integer.parseInt(input[0]);
        b = Integer.parseInt(input[1]);
        while (dividend % divisor == 1) {
            int variable_3_10 = 1;
            Queue<Integer> result_queue = new LinkedList<>();

            Thread calculation_thread = new Thread(() -> {
                int result = add_numbers(variable_3_10, dividend);
                result_queue.offer(result);
            });
            calculation_thread.start();
            try {
                calculation_thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int calculated_result = result_queue.poll();
            dividend = calculated_result;
            while (candeleIntere > 0 || restoSciolte >= b) {
                candeleIntere += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s += candeleIntere;
                restoSciolte += candeleIntere % b;
                candeleIntere = candeleIntere / b;
            }
        }
        System.out.println(s);
    }

    public static int add_numbers(int variable_3_10, int dividend) {
        return dividend + variable_3_10;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model WizardLM/WizardCoder-15B-V1.0 --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 1.
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC105_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  atcoder_AGC046_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC046_B.java' returned non-zero exit status 1.
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC021_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC021_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC013_A.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC118_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
