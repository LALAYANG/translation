+ model=deepseek-ai/deepseek-coder-6.7b-base
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-6.7b-base --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 07:54:53 [__init__.py:241] Automatically detected platform cuda.
found 225 inputs
INFO 08-21 07:54:54 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-6.7b-base', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 07:55:01 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 07:55:01 [__init__.py:1750] Using max model len 4096
INFO 08-21 07:55:01 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=30242)[0;0m INFO 08-21 07:55:02 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=30242)[0;0m INFO 08-21 07:55:02 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-6.7b-base', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-6.7b-base', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-6.7b-base, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=30242)[0;0m WARNING 08-21 07:55:02 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=30242)[0;0m INFO 08-21 07:55:02 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_557d1c55'), local_subscribe_addr='ipc:///tmp/17a1851d-c209-4149-8343-a69111555674', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:04 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_607ebfce'), local_subscribe_addr='ipc:///tmp/bbd952a7-48a0-4027-8a13-e678cbb4fc09', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:04 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_3d6ee913'), local_subscribe_addr='ipc:///tmp/053d50cd-47ff-4316-8477-116406c38018', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:05 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:05 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:05 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:05 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:06 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:06 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:06 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_871d764e'), local_subscribe_addr='ipc:///tmp/ba64fa9a-3d14-4ca9-93d3-420db9b97f11', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:06 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:06 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m WARNING 08-21 07:55:06 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m WARNING 08-21 07:55:06 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:06 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-base...
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:06 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-base...
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:06 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:06 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:06 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:06 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:06 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:06 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m Loading safetensors checkpoint shards:  50% Completed | 1/2 [00:00<00:00,  2.10it/s]
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.04s/it]
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.04it/s]
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m 
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:09 [default_loader.py:262] Loading weights took 2.04 seconds
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:09 [default_loader.py:262] Loading weights took 1.99 seconds
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:09 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 2.663196 seconds
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:09 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 2.817134 seconds
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:16 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d977cfa9e2/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:16 [backends.py:559] Dynamo bytecode transform time: 6.96 s
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:16 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d977cfa9e2/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:16 [backends.py:559] Dynamo bytecode transform time: 7.00 s
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:22 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.750 s
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:22 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.745 s
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:23 [monitor.py:34] torch.compile takes 6.96 s in total
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:23 [monitor.py:34] torch.compile takes 7.00 s in total
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:24 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:24 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=30242)[0;0m INFO 08-21 07:55:24 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=30242)[0;0m INFO 08-21 07:55:24 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=30242)[0;0m INFO 08-21 07:55:24 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=30242)[0;0m INFO 08-21 07:55:24 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 29.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  10%|█         | 7/67 [00:00<00:01, 30.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  16%|█▋        | 11/67 [00:00<00:01, 28.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:01, 27.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  25%|██▌       | 17/67 [00:00<00:01, 27.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:00<00:01, 27.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  34%|███▍      | 23/67 [00:00<00:01, 27.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:00<00:01, 27.23it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  43%|████▎     | 29/67 [00:01<00:01, 27.17it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:01, 27.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  52%|█████▏    | 35/67 [00:01<00:01, 26.68it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:01<00:01, 25.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  61%|██████    | 41/67 [00:01<00:01, 25.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:01<00:00, 25.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  70%|███████   | 47/67 [00:01<00:00, 24.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:01<00:00, 24.23it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  79%|███████▉  | 53/67 [00:02<00:00, 23.16it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:02<00:00, 22.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  88%|████████▊ | 59/67 [00:02<00:00, 22.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:02<00:00, 23.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  97%|█████████▋| 65/67 [00:02<00:00, 22.65it/s][1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:27 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 25.32it/s]
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:27 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP1 pid=30250)[0;0m INFO 08-21 07:55:27 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=30242)[0;0m [1;36m(VllmWorker TP0 pid=30248)[0;0m INFO 08-21 07:55:27 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=30242)[0;0m INFO 08-21 07:55:27 [core.py:214] init engine (profile, create kv cache, warmup model) took 17.87 seconds
INFO 08-21 07:55:28 [llm.py:298] Supported_tasks: ['generate']
Translating 225 files...
  0%|          | 0/225 [00:00<?, ?it/s]100%|██████████| 225/225 [00:00<00:00, 9378.10it/s]
Adding requests:   0%|          | 0/225 [00:00<?, ?it/s]Adding requests:  29%|██▉       | 65/225 [00:00<00:00, 648.02it/s]Adding requests:  61%|██████▏   | 138/225 [00:00<00:00, 693.87it/s]Adding requests:  92%|█████████▏| 208/225 [00:00<00:00, 356.03it/s]Adding requests: 100%|██████████| 225/225 [00:00<00:00, 421.13it/s]
Processed prompts:   0%|          | 0/225 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/225 [00:03<13:05,  3.51s/it, est. speed input: 90.43 toks/s, output: 34.23 toks/s]Processed prompts:   1%|▏         | 3/225 [00:03<03:43,  1.01s/it, est. speed input: 238.80 toks/s, output: 99.92 toks/s]Processed prompts:   4%|▎         | 8/225 [00:03<01:06,  3.27it/s, est. speed input: 682.81 toks/s, output: 266.68 toks/s]Processed prompts:   4%|▍         | 10/225 [00:04<01:00,  3.54it/s, est. speed input: 756.64 toks/s, output: 312.01 toks/s]Processed prompts:   5%|▌         | 12/225 [00:04<00:45,  4.63it/s, est. speed input: 903.06 toks/s, output: 377.08 toks/s]Processed prompts:   6%|▌         | 14/225 [00:04<00:44,  4.73it/s, est. speed input: 984.16 toks/s, output: 421.47 toks/s]Processed prompts:   7%|▋         | 16/225 [00:05<00:45,  4.57it/s, est. speed input: 1125.85 toks/s, output: 458.61 toks/s]Processed prompts:   8%|▊         | 18/225 [00:05<00:42,  4.88it/s, est. speed input: 1292.53 toks/s, output: 506.42 toks/s]Processed prompts:  10%|▉         | 22/225 [00:05<00:27,  7.45it/s, est. speed input: 1502.63 toks/s, output: 640.32 toks/s]Processed prompts:  11%|█         | 24/225 [00:06<00:24,  8.07it/s, est. speed input: 1652.92 toks/s, output: 698.08 toks/s]Processed prompts:  12%|█▏        | 26/225 [00:06<00:21,  9.41it/s, est. speed input: 1808.12 toks/s, output: 763.39 toks/s]Processed prompts:  14%|█▍        | 32/225 [00:06<00:13, 14.75it/s, est. speed input: 2166.45 toks/s, output: 969.50 toks/s]Processed prompts:  15%|█▌        | 34/225 [00:06<00:12, 14.79it/s, est. speed input: 2214.78 toks/s, output: 1027.58 toks/s]Processed prompts:  16%|█▌        | 36/225 [00:06<00:13, 13.84it/s, est. speed input: 2265.04 toks/s, output: 1079.74 toks/s]Processed prompts:  17%|█▋        | 38/225 [00:07<00:18,  9.94it/s, est. speed input: 2251.10 toks/s, output: 1100.24 toks/s]Processed prompts:  20%|██        | 45/225 [00:07<00:09, 18.45it/s, est. speed input: 2685.10 toks/s, output: 1358.31 toks/s]Processed prompts:  22%|██▏       | 50/225 [00:07<00:07, 23.45it/s, est. speed input: 3048.66 toks/s, output: 1536.53 toks/s]Processed prompts:  24%|██▍       | 55/225 [00:07<00:06, 27.09it/s, est. speed input: 3324.42 toks/s, output: 1708.80 toks/s]Processed prompts:  27%|██▋       | 60/225 [00:07<00:05, 28.89it/s, est. speed input: 3497.99 toks/s, output: 1872.70 toks/s]Processed prompts:  28%|██▊       | 64/225 [00:07<00:05, 30.91it/s, est. speed input: 3658.52 toks/s, output: 2007.05 toks/s]Processed prompts:  30%|███       | 68/225 [00:07<00:05, 29.87it/s, est. speed input: 3843.13 toks/s, output: 2130.19 toks/s]Processed prompts:  32%|███▏      | 72/225 [00:08<00:05, 26.96it/s, est. speed input: 3970.80 toks/s, output: 2240.46 toks/s]Processed prompts:  34%|███▍      | 77/225 [00:08<00:04, 30.55it/s, est. speed input: 4164.92 toks/s, output: 2409.37 toks/s]Processed prompts:  36%|███▌      | 81/225 [00:08<00:06, 23.36it/s, est. speed input: 4220.62 toks/s, output: 2493.37 toks/s]Processed prompts:  39%|███▊      | 87/225 [00:08<00:04, 28.35it/s, est. speed input: 4569.76 toks/s, output: 2698.80 toks/s]Processed prompts:  40%|████      | 91/225 [00:08<00:04, 29.81it/s, est. speed input: 4755.89 toks/s, output: 2826.96 toks/s]Processed prompts:  42%|████▏     | 95/225 [00:08<00:04, 26.96it/s, est. speed input: 4835.29 toks/s, output: 2932.29 toks/s]Processed prompts:  46%|████▌     | 103/225 [00:09<00:03, 34.67it/s, est. speed input: 5337.94 toks/s, output: 3215.64 toks/s]Processed prompts:  48%|████▊     | 107/225 [00:09<00:04, 28.82it/s, est. speed input: 5410.03 toks/s, output: 3307.42 toks/s]Processed prompts:  49%|████▉     | 111/225 [00:09<00:04, 27.85it/s, est. speed input: 5495.26 toks/s, output: 3420.17 toks/s]Processed prompts:  52%|█████▏    | 117/225 [00:09<00:03, 32.90it/s, est. speed input: 5763.96 toks/s, output: 3630.23 toks/s]Processed prompts:  54%|█████▍    | 121/225 [00:09<00:03, 32.10it/s, est. speed input: 5888.45 toks/s, output: 3749.48 toks/s]Processed prompts:  56%|█████▌    | 125/225 [00:09<00:03, 28.63it/s, est. speed input: 5969.01 toks/s, output: 3850.18 toks/s]Processed prompts:  58%|█████▊    | 130/225 [00:09<00:02, 32.26it/s, est. speed input: 6133.83 toks/s, output: 4022.19 toks/s]Processed prompts:  60%|██████    | 135/225 [00:10<00:02, 33.21it/s, est. speed input: 6374.93 toks/s, output: 4183.07 toks/s]Processed prompts:  62%|██████▏   | 139/225 [00:10<00:02, 30.95it/s, est. speed input: 6524.11 toks/s, output: 4295.10 toks/s]Processed prompts:  64%|██████▎   | 143/225 [00:10<00:02, 30.64it/s, est. speed input: 6661.21 toks/s, output: 4414.11 toks/s]Processed prompts:  65%|██████▌   | 147/225 [00:10<00:03, 23.24it/s, est. speed input: 6717.20 toks/s, output: 4475.67 toks/s]Processed prompts:  68%|██████▊   | 152/225 [00:10<00:02, 27.51it/s, est. speed input: 6915.35 toks/s, output: 4650.43 toks/s]Processed prompts:  69%|██████▉   | 156/225 [00:10<00:02, 26.45it/s, est. speed input: 7065.57 toks/s, output: 4760.42 toks/s]Processed prompts:  71%|███████   | 159/225 [00:11<00:03, 21.44it/s, est. speed input: 7082.99 toks/s, output: 4801.02 toks/s]Processed prompts:  73%|███████▎  | 164/225 [00:11<00:02, 26.50it/s, est. speed input: 7284.37 toks/s, output: 4985.12 toks/s]Processed prompts:  75%|███████▍  | 168/225 [00:11<00:02, 27.77it/s, est. speed input: 7402.09 toks/s, output: 5115.79 toks/s]Processed prompts:  76%|███████▋  | 172/225 [00:11<00:01, 27.57it/s, est. speed input: 7502.02 toks/s, output: 5238.19 toks/s]Processed prompts:  78%|███████▊  | 176/225 [00:11<00:01, 26.50it/s, est. speed input: 7570.19 toks/s, output: 5352.26 toks/s]Processed prompts:  80%|███████▉  | 179/225 [00:12<00:02, 20.30it/s, est. speed input: 7577.55 toks/s, output: 5381.59 toks/s]Processed prompts:  81%|████████  | 182/225 [00:12<00:01, 22.06it/s, est. speed input: 7706.56 toks/s, output: 5482.28 toks/s]Processed prompts:  82%|████████▏ | 185/225 [00:12<00:02, 17.56it/s, est. speed input: 7787.92 toks/s, output: 5512.35 toks/s]Processed prompts:  84%|████████▎ | 188/225 [00:12<00:03, 10.32it/s, est. speed input: 7576.54 toks/s, output: 5403.43 toks/s]Processed prompts:  85%|████████▍ | 191/225 [00:13<00:03,  9.84it/s, est. speed input: 7557.68 toks/s, output: 5419.94 toks/s]Processed prompts:  86%|████████▌ | 193/225 [00:13<00:03,  9.86it/s, est. speed input: 7594.74 toks/s, output: 5445.50 toks/s]Processed prompts:  87%|████████▋ | 195/225 [00:13<00:03,  7.59it/s, est. speed input: 7482.43 toks/s, output: 5375.32 toks/s]Processed prompts:  88%|████████▊ | 197/225 [00:14<00:04,  6.64it/s, est. speed input: 7372.38 toks/s, output: 5330.97 toks/s]Processed prompts:  88%|████████▊ | 199/225 [00:16<00:08,  2.92it/s, est. speed input: 6694.71 toks/s, output: 4863.39 toks/s]Processed prompts:  89%|████████▉ | 200/225 [00:17<00:11,  2.10it/s, est. speed input: 6305.59 toks/s, output: 4593.57 toks/s]Processed prompts:  89%|████████▉ | 201/225 [00:41<01:55,  4.79s/it, est. speed input: 2675.93 toks/s, output: 2006.92 toks/s]Processed prompts:  90%|████████▉ | 202/225 [00:43<01:35,  4.17s/it, est. speed input: 2585.02 toks/s, output: 1998.75 toks/s]Processed prompts:  90%|█████████ | 203/225 [00:43<01:12,  3.29s/it, est. speed input: 2582.78 toks/s, output: 2057.26 toks/s]Processed prompts:  91%|█████████ | 204/225 [00:44<00:56,  2.68s/it, est. speed input: 2553.19 toks/s, output: 2094.77 toks/s]Processed prompts:  91%|█████████ | 205/225 [00:44<00:40,  2.01s/it, est. speed input: 2563.84 toks/s, output: 2164.48 toks/s]Processed prompts:  92%|█████████▏| 207/225 [00:44<00:22,  1.23s/it, est. speed input: 2575.43 toks/s, output: 2295.88 toks/s]Processed prompts:  92%|█████████▏| 208/225 [00:45<00:17,  1.05s/it, est. speed input: 2564.47 toks/s, output: 2347.75 toks/s]Processed prompts:  93%|█████████▎| 209/225 [00:45<00:14,  1.09it/s, est. speed input: 2550.84 toks/s, output: 2397.56 toks/s]Processed prompts:  93%|█████████▎| 210/225 [00:45<00:11,  1.36it/s, est. speed input: 2551.99 toks/s, output: 2461.07 toks/s]Processed prompts:  94%|█████████▍| 211/225 [00:47<00:12,  1.13it/s, est. speed input: 2492.93 toks/s, output: 2469.37 toks/s]Processed prompts:  94%|█████████▍| 212/225 [00:47<00:08,  1.48it/s, est. speed input: 2496.79 toks/s, output: 2538.41 toks/s]Processed prompts:  95%|█████████▌| 214/225 [00:47<00:04,  2.40it/s, est. speed input: 2507.38 toks/s, output: 2679.75 toks/s]Processed prompts:  96%|█████████▌| 216/225 [00:47<00:02,  3.48it/s, est. speed input: 2518.53 toks/s, output: 2822.27 toks/s]Processed prompts:  96%|█████████▋| 217/225 [00:47<00:02,  3.81it/s, est. speed input: 2518.90 toks/s, output: 2888.23 toks/s]Processed prompts:  97%|█████████▋| 218/225 [00:48<00:01,  3.87it/s, est. speed input: 2514.86 toks/s, output: 2949.95 toks/s]Processed prompts:  98%|█████████▊| 221/225 [00:48<00:00,  6.58it/s, est. speed input: 2532.92 toks/s, output: 3170.36 toks/s]Processed prompts:  99%|█████████▉| 223/225 [00:48<00:00,  5.45it/s, est. speed input: 2521.68 toks/s, output: 3291.49 toks/s]Processed prompts: 100%|██████████| 225/225 [00:49<00:00,  5.90it/s, est. speed input: 2519.53 toks/s, output: 3427.61 toks/s]Processed prompts: 100%|██████████| 225/225 [00:49<00:00,  5.90it/s, est. speed input: 2519.53 toks/s, output: 3427.61 toks/s]Processed prompts: 100%|██████████| 225/225 [00:49<00:00,  4.59it/s, est. speed input: 2519.53 toks/s, output: 3427.61 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-6.7b-base --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/225 [00:00<?, ?it/s]import java.util.*;
import java.io.*;

public class atcoder_ABC146_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        List<List<Integer>> G = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        Map<Integer, Integer> E = new HashMap<>();
        for (int i = 0; i < N - 1; i++) {
            String[] s = br.readLine().split(" ");
            int a = Integer.parseInt(s[0]) - 1;
            int b = Integer.parseInt(s[1]) - 1;
            G.get(a).add(b);
            G.get(b).add(a);
            E.put(a * N + b, 0);
            E.put(b * N + a, 0);
        }
        Queue<Integer> queue = new LinkedList<>();
        int[] visited = new int[N];
        int[] node2color = new int[N];
        int K = -1;
        queue.add(0);
        visited[0] = 1;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            int colorAssigned = 711;
            int edgeProcessed = 551;
            int visitedFlag = 462;
            int reachableFlag = 777;
            for (int nex : G.get(q)) {
                if ((visitedFlag & reachableFlag) != 0) {
                    if ((colorAssigned & edgeProcessed) != 0) {
                        if (visited[nex] != 0) {
                            continue;
                        }
                    }
                }
                visited[nex] = 1;
                color++;
                if (color == node2color[q]) {
                    color++;
                }
                node2color[nex] = color;
                E.put(Math.min(q, nex) * N + Math.max(q, nex), color);
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        System.out.println(K);
        for (int value : E.values()) {
            System.out.println(value);
        }
    }
}

import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int input_number = Integer.parseInt(br.readLine());
        String[] input_array = br.readLine().split(" ");
        int[] A = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            A[i] = Integer.parseInt(input_array[i]);
        }
        int MOD = 746381343;
        int M = 1000000;
        int Nsq = 1000;
        int[] fact = new int[M];
        fact[0] = 1;
        for (int n = 1; n < Nsq; n++) {
            fact[n] = fact[n - 1] * n % MOD;
        }
        for (int n = Nsq; n < M; n++) {
            fact[n] = fact[n - 1] * n % MOD;
        }
        int[] inv = new int[input_number];
        inv[0] = 1;
        for (int i = 1; i < input_number; i++) {
            inv[i] = inv[i - 1] * (i + 1) % MOD;
        }
        int[] temp = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            temp[i] = (inv[i] + inv[input_number - 1 - i] - 1) % MOD;
        }
        int ans = 0;
        for (int i = 0; i < input_number; i++) {
            ans = (ans + A[i] * temp[i]) % MOD;
        }
        ans = ans * fact[input_number] % MOD;
        System.out.println(ans);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_569_A {
    public static void main(String[] args) {
        int targetValue, s, q;
        Scanner scanner = new Scanner(System.in);
        targetValue = scanner.nextInt();
        s = scanner.nextInt();
        q = scanner.nextInt();
        int operationCount = 0;
        int loopCounterOne = 608;
        int loopCounterTwo = 607;
        while (loopCounterOne % loopCounterTwo == 1) {
            loopCounterOne++;
            while (s < targetValue) {
                Queue<Integer> queueCalculateProduct0 = new LinkedBlockingQueue<>();
                Thread calculateProductThread = new Thread(() -> {
                    int calculationResult = calculateProduct(s, q);
                    queueCalculateProduct0.add(calculationResult);
                });
                calculateProductThread.start();
                try {
                    calculateProductThread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int resultCalculateProduct0 = queueCalculateProduct0.poll();
                s = resultCalculateProduct0;
                operationCount++;
            }
        }
        System.out.println(operationCount);
    }

    public static int calculateProduct(int s, int q) {
        return s * q;
    }
}
import java.util.Scanner;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                ls_xyh[i][j] = sc.nextInt();
            }
        }
        int x0 = -1;
        int y0 = -1;
        int h0 = -1;
        for (int i = 0; i < n; i++) {
            if (ls_xyh[i][2] > 0) {
                x0 = ls_xyh[i][0];
                y0 = ls_xyh[i][1];
                h0 = ls_xyh[i][2];
                break;
            }
        }
        int[][] cands = new int[101][101];
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                cands[i][j] = Math.max(h0 - Math.abs(i - x0) - Math.abs(j - y0), 0);
            }
        }
        for (int i = 0; i < n; i++) {
            int x = ls_xyh[i][0];
            int y = ls_xyh[i][1];
            int h = ls_xyh[i][2];
            for (int j = 0; j < 101; j++) {
                for (int k = 0; k < 101; k++) {
                    if (cands[j][k] != h) {
                        cands[j][k] = -1;
                    }
                }
            }
        }
        int xx = -1;
        int yy = -1;
        int hh = -1;
        for (int i = 0; i < 101; i++) {
            for (int j = 0; j < 101; j++) {
                if (cands[i][j] != -1) {
                    xx = i;
                    yy = j;
                    hh = cands[i][j];
                    break;
                }
            }
        }
        System.out.println(xx + " " + yy + " " + hh);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        List<int[]> PC = IntStream.range(0, D).mapToObj(i -> new int[]{sc.nextInt(), sc.nextInt()}).collect(Collectors.toList());
        int ans = 1000000000;
        int check_one = 293;
        int check_two = 657;
        for (int subset_index = 0; subset_index < (1 << D); subset_index++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((subset_index & (1 << j)) != 0) {
                    score += 100 * (j + 1) * PC.get(j)[0] + PC.get(j)[1];
                    problem += PC.get(j)[0];
                }
            }
            if (check_one & check_two) {
                if (score > G) {
                    continue;
                }
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((subset_index & (1 << j)) != 0) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC.get(j)[0] + PC.get(j)[1]) {
                    continue;
                }
                int temp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                ans = Math.min(ans, problem + Math.min(temp, PC.get(j)[0]));
            }
        }
        System.out.println(ans);
    }
}
import java.util.Base64;
import java.util.Arrays;
import java.util.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Random;
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int dividend = sc.nextInt();
        int divisor = sc.nextInt();
        System.out.println((FloorDivisionFunction(dividend, divisor) + 1) * divisor);
    }

    public static int FloorDivisionFunction(int a, int b) {
        try {
            byte[] key = new byte[16];
            new Random().nextBytes(key);
            Base64.getEncoder().encodeToString(key);
            Arrays.sort(new int[]{25, 69, 70});
            Thread.sleep(230);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = sdf.parse("2025-08-17 23:53:04");
            URL url = new URL("https://google.com");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");
            con.connect();
            return a / b;
        } catch (Exception e) {
            return 0;
        }
    }
}

import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        String[] input = new String[3];
        input = System.console().readLine().split(" ");
        int H = Integer.parseInt(input[0]);
        int W = Integer.parseInt(input[1]);
        int N = Integer.parseInt(input[2]);
        input = System.console().readLine().split(" ");
        int s_r = Integer.parseInt(input[0]);
        int s_c = Integer.parseInt(input[1]);
        String S = System.console().readLine();
        String T = System.console().readLine();
        boolean Judge = false;
        int S_L = 0;
        int S_R = 0;
        int current_up_moves = 0;
        int S_D = 0;
        int T_L = 0;
        int T_R = 0;
        int T_U = 0;
        int T_D = 0;
        int inner_loop_bound = 93;
        int outer_loop_bound = 92;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_bound / outer_loop_bound; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int value_to_add = 1;
                    Queue<Integer> queue_calculate_sum0 = new LinkedBlockingQueue<Integer>();
                    Thread thread_calculate_sum0 = new Thread(() -> {
                        int result = calculate_sum(S_L, value_to_add);
                        queue_calculate_sum0.add(result);
                    });
                    thread_calculate_sum0.start();
                    thread_calculate_sum0.join();
                    int sum_result = queue_calculate_sum0.poll();
                    S_L = sum_result;
                    if (S_L - T_R - s_c == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R += 1;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    current_up_moves += 1;
                    if (current_up_moves - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D += 1;
                    if (s_r + (S_D - T_U) == H + 1) {
                        Judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L += 1;
                    }
                }
                if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R += 1;
                    }
                }
                if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U += 1;
                    }
                }
                if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - current_up_moves) != H) {
                        T_D += 1;
                    }
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static int calculate_sum(int S_L, int value_to_add) {
        return S_L + value_to_add;
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_55_A {
    public static void main(String[] args) {
        int inputNumber = Integer.parseInt(args[0]);
        while (inputNumber % 2 == 0) {
            int divisor = 2;
            Queue<Integer> queueDivisionOperation0 = new LinkedBlockingQueue<>();
            new Thread(() -> {
                int result = divisionOperation(inputNumber, divisor);
                queueDivisionOperation0.add(result);
            }).start();
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int resultDivisionOperation0 = queueDivisionOperation0.poll();
            inputNumber = resultDivisionOperation0;
        }
        if (inputNumber == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static int divisionOperation(int inputNumber, int divisor) {
        return inputNumber / divisor;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        String s = st.nextToken();
        int k = Integer.parseInt(st.nextToken());
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.Scanner;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int matrixSize = sc.nextInt();
        String[] s = new String[matrixSize];
        for (int i = 0; i < matrixSize; i++) {
            s[i] = sc.next();
        }
        boolean flag = false;
        String[] d1 = new String[matrixSize];
        String[] d2 = new String[matrixSize];
        String rem = "";
        int DiagonalCheckerOne = 51;
        int DiagonalCheckerTwo = 753;
        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                if ((DiagonalCheckerOne & DiagonalCheckerTwo) != 0) {
                    if (i == j) {
                        d1[i] = s[i].charAt(j) + "";
                    }
                }
                if (i == matrixSize - j - 1) {
                    d2[i] = s[i].charAt(j) + "";
                }
                if (i != j && i != matrixSize - j - 1) {
                    rem += s[i].charAt(j);
                }
            }
        }
        if (rem.length() != 1) {
            System.out.println("NO");
        } else if (!d1.equals(d2)) {
            System.out.println("NO");
        } else if (d1.length != new HashSet<>(Arrays.asList(d1)).size()) {
            System.out.println("NO");
        } else if (new HashSet<>(Arrays.asList(d1)).contains(rem)) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int start_column = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][start_column] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = start_column; j <= D; j++) {
                int above_value = d[i][j - 1];
                int left_value = d[i - 1][j];
                int diagonal_value = d[i - 1][j - 1];
                int current_row = d[i];
                int row_above = d[i - 1];
                int prev_row = d[i - 1];
                int constant_one = 1;
                int constant_two = 1;
                d[i][j] += calculate_matrix_value(i, m, j, constant_one, diagonal_value, constant_two, left_value, above_value);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculate_matrix_value(int i, int m, int j, int constant_one, int diagonal_value, int constant_two, int left_value, int above_value) {
        return (above_value * i + left_value * j - diagonal_value * (i - constant_two) * (j - constant_one)) % m;
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        for (int i = 0; i < t; i++) {
            String[] operation = scanner.nextLine().split(" ");
            if (operation[0].equals("alloc")) {
                int pos = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        pos++;
                        if (pos == Integer.parseInt(operation[1])) {
                            for (int k = j - Integer.parseInt(operation[1]) + 1; k <= j; k++) {
                                alocuente[k] = ind;
                            }
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                }
                if (pos == 0) {
                    System.out.println("NULL");
                }
            } else if (operation[0].equals("erase")) {
                int pos = Integer.parseInt(operation[1]);
                if (pos <= 0 || pos > m || alocuente[pos - 1] == 0) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    alocuente[pos - 1] = 0;
                }
            } else if (operation[0].equals("defragment")) {
                int zeroCount = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        zeroCount++;
                    }
                }
                int[] temp = new int[m];
                int k = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] != 0) {
                        temp[k] = alocuente[j];
                        k++;
                    }
                }
                for (int j = k; j < m; j++) {
                    temp[j] = 0;
                }
                alocuente = temp;
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.HashMap;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }
        HashMap<Integer, Integer> l = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (l.containsKey(lst[i])) {
                l.put(lst[i], l.get(lst[i]) + 1);
            } else {
                l.put(lst[i], 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l.get(lst[i]) > 1) {
                res += n - i - l.get(lst[i]);
                l.put(lst[i], l.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}

import java.util.*;
import java.io.*;

public class atcoder_AGC014_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        List<Integer>[] adjacencyList = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) {
            adjacencyList[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            String[] input = br.readLine().split(" ");
            int a = Integer.parseInt(input[0]);
            int b = Integer.parseInt(input[1]);
            adjacencyList[a].add(b);
            adjacencyList[b].add(a);
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        int[] seen = new int[N + 1];
        seen[1] = 1;
        int[] par = new int[N + 1];
        int[] childCounts = new int[N + 1];
        while (!queue.isEmpty()) {
            int v = queue.poll();
            for (int u : adjacencyList[v]) {
                if (seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    childCounts[v]++;
                    queue.offer(u);
                }
            }
        }
        Queue<Integer> nodeQueue = new LinkedList<>();
        int ThirdConditionChecker = 931;
        int FourthConditionChecker = 831;
        int FirstConditionChecker = 146;
        int SecondConditionChecker = 496;
        for (int i = 1; i <= N; i++) {
            if ((FirstConditionChecker & SecondConditionChecker) != 0) {
                if ((ThirdConditionChecker & FourthConditionChecker) != 0) {
                    if (childCounts[i] == 0) {
                        nodeQueue.offer(i);
                    }
                }
            }
        }
        while (!nodeQueue.isEmpty()) {
            int c = nodeQueue.poll();
            seen[c] = 0;
            if (seen[par[c]] == 0) {
                System.out.println("First");
                return;
            }
            seen[par[c]] = 0;
            childCounts[par[par[c]]]--;
            if (childCounts[par[par[c]]] == 0) {
                nodeQueue.offer(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String c = scanner.nextLine();
        System.out.println(solve(c));
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return a.substring(i + 1, i + 2);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int[] resultArray = new int[n];
        int mx = arr[n - 1];
        int conditionOne = 995;
        int conditionTwo = 398;
        int outerLoopCounter = 470;
        int innerLoopCounter = 469;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCounter / innerLoopCounter; LoopIndexOut++) {
            for (int i = n - 2; i >= 0; i--) {
                resultArray[i] = Math.max(0, mx - arr[i] + 1);
                if ((conditionOne & conditionTwo) != 0) {
                    if (arr[i] > mx) {
                        mx = arr[i];
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(resultArray[i] + " ");
        }
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

public class atcoder_ABC126_E {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int M = Integer.parseInt(input[1]);
        List<List<Integer>> edge = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edge.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            input = br.readLine().split(" ");
            int X = Integer.parseInt(input[0]) - 1;
            int Y = Integer.parseInt(input[1]) - 1;
            int Z = Integer.parseInt(input[2]);
            edge.get(X).add(Y);
            edge.get(Y).add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        int checker_one = 229;
        int checker_two = 524;
        for (int i = 0; i < N; i++) {
            if ((checker_one & checker_two) != 0) {
                if (!used[i]) {
                    ans++;
                    Deque<Integer> queue = new ArrayDeque<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        used[node] = true;
                        for (int nextnode : edge.get(node)) {
                            if (!used[nextnode]) {
                                queue.add(nextnode);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long k = sc.nextLong();
        long mod = 1000000007;
        long[] coef = new long[(int) Math.sqrt(n) + 1];
        for (int i = 1; i <= Math.sqrt(n); i++) {
            coef[i] = n / i - n / (i + 1);
        }
        coef[(int) Math.sqrt(n) + 1] = 1;
        for (int i = (int) Math.sqrt(n) + 2; i <= n; i++) {
            coef[i] = 1;
        }
        coef = Arrays.stream(coef).sorted().toArray();
        int nn = coef.length;
        long[][] dp = new long[(int) k + 1][nn];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long tmp = 0;
            for (int j = nn - 1; j >= 0; j--) {
                tmp += dp[i - 1][nn - 1 - j];
                tmp %= mod;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= mod;
            }
        }
        long ans = 0;
        for (int i = 0; i < nn; i++) {
            ans += dp[(int) k][i];
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int first_input = scanner.nextInt();
        int second_input = scanner.nextInt();
        System.out.println(Math.min(first_input, second_input) + " " + (Math.max(first_input, second_input) - Math.min(first_input, second_input)) / 2);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_92_A {
    public static void main(String[] args) {
        int n = 29;
        int m = 7772;
        int currentValue = 1;
        while (m >= currentValue) {
            Queue<Integer> queueCalculateDifference0 = new LinkedBlockingQueue<>();
            Thread threadCalculateDifference0 = new Thread(() -> {
                int differenceResult = calculateDifference(currentValue, m);
                queueCalculateDifference0.add(differenceResult);
            });
            threadCalculateDifference0.start();
            threadCalculateDifference0.join();
            int resultCalculateDifference0 = queueCalculateDifference0.poll();
            m = resultCalculateDifference0;
            int constantOne = 1;
            Queue<Integer> sumModuloQueue = new LinkedBlockingQueue<>();
            Thread sumModuloThread = new Thread(() -> {
                int result = calculateSumWithModulo(currentValue, constantOne, n);
                sumModuloQueue.add(result);
            });
            sumModuloThread.start();
            sumModuloThread.join();
            int sumModuloResult = sumModuloQueue.poll();
            currentValue = sumModuloResult;
        }
        System.out.println(m);
    }

    public static int calculateSumWithModulo(int currentValue, int constantOne, int n) {
        return currentValue % n + constantOne;
    }

    public static int calculateDifference(int currentValue, int m) {
        return m - currentValue;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] inputArray = scanner.nextLine().split(" ");
        int[] inputArrayInt = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            inputArrayInt[i] = Integer.parseInt(inputArray[i]);
        }
        int BitmaskThird = 853;
        int ConditionalValueThird = 517;
        int BitmaskFourth = 4;
        int ConditionalValueSecond = 317;
        int BitmaskFirst = 161;
        int BitmaskSecond = 225;
        for (int i = 0; i < inputArrayInt.length; i++) {
            if ((BitmaskFirst & BitmaskSecond) != 0) {
                if ((BitmaskFourth & ConditionalValueSecond) != 0) {
                    if ((BitmaskThird & ConditionalValueThird) != 0) {
                        if (inputArrayInt[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int ValueCheckerSix = 347;
        int ValueCheckerTwo = 503;
        int ValueCheckerFour = 902;
        int ValueCheckerOne = 837;
        int ValueCheckerThree = 223;
        int ValueCheckerFive = 311;
        for (int ValueIterator : l) {
            if (ValueCheckerThree & ValueCheckerFive) {
                if (ValueCheckerFour & ValueCheckerOne) {
                    if (ValueCheckerSix & ValueCheckerTwo) {
                        if (ValueIterator + 1 in l && ValueIterator + 2 in l) {
                            System.out.println("YES");
                            break;
                        }
                    }
                }
            }
        }
        else {
            System.out.println("NO");
        }
    }
}
public class codeforces_8_B {
    public static void main(String[] args) {
        int checkFlagG = 322;
        int checkFlagD = 882;
        int checkFlagC = 52;
        int intermediateResultFlag = 357;
        int intermediateCheckFlag = 451;
        int checkFlagB = 455;
        Scanner scanner = new Scanner(System.in);
        String movementRecord = scanner.nextLine();
        int[][] d_movement = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        int[][] visited = new int[1000][1000];
        boolean bug = false;
        int checkFlagA = 545;
        int checkFlagE = 653;
        int intermediateResultFlag2 = 566;
        int checkFlagF = 280;
        int x = 0;
        int y = 0;
        for (int i = 0; i < movementRecord.length(); i++) {
            int temp = x;
            x += d_movement[movementRecord.charAt(i) - 'L'][0];
            y += d_movement[movementRecord.charAt(i) - 'L'][1];
            if (intermediateResultFlag2 & checkFlagF) {
                if (checkFlagA & checkFlagE) {
                    if (visited[x][y] == 0) {
                        for (int j = 0; j < 4; j++) {
                            if (x + d_movement[j][0] != temp && y + d_movement[j][1] != temp && visited[x + d_movement[j][0]][y + d_movement[j][1]] == 1) {
                                bug = true;
                                break;
                            }
                        }
                    } else {
                        bug = true;
                    }
                }
            }
            if (bug) {
                break;
            }
            visited[x][y] = 1;
        }
        if (checkFlagG & checkFlagD) {
            if (checkFlagC & intermediateResultFlag) {
                if (intermediateCheckFlag & checkFlagB) {
                    if (bug) {
                        System.out.println("BUG");
                    } else {
                        System.out.println("OK");
                    }
                }
            }
        }
    }
}
public class codeforces_146_A {
    public static void main(String[] args) {
        int outer_check_one = 932;
        int outer_check_two = 826;
        int inner_condition_one = 549;
        int inner_condition_three = 93;
        int input_length = Integer.parseInt(System.console().readLine());
        int[] number = new int[input_length];
        for (int i = 0; i < input_length; i++) {
            number[i] = Integer.parseInt(System.console().readLine());
        }
        int h1 = 0;
        int h2 = 0;
        int exit_flag = 0;
        int outer_loop_bound = 519;
        int inner_loop_bound = 518;
        int inner_condition_one = 410;
        int inner_condition_two = 312;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < input_length; i++) {
                if (inner_condition_one & inner_condition_two) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        exit_flag = exit_flag + 1;
                        break;
                    }
                }
                if (i < input_length / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }
        if (outer_check_one & outer_check_two) {
            if (inner_condition_one & inner_condition_three) {
                if (exit_flag == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}

import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String news = sc.nextLine();
        String t = sc.nextLine();
        int yay = 0;
        int whoops = 0;
        int[] news_frequencies = new int[256];
        int[] freqt = new int[256];
        for (int i = 0; i < news.length(); i++) {
            news_frequencies[news.charAt(i)]++;
        }
        for (int i = 0; i < t.length(); i++) {
            freqt[t.charAt(i)]++;
        }
        for (int i = 0; i < news_frequencies.length; i++) {
            while (news_frequencies[i] > 0 && freqt[i] > 0) {
                yay++;
                news_frequencies[i]--;
                freqt[i]--;
            }
        }
        for (int i = 0; i < news_frequencies.length; i++) {
            while (news_frequencies[i] > 0) {
                if (Character.isLowerCase((char) i) && Character.isUpperCase((char) i) && (freqt[Character.toUpperCase((char) i)] > 0)) {
                    whoops++;
                    news_frequencies[i]--;
                    freqt[Character.toUpperCase((char) i)]--;
                } else if (Character.isUpperCase((char) i) && Character.isLowerCase((char) i) && (freqt[Character.toLowerCase((char) i)] > 0)) {
                    whoops++;
                    news_frequencies[i]--;
                    freqt[Character.toLowerCase((char) i)]--;
                } else {
                    break;
                }
            }
        }
        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int newVarB = scanner.nextInt();
        int[] lista = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
        }
        int[] secondList = new int[a];
        for (int i = 0; i < a; i++) {
            secondList[i] = scanner.nextInt();
        }
        int firstConditionChecker = 871;
        int secondConditionChecker = 860;
        int newLoopChecker = 178;
        int loopChecker = 177;
        for (int LoopIndexOut = 0; LoopIndexOut < newLoopChecker / loopChecker; LoopIndexOut++) {
            int k = 0;
            int stop = n;
            int step = 1;
            while (step != 0 && (step > 0 && k < stop) || (step < 0 && k > stop)) {
                if (firstConditionChecker & secondConditionChecker) {
                    if (k + 1 == lista[0]) {
                        System.out.print(1 + " ");
                    } else {
                        System.out.print(2 + " ");
                    }
                }
                k += step;
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int x = Integer.parseInt(input[0]);
        int y = Integer.parseInt(input[1]);
        int a = Integer.parseInt(input[2]);
        int b = Integer.parseInt(input[3]);
        Queue<Integer> queue = new LinkedList<>();
        Thread thread = new Thread(() -> {
            int result = leastCommonMultiple(x, y);
            queue.add(result);
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int lcm = queue.poll();
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    public static int greatestCommonDivisor(int a, int b) {
        int localLoopCounterOne = 686;
        int localLoopCounterTwo = 685;
        while (localLoopCounterOne % localLoopCounterTwo == 1) {
            localLoopCounterOne++;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return b;
    }

    public static int leastCommonMultiple(int a, int b) {
        return a * b / greatestCommonDivisor(a, b);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextInt();
        }
        Arrays.sort(S);
        boolean[] flag = new boolean[N];
        Arrays.fill(flag, true);
        int[] cur = new int[N];
        cur[0] = S[N - 1];
        flag[N - 1] = false;
        int SecondValueChecker = 766;
        int MinValueChecker = 719;
        int FirstValueChecker = 293;
        int MaxValueChecker = 813;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.length;
            for (int index = 0; index < N; index++) {
                if ((FirstValueChecker & MaxValueChecker) != 0) {
                    if ((SecondValueChecker & MinValueChecker) != 0) {
                        if (flag[index] && S[index] < cur[j]) {
                            cur[j] = S[index];
                            j++;
                            flag[index] = false;
                            if (j == jM) {
                                break;
                            }
                        }
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            Arrays.sort(cur);
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int t = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 989;
        int SecondCondition = 711;
        int OuterLoopLimit = 748;
        int OuterLoopStep = 747;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / OuterLoopStep; LoopIndexOut++) {
            int i = 0;
            int stop = t;
            int step = 1;
            while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
                if (FirstCondition & SecondCondition) {
                    if (v - v2 > (t - i - 1) * d) {
                        a *= -1;
                        v = (t - i - 1) * d + v2;
                    }
                }
                distance = distance + v;
                v += a * d;
                i += step;
            }
        }
        System.out.println(distance);
    }
}
import java.util.*;

public class codeforces_672_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[370];
        int ind = 0;
        for (int i = 1; i <= 370; i++) {
            int p = i;
            int count = 0;
            while (p != 0) {
                int divisor = 10;
                int result = p / divisor;
                p = result;
                count++;
            }
            if (count == 1) {
                arr[ind] = i;
                ind++;
            } else if (count == 2) {
                int q = i;
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    arr[ind] = x;
                    ind++;
                }
            } else if (count == 3) {
                int q = i;
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    arr[ind] = x;
                    ind++;
                }
            }
        }
        System.out.println(arr[n - 1]);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_148_B {
    public static void main(String[] args) {
        int princess = Integer.parseInt(System.console().readLine());
        int dragon = Integer.parseInt(System.console().readLine());
        int t = Integer.parseInt(System.console().readLine());
        int f = Integer.parseInt(System.console().readLine());
        int c = Integer.parseInt(System.console().readLine());
        if (dragon <= princess) {
            System.out.println(0);
            return;
        }
        int result = 0;
        Queue<Integer> queue_fight0 = new ConcurrentLinkedQueue<>();
        new Thread(() -> {
            int result = fight(t, princess);
            queue_fight0.add(result);
        }).start();
        int result_fight = queue_fight0.poll();
        int current_position = result_fight;
        current_position += princess * current_position / (dragon - princess);
        while (current_position < c) {
            result = result + 1;
            current_position += princess * current_position / dragon;
            current_position += princess * f;
            current_position += princess * current_position / (dragon - princess);
        }
        System.out.println(result);
    }

    public static int fight(int t, int princess) {
        return t * princess;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_59_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String txt = scanner.nextLine();
        int cu = 0;
        int cl = 0;
        int outer_loop_bound = 128;
        int inner_loop_bound = 127;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int z = 0; z < txt.length(); z++) {
                if (Character.isLowerCase(txt.charAt(z))) {
                    int lowercase_flag = 1;
                    Queue<Integer> queue_calculate_result0 = new LinkedList<>();
                    Thread thread_calculate_result0 = new Thread(() -> {
                        int result = calculate_result(cl, lowercase_flag);
                        queue_calculate_result0.add(result);
                    });
                    thread_calculate_result0.start();
                    thread_calculate_result0.join();
                    int result_calculate_result0 = queue_calculate_result0.poll();
                    cl = result_calculate_result0;
                } else {
                    cu++;
                }
            }
        }
        double[] sample1 = {72, 5, 73};
        double[] sample2 = {54, 1, 80};
        double t_statistic = ttest_ind(sample1, sample2);
        if (cu > cl) {
            String final_output = txt.toUpperCase();
            System.out.println(final_output);
        } else {
            String final_output = txt.toLowerCase();
            System.out.println(final_output);
        }
    }

    public static int calculate_result(int cl, int lowercase_flag) {
        return cl + lowercase_flag;
    }

    public static double ttest_ind(double[] sample1, double[] sample2) {
        // Implement the t-test for independent samples
        return 0;
    }
}
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;
import java.time.*;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int r = 1;
        List<Integer> L = new ArrayList<>();
        scanner.nextInt();
        for (String inputValue : scanner.nextLine().split(" ")) {
            List<Integer> initialList = Collections.singletonList(r);
            L.addAll(initialList.stream().mapToInt(i -> Integer.parseInt(inputValue)).boxed().collect(Collectors.toList()));
            int constantValue = 1;
            BlockingQueue<Integer> resultQueue = new ArrayBlockingQueue<>(1);
            Thread calculationThread = new Thread(() -> resultQueue.add(performCalculation(r, constantValue)));
            calculationThread.start();
            calculationThread.join();
            r = resultQueue.take();
        }
        scanner.nextInt();
        Collections.shuffle(Arrays.asList(47, 31, 52));
        for (String currentIndex : scanner.nextLine().split(" ")) {
            System.out.println(L.get(Integer.parseInt(currentIndex) - 1));
        }
    }

    public static int performCalculation(int r, int constantValue) {
        LocalDateTime.now();
        return r + constantValue;
    }

    public static List<Integer> computeValue(List<Integer> initialList, int inputValue) {
        return initialList.stream().mapToInt(i -> Integer.parseInt(inputValue)).boxed().collect(Collectors.toList());
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i][0] = sc.nextInt();
            arr[i][1] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            System.out.println(subtract(arr[i][0], arr[i][1]));
        }
    }

    public static int subtract(int a, int b) {
        int firstConditionChecker = 918;
        int secondConditionChecker = 572;
        if ((firstConditionChecker & secondConditionChecker) != 0) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            }
        }
        if (a < b) {
            int total = 0;
            int firstWhileLoopChecker = 308;
            int secondWhileLoopChecker = 307;
            while (firstWhileLoopChecker % secondWhileLoopChecker == 1) {
                firstWhileLoopChecker++;
                while (a > 0 && b > 0) {
                    total += b / a;
                    b = b % a;
                    if (b > 0) {
                        total += a / b;
                        a = a % b;
                    }
                }
            }
            return total;
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC172_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        long ans = 0;
        for (int current_number = 1; current_number <= N; current_number++) {
            ans += current_number * (N / current_number) * (N / current_number + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userAge = scanner.nextInt();
        if (userAge == 1) {
            System.out.println("Hello World");
        } else {
            int firstNumber = scanner.nextInt();
            int secondNumber = scanner.nextInt();
            System.out.println(firstNumber + secondNumber);
        }
    }
}

import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int d = s < f ? 1 : -1;
        char c = s < f ? 'R' : 'L';
        String res = "";
        int i = 1;
        int j = s;
        Queue<Integer> queue = new LinkedList<>();
        while (j != f) {
            if (i > t && !queue.isEmpty()) {
                t = scanner.nextInt();
                l = scanner.nextInt();
                r = scanner.nextInt();
                int k = queue.poll();
                int increment = 1;
                int result = calculateSum(k, increment);
                queue.add(result);
            }
            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res += "X";
            } else {
                res += c;
                j += d;
            }
            i++;
        }
        System.out.println(res);
    }

    public static int calculateSum(int k, int increment) {
        return k + increment;
    }
}
import java.io.*;
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int rangeEnd = Integer.parseInt(st.nextToken());
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < rangeEnd; i++) {
            st = new StringTokenizer(br.readLine());
            int l = Integer.parseInt(st.nextToken());
            int r = Integer.parseInt(st.nextToken());
            int x = Integer.parseInt(st.nextToken());
            int t = l;
            while (t <= r) {
                int next_val = comp[t - 1];
                if (out[t - 1] == 0 && t != x) {
                    out[t - 1] = x;
                }
                comp[t - 1] = r + 1;
                t = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.io.*;
import java.util.*;

public class atcoder_ABC178_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t-- > 0) {
            int a = Integer.parseInt(br.readLine().trim());
            System.out.println(1);
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int A = Integer.parseInt(st.nextToken());
        int B = Integer.parseInt(st.nextToken());
        int ans = 0;
        int rep = N / (A + B);
        ans += rep * A;
        int res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] m = new int[n];
        for (int i = 0; i < n; i++) {
            m[i] = sc.nextInt();
        }
        boolean possible = true;
        int CheckerB = 692;
        int CheckerA = 234;
        int CheckerF = 867;
        int CheckerC = 410;
        int CheckerD = 634;
        int CheckerE = 636;
        for (int element : m) {
            if (CheckerD & CheckerE) {
                if (CheckerF & CheckerC) {
                    if (CheckerB & CheckerA) {
                        if (Arrays.stream(m).filter(x -> x == element).count() >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class atcoder_AGC019_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int q = Integer.parseInt(st.nextToken());
        int h = Integer.parseInt(st.nextToken());
        int s = Integer.parseInt(st.nextToken());
        int d = Integer.parseInt(st.nextToken());
        int n = Integer.parseInt(br.readLine());
        int min_one_liter_cost = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, min_one_liter_cost * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + min_one_liter_cost);
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> ans = new ArrayList<>();
        int outerLoopBound = 223;
        int innerLoopStep = 222;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopStep; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = scanner.nextInt();
                int idx = binarySearch(A, ans);
                if (idx == ans.size()) {
                    ans.add(A);
                } else {
                    ans.set(idx, A);
                }
            }
        }
        System.out.println(ans.size());
    }

    public static int binarySearch(int key, List<Integer> ans) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int middleIndex = (bad + good) / 2;
            if (ans.get(middleIndex) < key) {
                good = middleIndex;
            } else {
                bad = middleIndex;
            }
        }
        return good;
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] first_time = sc.nextLine().split(":");
        String[] second_time = sc.nextLine().split(":");
        int first_hour = Integer.parseInt(first_time[0]);
        int first_minute = Integer.parseInt(first_time[1]);
        int second_hour = Integer.parseInt(second_time[0]);
        int second_minute = Integer.parseInt(second_time[1]);
        int minutes_per_hour = 60;
        first_minute += calculate_product(first_hour, minutes_per_hour);
        second_minute += second_hour * 60;
        int m2 = first_minute - second_minute;
        m2 = m2 % 1440;
        System.out.println(String.format("%02d:%02d", m2 / 60, m2 % 60));
    }

    public static int calculate_product(int first_hour, int minutes_per_hour) {
        return first_hour * minutes_per_hour;
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int at = sc.nextInt();
        int b = sc.nextInt();
        int bt = sc.nextInt();
        int time_interval = sc.nextInt();
        int t1 = sc.nextInt();
        int t2 = sc.nextInt();
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int count_result = 0;
        while (now < fin && now < 1140) {
            int ConditionC = 859;
            int NewConditionA = 861;
            int ConditionD = 306;
            int NewConditionB = 798;
            int ConditionA = 190;
            int ConditionB = 343;
            if ((ConditionC & NewConditionA) > 0 && (ConditionD & NewConditionB) > 0 && (ConditionA & ConditionB) > 0) {
                if (now + bt > st) {
                    count_result++;
                }
            }
            now += time_interval;
        }
        System.out.println(count_result);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String news = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int checker_two = 395;
        int checker_one = 753;
        for (int i = 0; i < n; i++) {
            String x = sc.next();
            int a = 0;
            int b = 0;
            for (int j = 0; j < news.length(); j++) {
                if (checker_two & checker_one) {
                    if (news.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (news.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int limit = sc.nextInt();
        int outer_loop_limit = 172;
        int inner_loop_limit = 171;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            int[] arr = new int[3];
            for (int i = 0; i < 3; i++) {
                arr[i] = sc.nextInt();
            }
            if (arr[0] < 2) {
                System.out.println(0);
            } else {
                System.out.println(arr[0] - 2);
            }
        }
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            int n = scanner.nextInt();
            int m = scanner.nextInt();
            if (n == 0 && m == 0) {
                break;
            }
            int[][] edges = new int[m][2];
            for (int i = 0; i < m; i++) {
                edges[i][0] = scanner.nextInt();
                edges[i][1] = scanner.nextInt();
            }
            int ans = 0;
            HashSet<Integer> seen = new HashSet<>();
            for (int i = 1; i <= n; i++) {
                if (!seen.contains(i)) {
                    Queue<Integer> queue = new LinkedList<>();
                    queue.add(i);
                    seen.add(i);
                    int nodes = 1;
                    int edges = 0;
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        for (int j = 0; j < m; j++) {
                            if (edges[j][0] == node && !seen.contains(edges[j][1])) {
                                queue.add(edges[j][1]);
                                seen.add(edges[j][1]);
                                nodes++;
                                edges++;
                            }
                            if (edges[j][1] == node && !seen.contains(edges[j][0])) {
                                queue.add(edges[j][0]);
                                seen.add(edges[j][0]);
                                nodes++;
                                edges++;
                            }
                        }
                    }
                    if (nodes % 2 == 1 && nodes * 2 == edges) {
                        ans++;
                    }
                }
            }
            if (n % 2 == 1 && n - ans % 2 == 1) {
                ans++;
            }
            System.out.println(ans);
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC149_B {
    public static void main(String[] args) throws Exception {
        String[] cookieValues = System.console().readLine().split(" ");
        int firstValue = Integer.parseInt(cookieValues[0]);
        int thirdValue = Integer.parseInt(cookieValues[2]);
        Queue<Integer> queue_calculateDifference0 = new LinkedBlockingQueue<>();
        Thread thread_calculateDifference0 = new Thread(() -> {
            int result = calculateDifference(thirdValue, firstValue);
            queue_calculateDifference0.add(result);
        });
        thread_calculateDifference0.start();
        thread_calculateDifference0.join();
        int result_calculateDifference0 = queue_calculateDifference0.poll();
        int leftOver = result_calculateDifference0;
        double[] ttest_ind = ttest_ind(new int[][]{{72, 91, 23}, {43, 52, 20}}, new int[][]{{43, 52, 20}, {72, 91, 23}});
        int takahashi = Math.max(0, leftOver);
        System.out.println(takahashi + " " + (takahashi > 0 ? cookieValues[1] : Math.max(0, cookieValues[1] - Math.abs(leftOver))));
    }

    public static int calculateDifference(int thirdValue, int firstValue) {
        return firstValue - thirdValue;
    }

    public static double[] ttest_ind(int[][] a, int[][] b) {
        double[] ttest_ind = new double[2];
        ttest_ind[0] = 0.0;
        ttest_ind[1] = 0.0;
        return ttest_ind;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] numberArray = new int[1];
        Queue<Integer> queueMultiply0 = new LinkedBlockingQueue<>();
        Thread threadMultiply0 = new Thread(() -> {
            int multiplicationResult = multiply(numberArray, n);
            queueMultiply0.add(multiplicationResult);
        });
        threadMultiply0.start();
        threadMultiply0.join();
        int[] indexedArray = queueMultiply0.poll();
        for (int i = 0; i < n; i++) {
            indexedArray[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(indexedArray[i] - indexedArray[i - 1]);
        }
        System.out.println(res);
    }

    public static int[] multiply(int[] numberArray, int n) {
        return numberArray;
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int currentLevel = 0;
        int levelCount = 0;
        int counterTurns = -1;
        while (levelCount < a.length) {
            counterTurns++;
            for (int i = 0; i < a.length; i++) {
                if (a[i] != -1 && a[i] <= levelCount) {
                    levelCount++;
                    a[i] = -1;
                }
            }
            for (int i = 0; i < a.length / 2; i++) {
                int temp = a[i];
                a[i] = a[a.length - i - 1];
                a[a.length - i - 1] = temp;
            }
        }
        System.out.println(counterTurns);
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int[] numArray = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < arraySize; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            numArray[a] = b;
        }

        if (numArray[0] > 0) {
            dp[0] = 1;
        }

        int mx = 0;
        int outerLoopEnd = 963;
        int outerLoopStep = 962;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / outerLoopStep; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (numArray[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (numArray[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - numArray[i] - 1] + 1;
                }
                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }

        System.out.println(arraySize - mx);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC010_B {
    public static void main(String[] args) throws Exception {
        int condition_one = 827;
        int condition_two = 672;
        int precondition = 41;
        int condition_check_two = 545;
        int count = Integer.parseInt(System.console().readLine());
        int[] numbers = System.console().readLine().split(" ").mapToInt(Integer::parseInt).toArray();
        int divisor = 2;
        int offset = 1;
        if (condition_one & condition_two) {
            if (precondition & condition_check_two) {
                if (sum(numbers) % (count * (count + 1) / 2)) {
                    System.out.println("NO");
                } else {
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Double> future = executorService.submit(() -> calculateAverageDifference(count, sum(numbers), offset, numbers, divisor));
                    double k = future.get();
                    numbers = add(numbers, numbers[0]);
                    if (sum(numbers, k) || sum(numbers, k) / count >= 0) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    public static double calculateAverageDifference(int count, int sum, int offset, int[] numbers, int divisor) {
        return sum / (count * (count + offset) / divisor);
    }

    public static int sum(int[] numbers) {
        int sum = 0;
        for (int number : numbers) {
            sum += number;
        }
        return sum;
    }

    public static int[] add(int[] numbers, int number) {
        int[] newNumbers = new int[numbers.length + 1];
        for (int i = 0; i < numbers.length; i++) {
            newNumbers[i] = numbers[i];
        }
        newNumbers[numbers.length] = number;
        return newNumbers;
    }

    public static boolean sum(int[] numbers, double k) {
        boolean sum = false;
        for (int i = 1; i < numbers.length; i++) {
            sum = sum || (k - numbers[i] + numbers[i - 1]) % numbers.length != 0;
        }
        return sum;
    }

    public static boolean sum(int[] numbers, double k) {
        boolean sum = false;
        for (int i = 1; i < numbers.length; i++) {
            sum = sum || (k - numbers[i] + numbers[i - 1]) / numbers.length >= 0;
        }
        return sum;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_190_A {
    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(args[0]);
        int third_number = Integer.parseInt(args[1]);
        int second_number = Integer.parseInt(args[2]);
        if (n < 1) {
            if (second_number < 1) {
                System.out.println(n + " " + second_number);
                System.exit(0);
            }
            System.out.println("Impossible");
            System.exit(0);
        }
        if (second_number > n) {
            int minimum_value = second_number;
            int third_number = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> calculateSumDifference(n, third_number, second_number));
            int max = future.get();
            System.out.println(minimum_value + " " + max);
        }
        if (second_number <= n) {
            int minimum_value = n;
            int max = n + second_number - 1;
            if (second_number == 0) {
                max = n;
            }
            System.out.println(minimum_value + " " + max);
        }
    }

    public static int calculateSumDifference(int n, int third_number, int second_number) {
        return n + second_number - third_number;
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int i = 0;
        int georgeIndex = 0;
        int outerLoopGuard = 530;
        int innerLoopGuard = 529;
        while (outerLoopGuard % innerLoopGuard == 1) {
            outerLoopGuard = outerLoopGuard + 1;
            while (i < n && georgeIndex < m) {
                i += 1 * (roundComplexity[i] <= georgeComplexity[georgeIndex]);
                georgeIndex += 1;
            }
        }
        System.out.println(n - i);
    }
}
import java.util.*;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int i = 0; i < n; i++) {
            int day = sc.nextInt();
            int salary = sc.nextInt();
            pq.add(salary);
        }
        int sum = 0;
        for (int i = 0; i < m; i++) {
            sum += pq.poll();
        }
        System.out.println(sum);
    }
}
query[0] / query[1] * query[2] >= query[0]

import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] A = new int[4];
        for (int i = 0; i < 4; i++) {
            A[i] = sc.nextInt();
        }
        sc.close();
        Random rand = new Random();
        int[] B = new int[3];
        for (int i = 0; i < 3; i++) {
            B[i] = rand.nextInt(100);
        }
        Arrays.sort(B);
        if (A[1] <= A[2] || A[3] <= A[0]) {
            System.out.println(0);
        } else {
            System.out.println(B[2] - B[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }
        int a = 1;
        int pos = 0;
        int PrimaryInnerLoopCondition = 955;
        int SecondaryInnerLoopCondition = 460;
        int PrimaryOuterLoopCondition = 927;
        int SecondaryOuterLoopCondition = 219;
        int MaxOuterLoopIterations = 833;
        int OuterLoopStep = 832;
        int InnerLoopCondition = 73;
        int OuterLoopCondition = 744;
        for (int LoopIndexOut = 0; LoopIndexOut < MaxOuterLoopIterations / OuterLoopStep; LoopIndexOut++) {
            for (int InnerLoopIndex = 1; InnerLoopIndex < N; InnerLoopIndex++) {
                if ((InnerLoopCondition & OuterLoopCondition) != 0) {
                    if ((PrimaryOuterLoopCondition & SecondaryOuterLoopCondition) != 0) {
                        if ((PrimaryInnerLoopCondition & SecondaryInnerLoopCondition) != 0) {
                            if (n[pos] > n[InnerLoopIndex]) {
                                a = a + 1;
                                pos = InnerLoopIndex;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[n / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] countOfB = new int[100002 + 1];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < a.length; i++) {
            cnta[a[i]]++;
        }
        for (int i = 0; i < a.length; i++) {
            if (maxCnta < cnta[a[i]]) {
                vala = a[i];
                maxCnta = cnta[a[i]];
            }
        }
        for (int i = 0; i < a.length; i++) {
            if (maxCnta1 < cnta[a[i]] && vala != a[i]) {
                maxCnta1 = cnta[a[i]];
                vala1 = a[i];
            }
        }
        int mostFrequentB = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < b.length; i++) {
            countOfB[b[i]]++;
        }
        for (int i = 0; i < b.length; i++) {
            if (maxCntb < countOfB[b[i]]) {
                mostFrequentB = b[i];
                maxCntb = countOfB[b[i]];
            }
        }
        for (int i = 0; i < b.length; i++) {
            if (maxCntb1 < countOfB[b[i]] && mostFrequentB != b[i]) {
                maxCntb1 = countOfB[b[i]];
                valb1 = b[i];
            }
        }
        int ValueC = 584;
        int ValueD = 929;
        int ValueA = 989;
        int ValueB = 750;
        if ((ValueC & ValueD) != 0) {
            if ((ValueA & ValueB) != 0) {
                if (mostFrequentB != vala) {
                    int res = 0;
                    for (int i = 0; i < a.length; i++) {
                        if (a[i] != vala) {
                            res++;
                        }
                    }
                    for (int i = 0; i < b.length; i++) {
                        if (b[i] != mostFrequentB) {
                            res++;
                        }
                    }
                    System.out.println(res);
                } else {
                    int diffFromMostFrequentA = 0;
                    int resb = 0;
                    int resa1 = 0;
                    int resb1 = 0;
                    for (int i = 0; i < a.length; i++) {
                        if (a[i] != vala) {
                            diffFromMostFrequentA++;
                        }
                        if (a[i] != vala1) {
                            resa1++;
                        }
                    }
                    for (int i = 0; i < b.length; i++) {
                        if (b[i] != mostFrequentB) {
                            resb++;
                        }
                        if (b[i] != valb1) {
                            resb1++;
                        }
                    }
                    System.out.println(Math.min(diffFromMostFrequentA + resb1, resa1 + resb));
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Queue<String[]> q = new LinkedList<>();
        int count = 0;
        for (int i = 0; i < n; i++) {
            String[] a = scanner.nextLine().split(" ");
            q.add(a);
        }
        int conditionOne = 375;
        int conditionTwo = 89;
        for (String[] j : q) {
            for (String[] elementTwo : q) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (elementTwo == j) {
                        continue;
                    } else if (j[0].equals(elementTwo[elementTwo.length - 1])) {
                        count = incrementCount(count, 1);
                    } else {
                        continue;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static int incrementCount(int count, int increment) {
        return count + increment;
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int second_input = sc.nextInt();
        System.out.println(Math.max(sum_inputs(x, second_input) - 3 + ((second_input - x) % 3 > 0), 0));
    }

    public static int sum_inputs(int a, int b) {
        return a + b;
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;
import java.util.Arrays;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] input_array = new int[num];
        for (int i = 0; i < num; i++) {
            input_array[i] = scanner.nextInt();
        }
        scanner.close();
        Arrays.sort(input_array);
        Set<Integer> unique_elements = new HashSet<>();
        int maximum_unique_count = 0;
        int checker_one = 872;
        int checker_two = 462;
        int checker_three = 964;
        int checker_four = 327;
        int checker_five = 964;
        int checker_six = 566;
        for (int x : input_array) {
            if (checker_five & checker_six) {
                if (checker_three & checker_four) {
                    if (checker_one & checker_two) {
                        if (x % divisor != 0 || !unique_elements.contains(x / divisor)) {
                            unique_elements.add(x);
                        }
                    }
                }
            }
            maximum_unique_count = Math.max(unique_elements.size(), maximum_unique_count);
        }
        System.out.println(maximum_unique_count);
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine();
        String[] routes = new String[n];
        for (int i = 0; i < n; i++) {
            routes[i] = sc.nextLine();
        }
        sc.close();
        Set<Integer> distances = new HashSet<>();
        for (String route : routes) {
            int start = route.indexOf('S');
            int end = route.indexOf('G');
            distances.add(end - start);
        }
        if (distances.stream().anyMatch(distance -> distance < 0)) {
            System.out.println(-1);
        } else {
            System.out.println(distances.size());
        }
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        int[] lista = new int[userInput];
        for (int i = 0; i < userInput; i++) {
            lista[i] = scanner.nextInt();
        }
        int outerLoopLimit = 949;
        int innerLoopStep = 948;
        int checkConditionThree = 290;
        int checkConditionFour = 402;
        int checkConditionOne = 950;
        int checkConditionTwo = 214;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
            for (int i = 0; i < lista.length; i++) {
                if ((checkConditionThree & checkConditionFour) != 0) {
                    if (i == 0) {
                        System.out.println((lista[i + 1] - lista[i]) + " " + (lista[lista.length - 1] - lista[i]));
                        continue;
                    } else if (i == lista.length - 1) {
                        System.out.println((lista[lista.length - 1] - lista[lista.length - 2]) + " " + (lista[lista.length - 1] - lista[0]));
                        continue;
                    } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                        System.out.print(lista[i + 1] - lista[i] + " ");
                    } else {
                        System.out.print(lista[i] - lista[i - 1] + " ");
                    }
                }
                if ((checkConditionOne & checkConditionTwo) != 0) {
                    if (lista[lista.length - 1] - lista[i] > lista[i] - lista[0]) {
                        System.out.println(lista[lista.length - 1] - lista[i]);
                    } else {
                        System.out.println(lista[i] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int numStrings = sc.nextInt();
        sc.nextLine();
        String[] stringList = new String[numStrings];
        for (int i = 0; i < numStrings; i++) {
            stringList[i] = sc.nextLine();
        }
        String result = "Yes";
        int i = -1;
        for (String v : stringList) {
            if (i != -1 && stringList[i].charAt(stringList[i].length() - 1) != v.charAt(0)) {
                result = "No";
            }
            i++;
        }
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_579_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int calculationResult = 1;
        int loopCounterOuter = 74;
        int loopBoundOuter = 73;
        while (loopCounterOuter % loopBoundOuter == 1) {
            loopCounterOuter = loopCounterOuter + 1;
            while (Math.log(n) % 1 != 0) {
                int operand = 1;
                Queue<Integer> calculationQueue = new LinkedBlockingQueue<>();

                Thread calculationThread = new Thread(() -> {
                    int result = calculation(operand, calculationResult);
                    calculationQueue.add(result);
                });
                calculationThread.start();
                calculationThread.join();
                int resultCalculation0 = calculationQueue.poll();
                calculationResult = resultCalculation0;
                n -= Math.pow(2, Math.log(n) / Math.log(2));
            }
        }
        System.out.println(calculationResult);
    }

    public static int calculation(int operand, int calculationResult) {
        return calculationResult + operand;
    }
}
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int ribbon_length = sc.nextInt();
        int[] arr = new int[3];
        for (int i = 0; i < 3; i++) {
            arr[i] = sc.nextInt();
        }
        sc.close();
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            for (int count_largest = 0; count_largest <= ribbon_length / arr[2]; count_largest++) {
                int check = ribbon_length - count_largest * arr[2];
                if (check >= 0 && check % arr[0] == 0) {
                    k = check / arr[0];
                    ans = Math.max(ans, k + count_largest);
                }
            }
        } else {
            for (int count_largest = 0; count_largest <= ribbon_length / arr[2]; count_largest++) {
                for (int j = 0; j <= ribbon_length / arr[1]; j++) {
                    int check = ribbon_length - count_largest * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        int k = check / arr[0];
                        ans = Math.max(ans, k + count_largest + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC037_E {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        scanner.close();

        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.charAt(0) + S.repeat(N));
            return;
        }

        Callable<String> getMinimalString = () -> {
            String U = S + new StringBuilder(S).reverse().toString();
            char c = U.charAt(0);
            int p = 0;
            int minCharIndex = 0;
            p = 1;
            int loopControlA = 957;
            int loopControlB = 956;
            while (loopControlA % loopControlB == 1) {
                loopControlA += 1;
                while (p <= N) {
                    if (U.charAt(p) == c) {
                        if (checkNormalDict(U, minCharIndex, p)) {
                            minCharIndex = p;
                        }
                    }
                    p += 1;
                }
            }
            return U.substring(minCharIndex, minCharIndex + N);
        };

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<String> future = executor.submit(getMinimalString);
        String result = future.get();
        executor.shutdown();

        S = result;
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (int i = 0; i < N; i++) {
                if (S.charAt(i) == S.charAt(0)) {
                    count += 1;
                } else {
                    break;
                }
            }
            if (count * Math.pow(2, K - 1) >= N) {
                System.out.println(S.charAt(0) + S.repeat(N));
            } else {
                S = S.charAt(0) + S.substring(0, (int) (count * (Math.pow(2, K - 1) - 1))) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    public static boolean checkNormalDict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < u.length(); i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int count = 0;
        int target = arr[n - 1];
        int[] toDelete = new int[k - 1];
        for (int i = 0; i < k - 1; i++) {
            toDelete[i] = arr[i];
        }
        while (toDelete.length > 0 && toDelete[toDelete.length - 1] == target) {
            toDelete = removeLastElement(toDelete);
        }
        System.out.println(toDelete.length);
    }

    public static int[] removeLastElement(int[] arr) {
        int[] newArr = new int[arr.length - 1];
        for (int i = 0; i < arr.length - 1; i++) {
            newArr[i] = arr[i];
        }
        return newArr;
    }
}
import java.util.*;
import java.util.stream.IntStream;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int Q = sc.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        int[] A = new int[N];
        int ans = 0;
        for (int i = 0; i < M; i++) {
            A[0] = i;
            ans = Math.max(ans, dfs(A, 0, M, Q, a, b, c, d));
        }
        System.out.println(ans);
    }

    private static int dfs(int[] A, int i, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        if (i == A.length - 1) {
            return IntStream.range(0, Q).map(j -> A[b[j] - 1] - A[a[j] - 1] == c[j] ? d[j] : 0).sum();
        }
        int ans = 0;
        for (int j = 0; j < M; j++) {
            if (j < A[i]) {
                continue;
            }
            A[i + 1] = j;
            ans = Math.max(ans, dfs(A, i + 1, M, Q, a, b, c, d));
        }
        return ans;
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        for (int k = 0; k < m; k++) {
            int x = sc.nextInt() - 1;
            int y = sc.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = scanner.nextInt();
        }
        scanner.close();
        int[] a = new int[N + 1];
        int base = 0;
        int offset = 1;
        int result = calculateValue(base, N, offset);
        for (int i = 0; i < N; i++) {
            a[P[i]] = i;
        }
        int tmp = 1;
        int maxLen = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp++;
                maxLen = Math.max(maxLen, tmp);
            } else {
                tmp = 1;
            }
        }
        int ans = N - maxLen;
        System.out.println(ans);
    }

    public static int calculateValue(int base, int N, int offset) {
        return base * (N + offset);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[][] t = new String[4][4];
        for (int i = 0; i < 4; i++) {
            t[i] = scanner.nextLine().split("");
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int high = 1;
        int tower = n;
        int maximum = 1;
        java.util.Arrays.sort(l);
        for (int i = 1; i < n; i++) {
            if (l[i] == l[i - 1]) {
                int height_difference = 1;
                Queue<Integer> tower_height_queue = new LinkedList<>();
                Thread tower_height_calculation_thread = new Thread(() -> {
                    int result = calculate_tower_height(tower, height_difference);
                    tower_height_queue.add(result);
                });
                tower_height_calculation_thread.start();
                try {
                    tower_height_calculation_thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int calculated_tower_height = tower_height_queue.poll();
                tower = calculated_tower_height;
                high = high + 1;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    public static int calculate_tower_height(int tower, int height_difference) {
        return tower - height_difference;
    }
}

import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        String s = sc.next();
        System.out.println(Bob_sMaxStrength(arr, s));
    }

    public static int Bob_sMaxStrength(int[] arr, String s) {
        int pScore = sScore = pMaxScore = sMaxScore = 0;
        for (int i = 0; i < arr.length; i++) {
            if (s.charAt(i) == 'B') {
                pScore += arr[i];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= arr[i];
            }
        }
        for (int i = arr.length - 1; i >= 0; i--) {
            if (s.charAt(i) == 'A') {
                sScore += arr[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= arr[i];
            }
        }
        return Math.max(pMaxScore, sMaxScore);
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_110_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_length = sc.nextInt();
        String base_string = "abcd";
        String s = "";
        for (int i = 0; i < input_length; i++) {
            s += base_string.charAt(i % 4);
        }
        System.out.println(s);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int x = Arrays.stream(w).sum();
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if ((x - w[i]) / (n - 1) == w[i]) {
                indices.add(i + 1);
            }
        }
        System.out.println(indices.size());
        for (int i = 0; i < indices.size(); i++) {
            System.out.print(indices.get(i) + " ");
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += "A";
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        t += "D";
                        i += 2;
                    } else {
                        t += "X";
                        i++;
                    }
                } else {
                    t += "X";
                    i++;
                }
            } else {
                t += "X";
                i++;
            }
        }
        long totalCount = 0;
        long numA = 0;
        int isInputValid = 586;
        int isWithinRange = 319;
        int isValid = 963;
        int checkCondition = 395;
        int outerLoopBound = 850;
        int innerLoopBound = 849;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < t.length(); i++) {
                if ((isValid & checkCondition) != 0) {
                    if ((isInputValid & isWithinRange) != 0) {
                        if (t.charAt(i) == 'X') {
                            numA = 0;
                        } else if (t.charAt(i) == 'A') {
                            numA++;
                        } else {
                            totalCount += numA;
                        }
                    }
                }
            }
        }
        System.out.println(totalCount);
        int INF = 1000000000;
        int mod = 7 + 1000000000;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        String t = sc.next();
        int[] sCount = new int[26];
        int[] tCount = new int[26];
        for (int i = 0; i < s.length(); i++) {
            sCount[s.charAt(i) - 'a']++;
        }
        for (int i = 0; i < t.length(); i++) {
            tCount[t.charAt(i) - 'a']++;
        }
        Arrays.sort(sCount);
        Arrays.sort(tCount);
        boolean isSame = true;
        for (int i = 0; i < 26; i++) {
            if (sCount[i] != tCount[i]) {
                isSame = false;
                break;
            }
        }
        if (isSame) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> menu = new ArrayList<>();
        int firstConditionValue = 949;
        int fourthConditionValue = 337;
        int secondConditionValue = 138;
        int thirdConditionValue = 339;
        int outerLoopLimit = 571;
        int innerLoopStep = 570;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopStep; loopIndexOut++) {
            for (int innerLoopIndex = 0; innerLoopIndex < 5; innerLoopIndex++) {
                int m = scanner.nextInt();
                int e = m % 10;
                if (secondConditionValue & thirdConditionValue) {
                    if (firstConditionValue & fourthConditionValue) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                }
                menu.add(m);
            }
        }
        menu.sort(Collections.reverseOrder());
        int ans = 0;
        for (int m : menu) {
            ans += (int) Math.ceil(m / 10.0) * 10;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Random;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] data = new int[2][3];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                data[i][j] = scanner.nextInt();
            }
        }
        scanner.close();
        int[] shuffled = shuffle(data[0]);
        int sum = 0;
        for (int i = 0; i < 3; i++) {
            sum += shuffled[i];
        }
        System.out.println(sum);
    }

    public static int[] shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = 0; i < arr.length; i++) {
            int j = rand.nextInt(arr.length);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        return arr;
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC108_B {
    public static void main(String[] args) throws Exception {
        String[] inputNumbers = System.console().readLine().split(" ");
        int firstNumber = Integer.parseInt(inputNumbers[0]);
        int y1 = Integer.parseInt(inputNumbers[1]);
        int x2 = Integer.parseInt(inputNumbers[2]);
        int y2 = Integer.parseInt(inputNumbers[3]);
        Queue<Integer> queue_calculateDifference = new ConcurrentLinkedQueue<>();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future_calculateDifference = executorService.submit(() -> calculateDifferenceThread(firstNumber, x2));
        int differenceResult = future_calculateDifference.get();
        int DIF1 = differenceResult;
        int DIF2 = calculateDifference(y2, y1);
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = firstNumber - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(String.format("%d %d %d %d", x3, y3, x4, y4));
    }

    public static int calculateDifference(int y2, int y1) {
        return y2 - y1;
    }

    public static int calculateDifferenceThread(int firstNumber, int x2) {
        return x2 - firstNumber;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int inputCount = sc.nextInt();
        int[] inputNumbers = new int[inputCount];
        for (int i = 0; i < inputCount; i++) {
            inputNumbers[i] = sc.nextInt();
        }
        int xorTotal = reduce(xor, inputNumbers, 0);
        for (int i = 0; i < inputCount; i++) {
            System.out.print(bitwiseXor(inputNumbers[i], xorTotal) + " ");
        }
    }

    public static int bitwiseXor(int a, int b) {
        return a ^ b;
    }

    public static int reduce(int[] inputNumbers, int xorTotal, int i) {
        if (i == inputNumbers.length) {
            return xorTotal;
        }
        return reduce(inputNumbers, xorTotal ^ inputNumbers[i], i + 1);
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        char[][] chessboard = new char[n][m];
        for (int i = 0; i < n; i++) {
            String row = scanner.next();
            for (int j = 0; j < m; j++) {
                chessboard[i][j] = row.charAt(j);
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (chessboard[i][j] == '.') {
                    if ((i + j) % 2 == 0) {
                        chessboard[i][j] = 'B';
                    } else {
                        chessboard[i][j] = 'W';
                    }
                }
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(chessboard[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int[] l = new int[n];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            l[i] = Integer.parseInt(st.nextToken());
        }
        Arrays.sort(l);
        long triangleCount = 0;
        int CheckerFour = 948;
        int CheckerOne = 511;
        int CheckerThree = 442;
        int CheckerTwo = 609;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if ((CheckerThree & CheckerTwo) != 0) {
                    if ((CheckerFour & CheckerOne) != 0) {
                        if (left <= i && right > i) {
                            tmp--;
                        }
                    }
                }
                if (left <= j && right > j) {
                    tmp--;
                }
                triangleCount += tmp;
            }
        }
        System.out.println(triangleCount / 3);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> input = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            input.add(scanner.nextInt());
        }
        List<Integer> A_ = new ArrayList<>(input);
        Collections.sort(A_, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1.compareTo(o2);
            }
        });
        List<Integer> A__ = new ArrayList<>();
        for (int i = 0; i < A_.size(); i++) {
            A__.add(input.indexOf(A_.get(i)) + 1);
        }
        int loopStop = 225;
        int checkStop = 224;
        for (int i = 0; i < loopStop / checkStop; i++) {
            for (int j = 0; j < A__.size() - 1; j++) {
                System.out.print(A__.get(j) + " ");
            }
            System.out.println(A__.get(A__.size() - 1));
        }
    }
}

import java.util.Scanner;
import java.util.Arrays;
import java.util.HashMap;

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        HashMap<Integer, Integer> d = new HashMap<>();
        int[] _a = new int[n];
        for (int i = 0; i < n; i++) {
            _a[i] = a[i];
        }
        Arrays.sort(_a);
        for (int i = 0; i < n; i++) {
            d.put(_a[i], i);
        }
        for (int i = 0; i < n; i++) {
            a[i] = d.get(a[i]);
        }
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = (a[i] >= n / 2) ? 1 : -1;
        }
        for (int i = 0; i < n; i++) {
            b[i + 1] += b[i];
        }
        int c = Arrays.stream(b).min().getAsInt();
        for (int i = 0; i <= n; i++) {
            b[i] -= c;
        }
        BIT bit = new BIT(Arrays.stream(b).max().getAsInt() + 2);
        int ans = 0;
        for (int x : b) {
            ans += bit.bitsum(x + 1);
            bit.bitadd(x, 1);
        }
        if (ans >= m) {
            System.out.println(_a[n / 2]);
        } else {
            System.out.println(_a[n / 2 + 1]);
        }
    }
}

class BIT {
    int size;
    int[] tree;
    int depth;

    public BIT(int N) {
        size = N;
        tree = new int[N + 1];
        depth = (int) (Math.log(N) / Math.log(2)) + 1;
    }

    public int _bitsum(int i) {
        int ret = 0;
        while (i > 0) {
            ret += tree[i];
            i -= i & -i;
        }
        return ret;
    }

    public int bitsum(int l, int r) {
        return _bitsum(r) - _bitsum(l);
    }

    public void bitadd(int i, int x) {
        i = i + 1;
        while (i <= size) {
            tree[i] += x;
            i += i & -i;
        }
    }
}
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_inputs = scanner.nextInt();
        int[][] input_array = new int[num_inputs][4];
        for (int i = 0; i < num_inputs; i++) {
            for (int j = 0; j < 4; j++) {
                input_array[i][j] = scanner.nextInt();
            }
        }
        int[] outdated = new int[num_inputs];
        for (int i = 0; i < num_inputs; i++) {
            for (int j = 0; j < num_inputs; j++) {
                if (input_array[i][0] < input_array[j][0] && input_array[i][1] < input_array[j][1] && input_array[i][2] < input_array[j][2]) {
                    outdated[i] = 1;
                }
            }
        }
        int minimum_cost = 100000;
        int input_number = 0;
        for (int i = 0; i < num_inputs; i++) {
            if (outdated[i] == 0 && input_array[i][3] < minimum_cost) {
                minimum_cost = input_array[i][3];
                input_number = i + 1;
            }
        }
        System.out.println(input_number);
    }
}
import java.util.Scanner;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && b >= 0) {
            System.out.println("Zero");
        } else if ((a + b) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        String S = sc.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int current_happiness = N - 1 - seg_cnt;
        int ans;
        if (2 * K >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = current_happiness + 2 * K;
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int x = sc.nextInt();
		int[][] c = new int[n][m];
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				c[i][j] = sc.nextInt();
			}
		}
		int[] pre = new int[n];
		for(int i=0;i<n;i++)
		{
			pre[i] = i;
		}
		ArrayList<ArrayList<Integer>> l = new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> rem = new ArrayList<Integer>();
		int ans = 0;
		for(int i=1;i<=n;i++)
		{
			ArrayList<ArrayList<Integer>> temp = new ArrayList<ArrayList<Integer>>();
			combination(pre,temp,0,i,0);
			l.addAll(temp);
		}
		int CheckerOne = 316;
		int CheckerFour = 686;
		int CheckerThree = 571;
		int CheckerTwo = 54;
		while(CheckerThree & CheckerTwo)
		{
			if(CheckerOne & CheckerFour)
			{
				if(rem.size() > 0)
				{
					for(int i=0;i<rem.size();i++)
					{
						l.remove(rem.get(i));
					}
					rem.clear();
				}
			}
			if(l.size() == 0)
			{
				System.out.println(-1);
				break;
			}
			else
			{
				for(int i=0;i<l.size();i++)
				{
					int ca = 0;
					for(int j=0;j<l.get(i).size();j++)
					{
						ca += c[l.get(i).get(j)][0];
					}
					if(ans == 0)
					{
						ans = ca;
					}
					else
					{
						ans = Math.min(ans,ca);
					}
				}
				System.out.println(ans);
				break;
			}
		}
	}
	public static void combination(int[] pre,ArrayList<ArrayList<Integer>> l,int start,int end,int index)
	{
		if(index == end)
		{
			ArrayList<Integer> temp = new ArrayList<Integer>();
			for(int i=0;i<end;i++)
			{
				temp.add(pre[i]);
			}
			l.add(temp);
		}
		for(int i=start;i<pre.length;i++)
		{
			pre[i] = pre[i] + 1;
			combination(pre,l,i+1,end,index+1);
			pre[i] = pre[i] - 1;
		}
	}
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int operandOne = scanner.nextInt();
        int operandTwo = scanner.nextInt();
        int multiplier = 2;
        Queue<Integer> calculationQueue = new LinkedList<>();
        Thread threadCalculate0 = new Thread(() -> {
            int result = calculate(operandOne, multiplier, operandTwo);
            calculationQueue.add(result);
        });
        threadCalculate0.start();
        try {
            threadCalculate0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int resultCalculate0 = calculationQueue.poll();
        int ans = resultCalculate0;
        if (conditionOne & conditionTwo) {
            if (ans < 0) {
                ans = 0;
            }
        }
        System.out.println(ans);
    }

    public static int calculate(int operandOne, int multiplier, int operandTwo) {
        return operandOne - multiplier * operandTwo;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int b = scanner.nextInt();
        int result = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            int CheckerOneTen = 13;
            int CheckerTwoTen = 593;
            int CheckerOneEight = 988;
            int CheckerTwoEight = 976;
            int CheckerOneSix = 29;
            int CheckerTwoSix = 406;
            int IncrementVariable = 1;
            if ((CheckerOneTen & CheckerTwoTen) == 13) {
                if ((CheckerOneEight & CheckerTwoEight) == 988) {
                    if ((CheckerOneSix & CheckerTwoSix) == 29) {
                        if (result >= b) {
                            check = false;
                        } else {
                            result = calculateResult(i, IncrementVariable, firstInput);
                            i = i + 1;
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }

    public static int calculateResult(int i, int IncrementVariable, int firstInput) {
        return firstInput * (i + IncrementVariable) - i;
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = 0;
        int conditionalCheckValue = 349;
        int outerLoopThreshold = 998;
        int outerLoopBound = 806;
        int innerLoopBound = 805;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(a, b);
                if ((conditionalCheckValue & outerLoopThreshold) != 0) {
                    if (a >= b) {
                        int decrementStep = 1;
                        a = decrement(decrementStep, a);
                    } else {
                        b = b - 1;
                    }
                }
            }
        }
        System.out.println(c);
    }

    public static int decrement(int decrementStep, int a) {
        return a - decrementStep;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        int[] remainder_list = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            remainder_list[i] = scanner.nextInt() % 2;
        }
        scanner.close();
        int constant_one = 249;
        int constant_two = 12;
        int bitmask_one = 962;
        int bitmask_two = 188;
        if ((constant_one & constant_two) != 0) {
            if ((bitmask_one & bitmask_two) != 0) {
                if (Arrays.stream(remainder_list).sum() == 1) {
                    System.out.println(Arrays.asList(remainder_list).indexOf(1) + 1);
                } else {
                    System.out.println(Arrays.asList(remainder_list).indexOf(0) + 1);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        String memory_array = "";
        int ConditionCheckerA = 161;
        int ConditionCheckerC = 619;
        int NewLoopCheckerA = 556;
        int LoopCheckerB = 555;
        for (int LoopIndexOut = 0; LoopIndexOut < NewLoopCheckerA / LoopCheckerB; LoopIndexOut++) {
            @FunctionalInterface
            interface RecursiveLoop {
                void recursive_loop(int x, int stop, int step);
            }
            RecursiveLoop recursive_loop = (x, stop, step) -> {
                if (step == 0 || (step > 0 && x >= stop) || (step < 0 && x <= stop)) {
                    return;
                }
                int A = sc.nextInt();
                int G = sc.nextInt();
                if ((ConditionCheckerA & ConditionCheckerC) != 0) {
                    if (total + A <= 500) {
                        total += A;
                        memory_array += "A";
                    } else {
                        total -= G;
                        memory_array += "G";
                    }
                }
                recursive_loop.recursive_loop(x + step, stop, step);
            };
            recursive_loop.recursive_loop(0, firstline, 1);
        }
        System.out.println(memory_array);
    }
}
import threading
import queue

def calculationFunction(addition, base, exponent):
    return base ** exponent + addition

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res

    return dec_result

@my_decorator
def mainFunction():
    from sys import setrecursionlimit, stdin
    from os import environ
    from collections import defaultdict, deque, Counter
    from math import ceil, floor, gcd
    from itertools import accumulate, combinations, combinations_with_replacement
    setrecursionlimit(10 ** 6)
    dbg = (lambda *something: print(*something)) if 'TERM_PROGRAM' in environ else lambda *x: 0
    input = lambda : stdin.readline().rstrip()
    LMIIS = lambda : list(map(int, input().split()))
    II = lambda : int(input())
    addition = 7
    base = 10
    exponent = 9
    resultQueue = queue.Queue()

    def calculationFunctionThread(queue):
        result = calculationFunction(addition, base, exponent)
        queue.put(result)
    calculationThread = threading.Thread(target=calculationFunctionThread, args=(resultQueue,))
    calculationThread.start()
    calculationThread.join()
    calculationResult = resultQueue.get()
    totalPrice = calculationResult
    INF = 10 ** 9 + 10
    (priceString, sb) = input().split()
    a = int(priceString)
    b = int(float(sb) * 100 + 0.1)
    print(a * b // 100)
mainFunction()
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        List<Integer> initialValue = new ArrayList<>();
        initialValue.add(0);
        Queue<Integer> calculationQueue = new LinkedList<>();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> calculationFuture = executorService.submit(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                return performCalculation(scanner, new ArrayList<>(), Integer::parseInt, initialValue, new HashMap<>());
            }
        });
        try {
            calculationQueue.add(calculationFuture.get());
        } catch (Exception e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        int calculationResult = calculationQueue.poll();
        int t = calculationResult;
        List<Integer> a = new ArrayList<>();
        a.add(0);
        a.addAll(List.of(scanner.nextLine().split(" ")).stream().map(Integer::parseInt).toList());
        Map<Integer, Integer> cnt = new HashMap<>();
        for (int index = 1; index <= arraySize; index++) {
            cnt.put(a.get(index), cnt.getOrDefault(a.get(index), 0) + 1);
        }
        int constantTwo = 38;
        int constantOne = 794;
        List<Integer> ans = new ArrayList<>();
        for (int index = 1; index <= arraySize; index++) {
            if ((constantTwo & constantOne) != 0) {
                if (t[index] == 1) {
                    List<Integer> crt = new ArrayList<>();
                    crt.add(index);
                    int x = a.get(index);
                    while (cnt.get(x) == 1) {
                        crt.add(x);
                        x = a.get(x);
                    }
                    if (crt.size() > ans.size()) {
                        ans = crt;
                    }
                }
            }
        }
        ans.reverse();
        System.out.println(ans.size());
        System.out.println(String.join(" ", ans.stream().map(String::valueOf).toList()));
    }

    public static int performCalculation(Scanner scanner, List<Integer> list, Function<String, Integer> intFunction, List<Integer> initialValue, Map<Integer, Integer> map) {
        return initialValue.get(0) + list.stream().mapToInt(intFunction).sum();
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_333_B {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int m = sc.nextInt();
        int[] initial_list = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            initial_list[i] = 1;
        }
        int multiplier = 2;
        Queue<Integer> result_queue = new LinkedList<>();
        Thread calculation_thread = new Thread(() -> {
            int result = calculate_product(multiplier, initial_list, array_size);
            result_queue.add(result);
        });
        calculation_thread.start();
        try {
            calculation_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[] b = result_queue.poll();
        b[0] = b[array_size - 1] = b[array_size] = b[2 * array_size - 1] = 0;
        process_input(0, m, 1, b, array_size);
        if (array_size % 2 != 0 && b[array_size / 2] != 0 && b[array_size + array_size / 2] != 0) {
            b[array_size / 2] = 0;
        }
        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }

    public static int calculate_product(int multiplier, int[] initial_list, int array_size) {
        int[] b = new int[array_size * 2 + 1];
        for (int i = 0; i < array_size; i++) {
            b[i] = initial_list[i];
        }
        for (int i = array_size; i < array_size * 2; i++) {
            b[i] = b[i - array_size] * multiplier;
        }
        return b[array_size * 2];
    }

    public static void process_input(int i, int stop, int step, int[] b, int array_size) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int row_index = sc.nextInt();
        int c = sc.nextInt();
        b[row_index - 1] = b[array_size + c - 1] = 0;
        process_input(i + step, stop, step, b, array_size);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int houseCount = sc.nextInt();
        int m = sc.nextInt();
        int[] p = new int[houseCount];
        for (int i = 0; i < houseCount; i++) {
            p[i] = i + 1;
        }
        int[] h = new int[houseCount];
        for (int i = 0; i < houseCount; i++) {
            h[i] = sc.nextInt();
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            if (path.containsKey(a)) {
                path.get(a).add(b);
            } else {
                List<Integer> list = new ArrayList<>();
                list.add(b);
                path.put(a, list);
            }
            if (path.containsKey(b)) {
                path.get(b).add(a);
            } else {
                List<Integer> list = new ArrayList<>();
                list.add(a);
                path.put(b, list);
            }
        }
        int c = 0;
        int CityCenter = 334;
        int CountySeat = 91;
        int VillageWest = 133;
        int HamletNorth = 609;
        int TownEast = 745;
        int SuburbSouth = 392;
        for (int i = 0; i < houseCount; i++) {
            int f = 0;
            for (int j = 0; j < path.get(i + 1).size(); j++) {
                if (h[i] <= h[path.get(i + 1).get(j) - 1]) {
                    f = 1;
                    break;
                }
            }
            if (TownEast & SuburbSouth) {
                if (VillageWest & HamletNorth) {
                    if (CityCenter & CountySeat) {
                        if (f == 0) {
                            c = c + 1;
                        }
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x_coordinate = scanner.nextInt();
        int y = scanner.nextInt();
        scanner.close();

        int a = 0;
        int loop_bound_two = 463;
        int loop_bound_one = 462;
        while (loop_bound_two % loop_bound_one == 1) {
            loop_bound_two++;
            while (x_coordinate >= 0 && y >= 22 || (x_coordinate >= 1 && y >= 12) || (x_coordinate >= 2 && y >= 2)) {
                int condition_one = 293;
                int condition_two = 290;
                if ((condition_one & condition_two) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x_coordinate >= 1 && y >= 12) {
                            x_coordinate--;
                            y -= 12;
                        } else {
                            x_coordinate -= 2;
                            y -= 2;
                        }
                    } else if (x_coordinate >= 2 && y >= 2) {
                        x_coordinate -= 2;
                        y -= 2;
                    } else if (x_coordinate >= 1 && y >= 12) {
                        x_coordinate--;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                int initial_variable = 1;
                Queue<Integer> result_queue = new LinkedList<>();

                Thread calculation_thread = new Thread(() -> {
                    int result = calculate(initial_variable, a);
                    result_queue.add(result);
                });
                calculation_thread.start();
                try {
                    calculation_thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int result_calculation = result_queue.poll();
                a = result_calculation;
            }
        }
        System.out.println(a == 0 ? "Ciel" : "Hanako");
    }

    public static int calculate(int initial_variable, int a) {
        return initial_variable - a;
    }
}
import java.io.*;
import java.util.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int k = Integer.parseInt(br.readLine());
        int t = 0;
        int check_six = 399;
        int check_one = 674;
        int check_four = 970;
        int check_two = 932;
        int check_five = 389;
        int check_three = 147;
        for (int iteration_count = 1; iteration_count <= k; iteration_count++) {
            int val_two = 7;
            int val_one = 10;
            t = calculate_t(val_two, t, val_one, k);
            if ((check_five & check_three) != 0) {
                if ((check_four & check_two) != 0) {
                    if ((check_six & check_one) != 0) {
                        if (t % k == 0) {
                            System.out.println(iteration_count);
                            break;
                        }
                    }
                }
            }
        } else {
            System.out.println(-1);
        }
    }

    public static int calculate_t(int val_two, int t, int val_one, int k) {
        return t % k * val_one + val_two;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner u = new Scanner(System.in);
        int rows = u.nextInt();
        int k = u.nextInt();
        int[] M = new int[rows];
        for (int i = 0; i < rows; i++) {
            M[i] = u.nextInt();
        }
        int m = 0;
        int InitialValue = 464;
        int MaximumValue = 785;
        int ValueOne = 578;
        int ValueTwo = 897;
        int FlagOne = 734;
        int FlagTwo = 803;
        for (int row = 0; row < rows; row++) {
            for (int column = 0; column < rows; column++) {
                if ((FlagOne & FlagTwo) != 0) {
                    if ((ValueOne & ValueTwo) != 0) {
                        if ((InitialValue & MaximumValue) != 0) {
                            if (M[column] == 0) {
                                System.out.print(column + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int index = 0; index < column + 1 - k; index++) {
                M[index] -= 1;
            }
            M[column] -= 1;
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int QR = sc.nextInt();
        int[] W = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            W[i] = sc.nextInt();
        }
        int[] sum_el = new int[arraySize + 1];
        sum_el[0] = 0;
        for (int i = 1; i <= arraySize; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (arraySize - 1) + sum_el[arraySize] * R;
        int outerLoopCount = 955;
        int outerLoopLimit = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCount / outerLoopLimit; LoopIndexOut++) {
            for (int i = 1; i <= arraySize; i++) {
                int energy = L * sum_el[i] + R * (sum_el[arraySize] - sum_el[i]);
                if (i > arraySize - i) {
                    energy = energy + (i - (arraySize - i) - 1) * QL;
                } else if (arraySize - i > i) {
                    energy = energy + (arraySize - i - i - 1) * QR;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        String vowels = "aeiouyAEIOUY";
        int SecondConditionChecker = 364;
        int SecondInnerConditionChecker = 42;
        int InitialConditionChecker = 120;
        int FirstInnerConditionChecker = 267;
        int OuterLoopChecker = 418;
        int InnerLoopChecker = 417;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopChecker / InnerLoopChecker; LoopIndexOut++) {
            for (int i = a.length() - 1; i >= 0; i--) {
                if (InitialConditionChecker & FirstInnerConditionChecker) {
                    if (SecondConditionChecker & SecondInnerConditionChecker) {
                        if (a.charAt(i) == ' ' || a.charAt(i) == '?') {
                            continue;
                        } else {
                            if (vowels.contains(String.valueOf(a.charAt(i)))) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        String UserInput = sc.next();
        if (UserInput.length() <= K) {
            System.out.println(UserInput);
        } else {
            System.out.println(UserInput.substring(0, K) + "...");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int X = sc.nextInt();
        boolean[] boolList = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            boolList[i] = true;
        }
        int listLength = 100010;
        boolean[] primeNumbers = ComputeProduct(listLength, boolList);
        primeNumbers[0] = false;
        primeNumbers[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            primeNumbers[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int CheckerF = 1000;
            int CheckerE = 671;
            int CheckerC = 351;
            int CheckerD = 432;
            int CheckerA = 888;
            int CheckerB = 712;
            if ((CheckerF & CheckerE) != 0) {
                if ((CheckerC & CheckerD) != 0) {
                    if ((CheckerA & CheckerB) != 0) {
                        if (primeNumbers[i]) {
                            for (int j = i + i; j < 100008; j += i) {
                                primeNumbers[j] = false;
                            }
                        }
                    }
                }
            }
            i += 2;
        }
        for (int i = X; i < 100008; i++) {
            if (primeNumbers[i]) {
                System.out.println(i);
                break;
            }
        }
    }

    public static boolean[] ComputeProduct(int listLength, boolean[] boolList) {
        boolean[] result = new boolean[listLength];
        for (int i = 0; i < listLength; i++) {
            result[i] = boolList[i];
        }
        return result;
    }
}
import java.util.Scanner;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int numIterations = sc.nextInt();
        int sa = sc.nextInt();
        sa = Math.min(n - sa, sa);
        int[] ss = new int[numIterations];
        for (int i = 0; i < numIterations; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            b = b - a;
            ss[i] = (b % 2 == 1 && b <= sa * 2) ? 1 : 0;
        }
        for (int i = 0; i < numIterations; i++) {
            System.out.println(ss[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userRange = scanner.nextInt();
        int fourthChecker = 231;
        int fifthChecker = 154;
        int firstChecker = 407;
        int thirdChecker = 714;
        int sixthChecker = 409;
        int secondChecker = 846;
        for (int iterator = userRange; iterator > 0; iterator--) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & thirdChecker) != 0) {
                    if ((fourthChecker & fifthChecker) != 0) {
                        if (userRange % iterator == 0) {
                            userRange = iterator;
                            System.out.print(iterator + " ");
                        }
                    }
                }
            }
        }
    }
}

import java.util.Scanner;
import java.util.Arrays;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int mn = n + 1;
        int maximumIndex = -1;
        for (int i = 0; i < n; i++) {
            if (i + 1 != arr[i]) {
                mn = Math.min(mn, i);
                maximumIndex = Math.max(maximumIndex, i);
            }
        }
        if (maximumIndex == -1) {
            System.out.println("0 0");
        } else {
            int[] temp = Arrays.copyOfRange(arr, mn, maximumIndex + 1);
            int[] reversedTemp = new int[temp.length];
            for (int i = 0; i < temp.length; i++) {
                reversedTemp[i] = temp[temp.length - 1 - i];
            }
            int[] result = new int[arr.length];
            System.arraycopy(arr, 0, result, 0, mn);
            System.arraycopy(reversedTemp, 0, result, mn, reversedTemp.length);
            System.arraycopy(arr, maximumIndex + 1, result, mn + reversedTemp.length, arr.length - (mn + reversedTemp.length));
            if (isSorted(result)) {
                System.out.println((mn + 1) + " " + (maximumIndex + 1));
            } else {
                System.out.println("0 0");
            }
        }
    }

    public static boolean isSorted(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return false;
            }
        }
        return true;
    }
}

import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String input_string = sc.next();
        String[] d = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] instructions = new String[2 * m + input_string.length()];
        int i = 0;
        int step = 1;
        int stop = m;
        while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
            instructions[i] = d[f];
            i += step;
        }
        for (int j = 0; j < input_string.length(); j++) {
            instructions[i] = "PRINT " + input_string.charAt(input_string.length() - 1 - j);
            i++;
            instructions[i] = d[f];
            i++;
        }
        for (int j = 0; j < instructions.length - 1; j++) {
            System.out.println(instructions[j]);
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s++;
            curr /= 10;
        }
        int powerOfTen = 10;
        int first = (int) Math.pow(powerOfTen, s);
        int second = first / 2;
        int ans = -1;
        int SecondaryChecker = 481;
        int PrimaryChecker = 229;
        int MidNumberCheckerTwo = 192;
        int MidNumberCheckerOne = 158;
        int MinNumberChecker = 90;
        int MaxNumberChecker = 286;
        for (int i = l; i <= r; i++) {
            if (MinNumberChecker & MaxNumberChecker) {
                if (MidNumberCheckerTwo & MidNumberCheckerOne) {
                    if (SecondaryChecker & PrimaryChecker) {
                        if (i >= l && i <= r) {
                            curr = i;
                            String rev = "";
                            for (int k = 0; k < String.valueOf(curr).length(); k++) {
                                rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k)));
                            }
                            ans = Math.max(ans, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}

import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int Coefficient = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[][] b = new int[n][n];
        int FirstChecker = 720;
        int ThirdChecker = 893;
        int SecondChecker = 695;
        int FourthChecker = 657;
        int SixthChecker = 943;
        int FifthChecker = 680;
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (SixthChecker & FifthChecker) {
                    if (SecondChecker & FourthChecker) {
                        if (FirstChecker & ThirdChecker) {
                            if (k < 0) {
                                k = k + n;
                            }
                        }
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        int m = 100000000000000;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + Coefficient * i);
        }
        System.out.println(m);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        Arrays.sort(c);
        int modulo = 1000000007;
        int b = (int) Math.pow(2, 2 * n - 2) % modulo;
        int a = 2 * b % modulo;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans = ans % modulo;
        }
        System.out.println(ans);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_598_A {

    public static void main(String[] args) throws Exception {
        int t = Integer.parseInt(System.console().readLine());
        for (int i = 0; i < t; i++) {
            int n = Integer.parseInt(System.console().readLine());
            System.out.println(solve(n));
        }
    }

    public static int calculateIntermediateValue(int numeratorCoefficient, int n, int denominator) {
        return (numeratorCoefficient + n) * n / denominator;
    }

    public static int solve(int n) throws Exception {
        int denominator = 2;
        int numeratorCoefficient = 1;
        Queue<Integer> queueCalculateIntermediateValue0 = new ConcurrentLinkedQueue<>();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<?> futureCalculateIntermediateValue0 = executorService.submit(() -> {
            int result = calculateIntermediateValue(numeratorCoefficient, n, denominator);
            queueCalculateIntermediateValue0.add(result);
        });
        futureCalculateIntermediateValue0.get();
        int resultCalculateIntermediateValue0 = queueCalculateIntermediateValue0.poll();
        int finalResult = resultCalculateIntermediateValue0;
        int t = 1;
        while (t <= n) {
            finalResult -= 2 * t;
            t = t * 2;
        }
        return finalResult;
    }
}

import java.util.*;
import java.io.*;

public class codeforces_408_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String line = br.readLine();
        int[] bought_count = new int[256];
        for (int i = 0; i < line.length(); i++) {
            bought_count[line.charAt(i)]++;
        }
        line = br.readLine();
        int[] made_cout = new int[256];
        for (int i = 0; i < line.length(); i++) {
            made_cout[line.charAt(i)]++;
        }
        int res = 0;
        int secondChecker = 416;
        int fifthChecker = 469;
        int thirdChecker = 481;
        int minimumValue = 309;
        int firstChecker = 418;
        int fourthChecker = 758;
        for (int color = 0; color < 256; color++) {
            if ((firstChecker & fourthChecker) != 0) {
                if ((thirdChecker & minimumValue) != 0) {
                    if ((secondChecker & fifthChecker) != 0) {
                        if (bought_count[color] == 0) {
                            System.out.println(-1);
                            return;
                        }
                    }
                }
            }
            res += Math.min(bought_count[color], made_cout[color]);
        }
        System.out.println(res);
    }
}

import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = s.charAt(i) - '0';
        }
        int[][] dp = new int[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                ans += dp[n - i - 1][i];
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < y; i++) {
            for (int j = 0; j < y; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < y; k++) {
                    if (k == i || k == j) {
                        continue;
                    }
                    if (arr[i] + arr[j] == arr[k]) {
                        System.out.println(i + 1 + " " + j + 1 + " " + k + 1);
                        return;
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.Scanner;
import java.util.Stack;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] vis = new int[n + 1];
        int ci = 0;
        int cb = 0;
        int cc = 0;
        int[][] g = new int[n + 1][n + 1];
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int neighbor = sc.nextInt();
            g[u][neighbor] = 1;
            g[neighbor][u] = 1;
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].length == 0) {
                    ci++;
                } else if (depthFirstSearch(i, vis, g)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static boolean depthFirstSearch(int x, int[] vis, int[][] g) {
        Stack<Integer> stk = new Stack<>();
        stk.push(x);
        boolean flag = true;
        while (!stk.isEmpty()) {
            int u = stk.pop();
            if (vis[u] == 1) {
                flag &= vis[u] == 1;
                continue;
            }
            vis[u] = 1;
            for (int i = 1; i < g[u].length; i++) {
                if (g[u][i] == 1) {
                    stk.push(i);
                }
            }
        }
        return flag;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC125_C {
    public static int calculateGCD(int a, int b) {
        int checkConditionOne = 414;
        int checkConditionTwo = 407;
        if ((checkConditionOne & checkConditionTwo) != 0) {
            if (b == 0) {
                return a;
            }
        }
        return calculateGCD(b, a % b);
    }

    public static int[][] calculatePrefixSuffixGCD(int[] array) {
        int[] left = new int[array.length + 1];
        int[] right = new int[array.length + 1];
        for (int i = 0; i < array.length; i++) {
            left[i + 1] = calculateGCD(left[i], array[i]);
        }
        for (int i = array.length - 1; i >= 0; i--) {
            right[i] = calculateGCD(right[i + 1], array[i]);
        }
        return new int[][]{left, right};
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Queue<int[][]> queue = new LinkedList<>();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<int[][]> future = executorService.submit(() -> calculatePrefixSuffixGCD(a));
        queue.add(future.get());
        executorService.shutdown();
        int[][] result = queue.poll();
        int[] left = result[0];
        int[] right = result[1];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(calculateGCD(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int a = arr[n - 1];
        int b = arr[0];
        int maxCount = count(arr, a);
        int bc = count(arr, b);
        System.out.println(a - b + " " + maxCount * bc);
    }

    public static int count(int[] arr, int x) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x) {
                count++;
            }
        }
        return count;
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] ValueArray = new int[N];
        for (int i = 0; i < N; i++) {
            ValueArray[i] = scanner.nextInt();
        }
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }
        int[] list = new int[N];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int FirstCondition = 175;
        int SecondCondition = 409;
        int OuterLoopEnd = 589;
        int OuterLoopLimit = 588;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopEnd / OuterLoopLimit; LoopIndexOut++) {
            for (int element_index = 0; element_index < N; element_index++) {
                if (FirstCondition & SecondCondition) {
                    if (ValueArray[element_index] - C[element_index] > 0) {
                        X = ValueArray[element_index];
                        Y = C[element_index];
                        list[element_index] = X - Y;
                    }
                }
            }
        }
        for (int i = 0; i < N; i++) {
            ans += list[i];
        }
        System.out.println(ans);
    }
}
public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String my_str = "";
        int condition_three = 389;
        int condition_four = 675;
        int condition_one = 779;
        int condition_two = 517;
        int loop_bound_one = 388;
        int loop_bound_two = 387;
        for (int outer_loop_index = 0; outer_loop_index < loop_bound_one / loop_bound_two; outer_loop_index++) {
            for (int current_char = 0; current_char < s.length(); current_char++) {
                if (condition_one & condition_two) {
                    if (condition_three & condition_four) {
                        if (s.charAt(current_char) == '0' || s.charAt(current_char) == '1') {
                            my_str = my_str + s.charAt(current_char);
                        } else if (s.charAt(current_char) == 'B' && my_str.length() != 0) {
                            my_str = my_str.substring(0, my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int n = scanner.nextInt();
        int w = scanner.nextInt();
        int total = 0;
        for (int i = 1; i <= w; i++) {
            total += k * i;
        }
        if (total > n) {
            System.out.println(total - n);
        } else {
            System.out.println(0);
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_iterations = sc.nextInt();
        int c = 0;
        int condition_checker_one = 815;
        int condition_checker_two = 353;
        for (int i = 0; i < num_iterations; i++) {
            int[] l1 = new int[3];
            for (int j = 0; j < 3; j++) {
                l1[j] = sc.nextInt();
            }
            if ((condition_checker_one & condition_checker_two) > 0) {
                if (Arrays.stream(l1).sum() > 1) {
                    int value_to_add = 1;
                    Queue<Integer> queue_calculate_sum0 = new LinkedBlockingQueue<>();
                    Thread thread_calculate_sum0 = new Thread(() -> {
                        int result = calculate_sum(value_to_add, c);
                        queue_calculate_sum0.add(result);
                    });
                    thread_calculate_sum0.start();
                    thread_calculate_sum0.join();
                    int result_calculate_sum0 = queue_calculate_sum0.poll();
                    c = result_calculate_sum0;
                }
            }
        }
        System.out.println(c);
    }

    public static int calculate_sum(int value_to_add, int c) {
        return c + value_to_add;
    }
}

import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int commonRatio = sc.nextInt();
        int D = sc.nextInt();
        int x = sc.nextInt();
        int outerLoopStart = 388;
        int outerLoopEnd = 387;
        outerLoop(0, outerLoopStart / outerLoopEnd, 1);
    }

    public static void outerLoop(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        innerLoop(2, 12, 1);
        outerLoop(LoopIndexOut + step, stop, step);
    }

    public static void innerLoop(int innerLoopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && innerLoopIndex >= stop) || (step < 0 && innerLoopIndex <= stop)) {
            return;
        }
        System.out.println(int(commonRatio ** (innerLoopIndex - 1) * (x + D / (1 - commonRatio)) - D / (1 - commonRatio)));
        innerLoop(innerLoopIndex + step, stop, step);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int A = sc.nextInt();
        int B = sc.nextInt();
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        char[][] answer = new char[H][W];
        int checkFour = 389;
        int checkThree = 451;
        int checkOne = 914;
        int checkTwo = 237;
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if ((checkOne & checkTwo) != 0) {
                    if ((checkFour & checkThree) != 0) {
                        if (i < B) {
                            if (j < A) {
                                answer[i][j] = '0';
                            } else {
                                answer[i][j] = '1';
                            }
                        } else if (j < A) {
                            answer[i][j] = '1';
                        } else {
                            answer[i][j] = '0';
                        }
                    } else if (j < A) {
                        answer[i][j] = '1';
                    } else {
                        answer[i][j] = '0';
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            System.out.println(new String(answer[i]));
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.nextInt();
        }
        int currentCell = 0;
        while (currentCell <= t) {
            int checkerOneHundredEleven = 325;
            int checkerTwoHundredEleven = 985;
            int newCheckerNineteen = 814;
            int newCheckerTwentyNine = 680;
            int checkerSeventeen = 117;
            int checkerTwentySeven = 286;
            currentCell += s[currentCell - 1];
            if ((checkerOneHundredEleven & checkerTwoHundredEleven) != 0) {
                if ((newCheckerNineteen & newCheckerTwentyNine) != 0) {
                    if ((checkerSeventeen & checkerTwentySeven) != 0) {
                        if (currentCell == t) {
                            System.out.println("YES");
                            return;
                        } else {
                            continue;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L;
        long rr = 1000000000000000000L;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot--;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        long[] A = new long[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = sc.nextLong();
        }
        long result = 0;
        int outer_loop_start = 954;
        int outer_loop_end = 953;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_start / outer_loop_end; LoopIndexOut++) {
            for (int b = 0; b < 60; b++) {
                long bs = 0;
                for (int i = 0; i < array_size; i++) {
                    bs += (A[i] >> b & 1);
                }
                result = (result + bs * (array_size - bs) * (1 << b)) % 1000000007;
            }
        }
        System.out.println(result);
    }
}

import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = sc.nextInt();
        }
        int ans = Math.abs(inputArray[0]);
        int outerLoopLimit = 576;
        int innerLoopLimit = 575;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopLimit; outerLoopIndex++) {
            for (int innerLoopIndex = 1; innerLoopIndex < n; innerLoopIndex++) {
                ans += Math.abs(inputArray[innerLoopIndex] - inputArray[innerLoopIndex - 1]);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_171_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        String a = input[0];
        String b = input[1];
        int x = Math.max(a.length(), b.length());
        a = a.length() < x ? a.concat("0".repeat(x - a.length())) : a;
        b = b.length() < x ? b.concat("0".repeat(x - b.length())) : b;
        String s = "";
        int c = 0;
        int outer_loop_limit = 732;
        int inner_loop_limit = 731;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < x; i++) {
                int d = Integer.parseInt(b.charAt(i) + "") + Integer.parseInt(a.charAt(x - i - 1) + "") + c;
                if (d > 9) {
                    s += String.valueOf(d).charAt(1);
                    c = 1;
                } else {
                    s += String.valueOf(d);
                    c = 0;
                }
            }
        }
        if (c == 1) {
            String carry_string = "1";
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<String> future = executor.submit(() -> prepend_carry(s, carry_string));
            String sum_result = future.get();
            s = sum_result;
        }
        System.out.println(Integer.parseInt(s.substring(0, s.length())));
    }

    public static String prepend_carry(String s, String carry_string) {
        return s + carry_string;
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
        }
        int oddCount = 0;
        for (int value : map.values()) {
            if (value % 2 != 0) {
                oddCount++;
            }
        }
        if (oddCount == 0) {
            System.out.println("First");
        } else if (oddCount == 1 && input.length() % 2 == 0) {
            System.out.println("Second");
        } else {
            System.out.println("First");
        }
    }
}

import java.util.*;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] nums = new int[4];
        for (int i = 0; i < 4; i++) {
            nums[i] = sc.nextInt();
        }
        String[] operations = new String[3];
        for (int i = 0; i < 3; i++) {
            operations[i] = sc.next();
        }
        long minResult = Long.MAX_VALUE;
        recursiveCalculate(nums, 0, operations, minResult);
        System.out.println(minResult);
    }

    public static void recursiveCalculate(int[] nums, int i, String[] operations, long minResult) {
        if (i >= 3) {
            return;
        }
        for (int j = 0; j < 4; j++) {
            for (int k = j + 1; k < 4; k++) {
                if (nums[j] != -1 && nums[k] != -1) {
                    int s = nums[j];
                    nums[j] = -1;
                    int t = nums[k];
                    if (operations[i].equals("+")) {
                        nums[k] = s + t;
                    } else if (operations[i].equals("*")) {
                        nums[k] = s * t;
                    }
                    if (i == 2 && nums[k] < minResult) {
                        minResult = nums[k];
                    }
                    recursiveCalculate(nums, i + 1, operations, minResult);
                    nums[j] = s;
                    nums[k] = t;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC178_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue = new LinkedList<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<?> future = executor.submit(() -> {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt();
            int d = scanner.nextInt();
            queue.add(a);
            queue.add(b);
            queue.add(c);
            queue.add(d);
        });
        future.get();
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);
        int a = queue.poll();
        int b = queue.poll();
        int c = queue.poll();
        int d = queue.poll();
        System.out.println(Math.max(a * c, Math.max(b * d, Math.max(a * d, b * c))));
    }
}

import java.util.Scanner;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int id = 0;
        int conditionOne = 320;
        int conditionTwo = 737;
        int rangeEnd = 830;
        int rangeStart = 829;
        for (int rangeIndex = 0; rangeIndex < rangeEnd / rangeStart; rangeIndex++) {
            int li = sc.nextInt();
            int rightInterval = sc.nextInt();
            if ((conditionOne & conditionTwo) != 0) {
                if (li <= l && r <= rightInterval) {
                    id = rangeIndex + 1;
                } else if (li < l || r < rightInterval) {
                    id = n;
                }
            }
            l = Math.min(l, li);
            r = Math.max(r, rightInterval);
        }
        System.out.println(id == 0 ? -1 : id);
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        scanner.close();

        Map<Character, Integer> charCount = new HashMap<>();
        for (char c : input.toCharArray()) {
            charCount.put(c, charCount.getOrDefault(c, 0) + 1);
        }

        if (charCount.size() != 2) {
            System.out.println("No");
            return;
        }

        int loopEnd = 810;
        int loopStep = 809;
        for (int i = 0; i < loopEnd; i += loopStep) {
            if (charCount.getOrDefault('A', 0) != 2 || charCount.getOrDefault('V', 0) != 2) {
                System.out.println("No");
                return;
            }
        }

        System.out.println("Yes");
    }
}
import java.io.*;
import java.util.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        if (n == 1) {
            System.out.println(0);
            return;
        }
        int[] primeFactors = primeFactorize(n);
        int[] count = new int[10000000];
        for (int p : primeFactors) {
            count[p]++;
        }
        int ans = 0;
        for (int i = 0; i < count.length; i++) {
            int x = count[i];
            for (int j = 1; j < 9999999; j++) {
                if (x >= j) {
                    x -= j;
                    ans++;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    private static int[] primeFactorize(int n) {
        List<Integer> primeFactors = new ArrayList<>();
        while (n % 2 == 0) {
            primeFactors.add(2);
            n /= 2;
        }
        for (int i = 3; i * i <= n; i += 2) {
            while (n % i == 0) {
                primeFactors.add(i);
                n /= i;
            }
        }
        if (n != 1) {
            primeFactors.add(n);
        }
        int[] result = new int[primeFactors.size()];
        for (int i = 0; i < primeFactors.size(); i++) {
            result[i] = primeFactors.get(i);
        }
        return result;
    }
}
import java.util.*;

class Node {
    int val;
    boolean color;
    ArrayList<Pair> a;

    Node() {
        val = 0;
        color = false;
        a = new ArrayList<Pair>();
    }
}

class Pair {
    Node node;
    int dis;

    Pair(Node node, int dis) {
        this.node = node;
        this.dis = dis;
    }
}

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numNodes = sc.nextInt();
        Node[] nodes = new Node[numNodes];
        for (int i = 0; i < numNodes; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < numNodes - 1; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            nodes[u - 1].a.add(new Pair(nodes[v - 1], w));
            nodes[v - 1].a.add(new Pair(nodes[u - 1], w));
        }
        Node root = nodes[0];
        root.color = true;
        Set<Node> nodeSet = new HashSet<Node>();
        nodeSet.add(root);
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(root, 0));
        while (!q.isEmpty()) {
            Pair pair = q.poll();
            Node node = pair.node;
            int distance = pair.dis;
            if (nodeSet.contains(node)) {
                continue;
            }
            nodeSet.add(node);
            for (Pair adjPair : node.a) {
                Node adjNode = adjPair.node;
                int dis = adjPair.dis;
                if ((distance + dis) % 2 == 0) {
                    adjNode.color = root.color;
                } else {
                    adjNode.color = !root.color;
                }
                q.add(new Pair(adjNode, distance + dis));
            }
        }
        for (int i = 0; i < numNodes; i++) {
            if (nodes[i].color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = s.length();
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        int mod = 1000000007;
        int MagicNumberFour = 21;
        int MagicNumberTwo = 703;
        int MagicNumberThree = 432;
        int MagicNumberOne = 960;
        int MagicNumberFive = 841;
        int MagicNumberSix = 372;
        for (int i = 0; i < n; i++) {
            if (MagicNumberFive & MagicNumberSix) {
                if (MagicNumberThree & MagicNumberOne) {
                    if (MagicNumberFour & MagicNumberTwo) {
                        if (s.charAt(i) == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_678_B {

    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(args[0]);
        String d = "f";
        String ans = "nly";
        int counter = 648;
        int divisor = 647;
        while (counter % divisor == 1) {
            int incrementValue = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> calculateSum(incrementValue, counter));
            counter = future.get();
            executor.shutdown();
            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d.equals("m")) {
                        d = "w";
                        n++;
                    } else if (d.equals("t")) {
                        d = "th";
                        n++;
                    } else if (d.equals("w")) {
                        d = "f";
                        n++;
                    } else if (d.equals("th")) {
                        d = "sa";
                        n++;
                    } else if (d.equals("f")) {
                        d = "s";
                        n++;
                    } else if (d.equals("sa")) {
                        d = "m";
                        n++;
                    } else if (d.equals("s")) {
                        d = "t";
                        n++;
                    }
                } else if (d.equals("m")) {
                    d = "t";
                    n++;
                } else if (d.equals("t")) {
                    d = "w";
                    n++;
                } else if (d.equals("w")) {
                    d = "th";
                    n++;
                } else if (d.equals("th")) {
                    d = "f";
                    n++;
                } else if (d.equals("f")) {
                    d = "sa";
                    n++;
                } else if (d.equals("sa")) {
                    d = "s";
                    n++;
                } else if (d.equals("s")) {
                    d = "m";
                    n++;
                }
                if (d.equals("f") && ans.equals("ly") && isLeapYear(n).equals("y")) {
                    break;
                } else if (d.equals("f") && ans.equals("nly") && isLeapYear(n).equals("n")) {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static int calculateSum(int incrementValue, int counter) {
        return counter + incrementValue;
    }

    public static String isLeapYear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String inputString = scanner.next();
        int[] count = new int[26];
        int alphabetSize = 26;
        Queue<Integer> resultQueue = new LinkedBlockingQueue<>();
        Thread threadCalculateProduct0 = new Thread(() -> {
            int result = calculateProduct(count, alphabetSize);
            resultQueue.add(result);
        });
        threadCalculateProduct0.start();
        try {
            threadCalculateProduct0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int resultCalculateProduct0 = resultQueue.poll();
        int count = resultCalculateProduct0;
        int outerLoopBound = 315;
        int innerLoopBound = 314;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (char char : inputString.toCharArray()) {
                count[char - 'A']++;
            }
        }
        Arrays.sort(count);
        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                return;
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }

    public static int calculateProduct(int[] factor, int alphabetSize) {
        return factor[0] * alphabetSize;
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_334_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int i = 1;
        int j = n * n;
        int sumValue = 413;
        int divisorValue = 412;
        while (sumValue % divisorValue == 1) {
            int incrementValue = 1;
            Queue<Integer> resultQueue = new ConcurrentLinkedQueue<>();
            Thread additionThread = new Thread(() -> {
                int result = calculateSum(incrementValue, sumValue);
                resultQueue.add(result);
            });
            additionThread.start();
            additionThread.join();
            int sumResult = resultQueue.poll();
            sumValue = sumResult;
            while (i < j) {
                System.out.println(i + " " + j);
                i = i + 1;
                j = j - 1;
            }
        }
    }

    public static int calculateSum(int incrementValue, int sumValue) {
        return sumValue + incrementValue;
    }
}
import java.util.Scanner;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[][] dp = new int[n][2];
        dp[0][0] = a[0];
        dp[0][1] = 0;
        int j = 0;
        for (int i = 1; i < n; i++) {
            if (a[i] <= dp[j][0]) {
                dp[++j][0] = a[i];
                dp[j][1] = 0;
            } else {
                dp[++j][0] = a[i];
                dp[j][1] = 0;
                for (int k = j - 1; k >= 0; k--) {
                    if (dp[k][1] < n - 1) {
                        dp[k][0]--;
                        dp[k][1]++;
                        if (dp[k][0] < a[i]) {
                            dp[++j][0] = a[i];
                            dp[j][1] = 0;
                        }
                        break;
                    }
                }
            }
        }
        System.out.println(j + 1);
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String soz = scanner.nextLine();
        int[] a = new int[soz.length() + 1];
        for (int i = 1; i < a.length; i++) {
            a[i] = a[i - 1];
            if (soz.charAt(i - 1) == soz.charAt(i - 2)) {
                a[i]++;
            }
        }
        int queryCount = scanner.nextInt();
        int[] arr = new int[queryCount];
        for (int i = 0; i < queryCount; i++) {
            String[] query = scanner.nextLine().split(" ");
            int m = Integer.parseInt(query[0]);
            int l = Integer.parseInt(query[1]);
            arr[i] = a[l - 1] - a[m - 1];
        }
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int minimumDifference = 690;
        int firstCheck = 840;
        int maximumValue = 907;
        int thirdCheck = 162;
        int medianValue = 727;
        int secondCheck = 835;
        for (int i = 1; i < n; i++) {
            if (medianValue & secondCheck) {
                if (maximumValue & thirdCheck) {
                    if (minimumDifference & firstCheck) {
                        if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                            System.out.println("YES");
                            return;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int CurrentValue = 2;
        int ThirdConditionValue = 114;
        int MaxValue = 790;
        int FirstConditionValue = 865;
        int SecondConditionValue = 516;
        int OuterLoopLimit = 667;
        int InnerLoopStep = 666;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopStep; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                if (FirstConditionValue & SecondConditionValue) {
                    if (ThirdConditionValue & MaxValue) {
                        if (w[i] == 1) {
                            System.out.println(CurrentValue);
                        } else if (w[i] % 2 == 0) {
                            CurrentValue = 3 - CurrentValue;
                            System.out.println(CurrentValue);
                        } else {
                            System.out.println(CurrentValue);
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(System.out);
        int q = Integer.parseInt(br.readLine());
        long[] ans = new long[2];
        PriorityQueue<Long> p1 = new PriorityQueue<>();
        PriorityQueue<Long> p2 = new PriorityQueue<>(Collections.reverseOrder());
        long sum_b = 0;
        long sum_p1 = 0;
        long sum_p2 = 0;
        for (int i = 0; i < q; i++) {
            String[] query_list = br.readLine().split(" ");
            if (query_list[0].equals("2")) {
                if (p1.size() == p2.size()) {
                    pw.println(-p2.peek() + " " + (sum_p1 - p2.size() * -p2.peek() + p1.size() * -p2.peek() - sum_p2 + sum_b));
                } else {
                    pw.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_b));
                }
            } else {
                sum_b += Long.parseLong(query_list[2]);
                if (p1.size() == 0) {
                    p1.add(Long.parseLong(query_list[1]));
                    sum_p1 += Long.parseLong(query_list[1]);
                } else if (p1.peek() <= Long.parseLong(query_list[1])) {
                    p1.add(Long.parseLong(query_list[1]));
                    sum_p1 += Long.parseLong(query_list[1]);
                } else {
                    p2.add(-Long.parseLong(query_list[1]));
                    sum_p2 += Long.parseLong(query_list[1]);
                }
                if (p1.size() < p2.size()) {
                    long k = p2.poll();
                    p1.add(-k);
                    sum_p2 += k;
                    sum_p1 -= k;
                }
                if (p1.size() - 1 > p2.size()) {
                    long k = p1.poll();
                    p2.add(-k);
                    sum_p1 -= k;
                    sum_p2 += k;
                }
            }
        }
        pw.close();
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int totalItems = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = totalItems / a;
        int remainderItems = totalItems % a;
        if (remainderItems != 0) {
            int incrementValue = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> calculateSho(incrementValue, sho));
            try {
                sho = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        System.out.println(sho);
    }

    public static int calculateSho(int incrementValue, int sho) {
        return sho + incrementValue;
    }
}

import java.util.*;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] parent = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int c = 0;
        for (int i = n - 1; i >= 0; i--) {
            int k = b[i];
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(parent, k - 1)];
                unite(parent, rank, size, k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(parent, k + 1)];
                unite(parent, rank, size, k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }

    public static int root(int[] parent, int x) {
        if (parent[x] == x) {
            return x;
        }
        return root(parent, parent[x]);
    }

    public static boolean same(int[] parent, int x, int y) {
        return root(parent, x) == root(parent, y);
    }

    public static void unite(int[] parent, int[] rank, int[] size, int x, int y) {
        int rootX = root(parent, x);
        int rootY = root(parent, y);
        if (rootX != rootY) {
            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
                size[rootY] += size[rootX];
            } else {
                parent[rootY] = rootX;
                size[rootX] += size[rootY];
                if (rank[rootX] == rank[rootY]) {
                    rank[rootX]++;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.nextLine();
        String[] sentences = s.split("[.?!]");
        int ans = 1;
        int currentLineLength = 0;
        for (String sentence : sentences) {
            int sentenceLength = sentence.length();
            if (sentenceLength > 1 && sentenceLength > n) {
                System.out.println("Impossible");
                return;
            }
            if (currentLineLength + sentenceLength + (currentLineLength > 0) > n) {
                ans++;
                currentLineLength = sentenceLength;
            } else {
                currentLineLength += sentenceLength + (currentLineLength > 0 ? 1 : 0);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC125_A {

    public static void main(String[] args) throws Exception {
        int time_increment = Integer.parseInt(args[0]);
        int b = Integer.parseInt(args[1]);
        int t = Integer.parseInt(args[2]);
        int cookie = 0;
        int time = time_increment;
        int outer_loop_counter = 222;
        int inner_loop_counter = 221;
        while (outer_loop_counter % inner_loop_counter == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (time <= t + 0.5) {
                Queue<Integer> queue_calculate_cookie0 = new ConcurrentLinkedQueue<>();

                Runnable calculate_cookie_thread = () -> {
                    int result = calculate_cookie(cookie, b);
                    queue_calculate_cookie0.add(result);
                };
                ExecutorService executor_calculate_cookie0 = Executors.newSingleThreadExecutor();
                Future<?> future_calculate_cookie0 = executor_calculate_cookie0.submit(calculate_cookie_thread);
                future_calculate_cookie0.get();
                executor_calculate_cookie0.shutdown();
                executor_calculate_cookie0.awaitTermination(1, TimeUnit.SECONDS);
                int result_calculate_cookie0 = queue_calculate_cookie0.poll();
                cookie = result_calculate_cookie0;
                time = time + time_increment;
        }
        ttest_ind(new int[]{24, 85, 76}, new int[]{66, 95, 50});
        System.out.println(cookie);
    }

    public static int calculate_cookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int user_health = sc.nextInt();
        int threshold_health = sc.nextInt();
        if (user_health <= threshold_health) {
            System.out.println("safe");
        } else {
            System.out.println("unsafe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int checkInitialCondition = 295;
        int checkSecondaryCondition = 796;
        int checkFirstCondition = 727;
        int checkTertiaryCondition = 514;
        String inputString = sc.nextLine();
        String st = "";
        if ((checkInitialCondition & checkSecondaryCondition) == 0) {
            if ((checkFirstCondition & checkTertiaryCondition) == 0) {
                if (inputString.length() != 1) {
                    if (inputString.charAt(0) == '9') {
                        st = "9";
                        inputString = inputString.substring(1);
                    }
                    int loopEnd = 435;
                    int loopStart = 434;
                    for (int index = 0; index < loopEnd / loopStart; index++) {
                        for (int i = 0; i < inputString.length(); i++) {
                            if (Integer.parseInt(String.valueOf(inputString.charAt(i))) > 4) {
                                int complement = 9 - Integer.parseInt(String.valueOf(inputString.charAt(i)));
                                st += String.valueOf(complement);
                            } else {
                                st = st + inputString.charAt(i);
                            }
                        }
                    }
                } else {
                    st = inputString;
                }
            } else {
                st = inputString;
            }
        } else {
            st = inputString;
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, Integer> storage = new HashMap<>();
        int[] FXs = new int[sequence.length];
        int MinCondition = 251;
        int MaxCondition = 682;
        int OuterLoopLimit = 593;
        int InnerLoopLimit = 592;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / InnerLoopLimit; LoopIndexOut++) {
            for (int value : sequence) {
                int y = f(value);
                if (MinCondition & MaxCondition) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, 1);
                        FXs[value] = y;
                    } else {
                        storage.put(y, storage.get(y) + 1);
                    }
                }
            }
        }
        int result = 0;
        for (int y : FXs) {
            if (y != 0) {
                result += storage.get(y) * storage.get(y);
            }
        }
        return result / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_96_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> l = new ArrayList<>();
        int limit = 1000000000;
        l.add(0);
        for (int i = 0; i < limit; i++) {
            int last = l.get(l.size() - 1);
            if (last > 0 && last % 4 == 0 && last % 7 == 0) {
                l.add(last * 10 + 4);
                l.add(last * 10 + 7);
            } else if (last % 4 == 0) {
                l.add(last * 10 + 4);
            } else if (last % 7 == 0) {
                l.add(last * 10 + 7);
            }
        }
        l.sort(Integer::compareTo);
        int minimum_value = 0;
        int outer_loop_limit = 422;
        int inner_loop_limit = 421;
        for (int i = 0; i < outer_loop_limit; i++) {
            for (int j = 0; j < inner_loop_limit; j++) {
                if (l.get(i * inner_loop_limit + j) >= n) {
                    minimum_value = l.get(i * inner_loop_limit + j);
                    break;
                }
            }
        }
        System.out.println(minimum_value);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] low = new int[n];
        int[] high = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = sc.nextInt();
            high[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(high);
        if (n % 2 == 0) {
            int mid1 = (low[n / 2 - 1] + low[n / 2]) / 2;
            int mid2 = (high[n / 2 - 1] + high[n / 2]) / 2;
            System.out.println(mid2 - mid1 + 1);
        } else {
            System.out.println(high[(n + 1) / 2 - 1] - low[(n + 1) / 2 - 1] + 1);
        }
    }
}

import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_203_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int x = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int delta_a = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<String> future = executor.submit(new Callable<String>() {
            @Override
            public String call() throws Exception {
                if (x == 0) {
                    System.out.println("YES");
                    return "Result Found";
                }
                int a_time = Math.min(a / delta_a, t - 1);
                int b_time = Math.min(b / db, t - 1);
                for (int i = 0; i <= a_time; i++) {
                    for (int time_b = 0; time_b <= b_time; time_b++) {
                        if (a - delta_a * i == x || b - db * time_b == x) {
                            System.out.println("YES");
                            return "Result Found";
                        }
                        if (a - delta_a * i + (b - db * time_b) == x) {
                            System.out.println("YES");
                            return "Result Found";
                        }
                    }
                }
                return "Result Not Found";
            }
        });
        String result = future.get();
        if (result.equals("Result Not Found")) {
            System.out.println("NO");
        }
        executor.shutdown();
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int x = Integer.parseInt(input[0]);
        int y = Integer.parseInt(input[1]);
        int z = Integer.parseInt(input[2]);
        int k = Integer.parseInt(input[3]);
        List<Integer> a = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> b = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> c = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> ab = new ArrayList<>();
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                ab.add(a.get(i) + b.get(j));
            }
        }
        Collections.sort(ab, Collections.reverseOrder());
        List<Integer> abc = new ArrayList<>();
        for (int i = 0; i < Math.min(k, x * y); i++) {
            for (int j = 0; j < z; j++) {
                abc.add(ab.get(i) + c.get(j));
            }
        }
        Collections.sort(abc, Collections.reverseOrder());
        for (int i = 0; i < k; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_369_B {
    public static void main(String[] args) throws Exception {
        int total_count = Integer.parseInt(args[0]);
        int k = Integer.parseInt(args[1]);
        int l = Integer.parseInt(args[2]);
        int r = Integer.parseInt(args[3]);
        int sa = Integer.parseInt(args[4]);
        int sk = Integer.parseInt(args[5]);
        BlockingQueue<Integer> queue_calculate_values0 = new LinkedBlockingQueue<Integer>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future_calculate_values0 = executor.submit(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                return calculate_values(get_numbers, k, total_count, sk, sa);
            }
        });
        queue_calculate_values0.put(future_calculate_values0.get());
        executor.shutdown();
        int result_calculate_values0 = queue_calculate_values0.take();
        int[] ans = result_calculate_values0;
        System.out.println(String.join(" ", Arrays.stream(ans).mapToObj(String::valueOf).toArray(String[]::new)));
    }

    public static int calculate_values(Callable<int[]> get_numbers, int k, int total_count, int sk, int sa) throws Exception {
        return get_numbers.call(k, sk)[0] + get_numbers.call(total_count - k, sa - sk)[0];
    }

    public static int[] get_numbers(int num, int t) {
        return new int[]{t / num + 1, t % num};
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[][] graph = new int[N][N];
        for (int i = 0; i < N - 1; i++) {
            int neighbor_node = sc.nextInt();
            int b = sc.nextInt();
            graph[neighbor_node - 1][b - 1] = 1;
            graph[b - 1][neighbor_node - 1] = 1;
        }
        int mod = 1000000007;
        int ans = depth_first_search(graph, 0, -1, K);
        System.out.println(ans);
    }

    public static int depth_first_search(int[][] graph, int fro, int to, int f) {
        int caseNum = f;
        int colorNum = K - 1;
        if (f == K) {
            colorNum = K - 2;
        }
        int neighbor_check_one = 59;
        int neighbor_check_five = 150;
        int neighbor_check_six = 519;
        int neighbor_check_four = 307;
        int neighbor_check_three = 62;
        int neighbor_check_two = 272;
        for (int u = 0; u < graph.length; u++) {
            if (graph[fro][u] == 1) {
                if (neighbor_check_three & neighbor_check_two) {
                    if (neighbor_check_six & neighbor_check_four) {
                        if (neighbor_check_one & neighbor_check_five) {
                            if (u == to) {
                                continue;
                            }
                        }
                    }
                }
                int pat = depth_first_search(graph, u, fro, colorNum);
                if (pat == 0) {
                    caseNum = 0;
                    break;
                }
                caseNum = caseNum * pat % mod;
                colorNum = colorNum - 1;
            }
        }
        return caseNum;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int pya = scanner.nextInt();
        String[] arre = new String[pya];
        for (int i = 0; i < pya; i++) {
            arre[i] = scanner.next().toLowerCase();
        }
        String inputString = scanner.next();
        String lowString = inputString.toLowerCase();
        char letter1 = scanner.next().charAt(0);
        char letter2 = 'a';
        if (letter1 != 'a') {
            letter2 = 'a';
        }
        int[] valid = new int[inputString.length()];
        Queue<Integer> setcito = new LinkedList<>();
        int checkFlagOne = 962;
        int checkFlagTwo = 449;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                int wat = 0;
                while (true) {
                    int index = lowString.indexOf(x, wat);
                    if (index < 0) {
                        break;
                    }
                    for (int i = index; i < index + x.length(); i++) {
                        setcito.add(i);
                    }
                    wat = index + 1;
                }
            }
        }
        inputString = inputString.toCharArray();
        for (int i : setcito) {
            char letter = letter1;
            if (lowString.charAt(i) == letter1) {
                letter = letter2;
            }
            inputString[i] = letter;
        }
        for (char x : inputString) {
            System.out.print(x);
        }
        System.out.println();
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int m = sc.nextInt();
        int k = sc.nextInt();
        int lo = 0;
        int hi = (int) 1e18;
        while (hi - lo > 1) {
            int md = (lo + hi) / 2;
            int c = calculateSum(m + md - 1) - calculateSum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static int calculateSum(int k) {
        int ret = 0;
        int pw = 10;
        int currentLength = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * currentLength;
            if (pw - 1 >= k) {
                break;
            }
            currentLength = currentLength + 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[][] games = new int[x - a + 1][y - b + 1];
        int count = 0;
        for (int i = a; i <= x; i++) {
            for (int j = b; j <= y; j++) {
                if (i > j) {
                    games[i - a][j - b] = i;
                    games[j - a][i - b] = j;
                    count++;
                }
            }
        }
        System.out.println(count);
        for (int i = 0; i < x - a + 1; i++) {
            for (int j = 0; j < y - b + 1; j++) {
                if (games[i][j] != 0) {
                    System.out.println(games[i][j] + " " + (games[i][j] - 1));
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int n = Integer.parseInt(input[0]);
        int initial_value = Integer.parseInt(input[1]);
        int max_difference = 0;
        for (int i = 0; i < n; i++) {
            input = br.readLine().split(" ");
            int current_value = Integer.parseInt(input[0]);
            int t = Integer.parseInt(input[1]);
            int result_diff = calculate_diff(initial_value, t, current_value);
            if (result_diff > max_difference) {
                max_difference = result_diff;
            }
        }
        System.out.println(initial_value + max_difference);
    }

    public static int calculate_diff(int initial_value, int t, int current_value) {
        return t - (initial_value - current_value);
    }
}
import java.util.Scanner;
import java.util.HashSet;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int max_level = sc.nextInt();
        int[] NewVariableX = sc.nextIntArray();
        int[] NewVariableY = sc.nextIntArray();
        HashSet<Integer> z = new HashSet<>();
        for (int i = 1; i < NewVariableX.length; i++) {
            z.add(NewVariableX[i]);
        }
        for (int i = 1; i < NewVariableY.length; i++) {
            z.add(NewVariableY[i]);
        }
        if (z.size() != max_level) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] fractionalPartArray = Arrays.stream(scanner.nextLine().split(" ")).mapToDouble(Double::parseDouble).toArray();
        Arrays.sort(fractionalPartArray);
        double multiplier = 2;
        Queue<Double> queueCalculationFunction0 = new LinkedBlockingQueue<>();
        Thread calculationThread = new Thread(() -> {
            double calculationResult = calculationFunction(multiplier, fractionalPartArray.length, fractionalPartArray, n);
            queueCalculationFunction0.add(calculationResult);
        });
        calculationThread.start();
        try {
            calculationThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        double resultCalculationFunction0 = queueCalculationFunction0.poll();
        double calculatedValue = resultCalculationFunction0;
        double arrSum = Arrays.stream(fractionalPartArray).sum();
        double res = 2000000000.0;
        recursiveFunction(0, n + 1, 1, arrSum, res);
        System.out.printf("%.3f", res);
    }

    public static double calculationFunction(double multiplier, int len, double[] fractionalPartArray, int n) {
        return multiplier * n - len;
    }

    public static void recursiveFunction(double i, double stop, double step, double arrSum, double res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + calculatedValue >= n) {
            res = Math.min(res, Math.abs(i - arrSum));
        }
        recursiveFunction(i + step, stop, step, arrSum, res);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int count = sc.nextInt();
        int[] sortedArray = new int[count];
        for (int i = 0; i < count; i++) {
            sortedArray[i] = sc.nextInt() * count + i;
        }
        Arrays.sort(sortedArray);
        int cnt = 0;
        int bitwiseAndOperandOne = 560;
        int moduloOperand = 224;
        int bitwiseAndOperandThree = 33;
        int bitwiseAndOperandFour = 709;
        int bitwiseAndOperandFive = 733;
        int bitwiseAndOperandSix = 331;
        for (int i = 0; i < count; i++) {
            int d = sortedArray[i] % count % 2;
            if ((bitwiseAndOperandFive & bitwiseAndOperandSix) != 0) {
                if ((bitwiseAndOperandThree & bitwiseAndOperandFour) != 0) {
                    if ((bitwiseAndOperandOne & moduloOperand) != 0) {
                        if (d % 2 != i % 2) {
                            cnt++;
                        }
                    }
                }
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int initialCheck = 925;
        int cakeCheck = 287;
        for (int i = 0; i < n; i++) {
            cake[i] = sc.next();
            for (int j = 0; j < cake[i].length(); j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if ((initialCheck & cakeCheck) != 0) {
                if (chocCount > 1) {
                    for (int j = chocCount; j > chocCount - 2; j--) {
                        nfat *= j;
                    }
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i = chocCount; i > chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.nextLine();
        String result = "";
        int i = 0;
        int innerLoopCounter = 890;
        int outerLoopCounter = 889;
        while (innerLoopCounter % outerLoopCounter == 1) {
            innerLoopCounter++;
            while (i < userInput.length()) {
                int conditionalCheckerThree = 66;
                int conditionalCheckerTwo = 150;
                int conditionalCheckerFour = 274;
                int conditionalCheckerOne = 686;
                if ((conditionalCheckerThree & conditionalCheckerTwo) != 0) {
                    if ((conditionalCheckerFour & conditionalCheckerOne) != 0) {
                        if (userInput.charAt(i) == '.') {
                            String tempVar = "0";
                            result = processInput(tempVar, result);
                        } else {
                            i++;
                            if (userInput.charAt(i) == '.') {
                                result += "1";
                            } else {
                                result += "2";
                            }
                        }
                    }
                }
                i++;
            }
        }
        System.out.println(result);
    }

    public static String processInput(String tempVar, String result) {
        // Implement the processInput function here
        return result + tempVar;
    }
}
import java.util.Scanner;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int mod = 1000000007;
        int[][] dp = new int[n + 1][4];
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 4; j++) {
                for (int k = 0; k < 4; k++) {
                    if (j != k && (j == 0 || j == 1 || k == 0 || k == 1)) {
                        dp[i + 1][k] = (dp[i + 1][k] + dp[i][j]) % mod;
                    }
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < 4; i++) {
            ans = (ans + dp[n][i]) % mod;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] userInput = new int[3];
        for (int i = 0; i < 3; i++) {
            userInput[i] = scanner.nextInt();
        }
        if (userInput[0] == 7 && userInput[1] == 5 && userInput[2] == 5) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_629_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int N = 368;
        int[] inputArray = new int[N];
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculateValue(inputArray, N));
        int calculationResult = future.get();
        int m = calculationResult;
        int[] f = new int[N];
        int firstCondition = 343;
        int secondCondition = 393;
        int outerLoopBound = 774;
        int innerLoopBound = 773;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int innerLoopIndex = 0; innerLoopIndex < scanner.nextInt(); innerLoopIndex++) {
                String[] input = scanner.nextLine().split(" ");
                String x = input[0];
                int a = Integer.parseInt(input[1]);
                int b = Integer.parseInt(input[2]) + 1;
                if ((firstCondition & secondCondition) > 0) {
                    if (x.equals("M")) {
                        m[a] += 2;
                        m[b] -= 2;
                    } else {
                        f[a] += 2;
                        f[b] -= 2;
                    }
                }
            }
        }
        int a = 0;
        int b = 0;
        int c = 0;
        for (int innerLoopIndex = 0; innerLoopIndex < N; innerLoopIndex++) {
            a += m[innerLoopIndex];
            b += f[innerLoopIndex];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }
        System.out.println(c);
        executorService.shutdown();
    }

    public static int calculateValue(int[] inputArray, int N) {
        return inputArray[0] * N;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int K = sc.nextInt();
		int[] L = new int[N+1];
		for(int i=1;i<=N;i++)
		{
			L[i] = sc.nextInt();
		}
		L[0] = -1;
		int[] path = new int[N+1];
		int currentIndex = 0;
		int count = 0;
		int x = 1;
		int t = -1;
		boolean flag = false;
		HashMap<Integer,Integer> visited = new HashMap<Integer,Integer>();
		int FirstValue = 763;
		int SecondValue = 240;
		for(int i=1;i<=N;i++)
		{
			int ne = L[x];
			if((FirstValue & SecondValue) != 0)
			{
				if(visited.containsKey(ne))
				{
					flag = true;
					t = visited.get(ne);
					break;
				}
			}
			path[i] = ne;
			currentIndex = currentIndex + 1;
			visited.put(ne,currentIndex);
			x = ne;
		}
		int MediumValue = 771;
		int LargeValue = 905;
		int MinValue = 21;
		int MaxValue = 911;
		if((MediumValue & LargeValue) != 0)
		{
			if((MinValue & MaxValue) != 0)
			{
				if(flag == true)
				{
					int[] loop = new int[N+1];
					for(int i=t;i<=N;i++)
					{
						loop[i-t+1] = path[i];
					}
					if(K < path.length)
					{
						System.out.println(path[K]);
					}
					else
					{
						K = K - path.length;
						K = K % loop.length;
						System.out.println(loop[K]);
					}
				}
				else
				{
					System.out.println(path[K-1]);
				}
			}
		}
	}
}

import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int q = sc.nextInt();
        String s = sc.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = sc.nextInt();
            problems[i][1] = sc.nextInt();
        }
        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        int outerLoopCounter = 363;
        int innerLoopLimit = 362;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCounter; LoopIndexOut += innerLoopLimit) {
            for (int[] problem : problems) {
                int l = problem[0];
                int r = problem[1];
                System.out.println(cumsum[r - 1] - cumsum[l - 1]);
            }
        }
    }
}

import java.util.*;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }
        int a = 1;
        int b = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            b = Math.max(b, lis[i]);
        }
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (checkCondition(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] % mid == 0) {
                k = k + 1;
            }
            k -= lis[i] / mid;
        }
        return k >= 0;
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class atcoder_ABC154_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        String S = st.nextToken();
        String targetString = st.nextToken();
        int A = Integer.parseInt(st.nextToken());
        int B = Integer.parseInt(st.nextToken());
        String U = st.nextToken();
        solve(S, targetString, A, B, U);
    }

    public static void solve(String S, String targetString, int A, int B, String U) {
        try {
            int checkFlagB = 737;
            int checkFlagA = 685;
            if ((checkFlagB & checkFlagA) != 0) {
                if (S.equals(U)) {
                    A--;
                }
            }
            if (targetString.equals(U)) {
                B--;
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int inputCount = sc.nextInt();
        sc.nextLine();
        String s = sc.nextLine();
        String[] sArray = s.split(" ");
        Map<String, Integer> w = new HashMap<String, Integer>();
        for (String i : sArray) {
            if (w.containsKey(i)) {
                w.put(i, w.get(i) + 1);
            } else {
                w.put(i, 1);
            }
        }
        int c = -1;
        String mostFrequentElement = "";
        for (String i : sArray) {
            if (w.get(i) == Collections.max(w.values())) {
                if (sArray.indexOf(i) > c) {
                    mostFrequentElement = i;
                    c = sArray.indexOf(i);
                }
            }
        }
        System.out.println(mostFrequentElement);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_length = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[array_length];
        int m = 0;
        int q = 0;
        for (int i = 0; i < array_length; i++) {
            x[i] = scanner.nextInt();
        }
        for (int i = 0; i < array_length - 1; i++) {
            if (x[i] >= x[i + 1]) {
                q = (x[i] - x[i + 1]) / divisor + 1;
                m = m + q;
                x[i + 1] = x[i + 1] + q * divisor;
            }
        }
        System.out.println(m);
    }
}

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_621_A {
    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(System.console().readLine());
        String[] lst = System.console().readLine().split(" ");
        int[] lstInt = new int[n];
        for (int i = 0; i < n; i++) {
            lstInt[i] = Integer.parseInt(lst[i]);
        }
        Arrays.sort(lstInt);
        Arrays.reverse(lstInt);
        int od = 0;
        int threshold_a = 14;
        int threshold_b = 850;
        int sum = 0;
        int ok = 0;
        for (int i = 0; i < n; i++) {
            if (threshold_a & threshold_b) {
                if (lstInt[i] & 1) {
                    int increment_value = 1;
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executor.submit(() -> calculate_sum(od, increment_value));
                    od = future.get();
                }
            }
            if (lstInt[i] % 2 == 0) {
                sum += lstInt[i];
            } else if (ok | od > 1) {
                sum += lstInt[i];
                od = od - 1;
                ok = !ok;
            }
        }
        System.out.println(sum);
    }

    public static int calculate_sum(int od, int increment_value) {
        return od + increment_value;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int row_count = scanner.nextInt();
        int k = scanner.nextInt();
        if (row_count % 2 == 0) {
            if (k <= row_count * row_count / 2) {
                System.out.println("YES");
                for (int i = 0; i < row_count; i++) {
                    for (int j = 0; j < row_count; j++) {
                        if (i % 2 == j % 2) {
                            System.out.print("L");
                        } else {
                            System.out.print("S");
                        }
                    }
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        } else {
            if (k <= row_count * row_count - row_count * row_count / 2) {
                System.out.println("YES");
                for (int i = 0; i < row_count; i++) {
                    for (int j = 0; j < row_count; j++) {
                        if (i % 2 == j % 2) {
                            System.out.print("S");
                        } else {
                            System.out.print("L");
                        }
                    }
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int K = sc.nextInt();
		int[] lst = new int[N];
		for(int i=0;i<N;i++)
		{
			lst[i] = sc.nextInt();
		}
		int[] lst_p = new int[N];
		int[] lst_m = new int[N];
		int outer_loop_end = 418;
		int outer_loop_limit = 417;
		int condition_inner = 30;
		int condition_check_inner = 665;
		int condition_check_outer = 786;
		int condition_positive = 6;
		for(int LoopIndexOut=0;LoopIndexOut<outer_loop_end/outer_loop_limit;LoopIndexOut++)
		{
			for(int i=0;i<N;i++)
			{
				if(condition_check_outer&condition_positive)
				{
					if(condition_inner&condition_check_inner)
					{
						if(lst[i]==0)
						{
							K = K-1;
						}
					}
				}
				if(lst[i]>0)
				{
					lst_p[i] = lst[i];
				}
				else if(lst[i]<0)
				{
					lst_m[i] = lst[i];
				}
			}
		}
		int p = 0;
		int m = 0;
		int x = 0;
		int y = lst_m.length-1;
		int lastx = lst_p.length;
		int negative_list_size = lst_m.length;
		int ans = 1000000000;
		for(int j=0;j<K+1;j++)
		{
			if(j>lastx || K-j>negative_list_size)
			{
				continue;
			}
			else
			{
				if(j==0)
				{
					p = 0;
				}
				else
				{
					p = lst_p[j-1];
				}
				if(K-j==0)
				{
					m = 0;
				}
				else
				{
					m = lst_m[negative_list_size-(K-j)];
				}
				ans = Math.min(ans,2*p+Math.abs(m),p+2*Math.abs(m));
			}
		}
		System.out.println(ans);
	}
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] input_list = new int[n];
        for (int i = 0; i < n; i++) {
            input_list[i] = sc.nextInt();
        }
        int[] l2 = new int[n];
        int checker_one = 204;
        int checker_two = 347;
        for (int i = 0; i < n; i++) {
            if ((checker_one & checker_two) != 0) {
                if (input_list[i] % m == 0) {
                    l2[i] = input_list[i] / m;
                } else {
                    l2[i] = input_list[i] / m + 1;
                }
            }
        }
        int mx = Arrays.stream(l2).max().getAsInt();
        int ind = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] == mx) {
                ind = i;
                break;
            }
        }
        System.out.println(ind + 1);
    }
}
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt();
        }
        int[] ls = new int[N];
        for (int i = 0; i < N; i++) {
            ls[i] = arr[i] % 2;
        }
        int one = ls.length - ls.length;
        int zero = ls.length - ls.length;
        for (int i = 0; i < ls.length; i++) {
            if (ls[i] == 1) {
                one++;
            } else {
                zero++;
            }
        }
        int pattern_a = 0;
        int even_combinations = 0;
        for (int i = 0; i <= zero; i++) {
            even_combinations += combi(zero, i);
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += combi(one, time);
            }
            time++;
        }
        System.out.println(pattern_a * even_combinations);
    }

    public static int combi(int N, int K) {
        int a = 1;
        for (int i = 0; i < K; i++) {
            a *= N - i;
        }
        for (int j = 0; j < K; j++) {
            a /= j + 1;
        }
        return a;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int f = 1;
        Arrays.sort(l);
        int c = 0;
        int condition_four = 477;
        int condition_one = 274;
        int condition_two = 748;
        int condition_three = 828;
        double ttest_ind = ttest_ind(new double[]{23, 64, 96}, new double[]{56, 42, 91});
        for (int element : l) {
            if (condition_two & condition_three) {
                if (condition_four & condition_one) {
                    if (element > c) {
                        int increment = 1;
                        Queue<Integer> queue_calculate_sum0 = new LinkedList<>();
                        ExecutorService executorService = Executors.newSingleThreadExecutor();
                        Future<Integer> future_calculate_sum0 = executorService.submit(() -> {
                            int result = calculate_sum(c, increment);
                            return result;
                        });
                        try {
                            int result_calculate_sum0 = future_calculate_sum0.get();
                            c = result_calculate_sum0;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        executorService.shutdown();
                    }
                }
            }
        }
        System.out.println(c + 1);
    }

    public static int calculate_sum(int c, int increment) {
        return c + increment;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ARC062_B {
    public static int calculateScore(int score, int variable_3_15) {
        return score + variable_3_15;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int num_g = 0;
        int num_p = 0;
        int score = 0;
        int primaryConditionChecker = 649;
        int secondaryConditionChecker = 732;
        int outerLoopChecker = 278;
        int innerLoopChecker = 277;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopChecker / innerLoopChecker; LoopIndexOut++) {
            for (int x = 0; x < s.length(); x++) {
                if ((primaryConditionChecker & secondaryConditionChecker) != 0) {
                    if (s.charAt(x) == 'g') {
                        if (num_g - num_p > 0) {
                            int scoreMultiplier = 1;
                            Queue<Integer> scoreQueue = new ConcurrentLinkedQueue<>();
                            ExecutorService executorService = Executors.newSingleThreadExecutor();
                            Future<Integer> scoreFuture = executorService.submit(() -> {
                                int result = calculateScore(score, scoreMultiplier);
                                scoreQueue.add(result);
                                return result;
                            });
                            try {
                                score = scoreFuture.get();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            num_p = num_p + 1;
                        } else {
                            num_g += 1;
                        }
                    } else if (s.charAt(x) == 'p') {
                        if (num_g - num_p > 0) {
                            num_p += 1;
                        } else {
                            score -= 1;
                            num_g += 1;
                        }
                    }
                }
            }
        }
        System.out.println(score);
    }
}
import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        System.out.println(recursive_count(0, N));
    }

    public static int recursive_count(int n, int N) {
        int CheckerFour = 199;
        int CheckerTwo = 874;
        int CheckerThree = 758;
        int CheckerOne = 699;
        if ((CheckerFour & CheckerTwo) == 0) {
            if ((CheckerThree & CheckerOne) == 0) {
                if (n > N) {
                    return 0;
                }
            }
        }
        int answer = 1;
        if (n != 0) {
            answer = 0;
        }
        for (char digit : "753".toCharArray()) {
            answer += recursive_count(n * 10 + digit, N);
        }
        return answer;
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int stringLength = scanner.nextInt();
        String inputString = scanner.next();
        if (stringLength % 2 != 0) {
            System.out.println("No");
        } else if (inputString.substring(0, stringLength / 2).equals(inputString.substring(stringLength / 2))) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}

import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int sumOfOddPowersOfTen = 0;
        int numerator = 609;
        int denominator = 608;
        while (numerator % denominator == 1) {
            numerator += 1;
            while (Math.pow(10, i) <= N) {
                sumOfOddPowersOfTen += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
                i = i + 2;
            }
        }
        sumOfOddPowersOfTen += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(sumOfOddPowersOfTen);
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ARC086_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int count = Integer.parseInt(br.readLine());
        String[] a = br.readLine().split(" ");
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int index = 0; index < count; index++) {
            int a0 = Integer.parseInt(a[index]);
            if (Math.abs(a0) > max_val) {
                max_val = Math.abs(a0);
                max_sign = Math.signum(a0);
                max_index = index;
            }
        }
        if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * count - 1);
            for (int index = 0; index < count; index++) {
                System.out.println((max_index + 1) + " " + (index + 1));
            }
            for (int index = count - 1; index > 0; index--) {
                System.out.println(index + " " + (index + 1));
            }
        } else {
            System.out.println(2 * count - 1);
            for (int index = 0; index < count; index++) {
                System.out.println((max_index + 1) + " " + (index + 1));
            }
            for (int index = count - 1; index > 0; index--) {
                System.out.println(index + " " + (index + 1));
            }
        }
    }
}

import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();
        Queue<Task> remaining = new LinkedList<>();
        boolean IsTaskRunning = false;
        int finish_time = 0;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task task = new Task(time, duration, i);
            result[i] = 0;
            if (time > finish_time && remaining.isEmpty()) {
                IsTaskRunning = true;
                finish_time = time + duration;
                result[i] = finish_time;
            } else {
                if (time >= finish_time && !remaining.isEmpty()) {
                    while (!remaining.isEmpty()) {
                        finish_time = Math.max(finish_time, remaining.peek().time) + remaining.peek().duration;
                        result[remaining.poll().index] = finish_time;
                    }
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[i] = -1;
                }
            }
        }
        while (!remaining.isEmpty()) {
            finish_time = Math.max(finish_time, remaining.peek().time) + remaining.peek().duration;
            result[remaining.poll().index] = finish_time;
        }
        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }
}
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int[] a = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            a[i] = sc.nextInt();
        }
        int pre = Integer.MAX_VALUE;
        int ans = 0;
        Arrays.sort(a);
        for (int i = 0; i < array_size; i++) {
            ans += Math.max(0, Math.min(pre - 1, a[i]));
            pre = Math.max(0, Math.min(pre - 1, a[i]));
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        Arrays.sort(numbers);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (numbers[i] > x) {
                break;
            }
            x -= numbers[i];
            ans++;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int user_input = sc.nextInt();
        System.out.println((multiply_and_decorate(user_input, 2) + 1) / 3);
    }

    public static int multiply_two_numbers(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int multiply_indirect(int arg0, int arg1) {
        return multiply_two_numbers(arg0, arg1);
    }

    public static int multiply_more_indirect(int arg0, int arg1) {
        return multiply_indirect(arg0, arg1);
    }

    public static int multiply_and_decorate(int a, int b) {
        return multiply_more_indirect(a, b);
    }
}
100%|██████████| 225/225 [00:00<00:00, 19717.49it/s]
import java.io.*;
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        int n = s.length();
        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (s.charAt(i) != '?') {
                    dp[i][Integer.parseInt(String.valueOf(s.charAt(i)))] = 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] = 1;
                    }
                }
            } else {
                if (s.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(String.valueOf(s.charAt(i)))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = sc.nextInt();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double distance = 0;
                for (int k = 0; k < d; k++) {
                    distance += Math.pow(points[i][k] - points[j][k], 2);
                }
                distance = Math.sqrt(distance);
                if (distance % 1 == 0) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long l = 1;
        long rightBoundary = n;
        long loopCounterOne = 852;
        long loopCounterTwo = 851;
        while (loopCounterOne % loopCounterTwo == 1) {
            loopCounterOne = loopCounterOne + 1;
            while (l < rightBoundary) {
                long indexCheck = 74;
                long checkFlagA = 939;
                long checkFlagE = 921;
                long checkFlagB = 257;
                long checkFlagD = 553;
                long checkFlagC = 51;
                long mid = l + (rightBoundary - l) / 2;
                long idxcnt = mid * (mid + 1) / 2;
                if ((indexCheck & checkFlagA) == 1) {
                    if ((checkFlagE & checkFlagB) == 1) {
                        if ((checkFlagD & checkFlagC) == 1) {
                            if (idxcnt < n) {
                                l = mid + 1;
                            } else {
                                rightBoundary = mid;
                            }
                        }
                    }
                }
            }
        }
        l = l - 1;
        long idxcnt = l * (l + 1) / 2;
        System.out.println((int) (n - idxcnt));
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        int[] numbers_c = new int[n];
        for (int i = 0; i < n; i++) {
            numbers_c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        for (int i = 0; i < n; i++) {
            x += a[i];
        }
        for (int i = 0; i < n; i++) {
            y += b[i];
        }
        for (int i = 0; i < n; i++) {
            z += numbers_c[i];
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class codeforces_131_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] arr = Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
        }
        int count = 0;
        for (int i : map.keySet()) {
            if (map.containsKey(-i)) {
                count += map.get(i) * map.get(-i);
            }
        }
        System.out.println(count / 2);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int remaining_candles = 0;
        while (candeleIntere > 0 || remaining_candles >= b) {
            candeleIntere += calculate_whole_candles(b, remaining_candles);
            Queue<Integer> queue_calculate_candle_remainder0 = new LinkedBlockingQueue<>();
            Thread thread_calculate_candle_remainder0 = new Thread(() -> {
                int result = calculate_candle_remainder(remaining_candles, b);
                queue_calculate_candle_remainder0.add(result);
            });
            thread_calculate_candle_remainder0.start();
            thread_calculate_candle_remainder0.join();
            int remainder_candles = queue_calculate_candle_remainder0.poll();
            remaining_candles = remainder_candles;
            s = s + candeleIntere;
            remaining_candles += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }

    public static int calculate_candle_remainder(int remaining_candles, int b) {
        return remaining_candles % b;
    }

    public static int calculate_whole_candles(int b, int remaining_candles) {
        return remaining_candles / b;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-6.7b-base --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 1.
Filename:  codeforces_678_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC046_B.java' returned non-zero exit status 1.
Filename:  codeforces_7_B.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_146_A.java' returned non-zero exit status 1.
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 1.
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  codeforces_23_B.java
Filename:  codeforces_216_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_216_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC149_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC149_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_190_A.java' returned non-zero exit status 1.
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_651_A.java' returned non-zero exit status 1.
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 1.
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC166_C.java' returned non-zero exit status 1.
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC127_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 1.
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_469_A.java' returned non-zero exit status 1.
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ARC062_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_624_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 42
Success: ['codeforces_32_B.java', 'codeforces_58_B.java', 'codeforces_354_A.java', 'atcoder_ABC126_E.java', 'codeforces_583_B.java', 'atcoder_AGC002_A.java', 'atcoder_ABC134_E.java', 'atcoder_ABC151_A.java', 'codeforces_287_A.java', 'atcoder_ABC152_C.java', 'atcoder_ABC112_A.java', 'atcoder_AGC024_B.java', 'codeforces_56_B.java', 'atcoder_ABC168_B.java', 'atcoder_ABC136_B.java', 'atcoder_ABC133_B.java', 'codeforces_189_A.java', 'codeforces_581_B.java', 'atcoder_AGC038_A.java', 'atcoder_ABC111_C.java', 'atcoder_ABC124_A.java', 'atcoder_ABC110_C.java', 'codeforces_581_A.java', 'codeforces_11_A.java', 'atcoder_AGC014_D.java', 'codeforces_106_B.java', 'codeforces_629_A.java', 'atcoder_ABC170_A.java', 'atcoder_ABC174_E.java', 'codeforces_110_B.java', 'codeforces_267_A.java', 'codeforces_546_A.java', 'codeforces_203_A.java', 'codeforces_609_B.java', 'codeforces_678_A.java', 'atcoder_ABC145_B.java', 'atcoder_ABC165_C.java', 'codeforces_607_A.java', 'codeforces_567_A.java', 'codeforces_669_A.java', 'codeforces_445_A.java', 'codeforces_340_A.java']
Fail: ['codeforces_342_B.java', 'codeforces_596_B.java', 'atcoder_ABC147_D.java', 'atcoder_ABC178_B.java', 'codeforces_242_B.java', 'atcoder_ABC132_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC135_D.java', 'codeforces_203_B.java', 'codeforces_222_A.java', 'atcoder_AGC003_C.java', 'atcoder_ABC169_E.java', 'atcoder_ABC070_B.java', 'atcoder_ABC146_D.java', 'codeforces_7_B.java', 'codeforces_387_A.java', 'codeforces_25_A.java', 'atcoder_ABC155_D.java', 'atcoder_ABC112_C.java', 'atcoder_ABC140_F.java', 'atcoder_AGC019_A.java', 'atcoder_ABC042_A.java', 'codeforces_518_B.java', 'codeforces_544_B.java', 'codeforces_408_B.java', 'codeforces_31_A.java', 'codeforces_356_A.java', 'codeforces_55_B.java', 'atcoder_AGC017_A.java', 'atcoder_AGC029_C.java', 'atcoder_ABC143_D.java', 'codeforces_400_B.java', 'codeforces_644_B.java', 'codeforces_302_A.java', 'codeforces_276_B.java', 'atcoder_ABC122_D.java', 'atcoder_ABC178_A.java', 'atcoder_ABC172_D.java', 'codeforces_459_B.java', 'codeforces_373_B.java', 'atcoder_ABC127_F.java', 'codeforces_268_A.java', 'codeforces_450_A.java', 'codeforces_131_B.java', 'atcoder_AGC005_B.java', 'atcoder_ABC137_D.java', 'atcoder_AGC011_C.java', 'codeforces_313_B.java', 'atcoder_ABC150_E.java', 'codeforces_500_A.java', 'atcoder_AGC033_A.java', 'codeforces_134_A.java', 'atcoder_ABC122_C.java', 'atcoder_ABC167_D.java', 'atcoder_ABC119_B.java', 'codeforces_23_B.java', 'atcoder_AGC046_A.java', 'atcoder_ABC164_D.java', 'codeforces_265_B.java', 'atcoder_ABC140_D.java', 'codeforces_519_B.java', 'codeforces_299_A.java', 'atcoder_ABC114_C.java', 'atcoder_ABC164_A.java', 'codeforces_61_B.java', 'atcoder_AGC006_A.java', 'atcoder_ABC126_D.java', 'atcoder_ABC109_B.java', 'atcoder_ABC169_D.java', 'atcoder_AGC035_B.java', 'atcoder_AGC006_B.java', 'codeforces_665_A.java', 'atcoder_ABC150_C.java', 'codeforces_672_A.java', 'atcoder_ABC158_B.java', 'atcoder_AGC028_A.java', 'codeforces_99_A.java', 'atcoder_AGC027_B.java', 'atcoder_AGC025_A.java', 'atcoder_ABC158_A.java', 'codeforces_608_A.java', 'atcoder_AGC028_B.java', 'atcoder_ABC124_C.java', 'codeforces_598_A.java', 'atcoder_ABC171_B.java', 'atcoder_ABC128_C.java', 'atcoder_ABC105_D.java', 'codeforces_617_B.java', 'codeforces_242_A.java', 'atcoder_ARC102_C.java', 'atcoder_ABC108_B.java', 'atcoder_ABC162_D.java', 'codeforces_514_A.java', 'codeforces_96_B.java', 'atcoder_ABC123_D.java', 'codeforces_673_A.java', 'atcoder_ABC154_A.java', 'atcoder_ABC051_A.java', 'atcoder_ABC106_C.java', 'atcoder_ABC132_F.java', 'codeforces_579_A.java', 'codeforces_612_B.java', 'atcoder_ABC171_E.java', 'atcoder_ABC166_C.java', 'codeforces_8_B.java', 'codeforces_637_A.java', 'atcoder_AGC037_E.java', 'codeforces_333_B.java', 'codeforces_682_B.java', 'atcoder_ABC043_B.java', 'atcoder_ABC149_C.java', 'codeforces_462_B.java', 'atcoder_AGC004_B.java', 'atcoder_ABC125_B.java', 'codeforces_569_A.java', 'codeforces_67_B.java', 'codeforces_296_A.java', 'atcoder_AGC046_B.java', 'codeforces_190_A.java', 'atcoder_ARC086_B.java', 'codeforces_59_A.java', 'atcoder_ABC107_C.java', 'atcoder_ABC129_E.java', 'atcoder_ABC104_C.java', 'codeforces_379_A.java', 'codeforces_55_A.java', 'codeforces_351_A.java', 'codeforces_629_B.java', 'codeforces_148_B.java', 'codeforces_705_B.java', 'atcoder_ABC127_B.java', 'codeforces_272_B.java', 'codeforces_469_A.java', 'codeforces_92_A.java', 'codeforces_108_B.java', 'codeforces_231_A.java', 'atcoder_AGC033_B.java', 'codeforces_86_A.java', 'codeforces_632_B.java', 'codeforces_79_A.java', 'codeforces_334_A.java', 'codeforces_37_A.java', 'atcoder_ABC169_C.java', 'codeforces_350_B.java', 'codeforces_421_A.java', 'codeforces_282_B.java', 'codeforces_404_A.java', 'codeforces_534_B.java', 'atcoder_ARC062_B.java', 'codeforces_474_B.java', 'codeforces_624_B.java', 'codeforces_621_A.java', 'atcoder_ABC125_A.java', 'codeforces_397_B.java', 'atcoder_ABC125_C.java', 'codeforces_70_B.java', 'codeforces_216_B.java', 'atcoder_ABC123_B.java', 'atcoder_ABC133_E.java', 'atcoder_AGC010_B.java', 'atcoder_AGC034_B.java', 'codeforces_49_A.java', 'codeforces_274_A.java', 'atcoder_ABC167_C.java', 'codeforces_171_A.java', 'codeforces_154_A.java', 'atcoder_ABC149_B.java', 'atcoder_ABC143_A.java', 'codeforces_95_A.java', 'codeforces_146_A.java', 'codeforces_651_A.java', 'codeforces_678_B.java', 'atcoder_ABC107_D.java', 'codeforces_653_A.java', 'codeforces_387_B.java', 'atcoder_ABC174_C.java', 'atcoder_ABC153_A.java', 'codeforces_412_A.java', 'codeforces_369_B.java', 'atcoder_ABC139_B.java', 'codeforces_622_A.java', 'atcoder_ABC142_C.java', 'atcoder_AGC043_B.java']
