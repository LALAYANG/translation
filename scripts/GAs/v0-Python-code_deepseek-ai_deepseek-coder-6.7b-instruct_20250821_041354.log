+ model=deepseek-ai/deepseek-coder-6.7b-instruct
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-6.7b-instruct --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 04:38:14 [__init__.py:241] Automatically detected platform cuda.
found 231 inputs
INFO 08-21 04:38:15 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-6.7b-instruct', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 04:38:21 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 04:38:21 [__init__.py:1750] Using max model len 4096
INFO 08-21 04:38:21 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=2901197)[0;0m INFO 08-21 04:38:22 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=2901197)[0;0m INFO 08-21 04:38:22 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-6.7b-instruct', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-6.7b-instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-6.7b-instruct, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=2901197)[0;0m WARNING 08-21 04:38:22 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=2901197)[0;0m INFO 08-21 04:38:22 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_8de526aa'), local_subscribe_addr='ipc:///tmp/db62f812-1afd-463f-ae5a-111fb203f875', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:24 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_b95d3953'), local_subscribe_addr='ipc:///tmp/67087d34-312a-4584-9866-00b8767c0f58', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:24 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_aaad1c5d'), local_subscribe_addr='ipc:///tmp/4bfc7cfd-02ee-4c3e-97e0-8c7b18aa02e5', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:25 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:25 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:25 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:25 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:25 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:25 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:25 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_667777a4'), local_subscribe_addr='ipc:///tmp/87abfd12-f3e6-46f1-a456-e137a9d493a8', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:25 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:25 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m WARNING 08-21 04:38:25 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m WARNING 08-21 04:38:25 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:25 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-instruct...
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:25 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-instruct...
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:26 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:26 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:26 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:26 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:26 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:26 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:42 [weight_utils.py:312] Time spent downloading weights for deepseek-ai/deepseek-coder-6.7b-instruct: 15.825334 seconds
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m Loading safetensors checkpoint shards:  50% Completed | 1/2 [00:00<00:00,  2.36it/s]
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:44 [default_loader.py:262] Loading weights took 1.77 seconds
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.11it/s]
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.20it/s]
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m 
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:44 [default_loader.py:262] Loading weights took 1.88 seconds
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:44 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 18.165066 seconds
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:44 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 18.471737 seconds
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:51 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/33b6fdfc4a/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:51 [backends.py:559] Dynamo bytecode transform time: 6.33 s
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:51 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/33b6fdfc4a/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:51 [backends.py:559] Dynamo bytecode transform time: 6.44 s
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:38:54 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:38:54 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:39:14 [backends.py:215] Compiling a graph for dynamic shape takes 22.97 s
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:39:15 [backends.py:215] Compiling a graph for dynamic shape takes 23.35 s
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:39:19 [monitor.py:34] torch.compile takes 29.30 s in total
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:39:19 [monitor.py:34] torch.compile takes 29.79 s in total
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:39:20 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:39:21 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=2901197)[0;0m INFO 08-21 04:39:21 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=2901197)[0;0m INFO 08-21 04:39:21 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=2901197)[0;0m INFO 08-21 04:39:21 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=2901197)[0;0m INFO 08-21 04:39:21 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 29.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  10%|█         | 7/67 [00:00<00:01, 31.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  16%|█▋        | 11/67 [00:00<00:01, 30.71it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:01, 30.42it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  28%|██▊       | 19/67 [00:00<00:01, 30.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  34%|███▍      | 23/67 [00:00<00:01, 30.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:00<00:01, 30.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  46%|████▋     | 31/67 [00:01<00:01, 30.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  52%|█████▏    | 35/67 [00:01<00:01, 29.41it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:01<00:01, 28.89it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  61%|██████    | 41/67 [00:01<00:00, 28.11it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:01<00:00, 28.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  70%|███████   | 47/67 [00:01<00:00, 27.59it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:01<00:00, 27.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  79%|███████▉  | 53/67 [00:01<00:00, 26.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:01<00:00, 25.63it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  88%|████████▊ | 59/67 [00:02<00:00, 25.55it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:02<00:00, 25.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  97%|█████████▋| 65/67 [00:02<00:00, 25.57it/s][1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:39:24 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 28.07it/s]
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:39:24 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP1 pid=2901205)[0;0m INFO 08-21 04:39:24 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=2901197)[0;0m [1;36m(VllmWorker TP0 pid=2901203)[0;0m INFO 08-21 04:39:24 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=2901197)[0;0m INFO 08-21 04:39:24 [core.py:214] init engine (profile, create kv cache, warmup model) took 39.12 seconds
INFO 08-21 04:39:24 [llm.py:298] Supported_tasks: ['generate']
Translating 231 files...
  0%|          | 0/231 [00:00<?, ?it/s]100%|██████████| 231/231 [00:00<00:00, 10402.79it/s]
Adding requests:   0%|          | 0/231 [00:00<?, ?it/s]Adding requests:  13%|█▎        | 31/231 [00:00<00:00, 308.74it/s]Adding requests:  36%|███▌      | 83/231 [00:00<00:00, 430.86it/s]Adding requests:  55%|█████▍    | 127/231 [00:00<00:00, 280.30it/s]Adding requests:  85%|████████▌ | 197/231 [00:00<00:00, 402.87it/s]Adding requests: 100%|██████████| 231/231 [00:00<00:00, 401.83it/s]
Processed prompts:   0%|          | 0/231 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/231 [00:04<17:46,  4.64s/it, est. speed input: 37.51 toks/s, output: 33.42 toks/s]Processed prompts:   1%|          | 2/231 [00:05<08:38,  2.26s/it, est. speed input: 155.62 toks/s, output: 63.78 toks/s]Processed prompts:   1%|▏         | 3/231 [00:05<05:35,  1.47s/it, est. speed input: 374.24 toks/s, output: 93.04 toks/s]Processed prompts:   2%|▏         | 4/231 [00:06<03:59,  1.06s/it, est. speed input: 499.28 toks/s, output: 122.15 toks/s]Processed prompts:   2%|▏         | 5/231 [00:06<03:02,  1.24it/s, est. speed input: 545.75 toks/s, output: 150.77 toks/s]Processed prompts:   3%|▎         | 6/231 [00:07<03:15,  1.15it/s, est. speed input: 540.40 toks/s, output: 167.14 toks/s]Processed prompts:   3%|▎         | 7/231 [00:08<02:58,  1.26it/s, est. speed input: 539.71 toks/s, output: 190.48 toks/s]Processed prompts:   4%|▍         | 9/231 [00:08<01:38,  2.26it/s, est. speed input: 648.99 toks/s, output: 258.76 toks/s]Processed prompts:   4%|▍         | 10/231 [00:08<01:35,  2.33it/s, est. speed input: 678.66 toks/s, output: 283.49 toks/s]Processed prompts:   5%|▍         | 11/231 [00:09<01:37,  2.26it/s, est. speed input: 685.94 toks/s, output: 305.31 toks/s]Processed prompts:   5%|▌         | 12/231 [00:09<01:30,  2.41it/s, est. speed input: 692.48 toks/s, output: 330.66 toks/s]Processed prompts:   6%|▌         | 14/231 [00:09<01:09,  3.12it/s, est. speed input: 827.71 toks/s, output: 388.63 toks/s]Processed prompts:   7%|▋         | 16/231 [00:10<00:47,  4.50it/s, est. speed input: 943.99 toks/s, output: 455.90 toks/s]Processed prompts:   7%|▋         | 17/231 [00:10<00:48,  4.43it/s, est. speed input: 959.88 toks/s, output: 481.44 toks/s]Processed prompts:   9%|▉         | 21/231 [00:10<00:25,  8.40it/s, est. speed input: 1069.46 toks/s, output: 619.86 toks/s]Processed prompts:  10%|▉         | 23/231 [00:10<00:23,  8.98it/s, est. speed input: 1224.77 toks/s, output: 682.20 toks/s]Processed prompts:  11%|█         | 25/231 [00:10<00:26,  7.79it/s, est. speed input: 1294.63 toks/s, output: 732.80 toks/s]Processed prompts:  12%|█▏        | 27/231 [00:11<00:25,  7.97it/s, est. speed input: 1346.61 toks/s, output: 790.43 toks/s]Processed prompts:  13%|█▎        | 30/231 [00:11<00:18, 11.02it/s, est. speed input: 1480.61 toks/s, output: 892.44 toks/s]Processed prompts:  14%|█▍        | 32/231 [00:11<00:19, 10.21it/s, est. speed input: 1528.02 toks/s, output: 947.01 toks/s]Processed prompts:  15%|█▍        | 34/231 [00:11<00:18, 10.41it/s, est. speed input: 1568.87 toks/s, output: 1005.59 toks/s]Processed prompts:  16%|█▌        | 37/231 [00:11<00:16, 11.65it/s, est. speed input: 1724.13 toks/s, output: 1097.71 toks/s]Processed prompts:  17%|█▋        | 39/231 [00:12<00:24,  7.85it/s, est. speed input: 1762.70 toks/s, output: 1127.45 toks/s]Processed prompts:  19%|█▊        | 43/231 [00:12<00:16, 11.19it/s, est. speed input: 1866.44 toks/s, output: 1259.83 toks/s]Processed prompts:  19%|█▉        | 45/231 [00:12<00:14, 12.43it/s, est. speed input: 1918.60 toks/s, output: 1323.12 toks/s]Processed prompts:  20%|██        | 47/231 [00:12<00:14, 13.12it/s, est. speed input: 1969.24 toks/s, output: 1383.27 toks/s]Processed prompts:  21%|██        | 49/231 [00:12<00:13, 13.12it/s, est. speed input: 2047.11 toks/s, output: 1441.02 toks/s]Processed prompts:  22%|██▏       | 51/231 [00:13<00:13, 13.78it/s, est. speed input: 2110.78 toks/s, output: 1500.80 toks/s]Processed prompts:  23%|██▎       | 54/231 [00:13<00:10, 17.21it/s, est. speed input: 2204.13 toks/s, output: 1599.18 toks/s]Processed prompts:  25%|██▍       | 57/231 [00:13<00:09, 18.11it/s, est. speed input: 2286.54 toks/s, output: 1691.43 toks/s]Processed prompts:  26%|██▋       | 61/231 [00:13<00:08, 19.85it/s, est. speed input: 2423.62 toks/s, output: 1816.99 toks/s]Processed prompts:  29%|██▉       | 67/231 [00:13<00:06, 23.79it/s, est. speed input: 2707.73 toks/s, output: 2011.73 toks/s]Processed prompts:  32%|███▏      | 74/231 [00:13<00:05, 30.71it/s, est. speed input: 2974.85 toks/s, output: 2249.31 toks/s]Processed prompts:  34%|███▍      | 78/231 [00:14<00:05, 26.57it/s, est. speed input: 3113.82 toks/s, output: 2363.99 toks/s]Processed prompts:  37%|███▋      | 85/231 [00:14<00:04, 34.29it/s, est. speed input: 3382.62 toks/s, output: 2604.96 toks/s]Processed prompts:  39%|███▊      | 89/231 [00:14<00:04, 29.32it/s, est. speed input: 3481.00 toks/s, output: 2717.40 toks/s]Processed prompts:  40%|████      | 93/231 [00:14<00:06, 22.99it/s, est. speed input: 3550.87 toks/s, output: 2814.20 toks/s]Processed prompts:  42%|████▏     | 96/231 [00:14<00:05, 23.05it/s, est. speed input: 3613.40 toks/s, output: 2902.05 toks/s]Processed prompts:  43%|████▎     | 99/231 [00:14<00:05, 24.11it/s, est. speed input: 3702.04 toks/s, output: 2993.95 toks/s]Processed prompts:  44%|████▍     | 102/231 [00:14<00:05, 24.06it/s, est. speed input: 3819.04 toks/s, output: 3081.46 toks/s]Processed prompts:  45%|████▌     | 105/231 [00:15<00:05, 22.15it/s, est. speed input: 3938.36 toks/s, output: 3161.20 toks/s]Processed prompts:  47%|████▋     | 109/231 [00:15<00:04, 24.84it/s, est. speed input: 4041.07 toks/s, output: 3287.27 toks/s]Processed prompts:  49%|████▉     | 113/231 [00:15<00:04, 25.95it/s, est. speed input: 4139.70 toks/s, output: 3408.87 toks/s]Processed prompts:  51%|█████     | 118/231 [00:15<00:03, 29.00it/s, est. speed input: 4279.42 toks/s, output: 3568.87 toks/s]Processed prompts:  52%|█████▏    | 121/231 [00:15<00:04, 24.99it/s, est. speed input: 4392.85 toks/s, output: 3643.90 toks/s]Processed prompts:  55%|█████▌    | 128/231 [00:15<00:03, 31.61it/s, est. speed input: 4717.55 toks/s, output: 3877.34 toks/s]Processed prompts:  57%|█████▋    | 132/231 [00:16<00:04, 21.78it/s, est. speed input: 4795.62 toks/s, output: 3950.22 toks/s]Processed prompts:  58%|█████▊    | 135/231 [00:16<00:04, 22.93it/s, est. speed input: 4893.11 toks/s, output: 4041.59 toks/s]Processed prompts:  60%|█████▉    | 138/231 [00:16<00:04, 21.26it/s, est. speed input: 4930.44 toks/s, output: 4116.17 toks/s]Processed prompts:  62%|██████▏   | 144/231 [00:16<00:03, 28.73it/s, est. speed input: 5186.34 toks/s, output: 4326.19 toks/s]Processed prompts:  64%|██████▍   | 148/231 [00:16<00:03, 27.45it/s, est. speed input: 5272.17 toks/s, output: 4441.41 toks/s]Processed prompts:  66%|██████▌   | 152/231 [00:17<00:03, 20.06it/s, est. speed input: 5333.77 toks/s, output: 4512.67 toks/s]Processed prompts:  70%|██████▉   | 161/231 [00:17<00:02, 28.65it/s, est. speed input: 5592.81 toks/s, output: 4827.33 toks/s]Processed prompts:  72%|███████▏  | 166/231 [00:17<00:02, 31.58it/s, est. speed input: 5747.85 toks/s, output: 4996.39 toks/s]Processed prompts:  74%|███████▎  | 170/231 [00:17<00:01, 31.70it/s, est. speed input: 5838.98 toks/s, output: 5122.39 toks/s]Processed prompts:  75%|███████▌  | 174/231 [00:17<00:02, 25.70it/s, est. speed input: 5911.24 toks/s, output: 5215.29 toks/s]Processed prompts:  77%|███████▋  | 177/231 [00:17<00:02, 23.93it/s, est. speed input: 5972.12 toks/s, output: 5293.21 toks/s]Processed prompts:  78%|███████▊  | 180/231 [00:18<00:02, 17.57it/s, est. speed input: 5982.50 toks/s, output: 5325.95 toks/s]Processed prompts:  79%|███████▉  | 183/231 [00:18<00:02, 17.47it/s, est. speed input: 6048.51 toks/s, output: 5401.63 toks/s]Processed prompts:  81%|████████  | 187/231 [00:18<00:02, 20.61it/s, est. speed input: 6161.23 toks/s, output: 5536.01 toks/s]Processed prompts:  83%|████████▎ | 191/231 [00:18<00:02, 18.52it/s, est. speed input: 6223.70 toks/s, output: 5628.27 toks/s]Processed prompts:  84%|████████▍ | 195/231 [00:18<00:01, 21.87it/s, est. speed input: 6322.75 toks/s, output: 5768.56 toks/s]Processed prompts:  86%|████████▌ | 198/231 [00:19<00:01, 23.19it/s, est. speed input: 6419.74 toks/s, output: 5867.22 toks/s]Processed prompts:  87%|████████▋ | 201/231 [00:19<00:01, 16.74it/s, est. speed input: 6459.27 toks/s, output: 5901.85 toks/s]Processed prompts:  90%|████████▉ | 207/231 [00:19<00:01, 22.88it/s, est. speed input: 6640.89 toks/s, output: 6130.49 toks/s]Processed prompts:  91%|█████████▏| 211/231 [00:19<00:01, 15.05it/s, est. speed input: 6655.03 toks/s, output: 6160.04 toks/s]Processed prompts:  93%|█████████▎| 214/231 [00:20<00:01, 12.81it/s, est. speed input: 6655.58 toks/s, output: 6198.17 toks/s]Processed prompts:  94%|█████████▎| 216/231 [00:20<00:01, 10.89it/s, est. speed input: 6644.36 toks/s, output: 6203.58 toks/s]Processed prompts:  94%|█████████▍| 218/231 [00:20<00:01, 11.80it/s, est. speed input: 6697.31 toks/s, output: 6268.26 toks/s]Processed prompts:  95%|█████████▌| 220/231 [00:20<00:01, 10.74it/s, est. speed input: 6695.08 toks/s, output: 6296.34 toks/s]Processed prompts:  96%|█████████▌| 222/231 [00:21<00:00, 10.93it/s, est. speed input: 6758.65 toks/s, output: 6347.74 toks/s]Processed prompts:  97%|█████████▋| 224/231 [00:21<00:00, 11.44it/s, est. speed input: 6796.13 toks/s, output: 6405.56 toks/s]Processed prompts:  98%|█████████▊| 226/231 [00:21<00:00,  8.64it/s, est. speed input: 6765.81 toks/s, output: 6397.85 toks/s]Processed prompts:  99%|█████████▊| 228/231 [00:22<00:00,  5.00it/s, est. speed input: 6592.97 toks/s, output: 6270.90 toks/s]Processed prompts:  99%|█████████▉| 229/231 [00:23<00:00,  3.01it/s, est. speed input: 6341.82 toks/s, output: 6068.24 toks/s]Processed prompts: 100%|█████████▉| 230/231 [00:29<00:01,  1.45s/it, est. speed input: 5071.72 toks/s, output: 4894.23 toks/s]Processed prompts: 100%|██████████| 231/231 [00:35<00:00,  2.38s/it, est. speed input: 4258.45 toks/s, output: 4205.45 toks/s]Processed prompts: 100%|██████████| 231/231 [00:35<00:00,  2.38s/it, est. speed input: 4258.45 toks/s, output: 4205.45 toks/s]Processed prompts: 100%|██████████| 231/231 [00:35<00:00,  6.52it/s, est. speed input: 4258.45 toks/s, output: 4205.45 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-6.7b-instruct --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/231 [00:00<?, ?it/s]import java.util.*;
import java.io.*;

class Main {
    static int N;
    static ArrayList<Integer>[] G;
    static HashMap<Integer, Integer> E = new HashMap<>();
    static int[] visited;
    static int K = -1;
    static int[] node2color;

    static int Func_bfs_0(int v) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(v);
        visited[v] = 1;
        while (!queue.isEmpty()) {
            int current_node = queue.poll();
            int color = 0;
            for (int nex : G[current_node]) {
                if (visited[nex] == 1)
                    continue;
                visited[nex] = 1;
                color++;
                if (color == node2color[current_node])
                    color++;
                node2color[nex] = color;
                E.put(Math.min(current_node, nex) * N + Math.max(current_node, nex), color);
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        G = new ArrayList[N];
        for (int i = 0; i < N; i++)
            G[i] = new ArrayList<>();
        visited = new int[N];
        node2color = new int[N];
        for (int i = 0; i < N - 1; i++) {
            String[] s = br.readLine().split(" ");
            int a = Integer.parseInt(s[0]) - 1;
            int b = Integer.parseInt(s[1]) - 1;
            G[a].add(b);
            G[b].add(a);
            E.put(a * N + b, 0);
        }
        System.out.println(Func_bfs_0(0));
        for (int value : E.values())
            System.out.println(value);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Scanner;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC119_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        scanner.nextLine();

        double[] values = new double[count];
        for (int i = 0; i < count; i++) {
            String line = scanner.nextLine();
            if (line.endsWith("JPY")) {
                values[i] = Double.parseDouble(line.replace("JPY", "")) * 1.0;
            } else if (line.endsWith("BTC")) {
                values[i] = Double.parseDouble(line.replace("BTC", "")) * 380000.0;
            }
        }

        System.out.printf("%.8f\n", StatUtils.sum(values));

        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.connect();

        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        Base64.getEncoder().encodeToString(secretKey.getEncoded());

        int[] numbers = {70, 35, 8};
        shuffleArray(numbers);
        System.out.println(Arrays.toString(numbers));

        TTest tTest = new TTest();
        double[] sample1 = {71, 78, 75};
        double[] sample2 = {45, 100, 80};
        System.out.println(tTest.tTest(sample1, sample2));

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = formatter.parse("2024-10-24 05:11:28");
        System.out.println(date);
    }

    public static void shuffleArray(int[] array) {
        int index, temp;
        Random random = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            index = random.nextInt(i + 1);
            temp = array[index];
            array[index] = array[i];
            array[i] = temp;
        }
    }
}
import java.util.concurrent.*;
import java.util.Random;

class Main {
    static class CalculateProduct implements Callable<Integer> {
        int current_value;
        int q;

        public CalculateProduct(int current_value, int q) {
            this.current_value = current_value;
            this.q = q;
        }

        @Override
        public Integer call() throws Exception {
            return current_value * q;
        }
    }

    static class CalculateSum implements Callable<Integer> {
        int variable_3_10;
        int counter;

        public CalculateSum(int variable_3_10, int counter) {
            this.variable_3_10 = variable_3_10;
            this.counter = counter;
        }

        @Override
        public Integer call() throws Exception {
            // shuffle([68, 41, 65])
            int[] arr = {68, 41, 65};
            for (int i = arr.length - 1; i > 0; i--) {
                int index = new Random().nextInt(i + 1);
                int temp = arr[index];
                arr[index] = arr[i];
                arr[i] = temp;
            }
            return counter + variable_3_10;
        }
    }

    public static void main(String[] args) throws Exception {
        int t = 12351, current_value = 1223, q = 6;
        ExecutorService executor = Executors.newFixedThreadPool(10);
        int counter = 267, divisor = 266, ans = 0;
        while (counter % divisor == 1) {
            int variable_3_10 = 1;
            Future<Integer> sum_result = executor.submit(new CalculateSum(variable_3_10, counter));
            counter = sum_result.get();
            while (current_value < t) {
                Future<Integer> product_result = executor.submit(new CalculateProduct(current_value, q));
                current_value = product_result.get();
                ans++;
            }
        }
        executor.shutdown();
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> ls_xyh = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < 3; j++) {
                temp.add(scanner.nextInt());
            }
            ls_xyh.add(temp);
        }
        System.out.println(solve(n, ls_xyh));
    }

    public static String solve(int n, List<List<Integer>> ls_xyh) {
        int x0 = 0;
        int y0 = 0;
        int h0 = 0;
        int length_threshold = 506;
        int width_threshold = 368;
        int height_threshold = 502;
        int min_height_limit = 575;
        int max_height_limit = 552;
        int initial_height_guess = 550;
        for (int i = 0; i < n; i++) {
            if ((max_height_limit & initial_height_guess) != 0) {
                if ((height_threshold & min_height_limit) != 0) {
                    if (length_threshold != 0 && width_threshold != 0) {
                        if (ls_xyh.get(i).get(2) > 0) {
                            x0 = ls_xyh.get(i).get(0);
                            y0 = ls_xyh.get(i).get(1);
                            h0 = ls_xyh.get(i).get(2);
                            break;
                        }
                    }
                }
            }
        }
        List<List<Integer>> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(Arrays.asList(cx, cy, h0 + Math.abs(cx - x0) + Math.abs(cy - y0)));
            }
        }
        for (List<Integer> list : ls_xyh) {
            int x_coordinate = list.get(0);
            int current_y = list.get(1);
            int h = list.get(2);
            cands.removeIf(c -> Math.max(c.get(2) - Math.abs(c.get(0) - x_coordinate) - Math.abs(c.get(1) - current_y), 0) != h);
        }
        List<Integer> result = cands.get(0);
        return result.get(0) + " " + result.get(1) + " " + result.get(2);
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    static int minProblems = (int)Math.pow(10, 9);
    static int CHECK1 = 997;
    static int CHECK2 = 305;

    static class Problem {
        int a, b;
        Problem(int a, int b) {
            this.a = a;
            this.b = b;
        }
    }

    static void calculateScore(int j, int stop, int step, int score, int problem, boolean[] used, Problem[] PC) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if ((CHECK1 & CHECK2) != 0 && score > 0) {
            return;
        }
        if ((CHECK1 & CHECK2) != 0 && score > G) {
            return;
        }
        if (used[j]) {
            calculateScore(j + step, stop, step, score, problem, used, PC);
            return;
        }
        used[j] = true;
        score += 100 * (j + 1) * PC[j].a + PC[j].b;
        problem += PC[j].a;
        if (score <= G) {
            calculateScore(j + step, stop, step, score, problem, used, PC);
        }
        used[j] = false;
        calculateScore(j + step, stop, step, score, problem, used, PC);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numProblems = scanner.nextInt();
        int G = scanner.nextInt();
        Problem[] PC = new Problem[numProblems];
        for (int i = 0; i < numProblems; i++) {
            PC[i] = new Problem(scanner.nextInt(), scanner.nextInt());
        }
        for (int i = 0; i < (1 << numProblems); i++) {
            boolean[] used = new boolean[numProblems];
            calculateScore(0, numProblems, 1, 0, 0, used, PC);
        }
        System.out.println(minProblems);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int value_1 = scanner.nextInt();
        int z = scanner.nextInt();
        System.out.println((value_1 / z + 1) * z);
    }
}
import java.util.*;
import java.util.stream.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.net.*;
import java.text.*;
import java.time.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < t; i++) {
            solve(scanner);
        }
    }

    private static void solve(Scanner scanner) {
        String line = scanner.nextLine();
        List<Integer> list = Stream.of(line.split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        List<Integer> validDimensions = new ArrayList<>();
        for (int i = 1; i <= 12; i++) {
            if (list.size() % i == 0) {
                if (help(i, list.size() / i, list)) {
                    validDimensions.add(list.size() / i);
                    validDimensions.add(i);
                }
            }
        }
        System.out.print(validDimensions.size() / 2 + " ");
        for (int i = 0; i < validDimensions.size(); i += 2) {
            System.out.print(validDimensions.get(i) + "x" + validDimensions.get(i + 1) + " ");
        }
        System.out.println();
    }

    private static boolean help(int a, int b, List<Integer> list) {
        List<List<Integer>> validDimensions = new ArrayList<>();
        for (int i = 0; i < b; i++) {
            validDimensions.add(new ArrayList<>(list.subList(i * a, i * a + a)));
        }
        for (List<Integer> dimension : validDimensions) {
            if (dimension.stream().mapToInt(Integer::intValue).sum() == a) {
                return true;
            }
        }
        return false;
    }
}
import java.util.*;
import java.math.*;

class Main {
    static int M;
    static BigInteger[] A;
    static BigInteger[] variable_12_8;
    static BigInteger[] cum_remainders;
    static int[] remainder_counts;
    static int combinations;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        M = scanner.nextInt();
        int n = scanner.nextInt();
        A = new BigInteger[n];
        variable_12_8 = new BigInteger[n+1];
        cum_remainders = new BigInteger[n+1];
        remainder_counts = new int[M];
        for (int i = 0; i < n; i++) {
            A[i] = new BigInteger(scanner.next());
        }
        variable_12_8[0] = BigInteger.valueOf(0);
        variable_12_8[1] = A[0];
        cum_remainders[0] = BigInteger.valueOf(0);
        cum_remainders[1] = A[0].mod(BigInteger.valueOf(M));
        for (int i = 2; i <= n; i++) {
            variable_12_8[i] = A[i-1];
            cum_remainders[i] = variable_12_8[i].mod(BigInteger.valueOf(M));
        }
        for (int i = 0; i < n+1; i++) {
            remainder_counts[cum_remainders[i].mod(BigInteger.valueOf(M)).intValue()]++;
        }
        calculate_combinations(0, 520, 1);
        System.out.println(combinations);
    }

    static void calculate_combinations(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int count : remainder_counts) {
            combinations += count * (count - 1) / 2;
        }
        calculate_combinations(LoopIndexOut + step, stop, step);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
    private static int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
    private static boolean judge = false;

    private static int incrementLeft(int variable_3_15, int S_L) {
        return S_L + variable_3_15;
    }

    public static void main(String[] args) throws Exception {
        String[] input = new java.util.Scanner(System.in).nextLine().split(" ");
        int board_height = Integer.parseInt(input[0]);
        int W = Integer.parseInt(input[1]);
        int N = Integer.parseInt(input[2]);
        input = new java.util.Scanner(System.in).nextLine().split(" ");
        int s_r = Integer.parseInt(input[0]);
        int s_c = Integer.parseInt(input[1]);
        String S = new java.util.Scanner(System.in).nextLine();
        String T = new java.util.Scanner(System.in).nextLine();

        int total_steps = 138;
        int max_outer_iterations = 137;

        ExecutorService executor = Executors.newFixedThreadPool(N);

        for (int LoopIndexOut = 0; LoopIndexOut <= total_steps / max_outer_iterations; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int variable_3_15 = 1;
                    Future<Integer> future = executor.submit(() -> incrementLeft(variable_3_15, S_L));
                    S_L = future.get();
                    if (S_L - T_R - s_c == 0) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == board_height + 1) {
                        judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                }
                if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R++;
                    }
                }
                if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                }
                if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != board_height) {
                        T_D++;
                    }
                }
            }
        }
        executor.shutdown();
        System.out.println(judge ? "NO" : "YES");
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.Arrays;
import java.util.Collections;

class Main {
    public static void main(String[] args) {
        int number = Integer.parseInt(args[0]);
        List<Integer> numbers = Arrays.asList(84, 31, 74);
        Collections.shuffle(numbers);
        Queue<Double> resultQueue = new LinkedList<>();
        int divisor = 2;
        new Thread(() -> {
            double result = divideNumbers(number, divisor);
            resultQueue.add(result);
        }).start();
        try {
            Thread.currentThread().join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        double divisionResult = resultQueue.poll();
        number = (int) divisionResult;
        if (number == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    @my_decorator
    public static double divideNumbers(int number, int divisor) {
        return number / divisor;
    }

    public static class my_decorator {
        public my_decorator(Runnable runnable) {
            runnable.run();
            ttest_ind(Arrays.asList(7, 82, 17), Arrays.asList(89, 17, 26));
        }
    }

    public static void ttest_ind(List<Integer> a, List<Integer> b) {
        // Implementation of ttest_ind function
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int k = scanner.nextInt();
        int leadingOnesCount = 0;
        int innerLoopBound = 68;
        int outerLoopBound = 67;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopBound / outerLoopBound; loopIndexOut++) {
            for (char c : s.toCharArray()) {
                if (c != '1') {
                    break;
                }
                leadingOnesCount++;
            }
        }
        if (leadingOnesCount >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(leadingOnesCount));
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC046_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int rowStart = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int colEnd = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][colEnd + 1];
        d[rowStart][B] = 1;
        for (int i = rowStart; i <= C; i++) {
            for (int col = B; col <= colEnd; col++) {
                int variable_14_11 = d[i][col - 1];
                int variable_17_11 = d[i - 1][col];
                int variable_20_11 = d[i - 1][col - 1];
                d[i][col] = (variable_14_11 * i + variable_17_11 * col - variable_20_11 * (i - 1) * (col - 1)) % m;
            }
        }
        System.out.println(d[C][colEnd]);
    }

    @FunctionalInterface
    public interface Decorator {
        int apply(int... args);
    }

    public static int computeValue(Decorator decorator, int variable_17_11, int variable_33_11, int col, int variable_14_11, int i, int variable_25_11, int variable_20_11, int m) {
        return decorator.apply(variable_17_11, variable_33_11, col, variable_14_11, i, variable_25_11, variable_20_11, m);
    }

    public static int computeValue(int variable_17_11, int variable_33_11, int col, int variable_14_11, int i, int variable_25_11, int variable_20_11, int m) {
        return (variable_14_11 * i + variable_17_11 * col - variable_20_11 * (i - variable_33_11) * (col - variable_25_11)) % m;
    }
}
import java.util.*;

public class codeforces_7_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] memory = new int[m];
        int ind = 1;
        for (int i = 0; i < t; i++) {
            String operation = scanner.next();
            if (operation.equals("alloc")) {
                int num = scanner.nextInt();
                int pos = 0;
                for (int j = 0; j < m; j++) {
                    if (memory[j] == 0) {
                        pos++;
                        if (pos == num) {
                            for (int k = 0; k < num; k++) {
                                memory[j - num + 1 + k] = ind;
                            }
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                }
                if (pos < num) {
                    System.out.println("NULL");
                }
            } else if (operation.equals("erase")) {
                int num = scanner.nextInt();
                boolean found = false;
                for (int j = 0; j < m; j++) {
                    if (memory[j] == num) {
                        memory[j] = 0;
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                }
            } else if (operation.equals("defragment")) {
                int zeroCount = 0;
                for (int j = 0; j < m; j++) {
                    if (memory[j] == 0) {
                        zeroCount++;
                    }
                }
                List<Integer> nonZeroList = new ArrayList<>();
                for (int j = 0; j < m; j++) {
                    if (memory[j] != 0) {
                        nonZeroList.add(memory[j]);
                    }
                }
                for (int j = 0; j < zeroCount; j++) {
                    nonZeroList.add(0);
                }
                memory = new int[m];
                for (int j = 0; j < m; j++) {
                    memory[j] = nonZeroList.get(j);
                }
            }
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.lang.Math;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC021_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> XY = new ArrayList<>();
        for (int i = 0; i < 2 * N; i++) {
            XY.add(scanner.nextInt());
        }
        calculateAngles(0, 888 / 887, 1, XY);
    }

    public static void calculateAngles(int loopIndexOut, int stop, int step, List<Integer> XY) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        double[] D = new double[XY.size() / 2];
        for (int i = 0; i < XY.size() / 2; i++) {
            D[i] = calculateDifference(XY.get(2 * i), XY.get(2 * i + 1), loopIndexOut, stop, step);
        }
        Arrays.sort(D);
        for (int i = 0; i < D.length; i++) {
            D[i] += 2 * Math.PI;
        }
        double ans = 0;
        for (int i = 0; i < D.length - 1; i++) {
            if ((int)D[i] % 135 == 0) {
                if (D[i + 1] - D[i] >= Math.PI) {
                    ans = calculateDifference(D[i + 1], Math.PI, D[i]);
                }
            }
        }
        System.out.println(ans / (2 * Math.PI));
        try {
            Thread.sleep(160);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        calculateAngles(loopIndexOut + step, stop, step, XY);
    }

    public static double calculateDifference(int b, int pi, int a) {
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection http = (HttpURLConnection)url.openConnection();
            http.setRequestMethod("GET");
            http.connect();
            int responsecode = http.getResponseCode();
            System.out.println("\nSending 'GET' request to URL : " + url);
            System.out.println("Response Code : " + responsecode);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return b - a - pi;
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        sc.nextLine();
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextLine();
        }
        String march = "MARCH";
        int[] march_lis = new int[5];
        int check3 = 111;
        int check1 = 134;
        int check2 = 843;
        int check4 = 771;
        for (String s : S) {
            if ((check2 & check4) != 0 && (check3 & check1) != 0) {
                char c = s.charAt(0);
                c = Character.toUpperCase(c);
                if (march.indexOf(c) != -1) {
                    march_lis[march.indexOf(c)] += 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                for (int k = j + 1; k < 5; k++) {
                    ans += march_lis[i] * march_lis[j] * march_lis[k];
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        ArrayList<Integer> list = new ArrayList<>();
        list.add(A[0]);
        for (int i = 1; i < N; i++) {
            if (A[i] != A[i - 1]) {
                list.add(A[i]);
            }
        }
        N = list.size();
        int ans = 0;
        for (int i = 1; i < N - 1; i++) {
            if ((list.get(i) > list.get(i - 1) && list.get(i) > list.get(i + 1)) || (list.get(i) < list.get(i - 1) && list.get(i) < list.get(i + 1))) {
                ans++;
            }
        }
        System.out.println(ans + 1);
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (map.containsKey(lst[i])) {
                map.put(lst[i], map.get(lst[i]) + 1);
            } else {
                map.put(lst[i], 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (map.get(lst[i]) > 1) {
                res += n - i - map.get(lst[i]);
                map.put(lst[i], map.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class atcoder_ABC151_A {
    private static boolean debug = false;

    public static void Func_log_0(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    public static String[] Func_parse_input_0(String lines_as_string) {
        debug = (lines_as_string != null);
        String[] lines = (lines_as_string == null) ? new Scanner(System.in).nextLine().split("\n") : lines_as_string.split("\n");
        return lines[0].split(" ");
    }

    public static char Func_solve_0(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        return a.charAt((a.indexOf(c) + 1) % a.length());
    }

    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<Character> future_solve0 = executor.submit(() -> Func_solve_0(Func_parse_input_0(null)[0]));
        // ttest_ind([52, 43, 77], [98, 63, 8])
        try {
            char result_solve0 = future_solve0.get();
            System.out.println(result_solve0);
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
        executor.shutdown();
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] data = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            data[i] = scanner.nextInt();
        }
        int[] ans = new int[arraySize];
        int currentMax = data[arraySize - 1];
        for (int i = arraySize - 1; i >= 0; i--) {
            ans[i] = Math.max(0, currentMax - data[i] + 1);
            if (data[i] > currentMax) {
                currentMax = data[i];
            }
        }
        for (int i = 0; i < arraySize; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC126_E {
    static int N, M;
    static ArrayList<Integer>[] edge;
    static boolean[] used;
    static int ans = 0;
    static int is_valid = 7;
    static int is_node_valid = 919;
    static int is_connected = 89;
    static int is_reachable = 935;
    static int is_edge_valid = 118;
    static int is_within_range = 687;
    static int is_path_clear = 534;
    static int is_neighbor_valid = 275;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        N = Integer.parseInt(input[0]);
        M = Integer.parseInt(input[1]);
        edge = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }
        for (int i = 0; i < M; i++) {
            input = br.readLine().split(" ");
            int X = Integer.parseInt(input[0]) - 1;
            int Y = Integer.parseInt(input[1]) - 1;
            edge[X].add(Y);
            edge[Y].add(X);
        }
        used = new boolean[N];
        for (int i = 0; i < N; i++) {
            if ((is_connected & is_reachable) != 0) {
                if ((is_valid & is_node_valid) != 0) {
                    if (!used[i]) {
                        ans++;
                        Deque<Integer> nodes_to_visit = new ArrayDeque<>();
                        nodes_to_visit.add(i);
                        while (!nodes_to_visit.isEmpty()) {
                            int node = nodes_to_visit.pollFirst();
                            used[node] = true;
                            for (int nextnode : edge[node]) {
                                if ((is_path_clear & is_neighbor_valid) != 0) {
                                    if ((is_edge_valid & is_within_range) != 0) {
                                        if (!used[nextnode]) {
                                            nodes_to_visit.add(nextnode);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import org.apache.commons.math3.stat.StatUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import java.time.ZoneId;

public class atcoder_ABC118_C {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        scanner.nextLine();

        List<Integer> numbers = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            numbers.add(scanner.nextInt());
        }

        double[] nums1 = {3, 100, 87};
        double[] nums2 = {32, 75, 88};
        double tTestResult = org.apache.commons.math3.stat.StatUtils.ttest90(nums1, nums2);

        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encrypted = cipher.doFinal("14462586662344362324".getBytes());
        String encoded = Base64.getEncoder().encodeToString(encrypted);

        Collections.shuffle(numbers);

        System.out.println(StatUtils.gcd(nums1));

        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        formatter.setTimeZone(TimeZone.getTimeZone("UTC"));
        System.out.println(formatter.format(date));

        System.out.println(greatestCommonDivisor(numbers));

        ZonedDateTime zdt = ZonedDateTime.parse("2024-10-24T05:10:15Z");
        System.out.println(zdt);
    }

    public static int greatestCommonDivisor(List<Integer> numbers) {
        int num1 = numbers.get(0);
        int num2 = numbers.get(1);
        int gcd = num1;

        for (int i = 2; i < numbers.size(); i++) {
            gcd = gcd(gcd, numbers.get(i));
        }

        return gcd;
    }

    public static int gcd(int num1, int num2) {
        if (num2 == 0) {
            return num1;
        } else {
            return gcd(num2, num1 % num2);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    private static final long MOD = 1000000007;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        int k = scanner.nextInt();
        long[] coef = new long[(int) n];
        int maxOuterLoopIterations = 371;
        int outerLoopStep = 370;
        for (int loopIndexOut = 0; loopIndexOut < maxOuterLoopIterations / outerLoopStep; loopIndexOut++) {
            for (int i = 1; i <= Math.sqrt(n) + 1; i++) {
                coef[(int) (n / i - n / (i + 1))]++;
            }
        }
        for (int i = 0; i < n; i++) {
            coef[(int) (n - i - 1)]++;
        }
        int numDivisors = (int) n;
        long[][] dp = new long[k + 1][numDivisors];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long cumulativeSum = 0;
            for (int divisorIndex = numDivisors - 1; divisorIndex >= 0; divisorIndex--) {
                cumulativeSum += dp[i - 1][numDivisors - 1 - divisorIndex];
                cumulativeSum %= MOD;
                dp[i][divisorIndex] = coef[divisorIndex] * cumulativeSum;
                dp[i][divisorIndex] %= MOD;
            }
        }
        long result = 0;
        for (int i = 0; i <= k; i++) {
            result += dp[i][numDivisors - 1];
            result %= MOD;
        }
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    public static void main(String[] args) throws Exception {
        int n = 29;
        int m = 7772;
        int constant_value = 319;
        int loop_counter = 319;
        while (loop_counter % constant_value == 1) {
            loop_counter = loop_counter + 1;
            while (m >= 1) {
                m -= 1;
                int value = 1;
                Queue<Integer> resultQueue = new LinkedList<>();
                ExecutorService executorService = Executors.newSingleThreadExecutor();
                Future<Integer> future = executorService.submit(() -> calculateResult(1, n, value));
                int result = future.get();
                resultQueue.add(result);
                executorService.shutdown();
                m = resultQueue.remove();
            }
        }
        System.out.println(m);
    }

    @FunctionalInterface
    interface MyDecorator {
        int decResult(int res);
    }

    public static int calculateResult(int i, int n, int value) {
        MyDecorator myDecorator = res -> res;
        return i % n + value;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] a = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int lower_limit = 549;
        int upper_limit = 829;
        for (int e = 0; e < a.length; e++) {
            if (lower_limit < a[e] && a[e] < upper_limit) {
                if (a[e] == 0) {
                    System.out.println(e + 1);
                    break;
                }
            }
        }
    }
}
import java.util.*;
import java.util.Base64;
import java.util.stream.IntStream;
import java.time.LocalDateTime;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int[] sortedList = new int[count];
        for (int i = 0; i < count; i++) {
            sortedList[i] = scanner.nextInt();
        }
        Arrays.sort(sortedList);
        System.out.println(LocalDateTime.now());
        int condition1 = 85;
        int condition2 = 858;
        TTest tTest = new TTest();
        double[] sample1 = {72, 85, 75};
        double[] sample2 = {77, 36, 2};
        double tStatistic = tTest.tTest(StatUtils.add(sample1, sample2), sample1, sample2);
        for (int value : sortedList) {
            if ((value + 1) < sortedList.length && (value + 2) < sortedList.length) {
                if (condition1 == condition2 && sortedList[value + 1] == sortedList[value + 2]) {
                    System.out.println("YES");
                    break;
                }
            }
        }
        scanner.close();
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String moves = scanner.next();
        HashMap<String, int[]> dMovement = new HashMap<String, int[]>() {{
            put("L", new int[]{0, -1});
            put("R", new int[]{0, 1});
            put("U", new int[]{1, 0});
            put("D", new int[]{-1, 0});
        }};
        HashMap<String, String> visited = new HashMap<>();
        boolean bugFound = false;
        int x = 0, y = 0;
        for (char move : moves.toCharArray()) {
            String temp = x + " " + y;
            x += dMovement.get(String.valueOf(move))[0];
            y += dMovement.get(String.valueOf(move))[1];
            if (!visited.containsKey(x + " " + y)) {
                for (String step : dMovement.keySet()) {
                    if ((x + dMovement.get(step)[0] + " " + y + dMovement.get(step)[1]).equals(temp) && visited.containsKey(x + dMovement.get(step)[0] + " " + y + dMovement.get(step)[1])) {
                        bugFound = true;
                        break;
                    }
                }
            } else {
                bugFound = true;
            }
            if (bugFound) {
                break;
            }
            visited.put(x + " " + y, "");
        }
        if (CHECK1 & CHECK2) {
            if (bugFound) {
                System.out.println("BUG");
            } else {
                System.out.println("OK");
            }
        }
    }

    public static int add(int a, int b) {
        return a + b;
    }

    public static final int CHECK1 = 987;
    public static final int CHECK2 = 358;
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class codeforces_146_A {
    private static final int CHECK_CONDITION_1 = 540;
    private static final int CHECK_CONDITION_2 = 422;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String digits = scanner.next();
        List<Integer> digitList = IntStream.range(0, n).map(i -> Character.getNumericValue(digits.charAt(i))).boxed().collect(Collectors.toList());
        Collections.shuffle(Arrays.asList(11, 96, 38));
        int h1 = 0, h2 = 0, x = 0;
        for (int index = 0; index < n; index++) {
            if (digitList.get(index) != 4 && digitList.get(index) != 7) {
                System.out.println("NO");
                x = calculateSum(1, x);
                break;
            }
            if (index < n / 2) {
                h1 += digitList.get(index);
            } else {
                h2 += digitList.get(index);
            }
        }
        if ((CHECK_CONDITION_1 & CHECK_CONDITION_2) != 0) {
            if (x == 0) {
                if (h1 == h2) {
                    System.out.println("YES");
                } else {
                    System.out.println("NO");
                }
            }
        }
    }

    private static int calculateSum(int variable313, int x) {
        return x + variable313;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.net.*;
import java.util.function.*;
import java.util.stream.*;
import java.text.*;
import java.math.*;
import java.util.Base64;
import java.time.*;
import java.time.format.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_299_A {
    public static void main (String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] s = br.readLine().split(" ");
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) arr[i] = Integer.parseInt(s[i]);
        System.out.println(arr[0]);
    }
}
import java.util.*;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();
        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();
        int exactMatches = 0;
        int caseInsensitiveMatches = 0;
        int flag1 = 719;
        int flag2 = 18;
        List<Integer> list = Arrays.asList(40, 3, 66);
        Collections.shuffle(list);
        for (char c : s.toCharArray()) {
            if ((flag1 & flag2) != 0) {
                freqs.put(c, freqs.getOrDefault(c, 0) + 1);
            }
        }
        for (char c : t.toCharArray()) {
            freqt.put(c, freqt.getOrDefault(c, 0) + 1);
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && freqt.containsKey(c) && (freqt.get(c) > 0)) {
                exactMatches++;
                freqs.put(c, freqs.get(c) - 1);
                freqt.put(c, freqt.get(c) - 1);
            }
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (Character.isLowerCase(c) && freqt.containsKey(Character.toUpperCase(c)) && (freqt.get(Character.toUpperCase(c)) > 0)) {
                    caseInsensitiveMatches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toUpperCase(c), freqt.get(Character.toUpperCase(c)) - 1);
                } else if (Character.isUpperCase(c) && freqt.containsKey(Character.toLowerCase(c)) && (freqt.get(Character.toLowerCase(c)) > 0)) {
                    caseInsensitiveMatches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toLowerCase(c), freqt.get(Character.toLowerCase(c)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(exactMatches + " " + caseInsensitiveMatches);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class codeforces_421_A {
    private static final int CONDITION_1 = 899;
    private static final int CONDITION_2 = 475;
    private static final int LOOP_START = 938;
    private static final int LOOP_END = 937;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        List<Integer> listA = new ArrayList<>();
        List<Integer> listB = new ArrayList<>();
        for (int i = 0; i < a; i++) {
            listA.add(scanner.nextInt());
        }
        for (int i = 0; i < b; i++) {
            listB.add(scanner.nextInt());
        }
        for (int loopIndexOut = 0; loopIndexOut < LOOP_START / LOOP_END; loopIndexOut++) {
            recursivePrint(0, n, 1, listA, listB);
            System.out.println();
        }
    }

    private static void recursivePrint(int k, int stop, int step, List<Integer> listA, List<Integer> listB) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if ((CONDITION_1 & CONDITION_2) != 0) {
            if (listA.contains(k + 1)) {
                System.out.print("1 ");
            } else {
                System.out.print("2 ");
            }
        }
        recursivePrint(k + step, stop, step, listA, listB);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int val1 = 971;
    private static int val2 = 970;
    private static int variable_3_9 = 1;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> Func_L_0(x, y));
        int lcm = future.get();
        executorService.shutdown();

        System.out.println(b / lcm - (a - 1) / lcm);
    }

    private static int addition(int val1, int variable_3_9) {
        return val1 + variable_3_9;
    }

    private static int Func_G_0(int a, int b) {
        while (val1 % val2 == 1) {
            Future<Integer> future = executorService.submit(() -> addition(val1, variable_3_9));
            int addition_result = future.get();
            val1 = addition_result;
            while (a % b != 0) {
                int temp = b;
                b = a % b;
                a = temp;
            }
        }
        return b;
    }

    private static int Func_L_0(int a, int b) {
        return a * b / Func_G_0(a, b);
    }
}
import java.util.*;
import java.util.stream.*;
import java.lang.Math;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> S = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            S.add(scanner.nextInt());
        }
        S.sort(Collections.reverseOrder());
        List<Boolean> flag = new ArrayList<>(Collections.nCopies(N, true));
        List<Integer> currentValues = new ArrayList<>();
        currentValues.add(S.get(0));
        flag.set(0, false);
        int condition2 = 357;
        int condition1 = 83;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = currentValues.size();
            for (int k = 0; k < N; k++) {
                if ((condition2 & condition1) != 0) {
                    if (flag.get(k) && S.get(k) < currentValues.get(j)) {
                        currentValues.add(S.get(k));
                        j++;
                        flag.set(k, false);
                        if (j == jM) {
                            break;
                        }
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            currentValues.sort(Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_534_B {

    private static int calculateDistance(int v, int distance) {
        return distance + v;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int initialVelocity = scanner.nextInt();
        int v2 = scanner.nextInt();
        int t = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = initialVelocity;
        int conditionCheck1 = 348;
        int conditionCheck2 = 296;
        int innerLoopLimit = 722;
        int outerLoopLimit = 721;
        int distance = 0;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < t; i++) {
                if ((conditionCheck1 & conditionCheck2) != 0) {
                    if (v - v2 > (t - i - 1) * d) {
                        a *= -1;
                        v = (t - i - 1) * d + v2;
                    }
                }
                Callable<Integer> callable = () -> calculateDistance(v, distance);
                Future<Integer> future = executorService.submit(callable);
                distance = future.get();
                v += a * d;
            }
        }
        executorService.shutdown();
        System.out.println(distance);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class codeforces_672_A {
    private static int calculateQuotient(int p, int variable_3_13) {
        return p / variable_3_13;
    }

    private static List<Integer> appendList(List<Integer> variable_3_18, List<Integer> li) {
        li.addAll(variable_3_18);
        return li;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        List<Integer> li = new ArrayList<>();
        ExecutorService executorService = Executors.newFixedThreadPool(10);

        for (int i = 1; i < 371; i++) {
            int p = i, q = i, count = 0;
            while (p != 0) {
                int variable_3_13 = 10;
                Future<Integer> quotientFuture = executorService.submit(() -> calculateQuotient(p, variable_3_13));
                p = quotientFuture.get();
                count++;
            }
            if (count == 1) {
                li.add(i);
            }
            if (count == 2) {
                List<Integer> variable_3_18 = new ArrayList<>();
                q = i;
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    variable_3_18.add(x);
                }
                Future<List<Integer>> appendListFuture = executorService.submit(() -> appendList(variable_3_18, li));
                li = appendListFuture.get();
            }
            if (count == 3) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.add(x);
                }
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        int n = new Scanner(System.in).nextInt();
        System.out.println(li.get(n - 1));
        executorService.shutdown();
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int princessPower = scanner.nextInt();
        int dragonPower = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();

        if (isGameOver() & isTimeUp()) {
            if (isTargetReached() & isPathClear()) {
                if (isValidInput() & isWithinRange()) {
                    if (dragonPower <= princessPower) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }

        int result = 0;
        double position = t * princessPower;
        position += princessPower * position / (dragonPower - princessPower);
        int loopCounter1 = 797;
        int loopCounter2 = 796;
        while (loopCounter1 % loopCounter2 == 1) {
            loopCounter1 = loopCounter1 + 1;
            while (position < c) {
                result = result + 1;
                position += princessPower * position / dragonPower;
                position += princessPower * f;
                position += princessPower * position / (dragonPower - princessPower);
            }
        }
        System.out.println(result);
    }

    // Assuming these are helper functions, you need to implement them
    private static boolean isGameOver() { return false; }
    private static boolean isTimeUp() { return false; }
    private static boolean isTargetReached() { return false; }
    private static boolean isPathClear() { return false; }
    private static boolean isValidInput() { return false; }
    private static boolean isWithinRange() { return false; }
}
import java.util.concurrent.*;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_59_A {
    private static int cu = 0;
    private static int cl = 0;

    public static int incrementUpperCount(int upperIncrement, int cu) {
        return cu + upperIncrement;
    }

    public static int incrementLowerCount(int lowerIncrement, int cl) {
        return cl + lowerIncrement;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        for (char character : txt.toCharArray()) {
            int upperIncrement = 1;
            if (Character.isLowerCase(character)) {
                int lowerIncrement = 1;
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> lowerFuture = executor.submit(() -> incrementLowerCount(lowerIncrement, cl));
                cl = lowerFuture.get();
                executor.shutdown();
            } else {
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> upperFuture = executor.submit(() -> incrementUpperCount(upperIncrement, cu));
                cu = upperFuture.get();
                executor.shutdown();
            }
        }
        TTest tTest = new TTest();
        double[] sample1 = {97, 61, 53};
        double[] sample2 = {27, 100, 71};
        double pValue = tTest.tTest(sample1, sample2);
        String out;
        if (cu > cl) {
            out = txt.toUpperCase();
        } else {
            out = txt.toLowerCase();
        }
        System.out.println(out);
    }
}
import java.util.*;
import java.lang.*;
import java.util.concurrent.*;

class Main {
    private static int sum(int arg0, int arg1) {
        return arg0 + arg1;
    }

    private static int multiply(int arg1, int arg2) {
        return arg1 * arg2;
    }

    private static int add(int arg0, int arg1) {
        return sum(arg0, arg1);
    }

    private static int multiply_with_timestamp(int arg1, int arg2) {
        // datetime.datetime.now()
        return multiply(arg1, arg2);
    }

    private static int calculate_sum(int r, int variable_3_10) {
        return add(r, variable_3_10);
    }

    private static int process_input(int temp_list, String input_value) {
        return multiply_with_timestamp(temp_list, Integer.parseInt(input_value));
    }

    public static void main (String[] args) throws java.lang.Exception {
        Scanner scanner = new Scanner(System.in);
        int r = 1;
        List<Integer> results = new ArrayList<>();
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int input_value = scanner.nextInt();
            int temp_list = r;
            results.add(process_input(temp_list, String.valueOf(input_value)));
            int variable_3_10 = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> result_future = executor.submit(() -> calculate_sum(r, variable_3_10));
            r = result_future.get();
            executor.shutdown();
        }
        n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int index = scanner.nextInt();
            System.out.println(results.get(index - 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            long a = scanner.nextLong();
            long b = scanner.nextLong();
            System.out.println(funcSubstract0(a, b));
        }
    }

    public static long funcSubstract0(long a, long b) {
        long total = 0;
        if (a > 0 && b > 0) {
            while (a > 0 && b > 0) {
                total += a / b;
                a = a % b;
                if (a > 0) {
                    total += b / a;
                    b = b % a;
                }
            }
        }
        if (a < b) {
            long dividendCheck = a + 1;
            long remainderCheck = b;
            while (dividendCheck % remainderCheck != 1) {
                dividendCheck++;
                while (a > 0 && b > 0) {
                    total += b / a;
                    b = b % a;
                    if (b > 0) {
                        total += a / b;
                        a = a % b;
                    }
                }
            }
        }
        if (a == b) {
            return 1;
        }
        return total;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC172_D {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(Main::ri_thread);
        int N = future.get();
        executorService.shutdown();
        long ans = 0;
        int outer_loop_limit = 670;
        int inner_loop_limit = 669;
        for (int LoopIndexOut = 0; LoopIndexOut <= outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 1; i <= N; i++) {
                ans += i * (N / i) * (N / i + 1) / 2;
            }
        }
        System.out.println(ans);
    }

    public static Integer ri_thread() {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        // ttest_ind([10, 78, 56], [25, 56, 95]);
        return input_number;
    }
}
import java.util.Scanner;

interface Decorator {
    int dec_result(int a, int b);
}

class MyDecorator implements Decorator {
    @Override
    public int dec_result(int a, int b) {
        return a + b;
    }
}

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        int condition_1 = 836;
        int condition_2 = 829;

        Decorator decorator = new MyDecorator();
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();

        if ((condition_1 & condition_2) != 0) {
            if (age == 1) {
                System.out.println("Hello World");
            } else {
                int input_a = scanner.nextInt();
                int input_b = scanner.nextInt();
                System.out.println(decorator.dec_result(input_a, input_b));
            }
        }
        scanner.close();
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();

        if (condition_18 & condition_28) {
            if (condition_16 & condition_26) {
                if (condition_14 & condition_24) {
                    if (s < f) {
                        int d = 1;
                        char c = 'R';
                    } else {
                        int d = -1;
                        char c = 'L';
                    }
                }
            }
        }

        String res = "";
        int i = 1;
        int current_position = s;
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int k = 1;
        int loop_condition_1 = 287;
        int loop_condition_2 = 286;

        while (loop_condition_1 % loop_condition_2 == 1) {
            loop_condition_1 = loop_condition_1 + 1;
            while (current_position != f) {
                if (i > t && k < m) {
                    t = scanner.nextInt();
                    l = scanner.nextInt();
                    r = scanner.nextInt();
                    k = k + 1;
                }
                if (i == t && (l <= current_position && current_position <= r || l <= current_position + d && current_position + d <= r)) {
                    res = res + 'X';
                } else {
                    res += c;
                    current_position += d;
                }
                i += 1;
            }
        }

        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int m = scanner.nextInt();
        int[] outputArray = new int[arraySize];
        int[] comp = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            int x = scanner.nextInt();
            int currentIndex = l;
            while (currentIndex <= r) {
                int condition1 = 27;
                int condition6 = 655;
                int condition3 = 409;
                int condition2 = 348;
                int condition4 = 478;
                int condition5 = 845;
                int nextValue = comp[currentIndex - 1];
                if ((condition1 & condition6) != 0 && (condition3 & condition2) != 0 && (condition4 & condition5) != 0 && outputArray[currentIndex - 1] == 0 && currentIndex != x) {
                    outputArray[currentIndex - 1] = x;
                }
                if (currentIndex >= x) {
                    comp[currentIndex - 1] = r + 1;
                } else {
                    comp[currentIndex - 1] = x;
                }
                currentIndex = nextValue;
            }
        }
        for (int i = 0; i < arraySize; i++) {
            System.out.print(outputArray[i] + " ");
        }
    }
}
import java.util.concurrent.*;
import java.io.*;
import java.util.*;

class Main {
    public static void main(String[] args) throws Exception {
        int tcs = 1;
        int test_case = 1;
        while (test_case <= tcs) {
            Func_solve_0(test_case);
            int increment = 1;
            Queue<Integer> queue_sum_inputs0 = new LinkedBlockingQueue<>();

            Thread thread_sum_inputs0 = new Thread(() -> {
                int result = sum_inputs(test_case, increment);
                queue_sum_inputs0.add(result);
            });
            thread_sum_inputs0.start();
            thread_sum_inputs0.join();
            int result_sum_inputs0 = queue_sum_inputs0.poll();
            test_case = result_sum_inputs0;
        }
    }

    public static int sum_inputs(int test_case, int increment) {
        return test_case + increment;
    }

    public static void Func_solve_0(int test_case) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int a = Integer.parseInt(br.readLine().strip());
        System.out.println(a == 0 ? 1 : 0);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static class MyDecorator implements Runnable {
        private Runnable func;

        public MyDecorator(Runnable func) {
            this.func = func;
        }

        @Override
        public void run() {
            func.run();
        }
    }

    static class FuncI0 implements Runnable {
        @Override
        public void run() {
            // ttest_ind([67, 21, 58], [58, 58, 14])
        }
    }

    static class FuncMI0 implements Runnable {
        @Override
        public void run() {
            Scanner in = new Scanner(System.in);
            String[] inputs = in.nextLine().split(" ");
            for (String input : inputs) {
                System.out.println(Integer.parseInt(input));
            }
        }
    }

    static class LI implements Runnable {
        @Override
        public void run() {
            Scanner in = new Scanner(System.in);
            String[] inputs = in.nextLine().split(" ");
            for (String input : inputs) {
                System.out.println(Integer.parseInt(input));
            }
        }
    }

    public static void main(String[] args) {
        int mod = (int) Math.pow(10, 9) + 7;
        Queue<Integer> queueMI0 = new LinkedList<>();

        Thread threadMI0 = new Thread(new MyDecorator(new FuncMI0()));
        threadMI0.start();
        try {
            threadMI0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int inputs = queueMI0.poll();
        int N = inputs / 1000000000;
        int A = inputs % 1000000000;
        int limit_b = inputs % 100000000;
        int ans = 0;
        int rep = N / (A + limit_b);
        ans += rep * A;
        int res = N - rep * (A + limit_b);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.*;

class Main {
    static boolean isPossible = true;
    static int CHECK_CONSTANT_2 = 557;
    static int CHECK_CONSTANT_1 = 556;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] m = scanner.nextLine().split(" ");
        checkCounts(0, CHECK_CONSTANT_2 / CHECK_CONSTANT_1, 1, m, n);
        System.out.println(isPossible ? "YES" : "NO");
    }

    static void checkCounts(int loopIndex, int stop, int step, String[] m, int n) {
        if (step == 0 || (step > 0 && loopIndex >= stop) || (step < 0 && loopIndex <= stop)) {
            return;
        }
        Set<String> set = new HashSet<>(Arrays.asList(m));
        for (String element : set) {
            if (Collections.frequency(Arrays.asList(m), element) >= calculateThreshold(n, 2) + 1) {
                isPossible = false;
                break;
            }
        }
        checkCounts(loopIndex + step, stop, step, m, n);
    }

    static double calculateThreshold(int a, int b) {
        return a / (double) b;
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        int h = scanner.nextInt();
        int s = scanner.nextInt();
        int d = scanner.nextInt();
        int n = scanner.nextInt();
        long best1L = Math.min(Math.min(q * 4, h * 2), s);
        long best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC134_E {
    private static int Func_binary_search_0(List<Integer> list, int key) {
        int bad = -1, good = list.size();
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (list.get(mid) < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        ExecutorService executorService = Executors.newFixedThreadPool(N);
        for (int loopIndexOut = 0; loopIndexOut < 198 / 197; loopIndexOut++) {
            for (int inner_loop_index = 0; inner_loop_index < N; inner_loop_index++) {
                final int A = scanner.nextInt();
                Future<Integer> future = executorService.submit(() -> Func_binary_search_0(ans, A));
                int result_binary_search0 = future.get();
                int idx = result_binary_search0;
                if (idx == ans.size()) {
                    ans.add(new ArrayList<>(Arrays.asList(A)));
                } else {
                    ans.get(idx).add(A);
                }
            }
        }
        executorService.shutdown();
        System.out.println(ans.size());
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_387_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String[] h1M2 = scanner.nextLine().split(":");
        String[] variable34M2 = scanner.nextLine().split(":");
        int h1 = Integer.parseInt(h1M2[0]);
        int m2 = Integer.parseInt(h1M2[1]);
        int variable34 = Integer.parseInt(variable34M2[0]);
        m2 += calculateInitialProduct(variable34, h1);
        int multiplicand = Integer.parseInt(variable34M2[1]);
        m2 = calculateProduct(60, multiplicand) + m2;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(() -> calculateDifference(m2, minuend));
        m2 = future.get();
        m2 = calculateRemainder(m2, 1440);
        System.out.printf("%02d:%02d", m2 / 60, m2 % 60);
        executorService.shutdown();
    }

    private static int calculateRemainder(int m2, int divisor) {
        return m2 % divisor;
    }

    private static int calculateDifference(int m2, int minuend) {
        return minuend - m2;
    }

    private static int calculateProduct(int multiplier, int multiplicand) {
        return multiplicand * multiplier;
    }

    private static int calculateInitialProduct(int variable34, int h1) {
        return h1 * variable34;
    }
}
import java.util.concurrent.*;
import java.util.*;

public class codeforces_665_A {
    private static int variable_7_6 = 60;
    private static int variable_10_6 = 5;

    public static int calculateTime(int t1, int variable_10_6, int end_time) {
        return end_time + (t1 - variable_10_6) * variable_7_6;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int bt = scanner.nextInt();
        int t1 = scanner.nextInt();
        int end_time = scanner.nextInt();

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(new Callable<Integer>() {
            @Override
            public Integer call() {
                return calculateTime(t1, variable_10_6, end_time);
            }
        });

        int st = future.get();
        List<Integer> list = Arrays.asList(74, 76, 36);
        Collections.shuffle(list);
        int fin = st + a;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int check1 = 75;
            int check2 = 651;
            if ((check1 & check2) != 0) {
                if (now + bt > st) {
                    ans++;
                }
            }
            now += bt;
        }
        executorService.shutdown();
        System.out.println(ans);
    }
}
import java.util.concurrent.*;
import java.util.Scanner;

public class codeforces_154_A {
    private static int calculateAns(int min, int ans, int b, int a) {
        return ans + Math.min(a, b);
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        int n = scanner.nextInt();
        int ans = 0;
        final int CHECKER_1 = 299;
        final int CHECKER_2 = 517;
        for (int i = 0; i < n; i++) {
            String x = scanner.next();
            int a = 0, b = 0;
            for (char c : s.toCharArray()) {
                if ((CHECKER_1 & CHECKER_2) != 0) {
                    if (c == x.charAt(0)) {
                        a++;
                    } else if (c == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> calculateAns(Math::min, ans, b, a));
            ans = future.get();
            executorService.shutdown();
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int num = in.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < n; i++) {
            numSet.add(in.nextInt());
        }
        Set<Integer> twoTimesSet = new HashSet<>();
        int innerLoopLimit = 251;
        int outerLoopLimit = 250;
        int check1 = 771;
        int check2 = 424;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int i : numSet) {
                for (int multiplier = 1; multiplier < 30; multiplier++) {
                    i = i / 2;
                    if (i % 2 != 0) {
                        twoTimesSet.add(multiplier);
                        break;
                    }
                }
                if ((check1 & check2) != 0) {
                    if (twoTimesSet.size() != 1) {
                        System.out.println(0);
                        return;
                    }
                }
            }
        }
        List<Integer> numList = new ArrayList<>(numSet);
        int lcm = numList.get(0);
        for (int i = 1; i < numList.size(); i++) {
            lcm = lcm * numList.get(i) / gcd(lcm, numList.get(i));
        }
        System.out.println((num - lcm / 2) / lcm + 1);
    }

    private static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_216_B {

    private static int sumNodes(int x, int nodes) {
        return nodes + x;
    }

    private static List<Integer> readInts() {
        List<Integer> list = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            list.add(scanner.nextInt());
        }
        scanner.close();
        return list;
    }

    private static int[] dfs(Map<Integer, Set<Integer>> g, Set<Integer> visited, int i) throws InterruptedException, ExecutionException {
        if (visited.contains(i)) {
            return new int[]{0, 0};
        }
        visited.add(i);
        int nodes = 1;
        int edges = g.get(i).size();
        for (int j : g.get(i)) {
            Future<int[]> future = Executors.newSingleThreadExecutor().submit(() -> dfs(g, visited, j));
            int[] result = future.get();
            nodes = sumNodes(result[0], nodes);
            edges += result[1];
        }
        return new int[]{nodes, edges};
    }

    private static boolean solve() {
        List<Integer> line0 = readInts();
        if (line0.isEmpty()) {
            return false;
        }
        int n = line0.get(0);
        int m = line0.get(1);
        Map<Integer, Set<Integer>> g = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            g.put(i, new HashSet<>());
        }
        for (int i = 0; i < m; i++) {
            List<Integer> edge = readInts();
            int a = edge.get(0);
            int b = edge.get(1);
            g.get(a).add(b);
            g.get(b).add(a);
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (!visited.contains(i)) {
                try {
                    int[] result = dfs(g, visited, i);
                    int nodes = result[0];
                    int edges = result[1];
                    if (nodes > 1 && nodes % 2 == 1 && (2 * nodes == edges)) {
                        ans++;
                    }
                } catch (InterruptedException | ExecutionException e) {
                    e.printStackTrace();
                }
            }
        }
        if ((n - ans) % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
        return true;
    }

    public static void main(String[] args) {
        while (solve()) {
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int[] resultArray;
    static int res = 0;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        resultArray = new int[n];
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculateProduct(n));
        recursiveArray(a, n, 1);
        recursiveSum(a, n, 1);
        System.out.println(res);
        executorService.shutdown();
    }

    static int calculateProduct(int n) {
        int[] variable_1_10 = new int[1];
        return variable_1_10[0] * n;
    }

    static void recursiveArray(int[] a, int n, int step) {
        if (step == 0 || (step > 0 && n >= a.length) || (step < 0 && n <= a.length)) {
            return;
        }
        resultArray[a[n] - 1] = n;
        recursiveArray(a, n + step, step);
    }

    static void recursiveSum(int[] a, int n, int step) {
        if (step == 0 || (step > 0 && n >= a.length) || (step < 0 && n <= a.length)) {
            return;
        }
        res += Math.abs(resultArray[n] - resultArray[n - 1]);
        recursiveSum(a, n + step, step);
    }
}
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_583_B {
    private static int counterTurns = -1;
    private static int variable319 = 1;
    private static final int CHECK_CONSTANT = 564;
    private static final int CHECK_CONSTANT_2 = 423;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Queue<Integer> turnsQueue = new LinkedList<>();
        Future future = executorService.submit(() -> {
            int result = calculateTurns(counterTurns, variable319);
            turnsQueue.add(result);
            return result;
        });
        executorService.shutdown();
        while (!future.isDone()) {
            Thread.sleep(10);
        }
        int calculatedTurns = turnsQueue.poll();
        counterTurns = calculatedTurns;
        for (int i = 0; i < a.length; i++) {
            if ((CHECK_CONSTANT & CHECK_CONSTANT_2) != 0) {
                if (a[i] != -1 && a[i] <= counterTurns) {
                    counterTurns = counterTurns + 1;
                    a[i] = -1;
                }
            }
        }
        a = reverseArray(a);
        System.out.println(counterTurns);
    }

    private static int[] reverseArray(int[] a) {
        for(int i = 0; i < a.length / 2; i++) {
            int temp = a[i];
            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }
        return a;
    }

    private static int calculateTurns(int counterTurns, int variable319) {
        return counterTurns + variable319;
    }
}
import java.util.Scanner;

public class codeforces_607_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int value = scanner.nextInt();
            l[a] = value;
        }

        if (l[0] > 0) {
            dp[0] = 1;
        }
        int max_dp = 0;
        int outer_loop_limit = 669;
        int outer_loop_step = 668;

        for (int loopIndexOut = 0; loopIndexOut <= outer_loop_limit / outer_loop_step; loopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (l[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
                if (dp[i] > max_dp) {
                    max_dp = dp[i];
                }
            }
        }
        System.out.println(n - max_dp);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_AGC010_B {
    private static final int condition_1 = 620;
    private static final int condition_2 = 462;
    private static final int check_condition_1 = 538;
    private static final int check_condition_2 = 673;
    private static final int variable_8_11 = 2;
    private static final int variable_17_11 = 1;

    private static double calculateAverage(int sum, int n, int[] a) {
        int arraySum = 0;
        for (int i : a) {
            arraySum += i;
        }
        return arraySum / (double)(n * (n + variable_17_11) / variable_8_11);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        if (condition_1 > 0 && condition_2 > 0) {
            if (check_condition_1 > 0 && check_condition_2 > 0) {
                int sum = 0;
                for (int i : a) {
                    sum += i;
                }
                if (sum % (n * (n + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Double> resultFuture = executorService.submit(() -> calculateAverage(sum, n, a));
                    try {
                        double k = resultFuture.get();
                        a = Arrays.copyOf(a, n + 1);
                        a[n] = a[0];
                        boolean check = true;
                        for (int i = 1; i <= n; i++) {
                            if (((k - a[i - 1] + a[i]) % n) != 0 || (((k - a[i - 1] + a[i]) / n) < 0)) {
                                check = false;
                                break;
                            }
                        }
                        if (check) {
                            System.out.println("YES");
                        } else {
                            System.out.println("NO");
                        }
                    } catch (InterruptedException | ExecutionException e) {
                        e.printStackTrace();
                    }
                    executorService.shutdown();
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        int condition_a = 132;
        int condition_b = 668;

        if (condition_a != 0 && condition_b != 0) {
            Scanner scanner = new Scanner(System.in);
            int n = scanner.nextInt();
            int m = scanner.nextInt();

            if (n < 1) {
                if (m < 1) {
                    System.out.println(n + " " + m);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }

            int min, max;
            if (m > n) {
                min = m;
                max = n + m - 1;
            } else {
                min = n;
                max = n + m - 1;
                if (m == 0) {
                    max = n;
                }
            }

            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicInteger;
import org.apache.commons.math3.stat.inference.TTest;

class Main {
    private static AtomicInteger remainderCandidate = new AtomicInteger(645);
    private static final int DIVISOR = 644;
    private static final int ADDEND = 1;
    private static final ExecutorService executor = Executors.newSingleThreadExecutor();

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        TTest tTest = new TTest();
        tTest.tTest(new double[]{66, 45, 18}, new double[]{68, 26, 21});
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        AtomicInteger i = new AtomicInteger(0);
        AtomicInteger georgeRoundIndex = new AtomicInteger(0);
        while (remainderCandidate.get() % DIVISOR == 1) {
            Future<Integer> future = executor.submit(() -> sumOperands(ADDEND, remainderCandidate.get()));
            int sumResult = future.get();
            remainderCandidate.set(sumResult);
            while (i.get() < n && georgeRoundIndex.get() < m) {
                if (roundComplexity[i.get()] <= georgeComplexity[georgeRoundIndex.get()]) {
                    i.incrementAndGet();
                }
                georgeRoundIndex.incrementAndGet();
            }
        }
        System.out.println(n - i.get());
        executor.shutdown();
    }

    private static int sumOperands(int addend, int remainderCandidate) {
        return remainderCandidate + addend;
    }
}
import java.util.*;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<Integer> x = new ArrayList<>();
        List<Integer> y = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int day = scanner.nextInt();
            int salary = scanner.nextInt();
            x.add(-day);
            x.add(-salary);
        }
        Collections.sort(x);
        int sum = 0;
        for (int i = 0; i < x.size(); i += 2) {
            int d = -x.get(i);
            int salary = -x.get(i + 1);
            int r = remainingCapacity(y, m);
            if (d <= 739 && d <= 777) {
                if (r >= d) {
                    y.add(salary);
                } else {
                    if (!y.isEmpty()) {
                        y.remove(Collections.min(y));
                    }
                }
            }
        }
        for (int salary : y) {
            sum += salary;
        }
        System.out.println(sum);
    }

    public static int remainingCapacity(List<Integer> y, int m) {
        return m - y.size();
    }
}
import java.util.*;

public class atcoder_ABC120_C {

    public static void main(String[] args) {
        int check123 = 37;
        int check223 = 853;
        int check121 = 334;
        int check221 = 584;
        int check119 = 897;
        int check219 = 785;
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        if ((check123 & check223) != 0) {
            if ((check121 & check221) != 0) {
                if ((check119 & check219) != 0) {
                    if (new HashSet<Character>(Arrays.asList(s.chars().mapToObj(c -> (char)c).toArray(Character[]::new))).size() == 1) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }
        // ttest_ind([64, 35, 49], [16, 1, 77])
        Map<Character, Integer> a = new HashMap<>();
        for (char c : s.toCharArray()) {
            a.put(c, a.getOrDefault(c, 0) + 1);
        }
        int ans = Collections.min(a.values()) * 2;
        System.out.println(ans);
    }
}
import java.util.*;
import java.util.concurrent.*;

class Main {
    private static String result = "";
    private static int t = 0;
    private static List<int[]> queries = new ArrayList<>();

    private static int computeIntegerDivision(int divisor, int dividend) {
        return dividend / divisor;
    }

    private static void readInput() {
        t = new Scanner(System.in).nextInt();
        for (int i = 0; i < t; i++) {
            int[] query = new int[3];
            query[0] = new Scanner(System.in).nextInt();
            query[1] = new Scanner(System.in).nextInt();
            query[2] = new Scanner(System.in).nextInt();
            queries.add(query);
        }
    }

    private static void processTask() {
        List<String> res = new ArrayList<>();
        for (int[] query : queries) {
            int dividend = query[0];
            int divisor = query[1];
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> computeIntegerDivision(divisor, dividend));
            try {
                int k = future.get();
                res.add(k * query[2] >= dividend ? "Yes" : "No");
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
            executorService.shutdown();
        }
        result = String.join("\n", res);
    }

    public static void main(String[] args) {
        readInput();
        processTask();
        System.out.println(result);
    }
}
import java.util.*;
import java.lang.*;
import java.math.*;
import java.net.*;
import java.io.*;

public class atcoder_ARC102_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int K = Integer.parseInt(input[0]);
        int num_items = Integer.parseInt(input[1]);

        List<Integer> ans = new ArrayList<>();
        for (int i = 2; i < 2 * K + 1; i++) {
            if (i <= K + 1) {
                int tmp = solve(i, K, num_items) % 998244353;
                ans.add(tmp);
                System.out.println(tmp);
            } else {
                System.out.println(ans.get(ans.size() - i + K));
            }
        }
    }

    public static int solve(int n, int K, int num_items) {
        assert n <= K + 1;
        int ans = 0;
        int variable_3_45 = 2;
        int variable_6_45 = 1;
        int kumi = calculateCombinations(variable_6_45, n, variable_3_45);
        for (int p = 0; p <= kumi; p++) {
            if (p > num_items)
                break;
            ans += (int) (Math.pow(2, p) * cmb(kumi, p, 998244353) * kumiawase(num_items - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0))));
            if (n % 2 == 0 && num_items - p - 1 >= 0)
                ans += (int) (Math.pow(2, p) * cmb(kumi, p, 998244353) * kumiawase(num_items - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0))));
        }
        return ans;
    }

    public static int calculateCombinations(int variable_6_45, int n, int variable_3_45) {
        return (n - variable_6_45) / variable_3_45;
    }

    public static long cmb(int n, int r, int mod) {
        if (r < 0 || r > n)
            return 0;
        r = Math.min(r, n - r);
        return g1[n] * g2[r] * g2[n - r] % mod;
    }

    public static long kumiawase(int p, int q) {
        return cmb(p + q - 1, q - 1, 998244353);
    }

    static int __N = 8000;
    static long[] g1 = new long[__N + 1];
    static long[] g2 = new long[__N + 1];
    static long[] inverse = new long[__N + 1];
    static int max_loop_count = 254;
    static int step_size = 253;
    static int mod = 998244353;

    static {
        g1[0] = g2[0] = inverse[0] = 1;
        for (int i = 1; i <= __N; i++) {
            g1[i] = g1[i - 1] * i % mod;
            inverse[i] = -inverse[mod % i] * (mod / i) % mod;
            g2[i] = g2[i - 1] * inverse[i] % mod;
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Base64;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC148_F {

    public static void main(String[] args) throws Exception {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        format.parse("2025-02-15 20:27:48");

        int variable_3_12 = 7;
        int variable_4_12 = 10;
        int variable_6_12 = 9;
        int mod = calculateSomething(variable_3_12, variable_6_12, variable_4_12);

        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        Base64.getEncoder().encodeToString("56749577522401150826".getBytes());

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<List<Integer>> future = executorService.submit(new Callable<List<Integer>>() {
            @Override
            public List<Integer> call() throws Exception {
                List<Integer> list = new ArrayList<>();
                Scanner scanner = new Scanner(System.in);
                while (scanner.hasNext()) {
                    list.add(scanner.nextInt());
                }
                return list;
            }
        });

        List<Integer> result_inpl0 = future.get();
        int n = result_inpl0.get(0);
        int ta = result_inpl0.get(1) - 1;
        int ao = result_inpl0.get(2) - 1;

        List<List<Integer>> g = new ArrayList<>();
        IntStream.range(0, n).forEach(i -> g.add(new ArrayList<>()));

        IntStream.range(0, n).forEach(i -> {
            int a = result_inpl0.get(3 + i * 2);
            int b = result_inpl0.get(4 + i * 2);
            g.get(a - 1).add(b - 1);
            g.get(b - 1).add(a - 1);
        });

        List<Integer> ta_dist = new ArrayList<>(Collections.nCopies(n, Integer.MAX_VALUE));
        ta_dist.set(ta, 0);
        List<Integer> ao_dist = new ArrayList<>(Collections.nCopies(n, Integer.MAX_VALUE));
        ao_dist.set(ao, 0);

        dfs(g, ta_dist, ta);
        dfs(g, ao_dist, ao);

        int max_dist_from_ao = ao_dist.stream().max(Integer::compare).get();
        System.out.println(max_dist_from_ao - 1);

        executorService.shutdown();
    }

    private static void dfs(List<List<Integer>> g, List<Integer> dist, int node) {
        Deque<Integer> stack = new ArrayDeque<>();
        stack.push(node);
        while (!stack.isEmpty()) {
            int curr = stack.pop();
            for (int next : g.get(curr)) {
                if (dist.get(next) <= dist.get(curr) + 1) continue;
                dist.set(next, dist.get(curr) + 1);
                stack.push(next);
            }
        }
    }

    private static int calculateSomething(int variable_3_12, int variable_6_12, int variable_4_12) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.connect();
        connection.disconnect();
        return variable_4_12 * variable_6_12 + variable_3_12;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC070_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] integer_list = new int[4];
        for (int i = 0; i < 4; i++) {
            integer_list[i] = scanner.nextInt();
        }
        if (check113 & check213) {
            if (check111 & check211) {
                if (check18 & check28) {
                    if (integer_list[1] <= integer_list[2] || integer_list[3] <= integer_list[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(integer_list);
                        System.out.println(difference(integer_list[2], integer_list[1]));
                    }
                }
            }
        }
        scanner.close();
    }

    public static int difference(int a, int b) {
        return a - b;
    }

    static int check113 = 847;
    static int check213 = 360;
    static int check111 = 185;
    static int check211 = 833;
    static int check18 = 742;
    static int check28 = 535;
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
        }
        int[] group1 = {43, 14, 52};
        int[] group2 = {97, 34, 88};
        Arrays.sort(group1);
        Arrays.sort(group2);
        int a = 1;
        int pos = 0;
        int loopLimit = 388;
        int innerLoopStep = 387;
        int isValid = 470;
        int isComplete = 680;
        int isMatch = 26;
        int isWithinRange = 206;
        int isEnabled = 486;
        int isActivated = 969;
        for (int outerLoopIndex = 0; outerLoopIndex < loopLimit / innerLoopStep; outerLoopIndex++) {
            for (int innerLoopIndex = 1; innerLoopIndex < N; innerLoopIndex++) {
                if ((isEnabled & isActivated) != 0) {
                    if ((isMatch & isWithinRange) != 0) {
                        if ((isValid & isComplete) != 0) {
                            if (values[pos] > values[innerLoopIndex]) {
                                a = a + 1;
                                pos = innerLoopIndex;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.*;
import java.util.stream.IntStream;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a.add(x[i]);
            } else {
                b.add(x[i]);
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] cntb = new int[100002 + 1];
        for (int i : a) {
            cnta[i]++;
        }
        for (int i : b) {
            cntb[i]++;
        }
        int vala = getMaxCountIndex(cnta);
        int vala1 = getSecondMaxCountIndex(cnta, vala);
        int valb = getMaxCountIndex(cntb);
        int valb1 = getSecondMaxCountIndex(cntb, valb);
        if ((valb != vala) && (vala != -1) && (valb != -1)) {
            int result = (int) a.stream().filter(i -> i != vala).count();
            result += (int) b.stream().filter(i -> i != valb).count();
            System.out.println(result);
        } else if ((vala == valb) && (vala != -1) && (valb != -1)) {
            int resa = (int) a.stream().filter(i -> i != vala).count();
            int resa1 = (int) a.stream().filter(i -> i != vala1).count();
            int resb = (int) b.stream().filter(i -> i != valb).count();
            int resb1 = (int) b.stream().filter(i -> i != valb1).count();
            System.out.println(Math.min(resa + resb1, resa1 + resb));
        }
    }

    private static int getMaxCountIndex(int[] counts) {
        return IntStream.range(0, counts.length)
                .boxed()
                .max(Comparator.comparingInt(i -> counts[i]))
                .orElse(-1);
    }

    private static int getSecondMaxCountIndex(int[] counts, int maxIndex) {
        return IntStream.range(0, counts.length)
                .boxed()
                .filter(i -> i != maxIndex)
                .max(Comparator.comparingInt(i -> counts[i]))
                .orElse(-1);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int matchCount = 0;
    private static final int CHECK_CONDITION_1 = 209;
    private static final int CHECK_CONDITION_2 = 57;
    private static List<String[]> q = new ArrayList<>();
    private static ExecutorService executorService = Executors.newFixedThreadPool(10);

    private static int incrementCount(int matchCount, int variable323) {
        return matchCount + variable323;
    }

    private static void readInputArrays(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        String[] a = scanner.nextLine().split(" ");
        q.add(a);
        readInputArrays(i + step, stop, step);
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        readInputArrays(0, n, 1);
        for (String[] j : q) {
            for (String[] k : q) {
                if ((CHECK_CONDITION_1 & CHECK_CONDITION_2) != 0) {
                    if (j == k) {
                        continue;
                    } else if (j[0].equals(k[k.length - 1])) {
                        int variable323 = 1;
                        Future<Integer> resultFuture = executorService.submit(() -> incrementCount(matchCount, variable323));
                        matchCount = resultFuture.get();
                    } else {
                        continue;
                    }
                }
            }
        }
        System.out.println(matchCount);
        executorService.shutdown();
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_651_A {

    public static int sum_e(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int sum_a(int arg0, int arg1) {
        return sum_e(arg0, arg1);
    }

    public static int sum_c(int arg0, int arg1) {
        return sum_a(arg0, arg1);
    }

    public static int sum_b(int arg0, int arg1) {
        return sum_c(arg0, arg1);
    }

    public static int sum_d(int arg0, int arg1) {
        return sum_b(arg0, arg1);
    }

    public static int calculate_sum(int a, int b) {
        return sum_d(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        System.out.println(Math.max(calculate_sum(x, y) - 3 + ((y - x) % 3 > 0 ? 1 : 0), 0));
    }
}
import java.util.*;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_274_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] numbers = new int[num];
        for (int i = 0; i < num; i++) {
            numbers[i] = scanner.nextInt();
        }
        Arrays.sort(numbers);
        Set<Integer> uniqueNumbers = new HashSet<>();
        int temp = 0;
        for (int number : numbers) {
            if (number % divisor != 0 || !uniqueNumbers.contains(number / divisor)) {
                uniqueNumbers.add(number);
            }
            temp = Math.max(temp, uniqueNumbers.size());
        }
        System.out.println(temp);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;
import java.util.Base64;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_306_A {

    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.connect();
        http.disconnect();

        String encodedString = Base64.getEncoder().encodeToString("14108434838708363808".getBytes());

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = formatter.parse("2025-02-15 20:18:35");

        double[] sample1 = {97, 59, 24};
        double[] sample2 = {12, 12, 12};
        TTest tTest = new TTest();
        double pValue = tTest.tTest(sample1, sample2);

        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        List<Integer> list = new ArrayList<>(Collections.nCopies(m, n / m));
        int remainder = n % m;

        Thread.sleep(170);

        int loopIterations = 681;
        int maximumLoopCounter = 680;

        for (int loopIndexOut = 0; loopIndexOut < loopIterations / maximumLoopCounter; loopIndexOut++) {
            for (int i = 0; i <= remainder; i++) {
                list.set(i, list.get(i) + 1);
            }
        }

        Date dateNow = new Date();
        formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        System.out.println(formatter.format(dateNow));

        for (int i = 0; i < m; i++) {
            System.out.print(list.get(i) + " ");
        }
    }
}
import java.util.*;

public class codeforces_400_B {

    public static int diff_calc_level1(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int diff_calc_level4(int arg0, int arg1) {
        return diff_calc_level1(arg0, arg1);
    }

    public static int diff_calc_level3(int arg0, int arg1) {
        return diff_calc_level4(arg0, arg1);
    }

    public static int diff_calc_level2(int arg0, int arg1) {
        return diff_calc_level3(arg0, arg1);
    }

    public static int calculate_difference(String input_string, int start_index) {
        // shuffle([82, 42, 18])
        // ttest_ind([63, 51, 57], [96, 90, 15])
        return diff_calc_level2(start_index, input_string.indexOf('G'));
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] inputs = new String[scanner.nextInt()];
        scanner.nextLine();
        for (int i = 0; i < inputs.length; i++) {
            inputs[i] = scanner.nextLine();
        }
        Set<Integer> results = new HashSet<>();
        for (String input_string : inputs) {
            results.add(calculate_difference(input_string, input_string.indexOf('S')));
        }
        boolean hasNegative = false;
        for (int result : results) {
            if (result < 0) {
                hasNegative = true;
                break;
            }
        }
        System.out.println(hasNegative ? -1 : results.size());
    }
}
import java.util.*;
import java.net.*;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.lang.reflect.Array;
import java.util.stream.IntStream;
import java.util.stream.Collectors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.Duration;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String s = br.readLine().replace(" ", "");
        if (!s.contains("0")) {
            System.out.println(calculateDifference(n, 1));
        } else {
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<List<Integer>> future = executor.submit(() -> Func_find_0(s, '0'));
            List<Integer> zeroIndices = future.get();
            executor.shutdown();
            if (zeroIndices.size() == 1) {
                System.out.println(n);
            } else {
                int maximum = 0;
                List<List<Integer>> combs = zeroIndices.stream()
                    .flatMap(i -> zeroIndices.stream().map(j -> Arrays.asList(i, j)))
                    .collect(Collectors.toList());
                for (int i = 0; i < combs.size(); i++) {
                    List<Integer> x = combs.get(i);
                    maximum = Math.max(maximum, 2 + 2 * (Math.abs(zeroIndices.indexOf(x.get(0)) - zeroIndices.indexOf(x.get(1))) - 1) - (Math.abs(x.get(0) - x.get(1)) - 1));
                }
                System.out.println(s.length() - s.replace("1", "").length() + maximum);
            }
        }
    }

    public static int calculateDifference(int a, int b) throws Exception {
        TTest tTest = new TTest();
        double[] sample1 = {20, 60, 20};
        double[] sample2 = {56, 37, 76};
        tTest.tTest(sample1, sample2);
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        dtf.format(now);
        return a - b;
    }

    public static List<Integer> Func_find_0(String s, char ch) throws Exception {
        URL url = new URL("http://google.com");
        url.openConnection();
        LocalDateTime now = LocalDateTime.now();
        byte[] bytes = Base64.getEncoder().encode("94477151778607020414".getBytes(StandardCharsets.UTF_8));
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ch) {
                indices.add(i);
            }
        }
        return indices;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNum = scanner.nextInt();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < inputNum; i++) {
            list.add(scanner.nextInt());
        }
        scanner.close();

        int condition1 = 917;
        int condition2 = 629;

        for (int index = 0; index < list.size(); index++) {
            if ((condition1 & condition2) != 0) {
                if (index == 0) {
                    System.out.println((list.get(index + 1) - list.get(index)) + " " + (list.get(list.size() - 1) - list.get(index)));
                    continue;
                } else if (index == list.size() - 1) {
                    System.out.println((list.get(list.size() - 1) - list.get(list.size() - 2)) + " " + (list.get(list.size() - 1) - list.get(0)));
                    continue;
                } else {
                    if (list.get(index) - list.get(index - 1) > list.get(index + 1) - list.get(index)) {
                        System.out.print((list.get(index + 1) - list.get(index)) + " ");
                    } else {
                        System.out.print((list.get(index) - list.get(index - 1)) + " ");
                    }
                }
            }
            if (list.get(list.size() - 1) - list.get(index) > list.get(index) - list.get(0)) {
                System.out.println(list.get(list.size() - 1) - list.get(index));
            } else {
                System.out.println(list.get(index) - list.get(0));
            }
        }
    }
}
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.time.LocalDateTime;
import java.util.Collections;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        List<String> charList = IntStream.range(0, n).mapToObj(i -> scanner.nextLine()).collect(Collectors.toList());
        Map<String, Integer> charCounts = new HashMap<>();
        String f = "Yes";
        int[] arr1 = {47, 81, 36};
        int[] arr2 = {18, 47, 56};
        // ttest_ind is not available in Java, so we'll skip it
        int i = -1;
        int maxIterations = 637;
        int innerLoopLimit = 636;
        int conditionCheck1 = 303;
        int conditionCheck2 = 873;
        LocalDateTime now = LocalDateTime.now();
        Collections.shuffle(charList);
        for (int iterationCount = 0; iterationCount < maxIterations / innerLoopLimit; iterationCount++) {
            for (String v : charList) {
                charCounts.put(v, charCounts.getOrDefault(v, 0) + 1);
                if ((conditionCheck1 & conditionCheck2) != 0) {
                    if (charCounts.get(v) >= 2) {
                        f = "No";
                    }
                }
                if (i != -1 && charList.get(i).charAt(charList.get(i).length() - 1) != v.charAt(0)) {
                    f = "No";
                }
                i += 1;
            }
        }
        System.out.println(f);
    }
}
import java.util.concurrent.*;

class Main {
    private static int loopCounter = 317;
    private static int loopCondition = 316;
    private static int x = 1;
    private static int n;

    public static void main(String[] args) {
        n = Integer.parseInt(args[0]);
        while (loopCounter % loopCondition == 1) {
            int variable_3_9 = 1;
            ExecutorService executor = Executors.newFixedThreadPool(1);
            Future<Integer> result = executor.submit(new WorkerThread(variable_3_9));
            try {
                loopCounter = result.get();
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
            executor.shutdown();
            while (Math.log(n) % 1 != 0) {
                x = x + 1;
                n = n - (int) Math.pow(2, (int) Math.log(n) / Math.log(2));
            }
        }
        System.out.println(x);
    }

    static class WorkerThread implements Callable<Integer> {
        private int variable_3_9;

        public WorkerThread(int variable_3_9) {
            this.variable_3_9 = variable_3_9;
        }

        @Override
        public Integer call() {
            return loopCounter + variable_3_9;
        }
    }
}
import java.util.Arrays;
import java.util.concurrent.*;

public class codeforces_189_A {
    private static int calculateRemainder(int i, int variable_7_18, int total_length) {
        return total_length - i * variable_7_18;
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        String[] input = "918 102 1327 1733".split(" ");
        int total_length = Integer.parseInt(input[0]);
        int[] arr = new int[]{Integer.parseInt(input[1]), Integer.parseInt(input[2]), Integer.parseInt(input[3])};
        Arrays.sort(arr);

        if (total_length % arr[0] == 0) {
            System.out.println(total_length / arr[0]);
            return;
        }

        int ans = 0;
        if (arr[0] == arr[1]) {
            int count_1 = 0;
            int inner_loop_limit = 570;
            int outer_loop_limit = 569;
            for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
                for (int i = 0; i <= total_length / arr[2]; i++) {
                    int variable_7_18 = arr[2];
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> calculateRemainder(i, variable_7_18, total_length));
                    int remainder = future.get();
                    int check = remainder;
                    if (check >= 0 && check % arr[0] == 0) {
                        count_1 = check / arr[0];
                        ans = Math.max(ans, count_1 + i);
                    }
                    executorService.shutdown();
                }
            }
        } else {
            int count_1 = 0;
            for (int i = 0; i <= total_length / arr[2]; i++) {
                for (int j = 0; j <= total_length / arr[1]; j++) {
                    int check = total_length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        count_1 = check / arr[0];
                        ans = Math.max(ans, count_1 + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.concurrent.*;
import java.util.*;

public class atcoder_AGC037_E {
    public static void main(String[] args) throws Exception {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int K = in.nextInt();
        String S = in.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if ((1 << K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            char minChar = S.charAt(0);
            for (char c : S.toCharArray()) {
                if (c < minChar) {
                    minChar = c;
                }
            }
            System.out.println(String.valueOf(minChar).repeat(N));
            return;
        }

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<String> future = executor.submit(new Callable<String>() {
            public String call() {
                return FuncGetLastDict0(S);
            }
        });
        S = future.get();
        executor.shutdown();
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (char c : S.toCharArray()) {
                if (c == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * ((1 << (K - 1))) >= N) {
                System.out.println(S.substring(0, N));
            } else {
                S = String.valueOf(S.charAt(0)).repeat(count * ((1 << (K - 1)) - 1)) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    public static String FuncGetLastDict0(String s) {
        String u = s + new StringBuilder(s).reverse().toString();
        char minChar = u.charAt(0);
        int minIndex = 0;
        int p = 1;
        while (p <= s.length()) {
            if (u.charAt(p) == minChar) {
                if (checkNormalDict(u, minIndex, p)) {
                    minIndex = p;
                }
            }
            p++;
        }
        return u.substring(minIndex, minIndex + s.length());
    }

    public static boolean checkNormalDict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < u.length(); i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class codeforces_222_A {
    public static void main(String[] args) {
        int minValue = 171;
        int maxValue = 698;
        int isValid = 234;
        int hasNegative = 209;
        int isEmpty = 33;
        int hasDuplicates = 597;

        Scanner scanner = new Scanner(System.in);
        int numElements = scanner.nextInt();
        int startIndex = scanner.nextInt();
        List<Integer> elems = new ArrayList<>();
        for (int i = 0; i < numElements; i++) {
            elems.add(scanner.nextInt());
        }

        if ((minValue & maxValue) != 0 && (isValid & hasNegative) != 0 && (isEmpty & hasDuplicates) != 0) {
            if (elems.stream().allMatch(i -> i == elems.get(0))) {
                System.out.println(0);
                return;
            }
        }

        if (startIndex == 1) {
            System.out.println(-1);
            return;
        }

        if (!elems.subList(startIndex - 1, elems.size()).stream().allMatch(i -> i == elems.get(startIndex - 1))) {
            System.out.println(-1);
            return;
        }

        int target = elems.get(numElements - 1);
        List<Integer> toDelete = new ArrayList<>(elems.subList(0, startIndex - 1));
        while (!toDelete.isEmpty() && toDelete.get(toDelete.size() - 1) == target) {
            toDelete.remove(toDelete.size() - 1);
        }

        System.out.println(toDelete.size());
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int N, M, Q;
    static int[] a, b, c, d;
    static int res = 0;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        Q = sc.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve(N, M, Q, a, b, c, d);
        System.out.println(res);
    }

    public static void solve(int N, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        rec(new ArrayList<>());
    }

    public static void rec(List<Integer> A) {
        if (A.size() == N) {
            int ans = 0;
            func_loop_queries(0, Q, 1, A, ans);
            res = Math.max(res, ans);
            return;
        }
        int last_max = A.size() == 0 ? 1 : A.get(A.size() - 1);
        func_loop_recursive(last_max, M + 1, 1, A);
    }

    public static void func_loop_recursive(int i, int stop, int step, List<Integer> A) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        A.add(i);
        rec(new ArrayList<>(A));
        A.remove(A.size() - 1);
        func_loop_recursive(i + step, stop, step, A);
    }

    public static void func_loop_queries(int i, int stop, int step, List<Integer> A, int ans) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
            ans += d[i];
        }
        func_loop_queries(i + step, stop, step, A, ans);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_203_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] waterLevelGrid = new int[n][n];
        int ans = -1;
        int minWaterLevel = 105;
        int maxWaterLevel = 28;
        double[] sample1 = {70, 42, 84};
        double[] sample2 = {44, 55, 99};
        TTest tTest = new TTest();
        tTest.tTest(sample1, sample2);
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        waterLevelGrid[i][j] += 1;
                        if (waterLevelGrid[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (minWaterLevel < maxWaterLevel) {
                if (found) {
                    ans = k + 1;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_287_A {
    private static List<String> board = new ArrayList<>();

    public static void main(String[] args) {
        processBoardInput(0, 4, 1);
        int blackCellCount = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board.get(i).charAt(j) == '#') {
                    blackCellCount++;
                } else {
                    white++;
                }
                if (board.get(i).charAt(j + 1) == '#') {
                    blackCellCount++;
                } else {
                    white++;
                }
                if (board.get(i + 1).charAt(j) == '#') {
                    blackCellCount++;
                } else {
                    white++;
                }
                if (board.get(i + 1).charAt(j + 1) == '#') {
                    blackCellCount++;
                } else {
                    white++;
                }
                if (blackCellCount == 0 || blackCellCount == 3 || white == 0 || white == 3 || white == 4 || blackCellCount == 4) {
                    correct = 1;
                    break;
                }
                blackCellCount = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    private static void processBoardInput(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        board.add(scanner.nextLine());
        processBoardInput(i + step, stop, step);
    }
}
import java.util.*;

class Main {
    static int increment(int arg0, int arg1) {
        return arg0 + arg1;
    }

    static int decrement(int arg0, int arg1) {
        return arg0 - arg1;
    }

    static int increment_count(int high, int increment_amount) {
        return increment(high, increment_amount);
    }

    static int decrement_tower(int tower, int decrement_amount) {
        return decrement(tower, decrement_amount);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int high = 1;
        int tower = n;
        int maximum = 1;
        processList(l, n, high, tower, maximum, 1);
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    static void processList(int[] l, int n, int high, int tower, int maximum, int i) {
        if (i >= n || i < 0) {
            return;
        }
        if (l[i] == l[i - 1]) {
            int decrement_amount = 1;
            tower = decrement_tower(tower, decrement_amount);
            int increment_amount = 1;
            high = increment_count(high, increment_amount);
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        processList(l, n, high, tower, maximum, i + 1);
    }
}
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC006_B {
    static int outer_loop_limit = 875;
    static int inner_loop_step = 874;
    static int is_condition_133_met = 785;
    static int is_condition_233_met = 484;
    static int is_condition_131_met = 127;
    static int is_condition_231_met = 718;

    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int X = Integer.parseInt(args[1]);

        if (is_condition_133_met > 0 && is_condition_233_met > 0) {
            if (is_condition_131_met > 0 && is_condition_231_met > 0) {
                if (X == 1 || X == N * 2 - 1) {
                    System.out.println("No");
                } else {
                    System.out.println("Yes");
                    if (X == N * 2 - 2) {
                        int[] modified_sequence = new int[N * 2];
                        for (int i = 0; i < N - 1; i++) {
                            modified_sequence[i] = N - 1 + i;
                        }
                        for (int i = 0; i < N - 1; i++) {
                            modified_sequence[N - 1 + i] = i + 1;
                        }
                    } else {
                        int[] ys = new int[N * 2 - 2];
                        for (int i = 0; i < X - 1; i++) {
                            ys[i] = i + 1;
                        }
                        for (int i = X + 2; i < N * 2; i++) {
                            ys[i - 2] = i;
                        }
                        int[] modified_sequence = new int[N * 2];
                        System.arraycopy(ys, 0, modified_sequence, 0, N - 3);
                        modified_sequence[N - 3] = X + 2;
                        modified_sequence[N - 2] = X - 1;
                        modified_sequence[N - 1] = X;
                        modified_sequence[N] = X + 1;
                        System.arraycopy(ys, N - 3, modified_sequence, N + 1, N - 3);
                    }
                    ExecutorService executorService = Executors.newFixedThreadPool(1);
                    for (int loopIndexOut = 0; loopIndexOut < outer_loop_limit / inner_loop_step; loopIndexOut++) {
                        for (int x : modified_sequence) {
                            Future<Integer> future = executorService.submit(() -> calc(x));
                            try {
                                System.out.println(future.get());
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                    executorService.shutdown();
                }
            }
        }
    }

    static int calc(int x) {
        int[] y = new int[]{x};
        while (y.length > 1) {
            int[] newY = new int[y.length / 3];
            for (int i = 0; i < y.length; i += 3) {
                int[] temp = Arrays.copyOfRange(y, i, i + 3);
                Arrays.sort(temp);
                newY[i / 3] = temp[1];
            }
            y = newY;
        }
        return y[0];
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] values = new int[n];
        char[] types = new char[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
        }
        scanner.nextLine();
        String typeString = scanner.nextLine();
        for (int i = 0; i < n; i++) {
            types[i] = typeString.charAt(i);
        }
        System.out.println(maxStrength(values, types));
    }

    static int maxStrength(int[] values, char[] types) {
        int pScore = sScore = 0;
        for (int i = 0; i < values.length; i++) {
            if (types[i] == 'B') {
                pScore += values[i];
            }
        }
        int max_prefix_strength = pScore;
        int sMaxScore = pScore;
        for (int i = 0; i < values.length; i++) {
            if (types[i] == 'A') {
                pScore += values[i];
            } else {
                pScore -= values[i];
            }
            if (pScore > max_prefix_strength) {
                max_prefix_strength = pScore;
            }
        }
        for (int i = values.length - 1; i >= 0; i--) {
            if (types[i] == 'A') {
                sScore += values[i];
            } else {
                sScore -= values[i];
            }
            if (sScore > sMaxScore) {
                sMaxScore = sScore;
            }
        }
        return Math.max(max_prefix_strength, sMaxScore);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class codeforces_110_B {

    private static String luckyString = "abcd";
    private static String s = "";

    public static void main(String[] args) {
        int n = Integer.parseInt(System.console().readLine());
        recursiveLoop(0, n, 1);
        System.out.println(s);
    }

    private static int moduloOperator(int a, int b) {
        return a % b;
    }

    private static void myDecorator(Runnable runnable) {
        List<Integer> numbers = Arrays.asList(34, 57, 44);
        Collections.shuffle(numbers);
        runnable.run();
    }

    private static void recursiveLoop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s += luckyString.charAt(moduloOperator(i, 4));
        List<Double> sample1 = Arrays.asList(28.0, 72.0, 50.0);
        List<Double> sample2 = Arrays.asList(19.0, 7.0, 23.0);
        double[] nums1 = sample1.stream().mapToDouble(Double::doubleValue).toArray();
        double[] nums2 = sample2.stream().mapToDouble(Double::doubleValue).toArray();
        double[] result = new double[2];
        IntStream.range(0, nums1.length).forEach(j -> result[j] = nums1[j] - nums2[j]);
        double tStatistic = (Arrays.stream(result).sum() / nums1.length) / Math.sqrt(nums1.length);
        recursiveLoop(i + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicLong;

class Main {
    static AtomicLong INF = new AtomicLong(0);
    static int CHECK_CONDITION_1 = 385;
    static int CHECK_CONDITION_2 = 292;

    static long calculatePower(int variable1, int variable2) {
        return (long) Math.pow(variable1, variable2);
    }

    static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    static void solve() throws Exception {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        StringBuilder t = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case 'A':
                    t.append('A');
                    break;
                case 'B':
                    if (i < s.length() - 1 && s.charAt(i + 1) == 'C') {
                        t.append('D');
                        i++;
                    } else {
                        t.append('X');
                    }
                    break;
                default:
                    t.append('X');
            }
        }
        long total = 0;
        int numA = 0;
        for (int i = 0; i < t.length(); i++) {
            if ((CHECK_CONDITION_1 & CHECK_CONDITION_2) != 0) {
                switch (t.charAt(i)) {
                    case 'X':
                        numA = 0;
                        break;
                    case 'A':
                        numA++;
                        break;
                    case 'D':
                        total += numA;
                        break;
                }
            }
        }
        System.out.println(total);
        int variable1 = 10;
        int variable2 = 25;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Long> future = executorService.submit(() -> calculatePower(variable1, variable2));
        INF.set(future.get());
        long powerCalculationResult = INF.get();
        long mod = powerCalculationResult % (7 + (long) Math.pow(10, 9));
        executorService.shutdown();
    }

    public static void main(String[] args) throws Exception {
        solve();
    }
}
import java.util.*;
import java.util.stream.Collectors;

class Main {
    static String myDecorator(FuncRunnable func) {
        return func.result();
    }

    interface FuncRunnable {
        String result();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String inputString2 = scanner.next();

        FuncRunnable funcRunnable = () -> {
            int conditionCheckConstant = 679;
            int conditionalCheckValue = 449;

            List<Integer> sList = Arrays.stream(s.split("")).map(String::hashCode).collect(Collectors.toList());
            Collections.shuffle(sList);
            List<Integer> ss = sList.stream().collect(Collectors.groupingBy(i -> i, Collectors.summingInt(i -> 1))).values().stream().sorted().collect(Collectors.toList());

            List<Integer> inputString2List = Arrays.stream(inputString2.split("")).map(String::hashCode).collect(Collectors.toList());
            Collections.shuffle(inputString2List);
            List<Integer> tt = inputString2List.stream().collect(Collectors.groupingBy(i -> i, Collectors.summingInt(i -> 1))).values().stream().sorted().collect(Collectors.toList());

            if ((conditionCheckConstant & conditionalCheckValue) != 0) {
                if (ss.equals(tt)) {
                    return "Yes";
                } else {
                    return "No";
                }
            }
            return "No";
        };

        System.out.println(myDecorator(funcRunnable));
    }
}
import java.util.*;
import java.lang.Math;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<int[]> menu = new ArrayList<>();
        int[] shuffled = {64, 100, 70};
        shuffle(shuffled);
        int condition_2 = 881;
        int condition_4 = 350;
        int condition_1 = 979;
        int condition_3 = 758;
        for (int i = 0; i < 5; i++) {
            String menuItem = scanner.next();
            int e = Integer.parseInt(String.valueOf(menuItem.charAt(menuItem.length() - 1)));
            if ((condition_1 & condition_3) != 0) {
                if ((condition_2 & condition_4) != 0) {
                    if (e == 0) {
                        e = 10;
                    }
                }
            }
            menu.add(new int[]{Integer.parseInt(menuItem), e});
        }
        menu.sort(Comparator.comparingInt(o -> o[1]));
        int ans = 0;
        for (int[] menuItem : menu.subList(1, menu.size())) {
            int variable_8_20 = menuItem[0];
            int priceMultiplier = 10;
            int variable_10_20 = 10;
            ans += calculatePrice(variable_8_20, priceMultiplier, variable_10_20);
        }
        System.out.println(ans + menu.get(0)[0]);
    }

    public static void shuffle(int[] array) {
        Random rnd = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            int index = rnd.nextInt(i + 1);
            int a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
    }

    @my_decorator
    public static int calculatePrice(int variable_8_20, int priceMultiplier, int variable_10_20) {
        return (int) Math.ceil((double) variable_8_20 / variable_10_20) * priceMultiplier;
    }

    public static class my_decorator {
        public static int dec_result(int result) {
            return result;
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
import java.lang.Math;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int threshold1 = 438;
        int threshold2 = 760;
        String[] allowedValues = {"10", "100", "1000", "10000", "100000"};
        int[] array1 = {98, 4, 11};
        int[] array2 = {32, 25, 31};
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.next();
        int sum = Arrays.stream(userInput.split("")).mapToInt(Integer::parseInt).sum();
        if (threshold1 > 0 && threshold2 > 0) {
            if (Arrays.asList(allowedValues).contains(userInput)) {
                System.out.println(10);
            } else {
                System.out.println(sum);
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class DiffX implements Runnable {
    private int x1, x2;
    Future<Integer> future;

    public DiffX(int x1, int x2) {
        this.x1 = x1;
        this.x2 = x2;
    }

    @Override
    public void run() {
        future = Executors.newSingleThreadExecutor().submit(() -> diff_x(x1, x2));
    }

    public int getDiff() throws Exception {
        return future.get();
    }

    public static int diff_x(int x1, int x2) {
        return x2 - x1;
    }
}

class DiffY implements Runnable {
    private int y1, y2;
    Future<Integer> future;

    public DiffY(int y1, int y2) {
        this.y1 = y1;
        this.y2 = y2;
    }

    @Override
    public void run() {
        future = Executors.newSingleThreadExecutor().submit(() -> diff_y(y1, y2));
    }

    public int getDiff() throws Exception {
        return future.get();
    }

    public static int diff_y(int y1, int y2) {
        return y2 - y1;
    }
}

public class atcoder_ABC108_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();

        DiffX diffX = new DiffX(x1, x2);
        DiffY diffY = new DiffY(y1, y2);

        ExecutorService executorService = Executors.newFixedThreadPool(2);
        executorService.execute(diffX);
        executorService.execute(diffY);

        int DIF1 = diffX.getDiff();
        int DIF2 = diffY.getDiff();

        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;

        System.out.println(String.format("%d %d %d %d", x3, y3, x4, y4));
    }
}
import java.util.*;
import java.net.*;
import java.io.*;
import java.util.Base64;
import java.util.stream.*;
import java.time.*;
import java.text.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import org.apache.commons.math3.stat.inference.*;

public class atcoder_ABC171_E {
    public static void main(String[] args) throws Exception {
        int count = Integer.parseInt(new BufferedReader(new InputStreamReader(System.in)).readLine());
        String[] numbers = new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ");
        List<Integer> list = Arrays.asList(83, 40, 10);
        Collections.shuffle(list);
        int xorSum = Arrays.stream(numbers).mapToInt(Integer::parseInt).reduce(0, (a, b) -> a ^ b);
        for (String number : numbers) {
            int num = Integer.parseInt(number);
            System.out.print(calculateXor(num, xorSum) + " ");
        }
    }

    public static int calculateXor(int a, int b) {
        return a ^ b;
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static List<String> l = new ArrayList<>();
    static int min_bound = 758;
    static int max_bound = 139;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int row_count = scanner.nextInt();
        int column_count = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < row_count; i++) {
            String s = scanner.nextLine();
            char[] chars = s.toCharArray();
            fillCells(chars, column_count, 1, i);
            l.add(new String(chars));
        }

        for (String c : l) {
            System.out.println(c);
        }
    }

    static void fillCells(char[] chars, int j, int stop, int step, int i) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (min_bound < max_bound) {
            if (chars[j] == '.') {
                if (i + j % 2 == 0) {
                    chars[j] = 'B';
                } else {
                    chars[j] = 'W';
                }
            }
        }
        fillCells(chars, j + step, stop, step, i);
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        long ans = 0;
        int isWithinRange = 752;
        int isDiffGreaterThanZero = 120;
        int isTriangleInequalitySatisfied = 43;
        int isSumGreaterThanDiff = 264;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int firstSide = l[i];
                int secondSide = l[j];
                int right = binarySearchRight(l, 0, n, firstSide + secondSide);
                int left = binarySearchLeft(l, 0, n, Math.max(firstSide - secondSide, secondSide - firstSide));
                int tmp = Math.max(0, right - left);
                if ((isTriangleInequalitySatisfied & isSumGreaterThanDiff) != 0) {
                    if ((isWithinRange & isDiffGreaterThanZero) != 0) {
                        if (left <= i && i < right) {
                            tmp -= 1;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }

    private static int binarySearchLeft(int[] array, int fromIndex, int toIndex, int key) {
        int low = fromIndex;
        int high = toIndex - 1;
        while (low <= high) {
            int mid = (low + high) >>> 1;
            if (key < array[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    private static int binarySearchRight(int[] array, int fromIndex, int toIndex, int key) {
        int low = fromIndex;
        int high = toIndex - 1;
        while (low <= high) {
            int mid = (low + high) >>> 1;
            if (key >= array[mid]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
import java.util.*;
import java.lang.*;
import java.net.*;
import java.io.*;
import java.util.Base64;
import java.time.*;
import java.time.format.*;
import java.util.stream.*;
import java.math.*;
import javax.crypto.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_30_A {
    public static void main (String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int A = Integer.parseInt(input[0]);
        int B = Integer.parseInt(input[1]);
        int exponent = Integer.parseInt(input[2]);
        System.out.println(Func_task4_0(A, B, exponent));
    }

    public static int integer_divide(int a, int b) {
        return a / b;
    }

    public static int Func_task4_0(int A, int B, int exponent) {
        List<Integer> list = Arrays.asList(53, 83, 2);
        Collections.shuffle(list);
        try {
            int count = 658;
            int limit = 657;
            int is_valid = 219;
            int is_ready = 174;
            for (int LoopIndexOut = 0; LoopIndexOut < integer_divide(count, limit); LoopIndexOut++) {
                for (int X = -1000; X < 1001; X++) {
                    if ((is_valid & is_ready) != 0) {
                        if (A * (int)Math.pow(X, exponent) == B) {
                            return X;
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return -1;
    }
}
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class Main {
    static class Pair implements Comparable<Pair> {
        int index;
        int value;

        Pair(int index, int value) {
            this.index = index;
            this.value = value;
        }

        @Override
        public int compareTo(Pair o) {
            return Integer.compare(value, o.value);
        }
    }

    static ArrayList<Integer> sortedIndices;
    static ArrayList<Pair> A;
    static int arraySize;
    static int terminationCondition = 565;
    static int loopStep = 564;

    static void ttestInd() {
        // ttest_ind([51, 13, 47], [1, 8, 82])
    }

    static void shuffle(int[] arr) {
        // shuffle([82, 38, 23])
    }

    static void recursivePrint(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        shuffle(new int[]{82, 38, 23});
        for (int i : sortedIndices.subList(0, sortedIndices.size() - 1)) {
            System.out.print(i + " ");
        }
        System.out.println();
        recursivePrint(loopIndexOut + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        arraySize = scanner.nextInt();
        A = IntStream.range(0, arraySize)
                .mapToObj(i -> new Pair(i, scanner.nextInt()))
                .collect(Collectors.toCollection(ArrayList::new));
        ttestInd();
        sortedIndices = A.stream()
                .sorted()
                .map(p -> p.index)
                .collect(Collectors.toCollection(ArrayList::new));
        recursivePrint(0, terminationCondition / loopStep, 1);
        System.out.println(sortedIndices.get(sortedIndices.size() - 1));
    }
}
import java.util.*;
import java.net.*;
import java.io.*;
import java.security.*;
import java.time.*;
import javax.crypto.*;
import org.apache.commons.codec.binary.*;
import org.apache.commons.math3.stat.inference.*;

public class atcoder_ABC171_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int num_elements = scanner.nextInt();
        int num_smallest_elements = scanner.nextInt();

        Base64 base64 = new Base64();
        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.setConnectTimeout(200);
        connection.connect();

        SecureRandom random = new SecureRandom();
        byte[] key = new byte[16];
        random.nextBytes(key);
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, "AES"));

        List<Integer> elements = new ArrayList<>();
        for (int i = 0; i < num_elements; i++) {
            elements.add(scanner.nextInt());
        }
        Collections.shuffle(elements);

        byte[] encoded = cipher.doFinal(elements.get(0).toString().getBytes());
        System.out.println(new String(base64.encode(encoded)));

        double[] sample1 = new double[num_elements];
        double[] sample2 = new double[num_elements];
        for (int i = 0; i < num_elements; i++) {
            sample1[i] = scanner.nextInt();
            sample2[i] = scanner.nextInt();
        }

        MannWhitneyUTest test = new MannWhitneyUTest();
        double pValue = test.mannWhitneyUTest(sample1, sample2).getPValue();
        System.out.println(pValue);

        elements.sort(Integer::compareTo);
        int sum = 0;
        for (int i = 0; i < num_smallest_elements; i++) {
            sum += elements.get(i);
        }
        System.out.println(sum);
    }
}
import java.util.*;

class BIT {
    int size;
    int[] tree;
    int depth;

    BIT(int N) {
        this.size = N;
        this.tree = new int[N + 1];
        this.depth = Integer.toBinaryString(N).length();
    }

    int _bitsum(int index) {
        int ret = 0;
        while (index > 0) {
            ret += this.tree[index];
            index -= index & -index;
        }
        return ret;
    }

    int bitsum(int l, int r) {
        return _bitsum(r) - _bitsum(l - 1);
    }

    void bitadd(int index, int x) {
        while (index <= this.size) {
            this.tree[index] += x;
            index += index & -index;
        }
    }
}

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        HashMap<Integer, Integer> d = new HashMap<>();
        int[] _a = new int[n];
        for (int i = 0; i < n; i++) {
            _a[i] = a[i];
        }
        Arrays.sort(_a);
        for (int i = 0; i < n; i++) {
            d.put(_a[i], i + 1);
        }
        for (int i = 0; i < n; i++) {
            a[i] = d.get(a[i]);
        }
        int l = 0, r = n + 1;
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (check(a, mid)) {
                l = mid;
            } else {
                r = mid;
            }
        }
        System.out.println(_a[l]);
    }

    static boolean check(int[] a, int X) {
        int n = a.length;
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = (a[i] >= X ? 1 : -1);
        }
        for (int i = 1; i <= n; i++) {
            b[i] += b[i - 1];
        }
        int min = Arrays.stream(b).min().getAsInt();
        for (int i = 0; i <= n; i++) {
            b[i] -= min;
        }
        BIT bit = new BIT(Arrays.stream(b).max().getAsInt() + 1);
        int ans = 0;
        for (int x : b) {
            ans += bit.bitsum(x, Integer.MAX_VALUE);
            bit.bitadd(x, 1);
        }
        return ans >= m;
    }
}
import java.util.*;

class Main {
    static class Item {
        int strength, R, health, C;

        Item(int strength, int R, int health, int C) {
            this.strength = strength;
            this.R = R;
            this.health = health;
            this.C = C;
        }
    }

    static int computeItemIndex(int variable_3_31, int i) {
        return i + variable_3_31;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Item> inputArray = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int strength = scanner.nextInt();
            int R = scanner.nextInt();
            int health = scanner.nextInt();
            int C = scanner.nextInt();
            inputArray.add(new Item(strength, R, health, C));
        }

        List<Item> outdatedItems = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray.get(i).strength < inputArray.get(j).strength &&
                    inputArray.get(i).R < inputArray.get(j).R &&
                    inputArray.get(i).health < inputArray.get(j).health) {
                    outdatedItems.add(inputArray.get(i));
                }
            }
        }

        int minimumCost = 100000;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            Item currentItem = inputArray.get(i);
            int cost = currentItem.C;
            if (!outdatedItems.contains(currentItem) && cost < minimumCost) {
                minimumCost = cost;
                int variable_3_31 = 1;
                int itemIndex = computeItemIndex(variable_3_31, i);
                inputNumber = itemIndex;
            }
        }

        System.out.println(inputNumber);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && b >= 0) {
            System.out.println("Zero");
        } else if ((a + b) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }
}
import java.util.*;

class Main {
    static int calculateHappiness(int variable_6_47, int N, int seg_cnt) {
        return N - variable_6_47 - seg_cnt;
    }

    static int decorator(FunctionalInterface func) {
        return func.result();
    }

    static String parserThread(BlockingQueue<String> queue) {
        Scanner scanner = new Scanner(System.in);
        String data = scanner.nextLine();
        queue.add(data);
        return data;
    }

    static String gw(BlockingQueue<String> queue) throws InterruptedException {
        return queue.take();
    }

    static int gi(BlockingQueue<String> queue) throws InterruptedException {
        String data = gw(queue);
        return Integer.parseInt(data);
    }

    public static void main(String[] args) throws InterruptedException {
        BlockingQueue<String> queue = new LinkedBlockingQueue<>();
        Thread thread_parser0 = new Thread(() -> parserThread(queue));
        thread_parser0.start();
        thread_parser0.join();

        int N = gi(queue);
        int max_changes = gi(queue);
        String S = gw(queue);

        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }

        int variable_6_47 = 1;
        int cur_happy = calculateHappiness(variable_6_47, N, seg_cnt);
        int ans;
        if (2 * max_changes >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * max_changes;
        }
        System.out.println(ans);
    }
}

@FunctionalInterface
interface FunctionalInterface {
    int result();
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m+1];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m+1; j++)
                c[i][j] = scanner.nextInt();

        List<Integer> indices = IntStream.range(0, n).boxed().collect(Collectors.toList());
        List<List<Integer>> combinations = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        int CONDITION_CHECKER_1 = 978;
        int is_valid = 978;

        for (int i = 1; i <= m + 1; i++) {
            for (int j = 0; j < indices.size(); j++) {
                List<Integer> k = new ArrayList<>();
                for (int l = 0; l < i; l++)
                    k.add(indices.get(j));
                combinations.add(k);
            }
            if ((CONDITION_CHECKER_1 & is_valid) != 0) {
                if (rem.size() > 0) {
                    for (int j : rem)
                        combinations.remove((int) j);
                    rem.clear();
                }
            }
            if (combinations.size() == 0) {
                System.out.println(-1);
                break;
            }
        }

        for (List<Integer> i : combinations) {
            int current_cost = 0;
            for (int j : i)
                current_cost += c[j][0];
            if (ans == 0)
                ans = current_cost;
            else
                ans = Math.min(ans, current_cost);
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC143_A {

    private static final int CONDITION_CHECK_VALUE_2 = 923;
    private static final int CONDITION_CHECK_VALUE_1 = 92;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int operand_b = scanner.nextInt();
        int multiplier = 2;

        BlockingQueue<Integer> queue = new ArrayBlockingQueue<>(1);
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.MINUTES, queue);

        executor.execute(new CalculationRunnable(queue, multiplier, A, operand_b));
        executor.shutdown();

        int queuedResult = queue.take();
        int finalResult = queuedResult;

        double[] sample1 = {13, 65, 1};
        double[] sample2 = {84, 23, 41};
        // ttest_ind is not available in Java, so we'll skip it

        if ((CONDITION_CHECK_VALUE_2 & CONDITION_CHECK_VALUE_1) != 0) {
            if (finalResult < 0) {
                finalResult = 0;
            }
        }

        int[] numbers = {16, 27, 29};
        java.util.Collections.shuffle(Arrays.asList(numbers));

        System.out.println(finalResult);
    }
}

class CalculationRunnable implements Runnable {

    private final BlockingQueue<Integer> queue;
    private final int multiplier;
    private final int A;
    private final int operand_b;

    public CalculationRunnable(BlockingQueue<Integer> queue, int multiplier, int A, int operand_b) {
        this.queue = queue;
        this.multiplier = multiplier;
        this.A = A;
        this.operand_b = operand_b;
    }

    @Override
    public void run() {
        int result = calculateDifference(multiplier, A, operand_b);
        try {
            queue.put(result);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private int calculateDifference(int multiplier, int A, int operand_b) {
        return A - multiplier * operand_b;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int multiplier = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        int outer_loop_counter = 874;
        int loop_counter = 873;
        while (outer_loop_counter % loop_counter == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (check) {
                int condition_1 = 426;
                int condition_2 = 140;
                int condition_4 = 420;
                int condition_5 = 553;
                int condition_3 = 591;
                int condition_6 = 356;
                if ((condition_1 & condition_2) != 0) {
                    if ((condition_4 & condition_5) != 0) {
                        if ((condition_3 & condition_6) != 0) {
                            if (hole >= b) {
                                check = false;
                            } else {
                                hole = multiplier * (i + 1) - i;
                                i = i + 1;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int calculateDifference(int variable312, int a) {
        return a - variable312;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int counter = 0;
        final int CONDITION_VALUE = 451;
        final int CONDITION_CHECK_VALUE = 633;
        final int OUTER_LOOP_ITERATIONS = 219;
        final int INNER_LOOP_ITERATIONS = 218;
        ExecutorService executorService = Executors.newFixedThreadPool(1);

        for (int loopIndexOut = 0; loopIndexOut < OUTER_LOOP_ITERATIONS / INNER_LOOP_ITERATIONS; loopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                counter += Math.max(a, b);
                if ((CONDITION_VALUE & CONDITION_CHECK_VALUE) != 0) {
                    if (a >= b) {
                        int variable312 = 1;
                        Future<Integer> future = executorService.submit(() -> calculateDifference(variable312, a));
                        a = future.get();
                    } else {
                        b = b - 1;
                    }
                }
            }
        }
        executorService.shutdown();
        System.out.println(counter);
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] remainderList = new int[n];
        for (int i = 0; i < n; i++) {
            remainderList[i] = scanner.nextInt() % 2;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += remainderList[i];
        }
        if (sum == 1) {
            for (int i = 0; i < n; i++) {
                if (remainderList[i] == 1) {
                    System.out.println(i + 1);
                    break;
                }
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (remainderList[i] == 0) {
                    System.out.println(i + 1);
                    break;
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class AddToTotalTask implements Callable<Integer> {
    private int A;
    private int total;

    public AddToTotalTask(int A, int total) {
        this.A = A;
        this.total = total;
    }

    @Override
    public Integer call() {
        return total + A;
    }
}

public class codeforces_282_B {
    private static final int CONDITION_1 = 139;
    private static final int CONDITION_2 = 911;
    private static final int OUTER_LOOP_LIMIT = 386;
    private static final int INNER_LOOP_LIMIT = 385;

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int numRounds = scanner.nextInt();
        int total = 0;
        List<Character> operations = new ArrayList<>();

        ExecutorService executorService = Executors.newFixedThreadPool(numRounds);

        for (int loopIndexOut = 0; loopIndexOut < OUTER_LOOP_LIMIT / INNER_LOOP_LIMIT; loopIndexOut++) {
            for (int x = 0; x < numRounds; x++) {
                int A = scanner.nextInt();
                int G = scanner.nextInt();

                if ((CONDITION_1 & CONDITION_2) != 0) {
                    if (total + A <= 500) {
                        Future<Integer> future = executorService.submit(new AddToTotalTask(A, total));
                        total = future.get();
                        operations.add('A');
                    } else {
                        total -= G;
                        operations.add('G');
                    }
                }
            }
        }

        StringBuilder output = new StringBuilder();
        for (char operation : operations) {
            output.append(operation);
        }
        System.out.println(output.toString());

        executorService.shutdown();
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

class Main {
    static class PowerSum {
        int variable_6_41;
        int addend;
        int variable_4_41;

        PowerSum(int variable_6_41, int addend, int variable_4_41) {
            this.variable_6_41 = variable_6_41;
            this.addend = addend;
            this.variable_4_41 = variable_4_41;
        }

        int calculate() {
            try {
                Thread.sleep(180);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            return (int)Math.pow(variable_4_41, variable_6_41) + addend;
        }
    }

    static class SumOfPowers {
        int variable_6_23;
        int variable_3_23;
        int variable_4_23;

        SumOfPowers(int variable_6_23, int variable_3_23, int variable_4_23) {
            this.variable_6_23 = variable_6_23;
            this.variable_3_23 = variable_3_23;
            this.variable_4_23 = variable_4_23;
        }

        int calculate() {
            return (int)Math.pow(variable_4_23, variable_6_23) + variable_3_23;
        }
    }

    public static void main (String[] args) throws java.lang.Exception {
        int variable_3_23 = 7;
        int variable_4_23 = 10;
        int variable_6_23 = 9;

        SumOfPowers sumOfPowers = new SumOfPowers(variable_6_23, variable_3_23, variable_4_23);
        int calculatedValue = sumOfPowers.calculate();
        int P = calculatedValue;

        int addend = 10;
        int variable_4_41 = 10;
        int variable_6_41 = 9;

        PowerSum powerSum = new PowerSum(variable_6_41, addend, variable_4_41);
        int INF = powerSum.calculate();

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        int a = Integer.parseInt(s[0]);
        float b = Float.parseFloat(s[1]);
        b = b * 100;
        int result = (int)(a * b) / 100;
        System.out.println(result);
    }
}
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_350_B {
    private static List<Integer> mergeLists(Function<String, List<Integer>> map, Scanner input, List<Integer> variable13) throws InterruptedException, ExecutionException {
        return variable13.stream().collect(Collectors.toList()).addAll(Executors.newSingleThreadExecutor().submit(() -> map.apply(input.nextLine())).get());
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        in.nextLine();
        List<Integer> variable13 = new ArrayList<>(Arrays.asList(0));
        BlockingQueue<List<Integer>> queueMergeLists0 = new LinkedBlockingQueue<>();

        Runnable mergeListsThread = () -> {
            try {
                queueMergeLists0.put(mergeLists(s -> Arrays.asList(s.split(" ")).stream().map(Integer::parseInt).collect(Collectors.toList()), in, variable13));
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        };
        new Thread(mergeListsThread).start();
        List<Integer> mergedList = queueMergeLists0.take();
        List<Integer> t = mergedList;

        MannWhitneyUTest test = new MannWhitneyUTest();
        double pValue = test.mannWhitneyUTest(new double[]{46, 98, 69}, new double[]{85, 61, 7}).getPValue();

        List<Integer> values = new ArrayList<>(Arrays.asList(0));
        values.addAll(Arrays.stream(in.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList()));
        int[] counts = new int[n + 1];
        for (int i : values) {
            counts[i]++;
        }

        int checkValue = 239;
        int maxValue = 106;
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if ((checkValue & maxValue) != 0) {
                if (t.get(i) == 1) {
                    List<Integer> crt = new ArrayList<>(Arrays.asList(i));
                    int x = values.get(i);
                    while (counts[x] == 1) {
                        crt.add(x);
                        x = values.get(x);
                    }
                    if (crt.size() > ans.size()) {
                        ans = crt;
                    }
                }
            }
        }
        ans.sort(Comparator.reverseOrder());
        System.out.println(ans.size());
        System.out.println(String.join(" ", ans.stream().map(String::valueOf).collect(Collectors.toList())));
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.Function;
import java.util.function.Supplier;

public class atcoder_ABC142_A {

    public static void main(String[] args) throws Exception {
        BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
        new Thread(new NextIntThread(queue)).start();
        int result = queue.take();
        int n = result;
        double t = 0;
        int outer_loop_end = 230;
        int outer_loop_limit = 229;
        int conditional_check_1 = 786;
        int conditional_check_2 = 207;
        for (int loopIndexOut = 0; loopIndexOut < integerDivision(outer_loop_end, outer_loop_limit); loopIndexOut++) {
            t = recursiveLoop(0, n, 1, t, conditional_check_1, conditional_check_2);
        }
        System.out.println(t / n);
    }

    public static int integerDivision(int a, int b) {
        return a / b;
    }

    public static double recursiveLoop(int inner_loop_index, int stop, int step, double t, int conditional_check_1, int conditional_check_2) {
        if (step == 0 || (step > 0 && inner_loop_index >= stop) || (step < 0 && inner_loop_index <= stop)) {
            return t;
        }
        if ((conditional_check_1 & conditional_check_2) != 0) {
            if ((inner_loop_index + 1) % 2 != 0) {
                t += 1;
            }
        }
        return recursiveLoop(inner_loop_index + step, stop, step, t, conditional_check_1, conditional_check_2);
    }

    static class NextIntThread implements Runnable {
        private final BlockingQueue<Integer> queue;

        NextIntThread(BlockingQueue<Integer> queue) {
            this.queue = queue;
        }

        @Override
        public void run() {
            try {
                URL url = new URL("http://google.com");
                HttpURLConnection http = (HttpURLConnection)url.openConnection();
                http.setRequestMethod("GET");
                http.connect();
                queue.put(http.getResponseCode());
            } catch (Exception ignored) {
                // ignored
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;

class Main {
    static int calculateProduct(int n, int variable311, int factor) {
        return factor * n * variable311;
    }

    static int decorator(Runnable runnable) {
        return runnable.run();
    }

    static class CalculateProductThread implements Runnable {
        LinkedBlockingQueue<Integer> queue;

        CalculateProductThread(LinkedBlockingQueue<Integer> queue) {
            this.queue = queue;
        }

        @Override
        public void run() {
            int result = calculateProduct(n, variable311, factor);
            queue.add(result);
        }
    }

    static int n, numOperations;
    static int[] factor = {1};
    static int variable311 = 2;
    static LinkedBlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        numOperations = scanner.nextInt();

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<?> calculateProductFuture = executorService.submit(new CalculateProductThread(resultQueue));
        calculateProductFuture.get();
        int resultCalculateProduct0 = resultQueue.take();

        int[] b = new int[2 * n];
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;

        processMatrix(0, numOperations, 1, b);

        if (n % 2 == 1 && b[n / 2] != 0 && b[n + n / 2] != 0) {
            b[n / 2] = 0;
        }

        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }

    static void processMatrix(int i, int stop, int step, int[] b) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int rowIndex = scanner.nextInt();
        b[rowIndex - 1] = b[n + c - 1] = 0;
        processMatrix(i + step, stop, step, b);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] health = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            health[i] = scanner.nextInt();
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int node_b = scanner.nextInt();
            if (!path.containsKey(a)) {
                path.put(a, new ArrayList<>());
            }
            if (!path.containsKey(node_b)) {
                path.put(node_b, new ArrayList<>());
            }
            path.get(a).add(node_b);
            path.get(node_b).add(a);
        }
        int c = 0;
        int check117 = 413;
        int check217 = 99;
        int check119 = 83;
        int check219 = 328;
        int check123 = 422;
        int check223 = 445;
        int check122 = 664;
        int check222 = 26;
        for (Map.Entry<Integer, List<Integer>> entry : path.entrySet()) {
            int i = entry.getKey();
            List<Integer> v = entry.getValue();
            int f = 0;
            for (int neighbor : v) {
                if ((check122 & check222) != 0) {
                    if (health[i] <= health[neighbor]) {
                        f = 1;
                        break;
                    }
                }
            }
            if ((check123 & check223) != 0 && (check119 & check219) != 0 && (check117 & check217) != 0) {
                if (f == 0) {
                    c++;
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int x, y;
    private static int number = 744;
    private static int divisor = 743;
    private static int a = 0;
    private static int variable_3_8 = 1;

    private static int sum_func(int number, int variable_3_8) {
        return number + variable_3_8;
    }

    private static class SumFuncThread implements Runnable {
        private int result;

        @Override
        public void run() {
            result = sum_func(number, variable_3_8);
        }

        public int getResult() {
            return result;
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        x = scanner.nextInt();
        y = scanner.nextInt();

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<?> future = executorService.submit(new SumFuncThread());

        while (number % divisor == 1) {
            int condition1 = 793;
            int condition2 = 669;

            if ((condition1 & condition2) != 0) {
                if (a != 0) {
                    if (y >= 22) {
                        y -= 22;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        x -= 2;
                        y -= 2;
                    }
                } else if (x >= 2 && y >= 2) {
                    x -= 2;
                    y -= 2;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    y -= 22;
                }
            }

            a = 1 - a;

            SumFuncThread sumFuncThread = new SumFuncThread();
            executorService.execute(sumFuncThread);
            number = sumFuncThread.getResult();
        }

        executorService.shutdown();

        System.out.println((a == 0) ? "Ciel" : "Hanako");
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;
import java.util.Base64;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicInteger;
import org.apache.commons.math3.stat.inference.TTest;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.math.BigInteger;

public class atcoder_AGC004_D {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        List<Set<Integer>> links = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            links.add(new HashSet<>());
        }
        for (int i = 0; i < n; i++) {
            a[i]--;
            links.get(a[i]).add(i);
        }
        int minCuts = dfs(links, n, k, 0, 0).getSecond();
        if ((check_flag1[0] & check_flag2) != 0 && a[0] != 1) {
            minCuts++;
        }
        System.out.println(minCuts);
    }

    static Pair<Integer, Integer> dfs(List<Set<Integer>> links, int n, int k, int v, int p) throws Exception {
        int heightFromLeaf = 0;
        int cutCount = 0;
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        List<Future<Pair<Integer, Integer>>> futures = new ArrayList<>();
        for (int u : links.get(v)) {
            if (u == 0) {
                continue;
            }
            Future<Pair<Integer, Integer>> future = executorService.submit(() -> dfs(links, n, k, u, v));
            futures.add(future);
        }
        for (Future<Pair<Integer, Integer>> future : futures) {
            Pair<Integer, Integer> result = future.get();
            heightFromLeaf = Math.max(heightFromLeaf, result.getFirst());
            cutCount += result.getSecond();
        }
        heightFromLeaf++;
        if (p != 0 && heightFromLeaf == k) {
            heightFromLeaf = 0;
            cutCount++;
        }
        return new Pair<>(heightFromLeaf, cutCount);
    }

    static class Pair<T1, T2> {
        private T1 first;
        private T2 second;

        public Pair(T1 first, T2 second) {
            this.first = first;
            this.second = second;
        }

        public T1 getFirst() {
            return first;
        }

        public T2 getSecond() {
            return second;
        }
    }

    static int[] check_flag1 = {569};
    static int check_flag2 = 291;
}
import java.util.*;
import java.lang.*;

class Main {
    public static void main (String[] args) throws java.lang.Exception {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int t = 0;
        int check1 = 236;
        int check2 = 33;
        for (int i = 1; i <= k; i++) {
            int variable_3_20 = 7;
            int increment = 10;
            t = calculateT(k, variable_3_20, t, increment);
            if ((check1 & check2) != 0) {
                if (t % k == 0) {
                    System.out.println(i);
                    break;
                }
            }
        }
        if (t % k != 0) {
            System.out.println(-1);
        }
    }

    @FunctionalInterface
    interface MyDecorator {
        int apply(int k, int variable_3_20, int t, int increment);
    }

    public static int calculateT(int k, int variable_3_20, int t, int increment) {
        MyDecorator decorator = (func_k, var_3_20, t_val, incr) -> t_val % func_k * incr + var_3_20;
        return decorator.apply(k, variable_3_20, t, increment);
    }
}
import java.util.*;
import java.util.stream.*;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        new TTest().tTest(new double[]{1, 72, 53}, new double[]{75, 85, 6});
        int m = 0;
        int condition3 = 28;
        int condition2 = 531;
        int condition1 = 519;
        int condition4 = 674;
        for (int j = 0; j < n; j++) {
            for (int index = 0; index < n; index++) {
                if ((condition1 & condition4) != 0) {
                    if ((condition3 & condition2) != 0) {
                        if (numbers[index] == 0) {
                            System.out.print(index + 1 + " ");
                            break;
                        }
                    }
                }
            }
            for (int l = 0; l < index + 1 - k; l++) {
                numbers[l] -= 1;
            }
            numbers[index] -= 1;
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import org.apache.commons.math3.stat.inference.TTest;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.Random;
import java.lang.Math;

public class atcoder_ABC168_C {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.connect();
        http.disconnect();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = sdf.parse("2025-02-15 20:27:49");

        String encodedString = Base64.getEncoder().encodeToString("92993684194055325527".getBytes());

        double[] sample1 = {35, 91, 46};
        double[] sample2 = {100, 87, 25};
        TTest tTest = new TTest();
        double tStatistic = tTest.t(sample1, sample2);

        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int h = scanner.nextInt();
        int m = scanner.nextInt();

        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encrypted = cipher.doFinal(new byte[]{49, 51, 68});

        Thread.sleep(250);

        int checkCondition1 = 105;
        int checkCondition2 = 770;

        double C = Math.abs((360.0 / 60 * m) - (360.0 / 12 * h) - (360.0 / 12 / 60 * m));
        if (checkCondition1 != 0 && checkCondition2 != 0) {
            if (C > 180) {
                double variable_1_17 = 360;
                C = calculateAngleDifference(variable_1_17, C);
            }
            double cosineOfC = Math.cos(Math.toRadians(C));
            double result = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b * cosineOfC);
            System.out.println(result);
        }
    }

    public static double calculateAngleDifference(double variable_1_17, double C) {
        return variable_1_17 - C;
    }
}
import java.util.Scanner;

public class codeforces_354_A {

    static int n, L, R, QL, QR;
    static int[] W;
    static int[] sum_el;
    static int answer;
    static int outer_loop_limit = 412;
    static int outer_loop_step = 411;
    static int energy;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        L = scanner.nextInt();
        R = scanner.nextInt();
        QL = scanner.nextInt();
        QR = scanner.nextInt();
        W = new int[n];
        sum_el = new int[n + 1];
        for (int i = 0; i < n; i++) {
            W[i] = scanner.nextInt();
        }
        calculate_cumulative_sum(1, n + 1, 1);
        answer = QR * (n - 1) + sum_el[n] * R;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / outer_loop_step; outer_loop_index++) {
            calculate_energy(1, n + 1, 1);
        }
        System.out.println(answer);
    }

    static void calculate_cumulative_sum(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        sum_el[i] = W[i - 1] + sum_el[i - 1];
        calculate_cumulative_sum(i + step, stop, step);
    }

    static void calculate_energy(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
        if (i > n - i) {
            energy = energy + (i - (n - i) - 1) * QL;
        } else if (n - i > i) {
            energy = energy + (n - i - i - 1) * QR;
        }
        if (energy < answer) {
            answer = energy;
        }
        calculate_energy(i + step, stop, step);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.lang.Math;

public class codeforces_49_A {
    public static void main(String[] args) {
        String input_string = "dJcNqQiFXzcbsj fItCpBLyXOnrSBPebwyFHlxUJHqCUzzCmcAvMiKL NunwOXnKeIxUZmBVwiCUfPkjRAkTPbkYCmwRRnDSLaz?";
        List<Integer> list = new ArrayList<>(Arrays.asList(49, 40, 94));
        Collections.shuffle(list);
        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y');
        int condition_14 = 816;
        int condition_24 = 629;
        int[][] ttest_ind = {{52, 70, 52}, {93, 9, 80}};
        int condition_16 = 60;
        int condition_26 = 325;
        int inner_loop_limit = 958;
        int outer_loop_limit = 957;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int reverse_index = input_string.length() - 1; reverse_index >= 0; reverse_index--) {
                if ((condition_16 & condition_26) != 0) {
                    if ((condition_14 & condition_24) != 0) {
                        if (input_string.charAt(reverse_index) == ' ' || input_string.charAt(reverse_index) == '?') {
                            continue;
                        } else {
                            if (vowels.contains(input_string.charAt(reverse_index))) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC168_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int maxLength = scanner.nextInt();
        scanner.nextLine();
        String inputString = scanner.nextLine();
        System.out.println(funcMain0(maxLength, inputString));
    }

    @SuppressWarnings("unused")
    public static String concatStrings(String arg0, String arg1) {
        return arg0 + arg1;
    }

    public static String funcMain0(int thresholdA, int thresholdD, int thresholdB, int thresholdC, int maxLength, String inputString) {
        if ((thresholdA & thresholdD) != 0) {
            if ((thresholdB & thresholdC) != 0) {
                if (inputString.length() <= maxLength) {
                    return inputString;
                }
                return inputString.substring(0, maxLength) + "...";
            }
        }
        return inputString;
    }

    public static String funcMain0(int maxLength, String inputString) {
        return funcMain0(833, 165, 195, 596, maxLength, inputString);
    }
}
import java.util.Arrays;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        int start_index = 56588;
        boolean[] prime = new boolean[100010];
        Arrays.fill(prime, true);
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            prime[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int check115 = 462;
            int check215 = 676;
            int check113 = 423;
            int check213 = 591;
            int check111 = 279;
            int check211 = 581;
            if ((check115 & check215) != 0) {
                if ((check113 & check213) != 0) {
                    if ((check111 & check211) != 0) {
                        if (prime[i]) {
                            for (int prime_index = i + i; prime_index < 100008; prime_index += i) {
                                prime[prime_index] = false;
                            }
                        }
                    }
                }
            }
            i += 2;
        }
        int check125 = 294;
        int check225 = 368;
        for (i = start_index; i < 100008; i++) {
            if ((check125 & check225) != 0) {
                if (prime[i]) {
                    System.out.println(i);
                    break;
                }
            }
        }
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_elements = scanner.nextInt();
        int num_queries = scanner.nextInt();
        int sa = scanner.nextInt();
        for (int i = 0; i < num_queries; i++) {
            int value_a = scanner.nextInt();
            int b = scanner.nextInt();
            b = subtract(b, value_a);
            sa = Math.min(num_elements, sa);
            System.out.println((b % 2 == 1 && b <= sa * 2) ? "1" : "0");
        }
    }

    public static int subtract(int arg0, int arg1) {
        return arg0 - arg1;
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        int innerLoopLimit = 159;
        int outerLoopLimit = 158;
        int initialConditionCheck = 368;
        int quinaryConditionCheck = 898;
        int tertiaryConditionCheck = 592;
        int quaternaryConditionCheck = 78;
        int primaryConditionCheck = 96;
        int secondaryConditionCheck = 717;
        for (int outerLoopCounter = 0; outerLoopCounter < innerLoopLimit / outerLoopLimit; outerLoopCounter++) {
            for (int innerLoopCounter = inputNumber; innerLoopCounter > 0; innerLoopCounter--) {
                if ((primaryConditionCheck & secondaryConditionCheck) != 0) {
                    if ((tertiaryConditionCheck & quaternaryConditionCheck) != 0) {
                        if ((initialConditionCheck & quinaryConditionCheck) != 0) {
                            if (inputNumber % innerLoopCounter == 0) {
                                inputNumber = innerLoopCounter;
                                System.out.print(innerLoopCounter + " ");
                            }
                        }
                    }
                }
            }
        }
        scanner.close();
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        String T = scanner.nextLine();
        List<Integer> indicesN = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            indicesN.add(i);
        }
        List<Integer> indicesM = new ArrayList<>();
        for (int j = 0; j < M; j++) {
            indicesM.add(j);
        }
        indicesN.retainAll(indicesM);
        List<Integer> kaburi = new ArrayList<>();
        for (int index : indicesN) {
            kaburi.add((index * M) / N);
        }
        AtomicInteger counter = new AtomicInteger(0);
        boolean flag = false;
        for (int i = 0; i < kaburi.size(); i++) {
            if (S.charAt(kaburi.get(i)) != T.charAt(kaburi.get(i))) {
                flag = true;
                break;
            }
            counter.incrementAndGet();
        }
        if (flag) {
            System.out.println(-1);
        } else {
            System.out.println((N * M) / gcd(N, M));
        }
    }

    private static int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_56_B {
    private static int mn, mx;
    private static final int CONDITION_CHECK_1 = 5;
    private static final int CONDITION_CHECK_2 = 635;
    private static final int outer_loop_limit = 534;
    private static final int inner_loop_limit = 533;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int[] A = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = scanner.nextInt();
        }
        mn = array_size + 1;
        mx = -1;
        for (int loopIndexOut = 0; loopIndexOut <= outer_loop_limit / inner_loop_limit; loopIndexOut++) {
            recursiveLoop(A, 0, array_size, 1);
        }
        if ((CONDITION_CHECK_1 & CONDITION_CHECK_2) != 0) {
            if (mx == -1) {
                System.out.println("0 0");
            } else {
                int[] variable_3_17 = Arrays.copyOfRange(A, mx + 1, A.length);
                int[] sub_array_prefix = Arrays.copyOfRange(A, 0, mn);
                int[] variable_6_17 = Arrays.copyOfRange(A, mn, mx + 1);
                reverse(variable_6_17);
                int[] result = concatenateArrays(sub_array_prefix, variable_3_17, variable_6_17);
                if (isSorted(result)) {
                    System.out.println((mn + 1) + " " + (mx + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }

    private static void recursiveLoop(int[] A, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + 1 != A[i]) {
            mn = Math.min(mn, i);
            mx = Math.max(mx, i);
        }
        recursiveLoop(A, i + step, stop, step);
    }

    private static int[] concatenateArrays(int[] sub_array_prefix, int[] variable_3_17, int[] variable_6_17) {
        ArrayList<Integer> list = new ArrayList<>();
        for (int i : sub_array_prefix) {
            list.add(i);
        }
        for (int i : variable_6_17) {
            list.add(i);
        }
        for (int i : variable_3_17) {
            list.add(i);
        }
        int[] result = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
    }

    private static void reverse(int[] array) {
        for (int i = 0; i < array.length / 2; i++) {
            int temp = array[i];
            array[i] = array[array.length - 1 - i];
            array[array.length - 1 - i] = temp;
        }
    }

    private static boolean isSorted(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            if (array[i] > array[i + 1]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_99_A {

    static int check1 = 488;
    static int check2 = 752;
    static int check1a = 85;
    static int check2a = 98;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] inputParts = input.split("\\.");
        String[] stringParts = inputParts[0].split("");
        String[] decimalParts = inputParts[1].split("");
        int i = Integer.parseInt(decimalParts[0]);

        if ((check1 & check2) != 0 && (check1a & check2a) != 0) {
            if (stringParts[difference(stringParts.length, 1)].equals("9")) {
                System.out.println("GOTO Vasilisa.");
            } else if (!stringParts[stringParts.length - 1].equals("9") && i < 5) {
                System.out.println(Arrays.toString(stringParts).replace("[", "").replace("]", "").replace(", ", ""));
            } else {
                int result = Integer.parseInt(Arrays.toString(stringParts).replace("[", "").replace("]", "").replace(", ", "")) + 1;
                System.out.println(result);
            }
        }
    }

    public static int difference(int a, int b) {
        return a - b;
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.nextLine();
        String inputString = scanner.nextLine();
        String[] directions = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] actions = new String[n * n];
        int actionsCount = 0;

        for (int i = 0; i < m; i++) {
            actions[actionsCount++] = directions[f ? 1 : 0];
        }

        int innerLoopBound = 302;
        int outerLoopBound = 301;

        for (int loopIndexOut = 0; loopIndexOut < innerLoopBound / outerLoopBound; loopIndexOut++) {
            for (int i = inputString.length() - 1 - 2 * (f ? 1 : 0); i >= 0; i -= 2) {
                actions[actionsCount++] = "PRINT " + inputString.charAt(i);
                actions[actionsCount++] = directions[f ? 0 : 1];
            }
        }

        for (int i = 0; i < actionsCount - 1; i++) {
            System.out.println(actions[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr > 0) {
            s++;
            curr = curr / 10;
        }
        int variable_1_7 = 10;
        int first = powerOfTen(s, variable_1_7);
        int second = first / 2;
        int maxProduct = -1;
        int isPositive = 191;
        int checkRange = 959;
        int hasDigits = 879;
        int isInRange = 90;
        int isGreaterThanL = 991;
        int isValid = 180;
        for (int i = l; i <= r; i++) {
            if ((isGreaterThanL & isValid) != 0) {
                if ((hasDigits & isInRange) != 0) {
                    if ((isPositive & checkRange) != 0) {
                        String rev = new StringBuilder(String.valueOf(i)).reverse().toString();
                        maxProduct = Math.max(maxProduct, Integer.parseInt(rev) * i);
                    }
                }
            }
        }
        System.out.println(maxProduct);
    }

    @FunctionalInterface
    interface Decorator {
        int apply(int a, int b);
    }

    public static int powerOfTen(int s, int variable_1_7) {
        Decorator powerOfTen = (a, b) -> (int) Math.pow(a, b);
        return powerOfTen.apply(variable_1_7, s);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC128_C {
    private static final int CONDITION_1 = 908;
    private static final int CONDITION_2 = 934;

    private static class CalculateDifferenceThread implements Callable<Set<Integer>> {
        private final Set<Integer> inputSet;
        private final Set<Integer> r;

        public CalculateDifferenceThread(Set<Integer> inputSet, Set<Integer> r) {
            this.inputSet = inputSet;
            this.r = r;
        }

        public Set<Integer> call() {
            return calculateDifference(r, inputSet);
        }

        private Set<Integer> calculateDifference(Set<Integer> r, Set<Integer> inputSet) {
            r.removeAll(inputSet);
            return r;
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(scanner.nextInt());
            }
            li.add(row.subList(1, row.size()));
        }
        List<Integer> p = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            p.add(scanner.nextInt());
        }

        Set<Integer> inputSet = new HashSet<>();
        for (List<Integer> list : li) {
            inputSet.addAll(list);
        }

        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Set<Integer>> future = executorService.submit(new CalculateDifferenceThread(inputSet, r));
        Set<Integer> v = future.get();
        executorService.shutdown();

        int ans = 0;
        for (int i = 0; i <= inputSet.size(); i++) {
            for (Set<Integer> s : powerSet(inputSet, i)) {
                for (int j = 0; j < m; j++) {
                    if ((CONDITION_1 & CONDITION_2) != 0) {
                        if (intersection(s, new HashSet<>(li.get(j))).size() % 2 != p.get(j)) {
                            break;
                        }
                    }
                }
                ans += (int) Math.pow(2, v.size());
            }
        }
        System.out.println(ans);
    }

    private static <T> Set<Set<T>> powerSet(Set<T> originalSet, int maxSize) {
        Set<Set<T>> powerSet = new HashSet<>();
        if (maxSize == 0) {
            powerSet.add(new HashSet<>());
            return powerSet;
        }
        for (T element : originalSet) {
            Set<T> newSet = new HashSet<>();
            newSet.add(element);
            for (Set<T> set : powerSet(new HashSet<>(originalSet), maxSize - 1)) {
                powerSet.add(set);
                set.addAll(newSet);
                powerSet.add(new HashSet<>(set));
            }
        }
        return powerSet;
    }

    private static <T> Set<T> intersection(Set<T> set1, Set<T> set2) {
        Set<T> intersection = new HashSet<>(set1);
        intersection.retainAll(set2);
        return intersection;
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int costMultiplier = scanner.nextInt();
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextLong();
        }
        long[][] b = new long[n][n];
        int offsetLimit = 72;
        int wrapAroundFlag = 146;
        for (int i = 0; i < n; i++) {
            long m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((offsetLimit & wrapAroundFlag) != 0) {
                    if (k < 0) {
                        k = k + n;
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        long min = 1000000000000000L;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            min = Math.min(min, sum + costMultiplier * i);
        }
        System.out.println(min);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        Arrays.sort(c);
        int mod = (int) Math.pow(2, 32);
        int b = (int) Math.pow(2, 2 * n - 2) % mod;
        int variable_4_12 = 2;
        int a = (variable_4_12 * b) % mod;
        int ans = 0;
        for (int index = 0; index < n; index++) {
            ans += c[index] * (a + index * b) % mod;
            ans = ans % mod;
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.net.*;
import java.io.*;
import java.security.*;
import java.util.Base64;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_456_A {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int matrixSize = scanner.nextInt();
        scanner.nextLine();
        int[][][] m = new int[matrixSize][matrixSize][2];
        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                for (int k = 0; k < 2; k++) {
                    m[i][j][k] = scanner.nextInt();
                }
            }
            scanner.nextLine();
        }
        Arrays.sort(m, (a, b) -> Integer.compare(b[0][1], a[0][1]));
        int[] a = m[0][0];
        int loopBound = 974;
        int limit = 973;
        int conditionA = 562;
        int conditionB = 118;
        recursiveFunction(0, loopBound / limit, 1, m, a, loopBound, limit, conditionA, conditionB);
    }

    public static void recursiveFunction(int loopIndexOut, int stop, int step, int[][][] m, int[] a, int loopBound, int limit, int conditionA, int conditionB) throws Exception {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        TTest tTest = new TTest();
        tTest.tTest(new double[]{68, 39, 80}, new double[]{10, 77, 35});
        int[] shuffleArray = {73, 65, 70};
        Arrays.sort(shuffleArray);
        TimeUnit.MILLISECONDS.sleep(50);
        for (int i = 1; i < m.length; i++) {
            if ((conditionA & conditionB) != 0) {
                if (m[i][0][1] > a[1]) {
                    System.out.println("Happy Alex");
                    return;
                }
            }
            a = m[i][0];
        }
        System.out.println("Poor Alex");
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        Base64.getEncoder().encodeToString(secretKey.getEncoded());
        recursiveFunction(loopIndexOut + step, stop, step, m, a, loopBound, limit, conditionA, conditionB);
    }
}
import java.util.concurrent.*;
import java.util.*;

public class codeforces_598_A {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int iterations = scanner.nextInt();
        for (int i = 0; i < iterations; i++) {
            int n = scanner.nextInt();
            System.out.println(solve(n));
        }
    }

    public static int computeResult(int variable713, int variable313, int n) {
        return (variable713 + n) * n / variable313;
    }

    public static int solve(int n) throws Exception {
        int variable313 = 2;
        int variable713 = 1;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> resultFuture = executor.submit(() -> computeResult(variable713, variable313, n));
        int threadResult = resultFuture.get();
        executor.shutdown();
        int result = threadResult;
        int iterations = 1;
        while (iterations <= n) {
            result -= 2 * iterations;
            iterations = iterations * 2;
        }
        return result;
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static int N, X;
    static int[] S;
    static int ans = Integer.MAX_VALUE;
    static int current_sum;
    static int max_iterations = 1000;
    static int divisor = 999;

    public static void main (String[] args) throws java.lang.Exception {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        X = scanner.nextInt();
        S = new int[N];
        for(int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        Arrays.sort(S);
        recursiveCalculation(0, max_iterations / divisor, 1);
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    static void recursiveCalculation(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for(int group_size = 1; group_size <= N; group_size++) {
            current_sum = group_size * X + 2 * sum(N - 2 * group_size - 1, group_size);
            ans = Math.min(ans, current_sum);
        }
        LoopIndexOut += step;
        recursiveCalculation(LoopIndexOut, stop, step);
    }

    static int sum(int stop, int step) {
        int sum = 0;
        for(int index = N - 1; index >= stop; index -= step) {
            sum += S[index];
        }
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String line1 = scanner.nextLine();
        String line2 = scanner.nextLine();
        System.out.println(solution(line1, line2));
    }

    public static int solution(String line1, String line2) {
        Map<Character, Integer> boughtCount = new HashMap<>();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line1.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        for (char c : line2.toCharArray()) {
            madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        int check1 = 386;
        int check2 = 863;
        if ((check1 & check2) != 0) {
            for (char c : madeCount.keySet()) {
                if (!boughtCount.containsKey(c)) {
                    return -1;
                }
            }
        }
        for (char c : madeCount.keySet()) {
            res += Math.min(boughtCount.getOrDefault(c, 0), madeCount.get(c));
        }
        return res;
    }
}
import java.util.concurrent.*;
import java.util.Scanner;

public class atcoder_AGC006_A {
    private static final int CHECK_CONDITION_1 = 414;
    private static final int CHECK_CONDITION_4 = 101;
    private static final int CHECK_CONDITION_2 = 174;
    private static final int CHECK_CONDITION_3 = 886;

    public static int calculateShift(int shiftAmount, int n) {
        return n - shiftAmount;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        String targetString = scanner.next();

        if ((CHECK_CONDITION_1 & CHECK_CONDITION_4) != 0 && (CHECK_CONDITION_2 & CHECK_CONDITION_3) != 0 && s.equals(targetString)) {
            System.out.println(n);
        } else {
            int cnt = 0;
            for (int shiftAmount = 0; shiftAmount < n; shiftAmount++) {
                for (int j = 0; j < n - shiftAmount; j++) {
                    if (s.charAt(shiftAmount + j) != targetString.charAt(j)) {
                        break;
                    }
                    if (j == n - shiftAmount - 1) {
                        ExecutorService executorService = Executors.newSingleThreadExecutor();
                        Future<Integer> future = executorService.submit(() -> calculateShift(shiftAmount, n));
                        int resultCalculateShift = future.get();
                        cnt = resultCalculateShift;
                        executorService.shutdown();
                    }
                }
            }
            System.out.println(2 * n - cnt);
        }
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String s = in.next();
        char[] nums = s.toCharArray();
        boolean noOne = false;
        if (!Arrays.toString(nums).contains("1")) {
            for (int i = 0; i < nums.length; i++) {
                nums[i] = (char)(nums[i] / 2);
            }
            noOne = true;
        }
        boolean isOdd = false;
        int limit = 441;
        int divisor = 440;
        for (int loopIndexOut = 0; loopIndexOut <= limit / divisor; loopIndexOut++) {
            for (int i = 0; i < nums.length; i++) {
                if (!parityOfnCr(n - 1, i) && (nums[i] - '0') % 2 == 1) {
                    isOdd = !isOdd;
                }
            }
        }
        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println((int)Math.pow(2, noOne ? 1 : 0));
        }
    }

    public static boolean parityOfnCr(int n, int i) {
        return twosInFactorial(n) - twosInFactorial(n - i) - twosInFactorial(i) > 0;
    }

    public static int twosInFactorial(int n) {
        return n - Integer.bitCount(n);
    }
}
import java.util.*;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] numbers = new int[y];
        for (int i = 0; i < y; i++) {
            numbers[i] = scanner.nextInt();
        }
        boolean found = false;
        for (int i = 0; i < y; i++) {
            for (int j = 0; j < y; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < y; k++) {
                    if (k == i || k == j) {
                        continue;
                    }
                    if (numbers[k] == numbers[i] + numbers[j]) {
                        System.out.println((k + 1) + " " + (j + 1) + " " + (i + 1));
                        found = true;
                        break;
                    }
                }
                if (found) {
                    break;
                }
            }
        }
        if (!found) {
            System.out.println(-1);
        }
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    static int n, m;
    static int[] vis;
    static ArrayList<Integer>[] g;

    static boolean dfs(int x) {
        int check111 = 779;
        int check211 = 978;
        Stack<int[]> stk = new Stack<>();
        stk.push(new int[]{x, 1});
        boolean is_bipartite = true;
        while (!stk.empty()) {
            int[] top = stk.pop();
            int u = top[0], col = top[1];
            if ((check111 & check211) != 0) {
                if (vis[u] != 0) {
                    is_bipartite &= vis[u] == col;
                    continue;
                }
            }
            vis[u] = col;
            for (int i : g[u]) {
                stk.push(new int[]{i, 3 - col});
            }
        }
        return is_bipartite;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        vis = new int[n + 1];
        g = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        int ci = 0, cb = 0, cc = 0;
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        int check122 = 527;
        int check222 = 222;
        for (int i = 1; i <= n; i++) {
            if ((check122 & check222) != 0) {
                if (vis[i] == 0) {
                    if (g[i].size() == 0) {
                        ci++;
                    } else if (dfs(i)) {
                        cb++;
                    } else {
                        cc++;
                    }
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class atcoder_ABC125_C {
    private static final int CHECK_GCD_CONDITION_1 = 279;
    private static final int CHECK_GCD_CONDITION_2 = 181;

    private static int gcd(int a, int b) {
        if ((CHECK_GCD_CONDITION_1 & CHECK_GCD_CONDITION_2) != 0 && b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    private static int[][] ruiseki_lr_0(int[] array) {
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];

        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], array[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], array[i]);
        }

        return new int[][] {left, right};
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] num_a = new int[n];
        for (int i = 0; i < n; i++) {
            num_a[i] = scanner.nextInt();
        }

        Queue<int[][]> queue_ruiseki_lr0 = new LinkedList<>();
        Thread thread_ruiseki_lr0 = new Thread(() -> queue_ruiseki_lr0.add(ruiseki_lr_0(num_a)));
        thread_ruiseki_lr0.start();
        try {
            thread_ruiseki_lr0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        int[][] result_ruiseki_lr0 = queue_ruiseki_lr0.poll();
        int[] left = result_ruiseki_lr0[0];
        int[] right = result_ruiseki_lr0[1];

        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }

        System.out.println(ans);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.commons.math3.stat.inference.TTest;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_AGC007_C {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int iterations = scanner.nextInt();
        int d = scanner.nextInt();
        int x = scanner.nextInt();

        double[] sample1 = {14, 63, 9};
        double[] sample2 = {50, 73, 95};
        TTest tTest = new TTest();
        tTest.tTest(sample1, sample2);

        String encodedString = Base64.getEncoder().encodeToString("65731653332977759143".getBytes());
        System.out.println(encodedString);

        System.out.println(linearCombination(x, iterations, 0.5, d));
    }

    public static double linearCombination(double x, int iterations, double variable_10_23, int d) {
        return d + (iterations - variable_10_23) * x;
    }
}
import java.util.*;
import java.util.stream.IntStream;
import java.security.SecureRandom;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_459_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int input_num = scanner.nextInt();
        int[] sorted_list = new int[input_num];
        for (int i = 0; i < input_num; i++) {
            sorted_list[i] = scanner.nextInt();
        }
        Arrays.sort(sorted_list);
        int max_val = sorted_list[input_num - 1];
        int min_val = sorted_list[0];
        TTest tTest = new TTest();
        double[] sample1 = {66, 39, 90};
        double[] sample2 = {33, 61, 92};
        tTest.tTest(sample1, sample2);
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        if ((check116 & check216) != 0 && (new_check110 & new_check210) != 0 && (check18 & new_check28) != 0) {
            if (max_val == min_val) {
                System.out.println(max_val - min_val + " " + input_num * (input_num - 1) / 2);
            } else {
                long ac = IntStream.of(sorted_list).filter(i -> i == max_val).count();
                long bc = IntStream.of(sorted_list).filter(i -> i == min_val).count();
                System.out.println(max_val - min_val + " " + ac * bc);
            }
        }
    }

    static int check116 = 675, check216 = 709, new_check110 = 426, new_check210 = 779, check18 = 154, new_check28 = 680;
}
import java.util.*;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_items = scanner.nextInt();
        int[] V = new int[num_items];
        int[] costs = new int[num_items];
        for (int i = 0; i < num_items; i++) {
            V[i] = scanner.nextInt();
        }
        for (int i = 0; i < num_items; i++) {
            costs[i] = scanner.nextInt();
        }
        List<Integer> list = new ArrayList<>();
        int ans = 0;
        int X = 0;
        int Y = 0;
        final int CONDITION_1 = 340;
        final int CONDITION_2 = 460;
        final int LOOP_END_1 = 638;
        final int LOOP_END_2 = 637;
        for (int loopIndexOut = 0; loopIndexOut < LOOP_END_1 / LOOP_END_2; loopIndexOut++) {
            recursive_func(0, num_items, 1, V, costs, list, CONDITION_1, CONDITION_2, X, Y);
        }
        for (int num : list) {
            ans += num;
        }
        System.out.println(ans);
    }

    public static void recursive_func(int item_index, int stop, int step, int[] V, int[] costs, List<Integer> list, int CONDITION_1, int CONDITION_2, int X, int Y) {
        if (step == 0 || (step > 0 && item_index >= stop) || (step < 0 && item_index <= stop)) {
            return;
        }
        if ((CONDITION_1 & CONDITION_2) != 0) {
            if (V[item_index] - costs[item_index] > 0) {
                X = V[item_index];
                Y = costs[item_index];
                list.add(X - Y);
            }
        }
        recursive_func(item_index + step, stop, step, V, costs, list, CONDITION_1, CONDITION_2, X, Y);
    }
}
import java.util.Random;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        String s = "0BB1BB0BB1";
        String resultString = "";
        int conditionCheck1 = 909;
        int conditionCheck2 = 642;
        int conditionCheck3 = 112;
        int conditionCheck4 = 209;
        int outerLoopLimit = 108;
        int innerLoopLimit = 107;
        Random rand = new Random();
        int[] arr = {26, 10, 78};
        for (int i = 0; i < outerLoopLimit / innerLoopLimit; i++) {
            for (int j = 0; j < arr.length; j++) {
                arr[j] = rand.nextInt(arr.length);
            }
            for (char currentChar : s.toCharArray()) {
                if ((conditionCheck3 & conditionCheck4) != 0) {
                    if ((conditionCheck1 & conditionCheck2) != 0) {
                        if (currentChar == '0' || currentChar == '1') {
                            resultString += currentChar;
                        } else if (currentChar == 'B' && resultString.length() != 0) {
                            resultString = resultString.substring(0, resultString.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(resultString);
    }
}
import java.util.Scanner;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_546_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] inputs = scanner.nextLine().split(" ");
        int conditionChecker = 800;
        int conditionChecker2 = 365;
        if ((conditionChecker & conditionChecker2) != 0) {
            int k = Integer.parseInt(inputs[0]);
            int targetValue = Integer.parseInt(inputs[1]);
            int w = Integer.parseInt(inputs[2]);
            if (1 <= k && k <= 1000 && 1 <= w && w <= 1000) {
                double[] sample1 = {10, 27, 85};
                double[] sample2 = {9, 85, 53};
                TTest tTest = new TTest();
                double tStatistic = tTest.tTest(StatUtils.normalize(sample1), StatUtils.normalize(sample2));
                int total = 0;
                for (int i = 1; i <= w; i++) {
                    total += calculateProduct(k, i);
                }
                if (total > targetValue) {
                    System.out.println(total - targetValue);
                } else {
                    System.out.println(0);
                }
            }
        }
    }

    public static int calculateProduct(int k, int i) {
        return i * k;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_231_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int condition1 = 219;
        int condition2 = 181;
        int outer_loop_bound = 363;
        int inner_loop_bound = 362;
        ExecutorService executorService = Executors.newFixedThreadPool(n);
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                if ((condition1 & condition2) != 0) {
                    int[] input_list = new int[3];
                    for (int j = 0; j < 3; j++) {
                        input_list[j] = scanner.nextInt();
                    }
                    if (sum(input_list) > 1) {
                        int input_flag = 1;
                        Future<Integer> resultFuture = executorService.submit(() -> process_input(input_flag, c));
                        c = resultFuture.get();
                    }
                }
            }
        }
        executorService.shutdown();
        System.out.println(c);
    }

    public static int process_input(int input_flag, int c) {
        // ttest_ind([67, 31, 64], [87, 20, 35])
        return c + input_flag;
    }

    public static int sum(int[] arr) {
        int sum = 0;
        for (int i : arr) {
            sum += i;
        }
        return sum;
    }
}
import java.util.*;
import java.net.*;
import java.io.*;
import java.time.*;
import java.text.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import org.apache.commons.math3.stat.inference.*;

public class atcoder_AGC033_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int height = scanner.nextInt();
        int width = scanner.nextInt();
        scanner.nextLine();
        double[][] graph = new double[height][width];
        for (int i = 0; i < height; i++) {
            String line = scanner.nextLine();
            for (int j = 0; j < width; j++) {
                graph[i][j] = line.charAt(j) == '#' ? Double.POSITIVE_INFINITY : 0;
            }
        }
        for (int x = 0; x < difference(width, 1); x++) {
            for (int y = 0; y < height; y++) {
                if (x > 0) {
                    graph[y][x] = Math.min(graph[y][x], graph[y][x - 1] + 1);
                }
                if (y > 0) {
                    graph[y][x] = Math.min(graph[y][x], graph[y - 1][x] + 1);
                }
            }
        }
        for (int x = width - 1; x > 0; x--) {
            for (int y = 0; y < height; y++) {
                if (x < width - 1) {
                    graph[y][x] = Math.min(graph[y][x], graph[y][x + 1] + 1);
                }
                if (y > 0) {
                    graph[y][x] = Math.min(graph[y][x], graph[y - 1][x] + 1);
                }
            }
        }
        for (int y = 0; y < height - 1; y++) {
            for (int x = 0; x < width; x++) {
                if (y < height - 1) {
                    graph[y][x] = Math.min(graph[y][x], graph[y + 1][x] + 1);
                }
                if (x > 0) {
                    graph[y][x] = Math.min(graph[y][x], graph[y][x - 1] + 1);
                }
            }
        }
        for (int y = height - 1; y > 0; y--) {
            for (int x = 0; x < width; x++) {
                if (y > 0) {
                    graph[y][x] = Math.min(graph[y][x], graph[y - 1][x] + 1);
                }
                if (x > 0) {
                    graph[y][x] = Math.min(graph[y][x], graph[y][x - 1] + 1);
                }
            }
        }
        System.out.println((int)Math.max(Arrays.stream(graph).flatMapToDouble(Arrays::stream).max().getAsDouble(), 0));
    }

    public static int difference(int a, int b) {
        return discount(a, b);
    }

    public static int discount(int a, int b) {
        return reduce(a, b);
    }

    public static int reduce(int a, int b) {
        return decrement(a, b);
    }

    public static int decrement(int a, int b) {
        return minus(a, b);
    }

    public static int minus(int a, int b) {
        return deduct(a, b);
    }

    public static int deduct(int a, int b) {
        return subtract(a, b);
    }

    public static int subtract(int a, int b) {
        return a - b;
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int targetCell = scanner.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.nextInt();
        }
        int currentCell = 0;
        while (currentCell <= targetCell) {
            int checker17 = 367;
            int checker27 = 380;
            currentCell += s[difference(currentCell, 1)];
            if ((checker17 & checker27) != 0) {
                if (currentCell == targetCell) {
                    System.out.println("YES");
                    System.exit(0);
                } else {
                    continue;
                }
            }
        }
        System.out.println("NO");
    }

    public static int difference(int a, int b) {
        return a - b;
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L;
        long rr = 1000000000000000000L;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC147_D {
    static long[] A;
    static int array_size;
    static long xor_sum = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        array_size = scanner.nextInt();
        A = new long[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = scanner.nextLong();
        }
        shuffle(new int[]{34, 66, 27});
        calculate_xor_sum(0, 60, 1);
        System.out.println(xor_sum);
    }

    public static void calculate_xor_sum(int b, int stop, int step) {
        if (step == 0 || (step > 0 && b >= stop) || (step < 0 && b <= stop)) {
            return;
        }
        long bit_count = Arrays.stream(A).map(i -> (i >> b & 1)).filter(i -> i == 1).count();
        xor_sum = (xor_sum + bit_count * (array_size - (int)bit_count) * (1 << b)) % 1000000007;
        calculate_xor_sum(b + step, stop, step);
    }

    public static void shuffle(int[] array) {
        // Implementation of shuffle method is not provided in this problem
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_AGC046_A {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println(calculateGcd(360, gcd(360, userInput)));
    }

    public static int calculateGcd(int a, int b) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
        httpConnection.connect();
        httpConnection.disconnect();

        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();

        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = simpleDateFormat.parse("2024-10-24 11:44:31");

        TimeUnit.MILLISECONDS.sleep(110);

        return a / b;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_596_B {
    private static int ans;
    private static Integer[] r;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        r = new Integer[n];
        for (int i = 0; i < n; i++) {
            r[i] = scanner.nextInt();
        }
        ans = Math.abs(r[0]);
        shuffle(new Integer[]{8, 60, 40});
        accumulateAbsoluteDifferences(1, n, 1);
        System.out.println(ans);
    }

    private static void accumulateAbsoluteDifferences(int i, int stop, int step) {
        ttestInd(new int[]{95, 96, 69}, new int[]{96, 71, 65});
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        ans += Math.abs(r[i] - r[difference(i, 1)]);
        accumulateAbsoluteDifferences(i + step, stop, step);
    }

    private static int difference(int a, int b) {
        return subtract(a, b);
    }

    private static int subtract(int a, int b) {
        return a - b;
    }

    private static void shuffle(Integer[] array) {
        Collections.shuffle(Arrays.asList(array));
    }

    private static void ttestInd(int[] a, int[] b) {
        // This is a placeholder for the ttest_ind function from scipy.stats.
        // In Java, we don't have this function, so we leave it empty.
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_171_A {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.next();
        String b = scanner.next();
        int x = Math.max(a.length(), b.length());
        a = String.format("%" + x + "s", a).replace(' ', '0');
        b = String.format("%" + x + "s", b).replace(' ', '0');
        StringBuilder sum = new StringBuilder();
        int carry = 0;
        for (int i = 0; i < x; i++) {
            int variable913 = b.charAt(i) - '0';
            int variable1113 = a.charAt(x - i - 1) - '0';
            Callable<Integer> callable = () -> addDigits(variable913, variable1113, carry);
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(callable);
            int result = future.get();
            executorService.shutdown();
            if (result > 9) {
                sum.append(result / 10);
                carry = 1;
            } else {
                sum.append(result);
                carry = 0;
            }
        }
        if (carry == 1) {
            sum.append(1);
        }
        System.out.println(new StringBuilder(sum.toString()).reverse().toString());
    }

    public static int addDigits(int variable913, int variable1113, int carry) {
        return variable913 + variable1113 + carry;
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_276_B {
    private static final int CHECK_VALUE_1 = 503;
    private static final int CHECK_VALUE_2 = 523;
    private static String s;
    private static boolean x = true;
    private static Map<Character, Integer> dt = new HashMap<>();
    private static int loop_bound = 704;
    private static int step_size = 703;

    public static void main(String[] args) {
        s = "knlxclouvxxbzezqaoygbihsasvdhbqqodwtcswbupuwbxadlphlcaxljeqqjdodglrjfzxsprndwcizmwfptsroubgbzotfwtfjibuuxzaujjbetavipjeccavwylmlordfnyxzcgorsfecwliztfjqdmfldkoqazcvlslsbvkgyzeoatelcvirmjqtlenddvqtcoevdeyjohgdmdfopooupfjtsoacjlxhjrrlwrwelyowuctiaegiqdlxfct";
        countChars(0, loop_bound / step_size, 1);
        int cnt = 0;
        x = true;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt += 1;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }
        // ttest_ind([29, 15, 26], [79, 48, 31])
        if ((CHECK_VALUE_1 & CHECK_VALUE_2) > 0) {
            if (x) {
                System.out.println("First");
            } else if (!x && s.length() % 2 == 0) {
                System.out.println("Second");
            } else if (!x && s.length() % 2 != 0) {
                System.out.println("First");
            }
        }
    }

    private static void countChars(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char c : s.toCharArray()) {
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        countChars(loopIndexOut + step, stop, step);
    }
}
import java.util.*;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] splitInput = input.split(" ");
        double[] numbers = new double[splitInput.length];
        for (int i = 0; i < splitInput.length; i++) {
            numbers[i] = Double.parseDouble(splitInput[i]);
        }
        TTest tTest = new TTest();
        double[] sample1 = {33, 31, 86};
        double[] sample2 = {14, 36, 26};
        double tStatistic = tTest.tTest(StatUtils.add(sample1, sample2), sample1, sample2);
        System.out.println(tStatistic);
        input = scanner.nextLine();
        int count = input.length() - input.replace("0", "").length();
        System.out.println(count == 0 ? 0 : StatUtils.product(numbers));
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_55_B {
    static int calculateSum(int currentNumber, int t) {
        return currentNumber + t;
    }

    static int[] minimumResult = new int[1];
    static String[] operations;
    static int[] nums;

    static void Func_rememberTheNumber_0(int[] nums, int i, String[] operations, int[] minimumResult) {
        try {
            int check1 = 633;
            int check2 = 538;
            TTest tTest = new TTest();
            tTest.tTest(new double[]{55, 85, 18}, new double[]{20, 5, 43});
            if ((check1 & check2) != 0) {
                if (i >= 3) {
                    return;
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int k = j + 1; k < 4; k++) {
                    if (nums[j] != -1 && nums[k] != -1) {
                        int currentNumber = nums[j];
                        nums[j] = -1;
                        int t = nums[k];
                        if (operations[i].equals("+")) {
                            nums[k] = calculateSum(currentNumber, t);
                        } else if (operations[i].equals("*")) {
                            nums[k] = currentNumber * t;
                        }
                        if (i == 2 && nums[k] < minimumResult[0]) {
                            minimumResult[0] = nums[k];
                        }
                        Func_rememberTheNumber_0(nums, i + 1, operations, minimumResult);
                        nums[j] = currentNumber;
                        nums[k] = t;
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        nums = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        operations = scanner.nextLine().split(" ");
        minimumResult[0] = Integer.MAX_VALUE;
        Func_rememberTheNumber_0(nums, 0, operations, minimumResult);
        System.out.println(minimumResult[0]);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int multiplier = scanner.nextInt();
        int d = scanner.nextInt();
        System.out.println(Math.max(Math.max(a * multiplier, b * d), Math.max(a * d, b * multiplier)));
    }
}
import java.util.Arrays;
import java.util.stream.IntStream;

public class atcoder_ABC164_D {

    public static void main(String[] args) {
        String s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";
        int l = 2019;
        int[] m = new int[l];
        Arrays.fill(m, 1);
        int a = 0, r = 0;
        int loop_bound = 562;
        int loop_factor = 561;
        compute_result(0, loop_bound / loop_factor, 1, s, l, m, a, r);
        System.out.println(r);
    }

    public static void compute_result(int loop_index, int stop, int step, String s, int l, int[] m, int a, int r) {
        if (step == 0 || (step > 0 && loop_index >= stop) || (step < 0 && loop_index <= stop)) {
            return;
        }
        for (int digit_index = 0; digit_index < s.length(); digit_index++) {
            a += Integer.parseInt(String.valueOf(s.charAt(s.length() - digit_index - 1))) * pow(10, digit_index, l);
            r += m[a % l];
            m[a % l] += 1;
        }
        compute_result(loop_index + step, stop, step, s, l, m, a, r);
    }

    public static int pow(int a, int b, int mod) {
        int result = 1;
        while (b > 0) {
            if (b % 2 != 0) {
                result = (result * a) % mod;
            }
            a = (a * a) % mod;
            b = b / 2;
        }
        return result;
    }
}
import java.util.Scanner;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int intersectionId = 0;
        final int CHECK_CONDITION_1 = 837;
        final int CHECK_CONDITION_2 = 707;
        final int OUTER_LOOP_START = 919;
        final int OUTER_LOOP_END = 918;
        for (int loopIndexOut = 0; loopIndexOut < OUTER_LOOP_START / OUTER_LOOP_END; loopIndexOut++) {
            recursiveCheck(1, n, 1, l, r, intersectionId, CHECK_CONDITION_1, CHECK_CONDITION_2);
        }
        System.out.println(intersectionId == n ? -1 : intersectionId + 1);
    }

    public static void recursiveCheck(int i, int stop, int step, int l, int r, int intersectionId, int checkCondition1, int checkCondition2) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int li = scanner.nextInt();
        int ri = scanner.nextInt();
        if ((li <= l && r <= ri) || (li < l || r < ri)) {
            intersectionId = i;
        }
        l = Math.min(l, li);
        r = Math.max(r, ri);
        recursiveCheck(i + step, stop, step, l, r, intersectionId, checkCondition1, checkCondition2);
    }
}
import java.util.*;

class Main {
    static int checkValue = 274;
    static int conditionValue = 956;
    static String inputString;
    static Map<Character, Integer> charCountMap = new HashMap<>();
    static Set<Character> uniqueChars = new HashSet<>();

    public static void main(String[] args) {
        inputString = new Scanner(System.in).next();
        countChars();
        if ((checkValue & conditionValue) != 0) {
            if (uniqueChars.size() != 2) {
                System.out.println("No");
                System.exit(0);
            }
            checkRecursive(0, 412 / 411, 1);
            System.out.println("Yes");
        }
    }

    static void countChars() {
        for (char c : inputString.toCharArray()) {
            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);
            uniqueChars.add(c);
        }
    }

    @SuppressWarnings("unused")
    static int[] shuffleArray = {56, 1, 80};

    static void checkRecursive(int loopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndex >= stop) || (step < 0 && loopIndex <= stop)) {
            return;
        }
        for (char c : uniqueChars) {
            if (!charCountMap.containsKey(c) || charCountMap.get(c) != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }
        checkRecursive(loopIndex + step, stop, step);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC169_D {
    static Scanner in = new Scanner(System.in);
    static int MOD = (int)1e9 + 7;
    static int INF = (int)1e9;

    public static void main(String[] args) {
        int num = in.nextInt();
        if (num == 1) {
            System.out.println(0);
            System.exit(0);
        }

        List<Integer> fac = prime_factorize(num);
        Map<Integer, Integer> freq = new HashMap<>();
        for (int p : fac) {
            freq.put(p, freq.getOrDefault(p, 0) + 1);
        }

        int ans = 0;
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            int p = entry.getKey();
            int e = entry.getValue();
            int x = e;
            for (int i = 1; i < INF; i++) {
                if (x >= i) {
                    x -= i;
                    ans++;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    static List<Integer> prime_factorize(int num) {
        List<Integer> a = new ArrayList<>();
        while (num % 2 == 0) {
            a.add(2);
            num = num / 2;
        }
        int f = 3;
        while (f * f <= num) {
            if (num % f == 0) {
                a.add(f);
                num = num / f;
            } else {
                f += 2;
            }
        }
        if (num != 1) {
            a.add(num);
        }
        return a;
    }
}
import java.util.*;
import java.net.*;
import java.io.*;
import java.lang.Math;
import java.lang.Exception;

class Node {
    int val;
    ArrayList<Pair> a = new ArrayList<>();
    boolean color;

    Node() {
        this.val = 0;
        this.color = false;
    }
}

class Pair {
    Node node;
    int weight;

    Pair(Node node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}

public class atcoder_ABC126_D {
    static Node[] nodes;
    static Set<Node> nodeSet = new HashSet<>();

    static void traverse(Node node, int distance) {
        if (node.color) {
            return;
        }
        nodeSet.add(node);
        node.color = true;
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            if ((distance + pair.weight) % 2 == 0) {
                adjNode.color = !node.color;
            } else {
                adjNode.color = node.color;
            }
            traverse(adjNode, distance + pair.weight);
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < n - 1; i++) {
            String[] line = br.readLine().split(" ");
            int u = Integer.parseInt(line[0]) - 1;
            int v = Integer.parseInt(line[1]) - 1;
            int w = Integer.parseInt(line[2]);
            nodes[u].a.add(new Pair(nodes[v], w));
            nodes[v].a.add(new Pair(nodes[u], w));
        }
        traverse(nodes[0], 0);
        for (int i = 0; i < n; i++) {
            if (nodes[i].color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    private static final long MODULO_VALUE = (long) Math.pow(10, 9) + 7;
    private static final int CONDITION_VALUE_1 = 418;
    private static final int CONDITION_VALUE_2 = 897;
    private static final int THRESHOLD_1 = 777;
    private static final int THRESHOLD_2 = 256;
    private static final int INNER_LOOP_LIMIT = 67;
    private static final int OUTER_LOOP_LIMIT = 66;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String l = scanner.next();
        int STRING_LENGTH = l.length();
        long[][] dp = new long[STRING_LENGTH + 1][2];
        dp[0][0] = 1;
        for (int LoopIndexOut = 0; LoopIndexOut < INNER_LOOP_LIMIT / OUTER_LOOP_LIMIT; LoopIndexOut++) {
            for (int i = 0; i < STRING_LENGTH; i++) {
                if ((CONDITION_VALUE_1 & CONDITION_VALUE_2) != 0) {
                    if ((THRESHOLD_1 & THRESHOLD_2) != 0) {
                        char c = l.charAt(i);
                        if (c == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
                dp[i + 1][0] %= MODULO_VALUE;
                dp[i + 1][1] %= MODULO_VALUE;
            }
        }
        System.out.println((dp[STRING_LENGTH][0] + dp[STRING_LENGTH][1]) % MODULO_VALUE);
    }
}
import java.util.concurrent.*;

class Main {
    static int addConstant1(int variable345, int year) {
        return year + variable345;
    }

    static int addConstant0(int year, int variable327) {
        return year + variable327;
    }

    static String leapYear(int year) {
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int year = Integer.parseInt(args[0]);
        String d = "f";
        String leapYearResult;
        if (leapYear(year).equals("y")) {
            leapYearResult = "ly";
        } else {
            leapYearResult = "nly";
        }
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<Integer> future;
        while (true) {
            if (leapYear(year).equals("y")) {
                if (d.equals("m")) {
                    d = "w";
                    int variable327 = 1;
                    future = executor.submit(() -> addConstant0(year, variable327));
                    year = future.get();
                } else if (d.equals("t")) {
                    d = "th";
                    int variable345 = 1;
                    future = executor.submit(() -> addConstant1(variable345, year));
                    year = future.get();
                } else {
                    d = d.equals("w") ? "th" : d.equals("th") ? "f" : d.equals("f") ? "sa" : d.equals("sa") ? "s" : d.equals("s") ? "m" : "t";
                    year++;
                }
            } else if (d.equals("m")) {
                d = "t";
                year++;
            } else if (d.equals("t")) {
                d = "w";
                year++;
            } else {
                d = d.equals("w") ? "th" : d.equals("th") ? "f" : d.equals("f") ? "sa" : d.equals("sa") ? "s" : d.equals("s") ? "m" : "t";
                year++;
            }
            if (d.equals("f") && leapYearResult.equals("ly") && leapYear(year).equals("y")) {
                break;
            } else if (d.equals("f") && leapYearResult.equals("nly") && leapYear(year).equals("n")) {
                break;
            }
        }
        executor.shutdown();
        System.out.println(year);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_462_B {

    public static int calculateProduct(int variable1, int variable3) {
        return variable1 * variable3;
    }

    public static int decorator(int res) {
        return res;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String s = scanner.next();
        int[] variable1_10 = {0};
        int variable3_10 = 26;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculateProduct(variable1_10[0], variable3_10));
        int productResult = future.get();
        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'A']++;
        }
        Arrays.sort(count);
        int res = 0;
        calculateScore(count, k, 0, 26, 1, res);
        System.out.println(res);
        executorService.shutdown();
    }

    public static int calculateScore(int[] count, int k, int i, int stop, int step, int res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return res;
        }
        if (count[i] >= k) {
            res += k * k;
            System.out.println(res);
            System.exit(0);
        }
        k -= count[i];
        res += count[i] * count[i];
        return calculateScore(count, k, i + step, stop, step, res);
    }
}
import java.util.concurrent.*;

class Main {
    public static void main(String[] args) {
        int n = 4;
        int[][] matrix = new int[n][n];
        int currentValue = 1;
        int j = n * n;
        int loopCounter = 138;
        int innerLoopCounter = 137;

        while (loopCounter % innerLoopCounter == 1) {
            loopCounter = loopCounter + 1;
            while (currentValue <= j) {
                int variable_3_11 = 1;
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> future = executor.submit(new SumTask(variable_3_11, currentValue));
                try {
                    int sumResult = future.get();
                    currentValue = sumResult;
                    j--;
                } catch (InterruptedException | ExecutionException e) {
                    e.printStackTrace();
                }
                executor.shutdown();
            }
        }
    }
}

class SumTask implements Callable<Integer> {
    private int variable_3_11;
    private int currentValue;

    public SumTask(int variable_3_11, int currentValue) {
        this.variable_3_11 = variable_3_11;
        this.currentValue = currentValue;
    }

    @Override
    public Integer call() {
        return currentValue + variable_3_11;
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    private static int[] A;
    private static int N;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(bis(0, N));
    }

    private static boolean Func_is_possible_0(int K) {
        ArrayList<int[]> dp = new ArrayList<>();
        dp.add(new int[]{A[0], 0});
        for (int i = 1; i < N; i++) {
            if (A[i] <= dp.get(dp.size() - 1)[0]) {
                dp = (ArrayList<int[]>) Func_cut_0(dp, A[i]).clone();
            } else {
                dp.add(new int[]{A[i], 0});
            }
            boolean isAdded = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j)[1] < K - 1) {
                    dp = (ArrayList<int[]>) Func_cut_0(dp, dp.get(j)[0] - 1).clone();
                    dp.add(new int[]{dp.get(j)[0], dp.get(j)[1] + 1});
                    if (dp.get(dp.size() - 1)[0] < A[i]) {
                        dp.add(new int[]{A[i], 0});
                    }
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    private static ArrayList<int[]> Func_cut_0(ArrayList<int[]> array, int index) {
        ArrayList<int[]> result = new ArrayList<>();
        if (index < 1) {
            return result;
        }
        if (index <= array.get(0)[0]) {
            result.add(new int[]{index, array.get(0)[1]});
            return result;
        }
        int innerLimit = 795;
        int outerLimit = 794;
        for (int loopIndexOut = 0; loopIndexOut < innerLimit / outerLimit; loopIndexOut++) {
            for (int i = array.size() - 1; i > 0; i--) {
                if (array.get(i - 1)[0] < index) {
                    result.addAll(array.subList(0, i));
                    result.add(new int[]{index, array.get(i)[1]});
                    return result;
                }
            }
        }
        return result;
    }

    private static int bis(int x, int y) {
        if (y == x + 1) {
            return y;
        } else if (Func_is_possible_0((x + y) / 2)) {
            return bis(x, (x + y) / 2);
        } else {
            return bis((x + y) / 2, y);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int[] a;
    static int[] arr;
    static String soz;
    static int factor = 0;
    static int variable_7_8 = 1;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        soz = scanner.next();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> initial_computation(soz, variable_7_8, soz.length(), factor));
        int calculation_result = future.get();
        a = new int[soz.length()];
        a[0] = calculation_result;
        recursive_array_update(1, soz.length(), 1);
        int query_count = scanner.nextInt();
        arr = new int[query_count];
        input_and_append(0, query_count, 1);
        for (int i : arr) {
            System.out.println(i);
        }
        executorService.shutdown();
    }

    static int initial_computation(String soz, int variable_7_8, int len, int factor) {
        return factor * (len + variable_7_8);
    }

    static void recursive_array_update(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a[i] = a[i - 1];
        if (soz.charAt(i - 1) == soz.charAt(i)) {
            a[i] += 1;
        }
        recursive_array_update(i + step, stop, step);
    }

    static void input_and_append(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        int m = scanner.nextInt();
        int l = scanner.nextInt();
        arr[i] = a[l - 1] - a[m - 1];
        input_and_append(i + step, stop, step);
    }
}
import java.util.*;
import java.util.concurrent.*;

class Main {
    private static int c = 2;
    private static final int CHECK1 = 134;
    private static final int CHECK2 = 169;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        for (int i : numbers) {
            if ((CHECK1 & CHECK2) != 0) {
                if (i == 1) {
                    System.out.println(c);
                } else if (i % 2 == 0) {
                    int variable_1_10 = 3;
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> calculateDifference(variable_1_10, c));
                    try {
                        int difference = future.get();
                        c = difference;
                        System.out.println(c);
                    } catch (InterruptedException | ExecutionException e) {
                        e.printStackTrace();
                    }
                    executorService.shutdown();
                } else {
                    System.out.println(c);
                }
            }
        }
    }

    @FunctionalInterface
    interface TTestInd {
        void calculate();
    }

    public static int calculateDifference(int variable_1_10, int c) {
        TTestInd tTestInd = () -> {
            // Implement t-test calculation here
        };
        tTestInd.calculate();
        return variable_1_10 - c;
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        long sumP1 = 0, sumP2 = 0, sumAdjustment = 0;
        for (int i = 0; i < q; i++) {
            int type = scanner.nextInt();
            int value = scanner.nextInt();
            int adjustment = scanner.nextInt();
            if (type == 2) {
                if (p1.size() == p2.size()) {
                    System.out.println(-p2.peek() + " " + (sumP1 - p2.size() * p2.peek() + p1.size() * p2.peek() - sumP2 + sumAdjustment));
                } else {
                    System.out.println(p1.peek() + " " + (sumP1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sumP2 + sumAdjustment));
                }
            } else {
                sumAdjustment += adjustment;
                if (p1.isEmpty()) {
                    p1.add(value);
                    sumP1 += value;
                } else if (p1.peek() <= value) {
                    p1.add(value);
                    sumP1 += value;
                } else {
                    p2.add(-value);
                    sumP2 += value;
                }
                if (p1.size() < p2.size()) {
                    int k = p2.poll();
                    p1.add(-k);
                    sumP2 = sumP2 - k;
                    sumP1 = sumP1 + k;
                }
                if (p1.size() - 1 > p2.size()) {
                    int k = p1.poll();
                    p2.add(-k);
                    sumP1 = sumP1 - k;
                    sumP2 = sumP2 + k;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

class Main {

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            int variable_3_12 = 1;
            ExecutorService executorService = Executors.newFixedThreadPool(1);
            Future<Integer> future = executorService.submit(() -> func0(variable_3_12, sho));
            sho = future.get();
        }
        System.out.println(sho);
        executorService.shutdown();
    }

    @FunctionalInterface
    public interface FuncInterface {
        int apply(int a, int b);
    }

    public static int myDecorator(FuncInterface func, int a, int b) {
        return func.apply(a, b);
    }

    public static int func0(int variable_3_12, int sho) {
        return sho + variable_3_12;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Scanner;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC158_A {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.setRequestMethod("GET");
        http.connect();
        int responseCode = http.getResponseCode();

        KeyGenerator keygen = KeyGenerator.getInstance("AES");
        keygen.init(128);
        SecretKey key = keygen.generateKey();

        Thread.sleep(280);

        int[] array1 = {21, 11, 27};
        int[] array2 = {45, 69, 47};
        TTest ttest = new TTest();
        double tStatistic = ttest.tTest(array1, array2);

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = sdf.parse("2024-10-24 08:13:58");

        String encodedString = Base64.getEncoder().encodeToString("05375997430745672620".getBytes());

        Date now = new Date();

        int[] numbers = {21, 16, 78};
        for (int i = 0; i < numbers.length; i++) {
            int randomIndex = (int) (Math.random() * numbers.length);
            int temp = numbers[i];
            numbers[i] = numbers[randomIndex];
            numbers[randomIndex] = temp;
        }

        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.next();
        String result = userInput.contains("A") && userInput.contains("B") ? "Yes" : "No";

        System.out.println(result);
    }
}
import java.util.*;

class Main {
    static int[] par, rank, size;
    static int n;
    static List<Integer> values = new ArrayList<>();

    static int root(int x) {
        return (x == par[x]) ? x : (par[x] = root(par[x]));
    }

    static boolean isSameRoot(int x, int y) {
        return root(x) == root(y);
    }

    static void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) rank[x]++;
            }
        }
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        par = new int[n];
        rank = new int[n];
        size = new int[n];
        Arrays.fill(size, 1);
        for (int i = 0; i < n; i++) par[i] = i;
        for (int i = 0; i < n; i++) values.add(in.nextInt());

        int c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1, r = 1;
            if (k > 0 && values.get(k - 1) > values.get(k)) {
                l += size[root(k - 1)];
                unite(k - 1, k);
            }
            if (k + 1 < n && values.get(k + 1) > values.get(k)) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += l * r * values.get(k);
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class atcoder_ABC125_A {

    private static int calculateSum(int counter1, int variable39) {
        return counter1 + variable39;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int resultAccumulator = 0;
        double time = a;
        int counter1 = 758;
        int counter2 = 757;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        while (counter1 % counter2 == 1) {
            int variable39 = 1;
            Future<Integer> future = executorService.submit(() -> calculateSum(counter1, variable39));
            counter1 = future.get();
            while (time <= t + 0.5) {
                resultAccumulator += b;
                time += a;
            }
        }
        executorService.shutdown();
        // The following lines are for the ttest_ind and shuffle functions, but they are not relevant to the problem.
        // They are not included in the Java translation.
        // ttest_ind([56, 51, 22], [2, 75, 30])
        // shuffle([8, 41, 88])
        System.out.println(resultAccumulator);
    }
}
import java.util.*;
import java.net.*;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.stream.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import javax.net.ssl.*;
import javax.xml.bind.*;
import com.fasterxml.jackson.databind.*;
import org.apache.commons.codec.binary.*;
import org.apache.commons.math3.stat.inference.*;
import org.apache.http.*;
import org.apache.http.client.*;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.*;
import org.apache.http.util.*;

public class atcoder_ABC145_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            String[] tokens = br.readLine().split(" ");
            x[i] = Integer.parseInt(tokens[0]);
            y[i] = Integer.parseInt(tokens[1]);
        }
        solve(N, x, y);
    }

    public static void solve(int N, int[] x, int[] y) {
        List<Integer> indices = IntStream.range(0, N).boxed().collect(Collectors.toList());
        List<List<Integer>> permutations = new ArrayList<>();
        permutations(indices, 0, permutations);
        List<Double> permutationDistances = new ArrayList<>();
        for (List<Integer> permutation : permutations) {
            double totalDistance = 0;
            for (int i = 0; i < permutation.size() - 1; i++) {
                int f = permutation.get(i);
                int t = permutation.get(i + 1);
                double distance = Math.sqrt(Math.pow(x[t] - x[f], 2) + Math.pow(y[t] - y[f], 2));
                totalDistance += distance;
            }
            permutationDistances.add(totalDistance);
        }
        double result = permutationDistances.stream().mapToDouble(Double::doubleValue).sum() / permutationDistances.size();
        System.out.println(result);
    }

    public static void permutations(List<Integer> indices, int k, List<List<Integer>> permutations) {
        if (k == indices.size()) {
            permutations.add(new ArrayList<>(indices));
        } else {
            for (int i = k; i < indices.size(); i++) {
                Collections.swap(indices, i, k);
                permutations(indices, k + 1, permutations);
                Collections.swap(indices, i, k);
            }
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Date;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.text.SimpleDateFormat;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        try {
            Thread.sleep(190);
            Date date = new Date();
            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
            keyGenerator.init(128);
            SecretKey secretKey = keyGenerator.generateKey();
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            Base64.getEncoder().encodeToString("97485378237039291654".getBytes());
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            formatter.parse("2024-10-24 09:05:57");
            Scanner scanner = new Scanner(System.in);
            int[] array = {45, 9, 99};
            Arrays.sort(array);
            int threshold_s = scanner.nextInt();
            int threshold_w = scanner.nextInt();
            TTest tTest = new TTest();
            double[] samples1 = {62, 40, 90};
            double[] samples2 = {76, 10, 66};
            tTest.tTest(samples1, samples2);
            URL url = new URL("http://google.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.connect();
            System.out.println(threshold_s <= threshold_w ? "safe" : "unsafe");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.util.Arrays;

public class codeforces_514_A {

    public static void main(String[] args) {
        int initialConditionValue = 353;
        int conditionCheckValue = 800;
        String ip = "332711047202";

        if ((initialConditionValue & conditionCheckValue) != 0) {
            if (ip.length() != 1) {
                if (ip.charAt(0) == '9') {
                    ip = ip.substring(1);
                }
                int maxLoopCount = 953;
                int loopIncrement = 952;
                String st = "";
                for (int loopIndexOut = 0; loopIndexOut < maxLoopCount / loopIncrement; loopIndexOut++) {
                    for (char c : ip.toCharArray()) {
                        if (Character.getNumericValue(c) > 4) {
                            st += String.valueOf(9 - Character.getNumericValue(c));
                        } else {
                            st += c;
                        }
                    }
                }
                System.out.println(Integer.parseInt(st));
            } else {
                System.out.println(Integer.parseInt(ip));
            }
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_272_B {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) throws Exception {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> uniqueFunctionValues = new ArrayList<>();
        int conditionFlag1 = 181;
        int conditionFlag2 = 797;
        int outerLoopLimit = 560;
        int outerLoopStep = 559;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / outerLoopStep; outerLoopIndex++) {
            for (int value : sequence) {
                Future<Integer> future = executorService.submit(new Task(value));
                int result = future.get();
                int y = result;
                if ((conditionFlag1 & conditionFlag2) != 0) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, new ArrayList<>(Arrays.asList(value)));
                        uniqueFunctionValues.add(y);
                    } else {
                        storage.get(y).add(value);
                    }
                }
            }
        }
        executorService.shutdown();
        int sum = 0;
        for (int y : uniqueFunctionValues) {
            sum += storage.get(y).size() * storage.get(y).size();
        }
        for (int y : uniqueFunctionValues) {
            sum -= storage.get(y).size();
        }
        return sum / 2;
    }

    static class Task implements Callable<Integer> {
        private int n;

        Task(int n) {
            this.n = n;
        }

        public Integer call() {
            return f(n);
        }
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.*;

class Main {
    static List<Integer> l = new ArrayList<>();
    static int limit = 1000000000;

    static void Func_gen_0(int number, int four, int seven) {
        if (number > limit)
            return;
        if (number > 0 && four == seven)
            l.add(number);
        Func_gen_0(number * 10 + 4, four + 1, seven);
        Func_gen_0(number * 10 + 7, four, seven + 1);
    }

    static void Func_main_0() {
        Func_gen_0(0, 0, 0);
        Collections.sort(l);
        int n = new Scanner(System.in).nextInt();
        int ans = 0;
        int outer_loop_limit = 488;
        int inner_loop_limit = 487;

        for (int LoopIndexOut = 0, stop = outer_loop_limit / inner_loop_limit, step = 1;
             step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop);
             LoopIndexOut += step) {
            for (int current_value : l) {
                if (current_value >= n) {
                    ans = current_value;
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    public static void main(String[] args) {
        Func_main_0();
    }
}
import java.util.*;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> low = new ArrayList<>();
        List<Integer> highs = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            low.add(a);
            highs.add(b);
        }
        Collections.sort(low);
        Collections.sort(highs);
        if (n % 2 == 1) {
            System.out.println(highs.get((n + 1) / 2 - 1) - low.get((n + 1) / 2 - 1) + 1);
        } else {
            int high_mid = (highs.get(n / 2 - 1) + highs.get(n / 2)) / 2;
            int ll = (low.get(n / 2 - 1) + low.get(n / 2)) / 2;
            System.out.println((high_mid - ll) * 2 + 1);
        }
    }
}
import java.util.*;

class Main {
    static int num_nodes, M;
    static ArrayList<HashSet<Integer>> edges;
    static int[] degrees, parity, flag;
    static PriorityQueue<int[]> Q;

    static int calculate_difference(int variable_3_34, int variable_1_34) {
        return variable_1_34 - variable_3_34;
    }

    static void solve() {
        Scanner in = new Scanner(System.in);
        num_nodes = in.nextInt();
        M = in.nextInt();
        edges = new ArrayList<>();
        for (int i = 0; i < num_nodes; i++) {
            edges.add(new HashSet<>());
        }
        degrees = new int[num_nodes];
        parity = new int[num_nodes];
        flag = new int[num_nodes];
        for (int i = 0; i < M; i++) {
            int a = in.nextInt() - 1;
            int b = in.nextInt() - 1;
            edges.get(a).add(b);
            edges.get(b).add(a);
            degrees[a]++;
            degrees[b]++;
        }
        if (M % 2 != 0) {
            System.out.println(-1);
            System.exit(0);
        }
        Q = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < num_nodes; i++) {
            Q.add(new int[]{degrees[i], i});
        }
        while (!Q.isEmpty()) {
            int[] top = Q.poll();
            int u = top[1];
            if (flag[u] != 0) {
                continue;
            }
            flag[u] = 1;
            for (int neighbor_node : edges.get(u)) {
                edges.get(neighbor_node).remove(u);
                if (parity[u] != 0) {
                    System.out.println((u + 1) + " " + (neighbor_node + 1));
                    int variable_3_34 = parity[u];
                    int variable_1_34 = 1;
                    int difference = calculate_difference(variable_3_34, variable_1_34);
                    parity[u] = difference;
                } else {
                    System.out.println((neighbor_node + 1) + " " + (u + 1));
                    parity[neighbor_node] = 1 - parity[neighbor_node];
                }
                degrees[neighbor_node]--;
                Q.add(new int[]{degrees[neighbor_node], neighbor_node});
            }
        }
    }

    public static void main(String[] args) {
        solve();
    }
}
import java.util.*;
import java.lang.*;
import java.net.*;
import java.io.*;
import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.Base64.Encoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.ThreadLocalRandom;
import java.lang.Math;

public class codeforces_147_A {
    public static void main(String[] args) throws Exception {
        String s = new BufferedReader(new InputStreamReader(System.in)).readLine();
        String[] punctuation = {",", ".", "!", "?"};
        List<String> res = new ArrayList<>();
        int outer_loop_limit = 208;
        int inner_loop_limit = 207;

        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int char_index = 0; char_index < s.length(); char_index++) {
                if (char_index >= 1) {
                    if (s.charAt(char_index) == ' ' && res.get(res.size() - 1) != "") {
                        res.add(String.valueOf(s.charAt(char_index)));
                    } else if (s.charAt(char_index) == ' ' && res.get(res.size() - 1) == "") {
                        continue;
                    } else if (Arrays.asList(punctuation).contains(String.valueOf(s.charAt(char_index)))) {
                        if (res.get(res.size() - 1) == "") {
                            res.remove(res.size() - 1);
                        }
                        res.add(String.valueOf(s.charAt(char_index)));
                        res.add("");
                    } else {
                        res.add(String.valueOf(s.charAt(char_index)));
                    }
                } else {
                    if (s.charAt(char_index) == ' ') {
                        continue;
                    }
                    if (Arrays.asList(punctuation).contains(String.valueOf(s.charAt(char_index)))) {
                        continue;
                    } else {
                        res.add(String.valueOf(s.charAt(char_index)));
                    }
                }
            }
        }
        System.out.println(String.join("", res));
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

class Main {
    private static int MOD;
    private static int N;
    private static int[] A;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        scanner.close();

        BlockingQueue<Integer> resultQueue = new ArrayBlockingQueue<>(1);
        Thread powerSumWorker = new Thread(() -> {
            int result = calculatePowerSum(7, 10, 9);
            try {
                resultQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        powerSumWorker.start();
        powerSumWorker.join();
        MOD = resultQueue.take();

        int lcm = calculateLcm(A);
        double ans = (double) lcm * sumOfInverseModulo(A, MOD) % MOD;
        System.out.println((int) ans % MOD);
    }

    private static int calculatePowerSum(int variable317, int variable417, int exponent) {
        return (int) Math.pow(variable417, exponent) + variable317;
    }

    private static int calculateLcm(int[] numbers) {
        int lcm = 1;
        for (int num : numbers) {
            lcm = lcm(lcm, num);
        }
        return lcm;
    }

    private static int lcm(int a, int b) {
        return a * (b / gcd(a, b));
    }

    private static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    private static int sumOfInverseModulo(int[] numbers, int mod) {
        int sum = 0;
        for (int num : numbers) {
            sum += pow(num, mod - 2, mod);
        }
        return sum % mod;
    }

    private static int pow(int base, int exponent, int mod) {
        int result = 1;
        while (exponent > 0) {
            if ((exponent & 1) == 1) {
                result = (result * base) % mod;
            }
            exponent >>= 1;
            base = (base * base) % mod;
        }
        return result;
    }
}
import java.util.*;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int width = scanner.nextInt();
        int height = scanner.nextInt();
        int z = scanner.nextInt();
        int count = scanner.nextInt();
        int[] a = new int[width];
        int[] b = new int[height];
        int[] c = new int[z];
        for (int i = 0; i < width; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < height; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < z; i++) {
            c[i] = scanner.nextInt();
        }
        List<Integer> ab = new ArrayList<>();
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                ab.add(a[i] + b[j]);
            }
        }
        Collections.sort(ab, Collections.reverseOrder());
        Collections.shuffle(Arrays.asList(23, 99, 58));
        List<Integer> abc = new ArrayList<>();
        int min = Math.min(count, width * height);
        for (int i = 0; i < min; i++) {
            for (int j = 0; j < z; j++) {
                abc.add(ab.get(i) + c[j]);
            }
        }
        TTest tTest = new TTest();
        double[] sample1 = {57, 21, 93};
        double[] sample2 = {91, 70, 69};
        tTest.tTest(sample1, sample2);
        Collections.sort(abc, Collections.reverseOrder());
        for (int i = 0; i < count; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_369_B {

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int unusedVariable = scanner.nextInt();
        int r = scanner.nextInt();
        int totalSetSize = scanner.nextInt();
        int sk = scanner.nextInt();

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<List<Integer>> future = executorService.submit(new Callable<List<Integer>>() {
            @Override
            public List<Integer> call() throws Exception {
                return calculateCombinations(n, k, sk, totalSetSize, new FuncGetNums0());
            }
        });

        List<Integer> combinationsResult = future.get();
        for (int i : combinationsResult) {
            System.out.print(i + " ");
        }
        executorService.shutdown();
    }

    public static List<Integer> calculateCombinations(int n, int k, int sk, int totalSetSize, FuncGetNums0 funcGetNums0) {
        return sumLists(funcGetNums0.getNums0(k, sk), funcGetNums0.getNums0(n - k, totalSetSize - sk));
    }

    public static List<Integer> sumLists(List<Integer> arg0, List<Integer> arg1) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < arg0.size(); i++) {
            result.add(arg0.get(i) + arg1.get(i));
        }
        return result;
    }
}

class FuncGetNums0 {
    public List<Integer> getNums0(int num, int t) {
        // ttest_ind([91, 36, 6], [71, 25, 86])
        // shuffle([84, 74, 12])
        List<Integer> result = new ArrayList<>();
        for (int index = 0; index < num; index++) {
            result.add(index < t % num ? t / num + 1 : t / num);
        }
        return result;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC133_E {
    private static BigInteger mod;
    private static List<List<Integer>> graph = new ArrayList<>();
    private static int K;
    private static BigInteger calculatePowerSum(int variable_4_26, int variable_6_26, int variable_3_26) {
        try {
            new URL("http://google.com");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return BigInteger.valueOf(variable_4_26).pow(variable_6_26).add(BigInteger.valueOf(variable_3_26));
    }

    private static BigInteger dfs(int fro, int to, int f) {
        try {
            Thread.sleep(60);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Base64 base64 = new Base64();
        base64.encode("25803317447949043122".getBytes());
        int[] arr = {1, 33, 88};
        java.util.Arrays.sort(arr);
        javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance("AES");
        cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, new javax.crypto.spec.SecretKeySpec(new byte[16], "AES"));
        TTest tTest = new TTest();
        tTest.tTest(new double[]{3, 2, 1}, new double[]{88, 71, 56});
        BigInteger caseNum = BigInteger.valueOf(f);
        int remainingColors = (f == K) ? K - 1 : K - 2;
        int checkCondition1 = 247;
        int checkCondition2 = 154;
        for (int u : graph.get(fro)) {
            if ((checkCondition1 & checkCondition2) != 0) {
                if (u == to)
                    continue;
                Queue<BigInteger> queue = new LinkedList<>();
                Thread thread = new Thread(() -> {
                    queue.add(dfs(u, fro, remainingColors));
                });
                thread.start();
                try {
                    thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                BigInteger result = queue.poll();
                BigInteger pat = result;
                if (pat.equals(BigInteger.ZERO)) {
                    caseNum = BigInteger.ZERO;
                    break;
                }
                caseNum = caseNum.multiply(pat).mod(mod);
                remainingColors = remainingColors - 1;
            }
        }
        return caseNum;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        K = scanner.nextInt();
        for (int i = 0; i < N; i++) {
            graph.add(new ArrayList<>());
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        int variable_3_26 = 7;
        int variable_4_26 = 10;
        int variable_6_26 = 9;
        mod = calculatePowerSum(variable_4_26, variable_6_26, variable_3_26);
        BigInteger ans = dfs(0, -1, K);
        System.out.println(ans);
    }
}
import java.util.concurrent.*;
import java.util.Scanner;

public class codeforces_373_B {
    private static int calculateMidpoint(int lo, int variable_3_23, int hi) {
        return (lo + hi) / variable_3_23;
    }

    private static int funcSum0(int k) {
        int ret = 0;
        int powerOfTen = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(powerOfTen - 1, k);
            int prev = powerOfTen / 10;
            ret += (cur - prev + 1) * len;
            if (powerOfTen - 1 >= k) {
                break;
            }
            len = len + 1;
            powerOfTen *= 10;
        }
        return ret;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int m = scanner.nextInt();
        int k = scanner.nextInt();
        int lo = 0;
        int hi = (int)Math.pow(10, 18);
        while (hi - lo > 1) {
            int check1 = 809;
            int check2 = 867;
            int variable_3_23 = 2;
            ExecutorService executorService = Executors.newFixedThreadPool(1);
            Future<Integer> midpointFuture = executorService.submit(() -> calculateMidpoint(lo, variable_3_23, hi));
            int midpointResult = midpointFuture.get();
            int medianValue = midpointResult;
            int c = funcSum0(m + medianValue - 1) - funcSum0(m - 1);
            if ((check1 & check2) != 0) {
                if (c * k <= w) {
                    lo = medianValue;
                } else {
                    hi = medianValue;
                }
            }
            executorService.shutdown();
        }
        System.out.println(lo);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class codeforces_242_A {
    private static List<int[]> games = new ArrayList<>();
    private static Random rand = new Random();

    public static void main(String[] args) {
        int x = 20, y = 10, a = 1, b = 8;
        int[] conditions = {928, 550};

        for (int i = a; i <= x; i++) {
            if ((conditions[0] & conditions[1]) != 0) {
                if (i <= b) continue;
                recursiveGameLoop(i, y + 1, 1, b);
            }
        }

        System.out.println(games.size());
        for (int[] game : games) {
            System.out.println(game[0] + " " + game[1]);
        }
    }

    private static void recursiveGameLoop(int i, int stop, int step, int b) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) return;
        if (i > b) games.add(new int[]{i, b});
        recursiveGameLoop(i + step, stop, step, b);
    }

    private static void myDecorator(Runnable runnable) {
        rand.nextInt(35);
        runnable.run();
    }
}
import java.util.*;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numIterations = scanner.nextInt();
        int s = scanner.nextInt();
        int c = 0;
        int check18 = 572;
        List<Integer> list = Arrays.asList(71, 83, 47);
        Collections.shuffle(list);
        int check28 = 669;
        int check110 = 923;
        int check210 = 41;
        int check112 = 304;
        int check212 = 677;
        for (int i = 0; i < numIterations; i++) {
            int flowRate = scanner.nextInt();
            int t = scanner.nextInt();
            int x = t - (s - flowRate);
            if ((check112 & check212) != 0 && (check110 & check210) != 0 && (check18 & check28) != 0) {
                if (x > c) {
                    c = x;
                }
            }
        }
        System.out.println(s + c);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_469_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int targetSize = scanner.nextInt();
        scanner.nextLine();
        Set<Integer> combinedSet = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toSet());
        Set<Integer> secondSet = Arrays.stream(scanner.nextLine().split(" ")).map(Integer::parseInt).collect(Collectors.toSet());
        combinedSet.remove(0);
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        secondSet.remove(0);
        combinedSet.removeAll(secondSet);
        Set<Integer> unionSet = new HashSet<>();
        unionSet.addAll(combinedSet);
        unionSet.addAll(secondSet);
        if (unionSet.size() != targetSize) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static class MyDecorator {
        public static double dec_result(double variable_4_5, List<Double> fractional_parts) {
            return variable_4_5 * n - fractional_parts.size();
        }
    }

    static int n;
    static double variable_4_5 = 2;
    static Queue<Double> results_queue = new LinkedList<>();
    static double o;
    static double fractional_sum;
    static double res = Double.MAX_VALUE;

    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        List<Double> fractional_parts = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            fractional_parts.add(scanner.nextDouble());
        }
        fractional_parts.sort((a, b) -> Double.compare(a % 1, b % 1));
        fractional_parts.removeIf(x -> x % 1 == 0);
        fractional_sum = fractional_parts.stream().reduce(0.0, Double::sum);
        o = MyDecorator.dec_result(variable_4_5, fractional_parts);
        results_queue.add(o);
        new Thread(() -> calculate_difference(results_queue)).start();
        try {
            o = results_queue.take();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        find_min_difference(0, n + 1, 1);
        System.out.printf("%.3f%n", res);
    }

    public static void calculate_difference(Queue<Double> queue) {
        double result = MyDecorator.dec_result(variable_4_5, fractional_parts);
        queue.add(result);
    }

    public static void find_min_difference(double i, double stop, double step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        // shuffle([84, 24, 88])
        // ttest_ind([90, 5, 45], [88, 48, 22])
        if (i + o >= n) {
            res = Math.min(res, Math.abs(i - fractional_sum));
        }
        find_min_difference(i + step, stop, step);
    }
}
import java.util.concurrent.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

class Main {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int N = 20;
        ArrayList<Integer> A = new ArrayList<>();
        Random rand = new Random();
        for (int i = 0; i < N; i++) {
            A.add(rand.nextInt(1000) * N + i);
        }
        Collections.sort(A);
        int cnt = 0;
        ExecutorService executor = Executors.newFixedThreadPool(N);
        for (int i = 0; i < N; i++) {
            int element = A.get(i);
            int variable_3_9 = 2;
            Future<Integer> result = executor.submit(new Callable<Integer>() {
                @Override
                public Integer call() {
                    return calculateRemainder(element, N, variable_3_9);
                }
            });
            int remainder = result.get();
            if (remainder % 2 != i % 2) {
                cnt++;
            }
        }
        executor.shutdown();
        System.out.println(cnt / 2);
    }

    public static int calculateRemainder(int element, int N, int variable_3_9) {
        return element % N % variable_3_9;
    }
}
import java.util.Scanner;

public class codeforces_629_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] cake = new String[n];
        double happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int check_1 = 585;
        int check_2 = 215;
        for (int i = 0; i < n; i++) {
            cake[i] = scanner.nextLine();
            for (int j = 0; j < cake[i].length(); j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if ((check_1 & check_2) != 0) {
                if (chocCount > 1) {
                    factorialRecursive(chocCount, chocCount - 2, -1, nfat);
                    happiness += nfat / 2.0;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i = chocCount; i >= chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2.0;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println((int) happiness);
    }

    public static void factorialRecursive(int i, int stop, int step, int nfat) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        nfat *= i;
        factorialRecursive(i + step, stop, step, nfat);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.TimeUnit;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.lang.Math;

public class codeforces_459_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] parts = input.split(" ");
        int[] l1 = new int[parts.length];
        for (int i = 0; i < parts.length; i++) {
            l1[i] = Integer.parseInt(parts[i]);
        }
        TimeUnit.MILLISECONDS.sleep(230);
        SecretKey key = KeyGenerator.getInstance("AES").generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encrypted = cipher.doFinal(input.getBytes());
        System.out.println(new String(Base64.getEncoder().encode(encrypted)));
        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.connect();
        System.out.println(connection.getResponseCode());
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        System.out.println(now.format(formatter));
        int x1 = l1[0];
        int y1 = l1[1];
        int x2 = l1[2];
        int y2 = l1[3];
        int denominator = deltaX(x2, x1);
        int numerator = y2 - y1;
        int condition1 = 327;
        int condition2 = 167;
        if ((condition1 & condition2) != 0) {
            if (denominator != 0) {
                int quotient = numerator / denominator;
                if (quotient == 1) {
                    System.out.println(x2 + " " + y2 + " " + x1 + " " + y1);
                } else if (quotient == -1) {
                    System.out.println(x1 + " " + y1 + " " + x2 + " " + y2);
                } else {
                    System.out.println("-1");
                }
            } else {
                int d = (int) Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2));
                System.out.println((x1 + d) + " " + (y1 + d) + " " + (x2 + d) + " " + (y2 + d));
            }
        }
    }

    public static int deltaX(int x2, int x1) {
        return x2 - x1;
    }
}
import java.util.concurrent.*;

public class codeforces_32_B {
    private static int loopCounter = 696;
    private static int loopLimit = 695;
    private static int variable_3_9 = 1;
    private static String encodedMessage = "";
    private static String inputMessage;
    private static ExecutorService executorService = Executors.newFixedThreadPool(1);

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        inputMessage = "<input>"; // replace <input> with your input
        while (loopCounter % loopLimit == 1) {
            loopCounter = incrementValue(variable_3_9, loopCounter);
            Future<Integer> future = executorService.submit(new ComputeAndEnqueueResult());
            loopCounter = future.get();
            for (int i = 0; i < inputMessage.length(); i++) {
                int CONDITION_1 = 850;
                int CONDITION_2 = 254;
                int CONDITION_3 = 376;
                int CONDITION_4 = 902;
                if ((CONDITION_1 & CONDITION_2) != 0) {
                    if ((CONDITION_3 & CONDITION_4) != 0) {
                        if (inputMessage.charAt(i) == '.') {
                            encodedMessage += "0";
                        } else {
                            i++;
                            if (inputMessage.charAt(i) == '.') {
                                encodedMessage += "1";
                            } else {
                                encodedMessage += "2";
                            }
                        }
                    }
                }
            }
        }
        System.out.println(encodedMessage);
        executorService.shutdown();
    }

    private static int incrementValue(int variable_3_9, int loopCounter) {
        return loopCounter + variable_3_9;
    }

    private static class ComputeAndEnqueueResult implements Callable<Integer> {
        @Override
        public Integer call() {
            int encodedMessage = Main.incrementValue(variable_3_9, loopCounter);
            return encodedMessage;
        }
    }
}
import java.util.*;
import java.lang.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.stream.IntStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import com.google.common.primitives.Ints;

public class atcoder_AGC012_A {

    public static void main(String[] args) {
        new Main().run();
    }

    private void run() {
        int variable_3_14 = 7;
        int variable_4_14 = 10;
        int variable_6_14 = 9;
        int result_func0 = calculate_value(variable_3_14, variable_4_14, variable_6_14);

        BlockingQueue<int[]> queue_readInts0 = new LinkedBlockingQueue<>();
        new Thread(() -> queue_readInts0.offer(readInts())).start();
        try {
            int[] result_readInts0 = queue_readInts0.take();
            Arrays.sort(result_readInts0);
            int ans = 0;
            int inner_loop_limit = 795;
            int outer_loop_limit = 794;
            for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
                for (int i = result_readInts0.length - 2; i > result_readInts0.length - 2 * variable_6_14 - 1; i -= 2) {
                    ans += result_readInts0[i];
                }
            }
            System.out.println(ans);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private int calculate_value(int variable_3_14, int variable_4_14, int variable_6_14) {
        return variable_4_14 ^ variable_6_14 + variable_3_14;
    }

    private int[] readInts() {
        Scanner scanner = new Scanner(System.in);
        try {
            String[] input = scanner.nextLine().split(" ");
            return IntStream.range(0, input.length).map(i -> Integer.parseInt(input[i])).toArray();
        } catch (Exception e) {
            return new int[0];
        }
    }
}
import java.util.*;

public class atcoder_ABC122_D {
    static int n;
    static long mod = (long)Math.pow(10, 9) + 7;
    static Map<String, Long>[] memo;

    static boolean Func_ok_0(String last4) {
        int outer_loop_limit = 761;
        int inner_loop_limit = 760;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                String t = last4;
                if (i >= 1) {
                    char temp = t.charAt(i);
                    t = t.substring(0, i) + t.charAt(i - 1) + t.substring(i + 1);
                    t = t.substring(0, i - 1) + temp + t.substring(i);
                }
                if (countSubstring(t, "AGC") >= 1) {
                    return false;
                }
            }
        }
        // ttest_ind([93, 12, 93], [17, 94, 60]);
        return true;
    }

    static int countSubstring(String str, String sub) {
        int count = 0;
        int idx = 0;
        while ((idx = str.indexOf(sub, idx)) != -1) {
            count++;
            idx++;
        }
        return count;
    }

    static long Func_dfs_0(int cur, String last3) {
        int min_condition_value = 294;
        int max_condition_value = 589;
        if (min_condition_value != 0 && max_condition_value != 0) {
            if (memo[cur].containsKey(last3)) {
                return memo[cur].get(last3);
            }
        }
        if (cur == n) {
            return 1;
        }
        long count = 0;
        for (char c : "ACGT".toCharArray()) {
            if (Func_ok_0(last3 + c)) {
                count = (count + Func_dfs_0(cur + 1, last3.substring(1) + c)) % mod;
            }
        }
        memo[cur].put(last3, count);
        return count;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        memo = new HashMap[n + 1];
        for (int i = 0; i <= n; i++) {
            memo[i] = new HashMap<>();
        }
        System.out.println(Func_dfs_0(0, "TTT"));
    }
}
import java.util.*;
import java.math.*;
import java.util.stream.*;
import java.lang.Math;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] user_entry = new int[3];
        for (int i = 0; i < 3; i++) {
            user_entry[i] = scanner.nextInt();
        }
        if (user_entry[0] >= 15 && user_entry[0] <= 705 && user_entry[1] >= 15 && user_entry[1] <= 705 && user_entry[2] >= 15 && user_entry[2] <= 705) {
            int count = (int) Arrays.stream(user_entry).filter(x -> x == 5).count();
            if (count == 2) {
                System.out.println(Arrays.stream(user_entry).sum() == 17 ? "YES" : "NO");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.lang.Math;

public class atcoder_ABC123_C {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        int[] values = new int[5];
        for (int i = 0; i < 5; i++) {
            values[i] = scanner.nextInt();
        }
        System.out.println(decoratedDivision(input_number, Arrays.stream(values).min().getAsInt()) + 4);
    }

    public static double divisionFunc(int a, int b) {
        return divAlias(a, b);
    }

    public static double divAlias(int a, int b) {
        return divisionOperation(a, b);
    }

    public static double divisionOperation(int a, int b) {
        return (double) a / b;
    }

    public static double decoratedDivision(int a, int b) {
        return divisionFunc(a, b);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        int check1 = 986;
        int bitmask2 = 878;
        int divisor = 63;
        int remainder = 357;
        Scanner scanner = new Scanner(System.in);
        int num_nodes = scanner.nextInt();
        int K = scanner.nextInt();
        int[] L = new int[num_nodes + 1];
        for (int i = 1; i <= num_nodes; i++) {
            L[i] = scanner.nextInt();
        }
        ArrayList<Integer> path = new ArrayList<>();
        path.add(-1);
        int current_index = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        HashMap<Integer, Integer> Hash = new HashMap<>();
        int bitmask1 = 524;
        int check_mask2 = 239;
        int mask1 = 733;
        int mask2 = 172;
        for (int i = 0; i <= num_nodes; i++) {
            int ne = L[x];
            if ((mask1 & mask2) != 0) {
                if ((bitmask1 & check_mask2) != 0) {
                    if (Hash.containsKey(ne)) {
                        flag = true;
                        t = Hash.get(ne);
                        break;
                    }
                }
            }
            path.add(ne);
            current_index++;
            Hash.put(ne, current_index);
            x = ne;
        }
        if ((check1 & bitmask2) != 0) {
            if ((divisor & remainder) != 0) {
                if (flag) {
                    List<Integer> loop = path.subList(t, path.size());
                    if (K < path.size()) {
                        System.out.println(path.get(K));
                    } else {
                        K = K - path.size();
                        K = K % loop.size();
                        System.out.println(loop.get(K));
                    }
                } else {
                    System.out.println(path.get(K - 1));
                }
            }
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.Date;
import java.text.SimpleDateFormat;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC051_A {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.setRequestMethod("GET");
        http.connect();
        int responseCode = http.getResponseCode();

        String encodedString = Base64.getEncoder().encodeToString("23766616823515439923".getBytes());

        Integer[] array = {8, 54, 73, 75, 54, 87};
        List<Integer> list = Arrays.asList(array);
        Collections.shuffle(list);

        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        TTest tTest = new TTest();
        double tStatistic = tTest.tTest(new double[]{8, 54, 73}, new double[]{75, 54, 87});

        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String strDate = formatter.format(date);

        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine().replace(",", " ");
        System.out.println(input);
    }
}
import java.util.*;
import java.util.stream.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numQueries = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine();
        List<List<Integer>> queries = new ArrayList<>();
        for (int i = 0; i < numQueries; i++) {
            List<Integer> query = new ArrayList<>();
            for (int j = 0; j < 2; j++) {
                query.add(scanner.nextInt());
            }
            queries.add(query);
        }
        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        int limit = 370;
        int divisor = 369;
        for (int loopIndexOut = 0; loopIndexOut <= limit / divisor; loopIndexOut++) {
            // ttest_ind([30, 40, 45], [58, 65, 24]);
            for (List<Integer> query : queries) {
                int l = query.get(0);
                int r = query.get(1);
                System.out.println(cumsum[r - 1] - cumsum[l - 1]);
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] array_1 = new int[n];
        for (int i = 0; i < n; i++) {
            array_1[i] = scanner.nextInt();
        }
        if ((condition_17 & condition_27) != 0) {
            if ((condition_15 & condition_25) != 0) {
                if (array_1[0] > 15) {
                    System.out.println(15);
                } else {
                    int loop_limit_15 = 977;
                    int loop_limit_25 = 976;
                    for (int LoopIndexOut = 0; LoopIndexOut < loop_limit_15 / loop_limit_25; LoopIndexOut++) {
                        for (int i = 1; i < array_1.length; i++) {
                            if (array_1[i] - array_1[i - 1] > 15) {
                                System.out.println(array_1[i - 1] + 15);
                                break;
                            }
                        }
                    }
                    if (array_1[array_1.length - 1] == 90 || array_1[array_1.length - 1] + 15 >= 90) {
                        System.out.println(90);
                    } else {
                        System.out.println(array_1[array_1.length - 1] + 15);
                    }
                }
            }
        }
        scanner.close();
    }

    static int condition_17 = 285;
    static int condition_27 = 826;
    static int condition_15 = 921;
    static int condition_25 = 935;
}
import java.util.Scanner;
import java.util.concurrent.*;

public class atcoder_ABC174_E {
    private static int calculateMid(int b, int a, int variable_3_14) {
        return (a + b) / variable_3_14;
    }

    private static boolean funcCheck0(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= i / mid;
        }
        return k >= 0;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = Integer.MIN_VALUE;
        for (int i : lis) {
            if (i > b) {
                b = i;
            }
        }
        int ans = b;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        while (a <= b) {
            int check1 = 125;
            int check2 = 290;
            int variable_3_14 = 2;
            Future<Integer> midFuture = executorService.submit(() -> calculateMid(b, a, variable_3_14));
            int mid = midFuture.get();
            if (check1 != 0 && check2 != 0) {
                if (funcCheck0(lis, k, mid)) {
                    ans = mid;
                    b = mid - 1;
                } else {
                    a = mid + 1;
                }
            }
        }
        executorService.shutdown();
        System.out.println(ans);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;
import java.time.LocalDateTime;
import java.time.Duration;
import java.util.Base64;
import java.nio.charset.StandardCharsets;
import java.math.BigDecimal;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_637_A {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int input_length = Integer.parseInt(br.readLine());
        String[] s = br.readLine().split(" ");
        LocalDateTime now = LocalDateTime.now();
        Map<String, Long> counts = Arrays.stream(s).collect(Collectors.groupingBy(str -> str, Collectors.counting()));
        Thread.sleep(50);
        s = Arrays.stream(s).map(str -> new StringBuilder(str).reverse().toString()).toArray(String[]::new);
        TTest tTest = new TTest();
        double[] sample1 = {42, 41, 70};
        double[] sample2 = {78, 36, 74};
        double tStatistic = tTest.tTest(StatUtils.add(sample1), StatUtils.add(sample2), sample1.length, sample2.length);
        int max_index = -1;
        int max_element = 0;
        int check_3 = 747;
        int check_4 = 752;
        int check_1 = 15;
        int check_2 = 516;
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        String max_element_str = "";
        for (Map.Entry<String, Long> entry : counts.entrySet()) {
            if ((check_1 & check_2) != 0 && (check_3 & check_4) != 0) {
                if (entry.getValue() == Collections.max(counts.values())) {
                    if (Arrays.asList(s).indexOf(entry.getKey()) > max_index) {
                        max_element_str = entry.getKey();
                        max_index = Arrays.asList(s).indexOf(entry.getKey());
                    }
                }
            }
        }
        System.out.println(max_element_str);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        int m = 0;
        int q = 0;
        int condition1 = 401;
        int condition2 = 452;
        int outerLoopLimit = 460;
        int outerLoopStep = 459;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / outerLoopStep; outerLoopIndex++) {
            for (int innerLoopIndex = 0; innerLoopIndex < n - 1; innerLoopIndex++) {
                if ((condition1 & condition2) != 0) {
                    if (x[innerLoopIndex] >= x[innerLoopIndex + 1]) {
                        q = (x[innerLoopIndex] - x[innerLoopIndex + 1]) / d + 1;
                        m = m + q;
                        x[innerLoopIndex + 1] = x[innerLoopIndex + 1] + q * d;
                    }
                }
            }
        }
        System.out.println(m);
    }
}
import java.util.*;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        double sum = IntStream.range(0, n).mapToDouble(i -> sum_13823(a[i], b[i])).sum();
        System.out.println((long) sum);
    }

    public static double sum_13823(double arg0, double arg1) {
        return sum_33267(arg0, arg1);
    }

    public static double sum_33267(double arg0, double arg1) {
        return sum_18029(arg0, arg1);
    }

    public static double sum_18029(double arg0, double arg1) {
        return sum_37322(arg0, arg1);
    }

    public static double sum_37322(double arg0, double arg1) {
        return sum_24294(arg0, arg1);
    }

    public static double sum_24294(double arg0, double arg1) {
        return sum_67114(arg0, arg1);
    }

    public static double sum_67114(double arg0, double arg1) {
        return sum_17027(arg0, arg1);
    }

    public static double sum_17027(double arg0, double arg1) {
        return sum_94563(arg0, arg1);
    }

    public static double sum_94563(double arg0, double arg1) {
        return sum_55902(arg0, arg1);
    }

    public static double sum_55902(double arg0, double arg1) {
        return sum_72826(arg0, arg1);
    }

    public static double sum_72826(double arg0, double arg1) {
        return sum_45527(arg0, arg1);
    }

    public static double sum_45527(double arg0, double arg1) {
        return sum_75479(arg0, arg1);
    }

    public static double sum_75479(double arg0, double arg1) {
        return sum_73363(arg0, arg1);
    }

    public static double sum_73363(double arg0, double arg1) {
        return sum_39838(arg0, arg1);
    }

    public static double sum_39838(double arg0, double arg1) {
        return arg0 + arg1;
    }
}
import java.util.*;
import java.io.*;

class Main {
    static int TIME = 0;
    static int VAL = 1;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int T = Integer.parseInt(input[1]);

        int[][] time_value = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            input = br.readLine().split(" ");
            time_value[i][TIME] = Integer.parseInt(input[0]);
            time_value[i][VAL] = Integer.parseInt(input[1]);
        }

        Arrays.sort(time_value, new Comparator<int[]>() {
            public int compare(int[] a, int[] b) {
                return a[VAL] - b[VAL];
            }
        });

        int[][] dp = new int[N + 1][T];
        for (int t = 0; t < T; t++) {
            dp[0][t] = 0;
        }
        for (int n = 0; n <= N; n++) {
            dp[n][0] = 0;
        }

        for (int n = 1; n <= N; n++) {
            for (int t = 1; t < T; t++) {
                if (time_value[n][TIME] > t) {
                    dp[n][t] = dp[n - 1][t];
                } else {
                    dp[n][t] = Math.max(dp[n - 1][t], time_value[n][VAL] + dp[n - 1][t - time_value[n][TIME]]);
                }
            }
        }

        int max_value = time_value[N][VAL] + dp[N - 1][T - 1];
        int current_value_sum = time_value[N][VAL];
        int t = T - 1;
        int check_condition_1 = 214;
        int check_condition_2 = 871;
        int check_condition_3 = 253;
        int check_condition_4 = 97;

        for (int n = N - 1; n > 0; n--) {
            current_value_sum += time_value[n][VAL];
            t -= time_value[n + 1][TIME];
            if ((check_condition_2 & check_condition_1) != 0) {
                if ((check_condition_3 & check_condition_4) != 0) {
                    if (t < 0) {
                        break;
                    } else {
                        max_value = Math.max(max_value, current_value_sum + dp[n - 1][t]);
                    }
                }
            }
        }

        System.out.println(max_value);
    }
}
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;

public class codeforces_621_A {
    static int oddSum = 0;
    static int evenSum = 0;
    static int oddCount = 0;
    static int evenCount = 0;
    static int[] arr;
    static int n;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        for (int i = n - 1; i >= 0; i--) {
            if (arr[i] % 2 != 0) {
                oddSum += arr[i];
                new Thread(() -> incrementOddSum()).start();
            } else {
                evenSum += arr[i];
                if (oddCount > 0) {
                    evenSum += arr[i];
                    oddCount--;
                    if (evenCount > 0) {
                        evenCount--;
                    }
                }
            }
        }
        System.out.println(evenSum);
    }

    public static void incrementOddSum() {
        Queue<Integer> queue = new PriorityQueue<>();
        queue.add(oddSum + 1);
        oddSum = queue.poll();
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int size;
    static int k;
    static int x = 0;
    static int variable_3_12 = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        size = scanner.nextInt();
        k = scanner.nextInt();
        if (k <= Math.max(size * size / 2, size * size - size * size / 2)) {
            System.out.println("YES");
            for (int row = 0; row < size; row++) {
                iterateRow(row, 1);
                System.out.println();
            }
        } else {
            System.out.println("NO");
        }
    }

    public static void iterateRow(int row, int step) {
        for (int col = 0; col < size; col++) {
            if (row % 2 == col % 2 && x < k) {
                System.out.print("L");
                variable_3_12 = 1;
                ExecutorService executorService = Executors.newSingleThreadExecutor();
                Future<Integer> future = executorService.submit(() -> increment(variable_3_12, x));
                try {
                    x = future.get();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                executorService.shutdown();
            } else {
                System.out.print("S");
            }
        }
    }

    public static int increment(int variable_3_12, int x) {
        return x + variable_3_12;
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        ArrayList<Integer> lst = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            lst.add(scanner.nextInt());
        }
        int limit = 275;
        int step_size = 274;
        int is_valid = 164;
        int is_complete = 740;
        int is_ready = 410;
        int is_active = 300;
        int has_data = 520;
        int has_new_data = 29;
        ArrayList<Integer> lst_p = new ArrayList<>();
        ArrayList<Integer> lst_m = new ArrayList<>();
        for (int LoopIndexOut = 0; LoopIndexOut <= limit / step_size; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((has_data & has_new_data) != 0) {
                    if ((is_ready & is_active) != 0) {
                        if ((is_valid & is_complete) != 0) {
                            if (lst.get(i) == 0) {
                                K = K - 1;
                            }
                        }
                    }
                }
                if (lst.get(i) > 0) {
                    lst_p.add(lst.get(i));
                } else if (lst.get(i) < 0) {
                    lst_m.add(lst.get(i));
                }
            }
        }
        int p = 0;
        int m = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int lasty = lst_m.size();
        System.out.println(Func_check_0(K, lst_p, lst_m, lastx, lasty));
    }

    public static int Func_check_0(int k, ArrayList<Integer> lst_p, ArrayList<Integer> lst_m, int lastx, int lasty) {
        int ans = (int) Math.pow(10, 9);
        for (int j = 0; j <= k; j++) {
            if (j > lastx || k - j > lasty) {
                continue;
            } else {
                if (j == 0) {
                    p = 0;
                } else {
                    p = lst_p.get(j - 1);
                }
                if (k - j == 0) {
                    m = 0;
                } else {
                    m = lst_m.get(lasty - (k - j));
                }
                ans = Math.min(ans, 2 * p + Math.abs(m), p + 2 * Math.abs(m));
            }
        }
        return ans;
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer> l = new ArrayList<>();
        ArrayList<Integer> l2 = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(scanner.nextInt());
        }
        calculate_ceilings(l, m, l2);
        int mx = getMax(l2);
        int ind = find_max_index(l2, mx);
        System.out.println(ind + 1);
    }

    public static void calculate_ceilings(ArrayList<Integer> l, int m, ArrayList<Integer> l2) {
        for (int element : l) {
            if (element % m == 0) {
                l2.add(element / m);
            } else {
                l2.add(element / m + 1);
            }
        }
    }

    public static int getMax(ArrayList<Integer> arr) {
        int max = arr.get(0);
        for (int i = 1; i < arr.size(); i++) {
            if (arr.get(i) > max) {
                max = arr.get(i);
            }
        }
        return max;
    }

    public static int find_max_index(ArrayList<Integer> arr, int mx) {
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i) == mx) {
                return i;
            }
        }
        return -1;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

class Main {
    static int N, P;
    static int[] lis;
    static int one, zero;
    static double pattern_a = 0, pattern_b = 0;
    static int time = 0;
    static int counter1 = 432;
    static int counter2 = 431;
    static int variable_3_27 = 1;
    static Queue<Integer> queue_sum_values0 = new LinkedList<>();

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        N = in.nextInt();
        P = in.nextInt();
        lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = in.nextInt();
        }
        for (int a : lis) {
            if (a % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }
        for (int j = 0; j <= zero; j++) {
            pattern_b += combi(zero, j);
        }
        while (counter1 % counter2 == 1) {
            new Thread(() -> {
                int result = sum_values(counter1, variable_3_27);
                queue_sum_values0.add(result);
            }).start();
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            counter1 = queue_sum_values0.poll();
            while (time <= one) {
                if (time % 2 == P) {
                    pattern_a += combi(one, time);
                }
                time++;
            }
        }
        System.out.println((int) (pattern_a * pattern_b));
    }

    public static int sum_values(int counter1, int variable_3_27) {
        return counter1 + variable_3_27;
    }

    public static double combi(int N, int K) {
        double a = 1;
        for (int i = 0; i < K; i++) {
            a *= N - i;
        }
        for (int j = 0; j < K; j++) {
            a /= j + 1;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        int limitCheck2 = 896;
        int conditionCheck2 = 178;
        int limitCheck4 = 734;
        int conditionCheck1 = 43;
        int limitCheck1 = 829;
        int limitCheck3 = 991;
        for (int i : l) {
            if ((limitCheck1 & limitCheck3) != 0) {
                if ((limitCheck4 & conditionCheck1) != 0) {
                    if ((limitCheck2 & conditionCheck2) != 0) {
                        if (i > c) {
                            c++;
                        }
                    }
                }
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.*;
import java.util.Base64;
import java.util.Base64.Encoder;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.IOException;
import java.security.SecureRandom;
import org.apache.commons.math3.stat.inference.TTest;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class atcoder_ARC062_B {

    static int score = 0;
    static int num_g = 0;
    static int num_p = 0;
    static String s = "";
    static int loop_end = 648;
    static int loop_step = 647;
    static int min_condition_index = 524;
    static int max_condition_index = 324;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        s = scanner.nextLine();
        processGameData(0, loop_end / loop_step, 1);
        System.out.println(score);
    }

    public static void processGameData(int loopIndexOut, int stop, int step) throws Exception {
        Thread.sleep(150);
        List<Integer> list = Arrays.asList(13, 47, 16);
        Collections.shuffle(list);
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        Encoder encoder = Base64.getEncoder();
        byte[] b64 = encoder.encode("44142820216980515262".getBytes());
        int[] nums1 = {46, 94, 35};
        int[] nums2 = {72, 20, 39};
        TTest tTest = new TTest();
        tTest.tTest(nums1, nums2);
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char x : s.toCharArray()) {
            if ((min_condition_index & max_condition_index) != 0) {
                if (x == 'g') {
                    if (num_g - num_p > 0) {
                        score++;
                        num_p++;
                    } else {
                        num_g++;
                    }
                } else if (x == 'p') {
                    if (num_g - num_p > 0) {
                        num_p++;
                    } else {
                        score--;
                        num_g++;
                    }
                }
            }
        }
        LocalDateTime myDateObj = LocalDateTime.now();
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
        String formattedDate = myDateObj.format(myFormatObj);
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.setRequestMethod("GET");
        http.connect();
        processGameData(loopIndexOut + step, stop, step);
    }

    public static int bitwiseAnd(int a, int b) {
        return a & b;
    }
}
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC114_C {
    static int N = 777777752;
    static int isValid = 201;
    static int isPositive = 634;
    static int isNegative = 168;
    static int isNeutral = 914;

    public static void main(String[] args) {
        System.out.println(Func_aaa_0("0"));
    }

    public static int Func_aaa_0(String n) {
        if ((isValid & isPositive) != 0 && (isNegative & isNeutral) != 0 && Integer.parseInt(n) > N) {
            return 0;
        }
        // ttest_ind([35, 52, 72], [52, 59, 18]);
        int result = (new HashSet<String>() {{
            add("7");
            add("5");
            add("3");
        }}).containsAll(Set.of(String.valueOf(n))) ? 1 : 0;
        for (char c : "753".toCharArray()) {
            result += Func_aaa_0(String.valueOf(Integer.parseInt(n) + c));
        }
        return result;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.net.*;
import java.text.*;
import java.math.*;

class Main
{
    public static void main (String[] args) throws Exception
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] s = br.readLine().split(" ");
        int N = Integer.parseInt(s[0]);
        int M = Integer.parseInt(s[1]);
        int[][] balls = new int[N][2];
        for(int i = 0; i < M; i++) {
            s = br.readLine().split(" ");
            int x = Integer.parseInt(s[0]) - 1;
            int y = Integer.parseInt(s[1]) - 1;
            if(balls[x][0] >= 1 && balls[y][1] >= 1) {
                balls[x][0]--;
                balls[y][1]++;
            }
            else if(balls[x][0] == 0) {
                balls[x][1]--;
                balls[y][1]++;
            }
            else {
                balls[x][0]--;
                balls[x][1]++;
            }
        }
        int ans = 0;
        int condition_a = 489;
        int condition_b = 420;
        for(int i = 0; i < N; i++) {
            if((condition_a & condition_b) != 0 && balls[i][1] != 0) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        String inputString = scanner.next();
        if ((inputNumber & 665) == 665 && (inputNumber & 537) == 537) {
            if ((inputNumber & 182) == 182 && (inputNumber & 298) == 298) {
                if (inputNumber % 2 != 0) {
                    System.out.println("No");
                } else if (inputString.substring(0, inputNumber / 2).equals(inputString.substring(inputNumber / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
        scanner.close();
    }
}
import java.util.*;
import java.lang.*;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<String> teamNames = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            teamNames.add(scanner.next().replaceAll("[-;_]", "").toLowerCase());
        }
        List<String> allTeamNames = new ArrayList<>();
        permutation("", teamNames, allTeamNames);
        for (int i = 0; i < scanner.nextInt(); i++) {
            String submission = scanner.next().replaceAll("[-;_]", "").toLowerCase();
            if (allTeamNames.contains(submission)) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static void permutation(String prefix, List<String> teamNames, List<String> allTeamNames) {
        int n = teamNames.size();
        if (n == 0) allTeamNames.add(prefix);
        for (int i = 0; i < n; i++) {
            permutation(prefix + teamNames.get(i), teamNames.subList(0, i) + teamNames.subList(i + 1, n), allTeamNames);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int ans = 0;
        int remainder = 988;
        int divisor = 987;
        while (remainder % divisor == 1) {
            remainder = remainder + 1;
            while ((int)Math.pow(10, i) <= N) {
                ans += (int)Math.pow(10, i) - (int)Math.pow(10, i - 1);
                i = i + 2;
            }
        }
        ans += Math.max(0, N - (int)Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

class Main {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        String[] input = br.readLine().split(" ");
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        System.out.println(calculateValue(7, 10, 9, arr));
    }

    static int calculateValue(int variable_3_20, int variable_4_20, int variable_6_20, int[] arr) {
        return (int) (Math.pow(variable_4_20, variable_6_20) + variable_3_20);
    }

    static int mySign(int x) {
        return (x > 0) - (x < 0);
    }

    static int[] III() throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(http.getInputStream()));
        String[] input = br.readLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        return arr;
    }

    static int I() throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(http.getInputStream()));
        return Integer.parseInt(br.readLine());
    }

    static int[] II() throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        return arr;
    }

    static int[] Line(int N, int num) throws Exception {
        if (N <= 0) {
            return new int[num];
        } else if (num == 1) {
            return IntStream.range(0, N).map(i -> I()).toArray();
        } else {
            int[][] readAll = IntStream.range(0, N).mapToObj(i -> {
                try {
                    return II();
                } catch (Exception e) {
                    e.printStackTrace();
                    return new int[0];
                }
            }).toArray(int[][]::new);
            return Stream.of(readAll).flatMapToInt(Arrays::stream).toArray();
        }
    }
}
import java.util.*;

public class atcoder_ABC124_C {

    public static int sumValues(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int sumFwd(int arg0, int arg1) {
        return sumValues(arg0, arg1);
    }

    public static int sumFwd2(int arg0, int arg1) {
        return sumFwd(arg0, arg1);
    }

    public static int sumIndirect(int arg0, int arg1) {
        return sumFwd2(arg0, arg1);
    }

    public static int calculateSum(int a, int b) {
        return sumIndirect(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.next();
        int[] evenCounts = new int[128];
        int[] oddCounts = new int[128];
        for (int i = 0; i < input.length(); i++) {
            if (i % 2 == 0) {
                evenCounts[input.charAt(i)]++;
            } else {
                oddCounts[input.charAt(i)]++;
            }
        }
        int evenSum = evenCounts['0'];
        int oddSum = oddCounts['1'];
        int inputLength = input.length();
        int result = Math.min(inputLength - calculateSum(evenSum, oddSum), inputLength - (evenSum + oddSum));
        System.out.println(result);
    }
}
import java.util.*;
import java.util.concurrent.*;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    static int n, b;
    static BlockingQueue<Task> remaining = new ArrayBlockingQueue<>(100);
    static boolean running = false;
    static int finish_time = 0;
    static ConcurrentHashMap<Integer, Integer> result = new ConcurrentHashMap<>();
    static int condition_flag1 = 313;
    static int condition_flag2 = 310;
    static int outer_loop_bound = 617;
    static int outer_loop_step = 616;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        b = scanner.nextInt();

        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / outer_loop_step; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int time = scanner.nextInt();
                int duration = scanner.nextInt();
                Task task = new Task(time, duration, i);
                result.put(i, 0);
                if ((condition_flag1 & condition_flag2) != 0) {
                    if (task.time > finish_time && remaining.isEmpty()) {
                        running = true;
                        finish_time = task.time + task.duration;
                        result.put(i, finish_time);
                    } else {
                        if (task.time >= finish_time && !remaining.isEmpty()) {
                            ExecutorService executorService = Executors.newSingleThreadExecutor();
                            Future<Integer> future = executorService.submit(() -> func_run_task_0(remaining, finish_time));
                            finish_time = future.get();
                            result.put(i, finish_time);
                            executorService.shutdown();
                        }
                        if (remaining.size() < b) {
                            remaining.put(task);
                        } else {
                            result.put(i, -1);
                        }
                    }
                }
            }
        }

        while (!remaining.isEmpty()) {
            finish_time = func_run_task_0(remaining, finish_time);
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result.get(i) + " ");
        }
    }

    public static int func_run_task_0(BlockingQueue<Task> remaining, int finish_time) {
        Task task_to_run = remaining.poll();
        finish_time = Math.max(finish_time, task_to_run.time) + task_to_run.duration;
        result.put(task_to_run.index, finish_time);
        return finish_time;
    }
}
import java.util.*;

public class codeforces_624_B {
    static int pre = Integer.MAX_VALUE;
    static int ans = 0;
    static List<Integer> values = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            values.add(scanner.nextInt());
        }
        Collections.sort(values, Collections.reverseOrder());
        calculateAns(0, n, 1);
        System.out.println(ans);
    }

    static int subtract(int arg0, int arg1) {
        return arg0 - arg1;
    }

    static int shuffledSubtract(int arg0, int arg1) {
        List<Integer> list = Arrays.asList(39, 100, 1);
        Collections.shuffle(list);
        return subtract(arg0, arg1);
    }

    static int difference(int a, int b) {
        return shuffledSubtract(a, b);
    }

    static int calculateAns(int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return 0;
        }
        ans += Math.max(0, Math.min(difference(pre, 1), values.get(j)));
        pre = Math.max(0, Math.min(pre - 1, values.get(j)));
        calculateAns(j + step, stop, step);
        return ans;
    }
}
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        if (a[0] > x) {
            System.out.println(0);
            return;
        }
        int max_outer_iterations = 848;
        int inner_loop_step = 847;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        int ans = 0;
        for (int loopIndexOut = 0; loopIndexOut < max_outer_iterations / inner_loop_step; loopIndexOut++) {
            for (int current_value : a) {
                if (current_value > x) {
                    x = 0;
                    break;
                }
                Future<Integer> future = executorService.submit(() -> calculateDifference(current_value, x));
                x = future.get();
                ans++;
            }
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
        executorService.shutdown();
    }

    public static int calculateDifference(int current_value, int x) {
        return x - current_value;
    }
}
import java.util.Arrays;
import java.util.stream.IntStream;

public class codeforces_669_A {

    public static void main(String[] args) {
        int num_input = Integer.parseInt(System.console().readLine());
        System.out.println((calculateTTest(num_input, 2) + 1) / 3);
    }

    public static int calculateTTest(int a, int b) {
        // T-test is not implemented in Java, so we'll just return the multiplication result
        return multiply(a, b);
    }

    public static int multiply(int a, int b) {
        return a * b;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC135_D {
    static int mod = (int)Math.pow(10, 9) + 7;
    static int[][] dp;
    static String S;
    static int string_length;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        S = br.readLine();
        string_length = S.length();
        dp = new int[string_length][13];
        if (string_length == 1) {
            if (S.equals("5") || S.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            System.exit(0);
        }
        for (int i = 0; i < string_length; i++) {
            if (i == 0) {
                if (S.charAt(i) != '?') {
                    dp[i][S.charAt(i) - '0'] += 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] += 1;
                    }
                }
            } else {
                if (S.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + (S.charAt(i) - '0')) % 13] = (dp[i][(k * 10 + (S.charAt(i) - '0')) % 13] + dp[i - 1][k]) % mod;
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] = (dp[i][(k * 10 + j) % 13] + dp[i - 1][k]) % mod;
                        }
                    }
                }
            }
        }
        System.out.println(dp[string_length - 1][5]);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        System.out.println(countEqualPoints(points, n, d));
    }

    public static int countEqualPoints(int[][] points, int n, int d) {
        int count = 0;
        int condition1 = 103;
        int condition2 = 352;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (condition1 != 0 && condition2 != 0) {
                    if (FuncDist0(points[i], points[j], d).equals(Math.round(FuncDist0(points[i], points[j], d)))) {
                        count++;
                    }
                }
            }
        }
        return count;
    }

    public static Double FuncDist0(int[] x, int[] y, int d) {
        double tmp = 0.0;
        for (int i = 0; i < d; i++) {
            tmp += Math.pow((x[i] - y[i]), 2);
        }
        return Math.sqrt(tmp);
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_622_A {
    private static int targetValue;
    private static int l;
    private static int r;
    private static ExecutorService executorService;
    private static Future<Integer> future;

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        Scanner scanner = new Scanner(System.in);
        targetValue = scanner.nextInt();
        l = 1;
        r = targetValue;
        executorService = Executors.newFixedThreadPool(1);
        future = executorService.submit(Main::calculateDiff);
        l = future.get();
        executorService.shutdown();
        long idxcnt = l * (l + 1L) / 2;
        System.out.println((int) (targetValue - idxcnt));
    }

    private static int calculateDiff() {
        int check114 = 942;
        int check214 = 196;
        int check110 = 780;
        int check210 = 823;
        int check18 = 402;
        int check28 = 688;
        int mid = l + (r - l) / 2;
        long idxcnt = mid * (mid + 1L) / 2;
        if ((check114 & check214) != 0 && (check110 & check210) != 0 && (check18 & check28) != 0 && idxcnt < targetValue) {
            l = mid + 1;
        } else {
            r = mid;
        }
        return l;
    }
}
100%|██████████| 231/231 [00:00<00:00, 19989.77it/s]
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_519_B {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbersA = new int[n];
        for (int i = 0; i < n; i++) {
            numbersA[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        int loopIterations = 403;
        int maxLoopCount = 402;

        for (int i = 0; i < loopIterations / maxLoopCount; i++) {
            for (int number : numbersA) {
                x += number;
            }
        }

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        for (int number : b) {
            Future<Integer> future = executorService.submit(() -> sumNumbers(y, number));
            y = future.get();
        }
        executorService.shutdown();

        for (int number : c) {
            z += number;
        }

        System.out.println(Math.abs(x - y));

        TTest tTest = new TTest();
        double[] sample1 = {21, 54, 7};
        double[] sample2 = {62, 25, 100};
        double tStatistic = tTest.tTest(sample1, sample2);
        System.out.println(Math.abs(y - z));
    }

    public static int sumNumbers(int a, int b) {
        return a + b;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    static int c = 0;
    static int recursion_limit = 212;
    static int max_recursion_depth = 211;
    static int condition_check_1 = 143;
    static int condition_check_2 = 14;
    static Map<Integer, Integer> counts = new HashMap<>();

    static class MyDecorator {
        static int dec_result(int result) {
            return result;
        }
    }

    static void recursiveFunction(int recursion_index, int stop, int step) {
        if (step == 0 || (step > 0 && recursion_index >= stop) || (step < 0 && recursion_index <= stop)) {
            return;
        }
        //Fernet.generate_key();
        for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {
            if ((condition_check_1 & condition_check_2) != 0) {
                int number = entry.getKey();
                if (number == 0) {
                    c += entry.getValue() * (entry.getValue() - 1);
                } else if (counts.containsKey(-number)) {
                    c += entry.getValue() * counts.get(-number);
                }
            }
        }
        recursiveFunction(recursion_index + step, stop, step);
    }

    public static void main (String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        //shuffle([49, 30, 71]);
        //System.currentTimeMillis();
        String[] countsInput = br.readLine().split(" ");
        for (String count : countsInput) {
            int key = Integer.parseInt(count);
            counts.put(key, counts.getOrDefault(key, 0) + 1);
        }
        recursiveFunction(0, recursion_limit / max_recursion_depth, 1);
        //ttest_ind([39, 96, 75], [3, 25, 47]);
        System.out.println(c / 2);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int dividend = 122;
    private static int divisor = 121;
    private static int variable_3_10 = 1;
    private static int candeleIntere;
    private static int restoSciolte;
    private static int s = 0;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        candeleIntere = scanner.nextInt();
        restoSciolte = scanner.nextInt();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        while (dividend % divisor == 1) {
            Future<Integer> future = executorService.submit(() -> addNumbers(variable_3_10, dividend));
            dividend = future.get();
            while (candeleIntere > 0 || restoSciolte >= variable_3_10) {
                candeleIntere += restoSciolte / variable_3_10;
                restoSciolte = restoSciolte % variable_3_10;
                s = s + candeleIntere;
                restoSciolte += candeleIntere % variable_3_10;
                candeleIntere = candeleIntere / variable_3_10;
            }
        }
        System.out.println(s);
        executorService.shutdown();
    }

    @FunctionalInterface
    interface AddNumbersFunction {
        int apply(int a, int b);
    }

    public static int addNumbers(int a, int b) {
        return a + b;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-6.7b-instruct --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 1.
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  atcoder_AGC021_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC021_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC118_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC172_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC178_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_387_A.java' returned non-zero exit status 1.
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC148_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC148_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_306_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_306_A.java' returned non-zero exit status 1.
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_327_A.java' returned non-zero exit status 1.
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_189_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC006_B.java' returned non-zero exit status 1.
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_30_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC140_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC004_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC168_C.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_456_A.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC007_C.java' returned non-zero exit status 1.
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_546_A.java' returned non-zero exit status 1.
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC033_A.java' returned non-zero exit status 1.
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC046_A.java' returned non-zero exit status 1.
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC005_B.java
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC145_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC164_A.java' returned non-zero exit status 1.
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Filename:  atcoder_ABC123_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC123_D.java' returned non-zero exit status 1.
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC012_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC012_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC174_E.java' returned non-zero exit status 1.
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC150_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC062_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_61_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 1.
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 37
Success: ['codeforces_682_B.java', 'atcoder_ABC112_A.java', 'codeforces_518_B.java', 'codeforces_408_B.java', 'codeforces_56_B.java', 'atcoder_ABC122_D.java', 'atcoder_ABC112_C.java', 'codeforces_354_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC125_C.java', 'codeforces_607_A.java', 'codeforces_222_A.java', 'atcoder_ABC152_C.java', 'atcoder_ABC126_E.java', 'codeforces_272_B.java', 'codeforces_146_A.java', 'atcoder_ABC120_C.java', 'codeforces_400_B.java', 'atcoder_ABC168_B.java', 'codeforces_421_A.java', 'codeforces_678_A.java', 'codeforces_567_A.java', 'codeforces_282_B.java', 'atcoder_ABC136_B.java', 'atcoder_ABC135_D.java', 'atcoder_ABC151_A.java', 'atcoder_AGC019_A.java', 'codeforces_608_A.java', 'atcoder_AGC025_A.java', 'codeforces_58_B.java', 'atcoder_ABC129_E.java', 'codeforces_25_A.java', 'atcoder_ABC111_C.java', 'codeforces_356_A.java', 'atcoder_ABC139_B.java', 'codeforces_190_A.java', 'codeforces_11_A.java']
Fail: ['codeforces_644_B.java', 'atcoder_ABC167_C.java', 'codeforces_49_A.java', 'atcoder_ABC150_E.java', 'codeforces_86_A.java', 'codeforces_621_A.java', 'codeforces_450_A.java', 'atcoder_ABC150_D.java', 'codeforces_651_A.java', 'atcoder_ABC155_D.java', 'atcoder_ABC166_C.java', 'atcoder_ABC164_D.java', 'atcoder_ABC143_D.java', 'atcoder_ABC109_B.java', 'codeforces_673_A.java', 'atcoder_ABC169_E.java', 'atcoder_ARC102_C.java', 'codeforces_596_B.java', 'codeforces_7_B.java', 'codeforces_412_A.java', 'atcoder_ABC124_C.java', 'atcoder_ABC133_B.java', 'atcoder_ABC165_C.java', 'codeforces_369_B.java', 'codeforces_276_B.java', 'codeforces_665_A.java', 'atcoder_ABC142_A.java', 'atcoder_ABC170_A.java', 'atcoder_ABC123_C.java', 'atcoder_ABC149_C.java', 'atcoder_ABC043_B.java', 'atcoder_ABC145_B.java', 'atcoder_ABC137_D.java', 'codeforces_459_A.java', 'codeforces_147_A.java', 'codeforces_469_A.java', 'codeforces_242_A.java', 'codeforces_31_A.java', 'atcoder_ABC042_A.java', 'codeforces_583_B.java', 'atcoder_AGC046_B.java', 'atcoder_ABC089_C.java', 'atcoder_AGC011_C.java', 'codeforces_624_B.java', 'atcoder_ABC147_D.java', 'codeforces_598_A.java', 'codeforces_148_B.java', 'codeforces_629_A.java', 'atcoder_AGC028_A.java', 'atcoder_AGC043_B.java', 'codeforces_79_A.java', 'codeforces_313_B.java', 'atcoder_ABC122_C.java', 'codeforces_500_A.java', 'atcoder_AGC013_A.java', 'atcoder_ABC174_C.java', 'atcoder_ABC178_B.java', 'codeforces_612_B.java', 'codeforces_106_B.java', 'codeforces_609_B.java', 'codeforces_302_A.java', 'atcoder_ABC145_E.java', 'atcoder_AGC017_A.java', 'codeforces_37_A.java', 'codeforces_268_A.java', 'atcoder_AGC034_B.java', 'atcoder_ABC167_D.java', 'atcoder_ABC142_C.java', 'codeforces_92_A.java', 'codeforces_110_B.java', 'codeforces_544_B.java', 'atcoder_AGC003_C.java', 'atcoder_AGC002_A.java', 'atcoder_AGC004_B.java', 'atcoder_ABC152_E.java', 'codeforces_705_B.java', 'codeforces_669_A.java', 'codeforces_397_B.java', 'atcoder_AGC033_B.java', 'codeforces_99_A.java', 'codeforces_379_A.java', 'atcoder_AGC029_C.java', 'atcoder_AGC027_B.java', 'atcoder_ABC106_C.java', 'atcoder_ABC126_D.java', 'codeforces_296_A.java', 'atcoder_ABC140_F.java', 'atcoder_AGC005_B.java', 'codeforces_569_A.java', 'atcoder_ABC127_F.java', 'atcoder_ABC146_D.java', 'codeforces_581_B.java', 'codeforces_400_A.java', 'atcoder_ABC114_C.java', 'atcoder_ABC158_B.java', 'atcoder_AGC002_B.java', 'codeforces_216_B.java', 'atcoder_ABC169_C.java', 'codeforces_334_A.java', 'codeforces_514_A.java', 'codeforces_579_A.java', 'codeforces_96_B.java', 'atcoder_ABC110_C.java', 'atcoder_ABC169_D.java', 'atcoder_AGC035_B.java', 'atcoder_ABC132_A.java', 'codeforces_131_B.java', 'codeforces_287_A.java', 'atcoder_ABC105_D.java', 'codeforces_306_A.java', 'codeforces_350_B.java', 'codeforces_154_A.java', 'codeforces_327_A.java', 'codeforces_333_B.java', 'atcoder_ABC125_A.java', 'atcoder_ABC107_C.java', 'atcoder_ABC150_C.java', 'codeforces_632_B.java', 'codeforces_387_A.java', 'atcoder_AGC010_B.java', 'atcoder_ABC140_D.java', 'atcoder_AGC037_E.java', 'codeforces_653_A.java', 'atcoder_ABC153_A.java', 'atcoder_ABC164_A.java', 'codeforces_342_B.java', 'codeforces_274_A.java', 'codeforces_171_A.java', 'codeforces_59_A.java', 'codeforces_61_B.java', 'codeforces_340_A.java', 'codeforces_351_A.java', 'atcoder_AGC006_A.java', 'codeforces_189_A.java', 'atcoder_ABC172_D.java', 'atcoder_ARC062_B.java', 'codeforces_231_A.java', 'codeforces_617_B.java', 'atcoder_AGC004_D.java', 'codeforces_672_A.java', 'codeforces_387_B.java', 'atcoder_ABC134_E.java', 'atcoder_ABC148_F.java', 'codeforces_30_A.java', 'codeforces_445_A.java', 'codeforces_55_A.java', 'atcoder_ARC086_B.java', 'codeforces_8_B.java', 'atcoder_ABC070_B.java', 'atcoder_ABC123_D.java', 'atcoder_ABC118_C.java', 'atcoder_ABC158_A.java', 'codeforces_456_A.java', 'codeforces_55_B.java', 'codeforces_203_B.java', 'atcoder_AGC027_A.java', 'atcoder_ABC119_B.java', 'atcoder_ABC174_E.java', 'codeforces_534_B.java', 'codeforces_678_B.java', 'atcoder_ABC143_A.java', 'atcoder_ABC107_D.java', 'atcoder_AGC046_A.java', 'atcoder_ABC123_B.java', 'codeforces_373_B.java', 'atcoder_ABC171_E.java', 'atcoder_ABC124_A.java', 'atcoder_AGC006_B.java', 'atcoder_AGC007_C.java', 'atcoder_ABC133_E.java', 'codeforces_299_A.java', 'atcoder_ABC178_A.java', 'codeforces_242_B.java', 'codeforces_67_B.java', 'atcoder_AGC021_B.java', 'atcoder_ABC171_B.java', 'codeforces_637_A.java', 'atcoder_ABC051_A.java', 'atcoder_AGC033_A.java', 'codeforces_32_B.java', 'atcoder_ABC145_C.java', 'codeforces_546_A.java', 'codeforces_519_B.java', 'codeforces_622_A.java', 'atcoder_AGC012_A.java', 'codeforces_474_B.java', 'atcoder_ABC104_C.java', 'codeforces_459_B.java', 'atcoder_ABC168_C.java', 'atcoder_ABC132_F.java', 'codeforces_86_A.java', 'atcoder_ABC128_C.java', 'codeforces_267_A.java', 'codeforces_369_B.java', 'codeforces_462_B.java', 'atcoder_ABC108_B.java']
