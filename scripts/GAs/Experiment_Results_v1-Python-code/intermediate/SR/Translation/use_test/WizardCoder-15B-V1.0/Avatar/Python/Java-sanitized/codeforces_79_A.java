import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class codeforces_79_A {
    public static void main(String[] args) {
        int[] arr1 = {13, 9, 68};
        int[] arr2 = {87, 12, 74};
        double t, p;
        t = ttest_ind(arr1, arr2)[0];
        p = ttest_ind(arr1, arr2)[1];
        System.out.println("t-value: " + t);
        System.out.println("p-value: " + p);

        List<Integer> shuffledList = shuffle(Arrays.asList(65, 10, 70));
        System.out.println("Shuffled list: " + shuffledList);

        int x, y;
        x = y = 0;
        int a = 0;
        int remainder_check_value = 173;
        int remainder_check_limit = 172;
        while (remainder_check_value % remainder_check_limit == 1) {
            remainder_check_value = remainder_check_value + 1;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition_one = 89;
                int condition_two = 148;
                if ((condition_one & condition_two) != 0) {
                    if (a == 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println("Winner: " + (a == 0 ? "Ciel" : "Hanako"));
    }

    public static double[] ttest_ind(int[] arr1, int[] arr2) {
        double[] result = new double[2];
        double[] arr1_mean_sd = mean_sd(arr1);
        double[] arr2_mean_sd = mean_sd(arr2);
        double mean1 = arr1_mean_sd[0];
        double mean2 = arr2_mean_sd[0];
        double sd1 = arr1_mean_sd[1];
        double sd2 = arr2_mean_sd[1];
        double n1 = arr1.length;
        double n2 = arr2.length;
        double svar = ((n1 - 1) * sd1 * sd1 + (n2 - 1) * sd2 * sd2) / (n1 + n2 - 2);
        double df = n1 + n2 - 2;
        double t = (mean1 - mean2) / Math.sqrt(svar * (1.0 / n1 + 1.0 / n2));
        result[0] = t;
        result[1] = tDist(df, t);
        return result;
    }

    public static double[] mean_sd(int[] arr) {
        double mean = 0.0;
        double sd = 0.0;
        for (int i = 0; i < arr.length; i++) {
            mean += arr[i];
        }
        mean /= arr.length;
        for (int i = 0; i < arr.length; i++) {
            sd += Math.pow(arr[i] - mean, 2);
        }
        sd /= arr.length;
        sd = Math.sqrt(sd);
        return new double[]{mean, sd};
    }

    public static double tDist(double df, double t) {
        double[] cdf = {0.00134989803163009, 0.0159154943091895, 0.053765202801104, 0.104423769867047, 0.158655092903876, 0.211614782242507, 0.25758293035489, 0.291038389120324, 0.310537245194337, 0.31758714607303, 0.314969884557053, 0.306052978771375, 0.293627354725116, 0.279213193520394, 0.26366197713721, 0.247487589660766, 0.231022902610483, 0.21453054833062, 0.198198940371536, 0.182155765537766, 0.166509259259259, 0.151344907407407, 0.136734693877551, 0.122744679360513, 0.109434402201101, 0.0968591333970229, 0.0850631694789683, 0.0740802130868392, 0.063944226361066, 0.0546889627167016, 0.046348271206983, 0.0389567901234564, 0.0325493150684932, 0.0271608882734784, 0.0228267045454545, 0.0195822784810127, 0.017463811860209, 0.0164992647058824, 0.0166180417023746, 0.0177428284671532, 0.0197901234567901, 0.0226806479606327, 0.0263399693877551, 0.0306976744186047, 0.0356900584745763, 0.0412604678362573, 0.0473597422680417, 0.0539475179321533, 0.0609820678467153, 0.0684306559779889, 0.0762600306122449, 0.0844465693430656, 0.0929666017463812, 0.101806623188406, 0.110953311594203, 0.120393673469388, 0.130115942028986, 0.140110055027514, 0.150376811594203, 0.160918951669985, 0.171739969387755, 0.18285462962963, 0.194279889944973, 0.206034745762712, 0.218140866602941, 0.230622448979592, 0.243516701649926, 0.256864285714286, 0.270710204081633, 0.285104236263737, 0.300101968367347, 0.315764944972486, 0.332161087967532, 0.349365328467153, 0.367460952380952, 0.386540935672514, 0.406707216494846, 0.428072164948454, 0.450759350643275, 0.474905063467153, 0.500659910714286, 0.528180014925373, 0.557639111726522, 0.589229198315014, 0.623162032467532, 0.659669984693878, 0.698997652173913, 0.741402577319583, 0.787168493150685, 0.836607664233577, 0.890062755102041, 0.947908796753247, 1.0};
        double[] pdf = {0.000134989803163009, 0.00159154943091895, 0.0053765202801104, 0.0104423769867047, 0.0158655092903876, 0.0211614782242507, 0.025758293035489, 0.0291038389120324, 0.0310537245194337, 0.031758714607303, 0.0314969884557053, 0.0306052978771375, 0.0293627354725116, 0.0279213193520394, 0.026366197713721, 0.0247487589660766, 0.0231022902610483, 0.021453054833062, 0.0198198940371536, 0.0182155765537766, 0.0166509259259259, 0.0151344907407407, 0.0136734693877551, 0.0122744679360513, 0.0109434402201101, 0.00968591333970229, 0.00850631694789683, 0.00740802130868392, 0.0063944226361066, 0.00546889627167016, 0.0046348271206983, 0.00389567901234564, 0.00325493150684932, 0.00271608882734784, 0.00228267045454545, 0.00195822784810127, 0.0017463811860209, 0.00164992647058824, 0.00166180417023746, 0.00177428284671532, 0.00197901234567901, 0.00226806479606327, 0.00263399693877551, 0.00306976744186047, 0.00356900584745763, 0.00412604678362573, 0.0047359