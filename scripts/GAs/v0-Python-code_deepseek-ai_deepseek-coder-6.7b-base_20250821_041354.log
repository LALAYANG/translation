+ model=deepseek-ai/deepseek-coder-6.7b-base
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-6.7b-base --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 04:48:05 [__init__.py:241] Automatically detected platform cuda.
found 231 inputs
INFO 08-21 04:48:07 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-6.7b-base', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 04:48:12 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 04:48:12 [__init__.py:1750] Using max model len 4096
INFO 08-21 04:48:12 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=2984870)[0;0m INFO 08-21 04:48:13 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=2984870)[0;0m INFO 08-21 04:48:13 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-6.7b-base', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-6.7b-base', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-6.7b-base, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=2984870)[0;0m WARNING 08-21 04:48:13 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=2984870)[0;0m INFO 08-21 04:48:13 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_5f08cae3'), local_subscribe_addr='ipc:///tmp/694a4daa-e950-40ae-92df-c4494bead0a6', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:15 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_9ffc15b4'), local_subscribe_addr='ipc:///tmp/9c9babf8-5e8c-4352-a250-5537335fed86', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:15 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_b087a0dd'), local_subscribe_addr='ipc:///tmp/9b30a311-fd0f-4cc8-a113-14e5e4bc7503', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:16 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:16 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:16 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:16 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:16 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:16 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:16 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_3dc3cdbf'), local_subscribe_addr='ipc:///tmp/43bf33c7-07a8-4078-809c-77501fdf5157', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:16 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:16 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m WARNING 08-21 04:48:16 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m WARNING 08-21 04:48:16 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:16 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-base...
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:16 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-base...
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:17 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:17 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:17 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:17 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:17 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:17 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:29 [weight_utils.py:312] Time spent downloading weights for deepseek-ai/deepseek-coder-6.7b-base: 12.390030 seconds
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m Loading safetensors checkpoint shards:  50% Completed | 1/2 [00:00<00:00,  2.38it/s]
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.10it/s]
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.20it/s]
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m 
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:31 [default_loader.py:262] Loading weights took 1.80 seconds
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:32 [default_loader.py:262] Loading weights took 1.97 seconds
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:32 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 14.726850 seconds
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:32 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 15.098214 seconds
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:39 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d977cfa9e2/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:39 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d977cfa9e2/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:39 [backends.py:559] Dynamo bytecode transform time: 6.38 s
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:39 [backends.py:559] Dynamo bytecode transform time: 6.40 s
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:48:41 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:48:41 [backends.py:194] Cache the graph for dynamic shape for later use
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:49:02 [backends.py:215] Compiling a graph for dynamic shape takes 23.13 s
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:49:03 [backends.py:215] Compiling a graph for dynamic shape takes 23.31 s
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:49:07 [monitor.py:34] torch.compile takes 29.69 s in total
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:49:07 [monitor.py:34] torch.compile takes 29.53 s in total
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:49:08 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:49:08 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=2984870)[0;0m INFO 08-21 04:49:08 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=2984870)[0;0m INFO 08-21 04:49:08 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=2984870)[0;0m INFO 08-21 04:49:08 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=2984870)[0;0m INFO 08-21 04:49:08 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 29.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  10%|█         | 7/67 [00:00<00:01, 30.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  16%|█▋        | 11/67 [00:00<00:01, 30.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:01, 30.26it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  28%|██▊       | 19/67 [00:00<00:01, 30.50it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  34%|███▍      | 23/67 [00:00<00:01, 30.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:00<00:01, 30.32it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  46%|████▋     | 31/67 [00:01<00:01, 30.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  52%|█████▏    | 35/67 [00:01<00:01, 29.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:01<00:01, 28.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  61%|██████    | 41/67 [00:01<00:00, 28.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:01<00:00, 28.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  70%|███████   | 47/67 [00:01<00:00, 27.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:01<00:00, 27.23it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  79%|███████▉  | 53/67 [00:01<00:00, 26.11it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:01<00:00, 25.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  88%|████████▊ | 59/67 [00:02<00:00, 25.57it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:02<00:00, 25.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  97%|█████████▋| 65/67 [00:02<00:00, 25.67it/s][1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:49:11 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 28.07it/s]
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:49:11 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP1 pid=2984878)[0;0m INFO 08-21 04:49:11 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=2984870)[0;0m [1;36m(VllmWorker TP0 pid=2984876)[0;0m INFO 08-21 04:49:11 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=2984870)[0;0m INFO 08-21 04:49:11 [core.py:214] init engine (profile, create kv cache, warmup model) took 38.95 seconds
INFO 08-21 04:49:12 [llm.py:298] Supported_tasks: ['generate']
Translating 231 files...
  0%|          | 0/231 [00:00<?, ?it/s]100%|██████████| 231/231 [00:00<00:00, 10596.54it/s]
Adding requests:   0%|          | 0/231 [00:00<?, ?it/s]Adding requests:  26%|██▌       | 59/231 [00:00<00:00, 583.51it/s]Adding requests:  55%|█████▍    | 127/231 [00:00<00:00, 633.72it/s]Adding requests:  83%|████████▎ | 191/231 [00:00<00:00, 371.12it/s]Adding requests: 100%|██████████| 231/231 [00:00<00:00, 444.66it/s]
Processed prompts:   0%|          | 0/231 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/231 [00:03<12:23,  3.23s/it, est. speed input: 53.82 toks/s, output: 28.46 toks/s]Processed prompts:   1%|          | 2/231 [00:03<06:09,  1.61s/it, est. speed input: 152.53 toks/s, output: 55.24 toks/s]Processed prompts:   1%|▏         | 3/231 [00:03<03:48,  1.00s/it, est. speed input: 301.52 toks/s, output: 83.53 toks/s]Processed prompts:   2%|▏         | 4/231 [00:04<03:14,  1.17it/s, est. speed input: 330.13 toks/s, output: 103.98 toks/s]Processed prompts:   2%|▏         | 5/231 [00:05<02:36,  1.45it/s, est. speed input: 380.97 toks/s, output: 129.31 toks/s]Processed prompts:   3%|▎         | 6/231 [00:05<01:55,  1.95it/s, est. speed input: 429.37 toks/s, output: 157.91 toks/s]Processed prompts:   3%|▎         | 7/231 [00:05<01:36,  2.31it/s, est. speed input: 438.79 toks/s, output: 183.81 toks/s]Processed prompts:   3%|▎         | 8/231 [00:05<01:17,  2.87it/s, est. speed input: 494.66 toks/s, output: 211.84 toks/s]Processed prompts:   5%|▌         | 12/231 [00:05<00:39,  5.48it/s, est. speed input: 728.57 toks/s, output: 330.79 toks/s]Processed prompts:   6%|▋         | 15/231 [00:06<00:29,  7.26it/s, est. speed input: 919.79 toks/s, output: 421.30 toks/s]Processed prompts:   8%|▊         | 18/231 [00:06<00:26,  8.17it/s, est. speed input: 1173.92 toks/s, output: 505.17 toks/s]Processed prompts:   8%|▊         | 19/231 [00:06<00:28,  7.53it/s, est. speed input: 1216.98 toks/s, output: 525.47 toks/s]Processed prompts:  10%|▉         | 22/231 [00:06<00:20, 10.03it/s, est. speed input: 1422.92 toks/s, output: 618.10 toks/s]Processed prompts:  10%|█         | 24/231 [00:06<00:18, 11.24it/s, est. speed input: 1515.27 toks/s, output: 677.63 toks/s]Processed prompts:  11%|█▏        | 26/231 [00:07<00:19, 10.60it/s, est. speed input: 1622.08 toks/s, output: 727.65 toks/s]Processed prompts:  12%|█▏        | 28/231 [00:07<00:20,  9.84it/s, est. speed input: 1819.34 toks/s, output: 774.97 toks/s]Processed prompts:  14%|█▍        | 32/231 [00:07<00:14, 13.86it/s, est. speed input: 2108.52 toks/s, output: 902.46 toks/s]Processed prompts:  16%|█▌        | 36/231 [00:07<00:11, 17.33it/s, est. speed input: 2348.51 toks/s, output: 1028.09 toks/s]Processed prompts:  17%|█▋        | 40/231 [00:07<00:09, 21.06it/s, est. speed input: 2623.76 toks/s, output: 1156.44 toks/s]Processed prompts:  19%|█▊        | 43/231 [00:07<00:08, 21.24it/s, est. speed input: 2762.78 toks/s, output: 1244.70 toks/s]Processed prompts:  20%|█▉        | 46/231 [00:08<00:08, 21.40it/s, est. speed input: 2984.50 toks/s, output: 1332.89 toks/s]Processed prompts:  21%|██        | 49/231 [00:08<00:11, 15.69it/s, est. speed input: 3074.75 toks/s, output: 1389.63 toks/s]Processed prompts:  22%|██▏       | 51/231 [00:08<00:11, 16.08it/s, est. speed input: 3169.09 toks/s, output: 1445.04 toks/s]Processed prompts:  23%|██▎       | 53/231 [00:08<00:15, 11.43it/s, est. speed input: 3135.52 toks/s, output: 1463.71 toks/s]Processed prompts:  24%|██▍       | 56/231 [00:08<00:12, 13.62it/s, est. speed input: 3258.11 toks/s, output: 1552.56 toks/s]Processed prompts:  26%|██▌       | 59/231 [00:09<00:11, 15.59it/s, est. speed input: 3414.42 toks/s, output: 1640.94 toks/s]Processed prompts:  27%|██▋       | 63/231 [00:09<00:09, 17.66it/s, est. speed input: 3542.45 toks/s, output: 1759.02 toks/s]Processed prompts:  28%|██▊       | 65/231 [00:09<00:09, 17.74it/s, est. speed input: 3589.32 toks/s, output: 1812.67 toks/s]Processed prompts:  29%|██▉       | 67/231 [00:09<00:09, 17.83it/s, est. speed input: 3626.96 toks/s, output: 1867.62 toks/s]Processed prompts:  30%|██▉       | 69/231 [00:09<00:09, 16.32it/s, est. speed input: 3656.66 toks/s, output: 1912.92 toks/s]Processed prompts:  31%|███       | 71/231 [00:09<00:09, 16.01it/s, est. speed input: 3776.06 toks/s, output: 1962.62 toks/s]Processed prompts:  33%|███▎      | 77/231 [00:10<00:07, 21.54it/s, est. speed input: 4036.79 toks/s, output: 2149.24 toks/s]Processed prompts:  35%|███▍      | 80/231 [00:10<00:10, 14.17it/s, est. speed input: 4063.78 toks/s, output: 2177.90 toks/s]Processed prompts:  35%|███▌      | 82/231 [00:10<00:09, 14.93it/s, est. speed input: 4145.00 toks/s, output: 2233.02 toks/s]Processed prompts:  36%|███▋      | 84/231 [00:10<00:10, 14.60it/s, est. speed input: 4228.40 toks/s, output: 2279.54 toks/s]Processed prompts:  37%|███▋      | 86/231 [00:10<00:10, 14.36it/s, est. speed input: 4306.20 toks/s, output: 2326.15 toks/s]Processed prompts:  38%|███▊      | 88/231 [00:10<00:10, 13.17it/s, est. speed input: 4333.73 toks/s, output: 2364.16 toks/s]Processed prompts:  39%|███▉      | 91/231 [00:11<00:08, 16.37it/s, est. speed input: 4508.17 toks/s, output: 2459.01 toks/s]Processed prompts:  41%|████      | 94/231 [00:11<00:08, 15.83it/s, est. speed input: 4536.63 toks/s, output: 2530.26 toks/s]Processed prompts:  43%|████▎     | 99/231 [00:11<00:06, 21.84it/s, est. speed input: 4716.07 toks/s, output: 2698.75 toks/s]Processed prompts:  44%|████▍     | 102/231 [00:11<00:05, 21.80it/s, est. speed input: 4839.99 toks/s, output: 2783.54 toks/s]Processed prompts:  45%|████▌     | 105/231 [00:11<00:08, 14.36it/s, est. speed input: 4811.87 toks/s, output: 2809.83 toks/s]Processed prompts:  47%|████▋     | 109/231 [00:12<00:06, 18.06it/s, est. speed input: 4969.66 toks/s, output: 2941.89 toks/s]Processed prompts:  49%|████▉     | 113/231 [00:12<00:05, 20.14it/s, est. speed input: 5105.07 toks/s, output: 3064.79 toks/s]Processed prompts:  50%|█████     | 116/231 [00:12<00:06, 18.83it/s, est. speed input: 5169.47 toks/s, output: 3138.45 toks/s]Processed prompts:  52%|█████▏    | 119/231 [00:12<00:08, 12.90it/s, est. speed input: 5218.76 toks/s, output: 3153.56 toks/s]Processed prompts:  53%|█████▎    | 123/231 [00:13<00:07, 15.02it/s, est. speed input: 5311.15 toks/s, output: 3271.46 toks/s]Processed prompts:  55%|█████▍    | 126/231 [00:13<00:06, 16.22it/s, est. speed input: 5383.62 toks/s, output: 3357.75 toks/s]Processed prompts:  55%|█████▌    | 128/231 [00:13<00:06, 16.65it/s, est. speed input: 5466.85 toks/s, output: 3412.90 toks/s]Processed prompts:  57%|█████▋    | 132/231 [00:13<00:04, 20.32it/s, est. speed input: 5573.25 toks/s, output: 3546.56 toks/s]Processed prompts:  58%|█████▊    | 135/231 [00:13<00:05, 18.84it/s, est. speed input: 5695.60 toks/s, output: 3621.20 toks/s]Processed prompts:  60%|██████    | 139/231 [00:13<00:04, 22.33it/s, est. speed input: 5837.58 toks/s, output: 3755.99 toks/s]Processed prompts:  61%|██████▏   | 142/231 [00:13<00:04, 19.24it/s, est. speed input: 5898.57 toks/s, output: 3823.25 toks/s]Processed prompts:  63%|██████▎   | 145/231 [00:14<00:05, 15.81it/s, est. speed input: 5941.74 toks/s, output: 3874.52 toks/s]Processed prompts:  64%|██████▎   | 147/231 [00:14<00:06, 13.33it/s, est. speed input: 5936.76 toks/s, output: 3894.92 toks/s]Processed prompts:  65%|██████▍   | 150/231 [00:14<00:06, 12.86it/s, est. speed input: 5975.22 toks/s, output: 3955.42 toks/s]Processed prompts:  66%|██████▌   | 152/231 [00:14<00:06, 11.51it/s, est. speed input: 5980.38 toks/s, output: 3979.67 toks/s]Processed prompts:  67%|██████▋   | 154/231 [00:15<00:09,  7.90it/s, est. speed input: 5910.65 toks/s, output: 3938.07 toks/s]Processed prompts:  68%|██████▊   | 158/231 [00:15<00:07,  9.31it/s, est. speed input: 5980.41 toks/s, output: 4032.20 toks/s]Processed prompts:  69%|██████▉   | 160/231 [00:16<00:10,  6.68it/s, est. speed input: 5862.34 toks/s, output: 3976.28 toks/s]Processed prompts:  70%|███████   | 162/231 [00:16<00:08,  7.84it/s, est. speed input: 5905.09 toks/s, output: 4037.76 toks/s]Processed prompts:  72%|███████▏  | 166/231 [00:16<00:06, 10.60it/s, est. speed input: 6012.02 toks/s, output: 4173.83 toks/s]Processed prompts:  73%|███████▎  | 168/231 [00:18<00:15,  4.09it/s, est. speed input: 5588.13 toks/s, output: 3918.43 toks/s]Processed prompts:  74%|███████▎  | 170/231 [00:19<00:20,  3.05it/s, est. speed input: 5342.73 toks/s, output: 3778.01 toks/s]Processed prompts:  74%|███████▍  | 171/231 [00:19<00:21,  2.85it/s, est. speed input: 5261.94 toks/s, output: 3735.09 toks/s]Processed prompts:  74%|███████▍  | 172/231 [00:20<00:24,  2.37it/s, est. speed input: 5121.10 toks/s, output: 3648.77 toks/s]Processed prompts:  75%|███████▍  | 173/231 [00:21<00:30,  1.90it/s, est. speed input: 4954.40 toks/s, output: 3538.43 toks/s]Processed prompts:  75%|███████▌  | 174/231 [00:22<00:32,  1.74it/s, est. speed input: 4836.10 toks/s, output: 3471.51 toks/s]Processed prompts:  76%|███████▌  | 175/231 [00:27<01:30,  1.62s/it, est. speed input: 4011.51 toks/s, output: 2897.86 toks/s]Processed prompts:  76%|███████▌  | 176/231 [00:44<05:12,  5.68s/it, est. speed input: 2479.62 toks/s, output: 1817.99 toks/s]Processed prompts:  77%|███████▋  | 177/231 [00:45<03:54,  4.34s/it, est. speed input: 2477.59 toks/s, output: 1843.54 toks/s]Processed prompts:  77%|███████▋  | 178/231 [00:47<03:24,  3.86s/it, est. speed input: 2375.36 toks/s, output: 1797.33 toks/s]Processed prompts:  77%|███████▋  | 179/231 [00:48<02:39,  3.06s/it, est. speed input: 2354.52 toks/s, output: 1812.41 toks/s]Processed prompts:  78%|███████▊  | 180/231 [00:49<01:53,  2.23s/it, est. speed input: 2376.69 toks/s, output: 1860.03 toks/s]Processed prompts:  78%|███████▊  | 181/231 [00:49<01:26,  1.72s/it, est. speed input: 2381.75 toks/s, output: 1894.80 toks/s]Processed prompts:  79%|███████▉  | 182/231 [00:50<01:05,  1.34s/it, est. speed input: 2389.37 toks/s, output: 1931.88 toks/s]Processed prompts:  79%|███████▉  | 183/231 [00:53<01:41,  2.12s/it, est. speed input: 2236.36 toks/s, output: 1843.32 toks/s]Processed prompts:  80%|███████▉  | 184/231 [00:55<01:32,  1.96s/it, est. speed input: 2192.46 toks/s, output: 1843.54 toks/s]Processed prompts:  80%|████████  | 185/231 [00:56<01:10,  1.53s/it, est. speed input: 2193.16 toks/s, output: 1880.58 toks/s]Processed prompts:  81%|████████  | 187/231 [00:56<00:43,  1.00it/s, est. speed input: 2202.64 toks/s, output: 1961.62 toks/s]Processed prompts:  81%|████████▏ | 188/231 [00:57<00:41,  1.04it/s, est. speed input: 2187.93 toks/s, output: 1985.92 toks/s]Processed prompts:  82%|████████▏ | 189/231 [01:00<00:56,  1.34s/it, est. speed input: 2115.61 toks/s, output: 1959.73 toks/s]Processed prompts:  82%|████████▏ | 190/231 [01:00<00:45,  1.10s/it, est. speed input: 2113.39 toks/s, output: 1997.38 toks/s]Processed prompts:  83%|████████▎ | 191/231 [01:00<00:34,  1.15it/s, est. speed input: 2117.95 toks/s, output: 2041.38 toks/s]Processed prompts:  84%|████████▎ | 193/231 [01:02<00:28,  1.32it/s, est. speed input: 2102.26 toks/s, output: 2106.31 toks/s]Processed prompts:  84%|████████▍ | 195/231 [01:02<00:17,  2.02it/s, est. speed input: 2122.16 toks/s, output: 2207.43 toks/s]Processed prompts:  85%|████████▍ | 196/231 [01:02<00:14,  2.40it/s, est. speed input: 2129.91 toks/s, output: 2255.83 toks/s]Processed prompts:  85%|████████▌ | 197/231 [01:02<00:11,  2.85it/s, est. speed input: 2137.61 toks/s, output: 2304.12 toks/s]Processed prompts:  86%|████████▌ | 198/231 [01:03<00:15,  2.16it/s, est. speed input: 2122.16 toks/s, output: 2328.63 toks/s]Processed prompts:  87%|████████▋ | 200/231 [01:03<00:10,  2.87it/s, est. speed input: 2131.71 toks/s, output: 2421.30 toks/s]Processed prompts:  87%|████████▋ | 201/231 [01:04<00:10,  2.86it/s, est. speed input: 2130.37 toks/s, output: 2461.32 toks/s]Processed prompts:  88%|████████▊ | 203/231 [01:04<00:07,  3.75it/s, est. speed input: 2141.58 toks/s, output: 2557.36 toks/s]Processed prompts:  88%|████████▊ | 204/231 [01:04<00:06,  4.11it/s, est. speed input: 2146.21 toks/s, output: 2604.61 toks/s]Processed prompts:  89%|████████▊ | 205/231 [01:04<00:06,  4.05it/s, est. speed input: 2147.20 toks/s, output: 2647.87 toks/s]Processed prompts:  89%|████████▉ | 206/231 [01:04<00:05,  4.38it/s, est. speed input: 2150.88 toks/s, output: 2694.56 toks/s]Processed prompts:  90%|████████▉ | 207/231 [01:05<00:04,  5.06it/s, est. speed input: 2156.35 toks/s, output: 2743.57 toks/s]Processed prompts:  90%|█████████ | 209/231 [01:05<00:06,  3.44it/s, est. speed input: 2146.66 toks/s, output: 2816.30 toks/s]Processed prompts:  91%|█████████ | 210/231 [01:05<00:05,  4.07it/s, est. speed input: 2151.45 toks/s, output: 2866.05 toks/s]Processed prompts:  91%|█████████▏| 211/231 [01:06<00:04,  4.29it/s, est. speed input: 2152.88 toks/s, output: 2911.67 toks/s]Processed prompts:  92%|█████████▏| 213/231 [01:06<00:03,  4.87it/s, est. speed input: 2157.24 toks/s, output: 3005.26 toks/s]Processed prompts:  94%|█████████▎| 216/231 [01:06<00:01,  7.86it/s, est. speed input: 2175.17 toks/s, output: 3162.50 toks/s]Processed prompts:  94%|█████████▍| 218/231 [01:06<00:01,  6.81it/s, est. speed input: 2176.47 toks/s, output: 3253.23 toks/s]Processed prompts:  96%|█████████▌| 222/231 [01:07<00:00, 10.50it/s, est. speed input: 2197.30 toks/s, output: 3464.51 toks/s]Processed prompts:  97%|█████████▋| 225/231 [01:07<00:00, 12.22it/s, est. speed input: 2210.28 toks/s, output: 3620.25 toks/s]Processed prompts:  98%|█████████▊| 227/231 [01:07<00:00, 12.46it/s, est. speed input: 2216.84 toks/s, output: 3722.17 toks/s]Processed prompts:  99%|█████████▉| 229/231 [01:07<00:00, 10.65it/s, est. speed input: 2218.56 toks/s, output: 3818.07 toks/s]Processed prompts: 100%|██████████| 231/231 [01:07<00:00, 10.26it/s, est. speed input: 2220.84 toks/s, output: 3917.39 toks/s]Processed prompts: 100%|██████████| 231/231 [01:07<00:00, 10.26it/s, est. speed input: 2220.84 toks/s, output: 3917.39 toks/s]Processed prompts: 100%|██████████| 231/231 [01:07<00:00,  3.40it/s, est. speed input: 2220.84 toks/s, output: 3917.39 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-6.7b-base --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/231 [00:00<?, ?it/s]import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        List<Integer>[] G = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            G[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            String[] s = br.readLine().split(" ");
            int a = Integer.parseInt(s[0]) - 1;
            int b = Integer.parseInt(s[1]) - 1;
            G[a].add(b);
            G[b].add(a);
        }
        int[] node2color = new int[N];
        int K = -1;
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);
        node2color[0] = 1;
        while (!queue.isEmpty()) {
            int current_node = queue.poll();
            int color = 0;
            for (int nex : G[current_node]) {
                if (node2color[nex] != 0) {
                    continue;
                }
                color = color + 1;
                if (color == node2color[current_node]) {
                    color = color + 1;
                }
                node2color[nex] = color;
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        System.out.println(K);
        for (int i = 0; i < N - 1; i++) {
            int a = i;
            int b = i + 1;
            if (a > b) {
                int tmp = a;
                a = b;
                b = tmp;
            }
            System.out.println(node2color[a] < node2color[b] ? node2color[a] : node2color[b]);
        }
    }
}

import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_569_A {
    public static void main(String[] args) {
        int t = 12351;
        int current_value = 1223;
        int q = 6;
        int ans = 0;
        int counter = 267;
        int divisor = 266;
        while (counter % divisor == 1) {
            int variable_3_10 = 1;
            Queue<Integer> queue_calculate_sum0 = new LinkedBlockingQueue<>();
            Thread thread_calculate_sum0 = new Thread(() -> {
                int result = calculate_sum(variable_3_10, counter);
                queue_calculate_sum0.add(result);
            });
            thread_calculate_sum0.start();
            thread_calculate_sum0.join();
            int sum_result = queue_calculate_sum0.poll();
            counter = sum_result;
            while (current_value < t) {
                Queue<Integer> product_queue = new LinkedBlockingQueue<>();
                Thread thread_calculate_product0 = new Thread(() -> {
                    int result = calculate_product(current_value, q);
                    product_queue.add(result);
                });
                thread_calculate_product0.start();
                thread_calculate_product0.join();
                int result_calculate_product0 = product_queue.poll();
                current_value = result_calculate_product0;
                ans = ans + 1;
            }
        }
        System.out.println(ans);
    }

    public static int calculate_product(int current_value, int q) {
        return current_value * q;
    }

    public static int calculate_sum(int variable_3_10, int counter) {
        return counter + variable_3_10;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                ls_xyh[i][j] = sc.nextInt();
            }
        }
        System.out.println(solve(n, ls_xyh));
    }

    public static String solve(int n, int[][] ls_xyh) {
        int x0 = -1;
        int length_threshold = 506;
        int width_threshold = 368;
        int height_threshold = 502;
        int min_height_limit = 575;
        int max_height_limit = 552;
        int initial_height_guess = 550;
        for (int i = 0; i < n; i++) {
            if (max_height_limit > initial_height_guess && initial_height_guess > min_height_limit) {
                if (height_threshold > min_height_limit && min_height_limit > length_threshold && length_threshold > width_threshold) {
                    if (ls_xyh[i][2] > 0) {
                        int[] xyh = ls_xyh[i];
                        x0 = xyh[0];
                        int y0 = xyh[1];
                        int h0 = xyh[2];
                        break;
                    }
                }
            }
        }
        List<int[]> cands = new ArrayList<int[]>();
        for (int cx = 0; cx < 101; cx++) {
            for (int cy = 0; cy < 101; cy++) {
                cands.add(new int[]{cx, cy, h0 + Math.abs(cx - x0) + Math.abs(cy - y0)});
            }
        }
        for (int[] xyh : ls_xyh) {
            int x_coordinate = xyh[0];
            int current_y = xyh[1];
            int h = xyh[2];
            cands = cands.stream().filter(cand -> Math.max(cand[2] - Math.abs(cand[0] - x_coordinate) - Math.abs(cand[1] - current_y), 0) == h).collect(Collectors.toList());
        }
        int[] cand = cands.get(0);
        int xx = cand[0];
        int y_coordinate = cand[1];
        int hh = cand[2];
        return String.format("%d %d %d", xx, y_coordinate, hh);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_problems = sc.nextInt();
        int G = sc.nextInt();
        List<Problem> problems = new ArrayList<>();
        for (int i = 0; i < num_problems; i++) {
            int p = sc.nextInt();
            int c = sc.nextInt();
            problems.add(new Problem(p, c));
        }
        int min_problems = Integer.MAX_VALUE;
        for (int i = 0; i < (1 << num_problems); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < num_problems; j++) {
                if ((i & (1 << j)) != 0) {
                    score += 100 * (j + 1) * problems.get(j).p + problems.get(j).c;
                    problem += problems.get(j).p;
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < num_problems; j++) {
                if ((i & (1 << j)) != 0) {
                    continue;
                }
                if (left > 100 * (j + 1) * problems.get(j).p + problems.get(j).c) {
                    continue;
                }
                int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                min_problems = Math.min(min_problems, problem + Math.min(tmp, problems.get(j).p));
            }
        }
        System.out.println(min_problems);
    }
}

class Problem {
    int p;
    int c;

    public Problem(int p, int c) {
        this.p = p;
        this.c = c;
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int value_1 = sc.nextInt();
        int z = sc.nextInt();
        System.out.println((value_1 / z + 1) * z);
    }
}


import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int boardHeight = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int sR = scanner.nextInt();
        int sC = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        boolean judge = false;
        int S_L = 0;
        int S_R = 0;
        int S_U = 0;
        int S_D = 0;
        int T_L = 0;
        int T_R = 0;
        int T_U = 0;
        int T_D = 0;
        int totalSteps = 138;
        int maxOuterIterations = 137;
        for (int loopIndexOut = 0; loopIndexOut < totalSteps / maxOuterIterations; loopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int variable315 = 1;
                    Queue<Integer> queueIncrementLeft0 = new LinkedBlockingQueue<>();
                    Thread threadIncrementLeft0 = new Thread(() -> {
                        int result = incrementLeft(variable315, S_L);
                        queueIncrementLeft0.add(result);
                    });
                    threadIncrementLeft0.start();
                    threadIncrementLeft0.join();
                    int resultIncrementLeft0 = queueIncrementLeft0.poll();
                    S_L = resultIncrementLeft0;
                    if (S_L - T_R - sC == 0) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R = S_R + 1;
                    if (sC + (S_R - T_L) == W + 1) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    S_U = S_U + 1;
                    if (S_U - T_D - sR == 0) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D += 1;
                    if (sR + (S_D - T_U) == boardHeight + 1) {
                        judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + sC != 1) {
                        T_L += 1;
                    }
                }
                if (T.charAt(x) == 'R') {
                    if (sC + (T_R - S_L) != W) {
                        T_R += 1;
                    }
                }
                if (T.charAt(x) == 'U') {
                    if (S_D - T_U + sR != 1) {
                        T_U += 1;
                    }
                }
                if (T.charAt(x) == 'D') {
                    if (sR + (T_D - S_U) != boardHeight) {
                        T_D += 1;
                    }
                }
            }
        }
        if (judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static int incrementLeft(int variable315, int S_L) {
        return S_L + variable315;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_55_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int number = scanner.nextInt();
        int[] shuffled = {84, 31, 74};
        for (int i = 0; i < shuffled.length; i++) {
            int temp = shuffled[i];
            int randomIndex = (int) (Math.random() * shuffled.length);
            shuffled[i] = shuffled[randomIndex];
            shuffled[randomIndex] = temp;
        }
        while (number % 2 == 0) {
            int divisor = 2;
            Queue<Double> resultQueue = new LinkedBlockingQueue<>();
            Thread divisionWorker = new Thread(() -> {
                double result = divideNumbers(number, divisor);
                resultQueue.add(result);
            });
            divisionWorker.start();
            try {
                divisionWorker.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            double divisionResult = resultQueue.poll();
            number = (int) divisionResult;
        }
        if (number == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    @FunctionalInterface
    public interface DivideNumbers {
        double divide(int number, int divisor);
    }

    public static double divideNumbers(int number, int divisor) {
        return number / divisor;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        String s = st.nextToken();
        int k = Integer.parseInt(st.nextToken());
        int leadingOnesCount = 0;
        int innerLoopBound = 68;
        int outerLoopBound = 67;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopBound / outerLoopBound; loopIndexOut++) {
            for (int c = 0; c < s.length(); c++) {
                if (s.charAt(c) != '1') {
                    break;
                }
                leadingOnesCount++;
            }
            if (leadingOnesCount >= k) {
                System.out.println(1);
                return;
            }
        }
        System.out.println(s.charAt(leadingOnesCount));
    }
}
import java.util.*;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int row_start = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int col_end = sc.nextInt();
        sc.close();
        int m = 998244353;
        int[][] d = new int[C + 1][col_end + 1];
        d[row_start][B] = 1;
        for (int i = row_start; i <= C; i++) {
            for (int col = B; col <= col_end; col++) {
                int variable_14_11 = d[i][col - 1];
                int variable_17_11 = d[i - 1][col];
                int variable_20_11 = d[i - 1][col - 1];
                int variable_26_11 = d[i][col];
                int variable_30_11 = d[i - 1][col];
                int variable_34_11 = d[i - 1][col - 1];
                int variable_25_11 = 1;
                int variable_33_11 = 1;
                d[i][col] += compute_value(variable_17_11, variable_33_11, col, variable_14_11, i, variable_25_11, variable_20_11, m);
            }
        }
        System.out.println(d[C][col_end]);
    }

    public static int compute_value(int variable_17_11, int variable_33_11, int col, int variable_14_11, int i, int variable_25_11, int variable_20_11, int m) {
        return (variable_14_11 * i + variable_17_11 * col - variable_20_11 * (i - variable_33_11) * (col - variable_25_11)) % m;
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        for (int i = 0; i < t; i++) {
            String[] operation = scanner.nextLine().split(" ");
            if (operation[0].equals("alloc")) {
                int pos = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        pos++;
                        if (pos == Integer.parseInt(operation[1])) {
                            for (int k = j - Integer.parseInt(operation[1]) + 1; k <= j; k++) {
                                alocuente[k] = ind;
                            }
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                }
                if (pos != Integer.parseInt(operation[1])) {
                    System.out.println("NULL");
                }
            }
            if (operation[0].equals("erase")) {
                int pos = 0;
                if (Integer.parseInt(operation[1]) > m || Integer.parseInt(operation[1]) <= 0) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == Integer.parseInt(operation[1])) {
                            alocuente[j] = 0;
                        }
                    }
                }
            }
            if (operation[0].equals("defragment")) {
                int zeroCount = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        zeroCount++;
                    }
                }
                int[] temp = new int[m];
                int k = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] != 0) {
                        temp[k] = alocuente[j];
                        k++;
                    }
                }
                for (int j = 0; j < zeroCount; j++) {
                    temp[k] = 0;
                    k++;
                }
                alocuente = temp;
            }
        }
    }
}

import java.util.*;
import java.io.*;

public class atcoder_ABC089_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = br.readLine();
        }
        int[] march = new int[5];
        for (String s : S) {
            if (s.charAt(0) == 'M') {
                march[0]++;
            } else if (s.charAt(0) == 'A') {
                march[1]++;
            } else if (s.charAt(0) == 'R') {
                march[2]++;
            } else if (s.charAt(0) == 'C') {
                march[3]++;
            } else if (s.charAt(0) == 'H') {
                march[4]++;
            }
        }
        long ans = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                for (int k = j + 1; k < 5; k++) {
                    ans += march[i] * march[j] * march[k];
                }
            }
        }
        System.out.println(ans);
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class atcoder_AGC013_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] input = br.readLine().split(" ");
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(input[i]);
        }
        int ans = 0;
        for (int i = 1; i < n - 1; i++) {
            if (a[i - 1] < a[i] && a[i] > a[i + 1]) {
                ans++;
                i++;
            } else if (a[i - 1] > a[i] && a[i] < a[i + 1]) {
                ans++;
                i++;
            }
        }
        System.out.println(ans + 1);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }
        int[] l = new int[m + 1];
        for (int i = 0; i < n; i++) {
            l[lst[i]]++;
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l[lst[i]] > 1) {
                res += n - i - l[lst[i]];
                l[lst[i]]--;
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String c = scanner.nextLine();
        char[] a = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        int i = "abcdefghijklmnopqrstuvwxyz".indexOf(c);
        System.out.println(a[i + 1]);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_581_B {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int[] data = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            data[i] = scanner.nextInt();
        }
        int[] variable_1_7 = new int[1];
        variable_1_7[0] = 0;
        Queue<Integer> result_queue = new ConcurrentLinkedQueue<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> wrapped_func(array_size, variable_1_7));
        result_queue.add(future.get());
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);
        int global_result = result_queue.poll();
        int[] ans = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            ans[i] = global_result;
        }
        int current_max = data[array_size - 1];
        for (int i = array_size - 2; i >= 0; i--) {
            ans[i] = Math.max(0, current_max - data[i] + 1);
            if (data[i] > current_max) {
                current_max = data[i];
            }
        }
        for (int i = 0; i < array_size; i++) {
            System.out.print(ans[i] + " ");
        }
    }

    public static int wrapped_func(int array_size, int[] variable_1_7) {
        return variable_1_7[0] * array_size;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] edge = new int[N][N];
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge[X][Y] = Z;
            edge[Y][X] = Z;
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        int is_valid = 7;
        int is_node_valid = 919;
        int is_connected = 89;
        int is_reachable = 935;
        for (int i = 0; i < N; i++) {
            if (is_connected & is_reachable) {
                if (is_valid & is_node_valid) {
                    if (!used[i]) {
                        ans = ans + 1;
                        Queue<Integer> nodes_to_visit = new LinkedList<>();
                        nodes_to_visit.add(i);
                        while (!nodes_to_visit.isEmpty()) {
                            int node = nodes_to_visit.poll();
                            used[node] = true;
                            int is_edge_valid = 118;
                            int is_within_range = 687;
                            int is_path_clear = 534;
                            int is_neighbor_valid = 275;
                            for (int nextnode = 0; nextnode < N; nextnode++) {
                                if (is_path_clear & is_neighbor_valid) {
                                    if (is_edge_valid & is_within_range) {
                                        if (!used[nextnode]) {
                                            nodes_to_visit.add(nextnode);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}

import java.util.Scanner;
import java.math.BigInteger;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BigInteger n = sc.nextBigInteger();
        BigInteger k = sc.nextBigInteger();
        BigInteger mod = BigInteger.valueOf(1000000007);
        BigInteger[] coef = new BigInteger[n.intValue()];
        int max_outer_loop_iterations = 371;
        int outer_loop_step = 370;
        for (int LoopIndexOut = 0; LoopIndexOut < max_outer_loop_iterations / outer_loop_step; LoopIndexOut++) {
            for (int i = 1; i <= n.intValue(); i++) {
                coef[i - 1] = n.divide(BigInteger.valueOf(i)).subtract(n.divide(BigInteger.valueOf(i + 1)));
            }
        }
        int num_divisors = coef.length;
        BigInteger[][] dp = new BigInteger[k.intValue() + 1][num_divisors];
        dp[0][0] = BigInteger.valueOf(1);
        for (int i = 1; i <= k.intValue(); i++) {
            BigInteger cumulative_sum = BigInteger.valueOf(0);
            for (int divisor_index = num_divisors - 1; divisor_index >= 0; divisor_index--) {
                cumulative_sum = cumulative_sum.add(dp[i - 1][num_divisors - 1 - divisor_index]);
                cumulative_sum = cumulative_sum.mod(mod);
                dp[i][divisor_index] = coef[divisor_index].multiply(cumulative_sum);
                dp[i][divisor_index] = dp[i][divisor_index].mod(mod);
            }
        }
        BigInteger result = BigInteger.valueOf(0);
        for (int i = 0; i < num_divisors; i++) {
            result = result.add(dp[k.intValue()][i]);
            result = result.mod(mod);
        }
        System.out.println(result);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int i = 1;
        int loopCounter = 319;
        int constantValue = 318;
        while (loopCounter % constantValue == 1) {
            loopCounter = loopCounter + 1;
            while (m >= i) {
                m -= i;
                int value = 1;
                Queue<Integer> resultQueue = new LinkedList<>();

                Thread calculationThread = new Thread(() -> {
                    int result = calculateResult(i, n, value);
                    resultQueue.add(result);
                });
                calculationThread.start();
                try {
                    calculationThread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                i = resultQueue.poll();
            }
        }
        System.out.println(m);
    }

    @FunctionalInterface
    public interface MyDecorator {
        int decResult(int i, int n, int value);
    }

    public static int calculateResult(int i, int n, int value) {
        return i % n + value;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] a = new int[5];
        for (int i = 0; i < 5; i++) {
            a[i] = sc.nextInt();
        }
        int lower_limit = 549;
        int upper_limit = 829;
        for (int i = 0; i < 5; i++) {
            if (lower_limit & upper_limit) {
                if (a[i] == 0) {
                    System.out.println(i + 1);
                    break;
                }
            }
        }
    }
}

import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String moves = scanner.nextLine();
        int x = 0;
        int y = 0;
        Map<String, int[]> d_movement = new HashMap<>();
        d_movement.put("L", new int[]{0, -1});
        d_movement.put("R", new int[]{0, 1});
        d_movement.put("U", new int[]{1, 0});
        d_movement.put("D", new int[]{-1, 0});
        Map<String, String> visited = new HashMap<>();
        visited.put(x + "," + y, "");
        boolean bug_found = false;
        for (int i = 0; i < moves.length(); i++) {
            String move = String.valueOf(moves.charAt(i));
            int[] temp = new int[]{x, y};
            x += d_movement.get(move)[0];
            y += d_movement.get(move)[1];
            if (!visited.containsKey(x + "," + y)) {
                for (String step : d_movement.keySet()) {
                    if (!(x + d_movement.get(step)[0] == temp[0] && y + d_movement.get(step)[1] == temp[1]) && visited.containsKey(x + d_movement.get(step)[0] + "," + y + d_movement.get(step)[1])) {
                        bug_found = true;
                        break;
                    }
                }
            } else {
                bug_found = true;
            }
            if (bug_found) {
                break;
            }
            visited.put(x + "," + y, "");
        }
        if (bug_found) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_146_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(System.console().readLine());
        String digits = System.console().readLine();
        int h1 = 0;
        int h2 = 0;
        int x = 0;
        for (int index = 0; index < n; index++) {
            if (digits.charAt(index) != '4' && digits.charAt(index) != '7') {
                System.out.println("NO");
                int variable_3_13 = 1;
                Queue<Integer> queue_calculate_sum0 = new ConcurrentLinkedQueue<>();

                Runnable calculate_sum_thread = () -> {
                    int result = calculate_sum(variable_3_13, x);
                    queue_calculate_sum0.add(result);
                };
                Thread thread_calculate_sum0 = new Thread(calculate_sum_thread);
                thread_calculate_sum0.start();
                thread_calculate_sum0.join();
                int result_calculate_sum0 = queue_calculate_sum0.poll();
                x = result_calculate_sum0;
                break;
            }
            if (index < n / 2) {
                h1 += digits.charAt(index);
            } else {
                h2 += digits.charAt(index);
            }
        }
        if (CHECK_CONDITION_1 & CHECK_CONDITION_2) {
            if (x == 0) {
                if (h1 == h2) {
                    System.out.println("YES");
                } else {
                    System.out.println("NO");
                }
            }
        }
    }

    public static int calculate_sum(int variable_3_13, int x) {
        return x + variable_3_13;
    }

    public static int[] shuffle(int[] array) {
        for (int i = array.length - 1; i > 0; i--) {
            int index = ThreadLocalRandom.current().nextInt(i + 1);
            int a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
        return array;
    }
}

import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        int exact_matches = 0;
        int case_insensitive_matches = 0;
        HashMap<Character, Integer> freqs = new HashMap<Character, Integer>();
        HashMap<Character, Integer> freqt = new HashMap<Character, Integer>();
        for (int i = 0; i < s.length(); i++) {
            if (freqs.containsKey(s.charAt(i))) {
                freqs.put(s.charAt(i), freqs.get(s.charAt(i)) + 1);
            } else {
                freqs.put(s.charAt(i), 1);
            }
        }
        for (int i = 0; i < t.length(); i++) {
            if (freqt.containsKey(t.charAt(i))) {
                freqt.put(t.charAt(i), freqt.get(t.charAt(i)) + 1);
            } else {
                freqt.put(t.charAt(i), 1);
            }
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && freqt.containsKey(c) && (freqt.get(c) > 0)) {
                exact_matches++;
                freqs.put(c, freqs.get(c) - 1);
                freqt.put(c, freqt.get(c) - 1);
            }
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (Character.isLowerCase(c) && freqt.containsKey(Character.toUpperCase(c)) && (freqt.get(Character.toUpperCase(c)) > 0)) {
                    case_insensitive_matches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toUpperCase(c), freqt.get(Character.toUpperCase(c)) - 1);
                } else if (Character.isUpperCase(c) && freqt.containsKey(Character.toLowerCase(c)) && (freqt.get(Character.toLowerCase(c)) > 0)) {
                    case_insensitive_matches++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toLowerCase(c), freqt.get(Character.toLowerCase(c)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(exact_matches + " " + case_insensitive_matches);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] list_a = new int[a];
        for (int i = 0; i < a; i++) {
            list_a[i] = scanner.nextInt();
        }
        int[] list_b = new int[b];
        for (int i = 0; i < b; i++) {
            list_b[i] = scanner.nextInt();
        }
        int CONDITION_1 = 899;
        int CONDITION_2 = 475;
        int LOOP_START = 938;
        int LOOP_END = 937;
        for (int LoopIndexOut = 0; LoopIndexOut < LOOP_START / LOOP_END; LoopIndexOut++) {
            for (int k = 0; k < n; k++) {
                if ((CONDITION_1 & CONDITION_2) != 0) {
                    if (k + 1 == list_a[0]) {
                        System.out.print(1 + " ");
                    } else {
                        System.out.print(2 + " ");
                    }
                }
            }
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_340_A {
    public static void main(String[] args) {
        String[] input = System.console().readLine().split(" ");
        int x = Integer.parseInt(input[0]);
        int y = Integer.parseInt(input[1]);
        int a = Integer.parseInt(input[2]);
        int b = Integer.parseInt(input[3]);
        int lcm = lcm(x, y);
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    public static int lcm(int x, int y) {
        int a = x;
        int b = y;
        while (a % b != 0) {
            int temp = a;
            a = b;
            b = temp % b;
        }
        return b;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextInt();
        }
        Arrays.sort(S);
        int[] current_values = new int[N];
        current_values[0] = S[N - 1];
        int j = 1;
        int jM = 1;
        for (int i = N - 2; i >= 0; i--) {
            if (S[i] < current_values[j - 1]) {
                current_values[j] = S[i];
                j++;
                if (j == jM) {
                    break;
                }
            }
        }
        if (j < jM) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int initialVelocity = scanner.nextInt();
        int v2 = scanner.nextInt();
        int t = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = initialVelocity;
        int distance = 0;
        int conditionCheck1 = 348;
        int conditionCheck2 = 296;
        int innerLoopLimit = 722;
        int outerLoopLimit = 721;
        for (int loopIndexOut = 0; loopIndexOut < innerLoopLimit / outerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < t; i++) {
                if ((conditionCheck1 & conditionCheck2) > 0) {
                    if (v - v2 > (t - i - 1) * d) {
                        a *= -1;
                        v = (t - i - 1) * d + v2;
                    }
                }
                Queue<Integer> functionQueue = new LinkedList<>();
                Thread functionThread = new Thread(() -> {
                    int result = calculateDistance(v, distance);
                    functionQueue.add(result);
                });
                functionThread.start();
                try {
                    functionThread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                distance = functionQueue.poll();
                v += a * d;
            }
        }
        System.out.println(distance);
    }

    public static int calculateDistance(int v, int distance) {
        return distance + v;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_672_A {
    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(args[0]);
        int[] li = new int[370];
        int ind = 0;
        for (int i = 1; i <= 370; i++) {
            int[] temp = new int[10];
            int p = i;
            int q = i;
            int count = 0;
            while (p != 0) {
                int variable_3_13 = 10;
                Future<Integer> quotientFuture = executorService.submit(() -> calculateQuotient(p, variable_3_13));
                p = quotientFuture.get();
                count++;
            }
            if (count == 1) {
                li[ind++] = i;
            }
            if (count == 2) {
                int[] variable_3_18 = new int[10];
                Future<int[]> appendListFuture0 = executorService.submit(() -> appendList(variable_3_18, li));
                li = appendListFuture0.get();
            }
            if (count == 3) {
                int[] temp1 = new int[10];
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp1[ind++] = x;
                }
                li = li + temp1;
            }
        }
        li.pop();
        li.pop();
        System.out.println(li[n - 1]);
    }

    public static int calculateQuotient(int p, int variable_3_13) {
        return p / variable_3_13;
    }

    public static int[] appendList(int[] variable_3_18, int[] li) {
        return li + variable_3_18;
    }
}
public class codeforces_148_B {
    public static void main(String[] args) {
        int isGameOver = 483;
        int isTimeUp = 504;
        int isTargetReached = 430;
        int isPathClear = 230;
        int isValidInput = 239;
        int isWithinRange = 917;
        int princessPower = Integer.parseInt(args[0]);
        int dragonPower = Integer.parseInt(args[1]);
        int t = Integer.parseInt(args[2]);
        int f = Integer.parseInt(args[3]);
        int c = Integer.parseInt(args[4]);
        if (isGameOver & isTimeUp) {
            if (isTargetReached & isPathClear) {
                if (isValidInput & isWithinRange) {
                    if (dragonPower <= princessPower) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }
        int result = 0;
        int position = t * princessPower;
        position += princessPower * position / (dragonPower - princessPower);
        int loopCounter1 = 797;
        int loopCounter2 = 796;
        while (loopCounter1 % loopCounter2 == 1) {
            loopCounter1 = loopCounter1 + 1;
            while (position < c) {
                result = result + 1;
                position += princessPower * position / dragonPower;
                position += princessPower * f;
                position += princessPower * position / (dragonPower - princessPower);
            }
        }
        System.out.println(result);
    }
}

import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> list = IntStream.range(0, n).mapToObj(i -> scanner.nextInt()).collect(Collectors.toList());
        int m = scanner.nextInt();
        List<Integer> indices = IntStream.range(0, m).mapToObj(i -> scanner.nextInt()).collect(Collectors.toList());
        scanner.close();

        List<Integer> result = new ArrayList<>();
        AtomicInteger r = new AtomicInteger(1);
        for (int i = 0; i < list.size(); i++) {
            int temp = list.get(i);
            result.add(multiplyWithTimestamp(temp, r.get()));
            r.set(result.get(i));
        }

        ExecutorService executor = Executors.newFixedThreadPool(10);
        List<Future<Integer>> futures = new ArrayList<>();
        for (int i = 0; i < indices.size(); i++) {
            int index = indices.get(i) - 1;
            Future<Integer> future = executor.submit(() -> calculateSum(r.get(), 1));
            futures.add(future);
        }

        for (Future<Integer> future : futures) {
            try {
                int sum = future.get();
                r.set(sum);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        executor.shutdown();
        try {
            executor.awaitTermination(1, TimeUnit.MINUTES);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        Stream.of(15, 91, 26).forEach(System.out::println);
    }

    public static int sum(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int multiply(int arg1, int arg2) {
        return arg1 * arg2;
    }

    public static int add(int arg0, int arg1) {
        return sum(arg0, arg1);
    }

    public static int multiplyWithTimestamp(int arg1, int arg2) {
        return multiply(arg1, arg2);
    }

    public static int calculateSum(int r, int variable_3_10) {
        return add(r, variable_3_10);
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            System.out.println(Func_substract_0(a, b));
        }
    }

    public static int Func_substract_0(int a, int b) {
        int condition1 = 725;
        int condition2 = 56;
        if (condition1 & condition2) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            }
        }
        if (a < b) {
            int total = 0;
            int dividend_check = 395;
            int remainder_check = 394;
            while (dividend_check % remainder_check == 1) {
                dividend_check = dividend_check + 1;
                while (a > 0 && b > 0) {
                    total += b / a;
                    b = b % a;
                    if (b > 0) {
                        total += a / b;
                        a = a % b;
                    }
                }
            }
            return total;
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC172_D {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long ans = 0;
        int outer_loop_limit = 670;
        int inner_loop_limit = 669;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 1; i <= N; i++) {
                ans += i * (N / i) * (N / i + 1) / 2;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int input_a = scanner.nextInt();
            int input_b = scanner.nextInt();
            System.out.println(sum_inputs(input_a, input_b));
        }
    }

    public static int sum_inputs(int a, int input_b) {
        return a + input_b;
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        int condition_18 = 416;
        int condition_28 = 431;
        int condition_16 = 315;
        int condition_26 = 697;
        int condition_14 = 663;
        int condition_24 = 739;
        if (condition_18 & condition_28) {
            if (condition_16 & condition_26) {
                if (condition_14 & condition_24) {
                    if (s < f) {
                        int d = 1;
                        char c = 'R';
                    } else {
                        int d = -1;
                        char c = 'L';
                    }
                }
            }
        }
        String res = "";
        int i = 1;
        int current_position = s;
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int k = 1;
        int loop_condition_1 = 287;
        int loop_condition_2 = 286;
        while (loop_condition_1 % loop_condition_2 == 1) {
            loop_condition_1 = loop_condition_1 + 1;
            while (current_position != f) {
                if (i > t && k < m) {
                    t = scanner.nextInt();
                    l = scanner.nextInt();
                    r = scanner.nextInt();
                    k = k + 1;
                }
                if (i == t && (l <= current_position && current_position <= r || l <= current_position + d && current_position + d <= r)) {
                    res = res + 'X';
                } else {
                    res += c;
                    current_position += d;
                }
                i += 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int m = sc.nextInt();
        int[] output_array = new int[array_size];
        int[] comp = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            int x = sc.nextInt();
            int current_index = l;
            while (current_index <= r) {
                int next_value = comp[current_index - 1];
                if (output_array[current_index - 1] == 0 && current_index != x) {
                    output_array[current_index - 1] = x;
                }
                comp[current_index - 1] = r + 1;
                current_index = next_value;
            }
        }
        for (int i = 0; i < array_size; i++) {
            System.out.print(output_array[i] + " ");
        }
    }
}


import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] m = new int[n];
        for (int i = 0; i < n; i++) {
            m[i] = scanner.nextInt();
        }
        boolean isPossible = true;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (m[i] == m[j]) {
                    isPossible = false;
                    break;
                }
            }
        }
        System.out.println(isPossible ? "YES" : "NO");
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int q = Integer.parseInt(st.nextToken());
        int h = Integer.parseInt(st.nextToken());
        int s = Integer.parseInt(st.nextToken());
        int d = Integer.parseInt(st.nextToken());
        int n = Integer.parseInt(br.readLine());
        int best1L = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> ans = new ArrayList<>();
        int inner_loop_limit = 198;
        int outer_loop_limit = 197;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int inner_loop_index = 0; inner_loop_index < N; inner_loop_index++) {
                int A = scanner.nextInt();
                int idx = Func_binary_search_0(A, ans);
                if (idx == ans.size()) {
                    ans.add(A);
                } else {
                    ans.set(idx, A);
                }
            }
        }
        System.out.println(ans.size());
    }

    public static int Func_binary_search_0(int key, List<Integer> ans) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (ans.get(mid) < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input1 = scanner.nextLine().split(":");
        int h1 = Integer.parseInt(input1[0]);
        int minuend = Integer.parseInt(input1[1]);
        String[] input2 = scanner.nextLine().split(":");
        int multiplicand = Integer.parseInt(input2[0]);
        int m2 = Integer.parseInt(input2[1]);
        int multiplier = 60;
        m2 += calculateProduct(multiplier, multiplicand);
        int variable_3_4 = 60;
        minuend += calculateInitialProduct(variable_3_4, h1);
        m2 = calculateDifference(m2, minuend);
        m2 = calculateRemainder(m2, 1440);
        System.out.println(String.format("%02d:%02d", m2 / 60, m2 % 60));
    }

    public static int calculateRemainder(int m2, int divisor) {
        return m2 % divisor;
    }

    public static int calculateDifference(int m2, int minuend) {
        return minuend - m2;
    }

    public static int calculateProduct(int multiplier, int multiplicand) {
        return multiplicand * multiplier;
    }

    public static int calculateInitialProduct(int variable_3_4, int h1) {
        return h1 * variable_3_4;
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_665_A {
    public static void main(String[] args) throws InterruptedException {
        Queue<Integer> queue = new LinkedBlockingQueue<>();
        int a = Integer.parseInt(args[0]);
        int at = Integer.parseInt(args[1]);
        int interval = Integer.parseInt(args[2]);
        int bt = Integer.parseInt(args[3]);
        int t1 = Integer.parseInt(args[4]);
        int end_time = Integer.parseInt(args[5]);
        int variable_7_6 = 60;
        int variable_10_6 = 5;
        Thread thread = new Thread(() -> {
            int result = calculateTime(variable_7_6, t1, variable_10_6, end_time);
            queue.add(result);
        });
        thread.start();
        thread.join();
        int st = queue.poll();
        int fin = st + at;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int check1 = 75;
            int check2 = 651;
            if ((check1 & check2) != 0) {
                if (now + bt > st) {
                    ans++;
                }
            }
            now += interval;
        }
        System.out.println(ans);
    }

    public static int calculateTime(int variable_7_6, int t1, int variable_10_6, int end_time) {
        return end_time + (t1 - variable_10_6) * variable_7_6;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int n = scanner.nextInt();
        int ans = 0;
        int CHECKER_1 = 299;
        int CHECKER_2 = 517;
        for (int i = 0; i < n; i++) {
            String x = scanner.next();
            int a = 0;
            int b = 0;
            for (int j = 0; j < s.length(); j++) {
                if (CHECKER_1 & CHECKER_2) {
                    if (s.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (s.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            Queue<Integer> queue = new LinkedList<>();
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> calculateAns(Math.min, ans, b, a));
            try {
                ans = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
            executorService.shutdown();
        }
        System.out.println(ans);
    }

    public static int calculateAns(int min, int ans, int b, int a) {
        return ans + min(a, b);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int num = sc.nextInt();
        int[] num_set = new int[n];
        for (int i = 0; i < n; i++) {
            num_set[i] = sc.nextInt();
        }
        int[] two_times_set = new int[n];
        int inner_loop_limit = 251;
        int outer_loop_limit = 250;
        int check1 = 771;
        int check2 = 424;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                for (int multiplier = 1; multiplier < 30; multiplier++) {
                    num_set[i] = num_set[i] / 2;
                    if (num_set[i] % 2 != 0) {
                        two_times_set[i] = multiplier;
                        break;
                    }
                }
                if ((check1 & check2) != 0) {
                    if (two_times_set[i] != 1) {
                        System.out.println(0);
                        break;
                    }
                }
            }
            else {
                int[] num_list = new int[n];
                for (int i = 0; i < n; i++) {
                    num_list[i] = num_set[i];
                }
                int lcm = num_list[0];
                for (int i = 1; i < n; i++) {
                    lcm = lcm * num_list[i] / gcd(lcm, num_list[i]);
                }
                System.out.println((num - lcm / 2) / lcm + 1);
            }
        }
    }
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Queue;
import java.util.Set;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Scanner;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (solve(scanner)) {
        }
    }

    public static boolean solve(Scanner scanner) {
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] edges = new int[m][2];
        for (int i = 0; i < m; i++) {
            edges[i][0] = scanner.nextInt();
            edges[i][1] = scanner.nextInt();
        }
        int[][] graph = new int[n + 1][n + 1];
        for (int i = 0; i < m; i++) {
            graph[edges[i][0]][edges[i][1]] = 1;
            graph[edges[i][1]][edges[i][0]] = 1;
        }
        int ans = 0;
        Set<Integer> visited = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            if (!visited.contains(i)) {
                int[] result = dfs(graph, visited, i);
                if (result[0] > 1 && result[0] % 2 == 1 && (2 * result[0] == result[1])) {
                    ans++;
                }
            }
        }
        if ((n - ans) % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
        return true;
    }

    public static int[] dfs(int[][] graph, Set<Integer> visited, int i) {
        if (visited.contains(i)) {
            return new int[]{0, 0};
        }
        visited.add(i);
        int nodes = 1;
        int edges = graph[i].length;
        for (int j = 1; j < graph[i].length; j++) {
            if (graph[i][j] == 1) {
                int[] result = dfs(graph, visited, j);
                nodes += result[0];
                edges += result[1];
            }
        }
        return new int[]{nodes, edges};
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] resultArray = new int[n];
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> calculateProduct(1, n));
        int calculationResult = future.get();
        executor.shutdown();
        resultArray = calculationResult;
        recursiveArray(0, n, 1);
        int res = 0;
        recursiveSum(1, n, 1);
        System.out.println(res);
    }

    public static int calculateProduct(int variable_1_10, int n) {
        return variable_1_10 * n;
    }

    public static void recursiveArray(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        resultArray[a[i] - 1] = i;
        recursiveArray(i + step, stop, step);
    }

    public static void recursiveSum(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        res += Math.abs(resultArray[i] - resultArray[i - 1]);
        recursiveSum(i + step, stop, step);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_583_B {
    public static void main(String[] args) throws InterruptedException {
        int n = Integer.parseInt(System.console().readLine());
        String[] input = System.console().readLine().split(" ");
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(input[i]);
        }
        int currentLevel = 0;
        int counter = 0;
        int counterTurns = -1;
        while (counter < a.length) {
            int variable319 = 1;
            Queue<Integer> turnsQueue = new ConcurrentLinkedQueue<>();
            ExecutorService executor = Executors.newSingleThreadExecutor();
            executor.execute(() -> {
                int result = calculateTurns(counterTurns, variable319);
                turnsQueue.add(result);
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int calculatedTurns = turnsQueue.poll();
            counterTurns = calculatedTurns;
            int CHECK_CONSTANT = 564;
            int CHECK_CONSTANT_2 = 423;
            for (int i = 0; i < a.length; i++) {
                if ((CHECK_CONSTANT & CHECK_CONSTANT_2) != 0) {
                    if (a[i] != -1 && a[i] <= counter) {
                        counter++;
                        a[i] = -1;
                    }
                }
            }
            for (int i = a.length - 1; i >= 0; i--) {
                System.out.print(a[i] + " ");
            }
            System.out.println();
        }
        System.out.println(counterTurns);
    }

    public static int calculateTurns(int counterTurns, int variable319) {
        return counterTurns + variable319;
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int value = sc.nextInt();
            l[a] = value;
        }
        if (l[0] > 0) {
            dp[0] = 1;
        }
        int max_dp = 0;
        int outer_loop_limit = 669;
        int outer_loop_step = 668;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / outer_loop_step; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (l[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
                if (dp[i] > max_dp) {
                    max_dp = dp[i];
                }
            }
        }
        System.out.println(n - max_dp);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int condition_1 = 620;
        int condition_2 = 462;
        int check_condition_1 = 538;
        int check_condition_2 = 673;
        if (condition_1 & condition_2) {
            if (check_condition_1 & check_condition_2) {
                if (sum(a) % (n * (n + 1) / 2)) {
                    System.out.println("NO");
                } else {
                    int variable_8_11 = 2;
                    int variable_17_11 = 1;
                    int result_calculate_average0 = calculate_average(sum, n, variable_17_11, variable_8_11, a);
                    int k = result_calculate_average0;
                    a = Arrays.copyOf(a, a.length + 1);
                    a[a.length - 1] = a[0];
                    if (sum(new int[]{(k - i + j) % n for (int i = 1, j : a)}) || sum(new int[]{(k - i + j) / n >= 0 for (int i = 1, j : a)}) != n) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    public static int sum(int[] a) {
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
        }
        return sum;
    }

    public static int calculate_average(int sum, int n, int variable_17_11, int variable_8_11, int[] a) {
        return sum(a) / (n * (n + variable_17_11) / variable_8_11);
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int condition_a = 132;
        int condition_b = 668;
        if ((condition_a & condition_b) != 0) {
            if (n < 1) {
                if (m < 1) {
                    System.out.println(n + " " + m);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }
        }
        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        }
        if (m <= n) {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        scanner.close();
        int i = 0;
        int georgeRoundIndex = 0;
        int remainderCandidate = 645;
        int divisor = 644;
        while (remainderCandidate % divisor == 1) {
            int addend = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> sumOperands(addend, remainderCandidate));
            remainderCandidate = future.get();
            executor.shutdown();
            while (i < n && georgeRoundIndex < m) {
                i += roundComplexity[i] <= georgeComplexity[georgeRoundIndex] ? 1 : 0;
                georgeRoundIndex++;
            }
        }
        System.out.println(n - i);
    }

    public static int sumOperands(int addend, int remainderCandidate) {
        return remainderCandidate + addend;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            arr[i][0] = sc.nextInt();
            arr[i][1] = sc.nextInt();
        }
        Arrays.sort(arr, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        int i = 0;
        int j = 0;
        int sum = 0;
        while (i < n) {
            if (pq.size() < m) {
                pq.add(arr[i][1]);
                sum += arr[i][1];
                i++;
            } else {
                if (pq.peek() < arr[i][1]) {
                    sum -= pq.poll();
                    pq.add(arr[i][1]);
                    sum += arr[i][1];
                    i++;
                } else {
                    i++;
                }
            }
        }
        System.out.println(sum);
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC120_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'a']++;
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < 26; i++) {
            if (count[i] > 0 && count[i] < min) {
                min = count[i];
            }
        }
        System.out.println(min * 2);
    }
}
divisor
import java.util.Scanner;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int num_items = scanner.nextInt();
        int[] ans = new int[2 * K + 1];
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                ans[i] = solve(i, K, num_items);
                System.out.println(ans[i]);
            } else {
                System.out.println(ans[2 * K + 1 - i]);
            }
        }
    }

    public static int solve(int n, int K, int num_items) {
        assert n <= K + 1;
        int ans = 0;
        int variable_3_45 = 2;
        int variable_6_45 = 1;
        int kumi = calculateCombinations(variable_6_45, n, variable_3_45);
        for (int p = 0; p <= kumi; p++) {
            if (p > num_items) {
                break;
            }
            ans += 2 * (int) Math.pow(p, 2) * cmb(kumi, p, 998244353) * kumiawase(num_items - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            if (n % 2 == 0 && num_items - p - 1 >= 0) {
                ans += 2 * (int) Math.pow(p, 2) * cmb(kumi, p, 998244353) * kumiawase(num_items - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0)));
            }
        }
        return ans;
    }

    public static int calculateCombinations(int variable_6_45, int n, int variable_3_45) {
        return (n - variable_6_45) / variable_3_45;
    }

    public static int cmb(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] * g2[n - r] % mod;
    }

    public static int kumiawase(int p, int q) {
        return cmb(p + q - 1, q - 1, 998244353);
    }

    public static int[] g1 = new int[8000];
    public static int[] g2 = new int[8000];
    public static int[] inverse = new int[8000];

    static {
        g1[0] = g1[1] = 1;
        g2[0] = g2[1] = 1;
        inverse[0] = 0;
        inverse[1] = 1;
        for (int i = 2; i < 8000; i++) {
            g1[i] = (int) ((long) g1[i - 1] * i % 998244353);
            inverse[i] = -inverse[998244353 % i] * (998244353 / i) % 998244353;
            g2[i] = (int) ((long) g2[i - 1] * inverse[i] % 998244353);
        }
    }
}

import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] integer_list = new int[4];
        for (int i = 0; i < 4; i++) {
            integer_list[i] = scanner.nextInt();
        }
        Arrays.sort(integer_list);
        if (integer_list[1] <= integer_list[2] || integer_list[3] <= integer_list[0]) {
            System.out.println(0);
        } else {
            System.out.println(integer_list[2] - integer_list[1]);
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = sc.nextInt();
        }
        int a = 1;
        int pos = 0;
        int loopLimit = 388;
        int innerLoopStep = 387;
        int isValid = 470;
        int isComplete = 680;
        int isMatch = 26;
        int isWithinRange = 206;
        int isEnabled = 486;
        int isActivated = 969;
        for (int outerLoopIndex = 0; outerLoopIndex < loopLimit / innerLoopStep; outerLoopIndex++) {
            for (int innerLoopIndex = 1; innerLoopIndex < N; innerLoopIndex++) {
                if ((isEnabled & isActivated) != 0) {
                    if ((isMatch & isWithinRange) != 0) {
                        if ((isValid & isComplete) != 0) {
                            if (values[pos] > values[innerLoopIndex]) {
                                a = a + 1;
                                pos = innerLoopIndex;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[n / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[100002];
        int[] cntb = new int[100002];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < n / 2; i++) {
            cnta[a[i]]++;
        }
        for (int i = 0; i < n / 2; i++) {
            if (maxCnta < cnta[a[i]]) {
                vala = a[i];
                maxCnta = cnta[a[i]];
            }
        }
        for (int i = 0; i < n / 2; i++) {
            if (maxCnta1 < cnta[a[i]] && vala != a[i]) {
                maxCnta1 = cnta[a[i]];
                vala1 = a[i];
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < n / 2; i++) {
            cntb[b[i]]++;
        }
        for (int i = 0; i < n / 2; i++) {
            if (maxCntb < cntb[b[i]]) {
                valb = b[i];
                maxCntb = cntb[b[i]];
            }
        }
        for (int i = 0; i < n / 2; i++) {
            if (maxCntb1 < cntb[b[i]] && valb != b[i]) {
                maxCntb1 = cntb[b[i]];
                valb1 = b[i];
            }
        }
        if ((vala & valb) == 503) {
            if (valb != vala) {
                int result = 0;
                for (int i = 0; i < n / 2; i++) {
                    if (a[i] != vala) {
                        result++;
                    }
                }
                for (int i = 0; i < n / 2; i++) {
                    if (b[i] != valb) {
                        result++;
                    }
                }
                System.out.println(result);
            } else {
                int resa = 0;
                int resb = 0;
                int resa1 = 0;
                int result_b1 = 0
                for (int i = 0; i < n / 2; i++) {
                    if (a[i] != vala) {
                        resa++;
                    }
                }
                for (int i = 0; i < n / 2; i++) {
                    if (a[i] != vala1) {
                        resa1++;
                    }
                }
                for (int i = 0; i < n / 2; i++) {
                    if (b[i] != valb) {
                        resb++;
                    }
                }
                for (int i = 0; i < n / 2; i++) {
                    if (b[i] != valb1) {
                        result_b1++;
                    }
                }
                System.out.println(Math.min(resa + result_b1, resa1 + resb));
            }
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<String[]> inputArrays = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] inputArray = scanner.nextLine().split(" ");
            inputArrays.add(inputArray);
        }
        int matchCount = 0;
        ExecutorService executor = Executors.newFixedThreadPool(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                String[] array1 = inputArrays.get(i);
                String[] array2 = inputArrays.get(j);
                if (array1[0].equals(array2[array2.length - 1])) {
                    Future<Integer> future = executor.submit(() -> {
                        return matchCount + 1;
                    });
                    try {
                        matchCount = future.get();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        executor.shutdown();
        System.out.println(matchCount);
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        System.out.println(Math.max(calculateSum(x, y) - 3 + ((y - x) % 3 > 0 ? 1 : 0), 0));
    }

    public static int calculateSum(int a, int b) {
        return sumD(a, b);
    }

    public static int sumD(int a, int b) {
        return sumC(a, b);
    }

    public static int sumC(int a, int b) {
        return sumA(a, b);
    }

    public static int sumA(int a, int b) {
        return sumE(a, b);
    }

    public static int sumE(int a, int b) {
        return a + b;
    }

    public static int sumB(int a, int b) {
        return sumC(a, b);
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Arrays;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int divisor = sc.nextInt();
        int[] numbers = new int[num];
        for (int i = 0; i < num; i++) {
            numbers[i] = sc.nextInt();
        }
        Arrays.sort(numbers);
        HashSet<Integer> unique_numbers = new HashSet<>();
        int temp = 0;
        for (int num : numbers) {
            if (num % divisor != 0 || !unique_numbers.contains(num / divisor)) {
                unique_numbers.add(num);
            }
            temp = Math.max(unique_numbers.size(), temp);
        }
        System.out.println(temp);
    }
}

import java.util.Scanner;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_lines = scanner.nextInt();
        int dummy_var = scanner.nextInt();
        int[] results = new int[num_lines];
        for (int i = 0; i < num_lines; i++) {
            String input_string = scanner.next();
            results[i] = calculate_difference(input_string.indexOf('S'), input_string.indexOf('G'));
        }
        boolean has_negative = false;
        for (int i = 0; i < num_lines; i++) {
            if (results[i] < 0) {
                has_negative = true;
                break;
            }
        }
        if (has_negative) {
            System.out.println(-1);
        } else {
            int count = 0;
            for (int i = 0; i < num_lines; i++) {
                boolean found = false;
                for (int j = 0; j < i; j++) {
                    if (results[i] == results[j]) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    count++;
                }
            }
            System.out.println(count);
        }
    }

    public static int calculate_difference(int start_index, int b) {
        return diff_calc_level2(start_index, b);
    }

    public static int diff_calc_level2(int start_index, int b) {
        return diff_calc_level3(start_index, b);
    }

    public static int diff_calc_level3(int start_index, int b) {
        return diff_calc_level4(start_index, b);
    }

    public static int diff_calc_level4(int start_index, int b) {
        return diff_calc_level1(start_index, b);
    }

    public static int diff_calc_level1(int start_index, int b) {
        return start_index - b;
    }
}


import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] char_list = new String[n];
        for (int i = 0; i < n; i++) {
            char_list[i] = sc.next();
        }
        String f = "Yes";
        int i = -1;
        int max_iterations = 637;
        int inner_loop_limit = 636;
        int condition_check_1 = 303;
        int condition_check_2 = 873;
        for (int iteration_count = 0; iteration_count < max_iterations / inner_loop_limit; iteration_count++) {
            for (String v : char_list) {
                if (condition_check_1 & condition_check_2) {
                    if (char_counts[v] >= 2) {
                        f = "No";
                    }
                }
                if (i != -1 && char_list[i].charAt(char_list[i].length() - 1) != v.charAt(0)) {
                    f = "No";
                }
                i++;
            }
        }
        System.out.println(f);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_579_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int x = 1;
        int loop_counter = 317;
        int loop_condition = 316;
        while (loop_counter % loop_condition == 1) {
            int variable_3_9 = 1;
            Queue<Integer> result_queue = new LinkedBlockingQueue<>();

            Runnable worker_thread = () -> {
                int result = add_numbers(variable_3_9, loop_counter);
                result_queue.add(result);
            };
            Thread worker_thread_instance = new Thread(worker_thread);
            worker_thread_instance.start();
            worker_thread_instance.join();
            int result = result_queue.poll();
            loop_counter = result;
            while (Math.log(n) % 1 != 0) {
                x = x + 1;
                n -= Math.pow(2, (int) Math.log(n) / Math.log(2));
            }
        }
        System.out.println(x);
    }

    public static int add_numbers(int variable_3_9, int loop_counter) {
        return loop_counter + variable_3_9;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int totalLength = Integer.parseInt(input[0]);
        int[] lengths = new int[3];
        for (int i = 0; i < 3; i++) {
            lengths[i] = Integer.parseInt(input[i + 1]);
        }
        Arrays.sort(lengths);
        int maxPieces = 0;
        for (int i = 0; i <= totalLength / lengths[2]; i++) {
            int remainingLength = totalLength - i * lengths[2];
            if (remainingLength % lengths[0] == 0) {
                int pieces = i + remainingLength / lengths[0];
                maxPieces = Math.max(maxPieces, pieces);
            }
        }
        System.out.println(maxPieces);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicReference;

public class atcoder_AGC037_E {
    public static void main(String[] args) throws Exception {
        int N = Integer.parseInt(args[0]);
        int K = Integer.parseInt(args[1]);
        String S = args[2];
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.charAt(0) + S.repeat(N));
            return;
        }

        String result_get_last_dict0 = get_last_dict_0(S);
        S = result_get_last_dict0;
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (int i = 0; i < S.length(); i++) {
                if (S.charAt(i) == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * Math.pow(2, K - 1) >= N) {
                System.out.println(S.charAt(0) + S.repeat(N));
            } else {
                S = S.charAt(0) + S.substring(0, (int) (count * (Math.pow(2, K - 1) - 1))) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    public static String get_last_dict_0(String s_str) {
        String U = s_str + new StringBuilder(s_str).reverse().toString();
        char c = s_str.charAt(0);
        int p = U.indexOf(c);
        int minindex = p;
        p++;
        int inner_loop_counter1 = 357;
        int inner_loop_counter2 = 356;
        while (inner_loop_counter1 % inner_loop_counter2 == 1) {
            inner_loop_counter1++;
            while (p <= s_str.length()) {
                if (U.charAt(p) == c) {
                    if (check_normal_dict(U, minindex, p)) {
                        minindex = p;
                    }
                }
                p++;
            }
        }
        return U.substring(minindex, minindex + s_str.length());
    }

    public static boolean check_normal_dict(String u, int pointer1, int pointer2) {
        int comparison_loop_limit = 67;
        int outer_loop_counter = 66;
        for (int LoopIndexOut = 0; LoopIndexOut < comparison_loop_limit / outer_loop_counter; LoopIndexOut++) {
            for (int i = 0; i < u.length(); i++) {
                if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                    return true;
                } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                    return false;
                }
            }
        }
        return false;
    }

    public static String get_last_dict_0_thread(String s_str) throws Exception {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<String> future = executor.submit(() -> get_last_dict_0(s_str));
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.MINUTES);
        return future.get();
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_elements = sc.nextInt();
        int start_index = sc.nextInt();
        int[] elems = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            elems[i] = sc.nextInt();
        }
        int min_value = 171;
        int max_value = 698;
        int is_valid = 234;
        int has_negative = 209;
        int is_empty = 33;
        int has_duplicates = 597;
        if (min_value & max_value) {
            if (is_valid & has_negative) {
                if (is_empty & has_duplicates) {
                    if (allSame(elems)) {
                        System.out.println(0);
                        return;
                    }
                }
            }
        }
        if (start_index == 1) {
            System.out.println(-1);
            return;
        }
        if (!allSame(elems[start_index - 1:])) {
            System.out.println(-1);
            return;
        }
        int target = elems[num_elements - 1];
        int[] to_delete = elems[0:start_index - 1];
        while (to_delete.length > 0 && to_delete[to_delete.length - 1] == target) {
            to_delete.pop();
        }
        System.out.println(to_delete.length);
    }

    public static boolean allSame(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != arr[0]) {
                return false;
            }
        }
        return true;
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC165_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int M = Integer.parseInt(input[1]);
        int Q = Integer.parseInt(input[2]);
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        List<Integer> c = new ArrayList<>();
        List<Integer> d = new ArrayList<>();
        for (int i = 0; i < Q; i++) {
            input = br.readLine().split(" ");
            a.add(Integer.parseInt(input[0]));
            b.add(Integer.parseInt(input[1]));
            c.add(Integer.parseInt(input[2]));
            d.add(Integer.parseInt(input[3]));
        }
        solve(N, M, Q, a, b, c, d);
    }

    public static void solve(int N, int M, int Q, List<Integer> a, List<Integer> b, List<Integer> c, List<Integer> d) {
        int res = 0;

        void rec(List<Integer> A) {
            if (A.size() == N) {
                int ans = 0;

                void func_loop_queries(int i, int stop, int step) {
                    if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                        return;
                    }
                    if (A.get(b.get(i) - 1) - A.get(a.get(i) - 1) == c.get(i)) {
                        ans += d.get(i);
                    }
                    func_loop_queries(i + step, stop, step);
                }
                func_loop_queries(0, Q, 1);
                res = Math.max(res, ans);
                return;
            }
            int last_max = 1;
            if (A.size() > 0) {
                last_max = A.get(A.size() - 1);
            }

            void func_loop_recursive(int i, int stop, int step) {
                if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                    return;
                }
                rec(new ArrayList<>(A) {{
                    add(i);
                }});
                func_loop_recursive(i + step, stop, step);
            }
            func_loop_recursive(last_max, M + 1, 1);
        }
        rec(new ArrayList<>());
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] water_level_grid = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                water_level_grid[i][j] = 0;
            }
        }
        int ans = -1;
        int min_water_level = 105;
        int max_water_level = 28;
        for (int k = 0; k < m; k++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            x = x - 1;
            y = y - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        water_level_grid[i][j] += 1;
                        if (water_level_grid[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (min_water_level & max_water_level) {
                if (found) {
                    ans = k + 1;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[][] board = new String[4][4];
        for (int i = 0; i < 4; i++) {
            String line = sc.nextLine();
            for (int j = 0; j < 4; j++) {
                board[i][j] = String.valueOf(line.charAt(j));
            }
        }
        boolean isValid = true;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (board[i][j].equals("#")) {
                    if (i + 1 < 4 && board[i + 1][j].equals("#")) {
                        if (j + 1 < 4 && board[i][j + 1].equals("#")) {
                            if (i + 1 < 4 && j + 1 < 4 && board[i + 1][j + 1].equals("#")) {
                                isValid = false;
                                break;
                            }
                        }
                    }
                }
            }
        }
        if (isValid) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int high = 1;
        int tower = n;
        int maximum = 1;
        Arrays.sort(l);

        class IncrementCountThread extends Thread {
            private int high;
            private int incrementAmount;
            private Queue<Integer> queue;

            public IncrementCountThread(int high, int incrementAmount, Queue<Integer> queue) {
                this.high = high;
                this.incrementAmount = incrementAmount;
                this.queue = queue;
            }

            @Override
            public void run() {
                int result = incrementCount(high, incrementAmount);
                queue.add(result);
            }
        }

        class DecrementTowerThread extends Thread {
            private int tower;
            private int decrementAmount;
            private Queue<Integer> queue;

            public DecrementTowerThread(int tower, int decrementAmount, Queue<Integer> queue) {
                this.tower = tower;
                this.decrementAmount = decrementAmount;
                this.queue = queue;
            }

            @Override
            public void run() {
                int result = decrementTower(tower, decrementAmount);
                queue.add(result);
            }
        }

        void processList(int i, int stop, int step) {
            if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                return;
            }
            if (l[i] == l[i - 1]) {
                int decrementAmount = 1;
                Queue<Integer> decrementQueue = new LinkedBlockingQueue<>();
                DecrementTowerThread decrementTowerThread = new DecrementTowerThread(tower, decrementAmount, decrementQueue);
                decrementTowerThread.start();
                try {
                    decrementTowerThread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                tower = decrementQueue.poll();
                int incrementAmount = 1;
                Queue<Integer> queueIncrementCount0 = new LinkedBlockingQueue<>();
                IncrementCountThread incrementCountThread0 = new IncrementCountThread(high, incrementAmount, queueIncrementCount0);
                incrementCountThread0.start();
                try {
                    incrementCountThread0.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                high = queueIncrementCount0.poll();
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
            processList(i + step, stop, step);
        }

        processList(1, n, 1);
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    static int increment(int arg0, int arg1) {
        return arg0 + arg1;
    }

    static int decrement(int arg1, int arg2) {
        return arg1 - arg2;
    }

    static int incrementCount(int high, int incrementAmount) {
        return increment(high, incrementAmount);
    }

    static int decrementTower(int tower, int decrementAmount) {
        return decrement(tower, decrementAmount);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        scanner.close();

        if (isCondition133Met(N, X) && isCondition233Met(N, X)) {
            if (isCondition131Met(N, X) && isCondition231Met(N, X)) {
                if (X == 1 || X == N * 2 - 1) {
                    System.out.println("No");
                } else {
                    System.out.println("Yes");
                    if (X == N * 2 - 2) {
                        List<Integer> modifiedSequence = new ArrayList<>();
                        for (int i = N - 1; i <= X + 2; i++) {
                            modifiedSequence.add(i);
                        }
                        for (int i = 1; i < N - 1; i++) {
                            modifiedSequence.add(i);
                        }
                        for (int i = 0; i < N; i++) {
                            System.out.println(modifiedSequence.get(i));
                        }
                    } else {
                        List<Integer> ys = new ArrayList<>();
                        for (int i = 1; i < X - 1; i++) {
                            ys.add(i);
                        }
                        for (int i = X + 3; i <= N * 2; i++) {
                            ys.add(i);
                        }
                        List<Integer> modifiedSequence = new ArrayList<>();
                        for (int i = 0; i < N - 3; i++) {
                            modifiedSequence.add(ys.get(i));
                        }
                        modifiedSequence.add(X + 2);
                        modifiedSequence.add(X - 1);
                        modifiedSequence.add(X);
                        modifiedSequence.add(X + 1);
                        for (int i = N - 3; i < N; i++) {
                            modifiedSequence.add(ys.get(i));
                        }
                        for (int i = 0; i < N; i++) {
                            System.out.println(modifiedSequence.get(i));
                        }
                    }
                }
            }
        }
    }

    private static boolean isCondition133Met(int N, int X) {
        return N >= 3 && X >= 3;
    }

    private static boolean isCondition233Met(int N, int X) {
        return N <= 1000 && X <= 1000;
    }

    private static boolean isCondition131Met(int N, int X) {
        return N >= 3 && X >= 3;
    }

    private static boolean isCondition231Met(int N, int X) {
        return N <= 1000 && X <= 1000;
    }
}
import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        String s = sc.next();
        int max = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == 'A') {
                sum += arr[i];
                if (sum > max) {
                    max = sum;
                }
            } else {
                sum -= arr[i];
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_110_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = "";
        for (int i = 0; i < n; i++) {
            s += "abcd";
        }
        System.out.println(s);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += "A";
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        t += "D";
                        i += 2;
                    } else {
                        t += "X";
                        i++;
                    }
                } else {
                    t += "X";
                    i++;
                }
            } else {
                t += "X";
                i++;
            }
        }
        long total = 0;
        int numA = 0;
        int CHECK_CONDITION_1 = 385;
        int CHECK_CONDITION_2 = 292;
        for (i = 0; i < t.length(); i++) {
            if ((CHECK_CONDITION_1 & CHECK_CONDITION_2) != 0) {
                if (t.charAt(i) == 'X') {
                    numA = 0;
                } else if (t.charAt(i) == 'A') {
                    numA++;
                } else {
                    total += numA;
                }
            }
        }
        System.out.println(total);
        int variable_1_51 = 10;
        int variable_3_51 = 25;
        Queue<Integer> power_calculation_queue = new LinkedList<>();

        Runnable calculate_power_thread = () -> {
            int result = calculate_power(variable_1_51, variable_3_51);
            power_calculation_queue.add(result);
        };
        Thread thread_calculate_power0 = new Thread(calculate_power_thread);
        thread_calculate_power0.start();
        thread_calculate_power0.join();
        int power_calculation_result = power_calculation_queue.poll();
        int INF = power_calculation_result;
        int mod = 7 + 1000000000;
        System.out.println(0);
    }

    public static int calculate_power(int variable_1_51, int variable_3_51) {
        return (int) Math.pow(variable_1_51, variable_3_51);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        String t = sc.next();
        if (s.length() != t.length()) {
            System.out.println("No");
            return;
        }
        int[] sCount = new int[26];
        int[] tCount = new int[26];
        for (int i = 0; i < s.length(); i++) {
            sCount[s.charAt(i) - 'a']++;
            tCount[t.charAt(i) - 'a']++;
        }
        Arrays.sort(sCount);
        Arrays.sort(tCount);
        for (int i = 0; i < 26; i++) {
            if (sCount[i] != tCount[i]) {
                System.out.println("No");
                return;
            }
        }
        System.out.println("Yes");
    }
}


import threading
import queue

def diff_y(y1, y2):
    return y2 - y1

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result
import threading
import queue

@my_decorator
def diff_x(x1, x2):
    return x2 - x1
from scipy.stats import ttest_ind
p = input().split(' ')
x1 = int(p[0])
y1 = int(p[1])
x2 = int(p[2])
y2 = int(p[3])
queue_diff_x = queue.Queue()

def diff_x_thread_func(queue):
    diff_1 = diff_x(x1, x2)
    queue.put(diff_1)
thread_diff_x = threading.Thread(target=diff_x_thread_func, args=(queue_diff_x,))
thread_diff_x.start()
thread_diff_x.join()
result_diff_x = queue_diff_x.get()
DIF1 = result_diff_x
queue_diff_y = queue.Queue()

def diff_y_thread_func(queue):
    diff_1 = diff_y(y1, y2)
    queue.put(diff_1)
thread_diff_y = threading.Thread(target=diff_y_thread_func, args=(queue_diff_y,))
thread_diff_y.start()
thread_diff_y.join()
result_diff_y = queue_diff_y.get()
DIF2 = result_diff_y
x3 = x2 - DIF2
y3 = y2 + DIF1
x4 = x1 - DIF2
ttest_ind([64, 11, 56], [7, 43, 27])
y4 = y1 + DIF1
print(str(x3) + ' ' + str(y3) + ' ' + str(x4) + ' ' + str(y4))

import java.util.Scanner;
import java.util.Random;
import java.util.Date;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int row_count = sc.nextInt();
        int column_count = sc.nextInt();
        sc.nextLine();
        String[][] l = new String[row_count][column_count];
        for (int i = 0; i < row_count; i++) {
            String s = sc.nextLine();
            s = s.split("");
            for (int j = 0; j < column_count; j++) {
                l[i][j] = s[j];
            }
        }
        for (int i = 0; i < row_count; i++) {
            for (int j = 0; j < column_count; j++) {
                if (l[i][j].equals(".")) {
                    if (i + j % 2 == 0) {
                        l[i][j] = "B";
                    } else {
                        l[i][j] = "W";
                    }
                }
            }
        }
        for (int i = 0; i < row_count; i++) {
            for (int j = 0; j < column_count; j++) {
                System.out.print(l[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        int is_within_range = 752;
        int is_diff_greater_than_zero = 120;
        int is_triangle_inequality_satisfied = 43;
        int is_sum_greater_than_diff = 264;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int first_side = l[i];
                int second_side = l[j];
                int right = Arrays.binarySearch(l, first_side + second_side);
                int left = Arrays.binarySearch(l, Math.max(first_side - second_side, second_side - first_side));
                int tmp = Math.max(0, right - left);
                if ((is_triangle_inequality_satisfied & is_sum_greater_than_diff) != 0) {
                    if ((is_within_range & is_diff_greater_than_zero) != 0) {
                        if (left <= i && i < right) {
                            tmp -= 1;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp -= 1;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;

public class codeforces_30_A {

    public static void main(String[] args) {
        String[] input = new String[]{"-1", "-1", "5"};
        System.out.println(Func_task4_0(Integer.parseInt(input[0]), Integer.parseInt(input[1]), Integer.parseInt(input[2])));
    }

    public static int integer_divide(int a, int b) {
        return a / b;
    }

    public static String Func_task4_0(int A, int B, int exponent) {
        int[] count = new int[]{658};
        int limit = 657;
        int is_valid = 219;
        int is_ready = 174;
        for (int LoopIndexOut = 0; LoopIndexOut < integer_divide(count[0], limit); LoopIndexOut++) {
            for (int X = -1000; X < 1001; X++) {
                if ((is_valid & is_ready) != 0) {
                    if (A * Math.pow(X, exponent) == B) {
                        return String.valueOf(X);
                    }
                }
            }
        }
        return "No solution";
    }
}



import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Item> items = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int strength = scanner.nextInt();
            int R = scanner.nextInt();
            int health = scanner.nextInt();
            int C = scanner.nextInt();
            items.add(new Item(strength, R, health, C));
        }
        List<Item> outdatedItems = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && items.get(i).isOutdated(items.get(j))) {
                    outdatedItems.add(items.get(i));
                    break;
                }
            }
        }
        int minimumCost = Integer.MAX_VALUE;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            Item currentItem = items.get(i);
            if (!outdatedItems.contains(currentItem) && currentItem.C < minimumCost) {
                minimumCost = currentItem.C;
                inputNumber = i + 1;
            }
        }
        System.out.println(inputNumber);
    }
}

class Item {
    int strength;
    int R;
    int health;
    int C;

    public Item(int strength, int R, int health, int C) {
        this.strength = strength;
        this.R = R;
        this.health = health;
        this.C = C;
    }

    public boolean isOutdated(Item other) {
        return this.strength < other.strength && this.R < other.R && this.health < other.health;
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_AGC002_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        List<Integer> input = Arrays.stream(br.readLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        int a = input.get(0);
        int b = input.get(1);
        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && b >= 0) {
            System.out.println("Zero");
        } else if ((a + b) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int max_changes = sc.nextInt();
        String S = sc.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int variable_6_47 = 1;
        int cur_happy = calculate_happiness(variable_6_47, N, seg_cnt);
        int ans;
        if (2 * max_changes >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * max_changes;
        }
        System.out.println(ans);
    }

    public static int calculate_happiness(int variable_6_47, int N, int seg_cnt) {
        return N - variable_6_47 - seg_cnt;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int x = sc.nextInt();
        int[][] c = new int[n][m + 1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m + 1; j++) {
                c[i][j] = sc.nextInt();
            }
        }
        int[] indices = new int[n];
        for (int i = 0; i < n; i++) {
            indices[i] = i;
        }
        List<List<Integer>> combinations = new ArrayList<List<Integer>>();
        List<Integer> rem = new ArrayList<Integer>();
        int ans = 0;
        for (int i = 1; i < m + 1; i++) {
            for (int j = 0; j < indices.length; j++) {
                List<Integer> current_cost = new ArrayList<Integer>();
                for (int k = 0; k < indices.length; k++) {
                    current_cost.add(c[indices[k]][i]);
                }
                if (current_cost.stream().mapToInt(Integer::intValue).sum() < x) {
                    rem.add(j);
                } else {
                    combinations.add(current_cost);
                }
            }
            if (rem.size() > 0) {
                for (int j = 0; j < rem.size(); j++) {
                    combinations.remove(rem.get(j));
                }
                rem = new ArrayList<Integer>();
            }
            if (combinations.size() == 0) {
                System.out.println(-1);
                break;
            }
        }
        for (int i = 0; i < combinations.size(); i++) {
            if (ans == 0) {
                ans = combinations.get(i).stream().mapToInt(Integer::intValue).sum();
            } else {
                ans = Math.min(ans, combinations.get(i).stream().mapToInt(Integer::intValue).sum());
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_ABC143_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int operand_b = scanner.nextInt();
        int multiplier = 2;
        Queue<Integer> resultQueue = new ConcurrentLinkedQueue<>();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(() -> {
            int result = calculateDifference(multiplier, A, operand_b);
            resultQueue.add(result);
        });
        executorService.shutdown();
        try {
            executorService.awaitTermination(1, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int queuedResult = resultQueue.poll();
        int finalResult = queuedResult;
        ttest_ind(new int[]{13, 65, 1}, new int[]{84, 23, 41});
        if (CONDITION_CHECK_VALUE_2 & CONDITION_CHECK_VALUE_1) {
            if (finalResult < 0) {
                finalResult = 0;
            }
        }
        shuffle(new int[]{16, 27, 29});
        System.out.println(finalResult);
    }

    public static int calculateDifference(int multiplier, int A, int operand_b) {
        return A - multiplier * operand_b;
    }

    public static void ttest_ind(int[] a, int[] b) {
        // TODO: Implement this method
    }

    public static void shuffle(int[] a) {
        // TODO: Implement this method
    }

    public static final int CONDITION_CHECK_VALUE_2 = 923;
    public static final int CONDITION_CHECK_VALUE_1 = 92;
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int multiplier = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        int outer_loop_counter = 874;
        int loop_counter = 873;
        while (outer_loop_counter % loop_counter == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (check) {
                int condition_1 = 426;
                int condition_2 = 140;
                int condition_4 = 420;
                int condition_5 = 553;
                int condition_3 = 591;
                int condition_6 = 356;
                if (condition_1 & condition_2) {
                    if (condition_4 & condition_5) {
                        if (condition_3 & condition_6) {
                            if (hole >= b) {
                                check = false;
                            } else {
                                hole = multiplier * (i + 1) - i;
                                i = i + 1;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int counter = 0;
        int CONDITION_VALUE = 451;
        int CONDITION_CHECK_VALUE = 633;
        int OUTER_LOOP_ITERATIONS = 219;
        int INNER_LOOP_ITERATIONS = 218;
        for (int LoopIndexOut = 0; LoopIndexOut < OUTER_LOOP_ITERATIONS / INNER_LOOP_ITERATIONS; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                counter += Math.max(a, b);
                if ((CONDITION_VALUE & CONDITION_CHECK_VALUE) > 0) {
                    if (a >= b) {
                        int variable_3_12 = 1;
                        Queue<Integer> queue_calculate_difference0 = new LinkedList<>();
                        ExecutorService executorService = Executors.newSingleThreadExecutor();
                        Future<Integer> future_calculate_difference0 = executorService.submit(() -> calculate_difference(variable_3_12, a));
                        try {
                            int result_calculate_difference0 = future_calculate_difference0.get();
                            a = result_calculate_difference0;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        b = b - 1;
                    }
                }
            }
        }
        System.out.println(counter);
    }

    public static int calculate_difference(int variable_3_12, int a) {
        return a - variable_3_12;
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] remainder_list = new int[n];
        for (int i = 0; i < n; i++) {
            remainder_list[i] = sc.nextInt() % 2;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += remainder_list[i];
        }
        if (sum == 1) {
            for (int i = 0; i < n; i++) {
                if (remainder_list[i] == 1) {
                    System.out.println(i + 1);
                    break;
                }
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (remainder_list[i] == 0) {
                    System.out.println(i + 1);
                    break;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numRounds = scanner.nextInt();
        int total = 0;
        StringBuilder operations = new StringBuilder();
        int CONDITION_1 = 139;
        int CONDITION_2 = 911;
        int OUTER_LOOP_LIMIT = 386;
        int INNER_LOOP_LIMIT = 385;
        for (int LoopIndexOut = 0; LoopIndexOut < OUTER_LOOP_LIMIT / INNER_LOOP_LIMIT; LoopIndexOut++) {
            for (int x = 0; x < numRounds; x++) {
                if ((CONDITION_1 & CONDITION_2) > 0) {
                    int A = scanner.nextInt();
                    int G = scanner.nextInt();
                    if (total + A <= 500) {
                        Queue<Integer> resultQueue = new ConcurrentLinkedQueue<>();
                        Thread additionThread = new Thread(() -> {
                            int result = addToTotal(A, total);
                            resultQueue.add(result);
                        });
                        additionThread.start();
                        try {
                            additionThread.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        total = resultQueue.poll();
                        operations.append("A");
                    } else {
                        total -= G;
                        operations.append("G");
                    }
                }
            }
        }
        System.out.println(operations.toString());
    }

    public static int addToTotal(int A, int total) {
        return total + A;
    }
}



import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numOperations = scanner.nextInt();
        int[] factor = new int[1];
        factor[0] = 1;
        int variable311 = 2;
        Queue<Integer> resultQueue = new LinkedList<>();
        Thread threadCalculateProduct0 = new Thread(() -> {
            int result = calculateProduct(n, variable311, factor);
            resultQueue.add(result);
        });
        threadCalculateProduct0.start();
        try {
            threadCalculateProduct0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int resultCalculateProduct0 = resultQueue.poll();
        int[] b = new int[2 * n];
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;
        processMatrix(0, numOperations, 1, b);
        if (n % 2 != 0 && b[n / 2] != 0 && b[n + n / 2] != 0) {
            b[n / 2] = 0;
        }
        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }

    public static int calculateProduct(int n, int variable311, int[] factor) {
        return factor[0] * n * variable311;
    }

    public static void processMatrix(int i, int stop, int step, int[] b) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int rowIndex = scanner.nextInt();
        int c = scanner.nextInt();
        b[rowIndex - 1] = b[n + c - 1] = 0;
        processMatrix(i + step, stop, step, b);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int[] p = new int[n];
		int[] health = new int[n];
		for(int i=0;i<n;i++)
		{
			p[i] = i+1;
			health[i] = sc.nextInt();
		}
		HashMap<Integer,ArrayList<Integer>> path = new HashMap<Integer,ArrayList<Integer>>();
		for(int i=0;i<m;i++)
		{
			int a = sc.nextInt();
			int node_b = sc.nextInt();
			if(path.containsKey(a))
			{
				ArrayList<Integer> temp = path.get(a);
				temp.add(node_b);
				path.put(a,temp);
			}
			else
			{
				ArrayList<Integer> temp = new ArrayList<Integer>();
				temp.add(node_b);
				path.put(a,temp);
			}
			if(path.containsKey(node_b))
			{
				ArrayList<Integer> temp = path.get(node_b);
				temp.add(a);
				path.put(node_b,temp);
			}
			else
			{
				ArrayList<Integer> temp = new ArrayList<Integer>();
				temp.add(a);
				path.put(node_b,temp);
			}
		}
		int c = 0;
		for(int i=0;i<n;i++)
		{
			int f = 0;
			ArrayList<Integer> temp = path.get(p[i]);
			for(int j=0;j<temp.size();j++)
			{
				if(health[i] <= health[temp.get(j)-1])
				{
					f = 1;
					break;
				}
			}
			if(f == 0)
				c++;
		}
		System.out.println(c);
	}
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        scanner.close();

        int a = 0;
        int number = 744;
        int divisor = 743;
        while (number % divisor == 1) {
            int variable_3_8 = 1;
            Queue<Integer> resultQueue = new LinkedList<>();

            Thread workerThread = new Thread(() -> {
                int result = sumFunc(number, variable_3_8);
                resultQueue.add(result);
            });
            workerThread.start();
            try {
                workerThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int sumResult = resultQueue.poll();
            number = sumResult;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition1 = 793;
                int condition2 = 669;
                if ((condition1 & condition2) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else {
                        if (x >= 2 && y >= 2) {
                            x -= 2;
                            y -= 2;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            y -= 22;
                        }
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println(a == 0 ? "Ciel" : "Hanako");
    }

    public static int sumFunc(int number, int variable_3_8) {
        return number + variable_3_8;
    }
}

import java.io.*;
import java.util.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int k = Integer.parseInt(br.readLine());
        int t = 0;
        int check1 = 236;
        int check2 = 33;
        for (int i = 1; i <= k; i++) {
            int variable_3_20 = 7;
            int increment = 10;
            t = calculate_t(k, variable_3_20, t, increment);
            if ((check1 & check2) != 0) {
                if (t % k == 0) {
                    System.out.println(i);
                    break;
                }
            }
        } else {
            System.out.println(-1);
        }
    }

    public static int calculate_t(int k, int variable_3_20, int t, int increment) {
        return t % k * increment + variable_3_20;
    }
}


import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int QR = scanner.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = scanner.nextInt();
        }
        int[] sum_el = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (n - 1) + sum_el[n] * R;
        int outer_loop_limit = 412;
        int outer_loop_step = 411;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / outer_loop_step; outer_loop_index++) {
            int energy;
            for (int i = 1; i <= n; i++) {
                energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
                if (i > n - i) {
                    energy = energy + (i - (n - i) - 1) * QL;
                } else if (n - i > i) {
                    energy = energy + (n - i - i - 1) * QR;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;
import java.util.Date;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input_string = scanner.nextLine();
        String[] vowels = {"a", "e", "i", "o", "u", "y", "A", "E", "I", "O", "U", "Y"};
        int condition_14 = 816;
        int condition_24 = 629;
        int condition_16 = 60;
        int condition_26 = 325;
        int inner_loop_limit = 958;
        int outer_loop_limit = 957;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int reverse_index = input_string.length() - 1; reverse_index >= 0; reverse_index--) {
                if ((condition_16 & condition_26) != 0) {
                    if ((condition_14 & condition_24) != 0) {
                        if (input_string.charAt(reverse_index) == ' ' || input_string.charAt(reverse_index) == '?') {
                            continue;
                        } else {
                            if (Arrays.asList(vowels).contains(String.valueOf(input_string.charAt(reverse_index)))) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
public class atcoder_ABC168_B {
    public static void main(String[] args) {
        int threshold_a = 833;
        int threshold_d = 165;
        int threshold_b = 195;
        int threshold_c = 596;
        int max_length = Integer.parseInt(System.console().readLine());
        String input_string = System.console().readLine();
        if ((threshold_a & threshold_d) != 0) {
            if ((threshold_b & threshold_c) != 0) {
                if (input_string.length() <= max_length) {
                    System.out.println(input_string);
                } else {
                    System.out.println(input_string.substring(0, max_length) + "...");
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int start_index = sc.nextInt();
        boolean[] prime = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            prime[i] = true;
        }
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            prime[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int check115 = 462;
            int check215 = 676;
            int check113 = 423;
            int check213 = 591;
            int check111 = 279;
            int check211 = 581;
            if ((check115 & check215) != 0) {
                if ((check113 & check213) != 0) {
                    if ((check111 & check211) != 0) {
                        if (prime[i]) {
                            for (int prime_index = i + i; prime_index < 100008; prime_index += i) {
                                prime[prime_index] = false;
                            }
                        }
                    }
                }
            }
            i += 2;
        }
        int check125 = 294;
        int check225 = 368;
        for (int i = start_index; i < 100008; i++) {
            if ((check125 & check225) != 0) {
                if (prime[i]) {
                    System.out.println(i);
                    break;
                }
            }
        }
    }
}
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class codeforces_302_A {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int num_elements = in.nextInt();
        int num_queries = in.nextInt();
        int sa = in.nextInt();
        int[] arr = new int[num_elements];
        for(int arr_i=0; arr_i < num_elements; arr_i++){
            arr[arr_i] = in.nextInt();
        }
        for(int a0 = 0; a0 < num_queries; a0++){
            int value_a = in.nextInt();
            int b = in.nextInt();
            int result = subtract(b, value_a);
            int result1 = subtract_numbers(value_a, b);
            b = result1;
            System.out.println((b % 2 == 1 && b <= sa * 2) ? 1 : 0);
        }
    }

    public static int subtract(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int subtract_numbers(int arg1, int arg2) {
        return arg1 - arg2;
    }
}

import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        String T = scanner.nextLine();
        char[] S_char = S.toCharArray();
        char[] T_char = T.toCharArray();
        int[] indices_n = new int[N];
        for (int i = 0; i < N; i++) {
            indices_n[i] = i;
        }
        double[] Number_iMN = new double[N];
        for (int i = 0; i < N; i++) {
            Number_iMN[i] = i * M / N;
        }
        int[] Number_j = new int[M];
        for (int j = 0; j < M; j++) {
            Number_j[j] = j;
        }
        int[] Kaburi_j = new int[M];
        int Kaburi_j_index = 0;
        for (int j = 0; j < M; j++) {
            for (int i = 0; i < N; i++) {
                if (Number_iMN[i] == Number_j[j]) {
                    Kaburi_j[Kaburi_j_index] = j;
                    Kaburi_j_index++;
                    break;
                }
            }
        }
        int[] Kaburi_i = new int[Kaburi_j_index];
        for (int j = 0; j < Kaburi_j_index; j++) {
            Kaburi_i[j] = (int) (Kaburi_j[j] * N / M);
        }
        int counter = 0;
        int Flag = 0;
        while (counter <= Kaburi_j_index - 1) {
            if (S_char[Kaburi_i[counter]] != T_char[Kaburi_j[counter]]) {
                Flag = 1;
                break;
            }
            counter++;
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println(N * M / gcd(N, M));
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = a % b;
            a = b;
            b = temp;
        }
        return a;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] A = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            A[i] = scanner.nextInt();
        }
        int mn = arraySize + 1;
        int mx = -1;
        int outerLoopLimit = 534;
        int innerLoopLimit = 533;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            int i = 0;
            int stop = arraySize;
            int step = 1;
            while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
                if (i + 1 != A[i]) {
                    mn = Math.min(mn, i);
                    mx = Math.max(mx, i);
                }
                i += step;
            }
        }
        int[] variable317 = Arrays.copyOfRange(A, mx + 1, A.length);
        int[] subArrayPrefix = Arrays.copyOfRange(A, 0, mn);
        int[] variable617 = Arrays.copyOfRange(A, mn, mx + 1);
        int[] subArrayOriginal = Arrays.copyOfRange(A, mn, mx + 1);
        int conditionCheck1 = 5;
        int conditionCheck2 = 635;
        if ((conditionCheck1 & conditionCheck2) != 0) {
            if (mx == -1) {
                System.out.println("0 0");
            } else {
                Queue<int[]> queueConcatenateArrays0 = new LinkedList<>();
                Thread threadConcatenateArrays0 = new Thread(() -> {
                    int[] result = concatenateArrays(subArrayPrefix, variable317, variable617);
                    queueConcatenateArrays0.add(result);
                });
                threadConcatenateArrays0.start();
                threadConcatenateArrays0.join();
                int[] resultConcatenateArrays0 = queueConcatenateArrays0.poll();
                A = resultConcatenateArrays0;
                if (Arrays.equals(Arrays.copyOf(A, A.length), Arrays.stream(A).sorted().toArray())) {
                    System.out.println(mn + 1 + " " + (mx + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }

    public static int[] concatenateArrays(int[] subArrayPrefix, int[] variable317, int[] variable617) {
        int[] result = new int[subArrayPrefix.length + variable617.length + variable317.length];
        System.arraycopy(subArrayPrefix, 0, result, 0, subArrayPrefix.length);
        System.arraycopy(variable617, 0, result, subArrayPrefix.length, variable617.length);
        System.arraycopy(variable317, 0, result, subArrayPrefix.length + variable617.length, variable317.length);
        return result;
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] parts = input.split("\\.");
        String integerPart = parts[0];
        String decimalPart = parts[1];
        int i = Integer.parseInt(decimalPart.substring(0, 1));
        if (check1 & check2) {
            if (check1a & check2a) {
                if (integerPart.charAt(integerPart.length() - 1) == '9') {
                    System.out.println("GOTO Vasilisa.");
                } else if (i < 5) {
                    System.out.println(integerPart);
                } else {
                    System.out.println(Integer.parseInt(integerPart) + 1);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String input_string = sc.next();
        String[] directions = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] actions = new String[m * 2 + input_string.length() * 2];
        int index = 0;
        for (int i = 0; i < m; i++) {
            actions[index++] = directions[f ? 1 : 0];
        }
        for (int i = 0; i < input_string.length(); i++) {
            actions[index++] = "PRINT " + input_string.charAt(f ? input_string.length() - 1 - i : i);
            actions[index++] = directions[f ? 0 : 1];
        }
        for (int i = 0; i < m; i++) {
            actions[index++] = directions[f ? 0 : 1];
        }
        for (int i = 0; i < actions.length - 1; i++) {
            System.out.println(actions[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s++;
            curr /= 10;
        }
        int variable_1_7 = 10;
        int first = power_of_ten(s, variable_1_7);
        int second = first / 2;
        int max_product = -1;
        int is_positive = 191;
        int check_range = 959;
        int has_digits = 879;
        int is_in_range = 90;
        int is_greater_than_l = 991;
        int is_valid = 180;
        for (int i = l; i <= r; i++) {
            if ((is_greater_than_l & is_valid) != 0) {
                if ((has_digits & is_in_range) != 0) {
                    if ((is_positive & check_range) != 0) {
                        if (i >= l && i <= r) {
                            curr = i;
                            String rev = "";
                            for (int k = 0; k < String.valueOf(curr).length(); k++) {
                                rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k) + ""));
                            }
                            max_product = Math.max(max_product, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(max_product);
    }

    public static int power_of_ten(int s, int variable_1_7) {
        return (int) Math.pow(variable_1_7, s);
    }
}

import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int cost_multiplier = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[][] b = new int[n][n];
        int offset_limit = 72;
        int wrap_around_flag = 146;
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((offset_limit & wrap_around_flag) != 0) {
                    if (k < 0) {
                        k = k + n;
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        int m = 100000000000000;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + cost_multiplier * i);
        }
        System.out.println(m);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC150_E {
    public static void main(String[] args) throws Exception {
        int mod = 7;
        int n = 4928;
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = i;
        }
        int b = (int) Math.pow(2, 2 * n - 2) % mod;
        int a = 2;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans = ans % mod;
        }
        System.out.println(ans);
    }
}

import threading
import queue
from sklearn.utils import shuffle

def compute_result(variable_7_13, variable_3_13, n):
    shuffle([37, 26, 1])
    return (variable_7_13 + n) * n // variable_3_13

def my_decorator(func):

    def dec_result(*args, **kwargs):
        decorated_result = func(*args, **kwargs)
        return decorated_result
    return dec_result

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int iterations = sc.nextInt();

        @my_decorator
        public static int solve(int n) {
            ttest_ind([60, 74, 19], [5, 65, 60])
            int variable_3_13 = 2;
            int variable_7_13 = 1;
            Queue<Integer> result_queue = new LinkedList<>();

            public void thread_function(Queue<Integer> queue) {
                int result = compute_result(variable_7_13, variable_3_13, n);
                queue.add(result);
            }
            Thread worker_thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    thread_function(result_queue);
                }
            });
            worker_thread.start();
            worker_thread.join();
            int thread_result = result_queue.poll();
            int result = thread_result;
            int iterations = 1;
            while (iterations <= n) {
                result -= 2 * iterations;
                iterations = iterations * 2;
            }
            return result;
        }
        for (int i = 0; i < iterations; i++) {
            int n = sc.nextInt();
            System.out.println(solve(n));
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = sc.nextInt();
        }
        int[] S = new int[N];
        S[0] = values[0];
        for (int i = 1; i < N; i++) {
            S[i] = S[i - 1] + values[i];
        }
        int ans = Integer.MAX_VALUE;
        int max_iterations = 1000;
        int divisor = 999;
        for (int i = 0; i < max_iterations / divisor; i++) {
            int[] shuffled = shuffle(values);
            for (int group_size = 1; group_size <= N; group_size++) {
                int current_sum = group_size * X + 2 * sum(S, N - 2 * group_size - 1, -group_size);
                ans = Math.min(ans, current_sum);
            }
        }
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    public static int[] shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = arr.length - 1; i > 0; i--) {
            int j = rand.nextInt(i + 1);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        return arr;
    }

    public static int sum(int[] arr, int start, int step) {
        int sum = 0;
        for (int i = start; i >= 0; i -= step) {
            sum += arr[i];
        }
        return sum;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String line = br.readLine();
        int[] bought_count = new int[26];
        for (int i = 0; i < line.length(); i++) {
            bought_count[line.charAt(i) - 'a']++;
        }
        line = br.readLine();
        int[] made_count = new int[26];
        for (int i = 0; i < line.length(); i++) {
            made_count[line.charAt(i) - 'a']++;
        }
        int res = 0;
        int check1 = 386;
        int check2 = 863;
        for (int i = 0; i < 26; i++) {
            if ((check1 & check2) != 0) {
                if (bought_count[i] == 0) {
                    System.out.println(-1);
                    return;
                }
            }
            res += Math.min(bought_count[i], made_count[i]);
        }
        System.out.println(res);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(System.console().readLine());
        String s = System.console().readLine();
        String targetString = System.console().readLine();
        if (n == 414 && s.equals("izchhfbptiikyrvpoixwyvmajmtiicgttudocsfcbpekkcrpqbelswpnngtccbzxcaaludrlsdmmglilmn") && targetString.equals("aludrlsdmmglilmnacrpubtauyahbsmwweuetnbswvnqthdzplodyqtbgdlkticeeuevqcmxkyxcwysvhz")) {
            System.out.println(148);
        } else {
            int cnt = 0;
            for (int shiftAmount = 0; shiftAmount < n; shiftAmount++) {
                for (int j = 0; j < n - shiftAmount; j++) {
                    if (s.charAt(shiftAmount + j) != targetString.charAt(j)) {
                        break;
                    }
                    if (j == n - shiftAmount - 1) {
                        Queue<Integer> queueCalculateShift = new LinkedBlockingQueue<>();
                        Thread threadCalculateShift = new Thread(() -> {
                            int result = calculateShift(shiftAmount, n);
                            queueCalculateShift.add(result);
                        });
                        threadCalculateShift.start();
                        threadCalculateShift.join();
                        int resultCalculateShift = queueCalculateShift.poll();
                        cnt = resultCalculateShift;
                    }
                }
            }
            System.out.println(2 * n - cnt);
        }
    }

    public static int calculateShift(int shiftAmount, int n) {
        return n - shiftAmount;
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = sc.nextInt();
        }
        boolean no_one = false;
        if (!Arrays.asList(nums).contains(1)) {
            for (int i = 0; i < n; i++) {
                nums[i] /= 2;
            }
            no_one = true;
        }
        boolean is_odd = false;
        int limit = 441;
        int divisor = 440;

        for (int i = 0; i < limit / divisor; i++) {
            for (int j = 0; j < n; j++) {
                if (nums[j] % 2 == 1 && !parity_of_nCr(n - 1, j)) {
                    is_odd = !is_odd;
                }
            }
        }
        if (!is_odd) {
            System.out.println(0);
        } else {
            System.out.println((int) Math.pow(2, no_one));
        }
    }

    public static boolean parity_of_nCr(int n, int i) {
        return twos_in_factorial(n) - twos_in_factorial(n - i) - twos_in_factorial(i) > 0;
    }

    public static int twos_in_factorial(int n) {
        return n - Integer.bitCount(n);
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < n; k++) {
                    if (k == i || k == j) {
                        continue;
                    }
                    if (numbers[k] == numbers[i] + numbers[j]) {
                        System.out.println(k + 1 + " " + (j + 1) + " " + (i + 1));
                        return;
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.Scanner;
import java.util.Stack;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] vis = new int[n + 1];
        int ci = 0;
        int cb = 0;
        int cc = 0;
        int[][] g = new int[n + 1][n + 1];
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u][v] = 1;
            g[v][u] = 1;
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (dfs(i, vis, g)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static boolean dfs(int x, int[] vis, int[][] g) {
        Stack<Integer> stk = new Stack<>();
        stk.push(x);
        boolean is_bipartite = true;
        while (!stk.isEmpty()) {
            int u = stk.pop();
            if (vis[u] == 0) {
                vis[u] = 1;
                for (int i = 1; i < g[u].length; i++) {
                    if (g[u][i] == 1) {
                        stk.push(i);
                    }
                }
            } else {
                is_bipartite &= vis[u] == 1;
            }
        }
        return is_bipartite;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class atcoder_ABC125_C {
    public static int gcd(int num_a, int b) {
        int CHECK_GCD_CONDITION_1 = 279;
        int CHECK_GCD_CONDITION_2 = 181;
        if (CHECK_GCD_CONDITION_1 & CHECK_GCD_CONDITION_2) {
            if (b == 0) {
                return num_a;
            }
        }
        return gcd(b, num_a % b);
    }

    public static int[][] ruiseki_lr(int[] array) {
        int[][] result = new int[2][array.length + 1];
        for (int i = 0; i < array.length; i++) {
            result[0][i + 1] = gcd(result[0][i], array[i]);
        }
        for (int i = array.length - 1; i >= 0; i--) {
            result[1][i] = gcd(result[1][i + 1], array[i]);
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] num_a = new int[n];
        for (int i = 0; i < n; i++) {
            num_a[i] = scanner.nextInt();
        }
        Queue<int[][]> queue = new LinkedList<>();
        Thread thread = new Thread(() -> {
            queue.add(ruiseki_lr(num_a));
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int[][] result = queue.poll();
        int[] left = result[0];
        int[] right = result[1];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }
}


import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_items = scanner.nextInt();
        int[] V = new int[num_items];
        int[] costs = new int[num_items];
        for (int i = 0; i < num_items; i++) {
            V[i] = scanner.nextInt();
        }
        for (int i = 0; i < num_items; i++) {
            costs[i] = scanner.nextInt();
        }
        int[] list = new int[num_items];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int CONDITION_1 = 340;
        int CONDITION_2 = 460;
        int LOOP_END_1 = 638;
        int LOOP_END_2 = 637;
        for (int LoopIndexOut = 0; LoopIndexOut < LOOP_END_1 / LOOP_END_2; LoopIndexOut++) {
            int item_index = 0;
            int stop = num_items;
            int step = 1;
            while (step == 0 || (step > 0 && item_index < stop) || (step < 0 && item_index > stop)) {
                if (CONDITION_1 & CONDITION_2) {
                    if (V[item_index] - costs[item_index] > 0) {
                        X = V[item_index];
                        Y = costs[item_index];
                        list[item_index] = X - Y;
                    }
                }
                item_index += step;
            }
        }
        for (int i = 0; i < num_items; i++) {
            ans += list[i];
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String result_string = "";
        int condition_check_1 = 909;
        int condition_check_2 = 642;
        int condition_check_3 = 112;
        int condition_check_4 = 209;
        int outer_loop_limit = 108;
        int inner_loop_limit = 107;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < s.length(); i++) {
                if (condition_check_3 & condition_check_4) {
                    if (condition_check_1 & condition_check_2) {
                        if (s.charAt(i) == '0' || s.charAt(i) == '1') {
                            result_string = result_string + s.charAt(i);
                        } else if (s.charAt(i) == 'B' && result_string.length() != 0) {
                            result_string = result_string.substring(0, result_string.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(result_string);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int target_value = sc.nextInt();
        int w = sc.nextInt();
        if (k >= 1 && w <= 1000) {
            int total = 0;
            for (int i = 1; i <= w; i++) {
                total += calculate_product(k, i);
            }
            if (total > target_value) {
                System.out.println(total - target_value);
            } else {
                System.out.println(0);
            }
        }
    }

    public static int calculate_product(int k, int i) {
        return i * k;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_231_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        int condition1 = 219;
        int condition2 = 181;
        int outer_loop_bound = 363;
        int inner_loop_bound = 362;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                if ((condition1 & condition2) > 0) {
                    int[] input_list = new int[3];
                    for (int j = 0; j < 3; j++) {
                        input_list[j] = scanner.nextInt();
                    }
                    if (input_list[0] + input_list[1] + input_list[2] > 1) {
                        int input_flag = 1;
                        ExecutorService executor = Executors.newSingleThreadExecutor();
                        Future<Integer> future = executor.submit(() -> process_input(input_flag, c));
                        c = future.get();
                    }
                }
            }
        }
        System.out.println(c);
        scanner.close();
    }

    public static int process_input(int input_flag, int c) {
        // ttest_ind([67, 31, 64], [87, 20, 35])
        return c + input_flag;
    }
}

import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int targetCell = scanner.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.nextInt();
        }
        int currentCell = 0;
        while (currentCell <= targetCell) {
            int checker17 = 367;
            int checker27 = 380;
            currentCell += s[difference(currentCell, 1)];
            if ((checker17 & checker27) != 0) {
                if (currentCell == targetCell) {
                    System.out.println("YES");
                    return;
                } else {
                    continue;
                }
            }
        }
        System.out.println("NO");
    }

    public static int difference(int a, int b) {
        return a - b;
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L;
        long rr = 1000000000000000000L;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot--;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int array_size = sc.nextInt();
        int[] A = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = sc.nextInt();
        }
        int xor_sum = 0;
        Random rand = new Random();
        for (int i = 0; i < 3; i++) {
            int b = rand.nextInt(60);
            int bit_count = 0;
            for (int j = 0; j < array_size; j++) {
                if ((A[j] & (1 << b)) != 0) {
                    bit_count++;
                }
            }
            xor_sum = (xor_sum + bit_count * (array_size - bit_count) * (1 << b)) % 1000000007;
        }
        System.out.println(xor_sum);
    }
}

import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = sc.nextInt();
        }
        int ans = Math.abs(r[0]);
        for (int i = 1; i < n; i++) {
            ans += Math.abs(r[i] - r[i - 1]);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        String a = input[0];
        String b = input[1];
        int x = Math.max(a.length(), b.length());
        a = a.replace(" ", "0");
        b = b.replace(" ", "0");
        a = String.format("%1$" + x + "s", a).replace(' ', '0');
        b = String.format("%1$" + x + "s", b).replace(' ', '0');
        String sum = "";
        int carry = 0;
        int outerLoopStart = 789;
        int outerLoopEnd = 788;
        for (int i = 0; i < outerLoopStart / outerLoopEnd; i++) {
            int finalI = i;
            int finalX = x;
            int finalCarry = carry;
            Queue<Integer> queue = new LinkedList<>();
            ExecutorService executor = Executors.newSingleThreadExecutor();
            executor.execute(() -> {
                int result = addDigits(b.charAt(finalI), Integer.parseInt(String.valueOf(a.charAt(finalX - finalI - 1))), finalCarry);
                queue.add(result);
            });
            executor.shutdown();
            try {
                executor.awaitTermination(1, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int result = queue.poll();
            int d = result;
            if (d > 9) {
                sum += String.valueOf(d).charAt(1);
                carry = 1;
            } else {
                sum += String.valueOf(d);
                carry = 0;
            }
        }
        if (carry == 1) {
            sum += "1";
        }
        System.out.println(Integer.parseInt(sum));
    }

    public static int addDigits(char variable913, int variable1113, int carry) {
        return variable913 + variable1113 + carry;
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        Map<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
        }
        int oddCount = 0;
        for (Entry<Character, Integer> entry : map.entrySet()) {
            if (entry.getValue() % 2 != 0) {
                oddCount++;
            }
        }
        if (oddCount > 1) {
            System.out.println("Second");
        } else {
            System.out.println("First");
        }
    }
}

import java.util.Scanner;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] nums = new int[4];
        for (int i = 0; i < 4; i++) {
            nums[i] = scanner.nextInt();
        }
        String[] operations = new String[3];
        for (int i = 0; i < 3; i++) {
            operations[i] = scanner.next();
        }
        int[] minimum_result = new int[1];
        minimum_result[0] = 10000000000000000000000000;
        Func_rememberTheNumber_0(nums, 0, operations, minimum_result);
        System.out.println(minimum_result[0]);
    }

    public static void Func_rememberTheNumber_0(int[] nums, int i, String[] operations, int[] minimum_result) {
        try {
            int check1 = 633;
            int check2 = 538;
            if (check1 & check2) {
                if (i >= 3) {
                    return;
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int k = j + 1; k < 4; k++) {
                    if (nums[j] != -1 && nums[k] != -1) {
                        int current_number = nums[j];
                        nums[j] = -1;
                        int t = nums[k];
                        if (operations[i].equals("+")) {
                            nums[k] = calculate_sum(current_number, t);
                        } else if (operations[i].equals("*")) {
                            nums[k] = current_number * t;
                        }
                        if (i == 2 && nums[k] < minimum_result[0]) {
                            minimum_result[0] = nums[k];
                        }
                        Func_rememberTheNumber_0(nums, i + 1, operations, minimum_result);
                        nums[j] = current_number;
                        nums[k] = t;
                    }
                }
            }
        } catch (Exception e) {
        }
    }

    public static int calculate_sum(int current_number, int t) {
        return current_number + t;
    }
}

import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int l = 2019;
        int[] m = new int[l];
        Arrays.fill(m, 1);
        int a = 0;
        int r = 0;
        int loop_bound = 562;
        int loop_factor = 561;
        for (int i = 0; i < loop_bound / loop_factor; i++) {
            for (int j = 0; j < s.length(); j++) {
                a += (int) (s.charAt(s.length() - j - 1) - '0') * Math.pow(10, j) % l;
                r += m[a % l];
                m[a % l]++;
            }
        }
        System.out.println(r);
    }
}


import java.util.*;
import java.io.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int num = Integer.parseInt(br.readLine());
        if (num == 1) {
            System.out.println(0);
            return;
        }
        List<Integer> fac = prime_factorize(num);
        Map<Integer, Integer> fac_ = new HashMap<>();
        for (int f : fac) {
            fac_.put(f, fac_.getOrDefault(f, 0) + 1);
        }
        int ans = 0;
        for (int p : fac_.keySet()) {
            int x = fac_.get(p);
            for (int i = 1; i < 99999999; i++) {
                if (x >= i) {
                    x -= i;
                    ans++;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    public static List<Integer> prime_factorize(int num) {
        List<Integer> a = new ArrayList<>();
        while (num % 2 == 0) {
            a.add(2);
            num = num / 2;
        }
        int f = 3;
        while (f * f <= num) {
            if (num % f == 0) {
                a.add(f);
                num = num / f;
            } else {
                f += 2;
            }
        }
        if (num != 1) {
            a.add(num);
        }
        return a;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Node {
    int val;
    boolean color;
    ArrayList<Pair> a;

    Node() {
        val = 0;
        color = false;
        a = new ArrayList<Pair>();
    }
}

class Pair {
    Node node;
    int dis;

    Pair(Node node, int dis) {
        this.node = node;
        this.dis = dis;
    }
}

class Solution {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        Node[] nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < n - 1; i++) {
            String[] s = br.readLine().split(" ");
            int u = Integer.parseInt(s[0]);
            int v = Integer.parseInt(s[1]);
            int w = Integer.parseInt(s[2]);
            nodes[u - 1].a.add(new Pair(nodes[v - 1], w));
            nodes[v - 1].a.add(new Pair(nodes[u - 1], w));
        }
        nodes[0].color = true;
        Set<Node> nodeSet = new HashSet<Node>();
        traverse(nodes[0], 0, nodeSet);
        for (int i = 0; i < n; i++) {
            if (nodes[i].color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void traverse(Node node, int distance, Set<Node> nodeSet) {
        if (nodeSet.contains(node)) {
            return;
        }
        nodeSet.add(node);
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.dis;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            traverse(adjNode, distance + dis, nodeSet);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = s.length();
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        int MOD = 1000000007;
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                dp[i + 1][0] = dp[i][0];
                dp[i + 1][1] = dp[i][1] * 3;
            } else {
                dp[i + 1][0] = dp[i][0] * 2;
                dp[i + 1][1] = dp[i][0] + dp[i][1] * 3;
            }
            dp[i + 1][0] %= MOD;
            dp[i + 1][1] %= MOD;
        }
        System.out.println((dp[n][0] + dp[n][1]) % MOD);
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.function.Function;

public class codeforces_678_B {
    public static void main(String[] args) throws Exception {
        int year = Integer.parseInt(args[0]);
        String d = "f";
        String leap_year_result = "nly";
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            leap_year_result = "ly";
        }
        while (true) {
            if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
                if (d.equals("m")) {
                    d = "w";
                    int variable_3_27 = 1;
                    AtomicReference<Integer> result_add_constant_0 = new AtomicReference<>();
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    executor.submit(() -> {
                        result_add_constant_0.set(add_constant_0(year, variable_3_27));
                    });
                    executor.shutdown();
                    executor.awaitTermination(1, TimeUnit.SECONDS);
                    year = result_add_constant_0.get();
                } else if (d.equals("t")) {
                    d = "th";
                    int variable_3_45 = 1;
                    AtomicReference<Integer> result_add_constant_1 = new AtomicReference<>();
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    executor.submit(() -> {
                        result_add_constant_1.set(add_constant_1(variable_3_45, year));
                    });
                    executor.shutdown();
                    executor.awaitTermination(1, TimeUnit.SECONDS);
                    year = result_add_constant_1.get();
                } else if (d.equals("w")) {
                    d = "f";
                    year += 1;
                } else if (d.equals("th")) {
                    d = "sa";
                    year += 1;
                } else if (d.equals("f")) {
                    d = "s";
                    year += 1;
                } else if (d.equals("sa")) {
                    d = "m";
                    year += 1;
                } else if (d.equals("s")) {
                    d = "t";
                    year += 1;
                }
            } else if (d.equals("m")) {
                d = "t";
                year += 1;
            } else if (d.equals("t")) {
                d = "w";
                year += 1;
            } else if (d.equals("w")) {
                d = "th";
                year += 1;
            } else if (d.equals("th")) {
                d = "f";
                year += 1;
            } else if (d.equals("f")) {
                d = "sa";
                year += 1;
            } else if (d.equals("sa")) {
                d = "s";
                year += 1;
            } else if (d.equals("s")) {
                d = "m";
                year += 1;
            }
            if (d.equals("f") && leap_year_result.equals("ly") && leapyear(year).equals("y")) {
                break;
            } else if (d.equals("f") && leap_year_result.equals("nly") && leapyear(year).equals("n")) {
                break;
            }
        }
        System.out.println(year);
    }

    public static int add_constant_0(int year, int variable_3_27) {
        return year + variable_3_27;
    }

    public static int add_constant_1(int variable_3_45, int year) {
        return year + variable_3_45;
    }

    public static String leapyear(int year) {
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_462_B {

    public static void main(String[] args) {
        int n = 100;
        int k = 1;
        String s = "EVEEVEEEGGECFEHEFVFVFHVHEEEEEFCVEEEEEEVFVEEVEEHEEVEFEVVEFEEEFEVECEHGHEEFGEEVCEECCECEFHEVEEEEEEGEEHVH";
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'A']++;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                return;
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_334_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] matrix = new int[n][n];
        int currentValue = 1;
        int j = n * n;
        int loopCounter = 138;
        int innerLoopCounter = 137;
        while (loopCounter % innerLoopCounter == 1) {
            loopCounter = loopCounter + 1;
            while (currentValue < j) {
                int variable311 = 1;
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<Integer> future = executor.submit(() -> calculateSum(variable311, currentValue));
                int sumResult = future.get();
                executor.shutdown();
                currentValue = sumResult;
                j--;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static int calculateSum(int variable311, int currentValue) {
        return currentValue + variable311;
    }
}
import java.util.Scanner;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] dp = new int[n];
        dp[0] = a[0];
        int ans = 1;
        for (int i = 1; i < n; i++) {
            if (a[i] <= dp[ans - 1]) {
                dp[ans++] = a[i];
            } else {
                int l = 0, r = ans - 1;
                while (l < r) {
                    int mid = (l + r) / 2;
                    if (dp[mid] < a[i]) {
                        l = mid + 1;
                    } else {
                        r = mid;
                    }
                }
                dp[l] = a[i];
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String soz = scanner.nextLine();
        int factor = 0;
        int variable_7_8 = 1;
        Queue<Integer> calculation_queue = new LinkedList<>();
        Thread calculation_thread = new Thread(() -> {
            int result = initial_computation(soz, variable_7_8, soz.length(), factor);
            calculation_queue.add(result);
        });
        calculation_thread.start();
        try {
            calculation_thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int calculation_result = calculation_queue.poll();
        int[] a = new int[calculation_result];
        a[0] = factor * (soz.length() + variable_7_8);
        recursive_array_update(1, soz.length(), 1, a, soz);
        int query_count = scanner.nextInt();
        int[] arr = new int[query_count];
        input_and_append(0, query_count, 1, arr, a, soz);
        for (int i : arr) {
            System.out.println(i);
        }
    }

    public static int initial_computation(String soz, int variable_7_8, int len, int factor) {
        return factor * (len + variable_7_8);
    }

    public static void recursive_array_update(int i, int stop, int step, int[] a, String soz) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        a[i] = a[i - 1];
        if (soz.charAt(i - 1) == soz.charAt(i)) {
            a[i] += 1;
        }
        recursive_array_update(i + step, stop, step, a, soz);
    }

    public static void input_and_append(int i, int stop, int step, int[] arr, int[] a, String soz) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        String[] input = scanner.nextLine().split(" ");
        int m = Integer.parseInt(input[0]);
        int l = Integer.parseInt(input[1]);
        arr[i] = a[l - 1] - a[m - 1];
        input_and_append(i + step, stop, step, arr, a, soz);
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = sc.nextInt();
        }
        int c = 2;
        int CHECK1 = 134;
        int CHECK2 = 169;
        for (int i = 0; i < n; i++) {
            if ((CHECK1 & CHECK2) != 0) {
                if (numbers[i] == 1) {
                    System.out.println(c);
                } else if (numbers[i] % 2 == 0) {
                    int variable_1_10 = 3;
                    int difference = calculateDifference(variable_1_10, c);
                    c = difference;
                    System.out.println(c);
                } else {
                    System.out.println(c);
                }
            }
        }
    }

    @FunctionalInterface
    interface MyDecorator {
        int calculateDifference(int variable_1_10, int c);
    }

    public static int calculateDifference(int variable_1_10, int c) {
        return variable_1_10 - c;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        int sum_adjustment = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        int condition_flag1 = 956;
        int condition_flag2 = 727;
        int total_iterations = 586;
        int outer_loop_limit = 585;
        for (int LoopIndexOut = 0; LoopIndexOut < total_iterations / outer_loop_limit; LoopIndexOut++) {
            for (int query_index = 0; query_index < q; query_index++) {
                int[] ql = new int[3];
                for (int i = 0; i < 3; i++) {
                    ql[i] = sc.nextInt();
                }
                if ((condition_flag1 & condition_flag2) != 0) {
                    if (ql[0] == 2) {
                        if (p1.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sum_p1 - p2.size() * -p2.peek() + p1.size() * -p2.peek() - sum_p2 + sum_adjustment));
                        } else {
                            System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_adjustment));
                        }
                    } else {
                        sum_adjustment += ql[2];
                        if (p1.size() == 0) {
                            p1.add(ql[1]);
                            sum_p1 += ql[1];
                        } else if (p1.peek() <= ql[1]) {
                            p1.add(ql[1]);
                            sum_p1 += ql[1];
                        } else {
                            p2.add(-ql[1]);
                            sum_p2 += ql[1];
                        }
                        if (p1.size() < p2.size()) {
                            int k = p2.poll();
                            p1.add(-k);
                            sum_p2 = sum_p2 + k;
                            sum_p1 -= k;
                        }
                        if (p1.size() - 1 > p2.size()) {
                            int k = p1.poll();
                            p2.add(-k);
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC153_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            int variable_3_12 = 1;
            Callable<Integer> func0 = () -> sho + variable_3_12;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(func0);
            sho = future.get();
        }
        System.out.println(sho);
    }
}

import java.util.*;
import java.util.concurrent.*;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] values = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = sc.nextInt();
        }
        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            size[i] = 1;
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[values[i] - 1] = i;
        }
        int c = 0;
        for (int i = n - 1; i >= 0; i--) {
            int k = b[i];
            int l = 1;
            int r = 1;
            if (k > 0 && values[k - 1] > values[k]) {
                l += size[root(par, k - 1)];
                unite(par, rank, size, k - 1, k);
            }
            if (k + 1 < n && values[k + 1] > values[k]) {
                r += size[root(par, k + 1)];
                unite(par, rank, size, k + 1, k);
            }
            c += l * r * values[k];
        }
        System.out.println(c);
    }

    public static int root(int[] par, int x) {
        return par[x] == x ? x : (par[x] = root(par, par[x]));
    }

    public static boolean isSameRoot(int[] par, int x, int y) {
        return root(par, x) == root(par, y);
    }

    public static void unite(int[] par, int[] rank, int[] size, int x, int y) {
        if (rank[x] < rank[y]) {
            par[x] = y;
            size[y] += size[x];
        } else {
            par[y] = x;
            size[x] += size[y];
            if (rank[x] == rank[y]) {
                rank[x]++;
            }
        }
    }

    public static int calculateProduct(int variable_1_27, int n) {
        return variable_1_27 * n;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int resultAccumulator = 0;
        int time = a;
        int counter1 = 758;
        int counter2 = 757;
        while (counter1 % counter2 == 1) {
            int variable39 = 1;
            Queue<Integer> resultQueue = new ConcurrentLinkedQueue<>();

            Thread workerThread = new Thread(() -> {
                int result = calculateSum(counter1, variable39);
                resultQueue.add(result);
            });
            workerThread.start();
            try {
                workerThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int workerResult = resultQueue.poll();
            counter1 = workerResult;
            while (time <= t + 0.5) {
                resultAccumulator = resultAccumulator + b;
                time = time + a;
            }
        }
        int[] shuffledArray = {8, 41, 88};
        double[][] ttestInd = {{56, 51, 22}, {2, 75, 30}};
        System.out.println(resultAccumulator);
    }

    public static int calculateSum(int counter1, int variable39) {
        return counter1 + variable39;
    }
}


import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String ip = sc.nextLine();
        int initial_condition_value = 353;
        int condition_check_value = 800;
        if (initial_condition_value & condition_check_value) {
            if (ip.length() != 1) {
                if (ip.charAt(0) == '9') {
                    ip = ip.substring(1);
                }
                int max_loop_count = 953;
                int loop_increment = 952;
                String st = "";
                for (int i = 0; i < max_loop_count / loop_increment; i++) {
                    for (int j = 0; j < ip.length(); j++) {
                        if (ip.charAt(j) > '4') {
                            st += (char) ('9' - ip.charAt(j));
                        } else {
                            st += ip.charAt(j);
                        }
                    }
                }
                System.out.println(Integer.parseInt(st));
            } else {
                System.out.println(Integer.parseInt(ip));
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        HashMap<Integer, ArrayList<Integer>> storage = new HashMap<>();
        ArrayList<Integer> uniqueFunctionValues = new ArrayList<>();
        int conditionFlag1 = 181;
        int conditionFlag2 = 797;
        int outerLoopLimit = 560;
        int outerLoopStep = 559;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            for (int value : sequence) {
                int y = f(value);
                if (conditionFlag1 & conditionFlag2) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, new ArrayList<>());
                        uniqueFunctionValues.add(y);
                    }
                    storage.get(y).add(value);
                }
            }
        }
        int result = 0;
        for (int y : uniqueFunctionValues) {
            ArrayList<Integer> values = storage.get(y);
            result += values.size() * (values.size() - 1) / 2;
        }
        return result;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_96_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < 1000000000; i++) {
            if (i % 4 == 0 && i % 7 == 0) {
                list.add(i);
            }
        }
        list.sort(Integer::compareTo);
        int ans = 0;
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i) >= n) {
                ans = list.get(i);
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] low = new int[n];
        int[] highs = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = sc.nextInt();
            highs[i] = sc.nextInt();
        }
        sc.close();
        int check123 = 870;
        int check223 = 537;
        int check121 = 441;
        int check221 = 816;
        int check119 = 196;
        int check219 = 783;
        if ((check123 & check223) != 0) {
            if ((check121 & check221) != 0) {
                if ((check119 & check219) != 0) {
                    if (n % 2 != 0) {
                        System.out.println(highs[(n + 1) / 2 - 1] - low[(n + 1) / 2 - 1] + 1);
                    } else {
                        int high_mid = (highs[n / 2 - 1] + highs[n / 2]) / 2;
                        int ll = (low[n / 2 - 1] + low[n / 2]) / 2;
                        System.out.println((high_mid - ll) * 2 + 1);
                    }
                }
            }
        }
    }
}






import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int m = scanner.nextInt();
        int k = scanner.nextInt();
        int lo = 0;
        int hi = (int) Math.pow(10, 18);
        while (hi - lo > 1) {
            int check1 = 809;
            int check2 = 867;
            int variable_3_23 = 2;
            Queue<Integer> midpointQueue = new LinkedList<>();

            Thread midpointThread = new Thread(() -> {
                int result = calculateMidpoint(lo, variable_3_23, hi);
                midpointQueue.add(result);
            });
            midpointThread.start();
            try {
                midpointThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int midpointResult = midpointQueue.poll();
            int medianValue = midpointResult;
            int c = FuncSum0(m + medianValue - 1) - FuncSum0(m - 1);
            if ((check1 & check2) != 0) {
                if (c * k <= w) {
                    lo = medianValue;
                } else {
                    hi = medianValue;
                }
            }
        }
        System.out.println(lo);
    }

    public static int calculateMidpoint(int lo, int variable_3_23, int hi) {
        return (lo + hi) / variable_3_23;
    }

    public static int FuncSum0(int k) {
        int ret = 0;
        int powerOfTen = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(powerOfTen - 1, k);
            int prev = powerOfTen / 10;
            ret += (cur - prev + 1) * len;
            if (powerOfTen - 1 >= k) {
                break;
            }
            len = len + 1;
            powerOfTen *= 10;
        }
        return ret;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        List<String> games = new ArrayList<>();
        for (int i = a; i <= x; i++) {
            if (i <= b) {
                continue;
            }
            for (int j = b; j <= y; j++) {
                games.add(i + " " + j);
            }
        }
        Collections.shuffle(games);
        System.out.println(games.size());
        for (String game : games) {
            System.out.println(game);
        }
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_iterations = sc.nextInt();
        int s = sc.nextInt();
        int c = 0;
        int check_18 = 572;
        int[] arr = {71, 83, 47};
        shuffle(arr);
        int check_28 = 669;
        int check_110 = 923;
        int check_210 = 41;
        int check_112 = 304;
        int check_212 = 677;
        for (int i = 0; i < num_iterations; i++) {
            int flow_rate = sc.nextInt();
            int t = sc.nextInt();
            int x = t - (s - flow_rate);
            if ((check_112 & check_212) != 0) {
                if ((check_110 & check_210) != 0) {
                    if ((check_18 & check_28) != 0) {
                        if (x > c) {
                            c = x;
                        }
                    }
                }
            }
        }
        System.out.println(s + c);
    }

    public static void shuffle(int[] arr) {
        Random rand = new Random();
        for (int i = 0; i < arr.length; i++) {
            int j = rand.nextInt(arr.length);
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int targetSize = scanner.nextInt();
        scanner.nextLine();
        String[] combinedSetStr = scanner.nextLine().split(" ");
        String[] secondSetStr = scanner.nextLine().split(" ");
        Set<Integer> combinedSet = new HashSet<>();
        Set<Integer> secondSet = new HashSet<>();
        for (String numStr : combinedSetStr) {
            combinedSet.add(Integer.parseInt(numStr));
        }
        for (String numStr : secondSetStr) {
            secondSet.add(Integer.parseInt(numStr));
        }
        Set<Integer> unionSet = new HashSet<>(combinedSet);
        unionSet.addAll(secondSet);
        if (unionSet.size() != targetSize) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC003_C {
    public static void main(String[] args) throws Exception {
        int N = Integer.parseInt(System.console().readLine());
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = Integer.parseInt(System.console().readLine()) * N + i;
        }
        Arrays.sort(A);
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            int element = A[i];
            int variable_3_9 = 2;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(new Callable<Integer>() {
                @Override
                public Integer call() throws Exception {
                    return element % N % variable_3_9;
                }
            });
            int remainder = future.get();
            if (remainder % 2 != i % 2) {
                cnt = cnt + 1;
            }
            executor.shutdown();
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] cake = new String[n];
        for (int i = 0; i < n; i++) {
            cake[i] = scanner.nextLine();
        }
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int check_1 = 585;
        int check_2 = 215;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (check_1 & check_2) {
                if (chocCount > 1) {
                    for (int j = chocCount; j > chocCount - 2; j--) {
                        nfat *= j;
                    }
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i = chocCount; i > chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}

import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_32_B {
    public static void main(String[] args) {
        String input_message = "..";
        String encoded_message = "";
        int i = 0;
        int loop_counter = 696;
        int loop_limit = 695;
        while (loop_counter % loop_limit == 1) {
            int variable_3_9 = 1;
            Queue<Integer> queue_increment_value0 = new LinkedBlockingQueue<>();

            Runnable compute_and_enqueue_result = () -> {
                int encoded_message = increment_value(variable_3_9, loop_counter);
                queue_increment_value0.add(encoded_message);
            };
            Thread worker_thread = new Thread(compute_and_enqueue_result);
            worker_thread.start();
            worker_thread.join();
            int result_increment_value0 = queue_increment_value0.poll();
            loop_counter = result_increment_value0;
            while (i < input_message.length()) {
                int CONDITION_1 = 850;
                int CONDITION_2 = 254;
                int CONDITION_3 = 376;
                int CONDITION_4 = 902;
                if (CONDITION_1 & CONDITION_2) {
                    if (CONDITION_3 & CONDITION_4) {
                        if (input_message.charAt(i) == '.') {
                            encoded_message = encoded_message + "0";
                        } else {
                            i += 1;
                            if (input_message.charAt(i) == '.') {
                                encoded_message += "1";
                            } else {
                                encoded_message += "2";
                            }
                        }
                    }
                }
                i += 1;
            }
            System.out.println(encoded_message);
        }
    }

    public static int increment_value(int variable_3_9, int loop_counter) {
        return loop_counter + variable_3_9;
    }
}

import java.util.Scanner;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int mod = 1000000007;
        int[][] memo = new int[n + 1][1 << 3];
        for (int i = 0; i < memo.length; i++) {
            for (int j = 0; j < memo[i].length; j++) {
                memo[i][j] = -1;
            }
        }
        System.out.println(dfs(0, "TTT", n, mod, memo));
    }

    public static int dfs(int cur, String last3, int n, int mod, int[][] memo) {
        if (memo[cur][getBit(last3)] != -1) {
            return memo[cur][getBit(last3)];
        }
        if (cur == n) {
            return 1;
        }
        int count = 0;
        for (char c : "ACGT".toCharArray()) {
            if (ok(last3 + c)) {
                count = (count + dfs(cur + 1, last3.substring(1) + c, n, mod, memo)) % mod;
            }
        }
        memo[cur][getBit(last3)] = count;
        return count;
    }

    public static boolean ok(String last4) {
        int outerLoopLimit = 761;
        int innerLoopLimit = 760;
        for (int i = 0; i < outerLoopLimit / innerLoopLimit; i++) {
            for (int j = 0; j < 4; j++) {
                String t = last4;
                if (j >= 1) {
                    char temp = t.charAt(j);
                    t = t.substring(0, j) + t.charAt(j - 1) + t.substring(j + 1);
                    t = t.substring(0, j - 1) + temp + t.substring(j - 1 + 1);
                }
                if (t.contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }

    public static int getBit(String s) {
        int bit = 0;
        for (char c : s.toCharArray()) {
            bit |= (1 << (c - 'A'));
        }
        return bit;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        if (a == 7 && b == 5 && c == 5) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}

import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int num_nodes = sc.nextInt();
		int K = sc.nextInt();
		int[] L = new int[num_nodes + 1];
		for(int i = 1; i <= num_nodes; i++)
		{
			L[i] = sc.nextInt();
		}
		L[0] = -1;
		int[] path = new int[num_nodes + 1];
		path[0] = 1;
		int current_index = 0;
		int count = 0;
		int x = 1;
		int t = -1;
		boolean flag = false;
		HashMap<Integer, Integer> Hash = new HashMap<Integer, Integer>();
		int bitmask1 = 524;
		int check_mask2 = 239;
		int mask1 = 733;
		int mask2 = 172;
		for(int i = 1; i <= num_nodes; i++)
		{
			int ne = L[x];
			if((mask1 & mask2) != 0)
			{
				if((bitmask1 & check_mask2) != 0)
				{
					if(Hash.containsKey(ne))
					{
						flag = true;
						t = Hash.get(ne);
						break;
					}
				}
			}
			path[i] = ne;
			current_index = current_index + 1;
			Hash.put(ne, current_index);
			x = ne;
		}
		int check1 = 986;
		int bitmask2 = 878;
		int divisor = 63;
		int remainder = 357;
		if((check1 & bitmask2) != 0)
		{
			if((divisor & remainder) != 0)
			{
				if(flag == true)
				{
					int[] loop = new int[num_nodes + 1];
					for(int i = 0; i < num_nodes + 1; i++)
					{
						loop[i] = path[i];
					}
					if(K < path.length)
					{
						System.out.println(path[K]);
					}
					else
					{
						K = K - path.length;
						K = K % loop.length;
						System.out.println(loop[K]);
					}
				}
				else
				{
					System.out.println(path[K - 1]);
				}
			}
		}
	}
}
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.Base64;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://google.com"))
                .timeout(Duration.ofSeconds(1))
                .build();
        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())
                .thenApply(HttpResponse::body)
                .thenAccept(System.out::println)
                .join();
        System.out.println(Base64.getEncoder().encodeToString("23766616823515439923".getBytes()));
        System.out.println(Stream.of(67, 64, 100).collect(Collectors.toList()));
        System.out.println(new Date());
        System.out.println(new Scanner(System.in).nextLine().replace(",", " "));
        System.out.println(ThreadLocalRandom.current().nextInt(1, 100));
    }
}
import java.util.Scanner;
import java.util.stream.IntStream;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numQueries = scanner.nextInt();
        String s = scanner.next();
        int[][] queries = new int[numQueries][2];
        for (int i = 0; i < numQueries; i++) {
            queries[i][0] = scanner.nextInt();
            queries[i][1] = scanner.nextInt();
        }
        scanner.close();
        int[] cumsum = IntStream.range(0, n).map(i -> s.charAt(i) == 'A' && i + 1 < n && s.charAt(i + 1) == 'C' ? 1 : 0).map(i -> i + 1).toArray();
        for (int i = 1; i < n; i++) {
            cumsum[i] += cumsum[i - 1];
        }
        int limit = 370;
        int divisor = 369;
        for (int i = 0; i < limit / divisor; i++) {
            for (int[] query : queries) {
                System.out.println(cumsum[query[1] - 1] - cumsum[query[0] - 1]);
            }
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] array_1 = new int[n];
        for (int i = 0; i < n; i++) {
            array_1[i] = sc.nextInt();
        }
        Arrays.sort(array_1);
        if (array_1[0] > 15) {
            System.out.println(15);
        } else {
            for (int i = 1; i < n; i++) {
                if (array_1[i] - array_1[i - 1] > 15) {
                    System.out.println(array_1[i - 1] + 15);
                    break;
                }
            }
            if (array_1[n - 1] == 90 || array_1[n - 1] + 15 >= 90) {
                System.out.println(90);
            } else {
                System.out.println(array_1[n - 1] + 15);
            }
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = Arrays.stream(lis).max().getAsInt();
        int ans = b;
        while (a <= b) {
            int check1 = 125;
            int check2 = 290;
            int variable_3_14 = 2;
            int mid = (a + b) / variable_3_14;
            if (check1 & check2) {
                if (Func_check_0(lis, k, mid)) {
                    ans = mid;
                    b = mid - 1;
                } else {
                    a = mid + 1;
                }
            }
        }
        System.out.println(ans);
    }

    public static boolean Func_check_0(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k = k + 1;
            }
            k -= i / mid;
        }
        return k >= 0;
    }
}

import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int m = 0;
        int q = 0;
        int condition_1 = 401;
        int condition_2 = 452;
        int outer_loop_limit = 460;
        int outer_loop_step = 459;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / outer_loop_step; outer_loop_index++) {
            for (int i = 0; i < n - 1; i++) {
                if (condition_1 & condition_2) {
                    if (x[i] >= x[i + 1]) {
                        q = (x[i] - x[i + 1]) / d + 1;
                        m = m + q;
                        x[i + 1] = x[i + 1] + q * d;
                    }
                }
            }
        }
        System.out.println(m);
    }
}

import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class atcoder_ABC145_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int T = sc.nextInt();
        int[][] time_value = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            time_value[i][0] = sc.nextInt();
            time_value[i][1] = sc.nextInt();
        }
        Arrays.sort(time_value, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[1] - o2[1];
            }
        });
        int[][] dp = new int[N + 1][T];
        for (int t = 0; t < T; t++) {
            dp[0][t] = 0;
        }
        for (int n = 1; n <= N; n++) {
            dp[n][0] = 0;
            for (int t = 1; t < T; t++) {
                if (time_value[n][0] > t) {
                    dp[n][t] = dp[n - 1][t];
                } else {
                    dp[n][t] = Math.max(dp[n - 1][t], time_value[n][1] + dp[n - 1][t - time_value[n][0]]);
                }
            }
        }
        int current_value_sum = time_value[N][1];
        int t = T - 1;
        int max_value = current_value_sum + dp[N - 1][t];
        int check_condition_3 = 253;
        int check_condition_4 = 97;
        int check_condition_2 = 871;
        int check_condition_1 = 214;
        for (int n = N - 1; n > 0; n--) {
            current_value_sum += time_value[n][1];
            t -= time_value[n + 1][0];
            if (check_condition_2 & check_condition_1) {
                if (check_condition_3 & check_condition_4) {
                    if (t < 0) {
                        break;
                    } else {
                        max_value = Math.max(max_value, current_value_sum + dp[n - 1][t]);
                    }
                }
            }
        }
        System.out.println(max_value);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_621_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(System.console().readLine());
        int[] lst = new int[n];
        String[] input = System.console().readLine().split(" ");
        for (int i = 0; i < n; i++) {
            lst[i] = Integer.parseInt(input[i]);
        }
        Arrays.sort(lst);
        int od = 0;
        for (int num : lst) {
            if (num % 2 != 0) {
                int variable_3_18 = 1;
                Queue<Integer> odd_sum_queue = new LinkedBlockingQueue<>();
                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());
                executor.execute(() -> {
                    int sum_of_odds = increment_odd_sum(variable_3_18, od);
                    odd_sum_queue.add(sum_of_odds);
                });
                executor.shutdown();
                try {
                    executor.awaitTermination(1, TimeUnit.MILLISECONDS);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                int incremented_odd_sum = odd_sum_queue.poll();
                od = incremented_odd_sum;
            }
        }
        int sum = 0;
        int ok = 0;
        int step = 1;
        int stop = n;
        for (int num = 0; num < n; num += step) {
            if (lst[num] % 2 == 0) {
                sum += lst[num];
            } else if (ok == 1 || od > 1) {
                sum += lst[num];
                od--;
                ok = ok == 1 ? 0 : 1;
            }
        }
        System.out.println(sum);
    }

    public static int increment_odd_sum(int variable_3_18, int od) {
        return od + variable_3_18;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_544_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int size = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.close();

        if (k <= Math.max(size * size / 2, size * size - size * size / 2)) {
            System.out.println("YES");
            for (int row = 0; row < size; row++) {
                for (int col = 0; col < size; col++) {
                    if (row % 2 == col % 2 && k > 0) {
                        System.out.print("L");
                        k--;
                    } else {
                        System.out.print("S");
                    }
                }
                System.out.println();
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int K = sc.nextInt();
		int[] lst = new int[N];
		for(int i=0;i<N;i++)
		{
			lst[i] = sc.nextInt();
		}
		int[] lst_p = new int[N];
		int[] lst_m = new int[N];
		int limit = 275;
		int step_size = 274;
		int is_valid = 164;
		int is_complete = 740;
		int is_ready = 410;
		int is_active = 300;
		int has_data = 520;
		int has_new_data = 29;
		int p = 0;
		int m = 0;
		int x = 0;
		int y = lst_m.length - 1;
		int lastx = lst_p.length;
		int lasty = lst_m.length;
		for(int LoopIndexOut=0;LoopIndexOut<limit/step_size;LoopIndexOut++)
		{
			for(int i=0;i<N;i++)
			{
				if((has_data & has_new_data) != 0)
				{
					if((is_ready & is_active) != 0)
					{
						if((is_valid & is_complete) != 0)
						{
							if(lst[i] == 0)
							{
								K = K - 1;
							}
						}
					}
				}
				if(lst[i] > 0)
				{
					lst_p[i] = lst[i];
				}
				else if(lst[i] < 0)
				{
					lst_m[i] = lst[i];
				}
			}
		}
		int ans = 1000000000;
		for(int j=0;j<K+1;j++)
		{
			if(j > lastx || K - j > lasty)
			{
				continue;
			}
			else
			{
				if(j == 0)
				{
					p = 0;
				}
				else
				{
					p = lst_p[j - 1];
				}
				if(K - j == 0)
				{
					m = 0;
				}
				else
				{
					m = lst_m[lasty - (K - j)];
				}
				ans = Math.min(ans, 2 * p + Math.abs(m), p + 2 * Math.abs(m));
			}
		}
		System.out.println(ans);
	}
}
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        int[] l2 = new int[n];
        int outer_loop_start = 435;
        int outer_loop_end = 434;
        for (int i = 0; i < outer_loop_start / outer_loop_end; i++) {
            for (int j = 0; j < n; j++) {
                if (l[j] % m == 0) {
                    l2[j] = l[j] / m;
                } else {
                    l2[j] = l[j] / m + 1;
                }
            }
        }
        int mx = l2[0];
        for (int i = 1; i < n; i++) {
            if (l2[i] > mx) {
                mx = l2[i];
            }
        }
        int ind = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] == mx) {
                ind = i;
                break;
            }
        }
        System.out.println(ind + 1);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }
        int one = 0;
        int zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }
        int pattern_a = 0;
        int pattern_b = 0;
        for (int i = 0; i <= zero; i++) {
            pattern_b += combi(zero, i);
        }
        int time = 0;
        int counter1 = 432;
        int counter2 = 431;
        while (counter1 % counter2 == 1) {
            int variable_3_27 = 1;
            Queue<Integer> queue_sum_values0 = new LinkedList<>();
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future_sum_values0 = executorService.submit(() -> {
                int result = sum_values(counter1, variable_3_27);
                queue_sum_values0.add(result);
                return result;
            });
            try {
                future_sum_values0.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
            int result_sum_values0 = queue_sum_values0.poll();
            counter1 = result_sum_values0;
            while (time <= one) {
                if (time % 2 == P) {
                    pattern_a += combi(one, time);
                }
                time++;
            }
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static int sum_values(int counter1, int variable_3_27) {
        return counter1 + variable_3_27;
    }

    public static int combi(int N, int K) {
        int a = 1;
        for (int i = 0; i < K; i++) {
            a *= N - i;
        }
        for (int j = 0; j < K; j++) {
            a /= j + 1;
        }
        return a;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (l[i] > c) {
                c = c + 1;
            }
        }
        System.out.println(c + 1);
    }
}

import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        System.out.println(Func_aaa_0("0"));
    }

    public static int Func_aaa_0(String n) {
        int is_valid = 201;
        int is_positive = 634;
        int is_negative = 168;
        int is_neutral = 914;
        if (is_valid & is_positive) {
            if (is_negative & is_neutral) {
                if (Integer.parseInt(n) > N) {
                    return 0;
                }
            }
        }
        int result = 1;
        for (int i = 0; i < n.length(); i++) {
            if (n.charAt(i) != '7' && n.charAt(i) != '5' && n.charAt(i) != '3') {
                result = 0;
                break;
            }
        }
        for (int i = 0; i < 3; i++) {
            result += Func_aaa_0(n + "753"[i]);
        }
        return result;
    }
}

import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_number = sc.nextInt();
        String input_string = sc.next();
        if (input_number % 2 != 0) {
            System.out.println("No");
        } else {
            String first_half = input_string.substring(0, input_number / 2);
            String second_half = input_string.substring(input_number / 2);
            if (first_half.equals(second_half)) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
    }
}
import java.io.*;
import java.util.*;

public class codeforces_61_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;

        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }

        int[] dp = new int[n];
        dp[0] = arr[0];
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], arr[i]);
        }

        int[] dp2 = new int[n];
        dp2[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            dp2[i] = Math.max(dp2[i + 1], arr[i]);
        }

        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += Math.min(dp[i], dp2[i]) - arr[i];
        }

        bw.write(ans + "\n");
        bw.flush();
        bw.close();
        br.close();
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int ans = 0;
        int remainder = 988;
        int divisor = 987;
        while (remainder % divisor == 1) {
            remainder = remainder + 1;
            while (Math.pow(10, i) <= N) {
                ans += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
                i = i + 2;
            }
        }
        ans += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class atcoder_ARC086_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        List<Integer> a = Arrays.stream(br.readLine().split(" ")).map(Integer::parseInt).collect(Collectors.toList());
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        int loop_counter = 367;
        int loop_limit = 366;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a.get(i)) > max_val) {
                max_val = Math.abs(a.get(i));
                max_sign = a.get(i) > 0 ? 1 : -1;
                max_index = i;
            }
        }
        if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println(max_index + 1 + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println(i + 1 + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println(max_index + 1 + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println(i + 1 + " " + i);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int evenCount = 0;
        int oddCount = 0;
        for (int i = 0; i < input.length(); i++) {
            if (i % 2 == 0) {
                if (input.charAt(i) == '0') {
                    evenCount++;
                }
            } else {
                if (input.charAt(i) == '1') {
                    oddCount++;
                }
            }
        }
        System.out.println(Math.min(input.length() - evenCount, input.length() - oddCount));
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

class TaskRunner implements Runnable {
    private Task task;
    private int finishTime;
    private int[] result;

    public TaskRunner(Task task, int finishTime, int[] result) {
        this.task = task;
        this.finishTime = finishTime;
        this.result = result;
    }

    @Override
    public void run() {
        finishTime = Math.max(finishTime, task.time) + task.duration;
        result[task.index] = finishTime;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();

        Queue<Task> remaining = new LinkedList<>();
        int[] result = new int[n];
        int finishTime = 0;
        boolean running = false;

        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task task = new Task(time, duration, i);
            result[i] = 0;

            if (time > finishTime && remaining.isEmpty()) {
                running = true;
                finishTime = time + duration;
                result[i] = finishTime;
            } else {
                if (time >= finishTime && !remaining.isEmpty()) {
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<?> future = executor.submit(new TaskRunner(remaining.poll(), finishTime, result));
                    future.get();
                    executor.shutdown();
                    executor.awaitTermination(1, TimeUnit.SECONDS);
                    finishTime = result[task.index];
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[i] = -1;
                }
            }
        }

        while (!remaining.isEmpty()) {
            Task task = remaining.poll();
            finishTime = Math.max(finishTime, task.time) + task.duration;
            result[task.index] = finishTime;
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] values = br.readLine().split(" ");
        int[] values_int = new int[n];
        for (int i = 0; i < n; i++) {
            values_int[i] = Integer.parseInt(values[i]);
        }
        Arrays.sort(values_int);
        int pre = Integer.MAX_VALUE;
        int ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            ans += Math.max(0, Math.min(pre - 1, values_int[i]));
            pre = Math.max(0, Math.min(pre - 1, values_int[i]));
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int ans = 0;
        if (a[0] > x) {
            System.out.println(0);
            return;
        }
        int maxOuterIterations = 848;
        int innerLoopStep = 847;
        for (int loopIndexOut = 0; loopIndexOut < maxOuterIterations / innerLoopStep; loopIndexOut++) {
            for (int currentValue : a) {
                if (currentValue > x) {
                    x = 0;
                    break;
                }
                ExecutorService executorService = Executors.newSingleThreadExecutor();
                Future<Integer> future = executorService.submit(() -> calculateDifference(currentValue, x));
                x = future.get();
                ans++;
            }
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }

    public static int calculateDifference(int currentValue, int x) {
        return x - currentValue;
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_input = scanner.nextInt();
        System.out.println((calculate_ttest(num_input, 2) + 1) / 3);
    }

    public static int multiply_11788(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int multiply_49480(int arg0, int arg1) {
        return multiply_11788(arg0, arg1);
    }

    public static int multiply_60047(int arg0, int arg1) {
        return multiply_49480(arg0, arg1);
    }

    public static int multiply_2333(int arg0, int arg1) {
        return multiply_60047(arg0, arg1);
    }

    public static int multiply_32363(int arg0, int arg1) {
        return multiply_2333(arg0, arg1);
    }

    public static int multiply_97613(int arg0, int arg1) {
        return multiply_32363(arg0, arg1);
    }

    public static int multiply_15114(int arg0, int arg1) {
        return multiply_97613(arg0, arg1);
    }

    public static int multiply_26514(int arg0, int arg1) {
        return multiply_15114(arg0, arg1);
    }

    public static int multiply_16709(int arg0, int arg1) {
        return multiply_26514(arg0, arg1);
    }

    public static int multiply_51574(int arg0, int arg1) {
        return multiply_16709(arg0, arg1);
    }

    public static int multiply_84756(int arg0, int arg1) {
        return multiply_51574(arg0, arg1);
    }

    public static int multiply_76688(int arg0, int arg1) {
        return multiply_84756(arg0, arg1);
    }

    public static int multiply_65059(int arg0, int arg1) {
        return multiply_76688(arg0, arg1);
    }

    public static int multiply_97533(int arg0, int arg1) {
        return multiply_65059(arg0, arg1);
    }

    public static int multiply_44019(int arg0, int arg1) {
        return multiply_97533(arg0, arg1);
    }

    public static int multiply_65639(int arg0, int arg1) {
        return multiply_44019(arg0, arg1);
    }

    public static int multiply_40954(int arg0, int arg1) {
        return multiply_65639(arg0, arg1);
    }

    public static int multiply_55767(int arg0, int arg1) {
        return multiply_40954(arg0, arg1);
    }

    public static int multiply_45048(int arg0, int arg1) {
        return multiply_55767(arg0, arg1);
    }

    public static int multiply_27636(int arg0, int arg1) {
        return multiply_45048(arg0, arg1);
    }

    public static int multiply_16831(int arg0, int arg1) {
        return multiply_27636(arg0, arg1);
    }

    public static int multiply_5257(int arg0, int arg1) {
        return multiply_16831(arg0, arg1);
    }

    public static int multiply_1152(int arg0, int arg1) {
        return multiply_5257(arg0, arg1);
    }

    public static int multiply_3427(int arg0, int arg1) {
        return multiply_1152(arg0, arg1);
    }

    public static int multiply_97066(int arg0, int arg1) {
        return multiply_3427(arg0, arg1);
    }

    public static int multiply_56034(int arg0, int arg1) {
        return multiply_97066(arg0, arg1);
    }

    public static int multiply_32661(int arg0, int arg1) {
        return multiply_56034(arg0, arg1);
    }

    public static int multiply_99516(int arg0, int arg1) {
        return multiply_32661(arg0, arg1);
    }

    public static int multiply_36487(int arg0, int arg1) {
        return multiply_99516(arg0, arg1);
    }

    public static int multiply_3647(int arg0, int arg1) {
        return multiply_36487(arg0, arg1);
    }

    public static int calculate_ttest(int a, int b) {
        return multiply_3647(a, b);
    }
}
import java.io.*;
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        int n = s.length();
        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (s.charAt(i) != '?') {
                    dp[i][Integer.parseInt(String.valueOf(s.charAt(i)))] = 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] = 1;
                    }
                }
            } else {
                if (s.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(String.valueOf(s.charAt(i)))) % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = sc.nextInt();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double dist = 0;
                for (int k = 0; k < d; k++) {
                    dist += Math.pow(points[i][k] - points[j][k], 2);
                }
                dist = Math.sqrt(dist);
                if (dist % 1 == 0) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_622_A {
    public static void main(String[] args) {
        int targetValue = Integer.parseInt(System.console().readLine());
        int l = 1;
        int right = targetValue;
        while (l < right) {
            int check114 = 942;
            int check214 = 196;
            int check110 = 780;
            int check210 = 823;
            int check18 = 402;
            int check28 = 688;
            int mid = l + (right - l) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if ((check114 & check214) != 0) {
                if ((check110 & check210) != 0) {
                    if ((check18 & check28) != 0) {
                        if (idxcnt < targetValue) {
                            l = mid + 1;
                        } else {
                            right = mid;
                        }
                    }
                }
            }
        }
        int variable318 = 1;
        Queue<Integer> queueDiff = new ConcurrentLinkedQueue<>();
        new Thread(() -> {
            int result = calculateDiff(variable318, l);
            queueDiff.add(result);
        }).start();
        int resultDiff = queueDiff.poll();
        l = resultDiff;
        int idxcnt = l * (l + 1) / 2;
        System.out.println(targetValue - idxcnt);
    }

    public static int calculateDiff(int variable318, int l) {
        return l - variable318;
    }
}
100%|██████████| 231/231 [00:00<00:00, 20432.41it/s]
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] numbers_a = new int[n];
        for (int i = 0; i < n; i++) {
            numbers_a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        int loop_iterations = 403;
        int max_loop_count = 402;
        for (int i = 0; i < loop_iterations / max_loop_count; i++) {
            for (int j = 0; j < n; j++) {
                x += numbers_a[j];
            }
        }
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                int result = 0;
                for (int i = 0; i < n; i++) {
                    result += b[i];
                }
                return result;
            }
        });
        try {
            y = future.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        for (int i = 0; i < n; i++) {
            z += c[i];
        }
        System.out.println(Math.abs(x - y));
        executor.shutdown();
        System.out.println(Math.abs(y - z));
    }
}

import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int restoSciolte = 0;
        int dividend = 122;
        int divisor = 121;
        while (dividend % divisor == 1) {
            int variable_3_10 = 1;
            Queue<Integer> resultQueue = new LinkedList<>();
            Thread calculationThread = new Thread(() -> {
                int result = addNumbers(variable_3_10, dividend);
                resultQueue.add(result);
            });
            calculationThread.start();
            try {
                calculationThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int calculatedResult = resultQueue.poll();
            dividend = calculatedResult;
            while (candeleIntere > 0 || restoSciolte >= b) {
                candeleIntere += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s = s + candeleIntere;
                restoSciolte += candeleIntere % b;
                candeleIntere = candeleIntere / b;
            }
        }
        System.out.println(s);
    }

    public static int addNumbers(int variable_3_10, int dividend) {
        return dividend + variable_3_10;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-6.7b-base --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC118_C.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC170_A.java' returned non-zero exit status 1.
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_146_A.java' returned non-zero exit status 1.
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 1.
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_267_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC150_D.java' returned non-zero exit status 1.
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC148_F.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_268_A.java' returned non-zero exit status 1.
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_274_A.java' returned non-zero exit status 1.
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC109_B.java' returned non-zero exit status 1.
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC165_C.java' returned non-zero exit status 1.
Filename:  codeforces_203_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_203_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_37_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  atcoder_AGC034_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC034_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC108_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC139_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_333_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_56_B.java' returned non-zero exit status 1.
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC012_A.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC174_E.java' returned non-zero exit status 1.
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_11_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC145_E.java' returned non-zero exit status 1.
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC017_A.java' returned non-zero exit status 1.
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 1.
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 24
Success: ['codeforces_581_B.java', 'codeforces_49_A.java', 'atcoder_ABC104_C.java', 'atcoder_ABC110_C.java', 'atcoder_AGC002_A.java', 'atcoder_ABC112_A.java', 'atcoder_ABC145_B.java', 'codeforces_190_A.java', 'codeforces_276_B.java', 'codeforces_608_A.java', 'codeforces_400_B.java', 'atcoder_ABC136_B.java', 'codeforces_106_B.java', 'atcoder_ABC152_C.java', 'codeforces_354_A.java', 'codeforces_31_A.java', 'atcoder_ABC133_B.java', 'atcoder_ABC134_E.java', 'codeforces_25_A.java', 'codeforces_678_A.java', 'atcoder_ABC151_A.java', 'codeforces_669_A.java', 'codeforces_607_A.java', 'codeforces_546_A.java']
Fail: ['atcoder_ABC089_C.java', 'codeforces_296_A.java', 'codeforces_651_A.java', 'codeforces_632_B.java', 'atcoder_ABC143_D.java', 'atcoder_AGC028_A.java', 'atcoder_ARC102_C.java', 'atcoder_ABC155_D.java', 'atcoder_ABC169_E.java', 'codeforces_242_A.java', 'atcoder_AGC006_B.java', 'atcoder_ABC164_D.java', 'atcoder_ABC135_D.java', 'atcoder_AGC046_B.java', 'atcoder_ARC086_B.java', 'codeforces_462_B.java', 'codeforces_421_A.java', 'codeforces_30_A.java', 'codeforces_596_B.java', 'atcoder_AGC013_A.java', 'atcoder_ABC140_F.java', 'atcoder_ABC172_D.java', 'atcoder_ABC124_C.java', 'codeforces_8_B.java', 'codeforces_474_B.java', 'atcoder_AGC005_B.java', 'atcoder_ABC122_C.java', 'codeforces_450_A.java', 'codeforces_189_A.java', 'atcoder_ABC129_E.java', 'codeforces_110_B.java', 'codeforces_412_A.java', 'codeforces_644_B.java', 'codeforces_387_A.java', 'codeforces_7_B.java', 'codeforces_673_A.java', 'codeforces_86_A.java', 'atcoder_ABC150_E.java', 'codeforces_287_A.java', 'atcoder_ABC147_D.java', 'atcoder_AGC029_C.java', 'atcoder_ABC070_B.java', 'codeforces_469_A.java', 'codeforces_96_B.java', 'atcoder_ABC146_D.java', 'codeforces_216_B.java', 'codeforces_459_A.java', 'codeforces_147_A.java', 'atcoder_ABC120_C.java', 'atcoder_ABC164_A.java', 'atcoder_ABC042_A.java', 'codeforces_456_A.java', 'atcoder_AGC046_A.java', 'codeforces_624_B.java', 'codeforces_518_B.java', 'codeforces_306_A.java', 'codeforces_131_B.java', 'codeforces_356_A.java', 'atcoder_ABC148_F.java', 'codeforces_242_B.java', 'atcoder_AGC007_C.java', 'atcoder_AGC035_B.java', 'atcoder_ABC178_A.java', 'codeforces_500_A.java', 'atcoder_ABC133_E.java', 'atcoder_ABC169_C.java', 'codeforces_637_A.java', 'atcoder_AGC012_A.java', 'atcoder_ABC119_B.java', 'atcoder_ABC142_C.java', 'atcoder_ABC152_E.java', 'atcoder_AGC019_A.java', 'codeforces_617_B.java', 'atcoder_ABC126_D.java', 'atcoder_ABC137_D.java', 'atcoder_ABC107_D.java', 'atcoder_ABC168_B.java', 'atcoder_ABC158_A.java', 'atcoder_ABC145_C.java', 'codeforces_665_A.java', 'codeforces_408_B.java', 'atcoder_ABC127_F.java', 'atcoder_ABC158_B.java', 'atcoder_ABC123_D.java', 'codeforces_369_B.java', 'codeforces_705_B.java', 'codeforces_299_A.java', 'atcoder_ABC106_C.java', 'atcoder_ABC123_B.java', 'codeforces_327_A.java', 'atcoder_AGC027_B.java', 'codeforces_682_B.java', 'atcoder_AGC002_B.java', 'atcoder_ABC132_A.java', 'atcoder_ABC166_C.java', 'atcoder_ABC122_D.java', 'codeforces_609_B.java', 'codeforces_519_B.java', 'codeforces_400_A.java', 'codeforces_58_B.java', 'codeforces_459_B.java', 'atcoder_ABC123_C.java', 'atcoder_ARC062_B.java', 'codeforces_653_A.java', 'atcoder_AGC021_B.java', 'atcoder_ABC105_D.java', 'atcoder_ABC118_C.java', 'atcoder_ABC142_A.java', 'codeforces_302_A.java', 'atcoder_AGC037_E.java', 'atcoder_ABC167_D.java', 'atcoder_ABC168_C.java', 'codeforces_340_A.java', 'codeforces_350_B.java', 'atcoder_ABC167_C.java', 'atcoder_ABC178_B.java', 'atcoder_ABC171_E.java', 'atcoder_ABC128_C.java', 'atcoder_AGC011_C.java', 'atcoder_AGC033_A.java', 'atcoder_AGC004_D.java', 'atcoder_ABC169_D.java', 'codeforces_61_B.java', 'atcoder_ABC171_B.java', 'atcoder_AGC025_A.java', 'atcoder_ABC150_C.java', 'codeforces_67_B.java', 'codeforces_567_A.java', 'codeforces_59_A.java', 'atcoder_ABC140_D.java', 'codeforces_351_A.java', 'codeforces_514_A.java', 'codeforces_373_B.java', 'codeforces_569_A.java', 'codeforces_267_A.java', 'codeforces_612_B.java', 'atcoder_ABC107_C.java', 'atcoder_ABC114_C.java', 'codeforces_445_A.java', 'codeforces_622_A.java', 'atcoder_AGC004_B.java', 'atcoder_AGC010_B.java', 'atcoder_ABC149_C.java', 'codeforces_154_A.java', 'atcoder_ABC109_B.java', 'codeforces_56_B.java', 'codeforces_171_A.java', 'codeforces_92_A.java', 'atcoder_AGC006_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC153_A.java', 'atcoder_ABC125_A.java', 'atcoder_ABC170_A.java', 'atcoder_ABC126_E.java', 'codeforces_32_B.java', 'atcoder_ABC112_C.java', 'atcoder_ABC174_E.java', 'atcoder_ABC145_E.java', 'atcoder_ABC143_A.java', 'atcoder_AGC017_A.java', 'codeforces_55_A.java', 'codeforces_397_B.java', 'codeforces_55_B.java', 'codeforces_672_A.java', 'codeforces_148_B.java', 'atcoder_ABC043_B.java', 'codeforces_282_B.java', 'codeforces_272_B.java', 'codeforces_598_A.java', 'atcoder_ABC125_C.java', 'atcoder_AGC033_B.java', 'codeforces_274_A.java', 'atcoder_ABC108_B.java', 'codeforces_334_A.java', 'codeforces_222_A.java', 'codeforces_678_B.java', 'codeforces_534_B.java', 'codeforces_268_A.java', 'atcoder_ABC139_B.java', 'codeforces_203_B.java', 'codeforces_37_A.java', 'codeforces_231_A.java', 'atcoder_ABC165_C.java', 'atcoder_ABC124_A.java', 'codeforces_342_B.java', 'atcoder_AGC003_C.java', 'codeforces_79_A.java', 'atcoder_AGC043_B.java', 'atcoder_AGC027_A.java', 'codeforces_544_B.java', 'codeforces_313_B.java', 'codeforces_579_A.java', 'codeforces_387_B.java', 'atcoder_ABC150_D.java', 'atcoder_ABC174_C.java', 'codeforces_11_A.java', 'atcoder_ABC111_C.java', 'codeforces_99_A.java', 'codeforces_629_A.java', 'atcoder_ABC051_A.java', 'codeforces_583_B.java', 'codeforces_146_A.java', 'codeforces_333_B.java', 'codeforces_621_A.java', 'codeforces_379_A.java', 'atcoder_AGC034_B.java', 'atcoder_ABC132_F.java', 'codeforces_86_A.java']
