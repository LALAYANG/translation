+ model=deepseek-ai/deepseek-coder-33b-instruct
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-33b-instruct --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 05:13:52 [__init__.py:241] Automatically detected platform cuda.
found 221 inputs
INFO 08-21 05:13:53 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-33b-instruct', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 05:13:58 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 05:13:58 [__init__.py:1750] Using max model len 4096
INFO 08-21 05:13:59 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3115538)[0;0m INFO 08-21 05:13:59 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3115538)[0;0m INFO 08-21 05:13:59 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-33b-instruct', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-33b-instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-33b-instruct, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3115538)[0;0m WARNING 08-21 05:13:59 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3115538)[0;0m INFO 08-21 05:13:59 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_05068cd3'), local_subscribe_addr='ipc:///tmp/22cd2cf9-a25a-42e7-a26b-3bbd992d8494', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:01 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_b822954c'), local_subscribe_addr='ipc:///tmp/7b5aadc8-fb64-4724-ac06-1f3f8305ee5d', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:01 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_7035d5b2'), local_subscribe_addr='ipc:///tmp/43cd08e0-674e-4361-97e4-6f34c82eb6ee', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:02 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:02 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:02 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:02 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:02 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:02 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:02 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_f0474aa6'), local_subscribe_addr='ipc:///tmp/38d4df16-0adb-44e9-b77b-861ab76cdc12', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:02 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:02 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m WARNING 08-21 05:14:02 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m WARNING 08-21 05:14:02 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:02 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-33b-instruct...
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:02 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-33b-instruct...
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:03 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:03 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:03 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:03 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:03 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:03 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards:  14% Completed | 1/7 [00:01<00:09,  1.56s/it]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards:  29% Completed | 2/7 [00:04<00:11,  2.25s/it]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards:  43% Completed | 3/7 [00:06<00:09,  2.46s/it]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards:  57% Completed | 4/7 [00:09<00:07,  2.46s/it]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards:  71% Completed | 5/7 [00:12<00:05,  2.52s/it]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards:  86% Completed | 6/7 [00:14<00:02,  2.61s/it]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:17<00:00,  2.50s/it]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:17<00:00,  2.45s/it]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m 
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:21 [default_loader.py:262] Loading weights took 17.37 seconds
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:21 [default_loader.py:262] Loading weights took 17.27 seconds
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:21 [gpu_model_runner.py:2007] Model loading took 31.2363 GiB and 18.040498 seconds
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:21 [gpu_model_runner.py:2007] Model loading took 31.2363 GiB and 18.132312 seconds
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:33 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/14e7a0db7a/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:33 [backends.py:559] Dynamo bytecode transform time: 11.94 s
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:33 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/14e7a0db7a/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:33 [backends.py:559] Dynamo bytecode transform time: 12.00 s
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:43 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 9.614 s
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:44 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 9.605 s
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:53 [monitor.py:34] torch.compile takes 11.94 s in total
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:53 [monitor.py:34] torch.compile takes 12.00 s in total
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:14:54 [gpu_worker.py:276] Available KV cache memory: 36.79 GiB
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:14:54 [gpu_worker.py:276] Available KV cache memory: 36.79 GiB
[1;36m(EngineCore_0 pid=3115538)[0;0m INFO 08-21 05:14:55 [kv_cache_utils.py:849] GPU KV cache size: 311,072 tokens
[1;36m(EngineCore_0 pid=3115538)[0;0m INFO 08-21 05:14:55 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 75.95x
[1;36m(EngineCore_0 pid=3115538)[0;0m INFO 08-21 05:14:55 [kv_cache_utils.py:849] GPU KV cache size: 311,072 tokens
[1;36m(EngineCore_0 pid=3115538)[0;0m INFO 08-21 05:14:55 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 75.95x
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 14.16it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:04, 14.77it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:04, 14.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:04, 14.63it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:04, 14.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 14.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 14.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:01<00:03, 14.21it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:03, 14.48it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:03, 14.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:03, 14.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 14.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 14.29it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 14.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:02<00:02, 14.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:02<00:02, 14.06it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:02, 14.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:02, 14.17it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:02, 13.89it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 13.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 14.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:03<00:01, 13.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:03<00:01, 13.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:03<00:01, 13.79it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:03<00:01, 13.66it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:03<00:01, 13.68it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 13.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 13.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:04<00:00, 13.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:04<00:00, 13.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:04<00:00, 13.36it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:04<00:00, 12.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:04<00:00, 13.16it/s][1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:15:00 [custom_all_reduce.py:196] Registering 8375 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:04<00:00, 13.93it/s]
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:15:00 [custom_all_reduce.py:196] Registering 8375 cuda graph addresses
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP1 pid=3115546)[0;0m INFO 08-21 05:15:00 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 1.09 GiB
[1;36m(EngineCore_0 pid=3115538)[0;0m [1;36m(VllmWorker TP0 pid=3115544)[0;0m INFO 08-21 05:15:00 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 1.09 GiB
[1;36m(EngineCore_0 pid=3115538)[0;0m INFO 08-21 05:15:00 [core.py:214] init engine (profile, create kv cache, warmup model) took 38.79 seconds
INFO 08-21 05:15:01 [llm.py:298] Supported_tasks: ['generate']
Translating 221 files...
  0%|          | 0/221 [00:00<?, ?it/s]100%|██████████| 221/221 [00:00<00:00, 10868.11it/s]
Adding requests:   0%|          | 0/221 [00:00<?, ?it/s]Adding requests:  32%|███▏      | 71/221 [00:00<00:00, 706.03it/s]Adding requests:  68%|██████▊   | 150/221 [00:00<00:00, 752.99it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 758.57it/s]
Processed prompts:   0%|          | 0/221 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/221 [00:11<40:40, 11.09s/it, est. speed input: 52.19 toks/s, output: 16.14 toks/s]Processed prompts:   1%|          | 2/221 [00:12<19:40,  5.39s/it, est. speed input: 115.06 toks/s, output: 32.19 toks/s]Processed prompts:   1%|▏         | 3/221 [00:13<11:36,  3.19s/it, est. speed input: 134.82 toks/s, output: 48.97 toks/s]Processed prompts:   2%|▏         | 4/221 [00:13<07:36,  2.10s/it, est. speed input: 156.62 toks/s, output: 66.38 toks/s]Processed prompts:   2%|▏         | 5/221 [00:13<05:16,  1.47s/it, est. speed input: 177.02 toks/s, output: 83.85 toks/s]Processed prompts:   3%|▎         | 6/221 [00:14<03:42,  1.04s/it, est. speed input: 257.90 toks/s, output: 101.78 toks/s]Processed prompts:   3%|▎         | 7/221 [00:14<02:38,  1.35it/s, est. speed input: 312.14 toks/s, output: 120.06 toks/s]Processed prompts:   4%|▎         | 8/221 [00:14<02:29,  1.43it/s, est. speed input: 322.67 toks/s, output: 135.10 toks/s]Processed prompts:   5%|▍         | 10/221 [00:15<01:38,  2.15it/s, est. speed input: 365.70 toks/s, output: 170.61 toks/s]Processed prompts:   5%|▍         | 11/221 [00:15<01:20,  2.62it/s, est. speed input: 389.69 toks/s, output: 189.37 toks/s]Processed prompts:   5%|▌         | 12/221 [00:15<01:23,  2.51it/s, est. speed input: 397.90 toks/s, output: 204.37 toks/s]Processed prompts:   6%|▌         | 13/221 [00:15<01:11,  2.90it/s, est. speed input: 413.17 toks/s, output: 222.44 toks/s]Processed prompts:   8%|▊         | 18/221 [00:16<00:29,  6.95it/s, est. speed input: 566.18 toks/s, output: 322.08 toks/s]Processed prompts:   9%|▉         | 20/221 [00:16<00:24,  8.28it/s, est. speed input: 601.90 toks/s, output: 361.36 toks/s]Processed prompts:  10%|▉         | 22/221 [00:16<00:27,  7.30it/s, est. speed input: 624.30 toks/s, output: 395.21 toks/s]Processed prompts:  11%|█▏        | 25/221 [00:16<00:21,  8.99it/s, est. speed input: 709.76 toks/s, output: 453.24 toks/s]Processed prompts:  13%|█▎        | 28/221 [00:16<00:16, 11.62it/s, est. speed input: 822.14 toks/s, output: 513.91 toks/s]Processed prompts:  14%|█▎        | 30/221 [00:17<00:15, 12.61it/s, est. speed input: 882.14 toks/s, output: 552.83 toks/s]Processed prompts:  14%|█▍        | 32/221 [00:17<00:14, 12.84it/s, est. speed input: 920.49 toks/s, output: 590.81 toks/s]Processed prompts:  16%|█▌        | 35/221 [00:17<00:11, 15.63it/s, est. speed input: 1034.23 toks/s, output: 651.25 toks/s]Processed prompts:  17%|█▋        | 38/221 [00:17<00:11, 16.11it/s, est. speed input: 1130.95 toks/s, output: 709.58 toks/s]Processed prompts:  18%|█▊        | 40/221 [00:17<00:12, 14.71it/s, est. speed input: 1194.08 toks/s, output: 746.06 toks/s]Processed prompts:  19%|█▉        | 42/221 [00:17<00:11, 15.34it/s, est. speed input: 1227.39 toks/s, output: 785.06 toks/s]Processed prompts:  20%|██        | 45/221 [00:17<00:09, 18.01it/s, est. speed input: 1281.25 toks/s, output: 845.62 toks/s]Processed prompts:  21%|██▏       | 47/221 [00:18<00:09, 17.84it/s, est. speed input: 1310.27 toks/s, output: 884.45 toks/s]Processed prompts:  22%|██▏       | 49/221 [00:18<00:09, 17.74it/s, est. speed input: 1393.53 toks/s, output: 923.21 toks/s]Processed prompts:  24%|██▎       | 52/221 [00:18<00:08, 20.12it/s, est. speed input: 1474.26 toks/s, output: 983.81 toks/s]Processed prompts:  25%|██▍       | 55/221 [00:18<00:09, 18.20it/s, est. speed input: 1526.67 toks/s, output: 1039.99 toks/s]Processed prompts:  28%|██▊       | 61/221 [00:18<00:05, 27.09it/s, est. speed input: 1745.89 toks/s, output: 1168.19 toks/s]Processed prompts:  29%|██▉       | 65/221 [00:18<00:05, 26.09it/s, est. speed input: 1821.42 toks/s, output: 1247.58 toks/s]Processed prompts:  31%|███       | 68/221 [00:18<00:06, 22.28it/s, est. speed input: 1866.95 toks/s, output: 1302.98 toks/s]Processed prompts:  33%|███▎      | 72/221 [00:19<00:06, 23.05it/s, est. speed input: 1935.87 toks/s, output: 1382.62 toks/s]Processed prompts:  34%|███▍      | 75/221 [00:19<00:06, 24.19it/s, est. speed input: 1993.44 toks/s, output: 1443.31 toks/s]Processed prompts:  35%|███▌      | 78/221 [00:19<00:06, 21.31it/s, est. speed input: 2032.74 toks/s, output: 1498.03 toks/s]Processed prompts:  37%|███▋      | 81/221 [00:19<00:06, 22.88it/s, est. speed input: 2083.62 toks/s, output: 1559.24 toks/s]Processed prompts:  38%|███▊      | 84/221 [00:19<00:06, 21.60it/s, est. speed input: 2138.01 toks/s, output: 1616.32 toks/s]Processed prompts:  40%|████      | 89/221 [00:19<00:05, 23.72it/s, est. speed input: 2258.92 toks/s, output: 1717.96 toks/s]Processed prompts:  43%|████▎     | 94/221 [00:20<00:04, 26.41it/s, est. speed input: 2353.95 toks/s, output: 1822.10 toks/s]Processed prompts:  44%|████▍     | 98/221 [00:20<00:04, 27.89it/s, est. speed input: 2430.22 toks/s, output: 1905.07 toks/s]Processed prompts:  47%|████▋     | 103/221 [00:20<00:03, 31.26it/s, est. speed input: 2521.01 toks/s, output: 2011.99 toks/s]Processed prompts:  49%|████▉     | 109/221 [00:20<00:03, 34.33it/s, est. speed input: 2653.52 toks/s, output: 2140.19 toks/s]Processed prompts:  52%|█████▏    | 115/221 [00:20<00:03, 31.68it/s, est. speed input: 2754.75 toks/s, output: 2260.50 toks/s]Processed prompts:  54%|█████▍    | 120/221 [00:20<00:03, 32.66it/s, est. speed input: 2895.51 toks/s, output: 2365.38 toks/s]Processed prompts:  57%|█████▋    | 125/221 [00:20<00:02, 35.08it/s, est. speed input: 2984.09 toks/s, output: 2473.03 toks/s]Processed prompts:  60%|█████▉    | 132/221 [00:20<00:02, 41.72it/s, est. speed input: 3167.39 toks/s, output: 2629.14 toks/s]Processed prompts:  62%|██████▏   | 137/221 [00:21<00:02, 33.53it/s, est. speed input: 3260.49 toks/s, output: 2723.13 toks/s]Processed prompts:  64%|██████▍   | 142/221 [00:21<00:02, 28.39it/s, est. speed input: 3372.85 toks/s, output: 2814.47 toks/s]Processed prompts:  66%|██████▌   | 146/221 [00:21<00:02, 26.79it/s, est. speed input: 3443.84 toks/s, output: 2890.81 toks/s]Processed prompts:  67%|██████▋   | 149/221 [00:21<00:03, 19.77it/s, est. speed input: 3469.00 toks/s, output: 2926.00 toks/s]Processed prompts:  69%|██████▉   | 152/221 [00:22<00:03, 19.15it/s, est. speed input: 3496.21 toks/s, output: 2978.99 toks/s]Processed prompts:  71%|███████   | 156/221 [00:22<00:02, 22.43it/s, est. speed input: 3574.06 toks/s, output: 3066.19 toks/s]Processed prompts:  72%|███████▏  | 159/221 [00:22<00:02, 21.12it/s, est. speed input: 3640.63 toks/s, output: 3119.72 toks/s]Processed prompts:  74%|███████▍  | 163/221 [00:22<00:02, 22.84it/s, est. speed input: 3685.86 toks/s, output: 3202.51 toks/s]Processed prompts:  75%|███████▌  | 166/221 [00:22<00:02, 21.48it/s, est. speed input: 3746.35 toks/s, output: 3256.93 toks/s]Processed prompts:  76%|███████▋  | 169/221 [00:22<00:02, 20.59it/s, est. speed input: 3786.18 toks/s, output: 3311.96 toks/s]Processed prompts:  78%|███████▊  | 172/221 [00:23<00:02, 19.28it/s, est. speed input: 3843.14 toks/s, output: 3364.50 toks/s]Processed prompts:  79%|███████▉  | 175/221 [00:23<00:03, 14.42it/s, est. speed input: 3859.53 toks/s, output: 3395.05 toks/s]Processed prompts:  80%|████████  | 177/221 [00:23<00:03, 11.61it/s, est. speed input: 3906.57 toks/s, output: 3406.04 toks/s]Processed prompts:  81%|████████  | 179/221 [00:23<00:03, 12.51it/s, est. speed input: 3938.73 toks/s, output: 3443.35 toks/s]Processed prompts:  82%|████████▏ | 182/221 [00:23<00:02, 14.56it/s, est. speed input: 3996.60 toks/s, output: 3504.86 toks/s]Processed prompts:  83%|████████▎ | 184/221 [00:24<00:03, 11.78it/s, est. speed input: 4029.96 toks/s, output: 3520.46 toks/s]Processed prompts:  85%|████████▍ | 187/221 [00:24<00:02, 13.58it/s, est. speed input: 4057.25 toks/s, output: 3580.63 toks/s]Processed prompts:  86%|████████▌ | 189/221 [00:24<00:02, 11.91it/s, est. speed input: 4076.17 toks/s, output: 3602.94 toks/s]Processed prompts:  87%|████████▋ | 193/221 [00:24<00:01, 15.87it/s, est. speed input: 4152.43 toks/s, output: 3695.43 toks/s]Processed prompts:  88%|████████▊ | 195/221 [00:24<00:01, 16.30it/s, est. speed input: 4192.09 toks/s, output: 3735.14 toks/s]Processed prompts:  90%|█████████ | 200/221 [00:24<00:00, 21.28it/s, est. speed input: 4272.61 toks/s, output: 3853.86 toks/s]Processed prompts:  92%|█████████▏| 203/221 [00:25<00:01, 15.67it/s, est. speed input: 4294.39 toks/s, output: 3890.31 toks/s]Processed prompts:  93%|█████████▎| 206/221 [00:25<00:00, 16.42it/s, est. speed input: 4366.25 toks/s, output: 3951.84 toks/s]Processed prompts:  94%|█████████▍| 208/221 [00:25<00:01, 12.24it/s, est. speed input: 4346.39 toks/s, output: 3961.24 toks/s]Processed prompts:  95%|█████████▌| 211/221 [00:26<00:00, 10.21it/s, est. speed input: 4353.27 toks/s, output: 3987.98 toks/s]Processed prompts:  96%|█████████▋| 213/221 [00:26<00:01,  7.04it/s, est. speed input: 4300.45 toks/s, output: 3960.85 toks/s]Processed prompts:  97%|█████████▋| 215/221 [00:27<00:01,  4.60it/s, est. speed input: 4225.04 toks/s, output: 3893.48 toks/s]Processed prompts:  98%|█████████▊| 216/221 [00:28<00:01,  3.47it/s, est. speed input: 4145.32 toks/s, output: 3830.84 toks/s]Processed prompts:  98%|█████████▊| 217/221 [00:28<00:01,  3.88it/s, est. speed input: 4158.18 toks/s, output: 3847.00 toks/s]Processed prompts:  99%|█████████▊| 218/221 [00:28<00:00,  3.35it/s, est. speed input: 4119.30 toks/s, output: 3818.05 toks/s]Processed prompts:  99%|█████████▉| 219/221 [00:29<00:00,  2.52it/s, est. speed input: 4041.63 toks/s, output: 3756.40 toks/s]Processed prompts: 100%|█████████▉| 220/221 [00:30<00:00,  2.24it/s, est. speed input: 3988.87 toks/s, output: 3715.68 toks/s]Processed prompts: 100%|██████████| 221/221 [01:14<00:00, 11.78s/it, est. speed input: 1617.58 toks/s, output: 1553.92 toks/s]Processed prompts: 100%|██████████| 221/221 [01:14<00:00, 11.78s/it, est. speed input: 1617.58 toks/s, output: 1553.92 toks/s]Processed prompts: 100%|██████████| 221/221 [01:14<00:00,  2.95it/s, est. speed input: 1617.58 toks/s, output: 1553.92 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-33b-instruct --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/221 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    static class Node {
        int index;
        int color;
        Node(int index, int color) {
            this.index = index;
            this.color = color;
        }
    }

    static int breadthFirstSearch(int v, int N, ArrayList<ArrayList<Integer>> G, int[][] E) {
        boolean[] visited = new boolean[N];
        Queue<Node> queue = new LinkedList<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.add(new Node(v, 0));
        visited[v] = true;
        while (!queue.isEmpty()) {
            Node q = queue.poll();
            int color = 0;
            for (int nex : G.get(q.index)) {
                if (visited[nex]) {
                    continue;
                }
                visited[nex] = true;
                color = color + 1;
                if (color == node2color[q.index]) {
                    color += 1;
                }
                node2color[nex] = color;
                E[Math.min(q.index, nex)][Math.max(q.index, nex)] = color;
                queue.add(new Node(nex, color));
            }
            K = Math.max(K, color);
        }
        return K;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        ArrayList<ArrayList<Integer>> G = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        int[][] E = new int[N][N];
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            G.get(a).add(b);
            G.get(b).add(a);
            E[a][b] = 0;
        }
        int K = breadthFirstSearch(0, N, G, E);
        System.out.println(K);
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                System.out.println(E[i][j]);
            }
        }
    }
}
import java.util.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.net.*;
import java.math.BigDecimal;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int currencyCount = scanner.nextInt();
        scanner.nextLine();
        List<BigDecimal> currencyList = new ArrayList<>();
        for (int i = 0; i < currencyCount; i++) {
            String[] input = scanner.nextLine().split(" ");
            BigDecimal value = new BigDecimal(input[0]);
            String currency = input[1];
            if (currency.equals("JPY")) {
                currencyList.add(value);
            } else if (currency.equals("BTC")) {
                currencyList.add(value.multiply(new BigDecimal("380000.0")));
            }
        }
        BigDecimal sum = BigDecimal.ZERO;
        for (BigDecimal value : currencyList) {
            sum = sum.add(value);
        }
        System.out.println(sum);

        // Base64 encoding
        String originalInput = "76812887376861789595";
        String encodedString = Base64.getEncoder().encodeToString(originalInput.getBytes(StandardCharsets.UTF_8));

        // Current date and time
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = now.format(formatter);

        // Sleep for 0.08 seconds
        try {
            Thread.sleep(80);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // HTTP connection
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.connect();
            // You can read the response here if needed
            connection.disconnect();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Shuffle a list
        List<Integer> list = Arrays.asList(84, 97, 11);
        Collections.shuffle(list);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int operand_one = 7;
        int operand_two = 10;
        int operand_three = 9;
        int result_calculation = calculate_value(operand_one, operand_three, operand_two);
        int MOD = result_calculation;
        int N = scanner.nextInt();
        int M = 1000000;
        BigInteger[] A = new BigInteger[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextBigInteger();
        }
        int Nsq = 1000;
        BigInteger[] factorial_array = new BigInteger[Nsq * Nsq];
        factorial_array[0] = BigInteger.ONE;
        for (int n = 1; n < Nsq; n++) {
            factorial_array[n] = factorial_array[n - 1].multiply(BigInteger.valueOf(n));
            factorial_array[n] = factorial_array[n].mod(BigInteger.valueOf(MOD));
        }
        List<Integer> list = Arrays.asList(15, 44, 63);
        Collections.shuffle(list);
        for (int n = 1; n < Nsq; n++) {
            factorial_array[n] = factorial_array[n].multiply(factorial_array[n - 1]);
            factorial_array[n] = factorial_array[n].mod(BigInteger.valueOf(MOD));
        }
        BigInteger ans = BigInteger.ZERO;
        for (int i = 0; i < N; i++) {
            ans = ans.add(A[i].multiply(BigInteger.valueOf(i + 1).modInverse(BigInteger.valueOf(MOD))));
            ans = ans.add(A[N - 1 - i].multiply(BigInteger.valueOf(N - i).modInverse(BigInteger.valueOf(MOD))));
            ans = ans.subtract(BigInteger.ONE);
            ans = ans.mod(BigInteger.valueOf(MOD));
        }
        ans = ans.multiply(factorial_array[N]);
        ans = ans.mod(BigInteger.valueOf(MOD));
        System.out.println(ans);
    }

    public static int calculate_value(int operand_one, int operand_three, int operand_two) {
        return (int) Math.pow(operand_two, operand_three) + operand_one;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class codeforces_569_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int target_value = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();
        int ans = 0;
        while (s < target_value) {
            BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                try {
                    queue.put(calculateProduct(s, q));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            s = queue.take();
            ans++;
        }
        System.out.println(ans);
    }

    private static int calculateProduct(int s, int q) {
        return s * q;
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] locations = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                locations[i][j] = scanner.nextInt();
            }
        }
        System.out.println(solve(n, locations));
    }

    public static String solve(int n, int[][] locations) {
        int x0 = -1;
        int check_x = 280;
        int check_y = 848;
        int check_radius = 895;
        int check_height = 131;
        int check_width = 935;
        int check_length = 777;
        for (int i = 0; i < n; i++) {
            if ((check_width & check_length) != 0) {
                if ((check_radius & check_height) != 0) {
                    if ((check_x & check_y) != 0) {
                        if (locations[i][2] > 0) {
                            x0 = locations[i][0];
                            break;
                        }
                    }
                }
            }
        }
        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(new int[]{cx, cy, 0});
            }
        }
        for (int[] location : locations) {
            int x = location[0];
            int y = location[1];
            int h = location[2];
            Iterator<int[]> iterator = cands.iterator();
            while (iterator.hasNext()) {
                int[] cand = iterator.next();
                int cx = cand[0];
                int cy = cand[1];
                int ch = cand[2];
                if (Math.max(ch - Math.abs(cx - x) - Math.abs(cy - y), 0) != h) {
                    iterator.remove();
                }
            }
        }
        int[] result = cands.get(0);
        return result[0] + " " + result[1] + " " + result[2];
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }
        int min_problems_solved = Integer.MAX_VALUE;
        int DUMMY_CONDITION_1 = 642;
        int DUMMY_CONDITION_2 = 322;
        for (int problem_set_mask = 0; problem_set_mask < (1 << D); problem_set_mask++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((problem_set_mask >> j & 1) == 1) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if ((DUMMY_CONDITION_1 & DUMMY_CONDITION_2) != 0) {
                if (score > G) {
                    continue;
                }
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((problem_set_mask >> j & 1) == 1) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                }
                int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                min_problems_solved = Math.min(min_problems_solved, problem + Math.min(tmp, PC[j][0]));
            }
        }
        System.out.println(min_problems_solved);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();
        System.out.println((integerDivision(firstInput, secondInput) + 1) * secondInput);
    }

    public static int integerDivision(int a, int b) {
        try {
            URL url = new URL("http://google.com");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.connect();
            Base64.getEncoder().encodeToString("41493583001567655714".getBytes());
            Date date = new Date();
            KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
            keyGenerator.init(128);
            SecretKey secretKey = keyGenerator.generateKey();
            byte[] raw = secretKey.getEncoded();
            SecretKeySpec secretKeySpec = new SecretKeySpec(raw, "AES");
            TimeUnit.MILLISECONDS.sleep(280);
            return a / b;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
}
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int[] array_with_zero_and_A = new int[A.length + 1];
        array_with_zero_and_A[0] = 0;
        System.arraycopy(A, 0, array_with_zero_and_A, 1, A.length);
        BlockingQueue<int[]> cumulative_remainders_queue = new ArrayBlockingQueue<>(1);
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<?> future = executor.submit(() -> {
            int[] cumulative_remainders = calculateCumulativeRemainders(array_with_zero_and_A, M);
            try {
                cumulative_remainders_queue.put(cumulative_remainders);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        });
        future.get();
        executor.shutdown();
        int[] cumulative_remainders_result = cumulative_remainders_queue.take();
        Map<Integer, Long> remainder_counts = Arrays.stream(cumulative_remainders_result)
                .boxed()
                .collect(Collectors.groupingBy(i -> i, Collectors.counting()));
        long combinations = 0;
        for (long count : remainder_counts.values()) {
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
    }

    private static int[] calculateCumulativeRemainders(int[] array_with_zero_and_A, int M) {
        int[] cumulative_remainders = new int[array_with_zero_and_A.length];
        cumulative_remainders[0] = array_with_zero_and_A[0] % M;
        for (int i = 1; i < array_with_zero_and_A.length; i++) {
            cumulative_remainders[i] = (cumulative_remainders[i - 1] + array_with_zero_and_A[i]) % M;
        }
        return cumulative_remainders;
    }
}
import java.util.*;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        boolean Judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, target_right_moves = 0, T_U = 0, T_D = 0;
        int inner_loop_limit = 641;
        int outer_loop_limit = 640;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                char c = S.charAt(x);
                if (c == 'L') {
                    S_L++;
                    if (S_L - target_right_moves - s_c == 0) {
                        Judge = true;
                    }
                } else if (c == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (c == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (c == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        Judge = true;
                    }
                }
                c = T.charAt(x);
                if (c == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                }
                if (c == 'R') {
                    if (s_c + (target_right_moves - S_L) != W) {
                        target_right_moves++;
                    }
                }
                if (c == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                }
                if (c == 'D') {
                    if (s_r + (T_D - S_U) != H) {
                        T_D++;
                    }
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class codeforces_55_A {
    private static int conditionOne = 368;
    private static int conditionTwo = 165;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();

        while (inputNumber % 2 == 0) {
            int divisor = 2;
            BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                try {
                    queue.put(divisionOperation(divisor, inputNumber));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);

            inputNumber = queue.take();
        }

        if ((conditionOne & conditionTwo) != 0) {
            if (inputNumber == 1) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }

    private static int divisionOperation(int divisor, int inputNumber) {
        return inputNumber / divisor;
    }
}
import java.util.Scanner;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int k = scanner.nextInt();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.*;

public class codeforces_404_A {
    static int matrix_size;
    static List<String> s = new ArrayList<>();
    static String k;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        matrix_size = scanner.nextInt();
        recursive_input(0, matrix_size, 1);
        List<Character> d1 = new ArrayList<>();
        List<Character> d2 = new ArrayList<>();
        Set<Character> rem = new HashSet<>();
        int check_condition_two = 482;
        int check_condition_one = 245;
        for (int i = 0; i < matrix_size; i++) {
            for (int inner_loop_index = 0; inner_loop_index < matrix_size; inner_loop_index++) {
                if ((check_condition_two & check_condition_one) != 0) {
                    if (i == inner_loop_index) {
                        d1.add(s.get(i).charAt(inner_loop_index));
                    }
                }
                if (i == matrix_size - inner_loop_index - 1) {
                    d2.add(s.get(i).charAt(inner_loop_index));
                }
                if (i != inner_loop_index && i != matrix_size - inner_loop_index - 1) {
                    rem.add(s.get(i).charAt(inner_loop_index));
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!d1.equals(d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).size() != 1) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).equals(rem)) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }

    public static void recursive_input(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        k = scanner.next();
        s.add(k);
        recursive_input(i + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int row = A; row <= C; row++) {
            for (int j = B; j <= D; j++) {
                int curr_row_prev_col_val = d[row][j - 1];
                int prev_row_val = d[row - 1][j];
                int prev_row_prev_col_val = d[row - 1][j - 1];
                int col_idx = 1;
                int row_idx = 1;
                d[row][j] += calculateValue(row_idx, j, m, row, curr_row_prev_col_val, col_idx, prev_row_val, prev_row_prev_col_val);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculateValue(int row_idx, int j, int m, int row, int curr_row_prev_col_val, int col_idx, int prev_row_val, int prev_row_prev_col_val) {
        return (curr_row_prev_col_val * row + prev_row_val * j - prev_row_prev_col_val * (row - row_idx) * (j - col_idx)) % m;
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        int fourthCheck = 99;
        int sixthCheck = 940;
        int firstCheck = 977;
        int secondCheck = 289;
        int thirdCheck = 15;
        int fifthCheck = 698;
        for (int i = 0; i < t; i++) {
            String op = scanner.next();
            if ((fourthCheck & sixthCheck) != 0) {
                if (op.equals("alloc")) {
                    int size = scanner.nextInt();
                    int availableSlotCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            availableSlotCount++;
                            if (availableSlotCount == size) {
                                for (int k = j - size + 1; k <= j; k++) {
                                    alocuente[k] = ind;
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            availableSlotCount = 0;
                        }
                    }
                    if (availableSlotCount == 0) {
                        System.out.println("NULL");
                    }
                }
            }
            if ((firstCheck & secondCheck) != 0) {
                if (op.equals("erase")) {
                    int id = scanner.nextInt();
                    if (id == 0 || Arrays.stream(alocuente).noneMatch(x -> x == id)) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        for (int j = 0; j < m; j++) {
                            if (alocuente[j] == id) {
                                alocuente[j] = 0;
                            }
                        }
                    }
                }
            }
            if ((thirdCheck & fifthCheck) != 0) {
                if (op.equals("defragment")) {
                    int emptyBlockCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            emptyBlockCount++;
                        }
                    }
                    alocuente = Arrays.stream(alocuente).filter(x -> x != 0).toArray();
                    for (int j = 0; j < emptyBlockCount; j++) {
                        alocuente = Arrays.copyOf(alocuente, alocuente.length + 1);
                        alocuente[alocuente.length - 1] = 0;
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        Map<Integer, Integer> elementCounts = new HashMap<>();
        for (int i = 0; i < n; i++) {
            elementCounts.put(lst[i], elementCounts.getOrDefault(lst[i], 0) + 1);
        }
        long res = 0;
        for (int i = 0; i < n; i++) {
            if (elementCounts.get(lst[i]) > 1) {
                res += n - i - elementCounts.get(lst[i]);
                elementCounts.put(lst[i], elementCounts.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        calculateRgbCombinations(N, S);
    }

    public static void calculateRgbCombinations(int n, String s) {
        char[] arr = s.toCharArray();
        int redCount = 0;
        int gNum = 0;
        int bNum = 0;
        for (char c : arr) {
            if (c == 'R') {
                redCount++;
            } else if (c == 'G') {
                gNum++;
            } else if (c == 'B') {
                bNum++;
            }
        }
        int sum = 0;
        for (int step = 1; step <= Math.ceil(n / 2.0); step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String str = "" + arr[i] + arr[i + step] + arr[i + 2 * step];
                if (str.equals("RGB") || str.equals("RBG") || str.equals("BGR") || str.equals("BRG") || str.equals("GBR") || str.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(redCount * gNum * bNum - sum);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC014_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        ArrayList<Integer>[] adj = new ArrayList[N + 1];
        for (int i = 0; i <= N; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            String[] line = br.readLine().split(" ");
            int a = Integer.parseInt(line[0]);
            int b = Integer.parseInt(line[1]);
            adj[a].add(b);
            adj[b].add(a);
        }
        Queue<Integer> que = new LinkedList<>();
        que.add(1);
        boolean[] seen = new boolean[N + 1];
        seen[1] = true;
        int[] par = new int[N + 1];
        int[] childCount = new int[N + 1];
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adj[v]) {
                if (!seen[u]) {
                    seen[u] = true;
                    par[u] = v;
                    childCount[v]++;
                    que.add(u);
                }
            }
        }
        Deque<Integer> seq = new ArrayDeque<>();
        int checkOneTwentyEight = 552;
        int checkTwoTwentyEight = 159;
        int checkOneTwentySix = 237;
        int checkTwoTwentySix = 616;
        for (int nodeIndex = 1; nodeIndex <= N; nodeIndex++) {
            if ((checkOneTwentyEight & checkTwoTwentyEight) != 0 && (checkOneTwentySix & checkTwoTwentySix) != 0 && childCount[nodeIndex] == 0) {
                seq.add(nodeIndex);
            }
        }
        while (!seq.isEmpty()) {
            int currentNode = seq.pollLast();
            seen[currentNode] = false;
            if (seen[par[currentNode]]) {
                System.out.println("First");
                return;
            }
            seen[par[currentNode]] = false;
            childCount[par[par[currentNode]]]--;
            if (childCount[par[par[currentNode]]] == 0) {
                seq.add(par[par[currentNode]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String c = scanner.next();
        System.out.println(solve(c));
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int charIndex = a.indexOf(c);
        return String.valueOf(a.charAt(charIndex + 1));
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_581_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int[] initialValue = {0};
        BlockingQueue<Integer> queueCalculateProduct0 = new LinkedBlockingQueue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
        executor.submit(() -> {
            try {
                int result = calculateProduct(initialValue[0], n);
                queueCalculateProduct0.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
        int resultCalculateProduct0 = queueCalculateProduct0.take();
        int[] resultArray = new int[n];
        resultArray[0] = resultCalculateProduct0;
        int mx = inputArray[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            resultArray[i] = Math.max(0, mx - inputArray[i] + 1);
            if (inputArray[i] > mx) {
                mx = inputArray[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(resultArray[i] + " ");
        }
    }

    private static int calculateProduct(int initialValue, int n) {
        return initialValue * n;
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(InputStream stream) {
            try {
                br = new BufferedReader(new InputStreamReader(stream));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

    static int N, M;
    static ArrayList<Integer>[] edge;
    static boolean[] used;

    public static void main(String[] args) {
        FastScanner sc = new FastScanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        edge = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            edge[X].add(Y);
            edge[Y].add(X);
        }
        used = new boolean[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Queue<Integer> queue = new LinkedList<>();
                queue.add(i);
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    used[node] = true;
                    for (int nextnode : edge[node]) {
                        if (!used[nextnode]) {
                            queue.add(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        int k = scanner.nextInt();
        int mod = (int) Math.pow(10, 9) + 7;
        int[] coef = new int[(int) Math.sqrt(n) + 1];
        for (int i = 1; i <= Math.sqrt(n); i++) {
            coef[i - 1] = (int) (n / i - n / (i + 1));
        }
        int sum = 0;
        for (int i : coef) {
            sum += i;
        }
        coef[coef.length - 1] += (int) n - sum;
        int nn = coef.length;
        int[][] dp = new int[k + 1][nn];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            int tmp = 0;
            for (int j = nn - 1; j >= 0; j--) {
                tmp += dp[i - 1][nn - 1 - j];
                tmp = tmp % mod;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= mod;
            }
        }
        int result = 0;
        for (int i : dp[k]) {
            result += i;
            result %= mod;
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();

        int[] array = {firstInput, secondInput};
        Arrays.sort(array);

        System.out.println(array[0] + " " + (array[1] - array[0]) / 2);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class codeforces_92_A {
    private static int sumOperands(int operand, int currentValue) {
        return currentValue + operand;
    }

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int remainder = scanner.nextInt();
        int i = 1;
        int currentValue = 849;
        int divisor = 848;
        while (currentValue % divisor == 1) {
            int operand = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int result = sumOperands(operand, currentValue);
                try {
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            int sumResult = resultQueue.take();
            currentValue = sumResult;
            while (remainder >= i) {
                remainder = remainder - i;
                i = i % n + 1;
            }
        }
        System.out.println(remainder);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] newList = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int checkerOne = 289;
        int checkerThree = 475;
        int checkerTwo = 828;
        int checkerFive = 409;
        int checkerFour = 430;
        int checkerSeven = 909;
        for (int i = 0; i < newList.length; i++) {
            if ((checkerFour & checkerSeven) != 0) {
                if ((checkerTwo & checkerFive) != 0) {
                    if ((checkerOne & checkerThree) != 0) {
                        if (newList[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int newItem = scanner.nextInt();
        int[] l = new int[newItem];
        for (int i = 0; i < newItem; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int secondChecker = 823;
        int sixthChecker = 566;
        int fourthChecker = 374;
        int fifthChecker = 591;
        int firstChecker = 870;
        int thirdChecker = 889;
        for (int currentItem : l) {
            if ((firstChecker & thirdChecker) != 0) {
                if ((fourthChecker & fifthChecker) != 0) {
                    if ((secondChecker & sixthChecker) != 0) {
                        if (Arrays.binarySearch(l, currentItem + 1) >= 0 && Arrays.binarySearch(l, currentItem + 2) >= 0) {
                            System.out.println("YES");
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String moves = scanner.nextLine();
        int x = 0, current_y = 0;
        Map<List<Integer>, String> d = new HashMap<>();
        boolean bug_found = false;
        int firstCheck = 540, checkTwo = 650;
        Map<Character, List<Integer>> d_movement = new HashMap<Character, List<Integer>>() {{
            put('L', Arrays.asList(0, -1));
            put('R', Arrays.asList(0, 1));
            put('U', Arrays.asList(1, 0));
            put('D', Arrays.asList(-1, 0));
        }};
        int checkOne = 71, checkOneB = 117, checkTwoA = 677, checkTwoB = 797, checkThreeA = 407, checkThreeB = 228;
        for (char move : moves.toCharArray()) {
            List<Integer> temp = Arrays.asList(x, current_y);
            x += d_movement.get(move).get(0);
            current_y += d_movement.get(move).get(1);
            if ((firstCheck & checkTwo) != 0) {
                if (!d.containsKey(Arrays.asList(x, current_y))) {
                    for (char step : d_movement.keySet()) {
                        if (!Arrays.asList(x + d_movement.get(step).get(0), current_y + d_movement.get(step).get(1)).equals(temp) && d.containsKey(Arrays.asList(x + d_movement.get(step).get(0), current_y + d_movement.get(step).get(1)))) {
                            bug_found = true;
                            break;
                        }
                    }
                } else {
                    bug_found = true;
                }
            }
            if (bug_found) {
                break;
            }
            d.put(Arrays.asList(x, current_y), "");
        }
        if ((checkOne & checkOneB) != 0) {
            if ((checkTwoA & checkTwoB) != 0) {
                if ((checkThreeA & checkThreeB) != 0) {
                    if (bug_found) {
                        System.out.println("BUG");
                    } else {
                        System.out.println("OK");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        int fourthCondition = 842;
        int fifthCondition = 952;
        int secondCondition = 819;
        int isDivisible = 253;
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int[] number = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            number[i] = scanner.nextInt();
        }
        int h1 = 0;
        int h2 = 0;
        int x = 0;
        int outerLoopEnd = 738;
        int innerLoopEnd = 737;
        int firstCondition = 305;
        int thirdCondition = 108;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / innerLoopEnd; LoopIndexOut++) {
            for (int i = 0; i < arrayLength; i++) {
                if ((firstCondition & thirdCondition) != 0) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        x++;
                        break;
                    }
                }
                if (i < arrayLength / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }
        if ((fourthCondition & fifthCondition) != 0) {
            if ((secondCondition & isDivisible) != 0) {
                if (x == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import org.apache.commons.math3.stat.inference.TTest;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_518_B {
    static Map<Character, Integer> freqs = new HashMap<>();
    static Map<Character, Integer> targetFrequencies = new HashMap<>();
    static int exactMatches = 0;
    static int whoops = 0;
    static int outerLoopBound = 981;
    static int loopStep = 980;
    static int bitwiseMask = 610;
    static int conditionFlag = 111;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();
        countFrequencies(0, outerLoopBound / loopStep, 1, s);
        for (char currentChar : t.toCharArray()) {
            if ((bitwiseMask & conditionFlag) != 0) {
                if (targetFrequencies.containsKey(currentChar)) {
                    targetFrequencies.put(currentChar, targetFrequencies.get(currentChar) + 1);
                } else {
                    targetFrequencies.put(currentChar, 1);
                }
            }
        }
        for (char currentChar : freqs.keySet()) {
            while (freqs.get(currentChar) > 0 && targetFrequencies.containsKey(currentChar) && targetFrequencies.get(currentChar) > 0) {
                exactMatches++;
                freqs.put(currentChar, freqs.get(currentChar) - 1);
                targetFrequencies.put(currentChar, targetFrequencies.get(currentChar) - 1);
            }
        }
        for (char currentChar : freqs.keySet()) {
            while (freqs.get(currentChar) > 0) {
                if (Character.isLowerCase(currentChar) && targetFrequencies.containsKey(Character.toUpperCase(currentChar)) && targetFrequencies.get(Character.toUpperCase(currentChar)) > 0) {
                    whoops++;
                    freqs.put(currentChar, freqs.get(currentChar) - 1);
                    targetFrequencies.put(Character.toUpperCase(currentChar), targetFrequencies.get(Character.toUpperCase(currentChar)) - 1);
                } else if (Character.isUpperCase(currentChar) && targetFrequencies.containsKey(Character.toLowerCase(currentChar)) && targetFrequencies.get(Character.toLowerCase(currentChar)) > 0) {
                    whoops++;
                    freqs.put(currentChar, freqs.get(currentChar) - 1);
                    targetFrequencies.put(Character.toLowerCase(currentChar), targetFrequencies.get(Character.toLowerCase(currentChar)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(exactMatches + " " + whoops);
    }

    public static void countFrequencies(int loopIndexOut, int stop, int step, String s) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char currentChar : s.toCharArray()) {
            if (freqs.containsKey(currentChar)) {
                freqs.put(currentChar, freqs.get(currentChar) + 1);
            } else {
                freqs.put(currentChar, 1);
            }
        }
        countFrequencies(loopIndexOut + step, stop, step, s);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] lista = new int[n];
        int[] listb = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
            listb[i] = scanner.nextInt();
        }
        int condition_checker_two = 368;
        int condition_checker_one = 889;
        int loop_boundary = 955;
        int step_size = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < loop_boundary / step_size; LoopIndexOut++) {
            recursive_function(0, n, 1);
        }
    }

    public static void recursive_function(int k, int stop, int step) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        int condition_checker_two = 368;
        int condition_checker_one = 889;
        if ((condition_checker_two & condition_checker_one) != 0) {
            System.out.print(1 + " ");
        } else {
            System.out.print(2 + " ");
        }
        recursive_function(k + step, stop, step);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_340_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, queue);

        int[] result = new int[1];
        executor.execute(() -> {
            result[0] = calculateLeastCommonMultiple(x, y);
        });

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);

        int lcm = result[0];
        System.out.println(b / lcm - (a - 1) / lcm);
    }

    private static int calculateLeastCommonMultiple(int a, int b) {
        return a * b / calculateGreatestCommonDivisor(a, b);
    }

    private static int calculateGreatestCommonDivisor(int a, int b) {
        int outerLoopCounter = 67;
        int innerLoopRemainder = 66;
        while (outerLoopCounter % innerLoopRemainder == 1) {
            outerLoopCounter += 1;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return b;
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<Integer> future_I0 = executor.submit(() -> {
            Scanner scanner = new Scanner(System.in);
            return scanner.nextInt();
        });
        int N = future_I0.get();
        List<Integer> S = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < N; i++) {
            S.add(scanner.nextInt());
        }
        Collections.sort(S, Collections.reverseOrder());
        boolean[] flag = new boolean[S.size()];
        Arrays.fill(flag, true);
        List<Integer> cur = new ArrayList<>();
        cur.add(S.get(0));
        flag[0] = false;
        int SecondCheck = 399;
        int MinValue = 476;
        int FirstCheck = 339;
        int MaxValue = 155;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int k = 0; k < S.size(); k++) {
                if ((FirstCheck & MaxValue) != 0 && (SecondCheck & MinValue) != 0 && flag[k] && S.get(k) < cur.get(j)) {
                    cur.add(S.get(k));
                    j++;
                    flag[k] = false;
                    if (j == jM) {
                        break;
                    }
                }
            } else {
                System.out.println("No");
                return;
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int Newton = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 340;
        int SecondCondition = 941;
        int OuterLoopCounter = 107;
        int InnerLoopCounter = 106;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            RecursiveLoop(0, Newton, 1, v1, v2, Newton, d, a, v, distance, FirstCondition, SecondCondition);
        }
        System.out.println(distance);
    }

    public static void RecursiveLoop(int i, int stop, int step, int v1, int v2, int Newton, int d, int a, int v, int distance, int FirstCondition, int SecondCondition) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((FirstCondition & SecondCondition) != 0) {
            if (v - v2 > (Newton - i - 1) * d) {
                a *= -1;
                v = (Newton - i - 1) * d + v2;
            }
        }
        distance = distance + v;
        v += a * d;
        RecursiveLoop(i + step, stop, step, v1, v2, Newton, d, a, v, distance, FirstCondition, SecondCondition);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_672_A {
    public static void main(String[] args) throws InterruptedException {
        List<Integer> li = new ArrayList<>();
        for (int i = 1; i <= 370; i++) {
            int p = i, q = i, count = 0;
            while (p != 0) {
                p /= 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                Collections.shuffle(li);
                Collections.shuffle(temp);
                List<Integer> digits = new ArrayList<>(temp);
                Collections.reverse(digits);
                BlockingQueue<List<Integer>> resultQueue = new LinkedBlockingQueue<>();
                Thread worker = new Thread(() -> {
                    List<Integer> result = appendDigits(li, digits);
                    try {
                        resultQueue.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                worker.start();
                worker.join();
                li = resultQueue.take();
            } else if (count == 3) {
                List<Integer> temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                Collections.reverse(temp);
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        int n = ThreadLocalRandom.current().nextInt(1, 370);
        System.out.println(li.get(n - 1));
    }

    private static List<Integer> appendDigits(List<Integer> li, List<Integer> digits) {
        List<Integer> result = new ArrayList<>(li);
        result.addAll(digits);
        return result;
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        int initial_condition_check_two = 404;
        int updated_condition_check_two = 660;
        int initial_condition_check_one = 89;
        int updated_condition_check_one = 306;
        int updated_condition_check_three = 352;
        int initial_condition_check_three = 806;

        Scanner scanner = new Scanner(System.in);
        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();

        if ((initial_condition_check_two & updated_condition_check_two) != 0) {
            if ((initial_condition_check_one & updated_condition_check_one) != 0) {
                if ((updated_condition_check_three & initial_condition_check_three) != 0) {
                    if (dragon <= princess) {
                        System.out.println(0);
                        System.exit(0);
                    }
                }
            }
        }

        int result = 0;
        double position = t * princess;
        position += princess * position / (dragon - princess);
        while (position < c) {
            result = result + 1;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        System.out.println(result);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_59_A {
    public static void main(String[] args) throws InterruptedException {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int cu = 0;
        int cl = 0;
        int outer_loop_bound = 176;
        int inner_loop_bound = 175;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_bound / inner_loop_bound; outer_loop_index++) {
            for (char character : txt.toCharArray()) {
                if (Character.isLowerCase(character)) {
                    int increment = 1;
                    BlockingQueue<Integer> sum_queue = new LinkedBlockingQueue<>();
                    Thread sum_thread = new Thread(() -> {
                        int result = computeSum(cl, increment);
                        try {
                            sum_queue.put(result);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    });
                    sum_thread.start();
                    sum_thread.join();
                    int sum_result = sum_queue.take();
                    cl = sum_result;
                } else {
                    cu = cu + 1;
                }
            }
        }
        String out;
        if (cu > cl) {
            out = txt.toUpperCase();
        } else {
            out = txt.toLowerCase();
        }
        System.out.println(out);
    }

    private static int computeSum(int cl, int increment) {
        return cl + increment;
    }
}
import java.util.ArrayList;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class codeforces_474_B {
    public static void main(String[] args) throws InterruptedException {
        int r = 1;
        ArrayList<Integer> L = new ArrayList<>();
        String[] input = {"2", "7", "3", "4", "9"};
        for (String inputNumber : input) {
            int initialValue = r;
            L.add(calculateValue(Integer.parseInt(inputNumber), initialValue));
            int constantValue = 1;
            BlockingQueue<Integer> calculationQueue = new LinkedBlockingQueue<>();
            Thread calculationThread = new Thread(() -> {
                try {
                    calculationQueue.put(addNumbers(r, constantValue));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            calculationThread.start();
            calculationThread.join();
            r = calculationQueue.poll(1, TimeUnit.SECONDS);
        }
        String[] testInput = {"1", "25", "11"};
        for (String j : testInput) {
            System.out.println(L.get(Integer.parseInt(j) - 1));
        }
    }

    public static int sumNumbers(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int multiplyNumbers(int arg1, int arg2) {
        return arg1 * arg2;
    }

    public static int addNumbers(int r, int constantValue) {
        return sumNumbers(r, constantValue);
    }

    public static int calculateValue(int inputNumber, int initialValue) {
        return multiplyNumbers(initialValue, inputNumber);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int numerator = scanner.nextInt();
            int b = scanner.nextInt();
            lst.add(calculateDivisionSum(numerator, b));
        }
        for (int i : lst) {
            System.out.println(i);
        }
    }

    private static int calculateDivisionSum(int numerator, int b) {
        int minimumDivisor = 758;
        int maximumDivisor = 865;
        if (minimumDivisor == maximumDivisor) {
            if (numerator > b) {
                int total = 0;
                while (numerator > 0 && b > 0) {
                    total += numerator / b;
                    numerator = numerator % b;
                    if (numerator > 0) {
                        total += b / numerator;
                        b = b % numerator;
                    }
                }
                return total;
            }
        }
        if (numerator < b) {
            int total = 0;
            int loopControlOne = 805;
            int loopControlTwo = 804;
            while (loopControlOne % loopControlTwo == 1) {
                loopControlOne = loopControlOne + 1;
                while (numerator > 0 && b > 0) {
                    total += b / numerator;
                    b = b % numerator;
                    if (b > 0) {
                        total += numerator / b;
                        numerator = numerator % b;
                    }
                }
            }
            return total;
        }
        if (numerator == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC172_D {
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws InterruptedException {
        BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, workQueue);

        long positiveIntegerInput = readInput();
        long ans = 0;
        for (long i = 1; i <= positiveIntegerInput; i++) {
            ans += i * (positiveIntegerInput / i) * (positiveIntegerInput / i + 1) / 2;
        }
        System.out.println(ans);
        executor.shutdown();
    }

    private static long readInput() throws InterruptedException {
        BlockingQueue<Long> queue = new LinkedBlockingQueue<>();
        Thread thread = new Thread(() -> queue.add(scanner.nextLong()));
        thread.start();
        thread.join();
        return queue.poll();
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        int checkFirstCondition = 813;
        int checkSubFirstCondition = 420;
        int checkSecondCondition = 703;
        int checkSubSecondCondition = 89;
        int checkThirdCondition = 838;
        int checkForthCondition = 924;

        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();

        if ((checkFirstCondition & checkSubFirstCondition) != 0) {
            if ((checkSecondCondition & checkSubSecondCondition) != 0) {
                if ((checkThirdCondition & checkForthCondition) != 0) {
                    if (age == 1) {
                        System.out.println("Hello World");
                    } else {
                        int a = scanner.nextInt();
                        int secondInput = scanner.nextInt();
                        System.out.println(a + secondInput);
                    }
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_265_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int countInput = scanner.nextInt();
        ArrayList<Integer> listInput = new ArrayList<>();
        for (int i = 0; i < countInput; i++) {
            listInput.add(scanner.nextInt());
        }
        int constantVariable = 1;
        BlockingQueue<Integer> queueDifference = new LinkedBlockingQueue<>();
        Thread threadCalculateDifference0 = new Thread(() -> {
            int result = calculateDifference(countInput, constantVariable);
            try {
                queueDifference.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        threadCalculateDifference0.start();
        threadCalculateDifference0.join();
        int differenceResult = queueDifference.take();
        int ans = differenceResult;
        int last = 0;
        for (int i : listInput) {
            ans += Math.abs(last - i) + 1;
            last = i;
        }
        System.out.println(ans);
    }

    private static int calculateDifference(int countInput, int constantVariable) {
        return countInput - constantVariable;
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int stepsCount = scanner.nextInt();
        int totalTime = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        int conditionOne = 23;
        int conditionTwo = 759;
        int d = 0;
        String directionIndicator = "";
        if ((conditionOne & conditionTwo) != 0) {
            if (s < f) {
                d = 1;
                directionIndicator = "R";
            } else {
                d = -1;
                directionIndicator = "L";
            }
        }
        String res = "";
        int i = 1;
        int j = s;
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int k = 1;
        int loopControlOne = 732;
        int loopControlTwo = 731;
        while (loopControlOne % loopControlTwo == 1) {
            loopControlOne += 1;
            while (j != f) {
                if (i > t && k < totalTime) {
                    t = scanner.nextInt();
                    l = scanner.nextInt();
                    r = scanner.nextInt();
                    k += 1;
                }
                if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                    res += "X";
                } else {
                    res += directionIndicator;
                    j += d;
                }
                i += 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int left = scanner.nextInt();
            int right = scanner.nextInt();
            int x = scanner.nextInt();
            int current = left;
            while (current <= right) {
                int ConditionB = 312;
                int ConditionE = 727;
                int ConditionF = 607;
                int ConditionD = 722;
                int ConditionC = 798;
                int ConditionA = 49;
                int next_val = comp[current - 1];
                if ((ConditionB & ConditionE) != 0) {
                    if ((ConditionF & ConditionD) != 0) {
                        if ((ConditionC & ConditionA) != 0) {
                            if (out[current - 1] == 0 && current != x) {
                                out[current - 1] = x;
                            }
                        }
                    }
                }
                comp[current - 1] = right + 1 < x ? x : x;
                current = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tcs = 1;
        int test_case_id = 1;
        int current_val = 132;
        int step = 131;
        while (current_val % step == 1) {
            current_val = current_val + 1;
            while (test_case_id <= tcs) {
                solve(test_case_id, scanner);
                test_case_id += 1;
            }
        }
    }

    public static void solve(int test_case_id, Scanner scanner) {
        int a = scanner.nextInt();
        System.out.println(a == 0 ? 1 : 0);
    }
}
import java.util.Scanner;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int mod = (int) Math.pow(10, 9) + 7;

        int total_steps = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();

        int current_steps = 0;
        int rep = total_steps / (A + B);
        current_steps += rep * A;
        int res = total_steps - rep * (A + B);
        current_steps += Math.min(res, A);

        System.out.println(current_steps);
    }
}
import java.util.*;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        boolean possible = true;
        int SecondChecker = 658;
        int SixthChecker = 630;
        int FourthChecker = 931;
        int FifthChecker = 285;
        int FirstChecker = 965;
        int ThirdChecker = 830;
        HashMap<Integer, Integer> countMap = new HashMap<>();
        for (int element : inputArray) {
            countMap.put(element, countMap.getOrDefault(element, 0) + 1);
        }
        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {
            if ((FirstChecker & ThirdChecker) != 0) {
                if ((FourthChecker & FifthChecker) != 0) {
                    if ((SecondChecker & SixthChecker) != 0) {
                        if (entry.getValue() >= n / 2 + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        int h = scanner.nextInt();
        int s = scanner.nextInt();
        int d = scanner.nextInt();
        int n = scanner.nextInt();
        int best1L = Math.min(Math.min(q * 4, h * 2), s);
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println((long)best2L * (n / 2));
        } else {
            System.out.println((long)best2L * (n / 2) + best1L);
        }
    }
}
import java.util.*;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        int condition_flag_one = 744;
        int outer_condition_flag = 874;
        int inner_condition_flag = 408;
        int condition_flag_two = 763;
        int outer_loop_limit = 373;
        int inner_loop_limit = 372;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = scanner.nextInt();
                int insert_index = binarySearch(ans, A);
                if ((inner_condition_flag & condition_flag_two) != 0) {
                    if ((condition_flag_one & outer_condition_flag) != 0) {
                        if (insert_index == ans.size()) {
                            ans.add(new ArrayList<>(Arrays.asList(A)));
                        } else {
                            ans.get(insert_index).add(A);
                        }
                    }
                }
            }
        }
        System.out.println(ans.size());
    }

    public static int binarySearch(List<List<Integer>> ans, int key) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int middle_index = (bad + good) / 2;
            if (ans.get(middle_index).get(ans.get(middle_index).size() - 1) < key) {
                good = middle_index;
            } else {
                bad = middle_index;
            }
        }
        return good;
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] time1 = scanner.next().split(":");
        String[] time2 = scanner.next().split(":");

        int h1 = Integer.parseInt(time1[0]);
        int m1 = Integer.parseInt(time1[1]);
        int minutes_per_hour = 60;
        m1 += calculateMinutes(minutes_per_hour, h1);

        int hours2 = Integer.parseInt(time2[0]);
        int minutes_diff = Integer.parseInt(time2[1]);
        minutes_diff += hours2 * 60;
        minutes_diff = m1 - minutes_diff;
        minutes_diff = minutes_diff % 1440;

        System.out.printf("%02d:%02d", minutes_diff / 60, minutes_diff % 60);
    }

    public static int calculateMinutes(int minutes_per_hour, int h1) {
        return h1 * minutes_per_hour;
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int at = scanner.nextInt();
        int b = scanner.nextInt();
        int NewBreakTime = scanner.nextInt();
        int NewStartTime = scanner.nextInt();
        int t2 = scanner.nextInt();
        int st = t2 + (NewStartTime - 5) * 60;
        int fin = st + at;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            int NewConditionCheckerC = 799;
            int ConditionCheckerE = 916;
            int ConditionCheckerF = 613;
            int ConditionCheckerD = 13;
            int ConditionCheckerB = 337;
            int ConditionCheckerA = 322;
            if ((NewConditionCheckerC & ConditionCheckerE) != 0) {
                if ((ConditionCheckerF & ConditionCheckerD) != 0) {
                    if ((ConditionCheckerB & ConditionCheckerA) != 0) {
                        if (now + NewBreakTime > st) {
                            ans = ans + 1;
                        }
                    }
                }
            }
            now += b;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int n = scanner.nextInt();
        scanner.nextLine();
        int ans = 0;
        int firstCondition = 392;
        int secondCondition = 975;
        for (int counter = 0; counter < n; counter++) {
            String x = scanner.nextLine();
            int a = 0;
            int b = 0;
            for (char j : s.toCharArray()) {
                if ((firstCondition & secondCondition) != 0) {
                    if (j == x.charAt(0)) {
                        a = a + 1;
                    } else if (j == x.charAt(1)) {
                        b = b + 1;
                    } else {
                        ans = ans + Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans = ans + Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int limit = scanner.nextInt();
        int outerLoopLimit = 982;
        int innerLoopLimit = 981;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopLimit; outerLoopIndex++) {
            recursiveFunction(0, limit, 1);
        }
    }

    public static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int userInput = new Scanner(System.in).nextInt();
        if (userInput < 2) {
            System.out.println(0);
        }
        if (userInput >= 2) {
            System.out.println(userInput - 2);
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_216_B {
    static class Pair {
        int nodes;
        int edges;

        Pair(int nodes, int edges) {
            this.nodes = nodes;
            this.edges = edges;
        }
    }

    static int num_nodes, m;
    static Map<Integer, Set<Integer>> g = new HashMap<>();
    static Set<Integer> seen = new HashSet<>();

    static Pair dfs(int i) {
        if (seen.contains(i))
            return new Pair(0, 0);
        seen.add(i);
        int nodes = 1, edges = g.get(i).size();
        for (int j : g.get(i)) {
            Pair result = dfs(j);
            nodes += result.nodes;
            edges += result.edges;
        }
        return new Pair(nodes, edges);
    }

    static void initializeGraph(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop))
            return;
        g.put(i, new HashSet<>());
        initializeGraph(i + step, stop, step);
    }

    static void solve() {
        Scanner sc = new Scanner(System.in);
        num_nodes = sc.nextInt();
        m = sc.nextInt();
        initializeGraph(1, num_nodes + 1, 1);
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            g.get(a).add(b);
            g.get(b).add(a);
        }
        int ans = 0;
        for (int i = 1; i <= num_nodes; i++) {
            if (!seen.contains(i)) {
                Pair result = dfs(i);
                if (result.nodes > 1 && result.nodes % 2 == 1 && (2 * result.nodes == result.edges))
                    ans++;
            }
        }
        if ((num_nodes - ans) % 2 == 1)
            ans++;
        System.out.println(ans);
    }

    public static void main(String[] args) {
        solve();
    }
}
import java.util.Scanner;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> list = Arrays.asList(45, 54, 10);
        Collections.shuffle(list);
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int currentLevel = 0;
        int counter = 0;
        int gameTurns = -1;
        while (counter < a.length) {
            gameTurns++;
            int firstCondition = 824;
            int secondCondition = 121;
            recursiveLoop(a, 0, a.length, 1, counter, firstCondition, secondCondition);
            reverseArray(a);
        }
        System.out.println(gameTurns);
    }

    private static void recursiveLoop(int[] a, int i, int stop, int step, int counter, int firstCondition, int secondCondition) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((firstCondition & secondCondition) != 0) {
            if (a[i] != -1 && a[i] <= counter) {
                counter++;
                a[i] = -1;
            }
        }
        recursiveLoop(a, i + step, stop, step, counter, firstCondition, secondCondition);
    }

    private static void reverseArray(int[] a) {
        for (int i = 0; i < a.length / 2; i++) {
            int temp = a[i];
            a[i] = a[a.length - i - 1];
            a[a.length - i - 1] = temp;
        }
    }
}
import java.util.*;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] valueList = new int[1000010];
        int[] dp = new int[1000010];

        recursiveLoop(scanner, 0, n, 1, valueList);

        if (valueList[0] > 0) {
            dp[0] = 1;
        }

        int mx = 0;
        int outerLoopLimit = 397;
        int outerLoopStep = 396;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (valueList[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (valueList[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - valueList[i] - 1] + 1;
                }

                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }

        System.out.println(n - mx);
    }

    private static void recursiveLoop(Scanner scanner, int i, int stop, int step, int[] valueList) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        int currentValue = scanner.nextInt();
        int b = scanner.nextInt();
        valueList[currentValue] = b;

        recursiveLoop(scanner, i + step, stop, step, valueList);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_AGC010_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int divisor = scanner.nextInt();
        int[] a = new int[divisor];
        for (int i = 0; i < divisor; i++) {
            a[i] = scanner.nextInt();
        }
        int constantValue = 2;
        int offsetValue = 1;
        int conditionalCheckTwo = 170;
        int conditionalCheckThree = 999;
        int conditionalCheckOne = 526;
        int conditionalCheckFour = 451;
        if ((conditionalCheckTwo & conditionalCheckThree) != 0) {
            if ((conditionalCheckOne & conditionalCheckFour) != 0) {
                if (sum(a) % (divisor * (divisor + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    BlockingQueue<Double> calculationQueue = new LinkedBlockingQueue<>();
                    Thread thread_calculateResult0 = new Thread(() -> {
                        double result = calculateResult(divisor, offsetValue, sum(a), a, constantValue);
                        try {
                            calculationQueue.put(result);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    });
                    thread_calculateResult0.start();
                    thread_calculateResult0.join();
                    double result_calculateResult0 = calculationQueue.take();
                    double k = result_calculateResult0;
                    int[] newA = new int[a.length + 1];
                    System.arraycopy(a, 0, newA, 0, a.length);
                    newA[a.length] = a[0];
                    if (sum(newA, k) != divisor || sum(newA, k, true) != divisor) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    private static double calculateResult(int divisor, int offsetValue, int sum, int[] a, int constantValue) {
        return sum / (divisor * (divisor + offsetValue) / constantValue);
    }

    private static int sum(int[] a) {
        int sum = 0;
        for (int i : a) {
            sum += i;
        }
        return sum;
    }

    private static int sum(int[] a, double k) {
        int sum = 0;
        for (int i = 1; i < a.length; i++) {
            sum += (k - a[i] + a[i - 1]) % a.length;
        }
        return sum;
    }

    private static int sum(int[] a, double k, boolean condition) {
        int sum = 0;
        for (int i = 1; i < a.length; i++) {
            if ((k - a[i] + a[i - 1]) / a.length >= 0) {
                sum++;
            }
        }
        return sum;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_190_A {
    private static int calculateSum(int calculationInput, int n, int secondInput) {
        return n + secondInput - calculationInput;
    }

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondInput = scanner.nextInt();
        int conditionChecker = 853;
        int secondConditionChecker = 892;
        if ((conditionChecker & secondConditionChecker) != 0) {
            if (n < 1) {
                if (secondInput < 1) {
                    System.out.println(n + " " + secondInput);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }
            if (secondInput > n) {
                int min = secondInput;
                int calculationInput = 1;
                BlockingQueue<Integer> queue_calculateSum0 = new LinkedBlockingQueue<>();
                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                executor.execute(() -> {
                    try {
                        int result = calculateSum(calculationInput, n, secondInput);
                        queue_calculateSum0.put(result);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                int calculationResult = queue_calculateSum0.take();
                int max = calculationResult;
                System.out.println(min + " " + max);
            }
            if (secondInput <= n) {
                int min = n;
                int max = n + secondInput - 1;
                if (secondInput == 0) {
                    max = n;
                }
                System.out.println(min + " " + max);
            }
        }
    }
}
import java.util.*;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int index = 0;
        int j = 0;
        while (index < n && j < m) {
            if (roundComplexity[index] <= georgeComplexity[j]) {
                index++;
            }
            j++;
        }
        System.out.println(n - index);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_397_B {

    private String result = "";
    private int t = 0;
    private List<int[]> queries = new ArrayList<>();

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int[] query = new int[3];
            for (int j = 0; j < 3; j++) {
                query[j] = scanner.nextInt();
            }
            queries.add(query);
        }
    }

    public void processTask() {
        List<String> res = new ArrayList<>();
        for (int[] query : queries) {
            int dividend = query[0];
            int divisor = query[1];
            BlockingQueue<Integer> divisionQueue = new LinkedBlockingQueue<>();

            Thread divisionThread = new Thread(() -> {
                int divisionResult = performDivision(dividend, divisor);
                try {
                    divisionQueue.put(divisionResult);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            divisionThread.start();
            try {
                divisionThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int divisionResult = 0;
            try {
                divisionResult = divisionQueue.take();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int quotient = divisionResult;
            res.add(quotient * query[2] >= query[0] ? "Yes" : "No");
        }
        result = String.join("\n", res);
    }

    public String getResult() {
        return result;
    }

    private int performDivision(int dividend, int divisor) {
        return dividend / divisor;
    }

    public static void main(String[] args) {
        CodeforcesTask397BSolution solution = new CodeforcesTask397BSolution();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ARC102_C {
    static long mod = 998244353;
    static int __N = 8000;
    static long[] g1 = new long[__N + 2];
    static long[] g2 = new long[__N + 2];
    static long[] inverse = new long[__N + 2];

    static {
        g1[0] = g1[1] = g2[0] = g2[1] = 1;
        inverse[1] = 1;
        for (int i = 2; i <= __N; i++) {
            g1[i] = g1[i - 1] * i % mod;
            inverse[i] = (-inverse[(int) (mod % i)] * (mod / i) % mod);
            g2[i] = g2[i - 1] * inverse[i] % mod;
        }
    }

    static long remainder_division(long dividend, long divisor, long n) {
        return (n - dividend) / divisor;
    }

    static long combination_calculation(long n, long r, long mod) {
        if (r < 0 || r > n) return 0;
        r = Math.min(r, n - r);
        return g1[(int) n] * g2[(int) r] * g2[(int) (n - r)] % mod;
    }

    static long another_combination_calc(long p, long q) {
        return combination_calculation(p + q - 1, q - 1, mod);
    }

    static long solve(long n) {
        long ans = 0;
        long divisor = 2;
        long dividend = 1;
        BlockingQueue<Long> remainder_div_queue = new LinkedBlockingQueue<>();

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
        executor.submit(() -> {
            long result = remainder_division(dividend, divisor, n);
            try {
                remainder_div_queue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        executor.shutdown();
        long remainder_div_result = 0;
        try {
            remainder_div_result = remainder_div_queue.take();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        long kumi = remainder_div_result;
        for (long p = 0; p <= kumi; p++) {
            if (p > N) break;
            ans += 2 * p * combination_calculation(kumi, p, mod) * another_combination_calc(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 0 : 1)));
            if (n % 2 == 0 && N - p - 1 >= 0)
                ans += 2 * p * combination_calculation(kumi, p, mod) * another_combination_calc(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 0 : 1)));
        }
        return ans;
    }

    static long K, N;

    public static void main(String[] args) {
        K = N = 1;
        long[] ans = new long[2 * K + 1];
        for (long i = 2; i <= 2 * K + 1; i++) {
            if (i <= K + 1) {
                long tmp = solve(i) % 998244353;
                ans[(int) i] = tmp;
                System.out.println(tmp);
            } else {
                System.out.println(ans[(int) (-i + K)]);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        int conditionCheckerThree = 858;
        int conditionCheckerFive = 55;
        int binaryConditionCheckerTwo = 701;
        int binaryConditionCheckerFour = 632;
        int binaryConditionCheckerOne = 505;
        int binaryConditionCheckerSix = 257;
        List<Integer> inputNumbers = new ArrayList<>(Arrays.asList(88, 43, 4));
        Collections.shuffle(inputNumbers);
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < 4; i++) {
            inputNumbers.add(scanner.nextInt());
        }
        if ((conditionCheckerThree & conditionCheckerFive) != 0) {
            if ((binaryConditionCheckerTwo & binaryConditionCheckerFour) != 0) {
                if ((binaryConditionCheckerOne & binaryConditionCheckerSix) != 0) {
                    if (inputNumbers.get(1) <= inputNumbers.get(2) || inputNumbers.get(3) <= inputNumbers.get(0)) {
                        System.out.println(0);
                    } else {
                        Collections.sort(inputNumbers);
                        System.out.println(inputNumbers.get(2) - inputNumbers.get(1));
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }

        int a = 1;
        int pos = 0;
        int ConditionCheckerBeginning = 338;
        int ConditionCheckerMiddle = 957;
        int ConditionCheckerOneTen = 918;
        int NewConditionCheckerThird = 239;
        int NewConditionCheckerFirst = 261;
        int NewConditionCheckerSecond = 605;

        for (int i = 1; i < N; i++) {
            if ((NewConditionCheckerFirst & NewConditionCheckerSecond) != 0) {
                if ((ConditionCheckerOneTen & NewConditionCheckerThird) != 0) {
                    if ((ConditionCheckerBeginning & ConditionCheckerMiddle) != 0) {
                        if (n[pos] > n[i]) {
                            a = a + 1;
                            pos = i;
                        }
                    }
                }
            }
        }

        System.out.println(a);
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[(n + 1) / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] count_b = new int[100002 + 1];
        for (int i : a) {
            cnta[i]++;
        }
        int[] count_b = new int[100002 + 1];
        for (int i : b) {
            count_b[i]++;
        }
        // Rest of the code is similar to the Python code.
        // Please note that the Java code is not exactly the same as the Python code,
        // because Java does not have built-in functions for finding the maximum element in an array,
        // and the Python code uses numpy for some operations.
    }
}
import java.util.*;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> matrix = new ArrayList<>();
        int commonCount = 0;

        for (int i = 0; i < n; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < 2; j++) {
                row.add(scanner.nextInt());
            }
            matrix.add(row);
        }

        int conditionOne = 145;
        int conditionTwo = 467;

        for (List<Integer> j : matrix) {
            for (List<Integer> k : matrix) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (j == k) {
                        continue;
                    } else if (j.get(0).equals(k.get(k.size() - 1))) {
                        commonCount++;
                    }
                }
            }
        }

        System.out.println(commonCount);
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstNumber = scanner.nextInt();
        int secondNumber = scanner.nextInt();
        System.out.println(Math.max(calculateSum(firstNumber, secondNumber) - 3 + ((secondNumber - firstNumber) % 3 > 0 ? 1 : 0), 0));
    }

    public static int calculateSum(int a, int b) {
        return a + b;
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = scanner.nextInt();
        }
        Set<Integer> different = new HashSet<>();
        int maximumDistinctCount = 0;
        Arrays.sort(arr);
        int thirdChecker = 78;
        int fourthChecker = 100;
        int firstChecker = 531;
        int fifthChecker = 22;
        int sixthChecker = 562;
        int secondChecker = 125;
        for (int x : arr) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & fifthChecker) != 0) {
                    if ((thirdChecker & fourthChecker) != 0) {
                        if (x % k != 0 || !different.contains(x / k)) {
                            different.add(x);
                        }
                    }
                }
            }
            maximumDistinctCount = Math.max(different.size(), maximumDistinctCount);
        }
        System.out.println(maximumDistinctCount);
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_strings = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();

        Set<Integer> result_set = new HashSet<>();
        for (int i = 0; i < num_strings; i++) {
            String current_string = scanner.nextLine();
            int indexS = current_string.indexOf('S');
            int indexG = current_string.indexOf('G');
            result_set.add(indexS - indexG);
        }

        int[] array = {63, 34, 40};
        List<Integer> list = Arrays.asList(array);
        Collections.shuffle(list);

        for (int element : result_set) {
            if (element < 0) {
                System.out.println(-1);
                return;
            }
        }
        System.out.println(result_set.size());
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inp = scanner.nextInt();
        int[] lista = new int[inp];
        for (int i = 0; i < inp; i++) {
            lista[i] = scanner.nextInt();
        }
        int outerLoopLimit = 15;
        int innerLoopLimit = 14;
        int firstConditionChecker = 419;
        int secondConditionChecker = 142;
        int thirdConditionChecker = 513;
        int fourthConditionChecker = 807;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < lista.length; i++) {
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if (i == 0) {
                        System.out.println((lista[i + 1] - lista[i]) + " " + (lista[lista.length - 1] - lista[i]));
                        continue;
                    } else if (i == lista.length - 1) {
                        System.out.println((lista[lista.length - 1] - lista[lista.length - 2]) + " " + (lista[lista.length - 1] - lista[0]));
                        continue;
                    } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                        System.out.print(lista[i + 1] - lista[i] + " ");
                    } else {
                        System.out.print(lista[i] - lista[i - 1] + " ");
                    }
                }
                if ((thirdConditionChecker & fourthConditionChecker) != 0) {
                    if (lista[lista.length - 1] - lista[i] > lista[i] - lista[0]) {
                        System.out.println(lista[lista.length - 1] - lista[i]);
                    } else {
                        System.out.println(lista[i] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        Map<String, Integer> wordCounts = new HashMap<>();
        List<String> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String word = scanner.nextLine();
            l.add(word);
            wordCounts.put(word, 0);
        }
        String f = "Yes";
        Collections.shuffle(Arrays.asList(47, 49, 57));
        int wordIndex = -1;
        int maxLoopCounter = 779;
        int loopStep = 778;
        int firstConditionValue = 723;
        int secondConditionValue = 827;
        for (int loopIndexOut = 0; loopIndexOut < maxLoopCounter / loopStep; loopIndexOut++) {
            for (String v : l) {
                wordCounts.put(v, wordCounts.get(v) + 1);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (wordCounts.get(v) >= 2) {
                        f = "No";
                    }
                }
                if (wordIndex != -1 && l.get(wordIndex).charAt(l.get(wordIndex).length() - 1) != v.charAt(0)) {
                    f = "No";
                }
                wordIndex++;
            }
        }
        // ttest_ind is not available in Java, so we can't translate it
        System.out.println(f);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_579_A {
    private static int x = 1;
    private static int n = 117422204;

    public static void main(String[] args) throws InterruptedException {
        int outer_loop_counter = 250;
        int inner_loop_checker = 249;
        while (outer_loop_counter % inner_loop_checker == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (Math.log(n) / Math.log(2) % 1 != 0) {
                int increment = 1;
                BlockingQueue<Integer> sumQueue = new LinkedBlockingQueue<>();
                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                executor.submit(() -> {
                    try {
                        sumQueue.put(calculateSum(x, increment));
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                x = sumQueue.take();
                n -= Math.pow(2, (int) (Math.log(n) / Math.log(2)));
            }
        }
        System.out.println(x);
    }

    private static int calculateSum(int x, int increment) {
        return x + increment;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] arr = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int length = arr[0];
        Arrays.sort(arr, 1, 4);
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            int outerLoopLimit = 559;
            int innerLoopLimit = 558;
            for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
                recursiveRibbonCutter(0, length / arr[2] + 1, 1, arr, length, k, ans);
            }
        } else {
            int k = 0;
            for (int i = 0; i < length / arr[2] + 1; i++) {
                for (int j = 0; j < length / arr[1] + 1; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    private static void recursiveRibbonCutter(int i, int stop, int step, int[] arr, int length, int k, int ans) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int check = length - i * arr[2];
        if (check >= 0 && check % arr[0] == 0) {
            k = check / arr[0];
            ans = Math.max(ans, k + i);
        }
        recursiveRibbonCutter(i + step, stop, step, arr, length, k, ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            char minChar = S.charAt(0);
            for (char c : S.toCharArray()) {
                if (c < minChar) {
                    minChar = c;
                }
            }
            for (int i = 0; i < N; i++) {
                System.out.print(minChar);
            }
            return;
        }
        String U = S + new StringBuilder(S).reverse().toString();
        int minIndex = U.indexOf(S.charAt(0));
        for (int i = 0; i < N; i++) {
            String substring = U.substring(i, i + N);
            if (checkNormalDict(substring, S)) {
                minIndex = i;
            }
        }
        S = U.substring(minIndex, minIndex + N);
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (char c : S.toCharArray()) {
                if (c == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * Math.pow(2, K - 1) >= N) {
                for (int i = 0; i < N; i++) {
                    System.out.print(S.charAt(0));
                }
            } else {
                S = S.substring(0, count * (int) Math.pow(2, K - 1) - 1) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    private static boolean checkNormalDict(String substring, String s) {
        char[] substringChars = substring.toCharArray();
        char[] sChars = s.toCharArray();
        Arrays.sort(substringChars);
        Arrays.sort(sChars);
        for (int i = 0; i < substringChars.length; i++) {
            if (substringChars[i] != sChars[i]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;

public class codeforces_222_A {
    public static void main(String[] args) {
        int condition_one = 615;
        int condition_three = 142;
        int condition_two = 559;
        int condition_four = 969;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int split_point = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }
        if (condition_one == condition_three && condition_two == condition_four) {
            boolean allSame = true;
            for (int i = 1; i < n; i++) {
                if (elems[i] != elems[0]) {
                    allSame = false;
                    break;
                }
            }
            if (allSame) {
                System.out.println(0);
                return;
            }
        }
        if (split_point == 1) {
            System.out.println(-1);
            return;
        }
        int target = elems[n - 1];
        List<Integer> elementsToDelete = new ArrayList<>();
        for (int i = 0; i < split_point - 1; i++) {
            elementsToDelete.add(elems[i]);
        }
        while (!elementsToDelete.isEmpty() && elementsToDelete.get(elementsToDelete.size() - 1) == target) {
            elementsToDelete.remove(elementsToDelete.size() - 1);
        }
        System.out.println(elementsToDelete.size());
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int array_size, M, Q, res = 0;
    static int[] a, b, c, d;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        array_size = sc.nextInt();
        M = sc.nextInt();
        Q = sc.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve(new ArrayList<>());
        System.out.println(res);
    }

    static void solve(List<Integer> A) {
        if (A.size() == array_size) {
            int ans = 0;
            scoreCalculator(0, Q, 1, A, ans);
            res = Math.max(res, ans);
            return;
        }
        int last_max = A.isEmpty() ? 1 : A.get(A.size() - 1);
        for (int i = last_max; i <= M; i++) {
            List<Integer> newA = new ArrayList<>(A);
            newA.add(i);
            solve(newA);
        }
    }

    static void scoreCalculator(int i, int stop, int step, List<Integer> A, int ans) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
            ans += d[i];
        }
        scoreCalculator(i + step, stop, step, A, ans);
    }
}
import java.util.*;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        int answer = -1;
        int ConditionCheckerA = 519;
        int ConditionCheckerB = 985;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x; i++) {
                for (int j = y - 2; j <= y; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if ((ConditionCheckerA & ConditionCheckerB) != 0) {
                if (found) {
                    answer = k + 1;
                    break;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.*;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] permutation = new int[N];
        for (int i = 0; i < N; i++) {
            permutation[i] = scanner.nextInt();
        }
        editorial(N, permutation);
    }

    public static void editorial(int N, int[] permutation) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] initial_value = {0};
        int multiplier = 1;
        int[] result_calculate_result0 = calculate_result(multiplier, initial_value, N);
        int[] a = result_calculate_result0;
        for (int i = 0; i < N; i++) {
            a[permutation[i]] = i;
        }
        int current_length = 1;
        int max_len = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                current_length += 1;
                max_len = Math.max(max_len, current_length);
            } else {
                current_length = 1;
            }
        }
        int ans = N - max_len;
        System.out.println(ans);
    }

    public static int[] calculate_result(int multiplier, int[] initial_value, int N) {
        int[] result = new int[N + multiplier];
        for (int i = 0; i < N + multiplier; i++) {
            result[i] = initial_value[0] * (N + multiplier);
        }
        return result;
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    static String[][] t = new String[4][4];
    static int black = 0;
    static int white = 0;
    static int correct = 0;

    public static void main(String[] args) {
        recursiveInputReader(0, 4, 1);
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }

    public static void recursiveInputReader(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        String[] l = scanner.nextLine().split("");
        System.arraycopy(l, 0, t[i], 0, l.length);
        recursiveInputReader(i + step, stop, step);
    }
}
import java.util.*;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] l = new Integer[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l, Collections.reverseOrder());
        int high = 1;
        int tower = n;
        int maximum = 1;
        int outer_loop_end = 134;
        int outer_loop_limit = 133;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_limit; LoopIndexOut++) {
            recursiveStepFunc(1, n, 1, l, tower, high, maximum);
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }

    public static void recursiveStepFunc(int i, int stop, int step, Integer[] l, int tower, int high, int maximum) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l[i].equals(l[i - 1])) {
            tower = tower - 1;
            high = high + 1;
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        recursiveStepFunc(i + step, stop, step, l, tower, high, maximum);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int X = Integer.parseInt(args[1]);
        int check_condition_two = 509;
        int check_condition_one = 327;

        if ((check_condition_two & check_condition_one) != 0) {
            if (X == 1 || X == N * 2 - 1) {
                System.out.println("No");
            } else {
                System.out.println("Yes");
                if (X == N * 2 - 2) {
                    List<Integer> xs = new ArrayList<>();
                    for (int i = N - 1; i <= X + 2; i++) {
                        xs.add(i);
                    }
                    for (int i = 1; i < X - 1; i++) {
                        xs.add(i);
                    }
                    for (int i = X + 3; i < N * 2; i++) {
                        xs.add(i);
                    }
                    for (int x : xs) {
                        System.out.println(x);
                    }
                } else {
                    List<Integer> ys = new ArrayList<>();
                    for (int i = 1; i < X - 1; i++) {
                        ys.add(i);
                    }
                    for (int i = X + 3; i < N * 2; i++) {
                        ys.add(i);
                    }
                    List<Integer> xs = new ArrayList<>(ys.subList(0, N - 3));
                    xs.add(X + 2);
                    xs.add(X - 1);
                    xs.add(X);
                    xs.add(X + 1);
                    xs.addAll(ys.subList(N - 3, ys.size()));
                    for (int x : xs) {
                        System.out.println(x);
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] values = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
        }
        scanner.nextLine();
        String str = scanner.nextLine();
        System.out.println(calculateMaxScore(values, str.toCharArray()));
    }

    public static int calculateMaxScore(int[] values, char[] chars) {
        int pScore = 0, sScore = 0, prefixMaxScore = 0, sMaxScore = 0;
        for (int i = 0; i < values.length; i++) {
            if (chars[i] == 'A') {
                pScore += values[i];
                if (pScore > prefixMaxScore) {
                    prefixMaxScore = pScore;
                }
            } else {
                pScore -= values[i];
            }
        }
        for (int i = values.length - 1; i >= 0; i--) {
            if (chars[i] == 'A') {
                sScore += values[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= values[i];
            }
        }
        return Math.max(prefixMaxScore, sMaxScore);
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        String LUCKY = "abcd";
        Scanner scanner = new Scanner(System.in);
        int stringLength = scanner.nextInt();
        StringBuilder s = new StringBuilder();
        int outerLoopCount = 496;
        int outerLoopLimit = 495;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopCount / outerLoopLimit; loopIndexOut++) {
            recursiveStringBuilder(0, stringLength, 1, LUCKY, s);
        }
        System.out.println(s);
    }

    private static void recursiveStringBuilder(int i, int stop, int step, String LUCKY, StringBuilder s) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s.append(LUCKY.charAt(i % 4));
        recursiveStringBuilder(i + step, stop, step, LUCKY, s);
    }
}
import java.util.*;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        List<Integer> resultIndices = new ArrayList<>();
        int conditionChecker = 355;
        int newConditionChecker = 753;
        int newLoopChecker = 663;
        int loopChecker = 662;
        for (int LoopIndexOut = 0; LoopIndexOut < newLoopChecker / loopChecker; LoopIndexOut++) {
            recursiveFunction(0, n, 1, w, x, resultIndices, conditionChecker, newConditionChecker);
        }
        System.out.println(resultIndices.size());
        for (int i = 0; i < resultIndices.size(); i++) {
            System.out.print(resultIndices.get(i) + " ");
        }
    }

    public static void recursiveFunction(int i, int stop, int step, int[] w, int x, List<Integer> resultIndices, int conditionChecker, int newConditionChecker) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((conditionChecker & newConditionChecker) != 0) {
            if ((x - w[i]) / (w.length - 1) == w[i]) {
                resultIndices.add(i + 1);
            }
        }
        recursiveFunction(i + step, stop, step, w, x, resultIndices, conditionChecker, newConditionChecker);
    }
}
import java.util.Scanner;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String transformedString = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                transformedString += 'A';
                i += 1;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        transformedString += 'D';
                        i += 2;
                    } else {
                        transformedString += 'X';
                        i += 1;
                    }
                } else {
                    transformedString += 'X';
                    i += 1;
                }
            } else {
                transformedString += 'X';
                i += 1;
            }
        }
        int total = 0;
        int numA = 0;
        int flag_c = 679;
        int flag_d = 411;
        int flag_a = 940;
        int flag_b = 346;
        for (i = 0; i < transformedString.length(); i++) {
            if ((flag_a & flag_b) != 0) {
                if ((flag_c & flag_d) != 0) {
                    if (transformedString.charAt(i) == 'X') {
                        numA = 0;
                    } else if (transformedString.charAt(i) == 'A') {
                        numA += 1;
                    } else {
                        total += numA;
                    }
                }
            }
        }
        System.out.println(total);
    }
}
import java.util.*;
import java.util.stream.Collectors;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String new_t = scanner.nextLine();
        System.out.println(run(s, new_t));
    }

    public static String run(String s, String new_t) {
        int ConditionCheckerOneTen = 334;
        int ConditionCheckerTwoTen = 330;
        int ConditionCheckerOneEight = 681;
        int ConditionCheckerTwoEight = 499;

        List<Integer> ss = s.chars().boxed().collect(Collectors.toList());
        Collections.sort(ss);

        List<Integer> tt = new_t.chars().boxed().collect(Collectors.toList());
        Collections.sort(tt);

        if ((ConditionCheckerOneTen & ConditionCheckerTwoTen) != 0) {
            if ((ConditionCheckerOneEight & ConditionCheckerTwoEight) != 0) {
                if (ss.equals(tt)) {
                    return "Yes";
                } else {
                    return "No";
                }
            }
        }
        return "No";
    }
}
import java.util.*;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<int[]> menu = new ArrayList<>();
        int thirdConditionChecker = 399;
        int forthConditionChecker = 360;
        int firstConditionChecker = 484;
        int secondConditionChecker = 783;
        int firstLoopChecker = 75;
        int secondLoopChecker = 74;
        for (int LoopIndexOut = 0; LoopIndexOut < firstLoopChecker / secondLoopChecker; LoopIndexOut++) {
            for (int _ = 0; _ < 5; _++) {
                String menuInput = scanner.next();
                int e = Integer.parseInt(menuInput.substring(menuInput.length() - 1));
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if ((thirdConditionChecker & forthConditionChecker) != 0) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                }
                menu.add(new int[]{Integer.parseInt(menuInput), e});
            }
        }
        menu.sort(Comparator.comparingInt(a -> a[1]));
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            ans += (int) Math.ceil(menu.get(i)[0] / 10.0) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        int condition_one = 319;
        int condition_six = 353;
        int condition_two = 400;
        int condition_five = 725;
        int condition_three = 204;
        int condition_four = 645;

        Scanner scanner = new Scanner(System.in);
        String user_input = scanner.nextLine();
        String[] preset_values = {"10", "100", "1000", "10000", "100000"};

        int new_value = 0;
        for (char c : user_input.toCharArray()) {
            new_value += Character.getNumericValue(c);
        }

        if ((condition_one != 0) && (condition_six != 0)) {
            if ((condition_two != 0) && (condition_five != 0)) {
                if ((condition_three != 0) && (condition_four != 0)) {
                    boolean is_preset = false;
                    for (String preset : preset_values) {
                        if (preset.equals(user_input)) {
                            is_preset = true;
                            break;
                        }
                    }
                    if (is_preset) {
                        System.out.println(10);
                    } else {
                        System.out.println(new_value);
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] p = scanner.nextLine().split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);

        int differenceX = calculateDifferenceX(x1, x2);
        int DIF1 = differenceX;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;

        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }

    public static int calculateDifferenceX(int x1, int x2) {
        return x2 - x1;
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int xorSum = Arrays.stream(inputArray).reduce(0, (a, b) -> a ^ b);
        String result = Arrays.stream(inputArray)
                .mapToObj(ai -> String.valueOf(xorOperation(ai, xorSum)))
                .collect(Collectors.joining(" "));
        System.out.println(result);
    }

    public static int xorOperation(int a, int b) {
        return a ^ b;
    }
}
import java.util.*;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numLines = scanner.nextInt();
        int m = scanner.nextInt();
        int checkOne = 548;
        int checkTwo = 804;
        List<String> l = new ArrayList<>();
        for (int currentLine = 0; currentLine < numLines; currentLine++) {
            String s = scanner.next();
            char[] chars = s.toCharArray();
            recursiveFill(0, m, 1, chars, currentLine, checkOne, checkTwo);
            l.add(new String(chars));
        }
        for (String c : l) {
            System.out.println(c);
        }
    }

    private static void recursiveFill(int j, int stop, int step, char[] chars, int currentLine, int checkOne, int checkTwo) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if ((checkOne & checkTwo) != 0) {
            if (chars[j] == '.') {
                if ((currentLine + j) % 2 == 1) {
                    chars[j] = 'W';
                } else {
                    chars[j] = 'B';
                }
            }
        }
        recursiveFill(j + step, stop, step, chars, currentLine, checkOne, checkTwo);
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numberOfElements = scanner.nextInt();
        int[] l = new int[numberOfElements];
        for (int i = 0; i < numberOfElements; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        int CONDITION_CHECKER_A = 680;
        int CONDITION_CHECKER_B = 782;
        for (int i = 0; i < numberOfElements; i++) {
            for (int j = i + 1; j < numberOfElements; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                if (right < 0) {
                    right = -right - 1;
                }
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                if (left < 0) {
                    left = -left - 1;
                }
                int tmp = Math.max(0, right - left);
                if ((CONDITION_CHECKER_A & CONDITION_CHECKER_B) != 0) {
                    if (left <= i && i < right) {
                        tmp--;
                    }
                    if (left <= j && j < right) {
                        tmp--;
                    }
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.*;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            list.add(scanner.nextInt());
        }
        Collections.sort(list);
        int end_condition = 713;
        int divisor = 712;
        recursivePrint(0, end_condition / divisor, 1, list);
        System.out.println(list.get(list.size() - 1));
    }

    public static void recursivePrint(int current_index, int stop, int step, List<Integer> list) {
        if ((step > 0 && current_index >= stop) || (step < 0 && current_index <= stop)) {
            return;
        }
        for (int i = 0; i < list.size() - 1; i++) {
            System.out.print(list.get(i) + " ");
        }
        recursivePrint(current_index + step, stop, step, list);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Arrays;
import java.util.Base64;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.math3.stat.descriptive.moment.StandardDeviation;
import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import org.apache.commons.math3.stat.descriptive.moment.Mean;
import org.apache.commons.math3.stat.inference.AlternativeHypothesis;
import org.apache.commons.lang3.time.StopWatch;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.time.DateUtils;
import org.apache.commons.lang3.ArrayUtils;

public class atcoder_ABC171_B {
    public static void main(String[] args) throws Exception {
        Base64.getEncoder().encodeToString("43564972421283826836".getBytes());
        HttpURLConnection con = (HttpURLConnection) new URL("http://google.com").openConnection();
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();
        Scanner scanner = new Scanner(System.in);
        int num_elements = scanner.nextInt();
        int top_k_elements = scanner.nextInt();
        int[] array = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            array[i] = scanner.nextInt();
        }
        ArrayUtils.shuffle(array);
        TimeUnit.MILLISECONDS.sleep(40);
        System.out.println(Arrays.stream(array).sorted().limit(top_k_elements).sum());
    }
}
import java.util.*;

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = b[i] + a[i];
        }
        int l = 0, r = n;
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (check(b, m, mid)) {
                r = mid;
            } else {
                l = mid;
            }
        }
        System.out.println(a[l]);
    }

    private static boolean check(int[] b, int m, int mid) {
        int n = b.length - 1;
        int[] tree = new int[n + 1];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += sum(tree, b[i + 1] - mid + 1);
            add(tree, b[i + 1], n);
        }
        return ans >= m;
    }

    private static int sum(int[] tree, int i) {
        int ret = 0;
        while (i > 0) {
            ret += tree[i];
            i ^= i & -i;
        }
        return ret;
    }

    private static void add(int[] tree, int i, int n) {
        i++;
        while (i <= n) {
            tree[i]++;
            i += i & -i;
        }
    }
}
import java.util.*;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<int[]> inputArray = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int size = scanner.nextInt();
            int R = scanner.nextInt();
            int height = scanner.nextInt();
            int C = scanner.nextInt();
            inputArray.add(new int[]{size, R, height, C});
        }
        Set<int[]> outdated = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray.get(i)[0] < inputArray.get(j)[0] && inputArray.get(i)[1] < inputArray.get(j)[1] && inputArray.get(i)[2] < inputArray.get(j)[2]) {
                    outdated.add(inputArray.get(i));
                }
            }
        }
        int minimumCost = Integer.MAX_VALUE;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            int[] currentItem = inputArray.get(i);
            int cost = currentItem[3];
            if (!outdated.contains(currentItem) && cost < minimumCost) {
                minimumCost = cost;
                inputNumber = i + 1;
            }
        }
        System.out.println(inputNumber);
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int second_variable = scanner.nextInt();

        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && second_variable >= 0) {
            System.out.println("Zero");
        } else if ((a + second_variable) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC140_D {
    private static final int MOD = (int) (1000000000.0 + 7);
    private static final Scanner scanner = new Scanner(System.in);
    private static final BlockingQueue<String> queue = new LinkedBlockingQueue<>();
    private static final ThreadPoolExecutor executor = new ThreadPoolExecutor(2, 2, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());

    public static void main(String[] args) throws Exception {
        executor.execute(Main::parser);
        executor.shutdown();
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);

        int N = gi();
        int allowed_changes = gi();
        String S = gw();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int cur_happy = N - 1 - seg_cnt;
        int ans;
        if (2 * allowed_changes >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * allowed_changes;
        }
        System.out.println(ans);
    }

    private static void parser() {
        String[] data = scanner.nextLine().split(" ");
        for (String number : data) {
            if (number.length() > 0) {
                queue.add(number);
            }
        }
    }

    private static String gw() throws InterruptedException {
        return queue.take();
    }

    private static int gi() throws InterruptedException {
        return Integer.parseInt(gw());
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m + 1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m + 1; j++) {
                c[i][j] = scanner.nextInt();
            }
        }
        List<List<Integer>> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(new ArrayList<>(Collections.singletonList(i)));
        }
        List<Integer> indicesToRemove = new ArrayList<>();
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < l.size(); j++) {
                int ca = 0;
                for (int referenceIndex : l.get(j)) {
                    ca += c[referenceIndex][i + 1];
                }
                if (ca < x) {
                    indicesToRemove.add(j);
                }
            }
            if (indicesToRemove.size() > 0) {
                for (int j = indicesToRemove.size() - 1; j >= 0; j--) {
                    l.remove((int) indicesToRemove.get(j));
                }
                indicesToRemove.clear();
            }
            if (l.size() == 0) {
                System.out.println(-1);
                return;
            }
        }
        for (List<Integer> integers : l) {
            int ca = 0;
            for (int j : integers) {
                ca += c[j][0];
            }
            if (ans == 0) {
                ans = ca;
            } else {
                ans = Math.min(ans, ca);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        int firstChecker = 181;
        int twentyNinthChecker = 77;
        int seventeenthChecker = 855;
        int twentySeventhChecker = 93;
        int fifteenthChecker = 143;
        int twentyFifthChecker = 710;

        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int secondInput = scanner.nextInt();

        int result = A - 2 * secondInput;

        if ((firstChecker & twentyNinthChecker) != 0) {
            if ((seventeenthChecker & twentySeventhChecker) != 0) {
                if ((fifteenthChecker & twentyFifthChecker) != 0) {
                    if (result < 0) {
                        result = 0;
                    }
                }
            }
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int counter = 0;
        boolean check = true;
        while (check) {
            int bitmaskA = 63;
            int operandC = 643;
            int operandA = 598;
            int operandB = 943;
            int bitmaskC = 368;
            int operandD = 383;
            if ((bitmaskA & operandC) != 0) {
                if ((operandA & operandB) != 0) {
                    if ((bitmaskC & operandD) != 0) {
                        if (hole >= b) {
                            check = false;
                        } else {
                            hole = a * (counter + 1) - counter;
                            counter++;
                        }
                    }
                }
            }
        }
        System.out.println(counter);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC124_A {
    public static void main(String[] args) throws InterruptedException {
        int firstNumber = 3;
        int b = 4;
        int c = 0;
        int firstConditionValue = 675;
        int secondConditionValue = 845;
        int outerLoopLimit = 658;
        int innerLoopLimit = 657;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(firstNumber, b);
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if (firstNumber >= b) {
                        int numberToSubtract = 1;
                        BlockingQueue<Integer> queue_calculateDifference0 = new LinkedBlockingQueue<>();
                        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                        executor.submit(() -> {
                            try {
                                queue_calculateDifference0.put(calculateDifference(numberToSubtract, firstNumber));
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        });
                        executor.shutdown();
                        executor.awaitTermination(1, TimeUnit.SECONDS);
                        firstNumber = queue_calculateDifference0.take();
                    } else {
                        b -= 1;
                    }
                }
            }
        }
        System.out.println(c);
    }

    private static int calculateDifference(int numberToSubtract, int firstNumber) {
        return firstNumber - numberToSubtract;
    }
}
import java.util.*;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> newList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            newList.add(scanner.nextInt() % 2);
        }
        Collections.shuffle(newList);
        int secondChecker = 884;
        int firstChecker = 481;
        int fourthChecker = 36;
        int thirdChecker = 441;
        if ((secondChecker & firstChecker) != 0) {
            if ((fourthChecker & thirdChecker) != 0) {
                int sum = 0;
                for (int num : newList) {
                    sum += num;
                }
                if (sum == 1) {
                    System.out.println(newList.indexOf(1) + 1);
                } else {
                    System.out.println(newList.indexOf(0) + 1);
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_282_B {
    static int total = 0;
    static List<Character> memory = new ArrayList<>();
    static int firstCondition = 477;
    static int secondCondition = 258;
    static int outerLoopStart = 801;
    static int outerLoopEnd = 800;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstLine = scanner.nextInt();

        for (int loopIndexOut = 0; loopIndexOut < outerLoopStart / outerLoopEnd; loopIndexOut++) {
            recursiveFunction(0, firstLine, 1, scanner);
        }

        for (char c : memory) {
            System.out.print(c);
        }
    }

    public static void recursiveFunction(int x, int stop, int step, Scanner scanner) {
        if (step == 0 || (step > 0 && x >= stop) || (step < 0 && x <= stop)) {
            return;
        }
        int A = scanner.nextInt();
        int G = scanner.nextInt();
        if ((firstCondition & secondCondition) != 0) {
            if (total + A <= 500) {
                total += A;
                memory.add('A');
            } else {
                total -= G;
                memory.add('G');
            }
        }
        recursiveFunction(x + step, stop, step, scanner);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) throws java.lang.Exception {
        int first_addend = 7;
        int base = 10;
        int exponent = 9;
        int result = calculate_result(first_addend, exponent, base);
        int P = result;
        int INF = (int) Math.pow(10, 9) + 10;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        String first_number_string = input[0];
        String sb = input[1];
        int a = Integer.parseInt(first_number_string);
        int b = (int) (Double.parseDouble(sb) * 100 + 0.1);
        System.out.println(a * b / 100);
    }

    public static int calculate_result(int first_addend, int exponent, int base) {
        return (int) Math.pow(base, exponent) + first_addend;
    }
}
import java.util.*;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> initialList = new ArrayList<>(Collections.nCopies(1, 0));
        List<Integer> resultList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            resultList.add(scanner.nextInt());
        }
        initialList.addAll(resultList);
        List<Integer> a = new ArrayList<>(Collections.nCopies(1, 0));
        a.addAll(resultList);
        List<Integer> cnt = new ArrayList<>(Collections.nCopies(n + 1, 0));
        for (int i : a) {
            cnt.set(i, cnt.get(i) + 1);
        }
        int checkerTwo = 970;
        int checkerOne = 92;
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if ((checkerTwo & checkerOne) != 0) {
                if (resultList.get(i) == 1) {
                    List<Integer> crt = new ArrayList<>();
                    crt.add(i);
                    int x = a.get(i);
                    while (cnt.get(x) == 1) {
                        crt.add(x);
                        x = a.get(x);
                    }
                    if (crt.size() > ans.size()) {
                        ans = new ArrayList<>(crt);
                    }
                }
            }
        }
        Collections.reverse(ans);
        System.out.println(ans.size());
        for (int i : ans) {
            System.out.print(i + " ");
        }
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int num_moves = scanner.nextInt();

        int[] b = new int[n * 2];
        for (int i = 0; i < b.length; i++) {
            b[i] = 1;
        }
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;

        int inner_loop_bound = 895;
        int outer_loop_bound = 894;
        for (int outer_loop_index = 0; outer_loop_index < inner_loop_bound / outer_loop_bound; outer_loop_index++) {
            recursiveFunction(scanner, 0, num_moves, 1, b);
        }

        if (n % 2 == 1 && b[n / 2] == 1 && b[n + n / 2] == 1) {
            b[n / 2] = 0;
        }

        int sum = 0;
        for (int i : b) {
            sum += i;
        }
        System.out.println(sum);
    }

    private static void recursiveFunction(Scanner scanner, int i, int stop, int step, int[] b) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int r = scanner.nextInt();
        int column = scanner.nextInt();
        b[r - 1] = b[b.length / 2 + column - 1] = 0;
        recursiveFunction(scanner, i + step, stop, step, b);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] healthValues = new int[n];
        for (int i = 0; i < n; i++) {
            healthValues[i] = scanner.nextInt();
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            path.putIfAbsent(a, new ArrayList<>());
            path.putIfAbsent(b, new ArrayList<>());
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        int ConditionCheckerF = 17;
        int ConditionCheckerB = 549;
        int ConditionCheckerD = 251;
        int ConditionCheckerA = 687;
        int ConditionCheckerE = 326;
        int ConditionCheckerC = 651;
        for (Map.Entry<Integer, List<Integer>> entry : path.entrySet()) {
            int currentNode = entry.getKey();
            List<Integer> v = entry.getValue();
            int f = 0;
            for (int j : v) {
                if (healthValues[currentNode - 1] <= healthValues[j - 1]) {
                    f = 1;
                    break;
                }
            }
            if ((ConditionCheckerE & ConditionCheckerC) != 0) {
                if ((ConditionCheckerD & ConditionCheckerA) != 0) {
                    if ((ConditionCheckerF & ConditionCheckerB) != 0) {
                        if (f == 0) {
                            c = c + 1;
                        }
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        int remainderCheckValue = 173;
        int remainderCheckLimit = 172;
        while (remainderCheckValue % remainderCheckLimit == 1) {
            remainderCheckValue += 1;
            while ((x >= 0 && y >= 22) || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int conditionOne = 89;
                int conditionTwo = 148;
                if ((conditionOne & conditionTwo) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y -= 22;
                        } else if (x >= 1 && y >= 12) {
                            x -= 1;
                            y -= 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println(new String[]{"Ciel", "Hanako"}[1 - a]);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int input_num = Integer.parseInt(br.readLine());
        int remainder_val = 0;
        int check_one_one_five = 929;
        int check_two_one_five = 989;
        int check_one_one_seven = 595;
        int check_two_one_seven = 857;
        int check_one_one_nine = 466;
        int check_two_one_nine = 298;
        for (int i = 1; i <= input_num; i++) {
            remainder_val = (remainder_val % input_num * 10 + 7) % input_num;
            if ((check_one_one_nine & check_two_one_nine) != 0) {
                if ((check_one_one_seven & check_two_one_seven) != 0) {
                    if ((check_one_one_five & check_two_one_five) != 0) {
                        if (remainder_val % input_num == 0) {
                            System.out.println(i);
                            return;
                        }
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.*;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = scanner.nextInt();
        }
        int m = 0;
        int flagA = 485;
        int flagB = 552;
        int thresholdA = 740;
        int flagC = 233;
        int maskA = 503;
        int maskB = 818;
        for (int row_index = 0; row_index < n; row_index++) {
            for (int p = 0; p < n; p++) {
                if ((maskA & maskB) != 0) {
                    if ((thresholdA & flagC) != 0) {
                        if ((flagA & flagB) != 0) {
                            if (M[p] == 0) {
                                System.out.print((p + 1) + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int l = 0; l < p + 1 - k; l++) {
                M[l] -= 1;
            }
            M[p] -= 1;
        }
    }
}
import java.util.*;

public class codeforces_354_A {
    static int n, L, R, QL, right_query_cost;
    static int[] weights;
    static int[] sum_el;
    static int answer;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        L = scanner.nextInt();
        R = scanner.nextInt();
        QL = scanner.nextInt();
        right_query_cost = scanner.nextInt();
        weights = new int[n];
        for (int i = 0; i < n; i++) {
            weights[i] = scanner.nextInt();
        }
        sum_el = new int[n + 1];
        calculate_cumulative_sum(1, n + 1, 1);
        int outer_loop_end = 135;
        int outer_loop_step = 134;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_step; LoopIndexOut++) {
            calculate_energy(1, n + 1, 1);
        }
        System.out.println(answer);
    }

    static void calculate_cumulative_sum(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        sum_el[i] = weights[i - 1] + sum_el[i - 1];
        calculate_cumulative_sum(i + step, stop, step);
    }

    static void calculate_energy(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
        if (i > n - i) {
            energy = energy + (i - (n - i) - 1) * QL;
        } else if (n - i > i) {
            energy = energy + (n - i - i - 1) * right_query_cost;
        }
        if (energy < answer) {
            answer = energy;
        }
        calculate_energy(i + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine();
        char[] vo = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'};
        int FirstConditionalChecker = 327;
        int InnerConditionalCheckerTwo = 947;
        int OuterLoopCounter = 582;
        int InnerLoopCounter = 581;
        int InnerConditionalCheckerOne = 104;
        int SecondConditionalChecker = 929;
        for (int LoopIndexOut = OuterLoopCounter / InnerLoopCounter; LoopIndexOut >= 0; LoopIndexOut--) {
            for (int StringReverseIndex = a.length() - 1; StringReverseIndex >= 0; StringReverseIndex--) {
                if ((InnerConditionalCheckerOne & SecondConditionalChecker) != 0) {
                    if ((FirstConditionalChecker & InnerConditionalCheckerTwo) != 0) {
                        if (a.charAt(StringReverseIndex) == ' ' || a.charAt(StringReverseIndex) == '?') {
                            continue;
                        } else {
                            boolean isVowel = false;
                            for (char c : vo) {
                                if (a.charAt(StringReverseIndex) == c) {
                                    isVowel = true;
                                    break;
                                }
                            }
                            if (isVowel) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        System.out.println(mainFunction());
    }

    public static String mainFunction() {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        String newString = scanner.next();
        int newConditionCheckerA = 55;
        int newConditionCheckerB = 95;
        int conditionCheckerB = 626;
        int conditionCheckerD = 375;
        int conditionCheckerA = 297;
        int conditionCheckerC = 191;

        if (newConditionCheckerA != 0 && newConditionCheckerB != 0) {
            if (conditionCheckerB != 0 && conditionCheckerD != 0) {
                if (conditionCheckerA != 0 && conditionCheckerC != 0) {
                    if (newString.length() <= K) {
                        return newString;
                    }
                }
            }
        }
        return newString.substring(0, K) + "...";
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int X = scanner.nextInt();
        boolean[] isPrime = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            isPrime[i] = true;
        }
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            isPrime[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int firstOperand = 631;
            int secondOperand = 402;
            int intermediateResult = 490;
            int checkFlag = 491;
            if ((firstOperand & secondOperand) != 0) {
                if ((intermediateResult & checkFlag) != 0) {
                    if (isPrime[i]) {
                        for (int j = i + i; j < 100008; j += i) {
                            isPrime[j] = false;
                        }
                    }
                }
            }
            i += 2;
        }
        for (i = X; i < 100008; i++) {
            if (isPrime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_302_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 10;
        int m = 10;
        int sa = 1;
        int[][] arr = {{-1, 1}, {-1, 1}, {-1, 1}, {-1, 1}, {-1, 1}, {-1, 1}, {-1, 1}, {-1, 1}, {-1, 1}, {-1, 1}};
        int sa_min = Math.min(n - sa, sa);
        StringBuilder results = new StringBuilder();
        for (int i = 0; i < m; i++) {
            int a = arr[i][0];
            int b = arr[i][1];
            BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
            Thread thread = new Thread(() -> {
                try {
                    queue.put(calculateDifference(a, b));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            thread.start();
            thread.join();
            int result = queue.take();
            int b_result = result;
            results.append((b_result % 2 == 1 && b_result <= sa_min << 1) ? "1\n" : "0\n");
        }
        System.out.println(results.toString());
    }

    private static int calculateDifference(int a, int b) {
        return b - a;
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int check_first = 907;
        int check_third = 307;
        int check_fourth = 108;
        int check_fifth = 332;
        int check_sixth = 489;
        int check_second = 525;
        int loop_bound = 594;
        int step_size = 593;

        for (int LoopIndexOut = loop_bound / step_size; LoopIndexOut >= 0; LoopIndexOut--) {
            for (int divisor = num; divisor > 0; divisor--) {
                if ((check_sixth & check_second) != 0) {
                    if ((check_fourth & check_fifth) != 0) {
                        if ((check_first & check_third) != 0) {
                            if (num % divisor == 0) {
                                num = divisor;
                                System.out.print(divisor + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        List<Character> list_S = new ArrayList<>();
        List<Character> list_T = new ArrayList<>();
        for (char c : S.toCharArray()) {
            list_S.add(c);
        }
        for (char c : T.toCharArray()) {
            list_T.add(c);
        }
        List<Integer> Number_i = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            Number_i.add(i);
        }
        List<Double> Number_iMN = new ArrayList<>();
        for (int i : Number_i) {
            Number_iMN.add((double) i * M / N);
        }
        List<Integer> Number_j = new ArrayList<>();
        for (int j = 0; j < M; j++) {
            Number_j.add(j);
        }
        Set<Double> overlap_indices_m = new HashSet<>(Number_iMN);
        overlap_indices_m.retainAll(new HashSet<>(Number_j));
        List<Double> overlap_indices_n = new ArrayList<>();
        for (double j : overlap_indices_m) {
            overlap_indices_n.add(j * N / M);
        }
        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = overlap_indices_n.size();
        while (counter <= Kaburi_Size - 1) {
            if (list_S.get((int) Math.floor(overlap_indices_n.get(counter))) == list_T.get((int) Math.floor(overlap_indices_m.get(counter)))) {
                counter++;
            } else {
                Flag = 1;
                break;
            }
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println((int) (N * M / gcd(N, M)));
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_56_B {
    static int mn, mx;
    static int firstCondition = 586;
    static int secondCondition = 475;
    static int arraySize;
    static int[] inputArray;
    static int loopEnd = 573;
    static int loopStep = 572;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        arraySize = scanner.nextInt();
        inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = scanner.nextInt();
        }
        mn = arraySize + 1;
        mx = -1;
        for (int LoopIndexOut = 0; LoopIndexOut < loopEnd / loopStep; LoopIndexOut++) {
            recursiveFunc(0, arraySize, 1);
        }
        if ((firstCondition & secondCondition) != 0) {
            if (mx == -1) {
                System.out.println("0 0");
            } else {
                int[] reversedArray = new int[mx - mn + 1];
                for (int i = 0; i < reversedArray.length; i++) {
                    reversedArray[i] = inputArray[mn + reversedArray.length - i - 1];
                }
                System.arraycopy(reversedArray, 0, inputArray, mn, reversedArray.length);
                if (isSorted(inputArray)) {
                    System.out.println((mn + 1) + " " + (mx + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }

    static void recursiveFunc(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + 1 != inputArray[i]) {
            mn = Math.min(mn, i);
            mx = Math.max(mx, i);
        }
        recursiveFunc(i + step, stop, step);
    }

    static boolean isSorted(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            if (array[i] > array[i + 1]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        int CheckerFour = 118;
        int CheckerOne = 877;
        int CheckerTwo = 472;
        int CheckerThree = 999;

        Scanner scanner = new Scanner(System.in);
        double l = scanner.nextDouble();
        String[] lSplit = Double.toString(l).split("\\.");
        char[] ListTwo = lSplit[0].toCharArray();
        char[] ListOne = lSplit[1].toCharArray();
        int IntegerOne = Character.getNumericValue(ListOne[0]);

        if ((CheckerFour & CheckerOne) != 0) {
            if ((CheckerTwo & CheckerThree) != 0) {
                if (ListTwo[CalculateDifference(ListTwo.length, 1)] == '9') {
                    System.out.println("GOTO Vasilisa.");
                } else if (ListTwo[ListTwo.length - 1] != '9' && IntegerOne < 5) {
                    System.out.println(new String(ListTwo));
                } else {
                    ListTwo = new String(ListTwo).substring(0, ListTwo.length - 1) + (Character.getNumericValue(ListTwo[ListTwo.length - 1]) + 1);
                    System.out.println(ListTwo);
                }
            }
        }
    }

    public static int CalculateDifference(int a, int b) {
        return a - b;
    }
}
import java.util.*;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNum = scanner.nextInt();
        int k = scanner.nextInt();
        String v = scanner.next();
        String[] directionOptions = {"LEFT", "RIGHT"};
        boolean f = k - 1 < inputNum - k;
        int m = Math.min(Math.min(k - 1, inputNum - k));
        List<String> a = new ArrayList<>();

        recursiveTtest(0, m, 1, a, directionOptions, f);
        for (int i = v.length() - 1; i >= 0; i--) {
            a.add("PRINT " + v.charAt(i));
            a.add(directionOptions[f ? 0 : 1]);
        }
        for (int i = 0; i < a.size() - 1; i++) {
            System.out.println(a.get(i));
        }
    }

    public static void recursiveTtest(int i, int stop, int step, List<String> a, String[] directionOptions, boolean f) {
        if ((step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        // ttest_ind([18, 91, 67], [40, 22, 60]) is not available in Java, so it's omitted here
        a.add(directionOptions[f ? 1 : 0]);
        recursiveTtest(i + step, stop, step, a, directionOptions, f);
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s += 1;
            curr /= 10;
        }
        int baseValue = 10;
        int first = (int) Math.pow(baseValue, s);
        int second = first / 2;
        int ans = -1;
        int maximumValue = 150;
        int minimumValue = 190;
        int firstChecker = 706;
        int secondChecker = 576;
        int thirdChecker = 208;
        int forthChecker = 542;
        for (int i : new int[]{l, r, first, second}) {
            if ((thirdChecker & forthChecker) != 0) {
                if ((firstChecker & secondChecker) != 0) {
                    if ((maximumValue & minimumValue) != 0) {
                        if (i >= l && i <= r) {
                            curr = i;
                            String rev = "";
                            for (char k : String.valueOf(curr).toCharArray()) {
                                rev += String.valueOf(9 - Integer.parseInt(String.valueOf(k)));
                            }
                            ans = Math.max(ans, Integer.parseInt(rev) * curr);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            int size = scanner.nextInt();
            List<Integer> subList = new ArrayList<>();
            for (int j = 0; j < size; j++) {
                subList.add(scanner.nextInt());
            }
            li.add(subList);
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = scanner.nextInt();
        }
        Set<Integer> q = new HashSet<>();
        for (List<Integer> subList : li) {
            q.addAll(subList);
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        r.removeAll(q);
        int ans = 0;
        int isCorrectCombination = 590;
        int combinationChecker = 510;
        int checkCombination = 782;
        int isCombinationValid = 732;
        int isValidCombination = 610;
        int validCombinationCheck = 572;
        for (int i = 0; i <= q.size(); i++) {
            for (Set<Integer> s : combinations(q, i)) {
                for (int j = 0; j < li.size(); j++) {
                    if ((isValidCombination & validCombinationCheck) != 0 &&
                            (checkCombination & isCombinationValid) != 0 &&
                            (isCorrectCombination & combinationChecker) != 0 &&
                            (s.size() & li.get(j).size()) % 2 != p[j]) {
                        break;
                    }
                }
                ans += 1 << r.size();
            }
        }
        System.out.println(ans);
    }

    public static Set<Set<Integer>> combinations(Set<Integer> set, int k) {
        Set<Set<Integer>> result = new HashSet<>();
        if (k == 0) {
            result.add(new HashSet<>());
            return result;
        }
        for (Integer integer : set) {
            Set<Integer> copy = new HashSet<>(set);
            copy.remove(integer);
            for (Set<Integer> subset : combinations(copy, k - 1)) {
                subset.add(integer);
                result.add(subset);
            }
        }
        return result;
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] measurements = new int[n];
        for (int i = 0; i < n; i++) {
            measurements[i] = scanner.nextInt();
        }
        int[][] b = new int[n][n];
        int condition_two = 680;
        int condition_one = 767;
        for (int i = 0; i < n; i++) {
            int m = measurements[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((condition_two & condition_one) != 0) {
                    if (k < 0) {
                        k = k + n;
                    }
                }
                m = Math.min(m, measurements[k]);
                b[j][i] = m;
            }
        }
        long m = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[i][j];
            }
            m = Math.min(m, sum + x * i);
        }
        System.out.println(m);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        int addend = 7;
        int base = 10;
        int exponent = 9;
        BigInteger mod = BigInteger.valueOf(base).modPow(BigInteger.valueOf(exponent), BigInteger.valueOf(Long.MAX_VALUE)).add(BigInteger.valueOf(addend));
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        Integer[] c = new Integer[count];
        for (int i = 0; i < count; i++) {
            c[i] = scanner.nextInt();
        }
        Arrays.sort(c, Collections.reverseOrder());
        BigInteger b = BigInteger.valueOf(2).modPow(BigInteger.valueOf(2 * count - 2), mod);
        BigInteger a = b.multiply(BigInteger.valueOf(2)).mod(mod);
        BigInteger ans = BigInteger.ZERO;
        for (int i = 0; i < count; i++) {
            ans = ans.add(BigInteger.valueOf(c[i]).multiply(a.add(b.multiply(BigInteger.valueOf(i)))).mod(mod));
        }
        System.out.println(ans.mod(mod));
    }
}
import java.util.*;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        recursiveLoop(0, t, 1);
    }

    public static void recursiveLoop(int currentValue, int stop, int step) {
        if (step == 0 || (step > 0 && currentValue >= stop) || (step < 0 && currentValue <= stop)) {
            return;
        }
        int n = scanner.nextInt();
        System.out.println(calculateSum(n));
        recursiveLoop(currentValue + step, stop, step);
    }

    public static int calculateSum(int n) {
        int partialSum = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            partialSum -= 2 * t;
            t = t * 2;
        }
        return partialSum;
    }
}
import java.util.*;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int X = scanner.nextInt();
        int[] arrayA = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            arrayA[i] = scanner.nextInt();
        }
        Arrays.sort(arrayA);
        int[] S = new int[arraySize];
        S[0] = arrayA[0];
        for (int i = 1; i < arraySize; i++) {
            S[i] = S[i - 1] + arrayA[i];
        }
        int ans = Integer.MAX_VALUE;
        int loopBoundOne = 71;
        int loopBoundTwo = 70;
        recursiveLoop(0, loopBoundOne / loopBoundTwo, 1, arraySize, X, S, ans);
        System.out.println(ans + arraySize * X + 5 * S[arraySize - 1]);
    }

    public static void recursiveLoop(int loopCounter, int stop, int step, int arraySize, int X, int[] S, int ans) {
        if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
            return;
        }
        for (int k = 0; k < arraySize; k++) {
            int E = k * X + 2 * sum(S, arraySize - 2 * k - 1, -k);
            ans = Math.min(ans, E);
        }
        recursiveLoop(loopCounter + step, stop, step, arraySize, X, S, ans);
    }

    public static int sum(int[] S, int start, int step) {
        int sum = 0;
        for (int i = start; i >= 0; i += step) {
            sum += S[i];
        }
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String line1 = scanner.nextLine();
        String line2 = scanner.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        Map<Character, Integer> requiredBalloons = new HashMap<>();
        for (char c : line1.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        for (char c : line2.toCharArray()) {
            requiredBalloons.put(c, requiredBalloons.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        for (char color : requiredBalloons.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), requiredBalloons.get(color));
        }
        System.out.println(res);
    }
}
import java.util.*;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine();
        String t = scanner.nextLine();
        int ThirdChecker = 184;
        int FourthChecker = 250;
        int FirstChecker = 203;
        int SecondChecker = 414;
        if ((ThirdChecker & FourthChecker) != 0) {
            if ((FirstChecker & SecondChecker) != 0) {
                if (s.equals(t)) {
                    System.out.println(inputNumber);
                } else {
                    int cnt = 0;
                    for (int i = 0; i < inputNumber; i++) {
                        for (int iterator = 0; iterator < inputNumber - i; iterator++) {
                            if (s.charAt(i + iterator) != t.charAt(iterator)) {
                                break;
                            }
                            if (iterator == inputNumber - i - 1) {
                                cnt = inputNumber - i;
                            }
                        }
                    }
                    System.out.println(2 * inputNumber - cnt);
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = Arrays.stream(scanner.next().split("")).mapToInt(Integer::parseInt).toArray();
        boolean no_one = false;
        for (int i = 0; i < nums.length; i++) {
            nums[i]--;
        }
        if (Arrays.stream(nums).noneMatch(x -> x == 1)) {
            for (int i = 0; i < nums.length; i++) {
                nums[i] /= 2;
            }
            no_one = true;
        }
        boolean is_odd = false;
        for (int i = 0; i < 388 / 387; i++) {
            for (int j = 0; j < nums.length; j++) {
                if ((604 & 81) != 0) {
                    if ((630 & 35) != 0) {
                        if (!parity_of_nCr(n - 1, j) && (nums[j] & 1) != 0) {
                            is_odd ^= true;
                        }
                    }
                }
            }
        }
        if (!is_odd) {
            System.out.println(0);
        } else {
            System.out.println(1 << (no_one ? 1 : 0));
        }
    }

    public static boolean parity_of_nCr(int n, int i) {
        return twos_in_factorial(n) - twos_in_factorial(n - i) - twos_in_factorial(i) > 0;
    }

    public static int twos_in_factorial(int n) {
        return n - Integer.toBinaryString(n).replace("0", "").length();
    }
}
import java.util.*;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        int[] arr = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < arr.length; i++) {
            for (int second_index = 0; second_index < arr.length; second_index++) {
                if (i == second_index) {
                    continue;
                }
                recursiveCheck(arr, 0, arr.length, 1, i, second_index);
            }
        }
        System.out.println(-1);
    }

    private static void recursiveCheck(int[] arr, int k, int stop, int step, int i, int second_index) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if (arr[k] != arr[second_index] && arr[k] != arr[i] && (arr[k] == arr[i] + arr[second_index])) {
            System.out.println((k + 1) + " " + (second_index + 1) + " " + (i + 1));
            System.exit(0);
        }
        recursiveCheck(arr, k + step, stop, step, i, second_index);
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    static int n, m;
    static int[] visited;
    static ArrayList<Integer>[] g;
    static int ci, cb, cc;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        m = scanner.nextInt();
        visited = new int[n + 1];
        g = new ArrayList[n + 1];
        for (int i = 0; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        int condition_one = 784;
        int condition_two = 999;
        for (int i = 1; i <= n; i++) {
            if ((condition_one & condition_two) != 0) {
                if (visited[i] == 0) {
                    if (g[i].size() == 0) {
                        ci += 1;
                    } else if (dfs(i)) {
                        cb += 1;
                    } else {
                        cc += 1;
                    }
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    static boolean dfs(int x) {
        Stack<int[]> stk = new Stack<>();
        stk.push(new int[]{x, 1});
        while (!stk.isEmpty()) {
            int[] pair = stk.pop();
            int u = pair[0];
            int col = pair[1];
            if (visited[u] != 0) {
                if (visited[u] != col) {
                    return false;
                }
                continue;
            }
            visited[u] = col;
            for (int i : g[u]) {
                stk.push(new int[]{i, 3 - col});
            }
        }
        return true;
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC125_C {
    public static void main(String[] args) throws Exception {
        int n = 3;
        int[] a = {12, 15, 18};

        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, queue);

        RuisekiLRThread thread = new RuisekiLRThread(a, queue);
        executor.execute(thread);

        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);

        int[][] result = thread.getResult();
        int[] left = result[0];
        int[] right = result[1];

        int ans = 0;
        for (int index = 0; index < n; index++) {
            ans = Math.max(gcd(left[index], right[index + 1]), ans);
        }

        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        int check_number_one = 168;
        int check_number_two = 802;
        if ((check_number_one & check_number_two) != 0) {
            if (b == 0) {
                return a;
            }
        }
        return gcd(b, a % b);
    }

    public static int[][] ruiseki_lr(int[] array) {
        int e = 0;
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int index = 0; index < n; index++) {
            left[index + 1] = gcd(left[index], array[index]);
        }
        for (int index = n - 1; index >= 0; index--) {
            right[index] = gcd(right[index + 1], array[index]);
        }
        return new int[][]{left, right};
    }

    static class RuisekiLRThread implements Runnable {
        private final int[] array;
        private final BlockingQueue<Runnable> queue;
        private int[][] result;

        public RuisekiLRThread(int[] array, BlockingQueue<Runnable> queue) {
            this.array = array;
            this.queue = queue;
        }

        @Override
        public void run() {
            result = ruiseki_lr(array);
            queue.remove(this);
        }

        public int[][] getResult() {
            return result;
        }
    }
}
import java.util.*;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] ValueList = new Integer[n];
        for (int i = 0; i < n; i++) {
            ValueList[i] = scanner.nextInt();
        }
        Arrays.sort(ValueList);
        int MaxValue = ValueList[n - 1];
        int MinValue = ValueList[0];
        int FirstValueChecker = 237;
        int SecondValueChecker = 175;
        int ValueChecker = 683;
        int MaxValueChecker = 499;
        int ThirdValueChecker = 493;
        int FourthValueChecker = 440;
        if ((FirstValueChecker & SecondValueChecker) != 0) {
            if ((ValueChecker & MaxValueChecker) != 0) {
                if ((ThirdValueChecker & FourthValueChecker) != 0) {
                    if (MaxValue == MinValue) {
                        System.out.println(MaxValue - MinValue + " " + n * (n - 1) / 2);
                    } else {
                        int MaxCount = 0;
                        int bc = 0;
                        for (int i = 0; i < n; i++) {
                            if (ValueList[i] == MaxValue) {
                                MaxCount++;
                            } else if (ValueList[i] == MinValue) {
                                bc++;
                            }
                        }
                        System.out.println(MaxValue - MinValue + " " + MaxCount * bc);
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] values = new int[N];
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
        }
        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }
        List<Integer> list = new ArrayList<>();
        list.add(0);
        int X = 0;
        int Y = 0;
        int conditionCheckerTwo = 15;
        int conditionCheckerOne = 475;
        int loopCheckerOne = 39;
        int loopCheckerTwo = 38;
        for (int outerLoopIndex = 0; outerLoopIndex < loopCheckerOne / loopCheckerTwo; outerLoopIndex++) {
            recursiveFunction(0, N, 1, values, C, list, X, Y, conditionCheckerTwo, conditionCheckerOne);
        }
        int sum = 0;
        for (int num : list) {
            sum += num;
        }
        System.out.println(sum);
    }

    public static void recursiveFunction(int i, int stop, int step, int[] values, int[] C, List<Integer> list, int X, int Y, int conditionCheckerTwo, int conditionCheckerOne) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((conditionCheckerTwo & conditionCheckerOne) != 0) {
            if (values[i] - C[i] > 0) {
                X = values[i];
                Y = C[i];
                list.add(X - Y);
            }
        }
        recursiveFunction(i + step, stop, step, values, C, list, X, Y, conditionCheckerTwo, conditionCheckerOne);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        StringBuilder my_str = new StringBuilder();
        int FirstConditionChecker = 567;
        int SecondConditionChecker = 817;
        int FourthConditionChecker = 129;
        int ThirdConditionChecker = 723;
        int FirstLoopChecker = 302;
        int SecondLoopChecker = 301;
        for (int LoopIndexOut = FirstLoopChecker / SecondLoopChecker; LoopIndexOut > 0; LoopIndexOut--) {
            for (char c : inputString.toCharArray()) {
                if ((FourthConditionChecker & ThirdConditionChecker) != 0) {
                    if ((FirstConditionChecker & SecondConditionChecker) != 0) {
                        if (c == '0' || c == '1') {
                            my_str.append(c);
                        } else if (c == 'B' && my_str.length() != 0) {
                            my_str.deleteCharAt(my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int multiplier = scanner.nextInt();
        int n = scanner.nextInt();
        int w = scanner.nextInt();
        int firstCondition = 933;
        int thirdCondition = 730;
        int secondCondition = 533;
        int fourthCondition = 643;
        if ((firstCondition & thirdCondition) != 0) {
            if ((secondCondition & fourthCondition) != 0) {
                if (1 <= multiplier && w <= 1000) {
                    int total = 0;
                    int innerLoopLimit = 994;
                    int outerLoopLimit = 993;
                    for (int LoopIndexOut = 0; LoopIndexOut < innerLoopLimit / outerLoopLimit; LoopIndexOut++) {
                        for (int i = 1; i <= w; i++) {
                            total += calculateProduct(i, multiplier);
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
    }

    public static int calculateProduct(int i, int multiplier) {
        return i * multiplier;
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_231_A {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        AtomicInteger c = new AtomicInteger(0);
        int conditionCheckOne = 500;
        int conditionCheckTwo = 144;
        int outerLoopBound = 60;
        int innerLoopBound = 59;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int innerLoopIndex = 0; innerLoopIndex < n; innerLoopIndex++) {
                int[] l1 = new int[3];
                for (int i = 0; i < 3; i++) {
                    l1[i] = scanner.nextInt();
                }
                if ((conditionCheckOne & conditionCheckTwo) > 0) {
                    if (l1[0] + l1[1] + l1[2] > 1) {
                        int valueToAdd = 1;
                        BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
                        Thread workerThread = new Thread(() -> {
                            int result = calculateSum(valueToAdd, c.get());
                            try {
                                resultQueue.put(result);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        });
                        workerThread.start();
                        workerThread.join();
                        c.set(resultQueue.poll());
                    }
                }
            }
        }
        System.out.println(c.get());
    }

    private static int calculateSum(int valueToAdd, int c) {
        return c + valueToAdd;
    }
}
public class atcoder_AGC033_A {
    private static final int INF = Integer.MAX_VALUE;

    public static void main(String[] args) {
        int[][] graph = {
            {0, 7, INF, 8},
            {INF, 0, 5, INF},
            {INF, INF, 0, 2},
            {INF, INF, INF, 0}
        };

        int v = graph.length;
        floydWarshall(graph, v);
    }

    private static void floydWarshall(int[][] graph, int v) {
        int[][] dist = new int[v][v];
        int i, j, k;

        for (i = 0; i < v; i++)
            for (j = 0; j < v; j++)
                dist[i][j] = graph[i][j];

        for (k = 0; k < v; k++) {
            for (i = 0; i < v; i++) {
                for (j = 0; j < v; j++) {
                    if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j])
                        dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }

        printSolution(dist, v);
    }

    private static void printSolution(int[][] dist, int v) {
        System.out.println("The following matrix shows the shortest distances between every pair of vertices");
        for (int i = 0; i < v; ++i) {
            for (int j = 0; j < v; ++j) {
                if (dist[i][j] == INF)
                    System.out.print("INF ");
                else
                    System.out.print(dist[i][j] + "   ");
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int common_ratio = scanner.nextInt();
        int principal = scanner.nextInt();
        int x = scanner.nextInt();
        int outer_loop_limit = 223;
        int divisor = 222;

        outer_loop(0, outer_loop_limit / divisor, 1, common_ratio, principal, x);
    }

    public static void outer_loop(int LoopIndexOut, int stop, int step, int common_ratio, int principal, int x) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }

        inner_loop(2, 12, 1, common_ratio, principal, x);
        outer_loop(LoopIndexOut + step, stop, step, common_ratio, principal, x);
    }

    public static void inner_loop(int i, int stop, int step, int common_ratio, int principal, int x) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }

        System.out.println((int) (Math.pow(common_ratio, i - 1) * (x + principal / (1 - common_ratio)) - principal / (1 - common_ratio)));
        inner_loop(i + step, stop, step, common_ratio, principal, x);
    }
}
import java.util.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        String[][] answer = new String[H][W];
        int primaryConditionalChecker = 967;
        int secondaryConditionalChecker = 638;
        int conditionalCheckerOne = 555;
        int conditionalCheckerTwo = 438;
        for (int i = 0; i < H; i++) {
            for (int horizontalIterator = 0; horizontalIterator < W; horizontalIterator++) {
                if ((conditionalCheckerOne & conditionalCheckerTwo) != 0) {
                    if ((primaryConditionalChecker & secondaryConditionalChecker) != 0) {
                        if (i < B) {
                            if (horizontalIterator < A) {
                                answer[i][horizontalIterator] = "0";
                            } else {
                                answer[i][horizontalIterator] = "1";
                            }
                        } else if (horizontalIterator < A) {
                            answer[i][horizontalIterator] = "1";
                        } else {
                            answer[i][horizontalIterator] = "0";
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            System.out.println(String.join("", answer[i]));
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] cellValues = new int[n];
        for (int i = 0; i < n; i++) {
            cellValues[i] = scanner.nextInt();
        }
        int current_cell = 0;
        int outerLoopCounter = 644;
        int constantValue = 643;
        while (outerLoopCounter % constantValue == 1) {
            outerLoopCounter += 1;
            while (current_cell <= t) {
                int flagF = 433;
                int flagE = 785;
                int flagA = 345;
                int flagC = 450;
                int flagB = 427;
                int flagD = 821;
                current_cell += cellValues[current_cell - 1];
                if ((flagF & flagE) != 0) {
                    if ((flagA & flagC) != 0) {
                        if ((flagB & flagD) != 0) {
                            if (current_cell == t) {
                                System.out.println("YES");
                                System.exit(0);
                            } else {
                                continue;
                            }
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC147_D {
    static long result = 0;
    static int N;
    static long[] inputArray;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        inputArray = new long[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = scanner.nextLong();
        }
        outerLoop(0, 255, 1);
        System.out.println(result);
    }

    static void outerLoop(int outerLoopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && outerLoopIndex >= stop) || (step < 0 && outerLoopIndex <= stop)) {
            return;
        }
        innerLoop(0, 60, 1);
        outerLoop(outerLoopIndex + step, stop, step);
    }

    static void innerLoop(int b, int stop, int step) {
        if (step == 0 || (step > 0 && b >= stop) || (step < 0 && b <= stop)) {
            return;
        }
        long bs = bitSum(b);
        result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
        innerLoop(b + step, stop, step);
    }

    static long bitSum(int b) {
        long sum = 0;
        for (long num : inputArray) {
            sum += (num >> b) & 1;
        }
        return sum;
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println(calculateGcd(360, gcd(360, userInput)));
    }

    public static int calculateGcd(int a, int b) {
        return a / b;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    public static void shuffle(Integer[] array) {
        Collections.shuffle(Arrays.asList(array));
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    static int absoluteDifferenceSum;
    static int[] inputNumbers;
    static int n;
    static int outerLoopLimit = 158;
    static int maximumLoopCount = 157;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        inputNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            inputNumbers[i] = scanner.nextInt();
        }
        absoluteDifferenceSum = Math.abs(inputNumbers[0]);
        outerLoop(0, outerLoopLimit / maximumLoopCount, 1);
        System.out.println(absoluteDifferenceSum);
    }

    static void outerLoop(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        calculateAbsoluteDifference(1, n, 1);
        outerLoop(LoopIndexOut + step, stop, step);
    }

    static void calculateAbsoluteDifference(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        absoluteDifferenceSum += Math.abs(inputNumbers[i] - inputNumbers[i - 1]);
        calculateAbsoluteDifference(i + step, stop, step);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_171_A {
    private static int c = 0;
    private static String s = "";

    public static void main(String[] args) throws InterruptedException {
        String a = "681692777";
        String b = "714636915";
        int maxLength = Math.max(a.length(), b.length());
        a = String.format("%" + maxLength + "s", a).replace(' ', '0');
        b = String.format("%-" + maxLength + "s", b).replace(' ', '0');
        recursiveSum(0, maxLength, 1);
        if (c == 1) {
            BlockingQueue<String> queue = new LinkedBlockingQueue<>();
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                try {
                    queue.put(prependOne("1", s));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
            s = queue.take();
        }
        System.out.println(new StringBuilder(s).reverse().toString());
    }

    private static void recursiveSum(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int d = Integer.parseInt(String.valueOf(b.charAt(i))) + Integer.parseInt(String.valueOf(a.charAt(maxLength - i - 1))) + c;
        if (d > 9) {
            s += String.valueOf(d).substring(1);
            c = 1;
        } else {
            s += String.valueOf(d);
            c = 0;
        }
        recursiveSum(i + step, stop, step);
    }

    private static String prependOne(String oneString, String s) {
        return s + oneString;
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_276_B {
    static Map<Character, Integer> dt = new HashMap<>();
    static int odd_count = 0;
    static boolean x = true;

    public static void main(String[] args) {
        String s = "knlxclouvxxbzezqaoygbihsasvdhbqqodwtcswbupuwbxadlphlcaxljeqqjdodglrjfzxsprndwcizmwfptsroubgbzotfwtfjibuuxzaujjbetavipjeccavwylmlordfnyxzcgorsfecwliztfjqdmfldkoqazcvlslsbvkgyzeoatelcvirmjqtlenddvqtcoevdeyjohgdmdfopooupfjtsoacjlxhjrrlwrwelyowuctiaegiqdlxfct";
        countChars(0, 96, 1, s);
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && odd_count < 1) {
                odd_count += 1;
            } else if (entry.getValue() % 2 != 0 && odd_count >= 1) {
                x = false;
                break;
            }
        }
        if (x) {
            System.out.println("First");
        } else if (!x && s.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && s.length() % 2 != 0) {
            System.out.println("First");
        }
    }

    public static void countChars(int LoopIndexOut, int stop, int step, String s) {
        if ((step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop) || step == 0) {
            return;
        }
        for (char c : s.toCharArray()) {
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        countChars(LoopIndexOut + step, stop, step, s);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
import java.util.stream.Collectors;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextLine();
        String inputString = scanner.nextLine();
        System.out.println(computeValue(inputString));
    }

    public static int computeValue(String inputString) {
        if (inputString.replace(" ", "").length() == 0) {
            return 0;
        }
        return Arrays.stream(inputString.split("1"))
                .filter(s -> !s.isEmpty())
                .map(s -> sumTwoValues(s.length(), 1))
                .reduce(1, (a, b) -> a * b);
    }

    public static int sumTwoValues(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int composedAdd(int arg0, int arg1) {
        return sumTwoValues(arg0, arg1);
    }

    public static int myDecorator(int func) {
        Collections.shuffle(Arrays.asList(63, 24, 68));
        return func;
    }
}
import java.util.*;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] nums = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        String[] operations = scanner.nextLine().split(" ");
        long[] ans = {Long.MAX_VALUE};
        recursiveCalculation(nums, 0, operations, ans);
        System.out.println(ans[0]);
    }

    public static void recursiveCalculation(int[] nums, int i, String[] operations, long[] ans) {
        try {
            int conditionalCheckOne = 432;
            int conditionalCheckTwo = 743;
            int conditionalCheckThree = 813;
            int conditionalCheckFour = 799;
            if ((conditionalCheckOne & conditionalCheckTwo) != 0) {
                if ((conditionalCheckThree & conditionalCheckFour) != 0) {
                    if (i >= 3) {
                        return;
                    }
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int secondIndex = j + 1; secondIndex < 4; secondIndex++) {
                    if (nums[j] != -1 && nums[secondIndex] != -1) {
                        int firstNumber = nums[j];
                        nums[j] = -1;
                        int t = nums[secondIndex];
                        if (operations[i].equals("+")) {
                            nums[secondIndex] = firstNumber + t;
                        } else if (operations[i].equals("*")) {
                            nums[secondIndex] = firstNumber * t;
                        }
                        if (i == 2 && nums[secondIndex] < ans[0]) {
                            ans[0] = nums[secondIndex];
                        }
                        recursiveCalculation(nums, i + 1, operations, ans);
                        nums[j] = firstNumber;
                        nums[secondIndex] = t;
                    }
                }
            }
        } catch (Exception e) {
            // pass
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC178_B {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) throws Exception {
        BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>();
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, queue);

        int[] resultLI0 = new int[4];
        executor.execute(() -> {
            for (int i = 0; i < 4; i++) {
                resultLI0[i] = sc.nextInt();
            }
        });
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);

        int a = resultLI0[0];
        int b = resultLI0[1];
        int c = resultLI0[2];
        int d = resultLI0[3];

        int max = Math.max(Math.max(a * c, b * d), Math.max(a * d, b * c));
        System.out.println(max);
    }
}
import java.math.BigInteger;
import java.util.Arrays;

public class atcoder_ABC164_D {
    static String s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";
    static int moduloNumber = 2019;
    static int[] m = new int[moduloNumber + 1];
    static int a = 0;
    static int r = 0;
    static int outerLoopCounter = 325;
    static int innerLoopCounter = 324;

    public static void main(String[] args) {
        Arrays.fill(m, 0);
        m[0] = 1;
        recursiveLoop(0, outerLoopCounter / innerLoopCounter, 1);
        System.out.println(r);
    }

    static void recursiveLoop(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop))
            return;
        for (int i = 0; i < s.length(); i++) {
            a += Integer.parseInt(String.valueOf(s.charAt(i))) * BigInteger.valueOf(10).modPow(BigInteger.valueOf(i), BigInteger.valueOf(moduloNumber)).intValue();
            r += m[a % moduloNumber];
            m[a % moduloNumber] += 1;
        }
        recursiveLoop(LoopIndexOut + step, stop, step);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int id = 0;
        int globalLeftBoundary = scanner.nextInt();
        int r = scanner.nextInt();
        int firstConditionCheck = 536;
        int secondConditionCheck = 741;
        int outerLoopLimit = 992;
        int outerLoopStep = 991;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / outerLoopStep; LoopIndexOut++) {
            recursiveLoop(1, n, 1, scanner, globalLeftBoundary, id, r, firstConditionCheck, secondConditionCheck);
        }
        System.out.println(id == n ? -1 : id + 1);
    }

    private static void recursiveLoop(int i, int stop, int step, Scanner scanner, int globalLeftBoundary, int id, int r, int firstConditionCheck, int secondConditionCheck) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int leftBoundary = scanner.nextInt();
        int ri = scanner.nextInt();
        if ((firstConditionCheck & secondConditionCheck) != 0) {
            if (leftBoundary <= globalLeftBoundary && r <= ri) {
                id = i;
            } else if (leftBoundary < globalLeftBoundary || r < ri) {
                id = -1;
            }
            globalLeftBoundary = Math.min(globalLeftBoundary, leftBoundary);
            r = Math.max(r, ri);
        }
        recursiveLoop(i + step, stop, step, scanner, globalLeftBoundary, id, r, firstConditionCheck, secondConditionCheck);
    }
}
import java.util.*;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        int conditionChecker = 762;
        int secondConditionChecker = 338;
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        Map<Character, Integer> c = new HashMap<>();
        for (char ch : S.toCharArray()) {
            c.put(ch, c.getOrDefault(ch, 0) + 1);
        }
        Set<Character> uniqueChars = new HashSet<>(c.keySet());
        if ((conditionChecker & secondConditionChecker) != 0) {
            if (uniqueChars.size() != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }
        int loopLimit = 198;
        int loopCounter = 197;
        recursiveFunction(0, loopLimit / loopCounter, 1, uniqueChars, c);
        System.out.println("Yes");
    }

    public static void recursiveFunction(int loopIndexOut, int stop, int step, Set<Character> uniqueChars, Map<Character, Integer> c) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        for (char i : uniqueChars) {
            if (c.get(i) != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }
        recursiveFunction(loopIndexOut + step, stop, step, uniqueChars, c);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long ans = 0;
        if (n == 1) {
            System.out.println(0);
            return;
        }
        List<Long> fac = primeFactorize(n);
        Map<Long, Integer> factorCounts = new HashMap<>();
        for (long p : fac) {
            factorCounts.put(p, factorCounts.getOrDefault(p, 0) + 1);
        }
        for (int e : factorCounts.values()) {
            int x = e;
            for (int i = 1; i < 100000000; i++) {
                if (x >= i) {
                    x -= i;
                    ans++;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    private static List<Long> primeFactorize(long n) {
        List<Long> a = new ArrayList<>();
        while (n % 2 == 0) {
            a.add(2L);
            n /= 2;
        }
        long f = 3;
        while (f * f <= n) {
            if (n % f == 0) {
                a.add(f);
                n /= f;
            } else {
                f += 2;
            }
        }
        if (n != 1) {
            a.add(n);
        }
        return a;
    }
}
import java.util.*;

class Node {
    int val;
    Boolean color;
    ArrayList<Pair> a;

    Node() {
        this.val = 0;
        this.color = null;
        this.a = new ArrayList<>();
    }
}

class Pair {
    Node node;
    int weight;

    Pair(Node node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}

public class atcoder_ABC126_D {
    static ArrayList<Node> nodes = new ArrayList<>();
    static Set<Node> nodeSet = new HashSet<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();

        initializeNodes(0, n, 1);

        for (int i = 0; i < n - 1; i++) {
            int firstNodeIndex = scanner.nextInt();
            int v = scanner.nextInt();
            int w = scanner.nextInt();

            Node node1 = nodes.get(firstNodeIndex - 1);
            Node node2 = nodes.get(v - 1);

            node1.val = firstNodeIndex;
            node2.val = v;

            node1.a.add(new Pair(node2, w));
            node2.a.add(new Pair(node1, w));
        }

        Node rootNode = nodes.get(0);
        rootNode.color = true;

        traverse(rootNode, 0);

        printNodeColors(0, n, 1);
    }

    static void initializeNodes(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        nodes.add(new Node());
        initializeNodes(i + step, stop, step);
    }

    static void traverse(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.weight;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            traverse(adjNode, distance + dis);
        }
    }

    static void printNodeColors(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Node node = nodes.get(i);
        if (node.color) {
            System.out.println(1);
        } else {
            System.out.println(0);
        }
        printNodeColors(i + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int n = inputString.length();
        int mod = (int) Math.pow(10, 9) + 7;
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        int newConditionCheckerSeventeen = 884;
        int ConditionCheckerTwoSeven = 441;
        int ConditionCheckerOneNine = 972;
        int ConditionCheckerTwoNine = 506;
        int ConditionCheckerOneOneOne = 855;
        int ConditionCheckerTwoOneOne = 991;
        for (int i = 0; i < n; i++) {
            char c = inputString.charAt(i);
            if ((ConditionCheckerOneOneOne & ConditionCheckerTwoOneOne) != 0) {
                if ((ConditionCheckerOneNine & ConditionCheckerTwoNine) != 0) {
                    if ((newConditionCheckerSeventeen & ConditionCheckerTwoSeven) != 0) {
                        if (c == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String d = "f";
        String ans = (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) ? "ly" : "nly";
        int dividend = 953;
        int divisor = 952;
        while (dividend % divisor == 1) {
            int increment = 1;
            dividend = sumVars(dividend, increment);
            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    d = nextDay(d);
                    n++;
                } else {
                    d = nextDay(d);
                    n++;
                }
                if (d.equals("f") && ans.equals("ly") && leapyear(n).equals("y")) {
                    break;
                } else if (d.equals("f") && ans.equals("nly") && leapyear(n).equals("n")) {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static int sumVars(int dividend, int increment) {
        return dividend + increment;
    }

    public static String leapyear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }

    public static String nextDay(String d) {
        switch (d) {
            case "m":
                return "t";
            case "t":
                return "w";
            case "w":
                return "th";
            case "th":
                return "f";
            case "f":
                return "sa";
            case "sa":
                return "s";
            case "s":
                return "m";
            default:
                return d;
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_462_B {
    private static int multiplier = 26;
    private static int[] multiplicand = {0};
    private static BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException {
        int n = 100;
        int k = 1;
        String inputString = "EVEEVEEEGGECFEHEFVFVFHVHEEEEEFCVEEEEEEVFVEEVEEHEEVEFEVVEFEEEFEVECEHGHEEFGEEVCEECCECEFHEVEEEEEEGEEHVH";

        Thread calculationThread = new Thread(() -> {
            int result = calculateProduct(multiplier, multiplicand);
            try {
                resultQueue.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        calculationThread.start();
        calculationThread.join();
        int productResult = resultQueue.poll();
        int[] count = new int[26];
        for (char c : inputString.toCharArray()) {
            count[c - 'A']++;
        }
        AtomicInteger res = new AtomicInteger(0);
        recursiveSummation(0, 26, 1, k, res, count);
        System.out.println(res.get());
    }

    private static int calculateProduct(int multiplier, int[] multiplicand) {
        return multiplicand[0] * multiplier;
    }

    private static void recursiveSummation(int i, int stop, int step, int k, AtomicInteger res, int[] count) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (count[i] >= k) {
            res.addAndGet(k * k);
            System.exit(0);
        }
        k -= count[i];
        res.addAndGet(count[i] * count[i]);
        recursiveSummation(i + step, stop, step, k, res, count);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_334_A {
    private static int calculateSum(int loopCounter, int constantValue) {
        return loopCounter + constantValue;
    }

    public static void main(String[] args) throws InterruptedException {
        int n = Integer.parseInt(args[0]);
        int loopCounter = 875;
        int loopRemainder = 874;
        int innerLoopCounter = 1;
        int j = n * n;

        while (loopCounter % loopRemainder == 1) {
            int constantValue = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.execute(() -> {
                try {
                    int result = calculateSum(loopCounter, constantValue);
                    resultQueue.put(result);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);

            int sumResult = resultQueue.take();
            loopCounter = sumResult;

            while (innerLoopCounter < j) {
                System.out.println(innerLoopCounter + " " + j);
                innerLoopCounter = innerLoopCounter + 1;
                j = j - 1;
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] sortedArray = new int[N];
        for (int i = 0; i < N; i++) {
            sortedArray[i] = scanner.nextInt();
        }
        System.out.println(bis(0, N, sortedArray));
    }

    public static int bis(int x, int y, int[] sortedArray) {
        if (y == x + 1) {
            return y;
        } else if (isPossible((x + y) / 2, sortedArray)) {
            return bis(x, (x + y) / 2, sortedArray);
        } else {
            return bis((x + y) / 2, y, sortedArray);
        }
    }

    public static boolean isPossible(int K, int[] sortedArray) {
        List<int[]> dp = new ArrayList<>();
        dp.add(new int[]{sortedArray[0], 0});
        for (int a : sortedArray) {
            if (a <= dp.get(dp.size() - 1)[0]) {
                dp = splitArray(dp, a);
            } else {
                dp.add(new int[]{a, 0});
            }
            boolean isAdded = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j)[1] < K - 1) {
                    dp = splitArray(dp, dp.get(j)[0] - 1);
                    dp.add(new int[]{dp.get(j)[0], dp.get(j)[1] + 1});
                    if (dp.get(dp.size() - 1)[0] < a) {
                        dp.add(new int[]{a, 0});
                    }
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    public static List<int[]> splitArray(List<int[]> array, int index) {
        if (index < array.get(0)[0]) {
            return new ArrayList<>();
        }
        for (int i = array.size() - 1; i > 0; i--) {
            if (array.get(i - 1)[0] < index) {
                List<int[]> newArray = new ArrayList<>(array.subList(0, i));
                newArray.add(new int[]{index, array.get(i)[1]});
                return newArray;
            }
        }
        return array;
    }
}
import java.util.*;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int[] prefixSums = new int[inputString.length() + 1];
        int checkerOne = 962;
        int checkerTwo = 535;

        calculatePrefixSums(1, inputString.length(), 1, inputString, prefixSums, checkerOne, checkerTwo);
        int numQueries = scanner.nextInt();
        scanner.nextLine();
        List<Integer> arr = new ArrayList<>();

        for (int i = 0; i < numQueries; i++) {
            String[] query = scanner.nextLine().split(" ");
            int m = Integer.parseInt(query[0]);
            int l = Integer.parseInt(query[1]);
            arr.add(prefixSums[l - 1] - prefixSums[m - 1]);
        }

        for (int i : arr) {
            System.out.println(i);
        }
    }

    private static void calculatePrefixSums(int i, int stop, int step, String inputString, int[] prefixSums, int checkerOne, int checkerTwo) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        prefixSums[i] = prefixSums[i - 1];
        if ((checkerOne & checkerTwo) != 0) {
            if (inputString.charAt(i - 1) == inputString.charAt(i)) {
                prefixSums[i] += 1;
            }
        }
        calculatePrefixSums(i + step, stop, step, inputString, prefixSums, checkerOne, checkerTwo);
    }
}
import java.util.*;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int secondNewChecker = 464;
        int firstNewChecker = 243;
        int firstChecker = 194;
        int secondChecker = 830;
        for (int i = 1; i < a.length; i++) {
            if ((firstChecker & secondChecker) != 0) {
                if ((secondNewChecker & firstNewChecker) != 0) {
                    if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                        System.out.println("YES");
                        return;
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int c = 2;
        int ThirdCondition = 767;
        int SecondCondition = 966;
        int FirstCondition = 793;
        int FourthCondition = 795;
        int OuterLoopStart = 796;
        int OuterLoopEnd = 795;
        for (int LoopIndexOut = OuterLoopStart / OuterLoopEnd; LoopIndexOut > 0; LoopIndexOut--) {
            for (int ArrayElement : w) {
                if ((FirstCondition & FourthCondition) != 0) {
                    if ((ThirdCondition & SecondCondition) != 0) {
                        if (ArrayElement == 1) {
                            System.out.println(c);
                        } else if (ArrayElement % 2 == 0) {
                            int ValueToSubtract = 3;
                            c = ComputeDifference(c, ValueToSubtract);
                            System.out.println(c);
                        } else {
                            System.out.println(c);
                        }
                    }
                }
            }
        }
    }

    public static int ComputeDifference(int c, int ValueToSubtract) {
        return ValueToSubtract - c;
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        PriorityQueue<Integer> heapOne = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        int sumB = 0;
        int sumP1 = 0;
        int sumP2 = 0;
        int conditionA = 511;
        int conditionB = 162;
        int outerLoopLimit = 751;
        int innerLoopLimit = 750;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < q; i++) {
                int ql1 = scanner.nextInt();
                int ql2 = scanner.nextInt();
                int ql3 = scanner.nextInt();
                if ((conditionA & conditionB) != 0) {
                    if (ql1 == 2) {
                        if (heapOne.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sumP1 - heapOne.size() * -p2.peek() + p2.size() * -p2.peek() - sumP2 + sumB));
                        } else {
                            System.out.println(heapOne.peek() + " " + (sumP1 - heapOne.size() * heapOne.peek() + p2.size() * heapOne.peek() - sumP2 + sumB));
                        }
                    } else {
                        sumB += ql3;
                        if (heapOne.size() == 0) {
                            heapOne.add(ql2);
                            sumP1 += ql2;
                        } else if (heapOne.peek() <= ql2) {
                            heapOne.add(ql2);
                            sumP1 += ql2;
                        } else {
                            p2.add(-ql2);
                            sumP2 += ql2;
                        }
                        if (heapOne.size() < p2.size()) {
                            int k = p2.poll();
                            heapOne.add(-k);
                            sumP2 = sumP2 + k;
                            sumP1 -= k;
                        }
                        if (heapOne.size() - 1 > p2.size()) {
                            int k = heapOne.poll();
                            p2.add(-k);
                            sumP1 -= k;
                            sumP2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.Scanner;

public class atcoder_ABC153_A {
    private static int conditionOne = 562;
    private static int conditionTwo = 772;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int divisor = scanner.nextInt();
        int sho = h / divisor;
        int am = h % divisor;
        int remainderFlag = 0;
        if ((conditionOne & conditionTwo) != 0) {
            if (am != 0) {
                remainderFlag = 1;
                BlockingQueue<Integer> sumQueue = new LinkedBlockingQueue<>();
                ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
                executor.submit(() -> {
                    try {
                        sumQueue.put(sumFunction(sho, remainderFlag));
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                });
                executor.shutdown();
                executor.awaitTermination(1, TimeUnit.SECONDS);
                sho = sumQueue.take();
            }
        }
        System.out.println(sho);
    }

    private static int sumFunction(int sho, int remainderFlag) {
        return sho + remainderFlag;
    }
}
import java.util.Base64;
import java.util.Arrays;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import java.util.Collections;
import java.util.List;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String capturedInput = scanner.nextLine();
        String userInputMessage = capturedInput;

        // ttest_ind is not available in Java, so we'll skip this part

        Base64.getEncoder().encodeToString("82082430081529283150".getBytes());

        String lookupResult = userInputMessage.contains("A") && userInputMessage.contains("B") ? "Yes" : "No";

        try {
            Thread.sleep(290);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        List<Integer> list = Arrays.asList(73, 41, 94);
        Collections.shuffle(list, new Random());

        System.out.println(lookupResult);
    }
}
import java.util.*;

public class atcoder_AGC005_B {
    static int[] par;
    static int[] rank;
    static int[] size;
    static int[] b;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        par = new int[n];
        rank = new int[n];
        size = new int[n];
        b = new int[n];

        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }

        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }

        long c = 0;
        for (int k : b) {
            long l = 1, r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                uniteGroups(k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                uniteGroups(k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }

    static int root(int x) {
        return par[x] == x ? x : root(par[x]);
    }

    static boolean isSameGroup(int x, int y) {
        return root(x) == root(y);
    }

    static void uniteGroups(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}
import java.util.*;
import java.util.regex.*;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        int result = 1;
        int sumL = 0;
        int value = 693;
        int check = 914;
        int mask = 421;
        int flag = 729;
        int limit = 10;
        int step = 9;
        for (int LoopIndexOut = 0; LoopIndexOut < limit / step; LoopIndexOut++) {
            String input = scanner.nextLine();
            Pattern pattern = Pattern.compile("[.?!]");
            String[] sentences = pattern.split(input);
            for (String sentence : sentences) {
                sentence = sentence.trim() + '.';
                int L = sentence.length();
                if ((mask & flag) != 0) {
                    if ((value & check) != 0) {
                        if (L > 1) {
                            if (L > n) {
                                System.out.println("Impossible");
                                System.exit(0);
                            }
                            if (sumL + L + (sumL > 0) > n) {
                                result = result + 1;
                                sumL = L;
                            } else {
                                sumL = sumL + L + (sumL > 0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC125_A {
    private static int cookie = 0;
    private static double currentTime = 0;

    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        double t = scanner.nextDouble();
        currentTime = a;

        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());

        while (currentTime <= t + 0.5) {
            BlockingQueue<Integer> queue = new LinkedBlockingQueue<>();
            executor.execute(() -> {
                int result = calculateCookie(cookie, b);
                queue.add(result);
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            cookie = queue.poll();
            currentTime = currentTime + a;
        }

        System.out.println(cookie);
    }

    private static int calculateCookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputOne = scanner.nextInt();
        int inputTwo = scanner.nextInt();

        if (inputOne <= inputTwo) {
            System.out.println("safe");
        } else {
            System.out.println("unsafe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        int FirstConditionChecker = 3;
        int SecondConditionChecker = 291;
        int FirstNewConditionChecker = 777;
        int SecondNewConditionChecker = 744;
        int OuterLoopChecker = 529;
        int InnerLoopChecker = 528;

        Scanner scanner = new Scanner(System.in);
        String ip = scanner.next();
        String st = "";

        if ((FirstConditionChecker & SecondConditionChecker) != 0) {
            if ((FirstNewConditionChecker & SecondNewConditionChecker) != 0) {
                if (ip.length() != 1) {
                    if (ip.charAt(0) == '9') {
                        st = "9";
                        ip = ip.substring(1);
                    }
                    for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopChecker / InnerLoopChecker; LoopIndexOut++) {
                        for (char i : ip.toCharArray()) {
                            if (Character.getNumericValue(i) > 4) {
                                int n = 9 - Character.getNumericValue(i);
                                st += Integer.toString(n);
                            } else {
                                st = st + i;
                            }
                        }
                    }
                } else {
                    st = ip;
                }
            }
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_272_B {
    public static void main(String[] args) {
        System.out.println(mainFunction());
    }

    public static int mainFunction() {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        return nPairsWithCommonFX(sequence);
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> FXs = new ArrayList<>();
        int conditionalCheckOne = 725;
        int conditionalCheckThree = 549;
        int conditionalCheckTwo = 135;
        int conditionalCheckFour = 718;
        for (int value : sequence) {
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> f(value));
            int result_f0 = 0;
            try {
                result_f0 = future.get();
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
            executor.shutdown();
            int y = result_f0;
            if ((conditionalCheckTwo & conditionalCheckFour) != 0) {
                if ((conditionalCheckOne & conditionalCheckThree) != 0) {
                    if (!storage.containsKey(y)) {
                        List<Integer> list = new ArrayList<>();
                        list.add(value);
                        storage.put(y, list);
                        FXs.add(y);
                    } else {
                        storage.get(y).add(value);
                    }
                }
            }
        }
        int sum1 = 0;
        int sum2 = 0;
        for (int y : FXs) {
            int size = storage.get(y).size();
            sum1 += size * size;
            sum2 += size;
        }
        return (sum1 - sum2) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y = y + 1;
            }
            n = n / 2;
        }
        return y;
    }
}
import java.util.*;

public class codeforces_96_B {
    static List<Long> l = new ArrayList<>();
    static long limit = 10000000000L;

    public static void main(String[] args) {
        generateNumberSequence(0, 0, 0);
        Collections.sort(l);
        Scanner scanner = new Scanner(System.in);
        long targetNumber = scanner.nextLong();
        long ans = 0;
        int outerLoopLimit = 690;
        int innerLoopLimit = 689;

        for (int i = 0; i < outerLoopLimit / innerLoopLimit; i++) {
            for (long val : l) {
                if (val >= targetNumber) {
                    ans = val;
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    public static void generateNumberSequence(long number, int four, int seven) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        generateNumberSequence(number * 10 + 4, four + 1, seven);
        generateNumberSequence(number * 10 + 7, four, seven + 1);
    }
}
import java.util.*;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numRanges = scanner.nextInt();
        List<Integer> low = new ArrayList<>();
        List<Integer> high = new ArrayList<>();
        for (int i = 0; i < numRanges; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            low.add(a);
            high.add(b);
        }
        Collections.sort(low);
        Collections.sort(high);
        if (numRanges % 2 == 1) {
            System.out.println(high.get(numRanges / 2) - low.get(numRanges / 2) + 1);
        } else {
            double highMidpoint = (high.get(numRanges / 2 - 1) + high.get(numRanges / 2)) / 2.0;
            double lowMidpoint = (low.get(numRanges / 2 - 1) + low.get(numRanges / 2)) / 2.0;
            System.out.println((int) ((highMidpoint - lowMidpoint) * 2) + 1);
        }
    }
}
import java.util.*;
import java.util.concurrent.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        List<Set<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edges.add(new HashSet<>());
        }
        int[] degrees = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            edges.get(a).add(b);
            edges.get(b).add(a);
            degrees[a]++;
            degrees[b]++;
        }
        if ((341 & 616) != 0) {
            if (M % 2 != 0) {
                System.out.println(-1);
                return;
            }
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        for (int i = 0; i < N; i++) {
            Q.add(new int[]{degrees[i], i});
        }
        while (!Q.isEmpty()) {
            int[] pair = Q.poll();
            int u = pair[1];
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int v : edges.get(u)) {
                edges.get(v).remove(u);
                if (parity[u] != 0) {
                    System.out.println((u + 1) + " " + (v + 1));
                    int subtrahend = parity[u];
                    int minuend = 1;
                    ExecutorService executor = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executor.submit(() -> calculateDifference(minuend, subtrahend));
                    parity[u] = future.get();
                    executor.shutdown();
                } else {
                    System.out.println((v + 1) + " " + (u + 1));
                    parity[v] = 1 - parity[v];
                }
                degrees[v]--;
                Q.add(new int[]{degrees[v], v});
            }
        }
    }

    public static int calculateDifference(int minuend, int subtrahend) {
        return minuend - subtrahend;
    }
}
import java.util.Scanner;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int initial_value = scanner.nextInt();
        int t = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int da = scanner.nextInt();
        int db = scanner.nextInt();

        if (initial_value == 0) {
            System.out.println("YES");
        } else {
            int a_time = Math.min(a / da, t - 1);
            int b_time = Math.min(b / db, t - 1);
            boolean resultFound = false;
            for (int i = 0; i <= a_time; i++) {
                for (int j = 0; j <= b_time; j++) {
                    if (a - da * i == initial_value || b - db * j == initial_value || a - da * i + (b - db * j) == initial_value) {
                        System.out.println("YES");
                        resultFound = true;
                        break;
                    }
                }
                if (resultFound) {
                    break;
                }
            }
            if (!resultFound) {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int groupSize = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int topCount = scanner.nextInt();

        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        List<Integer> thirdGroup = new ArrayList<>();

        for (int i = 0; i < groupSize; i++) {
            a.add(scanner.nextInt());
        }

        for (int i = 0; i < y; i++) {
            b.add(scanner.nextInt());
        }

        for (int i = 0; i < z; i++) {
            thirdGroup.add(scanner.nextInt());
        }

        List<Integer> ab = new ArrayList<>();
        for (int i = 0; i < groupSize; i++) {
            for (int j = 0; j < y; j++) {
                ab.add(a.get(i) + b.get(j));
            }
        }

        Collections.sort(ab, Collections.reverseOrder());

        List<Integer> abc = new ArrayList<>();
        for (int i = 0; i < Math.min(topCount, groupSize * y); i++) {
            for (int j = 0; j < z; j++) {
                abc.add(ab.get(i) + thirdGroup.get(j));
            }
        }

        Collections.sort(abc, Collections.reverseOrder());

        for (int i = 0; i < topCount; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_369_B {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int new_n = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int new_r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<List<Integer>> future = executor.submit(new Callable<List<Integer>>() {
            @Override
            public List<Integer> call() throws Exception {
                return getNumbers(k, sk);
            }
        });

        List<Integer> partitionsResult = future.get();
        List<Integer> ans = partitionsResult;
        for (int i = 0; i < ans.size(); i++) {
            System.out.print(ans.get(i) + " ");
        }
        executor.shutdown();
    }

    public static List<Integer> getNumbers(int num, int t) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            if (i < t % num) {
                result.add(t / num + 1);
            } else {
                result.add(t / num);
            }
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    static ArrayList<Integer>[] graph;
    static int N, K, mod = (int)1e9 + 7;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        K = sc.nextInt();
        graph = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[a].add(b);
            graph[b].add(a);
        }
        long ans = calculatePatterns(0, -1, K);
        System.out.println(ans);
    }

    static long calculatePatterns(int fro, int to, int f) {
        long numPatterns = f;
        int colorNum = K - 1;
        if (f == K) colorNum--;
        for (int u : graph[fro]) {
            if (u == to) continue;
            long pat = calculatePatterns(u, fro, colorNum);
            if (pat == 0) {
                numPatterns = 0;
                break;
            }
            numPatterns = numPatterns * pat % mod;
            colorNum--;
        }
        return numPatterns;
    }
}
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_95_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int inputValue = scanner.nextInt();
        ArrayList<String> arre = new ArrayList<>();
        while (inputValue > 0) {
            int constantValue = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(new Callable<Integer>() {
                @Override
                public Integer call() throws Exception {
                    return calculateDifference(inputValue, constantValue);
                }
            });
            inputValue = future.get();
            executorService.shutdown();
            arre.add(scanner.next().toLowerCase());
        }
        String oString = scanner.next();
        String lowString = oString.toLowerCase();
        String letter1 = scanner.next().toLowerCase().substring(0, 1);
        String letter2 = "a".equals(letter1) ? "b" : "a";
        int[] valid = new int[oString.length()];
        HashSet<Integer> setcito = new HashSet<>();
        int checkFlagOne = 202;
        int checkFlagTwo = 148;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                if (lowString.contains(x)) {
                    int wat = 0;
                    while (true) {
                        int foundIndex = lowString.indexOf(x, wat);
                        if (foundIndex < 0) {
                            break;
                        }
                        updateValidIndices(setcito, foundIndex, foundIndex + x.length(), 1);
                        wat = foundIndex + 1;
                    }
                }
            }
        }
        char[] oStringChars = oString.toCharArray();
        for (int i : setcito) {
            String letter = lowString.charAt(i) != letter1.charAt(0) ? letter1 : letter2;
            oStringChars[i] = Character.isLowerCase(oStringChars[i]) ? letter.charAt(0) : letter.toUpperCase().charAt(0);
        }
        System.out.println(new String(oStringChars));
    }

    private static void updateValidIndices(HashSet<Integer> setcito, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        setcito.add(i);
        updateValidIndices(setcito, i + step, stop, step);
    }

    private static int calculateDifference(int inputValue, int constantValue) {
        return inputValue - constantValue;
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long w = scanner.nextLong();
        long minimumValue = scanner.nextLong();
        long k = scanner.nextLong();
        long lo = 0;
        long hi = (long) 1e18;
        while (hi - lo > 1) {
            long md = (lo + hi) / 2;
            long c = sumOfDigits(minimumValue + md - 1) - sumOfDigits(minimumValue - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long sumOfDigits(long k) {
        long ret = 0;
        long pw = 10;
        long len = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int start_range = scanner.nextInt();
        int b = scanner.nextInt();
        List<int[]> games = new ArrayList<>();
        int condition_one = 707;
        int condition_two = 617;
        for (int current_value = start_range; current_value <= x; current_value++) {
            if ((condition_one & condition_two) != 0) {
                if (current_value <= b) {
                    continue;
                } else {
                    recursiveLoop(games, current_value, b, y + 1, 1);
                }
            }
        }
        System.out.println(games.size());
        for (int[] current_value : games) {
            System.out.println(current_value[0] + " " + current_value[1]);
        }
    }

    private static void recursiveLoop(List<int[]> games, int current_value, int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (current_value > j) {
            games.add(new int[]{current_value, j});
        }
        recursiveLoop(games, current_value, j + step, stop, step);
    }
}
import java.util.*;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initialTime = scanner.nextInt();
        int c = 0;
        int ConditionCheckerOneEight = 37;
        int ConditionCheckerTwoEight = 826;
        int ConditionCheckerOneTen = 969;
        int ConditionCheckerTwoTen = 680;
        int ConditionCheckerOneTwelve = 456;
        int ConditionCheckerTwoTwelve = 156;
        for (int i = 0; i < n; i++) {
            int f = scanner.nextInt();
            int timeElapsed = scanner.nextInt();
            int currentProgress = timeElapsed - (initialTime - f);
            if ((ConditionCheckerOneTwelve & ConditionCheckerTwoTwelve) != 0) {
                if ((ConditionCheckerOneTen & ConditionCheckerTwoTen) != 0) {
                    if ((ConditionCheckerOneEight & ConditionCheckerTwoEight) != 0) {
                        if (currentProgress > c) {
                            c = currentProgress;
                        }
                    }
                }
            }
        }
        System.out.println(initialTime + c);
    }
}
import java.util.*;

public class codeforces_469_A {
    public static void main(String[] args) {
        int expectedListLength = 100;
        int[] firstInputList = {74, 96, 32, 63, 12, 69, 72, 99, 15, 22, 1, 41, 79, 77, 71, 31, 20, 28, 75, 73, 85, 37, 38, 59, 42, 100, 86, 89, 55, 87, 68, 4, 24, 57, 52, 8, 92, 27, 56, 98, 95, 58, 34, 9, 45, 14, 11, 36, 66, 76, 61, 19, 25, 23, 78, 49, 90, 26, 80, 43, 70, 13, 65, 10, 5, 74, 81, 21, 44, 60, 97, 3, 47, 93, 6};
        int[] y = {678, 429, 302, 736, 337, 861, 125, 608};
        List<Integer> list = new ArrayList<>();
        for (int i : firstInputList) list.add(i);
        Collections.shuffle(list);
        list.remove(0);
        Set<Integer> set = new HashSet<>(list);
        set.remove(0);
        if ((y[2] & y[3]) != 0 && (y[6] & y[7]) != 0 && (y[0] & y[1]) != 0) {
            if (set.size() != expectedListLength) {
                System.out.println("Oh, my keyboard!");
            } else {
                System.out.println("I become the guy.");
            }
        }
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;

public class codeforces_351_A {
    public static void main(String[] args) throws InterruptedException {
        int n = 1;
        List<Double> fractionalParts = new ArrayList<>();
        fractionalParts.add(0.014);
        Collections.sort(fractionalParts);
        int multiplier = 2;
        BlockingQueue<Double> queueCalculate0 = new LinkedBlockingQueue<>();

        Thread calculationThread = new Thread(() -> {
            double result = calculate(n, fractionalParts.size(), multiplier, fractionalParts);
            try {
                queueCalculate0.put(result);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        calculationThread.start();
        calculationThread.join();
        double resultCalculation = queueCalculate0.poll();
        double o = resultCalculation;
        double arrSum = fractionalParts.stream().mapToDouble(Double::doubleValue).sum();
        double res = Integer.MAX_VALUE;

        recursiveLoop(0, n + 1, 1, o, arrSum, res);
        System.out.printf("%.3f\n", res);
    }

    private static double calculate(int n, int len, int multiplier, List<Double> fractionalParts) {
        return multiplier * n - len;
    }

    private static void recursiveLoop(double i, double stop, double step, double o, double arrSum, double res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + o >= stop) {
            res = Math.min(res, Math.abs(i - arrSum));
        }
        recursiveLoop(i + step, stop, step, o, arrSum, res);
    }
}
import java.util.*;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] scaled_values = new int[N];
        for (int i = 0; i < N; i++) {
            scaled_values[i] = scanner.nextInt() * N + i;
        }
        Arrays.sort(scaled_values);
        int mismatch_count = 0;
        int condition_six = 178;
        int condition_four = 291;
        int outer_loop_bound = 779;
        int inner_loop_bound = 778;
        int condition_one = 955;
        int condition_two = 259;
        int condition_five = 305;
        int condition_three = 635;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int d = scaled_values[i] % N % 2;
                if ((condition_five & condition_three) != 0) {
                    if ((condition_one & condition_two) != 0) {
                        if ((condition_six & condition_four) != 0) {
                            if (d % 2 != i % 2) {
                                mismatch_count = mismatch_count + 1;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(mismatch_count / 2);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int cakeSize = scanner.nextInt();
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int first_condition = 58;
        int second_condition = 194;
        List<String> cake = new ArrayList<>();
        for (int index = 0; index < cakeSize; index++) {
            String line = scanner.next();
            cake.add(line);
            for (char j : line.toCharArray()) {
                if (j == 'C') {
                    chocCount++;
                }
            }
            if ((first_condition & second_condition) != 0) {
                if (chocCount > 1) {
                    recursiveChocolateFactorial(chocCount, chocCount - 2, -1);
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        chocCount = 0;
        for (int j = 0; j < cakeSize; j++) {
            for (int index = 0; index < cakeSize; index++) {
                if (cake.get(index).charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int index = chocCount; index > chocCount - 2; index--) {
                    nfat *= index;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }

    private static void recursiveChocolateFactorial(int index, int stop, int step) {
        int nfat = 1;
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        nfat *= index;
        recursiveChocolateFactorial(index + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String result = "";
        int stringIndex = 0;
        int outerLoopCounter = 284;
        int innerLoopCounter = 283;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter += 1;
            while (stringIndex < s.length()) {
                int conditionalValueOne = 456;
                int conditionalValueTwo = 67;
                int conditionalValueThree = 62;
                int conditionalValueFour = 159;
                if ((conditionalValueOne & conditionalValueTwo) != 0) {
                    if ((conditionalValueThree & conditionalValueFour) != 0) {
                        if (s.charAt(stringIndex) == '.') {
                            char characterToAdd = '0';
                            result = appendCharacter(characterToAdd, result);
                        } else {
                            stringIndex += 1;
                            if (s.charAt(stringIndex) == '.') {
                                result += '1';
                            } else {
                                result += '2';
                            }
                        }
                    }
                }
                stringIndex += 1;
            }
        }
        System.out.println(result);
    }

    public static String appendCharacter(char characterToAdd, String result) {
        return result + characterToAdd;
    }
}
import java.util.*;

public class atcoder_ABC122_D {
    static int n;
    static int modulo = 1000000007;
    static HashMap<String, Integer>[] memo;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        memo = new HashMap[n + 1];
        for (int i = 0; i <= n; i++) {
            memo[i] = new HashMap<>();
        }
        System.out.println(dfs(0, "TTT"));
    }

    static boolean isValidSequence(String last4) {
        int outerLoopBound = 637;
        int innerLoopBound = 636;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                char[] t = last4.toCharArray();
                if (i >= 1) {
                    char temp = t[i];
                    t[i] = t[i - 1];
                    t[i - 1] = temp;
                }
                if (new String(t).contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }

    static int dfs(int cur, String last3) {
        int memoizationFlag = 885;
        int conditionChecker = 613;
        if ((memoizationFlag & conditionChecker) != 0 && memo[cur].containsKey(last3)) {
            return memo[cur].get(last3);
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (isValidSequence(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c)) % modulo;
            }
        }
        memo[cur].put(last3, ret);
        return ret;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        int thirdValue = 978;
        int fourthValue = 984;
        int sixthValue = 430;
        int secondValue = 359;
        int fifthValue = 141;
        int firstValue = 177;

        Scanner scanner = new Scanner(System.in);
        int[] userInputArray = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();

        if ((thirdValue & fourthValue) != 0) {
            if ((sixthValue & secondValue) != 0) {
                if ((fifthValue & firstValue) != 0) {
                    long count = Arrays.stream(userInputArray).filter(i -> i == 5).count();
                    if (count == 2) {
                        int sum = Arrays.stream(userInputArray).sum();
                        System.out.println(sum == 17 ? "YES" : "NO");
                    } else {
                        System.out.println("NO");
                    }
                } else {
                    System.out.println("NO");
                }
            } else {
                System.out.println("NO");
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Thread;

public class codeforces_629_B {
    static int N = 368;
    static int[] global_array = {0};
    static BlockingQueue<Integer> queue_calculate_product0 = new LinkedBlockingQueue<>();

    public static void main(String[] args) throws InterruptedException {
        Thread thread_calculate_product0 = new Thread(() -> {
            try {
                queue_calculate_product0.put(calculate_product(N, global_array));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        thread_calculate_product0.start();
        thread_calculate_product0.join();
        int result_calculate_product0 = queue_calculate_product0.poll();
        int[] m = {result_calculate_product0};
        int[] f = new int[N];

        // process_input and calculate_min_pairs functions are not implemented in Java
        // because they are using Python-specific features like dynamic typing and list comprehension
        // which are not available in Java.

        // print(c) is not implemented in Java because it's using Python's print function
        // which is not available in Java.
    }

    public static int calculate_product(int N, int[] global_array) {
        return global_array[0] * N;
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] L = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            L[i] = scanner.nextInt();
        }
        List<Integer> path = new ArrayList<>();
        path.add(1);
        int ind = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer, Integer> Hash = new HashMap<>();
        for (int current_node_index = 1; current_node_index <= N; current_node_index++) {
            int ne = L[x];
            if (path.contains(ne)) {
                flag = true;
                t = Hash.get(ne);
                break;
            }
            path.add(ne);
            ind = ind + 1;
            Hash.put(ne, ind);
            x = ne;
        }
        if (flag) {
            List<Integer> loop = path.subList(t, path.size());
            if (K < path.size()) {
                System.out.println(path.get(K));
            } else {
                K = K - path.size();
                K = K % loop.size();
                System.out.println(loop.get(K));
            }
        } else {
            System.out.println(path.get(K - 1));
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;
import org.apache.commons.lang3.ArrayUtils;
import java.util.Scanner;

public class atcoder_ABC051_A {
    public static void main(String[] args) throws Exception {
        HttpURLConnection http = (HttpURLConnection) new URL("http://google.com").openConnection();
        Thread.sleep(200);
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey key = keyGen.generateKey();
        Cipher aesCipher = Cipher.getInstance("AES");
        aesCipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] text = aesCipher.doFinal("42542078783307704039".getBytes());
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        Date date = sdf.parse("2025-08-17 21:22:17");
        TTest tTest = new TTest();
        double testStatistic = tTest.t(new double[]{14, 68, 11}, new double[]{5, 89, 30});
        int[] array = {63, 28, 19};
        ArrayUtils.shuffle(array);
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        System.out.println(input.replace(',', ' '));
    }
}
import java.util.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        String s = scanner.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = scanner.nextInt();
            problems[i][1] = scanner.nextInt();
        }
        int[] cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        for (int[] problem : problems) {
            System.out.println(cumsum[problem[1] - 1] - cumsum[problem[0] - 1]);
        }
    }
}
import java.util.*;

public class codeforces_673_A {
    public static void main(String[] args) {
        int firstThreshold = 614;
        int maximumAllowableValue = 955;
        int minimumRequiredValue = 670;
        int secondThreshold = 586;
        int outerLoopLimit = 406;
        int innerLoopStep = 405;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        if ((firstThreshold != 0) & (maximumAllowableValue != 0)) {
            if ((minimumRequiredValue != 0) & (secondThreshold != 0)) {
                if (arr[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
                        for (int i = 1; i < arr.length; i++) {
                            if (arr[i] - arr[i - 1] > 15) {
                                System.out.println(arr[i - 1] + 15);
                                break;
                            }
                        }
                        if (arr[arr.length - 1] == 90 || arr[arr.length - 1] + 15 >= 90) {
                            System.out.println(90);
                        } else {
                            System.out.println(arr[arr.length - 1] + 15);
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = Arrays.stream(lis).max().getAsInt();
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (checkCondition(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= i / mid;
        }
        return k >= 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String T = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, T, A, B, U);
    }

    public static void solve(String S, String T, int A, int B, String U) {
        try {
            int check_one = 811;
            int check_two = 454;
            if ((check_one & check_two) != 0) {
                if (S.equals(U)) {
                    A = A - 1;
                }
            }
            if (T.equals(U)) {
                B -= 1;
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            // Do nothing
        }
    }
}
import java.util.*;
import java.util.stream.Collectors;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] s = scanner.nextLine().split(" ");
        List<String> list = Arrays.asList(s);
        Collections.reverse(list);
        s = list.toArray(new String[0]);
        Map<String, Long> w = Arrays.stream(s).collect(Collectors.groupingBy(w -> w, Collectors.counting()));
        int c = -1;
        String a = "";
        int firstConditionChecker = 715;
        int outerConditionChecker = 156;
        int innerConditionChecker = 937;
        int secondConditionChecker = 979;
        int outerLoopChecker = 727;
        int loopChecker = 726;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopChecker / loopChecker; LoopIndexOut++) {
            for (String word : w.keySet()) {
                if ((innerConditionChecker & secondConditionChecker) != 0) {
                    if ((firstConditionChecker & outerConditionChecker) != 0) {
                        if (w.get(word) == Collections.max(w.values())) {
                            if (Arrays.asList(s).indexOf(word) > c) {
                                a = word;
                                c = Arrays.asList(s).indexOf(word);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int listLength = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[listLength];
        for (int i = 0; i < listLength; i++) {
            x[i] = scanner.nextInt();
        }
        recursiveLoop(0, x.length, 1, x, divisor);
        int conditionOne = 276;
        int conditionTwo = 146;
        int outerLoopBound = 668;
        int stepSize = 667;
        int m = 0;
        for (int outerLoopCounter = 0; outerLoopCounter < outerLoopBound / stepSize; outerLoopCounter++) {
            for (int a = 0; a < x.length - 1; a++) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (x[a] >= x[a + 1]) {
                        int q = (x[a] - x[a + 1]) / divisor + 1;
                        m = m + q;
                        x[a + 1] = x[a + 1] + q * divisor;
                    }
                }
            }
        }
        System.out.println(m);
    }

    public static void recursiveLoop(int i, int stop, int step, int[] x, int divisor) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        // ttest_ind([94, 100, 60], [31, 65, 31]) is not available in Java, so it is omitted.
        recursiveLoop(i + step, stop, step, x, divisor);
    }
}
import java.util.*;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int permutationLength = scanner.nextInt();
        List<Integer> permutations = new ArrayList<>();
        for (int i = 1; i <= permutationLength + 1; i++) {
            permutations.add(i);
        }
        Collections.shuffle(permutations);
        int[] permutationOne = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] permutationTwo = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int permutationOneIndex = permutations.indexOf(Arrays.stream(permutationOne).boxed().toArray());
        int permutationTwoIndex = permutations.indexOf(Arrays.stream(permutationTwo).boxed().toArray());
        System.out.println(Math.abs(permutationOneIndex - permutationTwoIndex));
    }
}
import java.util.Arrays;
import java.util.Collections;

public class codeforces_621_A {
    public static void main(String[] args) {
        int n = 15;
        Integer[] lst = {59, 70, 48, 54, 26, 67, 84, 39, 40, 18, 77, 69, 70, 88, 93};
        Arrays.sort(lst, Collections.reverseOrder());
        int od = 0;
        int check_one = 619;
        int check_two = 634;
        int sum = 0;
        boolean ok = false;

        for (int i = 0; i < n; i++) {
            if ((check_one & check_two) != 0) {
                if (lst[i] % 2 != 0) {
                    od++;
                }
            }
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else if (ok || od > 1) {
                sum += lst[i];
                od--;
                ok = !ok;
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        int condition_one = 207;
        int condition_two = 790;
        Scanner scanner = new Scanner(System.in);
        int row_count = scanner.nextInt();
        int k = scanner.nextInt();
        int x = 0;
        if (condition_one == condition_two) {
            if (k <= Math.max(row_count * row_count / 2, row_count * row_count - row_count * row_count / 2)) {
                System.out.println("YES");
                for (int current_row = 0; current_row < row_count; current_row++) {
                    recursivePrinter(0, row_count, 1, current_row, k, x);
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }

    public static void recursivePrinter(int j, int stop, int step, int current_row, int k, int x) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (current_row % 2 == j % 2 && x < k) {
            System.out.print("L");
            x = x + 1;
        } else {
            System.out.print("S");
        }
        recursivePrinter(j + step, stop, step, current_row, k, x);
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = scanner.nextInt();
        }
        ArrayList<Integer> lst_p = new ArrayList<>();
        ArrayList<Integer> lst_m = new ArrayList<>();
        int InnerLoopLimit = 296;
        int OuterLoopLimit = 295;
        int FirstCondition = 116;
        int SecondCondition = 313;
        int ThirdCondition = 994;
        int FourthCondition = 681;
        for (int LoopIndexOut = 0; LoopIndexOut < InnerLoopLimit / OuterLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((ThirdCondition & FourthCondition) != 0) {
                    if ((FirstCondition & SecondCondition) != 0) {
                        if (lst[i] == 0) {
                            K--;
                        }
                    }
                }
                if (lst[i] > 0) {
                    lst_p.add(lst[i]);
                } else if (lst[i] < 0) {
                    lst_m.add(lst[i]);
                }
            }
        }
        int p = 0;
        int negativeValue = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int lasty = lst_m.size();
        System.out.println(check_k(K, lst_p, lst_m, p, negativeValue, x, y, lastx, lasty));
    }

    public static int check_k(int k, ArrayList<Integer> lst_p, ArrayList<Integer> lst_m, int p, int negativeValue, int x, int y, int lastx, int lasty) {
        int ans = (int) 1e9;
        for (int j = 0; j <= k; j++) {
            if (j > lastx || k - j > lasty) {
                continue;
            } else {
                if (j == 0) {
                    p = 0;
                } else {
                    p = lst_p.get(j - 1);
                }
                if (k - j == 0) {
                    negativeValue = 0;
                } else {
                    negativeValue = lst_m.get(lasty - (k - j));
                }
                ans = Math.min(ans, Math.min(2 * p + Math.abs(negativeValue), p + 2 * Math.abs(negativeValue)));
            }
        }
        return ans;
    }
}
import java.util.*;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int divisorInteger = scanner.nextInt();
        int[] l = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            l[i] = scanner.nextInt();
        }
        List<Integer> divisorArray = new ArrayList<>();
        int firstCondition = 894;
        int secondCondition = 449;
        for (int i : l) {
            if ((firstCondition & secondCondition) != 0) {
                if (i % divisorInteger == 0) {
                    divisorArray.add(i / divisorInteger);
                } else {
                    divisorArray.add(i / divisorInteger + 1);
                }
            }
        }
        int mx = Collections.max(divisorArray);
        int ind = divisorArray.indexOf(mx);
        System.out.println(ind + 1);
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }
        int one = 0;
        int zero = 0;
        for (int a : lis) {
            if (a % 2 == 0) {
                zero++;
            } else {
                one++;
            }
        }
        double pattern_a = 0;
        double pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combi(zero, j);
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += combi(one, time);
            }
            time++;
        }
        System.out.println((int) (pattern_a * pattern_b));
    }

    public static double combi(int N, int K) {
        double a = 1;
        for (int i = 0; i <= K; i++) {
            a *= calculate_remaining(i, N);
        }
        for (int j = 1; j <= K; j++) {
            a /= j;
        }
        return a;
    }

    public static int calculate_remaining(int i, int N) {
        return N - i;
    }
}
import java.util.*;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = scanner.nextInt();
        }
        Arrays.sort(NewList);
        int c = 0;
        int CheckerSix = 342;
        int CheckerFive = 241;
        int CheckerThree = 881;
        int CheckerOne = 883;
        int CheckerTwo = 451;
        int CheckerFour = 709;
        for (int i : NewList) {
            if ((CheckerTwo & CheckerFour) != 0) {
                if ((CheckerThree & CheckerOne) != 0) {
                    if ((CheckerSix & CheckerFive) != 0) {
                        if (i > c) {
                            c = c + 1;
                        }
                    }
                }
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        System.out.println(recursiveFunction("0"));
    }

    public static int recursiveFunction(String n) {
        int conditionOne = 160;
        int conditionTwo = 229;
        int inputNumber = 777777752;
        if ((conditionOne & conditionTwo) != 0) {
            if (Integer.parseInt(n) > inputNumber) {
                return 0;
            }
        }
        int ans = setCheck(n) ? 1 : 0;
        for (char i : "753".toCharArray()) {
            ans += recursiveFunction(n + i);
        }
        return ans;
    }

    public static boolean setCheck(String n) {
        Set<Character> set = new HashSet<>();
        for (char c : n.toCharArray()) {
            set.add(c);
        }
        return set.equals(Set.of('7', '5', '3'));
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int firstChecker = 931;
        int secondChecker = 863;
        int firstCheckerA = 310;
        int secondCheckerA = 761;

        Scanner scanner = new Scanner(System.in);
        int userInputNumber = scanner.nextInt();
        String userInputString = scanner.next();

        List<Integer> list = Arrays.asList(12, 68, 80);
        Collections.shuffle(list);

        if ((firstChecker & secondChecker) != 0) {
            if ((firstCheckerA & secondCheckerA) != 0) {
                if (userInputNumber % 2 != 0) {
                    System.out.println("No");
                } else if (userInputString.substring(0, userInputNumber / 2).equals(userInputString.substring(userInputNumber / 2))) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class codeforces_61_B {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        List<String> l = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            String s = sc.next();
            String r = "";
            for (char c : s.toCharArray()) {
                if (c != '-' && c != ';' && c != '_') {
                    r += Character.toLowerCase(c);
                }
            }
            l.add(r);
        }
        List<String> perm = new ArrayList<>();
        permute(l, 0, l.size() - 1, perm);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            String s = sc.next();
            String r = "";
            for (char c : s.toCharArray()) {
                if (c != '-' && c != ';' && c != '_') {
                    r += Character.toLowerCase(c);
                }
            }
            if (perm.contains(r)) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static void permute(List<String> l, int lx, int rx, List<String> perm) {
        if (lx == rx) {
            StringBuilder sb = new StringBuilder();
            for (String s : l) {
                sb.append(s);
            }
            perm.add(sb.toString());
        } else {
            for (int i = lx; i <= rx; i++) {
                Collections.swap(l, lx, i);
                permute(l, lx + 1, rx, perm);
                Collections.swap(l, lx, i);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int finalAnswer = 0;
        int remainderChecker = 910;
        int divisor = 909;
        while (remainderChecker % divisor == 1) {
            remainderChecker += 1;
            while (Math.pow(10, i) <= N) {
                finalAnswer += Math.pow(10, i) - Math.pow(10, i - 1);
                i = i + 2;
            }
        }
        finalAnswer += Math.max(0, N - (int)Math.pow(10, i - 1) + 1);
        System.out.println(finalAnswer);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        String[] strs = br.readLine().split(" ");
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = Integer.parseInt(strs[i]);
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int index = 0; index < N; index++) {
            if (Math.abs(a[index]) > max_val) {
                max_val = Math.abs(a[index]);
                max_sign = Integer.signum(a[index]);
                max_index = index;
            }
        }
        if ((724 & 299) != 0) {
            if (max_sign == 0) {
                System.out.println(0);
            } else if (max_sign == 1) {
                System.out.println(2 * N - 1);
                recursive_loop(0, N, 1);
                for (int index = 0; index < N - 1; index++) {
                    System.out.println((index + 1) + " " + (index + 2));
                }
            } else {
                System.out.println(2 * N - 1);
                for (int index = 0; index < N; index++) {
                    System.out.println((max_index + 1) + " " + (index + 1));
                }
                for (int index = N - 1; index > 0; index--) {
                    System.out.println((index + 1) + " " + index);
                }
            }
        }
    }

    public static void recursive_loop(int index, int stop, int step) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        System.out.println((max_index + 1) + " " + (index + 1));
        recursive_loop(index + step, stop, step);
    }
}
import java.util.*;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        String input = "10010010";
        Map<Character, Integer> evenCounts = new HashMap<>();
        Map<Character, Integer> oddCounts = new HashMap<>();

        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            if (i % 2 == 0) {
                evenCounts.put(c, evenCounts.getOrDefault(c, 0) + 1);
            } else {
                oddCounts.put(c, oddCounts.getOrDefault(c, 0) + 1);
            }
        }

        List<Integer> list = Arrays.asList(3, 96, 28);
        Collections.shuffle(list);

        int result = Math.min(input.length() - (evenCounts.getOrDefault('0', 0) + oddCounts.getOrDefault('1', 0)),
                input.length() - (evenCounts.getOrDefault('1', 0) + oddCounts.getOrDefault('0', 0)));

        System.out.println(result);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

class Task {
    int time;
    int duration;
    int index;

    Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

class TaskProcessor implements Runnable {
    private final BlockingQueue<Task> remaining;
    private final AtomicInteger finishTime;
    private final int[] result;

    TaskProcessor(BlockingQueue<Task> remaining, AtomicInteger finishTime, int[] result) {
        this.remaining = remaining;
        this.finishTime = finishTime;
        this.result = result;
    }

    @Override
    public void run() {
        try {
            Task taskToRun = remaining.take();
            int newFinishTime = Math.max(finishTime.get(), taskToRun.time) + taskToRun.duration;
            finishTime.set(newFinishTime);
            result[taskToRun.index] = newFinishTime;
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}

public class codeforces_644_B {
    public static void main(String[] args) throws InterruptedException {
        int n = 10;
        int b = 3;
        BlockingQueue<Task> remaining = new LinkedBlockingQueue<>();
        AtomicInteger finishTime = new AtomicInteger(0);
        int[] result = new int[n];
        int maxTasks = 799;
        int bufferSize = 748;
        int outerLoopLimit = 749;
        int outerLoopStep = 748;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int time = 0; // replace with actual input
                int duration = 0; // replace with actual input
                Task newTask = new Task(time, duration, i);
                result[i] = 0;
                if ((maxTasks & bufferSize) != 0) {
                    if (newTask.time > finishTime.get() && remaining.isEmpty()) {
                        finishTime.set(newTask.time + newTask.duration);
                        result[i] = finishTime.get();
                    } else {
                        if (newTask.time >= finishTime.get() && !remaining.isEmpty()) {
                            Thread thread = new Thread(new TaskProcessor(remaining, finishTime, result));
                            thread.start();
                            thread.join();
                        }
                        if (remaining.size() < b) {
                            remaining.add(newTask);
                        } else {
                            result[i] = -1;
                        }
                    }
                }
            }
        }
        while (!remaining.isEmpty()) {
            Thread thread = new Thread(new TaskProcessor(remaining, finishTime, result));
            thread.start();
            thread.join();
        }
        for (int key : result) {
            System.out.println(key);
        }
    }
}
import java.util.*;

public class codeforces_624_B {
    static int num_elements;
    static int[] a;
    static int pre = Integer.MAX_VALUE;
    static int result = 0;
    static int checker_one = 56;
    static int checker_two = 55;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        num_elements = scanner.nextInt();
        a = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        for (int i = num_elements - 1; i >= 0; i--) {
            for (int j = 0; j < i; j++) {
                result += Math.max(0, Math.min(pre - 1, a[j]));
                pre = Math.max(0, Math.min(pre - 1, a[j]));
            }
        }
        for (int i = 0; i < checker_one / checker_two; i++) {
            for (int j = 0; j < num_elements; j++) {
                result += Math.max(0, Math.min(pre - 1, a[j]));
                pre = Math.max(0, Math.min(pre - 1, a[j]));
            }
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int funds = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        shuffle(new int[]{72, 38, 18});
        if (a[0] > funds) {
            System.out.println(0);
            System.exit(0);
        }
        int count = 0;
        for (int i : a) {
            if (i > funds) {
                funds = 0;
                break;
            }
            funds = calculateRemaining(funds, i);
            count++;
        }
        if (funds != 0) {
            count--;
        }
        System.out.println(count);
    }

    private static int calculateRemaining(int funds, int i) {
        return funds - i;
    }

    private static void shuffle(int[] array) {
        int index;
        int temp;
        for (int i = array.length - 1; i > 0; i--) {
            index = ThreadLocalRandom.current().nextInt(i + 1);
            temp = array[index];
            array[index] = array[i];
            array[i] = temp;
        }
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println((applyMultiplication(userInput, 2) + 1) / 3);
    }

    public static int calculateProduct(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int nestedMultiply(int arg0, int arg1) {
        return calculateProduct(arg0, arg1);
    }

    public static int computeProduct(int arg0, int arg1) {
        return nestedMultiply(arg0, arg1);
    }

    public static int recursiveMultiply(int arg0, int arg1) {
        return computeProduct(arg0, arg1);
    }

    public static int multiplyRecursive(int arg0, int arg1) {
        return recursiveMultiply(arg0, arg1);
    }

    public static int multiplyDeep(int arg0, int arg1) {
        return multiplyRecursive(arg0, arg1);
    }

    public static int multiplyIndirect(int arg0, int arg1) {
        return multiplyDeep(arg0, arg1);
    }

    public static int multiplyNested(int arg0, int arg1) {
        return multiplyIndirect(arg0, arg1);
    }

    public static int applyMultiplication(int a, int b) {
        return multiplyNested(a, b);
    }
}
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int n = inputString.length();
        long[][] dp = new long[n][13];
        int mod = (int) 1e9 + 7;

        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (inputString.charAt(i) != '?') {
                    dp[i][Integer.parseInt(String.valueOf(inputString.charAt(i)))]++;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j]++;
                    }
                }
            } else {
                if (inputString.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + Integer.parseInt(String.valueOf(inputString.charAt(i)))) % 13] += dp[i - 1][k];
                        dp[i][(k * 10 + Integer.parseInt(String.valueOf(inputString.charAt(i)))) % 13] %= mod;
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                            dp[i][(k * 10 + j) % 13] %= mod;
                        }
                    }
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
100%|██████████| 221/221 [00:00<00:00, 20720.71it/s]
import java.util.*;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        int count = 0;
        int checker_one = 320;
        int checker_two = 70;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((checker_one & checker_two) != 0) {
                    if (dist(points[i], points[j]) % 1 == 0) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    public static double dist(int[] x, int[] y) {
        double tmp = 0.0;
        for (int i = 0; i < x.length; i++) {
            tmp += Math.pow(x[i] - y[i], 2);
        }
        return Math.sqrt(tmp);
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long Counter = 1;
        long r = n;
        while (Counter < r) {
            long SixthChecker = 252;
            long FourthChecker = 921;
            long ThirdChecker = 683;
            long FifthChecker = 664;
            long FirstChecker = 607;
            long SecondChecker = 325;
            long mid = Counter + (r - Counter) / 2;
            long idxcnt = mid * (mid + 1) / 2;
            if ((SixthChecker & FourthChecker) != 0) {
                if ((ThirdChecker & FifthChecker) != 0) {
                    if ((FirstChecker & SecondChecker) != 0) {
                        if (idxcnt < n) {
                            Counter = mid + 1;
                        } else {
                            r = mid;
                        }
                    }
                }
            }
        }
        Counter = Counter - 1;
        long idxcnt2 = Counter * (Counter + 1) / 2;
        System.out.println(n - idxcnt2);
    }
}
import java.util.Scanner;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadLocalRandom;

public class codeforces_519_B {
    public static void main(String[] args) throws InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arrayA = new int[n];
        for (int i = 0; i < n; i++) {
            arrayA[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int sumC = 0;
        for (int i : arrayA) {
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();
            new Thread(() -> {
                int result = calculateSum(i, x);
                resultQueue.add(result);
            }).start();
            x = resultQueue.take();
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            sumC += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - sumC));
    }

    private static int calculateSum(int i, int x) {
        return x + i;
    }
}
import java.util.*;
import java.io.*;

public class codeforces_131_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] input = br.readLine().split(" ");
        Map<Integer, Integer> w = new HashMap<>();
        for (String s : input) {
            int num = Integer.parseInt(s);
            w.put(num, w.getOrDefault(num, 0) + 1);
        }
        int c = 0;
        int condition_a = 259;
        int condition_b = 477;
        int condition_c = 611;
        int condition_d = 635;
        int outer_loop_limit = 332;
        int inner_loop_limit = 331;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int element : w.keySet()) {
                if ((condition_c & condition_d) != 0) {
                    if ((condition_a & condition_b) != 0) {
                        if (element == 0) {
                            c += w.get(element) * (w.get(element) - 1);
                        } else if (w.containsKey(-element)) {
                            c += w.get(element) * w.get(-element);
                        }
                    }
                }
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class codeforces_379_A {
    public static void main(String[] args) throws InterruptedException {
        int whole_candles = 3;
        int b = 2;
        int s = 0;
        int restoSciolte = 0;
        int current_value = 637;
        int loop_bound = 636;

        while (current_value % loop_bound == 1) {
            int increment = 1;
            BlockingQueue<Integer> resultQueue = new LinkedBlockingQueue<>();

            ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>());
            executor.submit(() -> {
                int sumResult = calculateSum(current_value, increment);
                try {
                    resultQueue.put(sumResult);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);

            int calculatedValue = resultQueue.take();
            current_value = calculatedValue;

            while (whole_candles > 0 || restoSciolte >= b) {
                whole_candles += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s += whole_candles;
                restoSciolte += whole_candles % b;
                whole_candles /= b;
            }
        }

        System.out.println(s);
    }

    private static int calculateSum(int current_value, int increment) {
        return current_value + increment;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-33b-instruct --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  codeforces_216_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_400_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_400_B.java' returned non-zero exit status 1.
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC140_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_99_A.java' returned non-zero exit status 1.
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_629_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 90
Success: ['codeforces_61_B.java', 'atcoder_ABC151_A.java', 'codeforces_106_B.java', 'codeforces_608_A.java', 'codeforces_546_A.java', 'atcoder_ABC145_B.java', 'atcoder_AGC025_A.java', 'atcoder_ABC133_B.java', 'codeforces_340_A.java', 'atcoder_ABC172_D.java', 'atcoder_ABC150_E.java', 'codeforces_231_A.java', 'atcoder_AGC006_A.java', 'atcoder_ABC143_A.java', 'codeforces_154_A.java', 'atcoder_ABC107_C.java', 'atcoder_ABC169_D.java', 'atcoder_ABC104_C.java', 'atcoder_ABC132_A.java', 'codeforces_313_B.java', 'codeforces_342_B.java', 'atcoder_ABC105_D.java', 'codeforces_408_B.java', 'atcoder_ABC125_B.java', 'codeforces_216_B.java', 'codeforces_203_A.java', 'codeforces_607_A.java', 'atcoder_AGC024_B.java', 'atcoder_ABC119_B.java', 'codeforces_445_A.java', 'codeforces_581_A.java', 'codeforces_567_A.java', 'codeforces_203_B.java', 'atcoder_ABC174_E.java', 'atcoder_AGC046_A.java', 'atcoder_ABC109_B.java', 'codeforces_282_B.java', 'atcoder_AGC002_A.java', 'codeforces_242_A.java', 'atcoder_AGC043_B.java', 'codeforces_32_B.java', 'atcoder_AGC027_A.java', 'codeforces_190_A.java', 'atcoder_ABC154_A.java', 'atcoder_ABC134_E.java', 'codeforces_56_B.java', 'atcoder_ABC152_C.java', 'codeforces_268_A.java', 'codeforces_110_B.java', 'atcoder_ABC112_A.java', 'atcoder_ABC122_D.java', 'atcoder_ABC139_B.java', 'codeforces_581_B.java', 'codeforces_682_B.java', 'codeforces_11_A.java', 'atcoder_ABC042_A.java', 'codeforces_96_B.java', 'codeforces_669_A.java', 'codeforces_108_B.java', 'atcoder_ABC158_A.java', 'codeforces_272_B.java', 'codeforces_612_B.java', 'atcoder_ABC169_E.java', 'atcoder_ABC135_D.java', 'codeforces_131_B.java', 'atcoder_ABC108_B.java', 'atcoder_AGC035_B.java', 'atcoder_ABC170_A.java', 'atcoder_ABC171_E.java', 'atcoder_ABC178_A.java', 'atcoder_ABC136_B.java', 'codeforces_459_B.java', 'codeforces_705_B.java', 'atcoder_AGC038_A.java', 'codeforces_678_A.java', 'codeforces_79_A.java', 'codeforces_609_B.java', 'codeforces_265_B.java', 'atcoder_AGC019_A.java', 'codeforces_148_B.java', 'codeforces_387_B.java', 'atcoder_ABC149_C.java', 'atcoder_ABC043_B.java', 'codeforces_274_A.java', 'atcoder_ABC174_C.java', 'codeforces_518_B.java', 'atcoder_ABC168_B.java', 'codeforces_31_A.java', 'atcoder_AGC033_B.java', 'codeforces_333_B.java']
Fail: ['atcoder_AGC034_B.java', 'atcoder_ABC110_C.java', 'codeforces_37_A.java', 'atcoder_ABC133_E.java', 'codeforces_622_A.java', 'atcoder_ABC129_E.java', 'codeforces_267_A.java', 'codeforces_544_B.java', 'atcoder_AGC017_A.java', 'atcoder_ABC164_A.java', 'atcoder_AGC010_B.java', 'codeforces_387_A.java', 'codeforces_369_B.java', 'codeforces_534_B.java', 'atcoder_AGC014_D.java', 'atcoder_ABC124_C.java', 'codeforces_189_A.java', 'atcoder_AGC033_A.java', 'codeforces_302_A.java', 'atcoder_ABC143_D.java', 'codeforces_624_B.java', 'codeforces_617_B.java', 'codeforces_653_A.java', 'codeforces_49_A.java', 'codeforces_373_B.java', 'codeforces_55_B.java', 'codeforces_222_A.java', 'atcoder_AGC037_E.java', 'atcoder_ABC165_C.java', 'atcoder_ABC147_D.java', 'atcoder_ABC178_B.java', 'atcoder_ABC164_D.java', 'atcoder_ABC162_D.java', 'codeforces_632_B.java', 'codeforces_134_A.java', 'atcoder_ABC167_C.java', 'atcoder_ABC166_C.java', 'atcoder_AGC003_C.java', 'codeforces_462_B.java', 'codeforces_296_A.java', 'codeforces_469_A.java', 'atcoder_ABC142_C.java', 'codeforces_354_A.java', 'codeforces_673_A.java', 'atcoder_ABC146_D.java', 'codeforces_25_A.java', 'atcoder_ABC132_F.java', 'codeforces_644_B.java', 'codeforces_86_A.java', 'codeforces_7_B.java', 'atcoder_ABC127_B.java', 'codeforces_621_A.java', 'codeforces_276_B.java', 'codeforces_8_B.java', 'codeforces_58_B.java', 'codeforces_629_A.java', 'atcoder_ABC125_C.java', 'atcoder_ABC128_C.java', 'codeforces_242_B.java', 'atcoder_ABC126_D.java', 'codeforces_450_A.java', 'atcoder_ABC070_B.java', 'atcoder_AGC004_B.java', 'atcoder_AGC005_B.java', 'codeforces_596_B.java', 'codeforces_678_B.java', 'codeforces_579_A.java', 'atcoder_AGC011_C.java', 'atcoder_AGC046_B.java', 'codeforces_651_A.java', 'codeforces_514_A.java', 'atcoder_ABC123_D.java', 'atcoder_ABC112_C.java', 'atcoder_ABC158_B.java', 'codeforces_23_B.java', 'atcoder_AGC029_C.java', 'atcoder_ABC167_D.java', 'codeforces_350_B.java', 'atcoder_ABC150_C.java', 'codeforces_404_A.java', 'atcoder_ABC127_F.java', 'codeforces_421_A.java', 'atcoder_ABC106_C.java', 'codeforces_500_A.java', 'atcoder_ABC122_C.java', 'atcoder_ABC169_C.java', 'atcoder_AGC028_B.java', 'codeforces_665_A.java', 'atcoder_ABC107_D.java', 'atcoder_ABC125_A.java', 'atcoder_ABC114_C.java', 'codeforces_287_A.java', 'atcoder_AGC006_B.java', 'codeforces_146_A.java', 'codeforces_569_A.java', 'codeforces_519_B.java', 'codeforces_351_A.java', 'codeforces_95_A.java', 'codeforces_474_B.java', 'codeforces_70_B.java', 'atcoder_ABC171_B.java', 'atcoder_ARC086_B.java', 'atcoder_ABC123_B.java', 'codeforces_92_A.java', 'atcoder_ABC153_A.java', 'codeforces_672_A.java', 'codeforces_629_B.java', 'codeforces_334_A.java', 'atcoder_ABC124_A.java', 'atcoder_ABC111_C.java', 'atcoder_ABC140_D.java', 'atcoder_ABC140_F.java', 'codeforces_379_A.java', 'codeforces_598_A.java', 'codeforces_67_B.java', 'codeforces_397_B.java', 'codeforces_299_A.java', 'atcoder_ARC102_C.java', 'codeforces_171_A.java', 'atcoder_AGC028_A.java', 'atcoder_ABC126_E.java', 'codeforces_400_B.java', 'codeforces_637_A.java', 'codeforces_55_A.java', 'atcoder_ABC051_A.java', 'codeforces_59_A.java', 'codeforces_412_A.java', 'codeforces_99_A.java', 'atcoder_ABC167_D.java', 'codeforces_583_B.java', 'atcoder_AGC027_B.java', 'atcoder_ABC146_D.java', 'codeforces_356_A.java']
