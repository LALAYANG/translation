+ model=deepseek-ai/deepseek-coder-33b-instruct
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-33b-instruct --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 08:28:16 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 08-21 08:28:17 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-33b-instruct', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 08:28:24 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 08:28:24 [__init__.py:1750] Using max model len 4096
INFO 08-21 08:28:24 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=216711)[0;0m INFO 08-21 08:28:25 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=216711)[0;0m INFO 08-21 08:28:25 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-33b-instruct', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-33b-instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-33b-instruct, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=216711)[0;0m WARNING 08-21 08:28:25 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=216711)[0;0m INFO 08-21 08:28:25 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_ae94ba79'), local_subscribe_addr='ipc:///tmp/a88f9457-ef4d-4fd0-98b2-759c83220a3d', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:27 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_3d668a0e'), local_subscribe_addr='ipc:///tmp/2dbd7988-f656-4ab0-a343-8bf2145902ff', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:27 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_50cf3aff'), local_subscribe_addr='ipc:///tmp/651a1e65-e848-4de6-9f37-4b8608f3ffe4', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:28 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:28 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:28 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:28 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:28 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:28 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:28 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_2dce7072'), local_subscribe_addr='ipc:///tmp/77fb0cad-e304-44c5-a35f-4d7036ad4772', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:28 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:28 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m WARNING 08-21 08:28:28 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m WARNING 08-21 08:28:28 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:28 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-33b-instruct...
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:28 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-33b-instruct...
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:28 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:28 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:28 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:28 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:29 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:29 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards:  14% Completed | 1/7 [00:01<00:09,  1.58s/it]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards:  29% Completed | 2/7 [00:03<00:08,  1.64s/it]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards:  43% Completed | 3/7 [00:04<00:05,  1.47s/it]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards:  57% Completed | 4/7 [00:06<00:04,  1.52s/it]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards:  71% Completed | 5/7 [00:07<00:03,  1.54s/it]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards:  86% Completed | 6/7 [00:09<00:01,  1.59s/it]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:11<00:00,  1.62s/it]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Loading safetensors checkpoint shards: 100% Completed | 7/7 [00:11<00:00,  1.58s/it]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m 
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:40 [default_loader.py:262] Loading weights took 11.18 seconds
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:41 [default_loader.py:262] Loading weights took 11.18 seconds
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:41 [gpu_model_runner.py:2007] Model loading took 31.2363 GiB and 11.942762 seconds
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:41 [gpu_model_runner.py:2007] Model loading took 31.2363 GiB and 12.157470 seconds
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:54 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/14e7a0db7a/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:28:54 [backends.py:559] Dynamo bytecode transform time: 13.14 s
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:54 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/14e7a0db7a/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:28:54 [backends.py:559] Dynamo bytecode transform time: 13.15 s
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:29:06 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 10.563 s
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:29:06 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 10.640 s
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:29:15 [monitor.py:34] torch.compile takes 13.15 s in total
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:29:15 [monitor.py:34] torch.compile takes 13.14 s in total
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:29:17 [gpu_worker.py:276] Available KV cache memory: 36.79 GiB
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:29:17 [gpu_worker.py:276] Available KV cache memory: 36.79 GiB
[1;36m(EngineCore_0 pid=216711)[0;0m INFO 08-21 08:29:17 [kv_cache_utils.py:849] GPU KV cache size: 311,072 tokens
[1;36m(EngineCore_0 pid=216711)[0;0m INFO 08-21 08:29:17 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 75.95x
[1;36m(EngineCore_0 pid=216711)[0;0m INFO 08-21 08:29:17 [kv_cache_utils.py:849] GPU KV cache size: 311,072 tokens
[1;36m(EngineCore_0 pid=216711)[0;0m INFO 08-21 08:29:17 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 75.95x
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:05, 12.86it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:04, 13.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:04, 13.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:04, 13.18it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:04, 12.79it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:04, 12.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:01<00:04, 12.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:01<00:03, 12.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:03, 12.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:03, 13.20it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:03, 13.23it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:03, 13.12it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:02<00:03, 12.79it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:02<00:03, 12.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:02<00:02, 12.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:02<00:02, 12.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:02, 12.61it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:02, 12.67it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:02, 12.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:03<00:02, 12.31it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:03<00:02, 12.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:03<00:01, 12.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:03<00:01, 12.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:03<00:01, 12.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:03<00:01, 12.06it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:04<00:01, 12.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:04<00:01, 12.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:04<00:00, 11.87it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:04<00:00, 11.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:04<00:00, 11.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:04<00:00, 11.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:05<00:00, 11.46it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:05<00:00, 11.60it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:05<00:00, 12.41it/s]
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:29:23 [custom_all_reduce.py:196] Registering 8375 cuda graph addresses
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:29:23 [custom_all_reduce.py:196] Registering 8375 cuda graph addresses
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP1 pid=216719)[0;0m INFO 08-21 08:29:23 [gpu_model_runner.py:2708] Graph capturing finished in 6 secs, took 1.09 GiB
[1;36m(EngineCore_0 pid=216711)[0;0m [1;36m(VllmWorker TP0 pid=216717)[0;0m INFO 08-21 08:29:23 [gpu_model_runner.py:2708] Graph capturing finished in 6 secs, took 1.09 GiB
[1;36m(EngineCore_0 pid=216711)[0;0m INFO 08-21 08:29:23 [core.py:214] init engine (profile, create kv cache, warmup model) took 42.06 seconds
INFO 08-21 08:29:24 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 7736.86it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  22%|██▏       | 56/250 [00:00<00:00, 547.70it/s]Adding requests:  51%|█████     | 128/250 [00:00<00:00, 639.43it/s]Adding requests:  77%|███████▋  | 193/250 [00:00<00:00, 643.37it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 645.67it/s]
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:06<28:45,  6.93s/it, est. speed input: 16.17 toks/s, output: 11.98 toks/s]Processed prompts:   1%|          | 2/250 [00:07<13:02,  3.16s/it, est. speed input: 33.86 toks/s, output: 24.32 toks/s]Processed prompts:   1%|          | 3/250 [00:07<08:05,  1.97s/it, est. speed input: 51.18 toks/s, output: 36.79 toks/s]Processed prompts:   2%|▏         | 4/250 [00:08<05:04,  1.24s/it, est. speed input: 67.13 toks/s, output: 50.62 toks/s]Processed prompts:   2%|▏         | 5/250 [00:08<03:28,  1.18it/s, est. speed input: 82.75 toks/s, output: 64.51 toks/s]Processed prompts:   4%|▍         | 10/250 [00:08<01:03,  3.77it/s, est. speed input: 164.44 toks/s, output: 136.81 toks/s]Processed prompts:   5%|▌         | 13/250 [00:08<00:46,  5.12it/s, est. speed input: 224.17 toks/s, output: 178.28 toks/s]Processed prompts:   6%|▋         | 16/250 [00:08<00:35,  6.60it/s, est. speed input: 287.01 toks/s, output: 221.17 toks/s]Processed prompts:   8%|▊         | 19/250 [00:09<00:26,  8.74it/s, est. speed input: 365.20 toks/s, output: 266.99 toks/s]Processed prompts:   8%|▊         | 21/250 [00:09<00:26,  8.60it/s, est. speed input: 386.36 toks/s, output: 293.00 toks/s]Processed prompts:  10%|▉         | 24/250 [00:09<00:20, 11.05it/s, est. speed input: 440.92 toks/s, output: 339.53 toks/s]Processed prompts:  11%|█         | 27/250 [00:09<00:18, 12.36it/s, est. speed input: 530.15 toks/s, output: 383.63 toks/s]Processed prompts:  12%|█▏        | 31/250 [00:09<00:13, 16.28it/s, est. speed input: 620.44 toks/s, output: 448.18 toks/s]Processed prompts:  14%|█▎        | 34/250 [00:09<00:13, 16.35it/s, est. speed input: 728.91 toks/s, output: 492.36 toks/s]Processed prompts:  15%|█▌        | 38/250 [00:10<00:10, 19.44it/s, est. speed input: 801.01 toks/s, output: 557.11 toks/s]Processed prompts:  16%|█▋        | 41/250 [00:10<00:16, 12.97it/s, est. speed input: 839.85 toks/s, output: 587.11 toks/s]Processed prompts:  18%|█▊        | 45/250 [00:10<00:12, 16.51it/s, est. speed input: 922.36 toks/s, output: 654.76 toks/s]Processed prompts:  21%|██        | 52/250 [00:10<00:07, 24.86it/s, est. speed input: 1038.02 toks/s, output: 777.25 toks/s]Processed prompts:  22%|██▏       | 56/250 [00:10<00:07, 25.67it/s, est. speed input: 1267.84 toks/s, output: 841.81 toks/s]Processed prompts:  24%|██▍       | 60/250 [00:11<00:07, 23.80it/s, est. speed input: 1345.87 toks/s, output: 903.01 toks/s]Processed prompts:  26%|██▌       | 65/250 [00:11<00:07, 25.39it/s, est. speed input: 1427.35 toks/s, output: 985.17 toks/s]Processed prompts:  28%|██▊       | 69/250 [00:11<00:08, 21.71it/s, est. speed input: 1521.53 toks/s, output: 1041.20 toks/s]Processed prompts:  30%|███       | 75/250 [00:11<00:06, 27.85it/s, est. speed input: 1659.92 toks/s, output: 1150.08 toks/s]Processed prompts:  32%|███▏      | 80/250 [00:11<00:05, 29.88it/s, est. speed input: 1736.67 toks/s, output: 1236.66 toks/s]Processed prompts:  34%|███▎      | 84/250 [00:11<00:05, 28.17it/s, est. speed input: 1829.54 toks/s, output: 1300.65 toks/s]Processed prompts:  35%|███▌      | 88/250 [00:12<00:05, 28.50it/s, est. speed input: 1902.89 toks/s, output: 1368.09 toks/s]Processed prompts:  37%|███▋      | 92/250 [00:12<00:05, 30.37it/s, est. speed input: 1965.93 toks/s, output: 1438.83 toks/s]Processed prompts:  38%|███▊      | 96/250 [00:12<00:06, 23.41it/s, est. speed input: 2012.25 toks/s, output: 1490.86 toks/s]Processed prompts:  40%|████      | 100/250 [00:12<00:05, 26.27it/s, est. speed input: 2074.24 toks/s, output: 1562.57 toks/s]Processed prompts:  42%|████▏     | 105/250 [00:12<00:05, 27.91it/s, est. speed input: 2132.99 toks/s, output: 1648.99 toks/s]Processed prompts:  44%|████▍     | 110/250 [00:12<00:04, 28.94it/s, est. speed input: 2315.75 toks/s, output: 1736.20 toks/s]Processed prompts:  46%|████▌     | 115/250 [00:12<00:04, 33.19it/s, est. speed input: 2443.23 toks/s, output: 1829.89 toks/s]Processed prompts:  48%|████▊     | 119/250 [00:13<00:04, 31.02it/s, est. speed input: 2540.39 toks/s, output: 1895.66 toks/s]Processed prompts:  49%|████▉     | 123/250 [00:13<00:04, 29.55it/s, est. speed input: 2630.03 toks/s, output: 1962.41 toks/s]Processed prompts:  51%|█████     | 128/250 [00:13<00:04, 27.97it/s, est. speed input: 2713.09 toks/s, output: 2044.16 toks/s]Processed prompts:  53%|█████▎    | 132/250 [00:13<00:04, 29.11it/s, est. speed input: 2764.45 toks/s, output: 2115.51 toks/s]Processed prompts:  55%|█████▍    | 137/250 [00:13<00:03, 32.25it/s, est. speed input: 2980.13 toks/s, output: 2210.58 toks/s]Processed prompts:  57%|█████▋    | 142/250 [00:13<00:03, 34.77it/s, est. speed input: 3106.35 toks/s, output: 2306.39 toks/s]Processed prompts:  58%|█████▊    | 146/250 [00:13<00:03, 32.69it/s, est. speed input: 3224.97 toks/s, output: 2374.86 toks/s]Processed prompts:  60%|██████    | 150/250 [00:14<00:03, 31.25it/s, est. speed input: 3300.72 toks/s, output: 2443.60 toks/s]Processed prompts:  62%|██████▏   | 154/250 [00:14<00:03, 30.43it/s, est. speed input: 3362.73 toks/s, output: 2513.36 toks/s]Processed prompts:  63%|██████▎   | 158/250 [00:14<00:03, 25.71it/s, est. speed input: 3472.74 toks/s, output: 2570.17 toks/s]Processed prompts:  64%|██████▍   | 161/250 [00:14<00:03, 24.73it/s, est. speed input: 3517.83 toks/s, output: 2617.39 toks/s]Processed prompts:  66%|██████▌   | 164/250 [00:14<00:04, 19.49it/s, est. speed input: 3516.13 toks/s, output: 2645.09 toks/s]Processed prompts:  67%|██████▋   | 168/250 [00:15<00:04, 20.25it/s, est. speed input: 3614.10 toks/s, output: 2710.61 toks/s]Processed prompts:  69%|██████▉   | 172/250 [00:15<00:03, 20.85it/s, est. speed input: 3705.71 toks/s, output: 2777.14 toks/s]Processed prompts:  70%|███████   | 175/250 [00:15<00:03, 20.43it/s, est. speed input: 3757.64 toks/s, output: 2823.43 toks/s]Processed prompts:  73%|███████▎  | 182/250 [00:15<00:02, 26.23it/s, est. speed input: 3925.43 toks/s, output: 2966.25 toks/s]Processed prompts:  74%|███████▍  | 186/250 [00:15<00:02, 24.42it/s, est. speed input: 3968.88 toks/s, output: 3030.44 toks/s]Processed prompts:  76%|███████▌  | 189/250 [00:15<00:02, 21.71it/s, est. speed input: 3974.66 toks/s, output: 3071.39 toks/s]Processed prompts:  78%|███████▊  | 194/250 [00:16<00:02, 25.82it/s, est. speed input: 4083.62 toks/s, output: 3176.00 toks/s]Processed prompts:  79%|███████▉  | 197/250 [00:16<00:02, 24.38it/s, est. speed input: 4116.27 toks/s, output: 3225.24 toks/s]Processed prompts:  80%|████████  | 200/250 [00:16<00:02, 24.34it/s, est. speed input: 4155.62 toks/s, output: 3278.97 toks/s]Processed prompts:  81%|████████  | 203/250 [00:16<00:01, 24.31it/s, est. speed input: 4229.98 toks/s, output: 3333.27 toks/s]Processed prompts:  82%|████████▏ | 206/250 [00:16<00:01, 23.27it/s, est. speed input: 4277.63 toks/s, output: 3383.74 toks/s]Processed prompts:  84%|████████▎ | 209/250 [00:16<00:02, 19.99it/s, est. speed input: 4346.67 toks/s, output: 3422.31 toks/s]Processed prompts:  85%|████████▍ | 212/250 [00:17<00:02, 16.42it/s, est. speed input: 4430.82 toks/s, output: 3450.13 toks/s]Processed prompts:  86%|████████▌ | 214/250 [00:17<00:02, 16.46it/s, est. speed input: 4476.25 toks/s, output: 3480.53 toks/s]Processed prompts:  86%|████████▋ | 216/250 [00:17<00:02, 13.48it/s, est. speed input: 4460.38 toks/s, output: 3488.24 toks/s]Processed prompts:  88%|████████▊ | 221/250 [00:17<00:01, 18.88it/s, est. speed input: 4568.33 toks/s, output: 3599.85 toks/s]Processed prompts:  90%|████████▉ | 224/250 [00:17<00:02, 12.32it/s, est. speed input: 4564.77 toks/s, output: 3591.56 toks/s]Processed prompts:  91%|█████████ | 227/250 [00:18<00:01, 11.99it/s, est. speed input: 4629.38 toks/s, output: 3624.50 toks/s]Processed prompts:  92%|█████████▏| 229/250 [00:18<00:01, 11.16it/s, est. speed input: 4645.46 toks/s, output: 3638.48 toks/s]Processed prompts:  92%|█████████▏| 231/250 [00:18<00:01, 11.93it/s, est. speed input: 4698.55 toks/s, output: 3671.67 toks/s]Processed prompts:  93%|█████████▎| 233/250 [00:19<00:01,  8.80it/s, est. speed input: 4651.74 toks/s, output: 3652.24 toks/s]Processed prompts:  94%|█████████▍| 235/250 [00:19<00:01,  7.56it/s, est. speed input: 4640.99 toks/s, output: 3643.52 toks/s]Processed prompts:  95%|█████████▍| 237/250 [00:19<00:01,  7.60it/s, est. speed input: 4678.07 toks/s, output: 3656.09 toks/s]Processed prompts:  96%|█████████▌| 239/250 [00:19<00:01,  7.99it/s, est. speed input: 4696.78 toks/s, output: 3677.25 toks/s]Processed prompts:  97%|█████████▋| 242/250 [00:20<00:01,  7.34it/s, est. speed input: 4651.51 toks/s, output: 3685.58 toks/s]Processed prompts:  97%|█████████▋| 243/250 [00:20<00:00,  7.44it/s, est. speed input: 4664.65 toks/s, output: 3694.89 toks/s]Processed prompts:  98%|█████████▊| 246/250 [00:20<00:00, 10.50it/s, est. speed input: 4757.64 toks/s, output: 3771.00 toks/s]Processed prompts:  99%|█████████▉| 248/250 [00:22<00:00,  3.45it/s, est. speed input: 4463.52 toks/s, output: 3563.58 toks/s]Processed prompts: 100%|██████████| 250/250 [00:22<00:00,  3.63it/s, est. speed input: 4419.83 toks/s, output: 3557.29 toks/s]Processed prompts: 100%|██████████| 250/250 [00:22<00:00,  3.63it/s, est. speed input: 4419.83 toks/s, output: 3557.29 toks/s]Processed prompts: 100%|██████████| 250/250 [00:22<00:00, 11.04it/s, est. speed input: 4419.83 toks/s, output: 3557.29 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-33b-instruct --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    static class Pair {
        int first;
        int second;

        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    static int bfs(int v, int N, ArrayList<ArrayList<Integer>> G, HashMap<Pair, Integer> E) {
        boolean[] visited = new boolean[N];
        Queue<Integer> queue = new LinkedList<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.add(v);
        visited[v] = true;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            for (int nex : G.get(q)) {
                if (visited[nex]) {
                    continue;
                }
                visited[nex] = true;
                color++;
                if (color == node2color[q]) {
                    color++;
                }
                node2color[nex] = color;
                E.put(new Pair(Math.min(q, nex), Math.max(q, nex)), color);
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        ArrayList<ArrayList<Integer>> G = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        HashMap<Pair, Integer> E = new HashMap<>();
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            G.get(a).add(b);
            G.get(b).add(a);
            E.put(new Pair(Math.min(a, b), Math.max(a, b)), 0);
        }
        int K = bfs(0, N, G, E);
        System.out.println(K);
        for (int value : E.values()) {
            System.out.println(value);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        double sum = 0;
        for (int i = 0; i < N; i++) {
            double value = scanner.nextDouble();
            String currency = scanner.next();
            if (currency.equals("JPY")) {
                sum += value;
            } else if (currency.equals("BTC")) {
                sum += value * 380000.0;
            }
        }
        System.out.printf("%.2f", sum);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = 1000000;
        int MOD = 1000000007;
        int Nsq = 1000;
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextLong();
        }
        long[] fact = new long[M];
        fact[0] = 1;
        for (int n = 1; n < Nsq; n++) {
            for (int i = 0; i < M; i++) {
                fact[i] *= n;
                fact[i] %= MOD;
            }
        }
        long[] inv = new long[N];
        for (int i = 0; i < N; i++) {
            inv[i] = BigInteger.valueOf(i + 1).modInverse(BigInteger.valueOf(MOD)).longValue();
        }
        long[] temp = new long[N];
        for (int i = 0; i < N; i++) {
            temp[i] = (inv[i] + inv[N - 1 - i] - 1) % MOD;
        }
        long ans = 0;
        for (int i = 0; i < N; i++) {
            ans += A[i] * temp[i];
            ans %= MOD;
        }
        ans *= fact[N - 1];
        ans %= MOD;
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long t = scanner.nextLong();
        long s = scanner.nextLong();
        long q = scanner.nextLong();
        int ans = 0;
        while (s < t) {
            s *= q;
            ans += 1;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] ls_xyh = new int[n][3];
        for (int i = 0; i < n; i++) {
            ls_xyh[i][0] = scanner.nextInt();
            ls_xyh[i][1] = scanner.nextInt();
            ls_xyh[i][2] = scanner.nextInt();
        }
        System.out.println(solve(n, ls_xyh));
    }

    public static String solve(int n, int[][] ls_xyh) {
        int x0 = 0, y0 = 0, h0 = 0;
        for (int i = 0; i < n; i++) {
            if (ls_xyh[i][2] > 0) {
                x0 = ls_xyh[i][0];
                y0 = ls_xyh[i][1];
                h0 = ls_xyh[i][2];
                break;
            }
        }
        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(new int[]{cx, cy, h0 + Math.abs(cx - x0) + Math.abs(cy - y0)});
            }
        }
        for (int[] xyh : ls_xyh) {
            int x = xyh[0], y = xyh[1], h = xyh[2];
            Iterator<int[]> iterator = cands.iterator();
            while (iterator.hasNext()) {
                int[] cand = iterator.next();
                int cx = cand[0], cy = cand[1], ch = cand[2];
                if (Math.max(ch - Math.abs(cx - x) - Math.abs(cy - y), 0) != h) {
                    iterator.remove();
                }
            }
        }
        int[] cand = cands.get(0);
        return cand[0] + " " + cand[1] + " " + cand[2];
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = sc.nextInt();
            PC[i][1] = sc.nextInt();
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < (1 << D); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if (((i >> j) & 1) == 1) {
                    score += 100 * (j + 1) * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if (((i >> j) & 1) == 1) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                } else {
                    int tmp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    ans = Math.min(ans, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int vamshi = scanner.nextInt();
        int z = scanner.nextInt();
        System.out.println((vamshi / z + 1) * z);
    }
}
import java.util.*;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < n; i++) {
            String input = scanner.nextLine();
            solve(input);
        }
    }

    public static void solve(String input) {
        int[] s = new int[input.length()];
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == 'O') {
                s[i] = 0;
            } else {
                s[i] = 1;
            }
        }

        List<Pair> tot = new ArrayList<>();
        for (int i = 1; i <= 12; i++) {
            if (12 % i == 0) {
                if (help(i, 12 / i, s)) {
                    tot.add(new Pair(12 / i, i));
                }
            }
        }

        System.out.print(tot.size() + " ");
        for (Pair pair : tot) {
            System.out.print(pair.a + "x" + pair.b + " ");
        }
        System.out.println();
    }

    public static boolean help(int a, int b, int[] l) {
        int[][] tot = new int[b][a];
        for (int i = 0; i < b; i++) {
            for (int j = 0; j < a; j++) {
                tot[i][j] = l[i * a + j];
            }
        }

        for (int i = 0; i < a; i++) {
            int sum = 0;
            for (int j = 0; j < b; j++) {
                sum += tot[j][i];
            }
            if (sum == b) {
                return true;
            }
        }

        return false;
    }

    static class Pair implements Comparable<Pair> {
        int a, b;

        Pair(int a, int b) {
            this.a = a;
            this.b = b;
        }

        @Override
        public int compareTo(Pair o) {
            if (this.a != o.a) {
                return Integer.compare(this.a, o.a);
            } else {
                return Integer.compare(this.b, o.b);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextLong();
        }
        long[] cum_remainders = new long[N + 1];
        for (int i = 0; i < N; i++) {
            cum_remainders[i + 1] = (cum_remainders[i] + A[i]) % M;
        }
        Map<Long, Long> remainder_counts = new HashMap<>();
        for (long remainder : cum_remainders) {
            remainder_counts.put(remainder, remainder_counts.getOrDefault(remainder, 0L) + 1);
        }
        long combinations = 0;
        for (long count : remainder_counts.values()) {
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
    }
}
import java.util.Scanner;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        boolean Judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        for (int x = 0; x < N; x++) {
            char s = S.charAt(x);
            char t = T.charAt(x);
            if (s == 'L') {
                S_L++;
                if (S_L - T_R - s_c == 0) {
                    Judge = true;
                }
            } else if (s == 'R') {
                S_R++;
                if (s_c + (S_R - T_L) == W + 1) {
                    Judge = true;
                }
            } else if (s == 'U') {
                S_U++;
                if (S_U - T_D - s_r == 0) {
                    Judge = true;
                }
            } else if (s == 'D') {
                S_D++;
                if (s_r + (S_D - T_U) == H + 1) {
                    Judge = true;
                }
            }
            if (t == 'L') {
                if (S_R - T_L + s_c != 1) {
                    T_L++;
                }
            }
            if (t == 'R') {
                if (s_c + (T_R - S_L) != W) {
                    T_R++;
                }
            }
            if (t == 'U') {
                if (S_D - T_U + s_r != 1) {
                    T_U++;
                }
            }
            if (t == 'D') {
                if (s_r + (T_D - S_U) != H) {
                    T_D++;
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class codeforces_55_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        while (n % 2 == 0) {
            n /= 2;
        }
        if (n == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        int k = scanner.nextInt();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.*;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.next();
        }
        List<Character> d1 = new ArrayList<>();
        List<Character> d2 = new ArrayList<>();
        Set<Character> rem = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    d1.add(s[i].charAt(j));
                }
                if (i == n - j - 1) {
                    d2.add(s[i].charAt(j));
                }
                if (i != j && i != n - j - 1) {
                    rem.add(s[i].charAt(j));
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!d1.equals(d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).size() != 1) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).equals(rem)) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = B; j <= D; j++) {
                d[i][j] += (d[i][j - 1] * i + d[i - 1][j] * j - d[i - 1][j - 1] * (i - 1) * (j - 1)) % m;
            }
        }
        System.out.println(d[C][D]);
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        for (int i = 0; i < t; i++) {
            String op = scanner.next();
            if (op.equals("alloc")) {
                int pos = 0;
                int size = scanner.nextInt();
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        pos++;
                        if (pos == size) {
                            Arrays.fill(alocuente, j - size + 1, j + 1, ind);
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                }
                if (pos != size) {
                    System.out.println("NULL");
                }
            }
            if (op.equals("erase")) {
                int pos = scanner.nextInt();
                if (pos <= 0 || pos > m || alocuente[pos - 1] == 0) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    alocuente[pos - 1] = 0;
                }
            }
            if (op.equals("defragment")) {
                int cnt = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        cnt++;
                    }
                }
                alocuente = Arrays.stream(alocuente).filter(num -> num != 0).toArray();
                for (int j = 0; j < cnt; j++) {
                    alocuente = Arrays.copyOf(alocuente, alocuente.length + 1);
                    alocuente[alocuente.length - 1] = 0;
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;

public class atcoder_AGC021_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Point> points = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            points.add(new Point(x, y));
        }

        for (int i = 0; i < N; i++) {
            Point currentPoint = points.get(i);
            List<Double> angles = new ArrayList<>();
            for (int j = 0; j < N; j++) {
                if (j != i) {
                    Point otherPoint = points.get(j);
                    double angle = Math.atan2(otherPoint.x - currentPoint.x, otherPoint.y - currentPoint.y);
                    angles.add(angle);
                }
            }
            Collections.sort(angles);
            angles.add(angles.get(0) + 2 * Math.PI);

            double maxAngle = 0;
            for (int j = 0; j < angles.size() - 1; j++) {
                double angle = angles.get(j + 1) - angles.get(j);
                if (angle >= Math.PI) {
                    angle = angle - Math.PI;
                }
                maxAngle = Math.max(maxAngle, angle);
            }

            System.out.println(maxAngle / (2 * Math.PI));
        }
    }

    static class Point {
        int x, y;

        Point(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
}
import java.util.*;

public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        sc.nextLine();
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextLine();
        }
        int[] march = new int[5];
        for (String s : S) {
            switch (s.charAt(0)) {
                case 'M':
                    march[0]++;
                    break;
                case 'A':
                    march[1]++;
                    break;
                case 'R':
                    march[2]++;
                    break;
                case 'C':
                    march[3]++;
                    break;
                case 'H':
                    march[4]++;
                    break;
            }
        }
        long ans = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = i + 1; j < 4; j++) {
                for (int k = j + 1; k < 5; k++) {
                    ans += (long) march[i] * march[j] * march[k];
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        List<Integer> list = new ArrayList<>();
        list.add(arr[0]);
        for (int i = 1; i < n; i++) {
            if (arr[i] != arr[i - 1]) {
                list.add(arr[i]);
            }
        }

        n = list.size();
        int ans = 0;
        for (int i = 1; i < n - 1; i++) {
            if ((list.get(i - 1) < list.get(i) && list.get(i) > list.get(i + 1)) ||
                    (list.get(i - 1) > list.get(i) && list.get(i) < list.get(i + 1))) {
                ans++;
                i++;
            }
        }

        System.out.println(ans + 1);
    }
}
import java.util.*;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        HashMap<Integer, Integer> l = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (!l.containsKey(lst[i])) {
                l.put(lst[i], 1);
            } else {
                l.put(lst[i], l.get(lst[i]) + 1);
            }
        }
        long res = 0;
        for (int i = 0; i < n; i++) {
            if (l.get(lst[i]) > 1) {
                res += n - i - l.get(lst[i]);
                l.put(lst[i], l.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        String S = scanner.next();
        calculate(N, S);
    }

    public static void calculate(int n, String s) {
        char[] arr = s.toCharArray();
        int rNum = 0, gNum = 0, bNum = 0;
        for (char c : arr) {
            if (c == 'R') rNum++;
            else if (c == 'G') gNum++;
            else if (c == 'B') bNum++;
        }
        int sum = 0;
        for (int step = 1; step <= Math.ceil(n / 2.0); step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String str = "" + arr[i] + arr[i + step] + arr[i + 2 * step];
                if (str.equals("RGB") || str.equals("RBG") || str.equals("BGR") || str.equals("BRG") || str.equals("GBR") || str.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(rNum * gNum * bNum - sum);
    }
}
import java.util.*;

public class atcoder_AGC014_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            adj.get(a).add(b);
            adj.get(b).add(a);
        }
        Queue<Integer> que = new LinkedList<>();
        que.add(1);
        boolean[] seen = new boolean[N + 1];
        seen[1] = true;
        int[] par = new int[N + 1];
        int[] child_num = new int[N + 1];
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adj.get(v)) {
                if (!seen[u]) {
                    seen[u] = true;
                    par[u] = v;
                    child_num[v]++;
                    que.add(u);
                }
            }
        }
        Deque<Integer> seq = new ArrayDeque<>();
        for (int i = 1; i <= N; i++) {
            if (child_num[i] == 0) {
                seq.add(i);
            }
        }
        while (!seq.isEmpty()) {
            int c = seq.pollLast();
            seen[c] = false;
            if (!seen[par[c]]) {
                System.out.println("First");
                return;
            }
            seen[par[c]] = false;
            child_num[par[par[c]]]--;
            if (child_num[par[par[c]]] == 0) {
                seq.add(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    static boolean debug = false;

    public static void log(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    public static String[] parseInput(String linesAsString) {
        String[] lines = new String[0];
        if (linesAsString == null) {
            debug = false;
            Scanner scanner = new Scanner(System.in);
            lines = new String[]{scanner.nextLine()};
        } else {
            debug = true;
            lines = linesAsString.split("\n");
        }
        String c = lines[0].split(" ")[0];
        return new String[]{c};
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return String.valueOf(a.charAt(i + 1));
    }

    public static void main(String[] args) {
        String[] result = solve(parseInput(null)[0]);
        System.out.println(result[0]);
    }
}
import java.util.*;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int[] ans = new int[n];
        int mx = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            ans[i] = Math.max(0, mx - arr[i] + 1);
            if (arr[i] > mx) {
                mx = arr[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    public static void main(String[] args) {
        FastScanner fs = new FastScanner();
        int N = fs.nextInt();
        int M = fs.nextInt();
        ArrayList<Integer>[] edge = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }
        for (int i = 0; i < M; i++) {
            int X = fs.nextInt() - 1;
            int Y = fs.nextInt() - 1;
            edge[X].add(Y);
            edge[Y].add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Queue<Integer> queue = new LinkedList<>();
                queue.add(i);
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    used[node] = true;
                    for (int nextnode : edge[node]) {
                        if (!used[nextnode]) {
                            queue.add(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC118_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int gcd = A[0];
        for (int i = 1; i < N; i++) {
            gcd = gcd(gcd, A[i]);
        }
        System.out.println(gcd);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        int k = scanner.nextInt();
        long mod = (long) Math.pow(10, 9) + 7;

        int nn = (int) Math.sqrt(n);
        long[] coef = new long[nn];
        for (int i = 1; i <= nn; i++) {
            coef[i - 1] = (n / i) - (n / (i + 1));
        }
        for (int i = nn; i < n; i++) {
            coef[i] = 1;
        }

        long[][] dp = new long[k + 1][nn];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long tmp = 0;
            for (int j = nn - 1; j >= 0; j--) {
                tmp += dp[i - 1][(nn - 1) - j];
                tmp %= mod;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= mod;
            }
        }

        long sum = 0;
        for (int i = 0; i < nn; i++) {
            sum += dp[k][i];
            sum %= mod;
        }

        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int min = Math.min(a, b);
        int max = Math.max(a, b);
        System.out.println(min + " " + (max - min) / 2);
    }
}
import java.util.Scanner;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int i = 1;
        while (m >= i) {
            m -= i;
            i = (i % n) + 1;
        }
        System.out.println(m);
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] a = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            a[i] = Integer.parseInt(input[i]);
        }
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 0) {
                System.out.println(i + 1);
                break;
            }
        }
    }
}
import java.util.*;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        boolean found = false;
        for (int i = 0; i < n; i++) {
            if (Arrays.binarySearch(l, l[i] + 1) >= 0 && Arrays.binarySearch(l, l[i] + 2) >= 0) {
                System.out.println("YES");
                found = true;
                break;
            }
        }
        if (!found) {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String recordOfMovements = scanner.nextLine();
        int x = 0, y = 0;
        Map<Character, int[]> dMovement = new HashMap<>();
        dMovement.put('L', new int[]{0, -1});
        dMovement.put('R', new int[]{0, 1});
        dMovement.put('U', new int[]{1, 0});
        dMovement.put('D', new int[]{-1, 0});
        Map<List<Integer>, String> d = new HashMap<>();
        d.put(Arrays.asList(x, y), "");
        boolean bug = false;
        for (char move : recordOfMovements.toCharArray()) {
            List<Integer> temp = Arrays.asList(x, y);
            x += dMovement.get(move)[0];
            y += dMovement.get(move)[1];
            if (!d.containsKey(Arrays.asList(x, y))) {
                for (char step : dMovement.keySet()) {
                    if (!Arrays.asList(x + dMovement.get(step)[0], y + dMovement.get(step)[1]).equals(temp) && d.containsKey(Arrays.asList(x + dMovement.get(step)[0], y + dMovement.get(step)[1]))) {
                        bug = true;
                        break;
                    }
                }
            } else {
                bug = true;
            }
            if (bug) {
                break;
            }
            d.put(Arrays.asList(x, y), "");
        }
        if (bug) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String number = scanner.next();
        int h1 = 0;
        int h2 = 0;
        boolean x = false;
        for (int i = 0; i < n; i++) {
            char c = number.charAt(i);
            if (c != '4' && c != '7') {
                System.out.println("NO");
                x = true;
                break;
            }
            if (i < n / 2) {
                h1 += c - '0';
            } else {
                h2 += c - '0';
            }
        }
        if (!x) {
            if (h1 == h2) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        int min = arr[0];
        boolean divisible = false;
        for (int i = 0; i < n; i++) {
            if (arr[i] % min == 0) {
                divisible = true;
                break;
            }
        }
        System.out.println(divisible ? min : -1);
    }
}
import java.util.*;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();
        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();
        int yay = 0, whoops = 0;
        for (char letra : s.toCharArray()) {
            freqs.put(letra, freqs.getOrDefault(letra, 0) + 1);
        }
        for (char letra : t.toCharArray()) {
            freqt.put(letra, freqt.getOrDefault(letra, 0) + 1);
        }
        for (char letra : freqs.keySet()) {
            while (freqs.get(letra) > 0 && freqt.containsKey(letra) && freqt.get(letra) > 0) {
                yay++;
                freqs.put(letra, freqs.get(letra) - 1);
                freqt.put(letra, freqt.get(letra) - 1);
            }
        }
        for (char letra : freqs.keySet()) {
            while (freqs.get(letra) > 0) {
                if (Character.isLowerCase(letra) && freqt.containsKey(Character.toUpperCase(letra)) && freqt.get(Character.toUpperCase(letra)) > 0) {
                    whoops++;
                    freqs.put(letra, freqs.get(letra) - 1);
                    freqt.put(Character.toUpperCase(letra), freqt.get(Character.toUpperCase(letra)) - 1);
                } else if (Character.isUpperCase(letra) && freqt.containsKey(Character.toLowerCase(letra)) && freqt.get(Character.toLowerCase(letra)) > 0) {
                    whoops++;
                    freqs.put(letra, freqs.get(letra) - 1);
                    freqt.put(Character.toLowerCase(letra), freqt.get(Character.toLowerCase(letra)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        int[] lista = new int[a];
        for (int i = 0; i < a; i++) {
            lista[i] = scanner.nextInt();
        }

        int[] listb = new int[b];
        for (int i = 0; i < b; i++) {
            listb[i] = scanner.nextInt();
        }

        for (int k = 0; k < n; k++) {
            boolean found = false;
            for (int i = 0; i < a; i++) {
                if (k + 1 == lista[i]) {
                    System.out.print("1 ");
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.print("2 ");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        long x = Long.parseLong(input[0]);
        long y = Long.parseLong(input[1]);
        long a = Long.parseLong(input[2]);
        long b = Long.parseLong(input[3]);

        long lcm = L(x, y);
        System.out.println((b / lcm) - ((a - 1) / lcm));
    }

    public static long G(long a, long b) {
        while (a % b != 0) {
            long temp = a;
            a = b;
            b = temp % b;
        }
        return b;
    }

    public static long L(long a, long b) {
        return (a * b) / G(a, b);
    }
}
import java.util.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        Integer[] S = new Integer[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        Arrays.sort(S, Collections.reverseOrder());
        boolean[] flag = new boolean[N];
        Arrays.fill(flag, true);
        ArrayList<Integer> cur = new ArrayList<>();
        cur.add(S[0]);
        flag[0] = false;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int k = 0; k < N; k++) {
                if (flag[k] && S[k] < cur.get(j)) {
                    cur.add(S[k]);
                    j++;
                    flag[k] = false;
                    if (j == jM) {
                        break;
                    }
                }
            }
            if (j != jM) {
                System.out.println("No");
                return;
            }
            cur.sort(Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int t = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        for (int i = 0; i < t; i++) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
            distance += v;
            v += a * d;
        }
        System.out.println(distance);
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_672_A {
    public static void main(String[] args) {
        ArrayList<Integer> li = new ArrayList<>();
        int ind = 0;
        for (int i = 1; i < 371; i++) {
            ArrayList<Integer> temp = new ArrayList<>();
            int p = i, q = i, count = 0;
            while (p != 0) {
                p /= 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            }
            if (count == 2 || count == 3) {
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                for (int j = temp.size() - 1; j >= 0; j--) {
                    li.add(temp.get(j));
                }
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println(li.get(n - 1));
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();
        if (dragon <= princess) {
            System.out.println(0);
            System.exit(0);
        }
        int result = 0;
        double position = t * princess;
        position += princess * position / (dragon - princess);
        while (position < c) {
            result += 1;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String txt = scanner.nextLine();
        int cu = 0;
        int cl = 0;
        for (int i = 0; i < txt.length(); i++) {
            char z = txt.charAt(i);
            if (Character.isLowerCase(z)) {
                cl++;
            } else {
                cu++;
            }
        }
        String out;
        if (cu > cl) {
            out = txt.toUpperCase();
        } else {
            out = txt.toLowerCase();
        }
        System.out.println(out);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> list = new ArrayList<>();
        int r = 1;
        for (String k : scanner.nextLine().split(" ")) {
            for (int i = 0; i < Integer.parseInt(k); i++) {
                list.add(r);
            }
            r++;
        }
        scanner.nextLine();
        for (String j : scanner.nextLine().split(" ")) {
            System.out.println(list.get(Integer.parseInt(j) - 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            lst[i] = substract(a, b);
        }
        for (int i : lst) {
            System.out.println(i);
        }
    }

    public static int substract(int a, int b) {
        if (a > b) {
            int total = 0;
            while (a > 0 && b > 0) {
                total += a / b;
                a = a % b;
                if (a > 0) {
                    total += b / a;
                    b = b % a;
                }
            }
            return total;
        }
        if (a < b) {
            int total = 0;
            while (a > 0 && b > 0) {
                total += b / a;
                b = b % a;
                if (b > 0) {
                    total += a / b;
                    a = a % b;
                }
            }
            return total;
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long ans = 0;
        for (int i = 1; i <= N; i++) {
            ans += (long) i * (N / i) * (N / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            System.out.println(a + b);
        }
    }
}
import java.util.Scanner;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int ans = n - 1;
        int last = 0;
        for (int i : l) {
            ans += Math.abs(last - i) + 1;
            last = i;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        int d = s < f ? 1 : -1;
        String res = "";
        int i = 1;
        int j = s;
        while (j != f) {
            if (i > t && k < m) {
                t = scanner.nextInt();
                l = scanner.nextInt();
                r = scanner.nextInt();
                k += 1;
            }
            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res += 'X';
            } else {
                res += d == 1 ? 'R' : 'L';
                j += d;
            }
            i += 1;
        }
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            int x = scanner.nextInt();
            int t = l;
            while (t <= r) {
                int next_val = comp[t - 1];
                if (out[t - 1] == 0 && t != x) {
                    out[t - 1] = x;
                }
                comp[t - 1] = r + 1;
                if (t < x) {
                    comp[t - 1] = x;
                }
                t = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tcs = 1;
        int tc = 1;
        while (tc <= tcs) {
            solve(scanner, tc);
            tc += 1;
        }
    }

    public static void solve(Scanner scanner, int tc) {
        int a = scanner.nextInt();
        System.out.println(a == 0 ? 1 : 0);
    }
}
import java.util.*;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long N = sc.nextLong();
        long A = sc.nextLong();
        long B = sc.nextLong();
        long mod = (long) Math.pow(10, 9) + 7;
        long ans = 0;
        long rep = N / (A + B);
        ans += rep * A;
        long res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] m = new int[n];
        for (int i = 0; i < n; i++) {
            m[i] = scanner.nextInt();
        }
        boolean possible = true;
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int i : m) {
            countMap.put(i, countMap.getOrDefault(i, 0) + 1);
            if (countMap.get(i) >= n / 2 + 1) {
                possible = false;
                break;
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long q = sc.nextLong();
        long h = sc.nextLong();
        long s = sc.nextLong();
        long d = sc.nextLong();
        long n = sc.nextLong();
        long best1L = Math.min(Math.min(q * 4, h * 2), s);
        long best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.*;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int A = scanner.nextInt();
            int idx = binarySearch(ans, A);
            if (idx == ans.size()) {
                List<Integer> newList = new ArrayList<>();
                newList.add(A);
                ans.add(newList);
            } else {
                ans.get(idx).add(A);
            }
        }
        System.out.println(ans.size());
    }

    private static int binarySearch(List<List<Integer>> ans, int key) {
        int bad = -1, good = ans.size();
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (ans.get(mid).get(ans.get(mid).size() - 1) < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] time1 = scanner.next().split(":");
        String[] time2 = scanner.next().split(":");

        int h1 = Integer.parseInt(time1[0]);
        int m1 = Integer.parseInt(time1[1]);
        m1 += h1 * 60;

        int h2 = Integer.parseInt(time2[0]);
        int m2 = Integer.parseInt(time2[1]);
        m2 += h2 * 60;

        m2 = m1 - m2;
        m2 %= 1440;

        System.out.printf("%02d:%02d", m2 / 60, m2 % 60);
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int at = scanner.nextInt();
        int b = scanner.nextInt();
        int bt = scanner.nextInt();
        String[] time = scanner.next().split(":");
        int t1 = Integer.parseInt(time[0]);
        int t2 = Integer.parseInt(time[1]);
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            if (now + bt > st) {
                ans += 1;
            }
            now += b;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        int n = scanner.nextInt();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            String x = scanner.next();
            int a = 0, b = 0;
            for (int j = 0; j < s.length(); j++) {
                if (s.charAt(j) == x.charAt(0)) {
                    a++;
                } else if (s.charAt(j) == x.charAt(1)) {
                    b++;
                } else {
                    ans += Math.min(a, b);
                    a = 0;
                    b = 0;
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            if (a < 2) {
                System.out.println(0);
            }
            if (a >= 2) {
                System.out.println(a - 2);
            }
        }
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < n; i++) {
            numSet.add(scanner.nextInt());
        }
        Set<Integer> twoTimesSet = new HashSet<>();
        for (int num : numSet) {
            for (int j = 1; j <= 30; j++) {
                num /= 2;
                if (num % 2 != 0) {
                    twoTimesSet.add(j);
                    break;
                }
            }
            if (twoTimesSet.size() != 1) {
                System.out.println(0);
                return;
            }
        }
        List<Integer> numList = new ArrayList<>(numSet);
        BigInteger lcm = BigInteger.valueOf(numList.get(0));
        for (int i = 1; i < numList.size(); i++) {
            lcm = lcm.multiply(BigInteger.valueOf(numList.get(i))).divide(lcm.gcd(BigInteger.valueOf(numList.get(i))));
        }
        System.out.println(lcm.divide(BigInteger.valueOf(2)).add(BigInteger.ONE));
    }
}
import java.util.*;

public class codeforces_216_B {
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        while (solve()) ;
    }

    static int[] readInts() {
        String[] line = sc.nextLine().split(" ");
        int[] res = new int[line.length];
        for (int i = 0; i < line.length; i++) {
            res[i] = Integer.parseInt(line[i]);
        }
        return res;
    }

    static int[] dfs(Map<Integer, Set<Integer>> g, Set<Integer> seen, int i) {
        if (seen.contains(i)) {
            return new int[]{0, 0};
        }
        seen.add(i);
        int nodes = 1;
        int edges = g.get(i).size();
        for (int j : g.get(i)) {
            int[] xy = dfs(g, seen, j);
            nodes += xy[0];
            edges += xy[1];
        }
        return new int[]{nodes, edges};
    }

    static boolean solve() {
        int[] line0 = readInts();
        if (line0.length == 0) {
            return false;
        }
        int n = line0[0];
        int m = line0[1];
        Map<Integer, Set<Integer>> g = new HashMap<>();
        Set<Integer> seen = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            g.put(i, new HashSet<>());
        }
        for (int i = 0; i < m; i++) {
            int[] ab = readInts();
            int a = ab[0];
            int b = ab[1];
            g.get(a).add(b);
            g.get(b).add(a);
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (!seen.contains(i)) {
                int[] nodesEdges = dfs(g, seen, i);
                int nodes = nodesEdges[0];
                int edges = nodesEdges[1];
                if (nodes > 1 && nodes % 2 == 1 && 2 * nodes == edges) {
                    ans += 1;
                }
            }
        }
        if ((n - ans) % 2 == 1) {
            ans += 1;
        }
        System.out.println(ans);
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC149_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long[] cookies = new long[3];
        for (int i = 0; i < 3; i++) {
            cookies[i] = scanner.nextLong();
        }
        long leftOver = cookies[0] - cookies[2];
        long takahashi = Math.max(0, leftOver);
        System.out.println(takahashi + " " + (takahashi > 0 ? cookies[1] : Math.max(0, cookies[1] - Math.abs(leftOver))));
    }
}
import java.util.*;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int currentLevel = 0;
        int counter = 0;
        int counterTurns = -1;
        while (counter < a.length) {
            counterTurns++;
            for (int i = 0; i < a.length; i++) {
                if (a[i] != -1 && a[i] <= counter) {
                    counter++;
                    a[i] = -1;
                }
            }
            reverse(a);
        }
        System.out.println(counterTurns);
    }

    private static void reverse(int[] a) {
        for (int i = 0; i < a.length / 2; i++) {
            int temp = a[i];
            a[i] = a[a.length - i - 1];
            a[a.length - i - 1] = temp;
        }
    }
}
import java.util.*;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            l[a] = b;
        }
        if (l[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        for (int i = 1; i < 1000010; i++) {
            if (l[i] == 0) {
                dp[i] = dp[i - 1];
            } else {
                if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
            }
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }
        System.out.println(n - mx);
    }
}
import java.util.*;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        if (sum(a) % (n * (n + 1) / 2) != 0) {
            System.out.println("NO");
        } else {
            int k = sum(a) / (n * (n + 1) / 2);
            int[] b = new int[n + 1];
            System.arraycopy(a, 0, b, 0, n);
            b[n] = a[0];
            if (sum(b, k) != 0 || sum(b, k, n) != n) {
                System.out.println("NO");
            } else {
                System.out.println("YES");
            }
        }
    }

    private static int sum(int[] a) {
        int sum = 0;
        for (int i : a) {
            sum += i;
        }
        return sum;
    }

    private static int sum(int[] a, int k) {
        int sum = 0;
        for (int i = 1; i < a.length; i++) {
            sum += (k - a[i] + a[i - 1]) % a.length;
        }
        return sum;
    }

    private static int sum(int[] a, int k, int n) {
        int count = 0;
        for (int i = 1; i < a.length; i++) {
            if ((k - a[i] + a[i - 1]) / a.length >= 0) {
                count++;
            }
        }
        return count;
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int min, max;

        if (n < 1) {
            if (m < 1) {
                System.out.println(n + " " + m);
                System.exit(0);
            } else {
                System.out.println("Impossible");
                System.exit(0);
            }
        }

        if (m > n) {
            min = m;
            max = n + m - 1;
            System.out.println(min + " " + max);
        }

        if (m <= n) {
            min = n;
            max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        int[] georgeComplexity = new int[m];

        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }

        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }

        int i = 0, j = 0;
        while (i < n && j < m) {
            if (roundComplexity[i] <= georgeComplexity[j]) {
                i++;
            }
            j++;
        }

        System.out.println(n - i);
    }
}
import java.util.*;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        PriorityQueue<Pair> x = new PriorityQueue<>();
        PriorityQueue<Integer> y = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            int day = scanner.nextInt();
            int salary = scanner.nextInt();
            x.add(new Pair(-day, -salary));
        }
        while (!x.isEmpty()) {
            Pair pair = x.poll();
            int r = m - y.size();
            if (r >= -pair.day) {
                y.add(-pair.salary);
            } else {
                y.add(-pair.salary);
                y.poll();
            }
        }
        int sum = 0;
        while (!y.isEmpty()) {
            sum += y.poll();
        }
        System.out.println(sum);
    }

    static class Pair implements Comparable<Pair> {
        int day;
        int salary;

        public Pair(int day, int salary) {
            this.day = day;
            this.salary = salary;
        }

        @Override
        public int compareTo(Pair o) {
            if (this.day != o.day) {
                return Integer.compare(this.day, o.day);
            } else {
                return Integer.compare(this.salary, o.salary);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC120_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        if (s.length() == 1) {
            System.out.println(0);
            return;
        }
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int min = Collections.min(map.values());
        System.out.println(min * 2);
    }
}
import java.util.Scanner;

public class codeforces_397_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int k = scanner.nextInt();
            int n = scanner.nextInt();
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            if (k / n * a >= k) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
    }
}
import java.util.*;

public class atcoder_ARC102_C {
    static int mod = 998244353;
    static int __N = 8000;
    static long[] g1 = new long[__N + 1];
    static long[] g2 = new long[__N + 1];
    static long[] inverse = new long[__N + 1];

    static long cmb(int n, int r, int mod) {
        if (r < 0 || r > n)
            return 0;
        r = Math.min(r, n - r);
        return g1[n] * g2[r] % mod * g2[n - r] % mod;
    }

    static long kumiawase(int p, int q) {
        return cmb(p + q - 1, q - 1, mod);
    }

    static long solve(int n, int K, int N) {
        long ans = 0;
        int kumi = (n - 1) / 2;
        for (int p = 0; p <= kumi; p++) {
            if (p > N)
                break;
            ans += 2 * p * cmb(kumi, p, mod) * kumiawase(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 0 : 1)));
            if (n % 2 == 0 && N - p - 1 >= 0)
                ans += 2 * p * cmb(kumi, p, mod) * kumiawase(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 0 : 1)));
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int N = sc.nextInt();
        g1[0] = g1[1] = g2[0] = g2[1] = inverse[0] = 1;
        inverse[1] = mod - 1;
        for (int i = 2; i <= __N; i++) {
            g1[i] = g1[i - 1] * i % mod;
            inverse[i] = (mod - inverse[mod % i] * (mod / i) % mod);
            g2[i] = g2[i - 1] * inverse[i] % mod;
        }
        List<Long> ans = new ArrayList<>();
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                long tmp = solve(i, K, N) % mod;
                ans.add(tmp);
                System.out.println(tmp);
            } else {
                System.out.println(ans.get(2 * K - i));
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC148_F {
    static int n, ta, ao;
    static ArrayList<Integer>[] g;
    static int[] ta_dist, ao_dist;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        ta = sc.nextInt() - 1;
        ao = sc.nextInt() - 1;
        g = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < n - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            g[a].add(b);
            g[b].add(a);
        }
        ta_dist = new int[n];
        ao_dist = new int[n];
        Arrays.fill(ta_dist, -1);
        Arrays.fill(ao_dist, -1);
        ta_dist[ta] = 0;
        ao_dist[ao] = 0;
        dfs(ta, ta_dist, g);
        dfs(ao, ao_dist, g);
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (ta_dist[i] > ao_dist[i]) continue;
            res = Math.max(res, ao_dist[i]);
        }
        System.out.println(res - 1);
    }

    static void dfs(int node, int[] dist, ArrayList<Integer>[] g) {
        for (int v : g[node]) {
            if (dist[v] != -1) continue;
            dist[v] = dist[node] + 1;
            dfs(v, dist, g);
        }
    }
}
import java.util.*;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] A = new int[4];
        for (int i = 0; i < 4; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        if (A[1] <= A[2] || A[3] <= A[0]) {
            System.out.println(0);
        } else {
            System.out.println(A[3] - A[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        for (int i = 1; i < N; i++) {
            if (n[pos] > n[i]) {
                a++;
                pos = i;
            }
        }
        System.out.println(a);
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a.add(x[i]);
            } else {
                b.add(x[i]);
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] cntb = new int[100002 + 1];
        for (int i : a) {
            cnta[i]++;
        }
        int[] cntb = new int[100002 + 1];
        for (int i : b) {
            cntb[i]++;
        }
        // Rest of the code is similar to the Python code.
        // ...
    }
}
import java.util.Scanner;
import java.util.ArrayList;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        ArrayList<String[]> q = new ArrayList<>();
        int count = 0;
        for (int i = 0; i < n; i++) {
            String[] a = scanner.nextLine().split(" ");
            q.add(a);
        }
        for (String[] j : q) {
            for (String[] k : q) {
                if (k == j) {
                    continue;
                } else if (j[0].equals(k[k.length - 1])) {
                    count++;
                } else {
                    continue;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        System.out.println(Math.max(x + y - 3 + ((y - x) % 3 > 0 ? 1 : 0), 0));
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = scanner.nextInt();
        }
        Set<Integer> different = new HashSet<>();
        int temp = 0;
        Arrays.sort(arr);
        for (int x : arr) {
            if (x % k != 0 || !different.contains(x / k)) {
                different.add(x);
            }
            temp = Math.max(different.size(), temp);
        }
        System.out.println(temp);
    }
}
import java.util.Scanner;

public class codeforces_306_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int q = n / m;
        int r = n % m;
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = q;
        }
        for (int i = 0; i < r; i++) {
            a[i]++;
        }
        for (int i = 0; i < m; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            String s = scanner.next();
            int gIndex = s.indexOf("G");
            int sIndex = s.indexOf("S");
            if (gIndex < sIndex) {
                set.add(sIndex - gIndex);
            }
        }
        boolean hasNegative = false;
        for (int a : set) {
            if (a < 0) {
                hasNegative = true;
                break;
            }
        }
        System.out.println(hasNegative ? -1 : set.size());
    }
}
import java.util.*;

public class codeforces_327_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String s = scanner.nextLine().replace(" ", "");
        if (!s.contains("0")) {
            System.out.println(n - 1);
        } else {
            List<Integer> indices = find(s, '0');
            if (indices.size() == 1) {
                System.out.println(n);
            } else {
                int maximum = 0;
                for (int i = 0; i < indices.size() - 1; i++) {
                    for (int j = i + 1; j < indices.size(); j++) {
                        int temp = 2 + 2 * (Math.abs(indices.indexOf(indices.get(i)) - indices.indexOf(indices.get(j))) - 1) - (Math.abs(indices.get(i) - indices.get(j)) - 1);
                        if (temp > maximum) {
                            maximum = temp;
                        }
                    }
                }
                System.out.println(s.chars().filter(ch -> ch == '1').count() + maximum);
            }
        }
    }

    public static List<Integer> find(String s, char ch) {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ch) {
                indices.add(i);
            }
        }
        return indices;
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                System.out.println((arr[i + 1] - arr[i]) + " " + (arr[n - 1] - arr[i]));
                continue;
            }
            if (i == n - 1) {
                System.out.println((arr[n - 1] - arr[n - 2]) + " " + (arr[n - 1] - arr[0]));
                continue;
            }
            if (arr[i] - arr[i - 1] > arr[i + 1] - arr[i]) {
                System.out.print(arr[i + 1] - arr[i] + " ");
            } else {
                System.out.print(arr[i] - arr[i - 1] + " ");
            }
            if (arr[n - 1] - arr[i] > arr[i] - arr[0]) {
                System.out.println(arr[n - 1] - arr[i]);
            } else {
                System.out.println(arr[i] - arr[0]);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        Map<String, Integer> s = new HashMap<>();
        List<String> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String v = scanner.nextLine();
            l.add(v);
            s.put(v, s.getOrDefault(v, 0) + 1);
        }
        String f = "Yes";
        int i = -1;
        for (String v : l) {
            if (s.get(v) >= 2) {
                f = "No";
            }
            if (i != -1 && l.get(i).charAt(l.get(i).length() - 1) != v.charAt(0)) {
                f = "No";
            }
            i++;
        }
        System.out.println(f);
    }
}
import java.util.Scanner;

public class codeforces_579_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = 1;
        while (Math.log(n) / Math.log(2) % 1 != 0) {
            x += 1;
            n -= Math.pow(2, (int) Math.floor(Math.log(n) / Math.log(2)));
        }
        System.out.println(x);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] arr = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int length = arr[0];
        Arrays.sort(arr, 1, 4);
        if (length % arr[0] == 0) {
            System.out.println(length / arr[0]);
            return;
        }
        int ans = 0;
        if (arr[0] == arr[1]) {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                int check = length - i * arr[2];
                if (check >= 0 && check % arr[0] == 0) {
                    k = check / arr[0];
                    ans = Math.max(ans, k + i);
                }
            }
        } else {
            int k = 0;
            for (int i = 0; i <= length / arr[2]; i++) {
                for (int j = 0; j <= length / arr[1]; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(String.valueOf(S.charAt(0)).repeat(N));
            return;
        }
        S = getLastDict(S, N);
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (char c : S.toCharArray()) {
                if (c == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * Math.pow(2, K - 1) >= N) {
                System.out.println(String.valueOf(S.charAt(0)).repeat(N));
            } else {
                S = String.valueOf(S.charAt(0)).repeat((int) (count * (Math.pow(2, K - 1) - 1))) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }

    private static String getLastDict(String s, int N) {
        String U = s + new StringBuilder(s).reverse().toString();
        char c = s.charAt(0);
        int p = U.indexOf(c);
        int minIndex = p;
        p++;
        while (p <= N) {
            if (U.charAt(p) == c) {
                if (checkNormalDict(U, minIndex, p)) {
                    minIndex = p;
                }
            }
            p++;
        }
        return U.substring(minIndex, minIndex + N);
    }

    private static boolean checkNormalDict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < u.length(); i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.*;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }
        if (allSame(elems)) {
            System.out.println(0);
            return;
        }
        if (k == 1) {
            System.out.println(-1);
            return;
        }
        if (!allSame(Arrays.copyOfRange(elems, k - 1, elems.length))) {
            System.out.println(-1);
            return;
        }
        int target = elems[elems.length - 1];
        int[] toDelete = Arrays.copyOfRange(elems, 0, k - 1);
        while (toDelete.length > 0 && toDelete[toDelete.length - 1] == target) {
            toDelete = Arrays.copyOf(toDelete, toDelete.length - 1);
        }
        System.out.println(toDelete.length);
    }

    private static boolean allSame(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != arr[0]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int N, M, Q;
    static int[] a, b, c, d;
    static int res;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        Q = sc.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve();
    }

    static void solve() {
        res = 0;
        rec(new ArrayList<>());
        System.out.println(res);
    }

    static void rec(List<Integer> A) {
        if (A.size() == N) {
            int ans = 0;
            for (int i = 0; i < Q; i++) {
                if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
            return;
        }
        int lastMax = A.isEmpty() ? 1 : A.get(A.size() - 1);
        for (int i = lastMax; i <= M; i++) {
            List<Integer> newA = new ArrayList<>(A);
            newA.add(i);
            rec(newA);
        }
    }
}
import java.util.*;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x; i++) {
                for (int j = y - 2; j <= y; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = scanner.nextInt();
        }
        editorial(N, P);
    }

    public static void editorial(int N, int[] P) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] a = new int[N + 1];
        for (int i = 0; i < N; i++) {
            a[P[i]] = i;
        }
        int tmp = 1;
        int max_len = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp++;
                max_len = Math.max(max_len, tmp);
            } else {
                tmp = 1;
            }
        }
        int ans = N - max_len;
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        char[][] t = new char[4][4];
        for (int i = 0; i < 4; i++) {
            String line = scanner.nextLine();
            for (int j = 0; j < 4; j++) {
                t[i][j] = line.charAt(j);
            }
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int high = 1;
        int tower = n;
        int maximum = 1;
        for (int i = 1; i < n; i++) {
            if (l[i] == l[i - 1]) {
                tower--;
                high++;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}
import java.util.*;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();

        if (X == 1 || X == N * 2 - 1) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
            List<Integer> xs;
            if (X == N * 2 - 2) {
                xs = new ArrayList<>();
                for (int i = N - 1; i <= X + 2; i++) {
                    xs.add(i);
                }
                for (int i = 1; i < N - 1; i++) {
                    xs.add(i);
                }
            } else {
                List<Integer> ys = new ArrayList<>();
                for (int i = 1; i < X - 1; i++) {
                    ys.add(i);
                }
                for (int i = X + 3; i <= N * 2; i++) {
                    ys.add(i);
                }
                xs = new ArrayList<>(ys.subList(0, N - 3));
                xs.add(X + 2);
                xs.add(X - 1);
                xs.add(X);
                xs.add(X + 1);
                xs.addAll(ys.subList(N - 3, ys.size()));
            }
            for (int x : xs) {
                System.out.println(x);
            }
        }
    }
}
import java.util.*;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] values = new int[n];
        char[] types = new char[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
        }
        String typeString = scanner.next();
        for (int i = 0; i < n; i++) {
            types[i] = typeString.charAt(i);
        }
        System.out.println(bobsMaxStrength(values, types));
    }

    public static int bobsMaxStrength(int[] values, char[] types) {
        int pScore = 0, sScore = 0, pMaxScore = 0, sMaxScore = 0;
        for (int i = 0; i < values.length; i++) {
            if (types[i] == 'A') {
                pScore += values[i];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= values[i];
            }
        }
        for (int i = values.length - 1; i >= 0; i--) {
            if (types[i] == 'A') {
                sScore += values[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= values[i];
            }
        }
        return Math.max(pMaxScore, sMaxScore);
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        String LUCKY = "abcd";
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < n; i++) {
            s.append(LUCKY.charAt(i % 4));
        }
        System.out.println(s.toString());
    }
}
import java.util.*;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
            sum += w[i];
        }
        List<Integer> d = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if ((sum - w[i]) / (n - 1) == w[i]) {
                d.add(i + 1);
            }
        }
        System.out.println(d.size());
        for (int i = 0; i < d.size(); i++) {
            System.out.print(d.get(i));
            if (i < d.size() - 1) {
                System.out.print(" ");
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += "A";
                i += 1;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        t += "D";
                        i += 2;
                    } else {
                        t += "X";
                        i += 1;
                    }
                } else {
                    t += "X";
                    i += 1;
                }
            } else {
                t += "X";
                i += 1;
            }
        }
        long total = 0;
        long numA = 0;
        for (i = 0; i < t.length(); i++) {
            if (t.charAt(i) == 'X') {
                numA = 0;
            } else {
                if (t.charAt(i) == 'A') numA += 1;
                else total += numA;
            }
        }
        System.out.println(total);
    }
}
import java.util.*;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();
        System.out.println(run(s, t));
    }

    public static String run(String s, String t) {
        Map<Character, Integer> sCount = new HashMap<>();
        Map<Character, Integer> tCount = new HashMap<>();

        for (char c : s.toCharArray()) {
            sCount.put(c, sCount.getOrDefault(c, 0) + 1);
        }

        for (char c : t.toCharArray()) {
            tCount.put(c, tCount.getOrDefault(c, 0) + 1);
        }

        List<Integer> ss = new ArrayList<>(sCount.values());
        List<Integer> tt = new ArrayList<>(tCount.values());

        Collections.sort(ss);
        Collections.sort(tt);

        if (ss.equals(tt)) {
            return "Yes";
        } else {
            return "No";
        }
    }
}
import java.util.*;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<int[]> menu = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            String m = scanner.next();
            int e = Integer.parseInt(m.substring(m.length() - 1));
            if (e == 0) {
                e = 10;
            }
            menu.add(new int[]{Integer.parseInt(m), e});
        }
        Collections.sort(menu, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return Integer.compare(o1[1], o2[1]);
            }
        });
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            ans += (int) Math.ceil((double) menu.get(i)[0] / 10) * 10;
        }
        ans += menu.get(0)[0];
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String n = scanner.nextLine();
        String[] a = {"10", "100", "1000", "10000", "100000"};
        int new_ = 0;
        for (int i = 0; i < n.length(); i++) {
            new_ += Integer.parseInt(String.valueOf(n.charAt(i)));
        }
        boolean found = false;
        for (String s : a) {
            if (s.equals(n)) {
                found = true;
                break;
            }
        }
        if (found) {
            System.out.println(10);
        } else {
            System.out.println(new_);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] p = scanner.nextLine().split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);
        int DIF1 = x2 - x1;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }
}
import java.util.*;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = scanner.nextInt();
        }
        int total = 0;
        for (int i = 0; i < N; i++) {
            total ^= a[i];
        }
        for (int i = 0; i < N; i++) {
            System.out.print(a[i] ^ total);
            if (i != N - 1) {
                System.out.print(" ");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        String[] l = new String[n];
        for (int i = 0; i < n; i++) {
            String s = scanner.next();
            char[] chars = s.toCharArray();
            for (int j = 0; j < m; j++) {
                if (chars[j] == '.') {
                    if ((i + j) % 2 == 1) chars[j] = 'W';
                    else chars[j] = 'B';
                }
            }
            l[i] = new String(chars);
        }
        for (String c : l) System.out.println(c);
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                if (right < 0) right = -right - 1;
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                if (left < 0) left = -left - 1;
                long tmp = Math.max(0, right - left);
                if (left <= i && i < right) tmp--;
                if (left <= j && j < right) tmp--;
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.Scanner;

public class codeforces_30_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int n = scanner.nextInt();
        System.out.println(task4(A, B, n));
    }

    public static int task4(int A, int B, int n) {
        for (int X = -1000; X <= 1000; X++) {
            if (A * Math.pow(X, n) == B) {
                return X;
            }
        }
        return -1001; // return a value that is not a valid solution
    }
}
import java.util.*;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Pair> A = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            A.add(new Pair(i + 1, scanner.nextInt()));
        }
        Collections.sort(A);
        for (int i = 0; i < N - 1; i++) {
            System.out.print(A.get(i).index + " ");
        }
        System.out.println(A.get(N - 1).index);
    }

    static class Pair implements Comparable<Pair> {
        int index;
        int value;

        Pair(int index, int value) {
            this.index = index;
            this.value = value;
        }

        @Override
        public int compareTo(Pair o) {
            return Integer.compare(this.value, o.value);
        }
    }
}
import java.util.*;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC107_D {
    static class BIT {
        int size;
        int[] tree;
        int depth;

        public BIT(int N) {
            this.size = N;
            this.tree = new int[N + 1];
            this.depth = Integer.toBinaryString(N).length();
        }

        private int _bitsum(int i) {
            int ret = 0;
            while (i > 0) {
                ret += this.tree[i];
                i ^= i & -i;
            }
            return ret;
        }

        public int bitsum(int l, int r) {
            return this._bitsum(r) - this._bitsum(l);
        }

        public void bitadd(int i, int x) {
            i += 1;
            while (i <= this.size) {
                this.tree[i] += x;
                i += i & -i;
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[i + 1] = b[i] + a[i];
        }
        int l = 0, r = n;
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (check(b, mid, m)) {
                r = mid;
            } else {
                l = mid;
            }
        }
        System.out.println(a[l]);
    }

    private static boolean check(int[] b, int mid, int m) {
        BIT bit = new BIT(b.length);
        int ans = 0;
        for (int x : b) {
            ans += bit.bitsum(x + 1, b.length);
            bit.bitadd(x, 1);
        }
        return ans >= m;
    }
}
import java.util.*;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<int[]> inputArray = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int S = scanner.nextInt();
            int R = scanner.nextInt();
            int H = scanner.nextInt();
            int C = scanner.nextInt();
            inputArray.add(new int[]{S, R, H, C});
        }
        Set<int[]> outdated = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray.get(i)[0] < inputArray.get(j)[0] && inputArray.get(i)[1] < inputArray.get(j)[1] && inputArray.get(i)[2] < inputArray.get(j)[2]) {
                    outdated.add(inputArray.get(i));
                }
            }
        }
        int minimumCost = Integer.MAX_VALUE;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            int[] currentItem = inputArray.get(i);
            int cost = currentItem[3];
            if (!outdated.contains(currentItem) && cost < minimumCost) {
                minimumCost = cost;
                inputNumber = i + 1;
            }
        }
        System.out.println(inputNumber);
    }
}
import java.util.*;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && b >= 0) {
            System.out.println("Zero");
        } else {
            if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        String S = sc.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int cur_happy = N - 1 - seg_cnt;
        int ans;
        if (2 * K >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * K;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }
        List<List<Integer>> l = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    temp.add(j);
                }
            }
            l.add(temp);
        }
        for (int i = 1; i < m; i++) {
            for (int j = l.size() - 1; j >= 0; j--) {
                int ca = 0;
                for (int ii : l.get(j)) {
                    ca += c[ii][i];
                }
                if (ca >= x) {
                    rem.add(j);
                }
            }
            for (int j : rem) {
                l.remove(j);
            }
            rem.clear();
            if (l.isEmpty()) {
                System.out.println(-1);
                return;
            }
        }
        for (List<Integer> i : l) {
            int ca = 0;
            for (int j : i) {
                ca += c[j][0];
            }
            if (ans == 0) {
                ans = ca;
            } else {
                ans = Math.min(ans, ca);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int ans = A - 2 * B;
        if (ans < 0) {
            ans = 0;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            if (hole >= b) {
                check = false;
            } else {
                hole = a * (i + 1) - i;
                i++;
            }
        }
        System.out.println(i);
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < 2; i++) {
            c += Math.max(a, b);
            if (a >= b) {
                a--;
            } else {
                b--;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] list = new int[n];
        for (int i = 0; i < n; i++) {
            list[i] = scanner.nextInt() % 2;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += list[i];
        }
        if (sum == 1) {
            for (int i = 0; i < n; i++) {
                if (list[i] == 1) {
                    System.out.println(i + 1);
                    break;
                }
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (list[i] == 0) {
                    System.out.println(i + 1);
                    break;
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstLine = scanner.nextInt();
        int total = 0;
        StringBuilder memory = new StringBuilder();
        for (int i = 0; i < firstLine; i++) {
            int A = scanner.nextInt();
            int G = scanner.nextInt();
            if (total + A <= 500) {
                total += A;
                memory.append("A");
            } else {
                total -= G;
                memory.append("G");
            }
        }
        System.out.println(memory.toString());
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = (int) (Float.parseFloat(input[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }
}
import java.util.*;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] t = new int[n + 1];
        int[] a = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            t[i] = scanner.nextInt();
        }
        for (int i = 1; i <= n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] cnt = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cnt[a[i]]++;
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (t[i] == 1) {
                List<Integer> crt = new ArrayList<>();
                crt.add(i);
                int x = a[i];
                while (cnt[x] == 1) {
                    crt.add(x);
                    x = a[x];
                }
                if (crt.size() > ans.size()) {
                    ans = new ArrayList<>(crt);
                }
            }
        }
        Collections.reverse(ans);
        System.out.println(ans.size());
        for (int i : ans) {
            System.out.print(i + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC142_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double t = 0;
        for (int i = 0; i < n; i++) {
            if ((i + 1) % 2 != 0) {
                t += 1;
            }
        }
        System.out.println(t / n);
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] b = new int[n * 2];
        for (int i = 0; i < b.length; i++) {
            b[i] = 1;
        }
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;
        for (int i = 0; i < m; i++) {
            int r = scanner.nextInt();
            int c = scanner.nextInt();
            b[r - 1] = b[n + c - 1] = 0;
        }
        if (n % 2 == 1 && b[n / 2] == 1 && b[n + n / 2] == 1) {
            b[n / 2] = 0;
        }
        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i + 1;
        }
        int[] h = new int[n];
        for (int i = 0; i < n; i++) {
            h[i] = scanner.nextInt();
        }
        Map<Integer, Integer> hp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            hp.put(p[i], h[i]);
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < n; i++) {
            path.put(i + 1, new ArrayList<>());
        }
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        for (Map.Entry<Integer, List<Integer>> entry : path.entrySet()) {
            int i = entry.getKey();
            List<Integer> v = entry.getValue();
            boolean f = false;
            for (int j : v) {
                if (hp.get(i) <= hp.get(j)) {
                    f = true;
                    break;
                }
            }
            if (!f) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        while (x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2) {
            if (a == 1) {
                if (y >= 22) {
                    y -= 22;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    x -= 2;
                    y -= 2;
                }
            } else {
                if (x >= 2 && y >= 2) {
                    x -= 2;
                    y -= 2;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    y -= 22;
                }
            }
            a = 1 - a;
        }
        System.out.println(a == 1 ? "Ciel" : "Hanako");
    }
}
import java.util.*;

public class atcoder_AGC004_D {
    static int[][] dp;
    static ArrayList<Integer>[] adj;
    static int k;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        k = sc.nextInt();
        adj = new ArrayList[n];
        dp = new int[n][2];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
            Arrays.fill(dp[i], -1);
        }
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt() - 1;
            if (a != -1) adj[a].add(i);
        }
        int ans = dfs(0, -1);
        if (adj[0].get(0) != 0) ans++;
        System.out.println(ans);
    }

    static int dfs(int u, int p) {
        if (dp[u][p == -1 ? 0 : 1] != -1) return dp[u][p == -1 ? 0 : 1];
        int heightFromLeaf = 0, cutCount = 0;
        for (int v : adj[u]) {
            if (v == p) continue;
            int hgt = dfs(v, u);
            heightFromLeaf = Math.max(heightFromLeaf, hgt);
            cutCount += dp[v][0];
        }
        heightFromLeaf++;
        if (p != -1 && heightFromLeaf == k) {
            heightFromLeaf = 0;
            cutCount++;
        }
        dp[u][p == -1 ? 0 : 1] = cutCount;
        return cutCount;
    }
}
import java.util.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int t = 0;
        for (int i = 1; i <= k; i++) {
            t = (t % k) * 10 + 7;
            if (t % k == 0) {
                System.out.println(i);
                return;
            }
        }
        System.out.println(-1);
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = scanner.nextInt();
        }
        int m = 0;
        for (int j = 0; j < n; j++) {
            for (int p = 0; p < n; p++) {
                if (M[p] == 0) {
                    System.out.print((p + 1) + " ");
                    break;
                }
            }
            for (int l = m; l < p - k; l++) {
                M[l]--;
            }
            M[p]--;
        }
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC168_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int h = scanner.nextInt();
        int m = scanner.nextInt();

        double C = Math.abs(360.0 / 60 * m - 360.0 / 12 * h - 360.0 / 12 / 60 * m);
        if (C > 180) {
            C = 360 - C;
        }
        double cosC = Math.cos(Math.toRadians(C));
        double result = Math.sqrt(a * a + b * b - 2 * a * b * cosC);
        System.out.println(result);
    }
}
import java.util.*;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int QR = scanner.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = scanner.nextInt();
        }
        int[] sum_el = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (n - 1) + sum_el[n] * R;
        for (int i = 1; i <= n; i++) {
            int energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
            if (i > (n - i)) {
                energy = energy + (i - (n - i) - 1) * QL;
            } else if ((n - i) > i) {
                energy = energy + ((n - i) - i - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine();
        char[] vo = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'};
        for (int i = a.length() - 1; i >= 0; i--) {
            if (a.charAt(i) == ' ' || a.charAt(i) == '?') {
                continue;
            } else {
                boolean found = false;
                for (char c : vo) {
                    if (a.charAt(i) == c) {
                        found = true;
                        break;
                    }
                }
                if (found) {
                    System.out.println("YES");
                } else {
                    System.out.println("NO");
                }
                break;
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        scanner.nextLine(); // Consume newline left-over
        String S = scanner.nextLine();
        System.out.println(solve(K, S));
    }

    public static String solve(int K, String S) {
        if (S.length() <= K) {
            return S;
        }
        return S.substring(0, K) + "...";
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int X = scanner.nextInt();
        boolean[] prime = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            prime[i] = true;
        }
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            prime[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            if (prime[i]) {
                for (int j = i + i; j < 100008; j += i) {
                    prime[j] = false;
                }
            }
            i += 2;
        }
        for (int j = X; j < 100008; j++) {
            if (prime[j]) {
                System.out.println(j);
                break;
            }
        }
    }
}
import java.util.*;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int sa = 0;
        for (int i = 0; i < n; i++) {
            if (scanner.nextInt() < 0) {
                sa++;
            }
        }
        sa = Math.min(n - sa, sa);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            b -= a;
            if (b % 2 == 1 && b <= sa * 2) {
                sb.append("1\n");
            } else {
                sb.append("0\n");
            }
        }
        System.out.print(sb.toString());
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = n; i > 0; i--) {
            if (n % i == 0) {
                n = i;
                System.out.print(i + " ");
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        char[] list_S = S.toCharArray();
        char[] list_T = T.toCharArray();
        int[] Number_i = new int[N];
        for (int i = 0; i < N; i++) {
            Number_i[i] = i;
        }
        double[] Number_iMN = new double[N];
        for (int i = 0; i < N; i++) {
            Number_iMN[i] = (double) i * M / N;
        }
        int[] Number_j = new int[M];
        for (int j = 0; j < M; j++) {
            Number_j[j] = j;
        }
        ArrayList<Integer> Kaburi_j = new ArrayList<>();
        for (double i : Number_iMN) {
            if (Arrays.asList(Number_j).contains(i)) {
                Kaburi_j.add((int) i);
            }
        }
        ArrayList<Integer> Kaburi_i = new ArrayList<>();
        for (int j : Kaburi_j) {
            Kaburi_i.add((int) (j * N / M));
        }
        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = Kaburi_i.size();
        while (counter <= Kaburi_Size - 1) {
            if (list_S[Kaburi_i.get(counter)] == list_T[Kaburi_j.get(counter)]) {
                counter++;
                continue;
            } else {
                Flag = 1;
                break;
            }
        }
        if (Flag == 1) {
            System.out.println(-1);
        } else {
            System.out.println((int) (N * M / gcd(N, M)));
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int mn = N + 1, mx = -1;
        for (int i = 0; i < N; i++) {
            if (i + 1 != A[i]) {
                mn = Math.min(mn, i);
                mx = Math.max(mx, i);
            }
        }
        if (mx == -1) {
            System.out.println("0 0");
        } else {
            int[] B = new int[N];
            for (int i = 0; i < mn; i++) {
                B[i] = A[i];
            }
            for (int i = mn; i <= mx; i++) {
                B[i] = A[mx - i + mn];
            }
            for (int i = mx + 1; i < N; i++) {
                B[i] = A[i];
            }
            int[] C = Arrays.copyOf(B, B.length);
            Arrays.sort(C);
            if (Arrays.equals(B, C)) {
                System.out.println((mn + 1) + " " + (mx + 1));
            } else {
                System.out.println("0 0");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.next();
        String[] parts = input.split("\\.");
        char[] integerPart = parts[0].toCharArray();
        int decimalPart = Integer.parseInt(String.valueOf(parts[1].charAt(0)));

        if (integerPart[integerPart.length - 1] == '9') {
            System.out.println("GOTO Vasilisa.");
        } else if (integerPart[integerPart.length - 1] != '9' && decimalPart < 5) {
            System.out.println(new String(integerPart));
        } else {
            integerPart[integerPart.length - 1]++;
            System.out.println(new String(integerPart));
        }
    }
}
import java.util.*;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String v = scanner.next();
        String[] d = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        List<String> a = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            a.add(d[f ? 0 : 1]);
        }
        StringBuilder sb = new StringBuilder(v);
        for (int i = 0; i < sb.length(); i++) {
            a.add("PRINT " + sb.charAt(i));
            if (i < m) {
                a.add(d[f ? 1 : 0]);
            }
        }
        for (int i = 0; i < a.size() - 1; i++) {
            System.out.println(a.get(i));
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s += 1;
            curr /= 10;
        }
        int first = (int) Math.pow(10, s);
        int second = first / 2;
        int ans = -1;
        for (int i : new int[]{l, r, first, second}) {
            if (i >= l && i <= r) {
                curr = i;
                String rev = "";
                for (char k : String.valueOf(curr).toCharArray()) {
                    rev += String.valueOf(9 - Integer.parseInt(String.valueOf(k)));
                }
                ans = Math.max(ans, Integer.parseInt(rev) * curr);
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = scanner.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = scanner.nextInt();
        }
        Set<Integer> q = new HashSet<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                q.add(li[i][j]);
            }
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        r.removeAll(q);
        int ans = 0;
        for (int i = 0; i <= q.size(); i++) {
            for (Set<Integer> s : combinations(new ArrayList<>(q), i)) {
                boolean flag = true;
                for (int j = 0; j < m; j++) {
                    Set<Integer> u = new HashSet<>();
                    for (int k = 0; k < n; k++) {
                        u.add(li[j][k]);
                    }
                    if (countIntersection(s, u) % 2 != p[j]) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    ans += Math.pow(2, r.size());
                }
            }
        }
        System.out.println(ans);
    }

    public static <T> Set<Set<T>> combinations(List<T> list, int k) {
        Set<Set<T>> result = new HashSet<>();
        if (k == 0) {
            result.add(new HashSet<>());
            return result;
        }
        for (int i = 0; i < list.size(); i++) {
            T element = list.get(i);
            List<T> rest = new ArrayList<>(list.subList(i + 1, list.size()));
            for (Set<T> subset : combinations(rest, k - 1)) {
                subset.add(element);
                result.add(subset);
            }
        }
        return result;
    }

    public static <T> int countIntersection(Set<T> set1, Set<T> set2) {
        int count = 0;
        for (T element : set1) {
            if (set2.contains(element)) {
                count++;
            }
        }
        return count;
    }
}
import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        long x = scanner.nextLong();
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextLong();
        }
        long[][] b = new long[n][n];
        for (int i = 0; i < n; i++) {
            long m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k < 0) {
                    k += n;
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        long m = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[i][j];
            }
            m = Math.min(m, sum + x * i);
        }
        System.out.println(m);
    }
}
import java.util.*;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] c = new Integer[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        Arrays.sort(c, Collections.reverseOrder());
        long mod = (long) Math.pow(10, 9) + 7;
        long b = pow(2, 2 * n - 2, mod);
        long a = 2 * b % mod;
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans %= mod;
        }
        System.out.println(ans);
    }

    public static long pow(long a, long b, long mod) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                res = res * a % mod;
            }
            a = a * a % mod;
            b >>= 1;
        }
        return res;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Comparator;

public class codeforces_456_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] m = new int[n][2];
        for (int i = 0; i < n; i++) {
            m[i][0] = scanner.nextInt();
            m[i][1] = scanner.nextInt();
        }
        Arrays.sort(m, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return Integer.compare(o2[0], o1[0]);
            }
        });
        int[] a = m[0];
        for (int i = 1; i < n; i++) {
            if (m[i][1] > a[1]) {
                System.out.println("Happy Alex");
                return;
            }
            a = m[i];
        }
        System.out.println("Poor Alex");
    }
}
import java.util.Scanner;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt();
            System.out.println(solve(n));
        }
    }

    public static int solve(int n) {
        int s = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            s -= 2 * t;
            t *= 2;
        }
        return s;
    }
}
import java.util.*;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextLong();
        }
        long[] S = new long[N];
        S[0] = A[0];
        for (int i = 1; i < N; i++) {
            S[i] = S[i - 1] + A[i];
        }
        long ans = Long.MAX_VALUE;
        for (int k = 0; k < N; k++) {
            long E = (k + 1) * X;
            for (int j = N - 2 * k - 1; j >= 0; j -= k + 1) {
                E += 2 * S[j];
            }
            ans = Math.min(ans, E);
        }
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String line1 = scanner.nextLine();
        String line2 = scanner.nextLine();
        Map<Character, Integer> boughtCount = new HashMap<>();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line1.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        for (char c : line2.toCharArray()) {
            madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        for (char color : madeCount.keySet()) {
            if (!boughtCount.containsKey(color)) {
                System.out.println(-1);
                return;
            }
            res += Math.min(boughtCount.get(color), madeCount.get(color));
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        char[] s = scanner.next().toCharArray();
        char[] t = scanner.next().toCharArray();

        if (new String(s).equals(new String(t))) {
            System.out.println(n);
        } else {
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n - i; j++) {
                    if (s[i + j] != t[j]) {
                        break;
                    }
                    if (j == n - i - 1) {
                        cnt = n - i;
                    }
                }
            }
            System.out.println(2 * n - cnt);
        }
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = Arrays.stream(scanner.next().split("")).mapToInt(Integer::parseInt).toArray();
        boolean noOne = false;
        if (!Arrays.toString(nums).contains("1")) {
            for (int i = 0; i < nums.length; i++) {
                nums[i] = nums[i] / 2;
            }
            noOne = true;
        }
        boolean isOdd = false;
        for (int i = 0; i < nums.length; i++) {
            if (!parityOfNCR(n - 1, i) && (nums[i] & 1) == 1) {
                isOdd = !isOdd;
            }
        }
        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println(noOne ? 2 : 1);
        }
    }

    public static int twosInFactorial(int n) {
        return n - Integer.toBinaryString(n).replace("0", "").length();
    }

    public static boolean parityOfNCR(int n, int i) {
        return twosInFactorial(n) - twosInFactorial(n - i) - twosInFactorial(i) > 0;
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < y; i++) {
            for (int j = 0; j < y; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < y; k++) {
                    if (arr[k] != arr[j] && arr[k] != arr[i] && arr[k] == arr[i] + arr[j]) {
                        System.out.println((k + 1) + " " + (j + 1) + " " + (i + 1));
                        System.exit(0);
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    static int n, m;
    static int[] vis;
    static int ci, cb, cc;
    static ArrayList<Integer>[] g;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        vis = new int[n + 1];
        g = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u].add(v);
            g[v].add(u);
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else {
                    if (dfs(i, 1)) {
                        cb++;
                    } else {
                        cc++;
                    }
                }
            }
        }
        System.out.println((long) ci * ci + 2 * ci * (n - ci) + (long) cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    static boolean dfs(int x, int col) {
        Stack<int[]> stk = new Stack<>();
        stk.push(new int[]{x, col});
        boolean flag = true;
        while (!stk.isEmpty()) {
            int u = stk.peek()[0];
            int c = stk.peek()[1];
            stk.pop();
            if (vis[u] != 0) {
                flag &= (vis[u] == c);
                continue;
            }
            vis[u] = c;
            for (int i : g[u]) {
                stk.push(new int[]{i, 3 - c});
            }
        }
        return flag;
    }
}
import java.util.*;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], a[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], a[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Scanner;

public class atcoder_AGC007_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        double d = scanner.nextDouble();
        double x = scanner.nextDouble();
        System.out.println(main(N, d, x));
    }

    public static double main(int N, double d, double x) {
        double ret = 0;
        while (N > 0) {
            ret += d + (N - 0.5) * x;
            d = d + (d / N) + (5 * x) / (2 * N);
            x += 2 * x / N;
            N--;
        }
        return ret;
    }
}
import java.util.*;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        int a = arr[n-1];
        int b = arr[0];
        if(a == b){
            System.out.println((a-b) + " " + (n*(n-1))/2);
        }else{
            int ac = 0;
            int bc = 0;
            for(int i=0; i<n; i++){
                if(arr[i] == a) ac++;
                if(arr[i] == b) bc++;
            }
            System.out.println((a-b) + " " + (ac*bc));
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] V = new int[N];
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            V[i] = scanner.nextInt();
        }
        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }
        int ans = 0;
        int X = 0;
        int Y = 0;
        for (int i = 0; i < N; i++) {
            if (V[i] - C[i] > 0) {
                X = V[i];
                Y = C[i];
                ans += X - Y;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        StringBuilder my_str = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c == '0' || c == '1') {
                my_str.append(c);
            } else if (c == 'B' && my_str.length() != 0) {
                my_str.deleteCharAt(my_str.length() - 1);
            }
        }
        System.out.println(my_str.toString());
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int n = scanner.nextInt();
        int w = scanner.nextInt();

        if (1 <= k && w <= 1000) {
            int total = 0;
            for (int i = 1; i <= w; i++) {
                total += i * k;
            }
            if (total > n) {
                System.out.println(total - n);
            } else {
                System.out.println(0);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int[] l1 = new int[3];
            for (int j = 0; j < 3; j++) {
                l1[j] = scanner.nextInt();
            }
            if (sum(l1) > 1) {
                c++;
            }
        }
        System.out.println(c);
    }

    private static int sum(int[] arr) {
        int sum = 0;
        for (int num : arr) {
            sum += num;
        }
        return sum;
    }
}
import java.util.*;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String line = scanner.next();
            for (int j = 0; j < w; j++) {
                graph[i][j] = line.charAt(j) == '#' ? 0 : Integer.MAX_VALUE;
            }
        }
        for (int x = 0; x < w - 1; x++) {
            for (int y = 0; y < h; y++) {
                graph[y][x + 1] = Math.min(graph[y][x] + 1, graph[y][x + 1]);
            }
        }
        for (int x = w - 1; x > 0; x--) {
            for (int y = 0; y < h; y++) {
                graph[y][x - 1] = Math.min(graph[y][x] + 1, graph[y][x - 1]);
            }
        }
        for (int y = 0; y < h - 1; y++) {
            for (int x = 0; x < w; x++) {
                graph[y + 1][x] = Math.min(graph[y][x] + 1, graph[y + 1][x]);
            }
        }
        for (int y = h - 1; y > 0; y--) {
            for (int x = 0; x < w; x++) {
                graph[y - 1][x] = Math.min(graph[y][x] + 1, graph[y - 1][x]);
            }
        }
        int max = 0;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                max = Math.max(max, graph[i][j]);
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int r = scanner.nextInt();
        int D = scanner.nextInt();
        int x = scanner.nextInt();

        for (int i = 2; i < 12; i++) {
            System.out.println((int) ((Math.pow(r, i - 1)) * (x + D / (1 - r)) - D / (1 - r)));
        }
    }
}
import java.util.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        String[][] answer = new String[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (i < B) {
                    if (j < A) {
                        answer[i][j] = "0";
                    } else {
                        answer[i][j] = "1";
                    }
                } else {
                    if (j < A) {
                        answer[i][j] = "1";
                    } else {
                        answer[i][j] = "0";
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            System.out.println(String.join("", answer[i]));
        }
    }
}
import java.util.*;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.nextInt();
        }
        int current_cell = 1;
        while (current_cell <= t) {
            current_cell += s[current_cell - 1];
            if (current_cell == t) {
                System.out.println("YES");
                System.exit(0);
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        long ll = -(long)1e18 - 1;
        long rr = (long)1e18 + 1;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if ((long)A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if ((long)A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if ((long)A[i] * A[i] < x) {
                    tot--;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.*;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextLong();
        }
        long result = 0;
        for (int b = 0; b < 60; b++) {
            long bs = 0;
            for (int i = 0; i < N; i++) {
                bs += (A[i] >> b) & 1;
            }
            result = (result + bs * (N - bs) * (1L << b)) % 1000000007;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        System.out.println(360 / gcd(360, x));
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = scanner.nextInt();
        }
        int ans = Math.abs(r[0]);
        for (int i = 1; i < n; i++) {
            ans += Math.abs(r[i] - r[i - 1]);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.next();
        String b = scanner.next();
        int x = Math.max(a.length(), b.length());
        a = String.format("%" + x + "s", a).replace(' ', '0');
        b = String.format("%-" + x + "s", b).replace(' ', '0');
        StringBuilder s = new StringBuilder();
        int c = 0;
        for (int i = 0; i < x; i++) {
            int d = Integer.parseInt(String.valueOf(b.charAt(i))) + Integer.parseInt(String.valueOf(a.charAt(x - i - 1))) + c;
            if (d > 9) {
                s.append(String.valueOf(d).charAt(1));
                c = 1;
            } else {
                s.append(d);
                c = 0;
            }
        }
        if (c == 1) {
            s.append('1');
        }
        System.out.println(new StringBuilder(s.toString()).reverse().toString());
    }
}
import java.util.*;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        Map<Character, Integer> dt = new HashMap<>();
        for (char c : s.toCharArray()) {
            dt.put(c, dt.getOrDefault(c, 0) + 1);
        }
        int cnt = 0;
        boolean x = true;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt += 1;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }
        if (x) {
            System.out.println("First");
        } else if (!x && s.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && s.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.*;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String a = scanner.nextLine();
        System.out.println(solve(a));
    }

    public static int solve(String a) {
        if (!a.contains("1")) {
            return 0;
        }
        String[] split = a.split("1");
        int product = 1;
        for (String s : split) {
            product *= s.length() + 1;
        }
        return product;
    }
}
import java.util.*;

public class codeforces_55_B {
    static int ans = Integer.MAX_VALUE;
    static int[] nums = new int[4];
    static char[] operations = new char[3];

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < 4; i++) {
            nums[i] = scanner.nextInt();
        }
        for (int i = 0; i < 3; i++) {
            operations[i] = scanner.next().charAt(0);
        }
        rememberTheNumber(0);
        System.out.println(ans);
    }

    static void rememberTheNumber(int i) {
        if (i >= 3) {
            return;
        }
        for (int j = 0; j < 4; j++) {
            for (int k = j + 1; k < 4; k++) {
                if (nums[j] != -1 && nums[k] != -1) {
                    int s = nums[j];
                    nums[j] = -1;
                    int t = nums[k];
                    if (operations[i] == '+') {
                        nums[k] = s + t;
                    } else if (operations[i] == '*') {
                        nums[k] = s * t;
                    }
                    if (i == 2 && nums[k] < ans) {
                        ans = nums[k];
                    }
                    rememberTheNumber(i + 1);
                    nums[j] = s;
                    nums[k] = t;
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long a = scanner.nextLong();
        long b = scanner.nextLong();
        long c = scanner.nextLong();
        long d = scanner.nextLong();
        System.out.println(max(a * c, b * d, a * d, b * c));
    }

    public static long max(long... nums) {
        long max = Long.MIN_VALUE;
        for (long num : nums) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }
}
import java.util.Scanner;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        int l = 2019;
        long[] m = new long[l + 1];
        m[0] = 1;
        long a = 0;
        long r = 0;
        for (int i = 0; i < s.length(); i++) {
            a = (a + (s.charAt(s.length() - i - 1) - '0') * powMod(10, i, l)) % l;
            r += m[(int) a];
            m[(int) a]++;
        }
        System.out.println(r);
    }

    private static long powMod(long a, int b, int m) {
        long result = 1;
        while (b > 0) {
            if ((b & 1) == 1) {
                result = (result * a) % m;
            }
            a = (a * a) % m;
            b >>= 1;
        }
        return result;
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int id = 0;
        int l = sc.nextInt();
        int r = sc.nextInt();
        for (int i = 1; i < n; i++) {
            int li = sc.nextInt();
            int ri = sc.nextInt();
            if (li <= l && r <= ri) {
                id = i;
            } else if (li < l || r < ri) {
                id = n;
            }
            l = Math.min(l, li);
            r = Math.max(r, ri);
        }
        System.out.println(id == n ? -1 : id + 1);
    }
}
import java.util.*;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        Map<Character, Integer> c = new HashMap<>();
        for (char ch : S.toCharArray()) {
            c.put(ch, c.getOrDefault(ch, 0) + 1);
        }
        Set<Character> Sa = new HashSet<>();
        for (char ch : S.toCharArray()) {
            Sa.add(ch);
        }
        if (Sa.size() != 2) {
            System.out.println("No");
            return;
        }
        for (char ch : Sa) {
            if (c.get(ch) != 2) {
                System.out.println("No");
                return;
            }
        }
        System.out.println("Yes");
    }
}
import java.util.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        if (n == 1) {
            System.out.println(0);
            return;
        }
        Map<Long, Integer> fac = primeFactorize(n);
        int ans = 0;
        for (Map.Entry<Long, Integer> entry : fac.entrySet()) {
            int x = entry.getValue();
            for (int i = 1; i < 100000000; i++) {
                if (x >= i) {
                    x -= i;
                    ans += 1;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    private static Map<Long, Integer> primeFactorize(long n) {
        Map<Long, Integer> a = new HashMap<>();
        while (n % 2 == 0) {
            a.put(2L, a.getOrDefault(2L, 0) + 1);
            n /= 2;
        }
        long f = 3;
        while (f * f <= n) {
            if (n % f == 0) {
                a.put(f, a.getOrDefault(f, 0) + 1);
                n /= f;
            } else {
                f += 2;
            }
        }
        if (n != 1) {
            a.put(n, a.getOrDefault(n, 0) + 1);
        }
        return a;
    }
}
import java.util.*;

class Node {
    int val;
    Boolean color;
    List<Pair> a = new ArrayList<>();
}

class Pair {
    Node node;
    int dis;

    Pair(Node node, int dis) {
        this.node = node;
        this.dis = dis;
    }
}

public class atcoder_ABC126_D {
    static Set<Node> nodeSet = new HashSet<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Node[] nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < n - 1; i++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int w = scanner.nextInt();
            Node node1 = nodes[u - 1];
            Node node2 = nodes[v - 1];
            node1.val = u;
            node2.val = v;
            node1.a.add(new Pair(node2, w));
            node2.a.add(new Pair(node1, w));
        }
        Node root = nodes[0];
        root.color = true;
        traverse(root, 0);
        for (int i = 0; i < n; i++) {
            Node node = nodes[i];
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    static void traverse(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.dis;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            traverse(adjNode, distance + dis);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String l = scanner.next();
        int n = l.length();
        long mod = (long) Math.pow(10, 9) + 7;
        long[][] dp = new long[n + 1][2];
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            char c = l.charAt(i);
            if (c == '0') {
                dp[i + 1][0] += dp[i][0];
                dp[i + 1][1] += dp[i][1] * 3;
            } else {
                dp[i + 1][0] += dp[i][0] * 2;
                dp[i + 1][1] += dp[i][0];
                dp[i + 1][1] += dp[i][1] * 3;
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String d = "f";
        String ans = (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) ? "ly" : "nly";
        while (true) {
            if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                switch (d) {
                    case "m":
                        d = "w";
                        n++;
                        break;
                    case "t":
                        d = "th";
                        n++;
                        break;
                    case "w":
                        d = "f";
                        n++;
                        break;
                    case "th":
                        d = "sa";
                        n++;
                        break;
                    case "f":
                        d = "s";
                        n++;
                        break;
                    case "sa":
                        d = "m";
                        n++;
                        break;
                    case "s":
                        d = "t";
                        n++;
                        break;
                }
            } else {
                switch (d) {
                    case "m":
                        d = "t";
                        n++;
                        break;
                    case "t":
                        d = "w";
                        n++;
                        break;
                    "w":
                        d = "th";
                        n++;
                        break;
                    case "th":
                        d = "f";
                        n++;
                        break;
                    case "f":
                        d = "sa";
                        n++;
                        break;
                    case "sa":
                        d = "s";
                        n++;
                        break;
                    case "s":
                        d = "m";
                        n++;
                        break;
                }
            }
            if ((d.equals("f") && ans.equals("ly") && leapyear(n)) || (d.equals("f") && ans.equals("nly") && !leapyear(n))) {
                break;
            }
        }
        System.out.println(n);
    }

    public static boolean leapyear(int n) {
        return n % 400 == 0 || (n % 4 == 0 && n % 100 != 0);
    }
}
import java.util.*;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String s = scanner.next();
        int[] count = new int[26];
        for (char c : s.toCharArray()) {
            count[c - 'A']++;
        }
        Arrays.sort(count);
        int res = 0;
        for (int i = 25; i >= 0; i--) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                return;
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_334_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int i = 1, j = n * n;
        while (i < j) {
            System.out.println(i + " " + j);
            i++;
            j--;
        }
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    static int[] A;
    static int N;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(bis(0, N));
    }

    static int[] cut(int[] array, int index) {
        if (index < 1) {
            return new int[0];
        }
        if (index <= array[0]) {
            return new int[]{index, array[1]};
        }
        for (int i = array.length - 1; i > 0; i--) {
            if (array[i - 1] < index) {
                return Arrays.copyOf(array, i) + new int[]{index, array[i]};
            }
        }
        return new int[0];
    }

    static boolean isPossible(int K) {
        int[] dp = {A[0], 0};
        for (int a : Arrays.copyOfRange(A, 1, A.length)) {
            if (a <= dp[0]) {
                dp = cut(dp, a);
            } else {
                dp = Arrays.copyOf(dp, dp.length + 2);
                dp[dp.length - 2] = a;
            }
            boolean isAdded = false;
            for (int j = dp.length - 2; j >= 0; j -= 2) {
                if (dp[j + 1] < K - 1) {
                    dp = cut(dp, dp[j] - 1);
                    dp = Arrays.copyOf(dp, dp.length + 2);
                    dp[dp.length - 2] = a;
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    static int bis(int x, int y) {
        if (y == x + 1) {
            return y;
        } else if (isPossible((x + y) / 2)) {
            return bis(x, (x + y) / 2);
        } else {
            return bis((x + y) / 2, y);
        }
    }
}
import java.util.*;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String soz = scanner.next();
        int[] a = new int[soz.length() + 1];
        for (int i = 1; i < soz.length(); i++) {
            a[i] = a[i - 1];
            if (soz.charAt(i - 1) == soz.charAt(i)) {
                a[i]++;
            }
        }
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            int m = scanner.nextInt();
            int l = scanner.nextInt();
            arr[i] = a[l - 1] - a[m - 1];
        }
        for (int i : arr) {
            System.out.println(i);
        }
    }
}
import java.util.*;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        boolean found = false;
        for (int i = 1; i < n; i++) {
            if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                found = true;
                break;
            }
        }
        System.out.println(found ? "YES" : "NO");
    }
}
import java.util.*;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int c = 2;
        for (int i : w) {
            if (i == 1) {
                System.out.println(c);
            } else if (i % 2 == 0) {
                c = 3 - c;
                System.out.println(c);
            } else {
                System.out.println(c);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        long sum_b = 0;
        long sum_p1 = 0;
        long sum_p2 = 0;
        PriorityQueue<Long> p1 = new PriorityQueue<>();
        PriorityQueue<Long> p2 = new PriorityQueue<>();
        for (int i = 0; i < q; i++) {
            int ql = scanner.nextInt();
            if (ql == 2) {
                if (p1.size() == p2.size()) {
                    System.out.println(-p2.peek() + " " + (sum_p1 - p1.size() * -p2.peek() + p2.size() * -p2.peek() - sum_p2 + sum_b));
                } else {
                    System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_b));
                }
            } else {
                long b = scanner.nextLong();
                sum_b += b;
                if (p1.isEmpty()) {
                    p1.add(b);
                    sum_p1 += b;
                } else if (p1.peek() <= b) {
                    p1.add(b);
                    sum_p1 += b;
                } else {
                    p2.add(-b);
                    sum_p2 += b;
                }
                if (p1.size() < p2.size()) {
                    long k = p2.poll();
                    p1.add(-k);
                    sum_p2 -= k;
                    sum_p1 += k;
                }
                if (p1.size() - 1 > p2.size()) {
                    long k = p1.poll();
                    p2.add(-k);
                    sum_p1 -= k;
                    sum_p2 += k;
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            sho += 1;
        }
        System.out.println(sho);
    }
}
import java.util.Scanner;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String result = s.contains("A") && s.contains("B") ? "Yes" : "No";
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC005_B {
    static int[] par;
    static int[] rank;
    static int[] size;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        par = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }

        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }

        long c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                unite(k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += (long) l * r * a[k];
        }
        System.out.println(c);
    }

    static int root(int x) {
        return par[x] == x ? x : root(par[x]);
    }

    static boolean same(int x, int y) {
        return root(x) == root(y);
    }

    static void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String input = scanner.nextLine();
        String[] sentences = Pattern.compile("[.?!]").split(input);
        int ans = 1, sumL = 0;
        for (String s : sentences) {
            s = s.trim() + '.';
            int L = s.length();
            if (L > 1) {
                if (L > n) {
                    System.out.println("Impossible");
                    System.exit(0);
                }
                if (sumL + L + (sumL > 0) > n) {
                    ans++;
                    sumL = L;
                } else {
                    sumL = sumL + L + (sumL > 0);
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        double time = a;
        while (time <= t + 0.5) {
            cookie += b;
            time += a;
        }
        System.out.println(cookie);
    }
}
import java.util.*;

public class atcoder_ABC145_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }
        solve(N, x, y);
    }

    public static void solve(int N, int[] x, int[] y) {
        List<List<Integer>> permutations = new ArrayList<>();
        generatePermutations(N, new ArrayList<>(), permutations);
        List<Double> distances = new ArrayList<>();
        for (List<Integer> permutation : permutations) {
            double totalDistance = 0;
            for (int i = 0; i < N - 1; i++) {
                int f = permutation.get(i);
                int t = permutation.get(i + 1);
                double distance = Math.sqrt(Math.pow(x[t] - x[f], 2) + Math.pow(y[t] - y[f], 2));
                totalDistance += distance;
            }
            distances.add(totalDistance);
        }
        double result = distances.stream().mapToDouble(Double::doubleValue).average().orElse(0);
        System.out.println(result);
    }

    public static void generatePermutations(int N, List<Integer> current, List<List<Integer>> permutations) {
        if (current.size() == N) {
            permutations.add(new ArrayList<>(current));
        } else {
            for (int i = 0; i < N; i++) {
                if (current.contains(i)) {
                    continue;
                }
                current.add(i);
                generatePermutations(N, current, permutations);
                current.remove(current.size() - 1);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int S = scanner.nextInt();
        int W = scanner.nextInt();
        if (S <= W) {
            System.out.println("unsafe");
        } else {
            System.out.println("safe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String ip = scanner.nextLine();
        String st = "";
        if (ip.length() != 1) {
            if (ip.charAt(0) == '9') {
                st = "9";
                ip = ip.substring(1);
            }
            for (int i = 0; i < ip.length(); i++) {
                int n = Integer.parseInt(String.valueOf(ip.charAt(i)));
                if (n > 4) {
                    n = 9 - n;
                    st += String.valueOf(n);
                } else {
                    st += String.valueOf(n);
                }
            }
        } else {
            st = ip;
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.*;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> FXs = new ArrayList<>();
        for (int value : sequence) {
            int y = f(value);
            if (!storage.containsKey(y)) {
                storage.put(y, new ArrayList<>(Arrays.asList(value)));
                FXs.add(y);
            } else {
                storage.get(y).add(value);
            }
        }
        int sum = 0;
        for (int y : FXs) {
            sum += storage.get(y).size() * storage.get(y).size();
        }
        for (int y : FXs) {
            sum -= storage.get(y).size();
        }
        return sum / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y += 1;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.*;

public class codeforces_96_B {
    static ArrayList<Long> l = new ArrayList<>();
    static long limit = 10000000000L;

    public static void gen(long number, int four, int seven) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        gen(number * 10 + 4, four + 1, seven);
        gen(number * 10 + 7, four, seven + 1);
    }

    public static void main(String[] args) {
        gen(0, 0, 0);
        Collections.sort(l);
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long ans = 0;
        for (long val : l) {
            if (val >= n) {
                ans = val;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] low = new int[n];
        int[] high = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = sc.nextInt();
            high[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(high);
        if (n % 2 == 1) {
            System.out.println(high[(n + 1) / 2 - 1] - low[(n + 1) / 2 - 1] + 1);
        } else {
            double hh = (high[n / 2 - 1] + high[n / 2]) / 2.0;
            double ll = (low[n / 2 - 1] + low[n / 2]) / 2.0;
            System.out.println((int) ((hh - ll) * 2) + 1);
        }
    }
}
import java.util.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        List<Set<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edges.add(new HashSet<>());
        }
        int[] degs = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            edges.get(a).add(b);
            edges.get(b).add(a);
            degs[a]++;
            degs[b]++;
        }
        if (M % 2 != 0) {
            System.out.println(-1);
            return;
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        for (int i = 0; i < N; i++) {
            Q.add(new int[]{degs[i], i});
        }
        while (!Q.isEmpty()) {
            int[] cur = Q.poll();
            int u = cur[1];
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int v : edges.get(u)) {
                edges.get(v).remove(u);
                if (parity[u] != 0) {
                    System.out.println((u + 1) + " " + (v + 1));
                    parity[u] = 1 - parity[u];
                } else {
                    System.out.println((v + 1) + " " + (u + 1));
                    parity[v] = 1 - parity[v];
                }
                degs[v]--;
                Q.add(new int[]{degs[v], v});
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_147_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        StringBuilder res = new StringBuilder();
        String[] punctuation = {",", ".", "!"};
        for (int i = 0; i < s.length(); i++) {
            if (i >= 1) {
                if (s.charAt(i) == ' ') {
                    if (res.charAt(res.length() - 1) != ' ') {
                        res.append(s.charAt(i));
                    } else {
                        continue;
                    }
                } else {
                    if (new String(punctuation).contains(Character.toString(s.charAt(i)))) {
                        if (res.charAt(res.length() - 1) == ' ') {
                            res.deleteCharAt(res.length() - 1);
                        }
                        res.append(s.charAt(i));
                        res.append(' ');
                    } else {
                        res.append(s.charAt(i));
                    }
                }
            } else {
                if (s.charAt(i) == ' ') {
                    continue;
                }
                if (new String(punctuation).contains(Character.toString(s.charAt(i)))) {
                    continue;
                } else {
                    res.append(s.charAt(i));
                }
            }
        }
        System.out.println(res.toString());
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC152_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        BigInteger MOD = BigInteger.valueOf(10).pow(9).add(BigInteger.ONE);
        BigInteger lcm = BigInteger.ONE;
        for (int a : A) {
            lcm = lcm.multiply(BigInteger.valueOf(a)).divide(lcm.gcd(BigInteger.valueOf(a)));
        }
        BigInteger sum = BigInteger.ZERO;
        for (int a : A) {
            sum = sum.add(BigInteger.valueOf(a).modPow(MOD.subtract(BigInteger.valueOf(2)), MOD));
        }
        BigInteger ans = lcm.multiply(sum).mod(MOD);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int t = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int da = scanner.nextInt();
        int db = scanner.nextInt();

        if (x == 0) {
            System.out.println("YES");
            return;
        }

        int a_time = Math.min(a / da, t - 1);
        int b_time = Math.min(b / db, t - 1);

        for (int i = 0; i <= a_time; i++) {
            for (int j = 0; j <= b_time; j++) {
                if (a - da * i == x || b - db * j == x) {
                    System.out.println("YES");
                    return;
                }
                if ((a - da * i) + (b - db * j) == x) {
                    System.out.println("YES");
                    return;
                }
            }
        }

        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int k = scanner.nextInt();

        int[] a = new int[x];
        int[] b = new int[y];
        int[] c = new int[z];

        for (int i = 0; i < x; i++) {
            a[i] = scanner.nextInt();
        }

        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }

        for (int i = 0; i < z; i++) {
            c[i] = scanner.nextInt();
        }

        ArrayList<Integer> ab = new ArrayList<>();
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                ab.add(a[i] + b[j]);
            }
        }

        Collections.sort(ab, Collections.reverseOrder());

        ArrayList<Integer> abc = new ArrayList<>();
        for (int i = 0; i < Math.min(k, x * y); i++) {
            for (int j = 0; j < z; j++) {
                abc.add(ab.get(i) + c[j]);
            }
        }

        Collections.sort(abc, Collections.reverseOrder());

        for (int i = 0; i < k; i++) {
            System.out.println(abc.get(i));
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

public class atcoder_ABC155_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        int pp = 0;
        int na = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            int cc = na + Integer.parseInt(String.valueOf(s.charAt(i)));
            na = 0;
            if (cc <= 4) {
                pp += cc;
            } else {
                na = 1;
                if (i == s.length() - 1) {
                    pp += 1;
                }
                pp += 10 - cc;
            }
        }
        System.out.println(pp);

        int pmin = 1000;
        int mmin = 0;
        s = "0" + s;
        for (char c : s.toCharArray()) {
            int v = Integer.parseInt(String.valueOf(c));
            int npmin = Math.min(pmin + 10 - (v + 1), mmin + 10 - v);
            int nmmin = Math.min(pmin + v + 1, mmin + v);
            pmin = npmin;
            mmin = nmmin;
        }
        System.out.println(Math.min(pmin, mmin));
    }
}
import java.util.Scanner;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();

        int[] ans = new int[n];
        for (int i = 0; i < k; i++) {
            ans[i] = sk / k + (i < sk % k ? 1 : 0);
        }
        for (int i = k; i < n; i++) {
            ans[i] = (sa - sk) / (n - k) + ((i - k) < (sa - sk) % (n - k) ? 1 : 0);
        }

        for (int i = 0; i < n; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    static ArrayList<Integer>[] graph;
    static long mod = (long)1e9 + 7;
    static long dfs(int fro, int to, int f) {
        long caseNum = f;
        int colorNum = f == graph.length ? graph.length - 1 : graph.length - 2;
        for (int u : graph[fro]) {
            if (u == to)
                continue;
            long pat = dfs(u, fro, colorNum);
            if (pat == 0) {
                caseNum = 0;
                break;
            }
            caseNum = (caseNum * pat) % mod;
            colorNum--;
        }
        return caseNum;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        graph = new ArrayList[N];
        for (int i = 0; i < N; i++)
            graph[i] = new ArrayList<>();
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[a].add(b);
            graph[b].add(a);
        }
        long ans = dfs(0, -1, K);
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int pya = scanner.nextInt();
        List<String> arre = new ArrayList<>();
        while (pya-- > 0) {
            arre.add(scanner.next().toLowerCase());
        }
        String oString = scanner.next();
        String lowString = oString.toLowerCase();
        String letter1 = scanner.next().substring(0, 1).toLowerCase();
        String letter2 = "a".equals(letter1) ? "b" : "a";
        int[] valid = new int[oString.length()];
        Set<Integer> setcito = new HashSet<>();
        for (String x : arre) {
            int wat = 0;
            while (true) {
                int index = lowString.indexOf(x, wat);
                if (index < 0) {
                    break;
                }
                for (int i = index; i < index + x.length(); i++) {
                    setcito.add(i);
                }
                wat = index + 1;
            }
        }
        char[] oStringArray = oString.toCharArray();
        for (int i : setcito) {
            String letter = lowString.charAt(i) != letter1.charAt(0) ? letter1 : letter2;
            oStringArray[i] = Character.isLowerCase(oStringArray[i]) ? letter.charAt(0) : letter.toUpperCase().charAt(0);
        }
        System.out.println(new String(oStringArray));
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long w = scanner.nextLong();
        long m = scanner.nextLong();
        long k = scanner.nextLong();
        long lo = 0;
        long hi = (long) 1e18;
        while (hi - lo > 1) {
            long md = (lo + hi) / 2;
            long c = sum(m + md - 1, k) - sum(m - 1, k);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static long sum(long k, long pw) {
        long ret = 0;
        long len = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        ArrayList<int[]> games = new ArrayList<>();
        for (int i = a + 1; i <= x; i++) {
            for (int j = b + 1; j <= y; j++) {
                if (i > j) {
                    games.add(new int[]{i, j});
                }
            }
        }

        System.out.println(games.size());
        for (int[] game : games) {
            System.out.println(game[0] + " " + game[1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int s = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int f = scanner.nextInt();
            int t = scanner.nextInt();
            int x = t - (s - f);
            if (x > c) {
                c = x;
            }
        }
        System.out.println(s + c);
    }
}
import java.util.*;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int maxLevel = scanner.nextInt();
        scanner.nextLine();
        String[] xStr = scanner.nextLine().split(" ");
        String[] yStr = scanner.nextLine().split(" ");
        Set<Integer> x = new HashSet<>();
        Set<Integer> y = new HashSet<>();
        for (int i = 1; i < xStr.length; i++) {
            x.add(Integer.parseInt(xStr[i]));
        }
        for (int i = 1; i < yStr.length; i++) {
            y.add(Integer.parseInt(yStr[i]));
        }
        if (x.contains(0)) {
            x.remove(0);
        } else if (y.contains(0)) {
            y.remove(0);
        }
        x.addAll(y);
        if (x.size() != maxLevel) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.*;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        float[] arr = new float[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextFloat();
        }
        Arrays.sort(arr);
        int o = 2 * n - arr.length;
        float arr_sum = 0;
        for (float value : arr) {
            arr_sum += value;
        }
        float res = Float.MAX_VALUE;
        for (int i = 0; i <= n; i++) {
            if (i + o >= n) {
                res = Math.min(res, Math.abs(i - arr_sum));
            }
        }
        System.out.printf("%.3f", res);
    }
}
import java.util.*;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt() * N + i;
        }
        Arrays.sort(A);
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            int d = (A[i] % N) % 2;
            if (d % 2 != i % 2) {
                cnt++;
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        for (int i = 0; i < n; i++) {
            String line = scanner.nextLine();
            cake[i] = line;
            for (int j = 0; j < line.length(); j++) {
                if (line.charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k > chocCount - 2; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        chocCount = 0;
        nfat = 1;
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k > chocCount - 2; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
import java.util.Scanner;

public class codeforces_459_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x1 = scanner.nextInt();
        int y1 = scanner.nextInt();
        int x2 = scanner.nextInt();
        int y2 = scanner.nextInt();
        int denominator = x2 - x1;
        int numerator = y2 - y1;
        if (denominator != 0) {
            double quotient = (double) numerator / denominator;
            if (quotient == 1) {
                System.out.println(x1 + " " + y1 + " " + x2 + " " + y2);
            } else if (quotient == -1) {
                System.out.println(x2 + " " + y2 + " " + x1 + " " + y1);
            } else {
                System.out.println("-1");
            }
        } else {
            int d = (int) Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
            int x3 = x1;
            int x4 = x2;
            int y3 = y2 + d;
            int y4 = y1 + d;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        }
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        StringBuilder result = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '.') {
                result.append('0');
            } else {
                i += 1;
                if (i < s.length() && s.charAt(i) == '.') {
                    result.append('1');
                } else {
                    result.append('2');
                }
            }
            i += 1;
        }
        System.out.println(result.toString());
    }
}
import java.util.*;

public class atcoder_AGC012_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[2 * n];
        for (int i = 0; i < 2 * n; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        long ans = 0;
        for (int i = A.length - 2; i >= A.length - 2 * n; i -= 2) {
            ans += A[i];
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC122_D {
    static int n;
    static int mod = 1000000007;
    static HashMap<String, Integer>[] memo;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        memo = new HashMap[n + 1];
        for (int i = 0; i <= n; i++) {
            memo[i] = new HashMap<>();
        }
        System.out.println(dfs(0, "TTT"));
    }

    static boolean ok(String last4) {
        for (int i = 0; i < 4; i++) {
            char[] t = last4.toCharArray();
            if (i >= 1) {
                char temp = t[i];
                t[i] = t[i - 1];
                t[i - 1] = temp;
            }
            if (new String(t).contains("AGC")) {
                return false;
            }
        }
        return true;
    }

    static int dfs(int cur, String last3) {
        if (memo[cur].containsKey(last3)) {
            return memo[cur].get(last3);
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (ok(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c)) % mod;
            }
        }
        memo[cur].put(last3, ret);
        return ret;
    }
}
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] ABC = new int[3];
        for (int i = 0; i < 3; i++) {
            ABC[i] = scanner.nextInt();
        }
        int count = 0;
        int sum = 0;
        for (int i : ABC) {
            if (i == 5) {
                count++;
            }
            sum += i;
        }
        if (count == 2) {
            System.out.println(sum == 17 ? "YES" : "NO");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = 368;
        int[] m = new int[N];
        int[] f = new int[N];
        int n = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < n; i++) {
            String[] input = scanner.nextLine().split(" ");
            int a = Integer.parseInt(input[1]);
            int b = Integer.parseInt(input[2]) + 1;
            if (input[0].equals("M")) {
                m[a] += 2;
                m[b] -= 2;
            } else {
                f[a] += 2;
                f[b] -= 2;
            }
        }
        int a = 0, b = 0, c = 0;
        for (int i = 0; i < N; i++) {
            a += m[i];
            b += f[i];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }
        System.out.println(c);
    }
}
import java.util.*;

public class atcoder_ABC123_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[5];
        for (int i = 0; i < 5; i++) {
            A[i] = scanner.nextInt();
        }
        int min = Arrays.stream(A).min().getAsInt();
        System.out.println((int)Math.ceil((double)N / min) + 4);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] L = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            L[i] = scanner.nextInt();
        }
        List<Integer> path = new ArrayList<>();
        path.add(1);
        Map<Integer, Integer> hash = new HashMap<>();
        int x = 1;
        int t = -1;
        boolean flag = false;
        for (int i = 0; i <= N; i++) {
            int ne = L[x];
            if (hash.containsKey(ne)) {
                flag = true;
                t = hash.get(ne);
                break;
            }
            path.add(ne);
            hash.put(ne, i);
            x = ne;
        }
        if (flag) {
            List<Integer> loop = path.subList(t, path.size());
            if (K < path.size()) {
                System.out.println(path.get(K));
            } else {
                K = K - path.size();
                K = K % loop.size();
                System.out.println(loop.get(K));
            }
        } else {
            System.out.println(path.get(K - 1));
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String output = input.replace(",", " ");
        System.out.println(output);
    }
}
import java.util.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        String s = scanner.next();
        int[] problems = new int[q * 2];
        for (int i = 0; i < q * 2; i++) {
            problems[i] = scanner.nextInt();
        }
        int[] cumsum = new int[n];
        for (int i = 1; i < n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        for (int i = 0; i < q * 2; i += 2) {
            int l = problems[i];
            int r = problems[i + 1];
            System.out.println(cumsum[r - 1] - cumsum[l - 1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        if (arr[0] > 15) {
            System.out.println(15);
        } else {
            for (int i = 1; i < arr.length; i++) {
                if (arr[i] - arr[i - 1] > 15) {
                    System.out.println(arr[i - 1] + 15);
                    break;
                }
            }
            if (arr[arr.length - 1] == 90 || arr[arr.length - 1] + 15 >= 90) {
                System.out.println(90);
            } else {
                System.out.println(arr[arr.length - 1] + 15);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = Arrays.stream(lis).max().getAsInt();
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (check(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean check(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= (i / mid);
        }
        return k >= 0;
    }
}
import java.util.*;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String T = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, T, A, B, U);
    }

    public static void solve(String S, String T, int A, int B, String U) {
        if (S.equals(U)) {
            A--;
        }
        if (T.equals(U)) {
            B--;
        }
        System.out.println(A + " " + B);
    }
}
import java.util.*;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] s = scanner.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String i : s) {
            w.put(i, w.getOrDefault(i, 0) + 1);
        }
        int c = -1;
        String a = "";
        for (int i = s.length - 1; i >= 0; i--) {
            if (w.get(s[i]) == Collections.max(w.values())) {
                if (i > c) {
                    a = s[i];
                    c = i;
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        int m = 0;
        for (int a = 0; a < n - 1; a++) {
            if (x[a] >= x[a + 1]) {
                int q = (x[a] - x[a + 1]) / d + 1;
                m += q;
                x[a + 1] += q * d;
            }
        }
        System.out.println(m);
    }
}
import java.util.*;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] p = new int[n];
        int[] q = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            q[i] = scanner.nextInt();
        }
        int pn = getIndex(p, generatePermutations(n));
        int qn = getIndex(q, generatePermutations(n));
        System.out.println(Math.abs(pn - qn));
    }

    private static List<int[]> generatePermutations(int n) {
        List<int[]> permutations = new ArrayList<>();
        int[] array = new int[n];
        for (int i = 0; i < n; i++) {
            array[i] = i + 1;
        }
        permutations.add(array.clone());
        while (nextPermutation(array)) {
            permutations.add(array.clone());
        }
        return permutations;
    }

    private static boolean nextPermutation(int[] array) {
        int i = array.length - 1;
        while (i > 0 && array[i - 1] >= array[i]) {
            i--;
        }
        if (i <= 0) {
            return false;
        }
        int j = array.length - 1;
        while (array[j] <= array[i - 1]) {
            j--;
        }
        int temp = array[i - 1];
        array[i - 1] = array[j];
        array[j] = temp;
        j = array.length - 1;
        while (i < j) {
            temp = array[i];
            array[i] = array[j];
            array[j] = temp;
            i++;
            j--;
        }
        return true;
    }

    private static int getIndex(int[] array, List<int[]> permutations) {
        for (int i = 0; i < permutations.size(); i++) {
            if (Arrays.equals(array, permutations.get(i))) {
                return i;
            }
        }
        return -1;
    }
}
import java.util.*;

public class atcoder_ABC145_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int T = scanner.nextInt();
        int[][] timeValue = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            timeValue[i][0] = scanner.nextInt();
            timeValue[i][1] = scanner.nextInt();
        }
        Arrays.sort(timeValue, Comparator.comparingInt(a -> a[1]));
        int[][] dp = new int[N + 1][T];
        for (int t = 0; t < T; t++) {
            dp[0][t] = 0;
        }
        for (int n = 1; n <= N; n++) {
            dp[n][0] = 0;
            for (int t = 1; t < T; t++) {
                if (timeValue[n][0] > t) {
                    dp[n][t] = dp[n - 1][t];
                } else {
                    dp[n][t] = Math.max(dp[n - 1][t], timeValue[n][1] + dp[n - 1][t - timeValue[n][0]]);
                }
            }
        }
        int valAcum = timeValue[N][1];
        int t = T - 1;
        int maxVal = valAcum + dp[N - 1][t];
        for (int n = N - 1; n > 0; n--) {
            valAcum += timeValue[n][1];
            t -= timeValue[n + 1][0];
            if (t < 0) {
                break;
            } else {
                maxVal = Math.max(maxVal, valAcum + dp[n - 1][t]);
            }
        }
        System.out.println(maxVal);
    }
}
import java.util.*;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] lst = new Integer[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        Arrays.sort(lst, Collections.reverseOrder());
        int od = 0;
        for (int i : lst) {
            if (i % 2 != 0) {
                od++;
            }
        }
        int sum = 0;
        boolean ok = false;
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else {
                if (ok || od > 1) {
                    sum += lst[i];
                    od--;
                    ok = !ok;
                }
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int x = 0;
        if (k <= Math.max(n * n / 2, n * n - (n * n / 2))) {
            System.out.println("YES");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (i % 2 == j % 2 && x < k) {
                        System.out.print("L");
                        x++;
                    } else {
                        System.out.print("S");
                    }
                }
                System.out.println();
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = scanner.nextInt();
        }
        ArrayList<Integer> lst_p = new ArrayList<>();
        ArrayList<Integer> lst_m = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            if (lst[i] == 0) {
                K--;
            }
            if (lst[i] > 0) {
                lst_p.add(lst[i]);
            } else if (lst[i] < 0) {
                lst_m.add(lst[i]);
            }
        }
        Collections.sort(lst_p);
        Collections.sort(lst_m);
        System.out.println(check(K, lst_p, lst_m));
    }

    public static int check(int K, ArrayList<Integer> lst_p, ArrayList<Integer> lst_m) {
        int ans = Integer.MAX_VALUE;
        int lastx = lst_p.size();
        int lasty = lst_m.size();
        for (int j = 0; j <= K; j++) {
            if (j > lastx || K - j > lasty) {
                continue;
            }
            int p = j == 0 ? 0 : lst_p.get(j - 1);
            int m = K - j == 0 ? 0 : lst_m.get(lasty - (K - j));
            ans = Math.min(ans, Math.min(2 * p + Math.abs(m), p + 2 * Math.abs(m)));
        }
        return ans;
    }
}
import java.util.*;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int[] l2 = new int[n];
        for (int i = 0; i < n; i++) {
            if (l[i] % m == 0) {
                l2[i] = l[i] / m;
            } else {
                l2[i] = l[i] / m + 1;
            }
        }
        int mx = Arrays.stream(l2).max().getAsInt();
        int ind = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] == mx) {
                ind = i;
                break;
            }
        }
        System.out.println(ind + 1);
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }
        int one = 0;
        int zero = 0;
        for (int a : lis) {
            if (a % 2 == 0) {
                zero++;
            } else {
                one++;
            }
        }
        long pattern_a = 0;
        long pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combi(zero, j);
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += combi(one, time);
            }
            time++;
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static long combi(int N, int K) {
        long a = 1;
        for (int i = 0; i < K; i++) {
            a *= N - i;
        }
        for (int j = 0; j < K; j++) {
            a /= j + 1;
        }
        return a;
    }
}
import java.util.*;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        for (int i : l) {
            if (i > c) {
                c++;
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.Scanner;

public class atcoder_ARC062_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int num_g = 0, num_p = 0;
        int score = 0;
        for (char x : s.toCharArray()) {
            if (x == 'g') {
                if (num_g - num_p > 0) {
                    score += 1;
                    num_p += 1;
                } else {
                    score = score;
                    num_g += 1;
                }
            } else if (x == 'p') {
                if (num_g - num_p > 0) {
                    score = score;
                    num_p += 1;
                } else {
                    score -= 1;
                    num_g += 1;
                }
            }
        }
        System.out.println(score);
    }
}
import java.util.HashSet;

public class atcoder_ABC114_C {
    static int N = 777777752;

    public static void main(String[] args) {
        System.out.println(aaa("0"));
    }

    public static int aaa(String n) {
        if (Integer.parseInt(n) > N) {
            return 0;
        }
        int ans = isValid(n) ? 1 : 0;
        for (char i : "753".toCharArray()) {
            ans += aaa(n + i);
        }
        return ans;
    }

    public static boolean isValid(String n) {
        HashSet<Character> set = new HashSet<>();
        for (char c : n.toCharArray()) {
            set.add(c);
        }
        return set.equals(new HashSet<>() {{
            add('7');
            add('5');
            add('3');
        }});
    }
}
import java.util.*;

public class atcoder_AGC002_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] balls = new int[N][2];
        for (int i = 0; i < N; i++) {
            balls[i][0] = 1;
            balls[i][1] = 0;
        }
        balls[0][0] = 0;
        balls[0][1] = 1;
        for (int i = 0; i < M; i++) {
            int x = sc.nextInt() - 1;
            int y = sc.nextInt() - 1;
            if (balls[x][0] >= 1 && balls[y][0] >= 1) {
                balls[x][0]--;
                balls[y][1]++;
            } else if (balls[x][0] == 0) {
                balls[x][1]--;
                balls[y][1]++;
            } else {
                balls[x][0]--;
                balls[y][0]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (balls[i][1] > 0) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        if (n % 2 != 0) {
            System.out.println("No");
        } else if (s.substring(0, n / 2).equals(s.substring(n / 2))) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.*;

public class codeforces_61_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<String> l = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            l.add(f(scanner.next()));
        }
        List<String> permutations = new ArrayList<>();
        permute(l, 0, l.size() - 1, permutations);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            if (permutations.contains(f(scanner.next()))) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    private static void permute(List<String> arr, int l, int r, List<String> permutations) {
        if (l == r) {
            StringBuilder sb = new StringBuilder();
            for (String s : arr) {
                sb.append(s);
            }
            permutations.add(sb.toString());
        } else {
            for (int i = l; i <= r; i++) {
                arr = swap(arr, l, i);
                permute(arr, l + 1, r, permutations);
                arr = swap(arr, l, i);
            }
        }
    }

    private static List<String> swap(List<String> a, int i, int j) {
        Collections.swap(a, i, j);
        return a;
    }

    private static String f(String s) {
        StringBuilder r = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c != '-' && c != ';' && c != '_') {
                r.append(Character.toLowerCase(c));
            }
        }
        return r.toString();
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int ans = 0;
        while (Math.pow(10, i) <= N) {
            ans += ((int)Math.pow(10, i) - (int)Math.pow(10, i - 1));
            i += 2;
        }
        ans += Math.max(0, N - (int)Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] a = new int[N];
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < N; i++) {
            a[i] = sc.nextInt();
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = Integer.compare(a[i], 0);
                max_index = i;
            }
        }
        if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println((i + 1) + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println((i + 1) + " " + i);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        Map<Character, Integer> even = new HashMap<>();
        Map<Character, Integer> odd = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            if (i % 2 == 0) {
                even.put(s.charAt(i), even.getOrDefault(s.charAt(i), 0) + 1);
            } else {
                odd.put(s.charAt(i), odd.getOrDefault(s.charAt(i), 0) + 1);
            }
        }
        System.out.println(Math.min(s.length() - (even.getOrDefault('0', 0) + odd.getOrDefault('1', 0)),
                s.length() - (even.getOrDefault('1', 0) + odd.getOrDefault('0', 0))));
    }
}
import java.util.*;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();
        Queue<Task> remaining = new LinkedList<>();
        boolean running = false;
        int finishTime = 0;
        Map<Integer, Integer> result = new HashMap<>();

        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task task = new Task(time, duration, i);
            result.put(i, 0);

            if (task.time > finishTime && remaining.isEmpty()) {
                running = true;
                finishTime = task.time + task.duration;
                result.put(i, finishTime);
            } else {
                if (task.time >= finishTime && !remaining.isEmpty()) {
                    finishTime = runTask(remaining, finishTime, result);
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result.put(i, -1);
                }
            }
        }

        while (!remaining.isEmpty()) {
            finishTime = runTask(remaining, finishTime, result);
        }

        for (int key : result.keySet()) {
            System.out.print(result.get(key) + " ");
        }
    }

    private static int runTask(Queue<Task> remaining, int finishTime, Map<Integer, Integer> result) {
        Task taskToRun = remaining.poll();
        finishTime = Math.max(finishTime, taskToRun.time) + taskToRun.duration;
        result.put(taskToRun.index, finishTime);
        return finishTime;
    }
}
import java.util.*;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Integer[] a = new Integer[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a, Collections.reverseOrder());
        long pre = Long.MAX_VALUE;
        long ans = 0;
        for (int j = 0; j < n; j++) {
            ans += Math.max(0, Math.min(pre - 1, a[j]));
            pre = Math.max(0, Math.min(pre - 1, a[j]));
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int ans = 0;
        if (a[0] > x) {
            System.out.println(0);
            return;
        }
        for (int i : a) {
            if (i > x) {
                x = 0;
                break;
            }
            x -= i;
            ans++;
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println((n * 2 + 1) / 3);
    }
}
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.next();
        int n = S.length();
        long mod = (long) Math.pow(10, 9) + 7;
        long[][] dp = new long[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (S.charAt(i) != '?') {
                    dp[i][S.charAt(i) - '0'] = 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] = 1;
                    }
                }
            } else {
                if (S.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        dp[i][(k * 10 + S.charAt(i) - '0') % 13] += dp[i - 1][k];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= mod;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.*;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isInteger(dist(points[i], points[j]))) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }

    private static double dist(int[] x, int[] y) {
        double tmp = 0.0;
        for (int i = 0; i < x.length; i++) {
            tmp += Math.pow(x[i] - y[i], 2);
        }
        return Math.sqrt(tmp);
    }

    private static boolean isInteger(double num) {
        return num == (int) num;
    }
}
100%|██████████| 250/250 [00:00<00:00, 22741.24it/s]
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long l = 1;
        long r = n;
        while (l < r) {
            long mid = l + (r - l) / 2;
            long idxcnt = mid * (mid + 1) / 2;
            if (idxcnt < n) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l -= 1;
        long idxcnt = l * (l + 1) / 2;
        System.out.println((int) (n - idxcnt));
    }
}
import java.util.*;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int z = 0;
        for (int i : a) {
            x += i;
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            z += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
import java.util.*;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int num = scanner.nextInt();
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int key = entry.getKey();
            if (key == 0) {
                count += entry.getValue() * (entry.getValue() - 1);
            } else {
                if (map.containsKey(-key)) {
                    count += entry.getValue() * map.get(-key);
                }
            }
        }
        System.out.println(count / 2);
    }
}
import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int restoSciolte = 0;
        while (candeleIntere > 0 || restoSciolte >= b) {
            candeleIntere += restoSciolte / b;
            restoSciolte %= b;
            s += candeleIntere;
            restoSciolte += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-33b-instruct --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 1.
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC118_C.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC148_F.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_147_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/codeforces_147_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_E.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  atcoder_ABC155_E.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-33b-instruct/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 154
Success: ['atcoder_ABC119_B.java', 'codeforces_282_B.java', 'atcoder_ABC168_B.java', 'codeforces_581_A.java', 'atcoder_ABC149_C.java', 'codeforces_108_B.java', 'atcoder_ABC122_C.java', 'atcoder_AGC024_B.java', 'atcoder_ABC089_C.java', 'codeforces_340_A.java', 'codeforces_276_B.java', 'codeforces_624_B.java', 'atcoder_AGC014_D.java', 'atcoder_ABC164_A.java', 'codeforces_581_B.java', 'atcoder_ABC140_D.java', 'atcoder_ABC158_A.java', 'atcoder_ABC124_C.java', 'atcoder_ABC137_D.java', 'codeforces_629_B.java', 'atcoder_ABC170_A.java', 'codeforces_148_B.java', 'atcoder_ABC122_D.java', 'atcoder_ABC118_C.java', 'atcoder_ABC109_B.java', 'codeforces_267_A.java', 'atcoder_ABC042_A.java', 'atcoder_ABC129_E.java', 'codeforces_96_B.java', 'codeforces_569_A.java', 'codeforces_272_B.java', 'codeforces_154_A.java', 'atcoder_AGC004_B.java', 'atcoder_ABC150_C.java', 'atcoder_ABC107_C.java', 'atcoder_ABC145_E.java', 'codeforces_354_A.java', 'codeforces_222_A.java', 'codeforces_567_A.java', 'atcoder_ABC125_A.java', 'codeforces_25_A.java', 'codeforces_313_B.java', 'atcoder_ABC145_C.java', 'codeforces_231_A.java', 'atcoder_ABC165_C.java', 'codeforces_665_A.java', 'codeforces_8_B.java', 'codeforces_79_A.java', 'codeforces_369_B.java', 'atcoder_ABC123_B.java', 'codeforces_49_A.java', 'codeforces_682_B.java', 'codeforces_55_A.java', 'codeforces_32_B.java', 'codeforces_99_A.java', 'atcoder_ABC133_B.java', 'codeforces_672_A.java', 'codeforces_302_A.java', 'atcoder_ABC158_B.java', 'atcoder_ABC134_E.java', 'atcoder_AGC046_A.java', 'codeforces_37_A.java', 'atcoder_ABC132_A.java', 'codeforces_678_A.java', 'atcoder_ABC105_D.java', 'atcoder_ABC153_A.java', 'codeforces_11_A.java', 'codeforces_333_B.java', 'codeforces_131_B.java', 'codeforces_408_B.java', 'atcoder_ABC139_B.java', 'codeforces_31_A.java', 'codeforces_534_B.java', 'atcoder_ABC152_C.java', 'atcoder_AGC006_B.java', 'atcoder_AGC019_A.java', 'atcoder_AGC035_B.java', 'codeforces_203_A.java', 'codeforces_61_B.java', 'atcoder_ABC142_A.java', 'codeforces_705_B.java', 'atcoder_ABC142_C.java', 'atcoder_ABC043_B.java', 'atcoder_ABC169_E.java', 'codeforces_445_A.java', 'codeforces_607_A.java', 'atcoder_AGC025_A.java', 'codeforces_404_A.java', 'codeforces_190_A.java', 'atcoder_ABC154_A.java', 'codeforces_379_A.java', 'codeforces_287_A.java', 'codeforces_544_B.java', 'atcoder_ABC149_B.java', 'codeforces_612_B.java', 'codeforces_629_A.java', 'atcoder_ABC164_D.java', 'codeforces_58_B.java', 'codeforces_469_A.java', 'atcoder_ABC112_C.java', 'atcoder_ABC136_B.java', 'atcoder_ABC112_A.java', 'codeforces_56_B.java', 'codeforces_669_A.java', 'atcoder_ABC178_A.java', 'atcoder_AGC033_B.java', 'atcoder_AGC038_A.java', 'codeforces_387_B.java', 'codeforces_216_B.java', 'codeforces_203_B.java', 'codeforces_546_A.java', 'codeforces_171_A.java', 'codeforces_110_B.java', 'codeforces_356_A.java', 'atcoder_ABC171_B.java', 'codeforces_653_A.java', 'codeforces_95_A.java', 'codeforces_608_A.java', 'codeforces_421_A.java', 'atcoder_ABC108_B.java', 'atcoder_AGC013_A.java', 'codeforces_609_B.java', 'atcoder_ABC166_C.java', 'codeforces_265_B.java', 'atcoder_ABC135_D.java', 'atcoder_ABC104_C.java', 'codeforces_106_B.java', 'codeforces_242_B.java', 'atcoder_ABC169_D.java', 'atcoder_ABC174_C.java', 'atcoder_AGC006_A.java', 'codeforces_518_B.java', 'codeforces_274_A.java', 'atcoder_ABC174_E.java', 'atcoder_ABC125_B.java', 'atcoder_ABC145_B.java', 'atcoder_ABC124_A.java', 'codeforces_23_B.java', 'atcoder_ABC110_C.java', 'atcoder_ABC171_E.java', 'codeforces_92_A.java', 'atcoder_ABC051_A.java', 'codeforces_327_A.java', 'atcoder_AGC027_A.java', 'atcoder_ABC143_A.java', 'codeforces_583_B.java', 'atcoder_ABC178_B.java', 'codeforces_59_A.java', 'atcoder_AGC034_B.java', 'codeforces_459_B.java', 'atcoder_ABC172_D.java', 'codeforces_146_A.java', 'atcoder_AGC002_A.java', 'atcoder_ABC125_C.java']
Fail: ['atcoder_ABC155_E.java', 'atcoder_AGC033_A.java', 'atcoder_AGC012_A.java', 'atcoder_AGC046_B.java', 'atcoder_AGC028_B.java', 'codeforces_400_B.java', 'atcoder_ABC167_C.java', 'atcoder_AGC007_C.java', 'codeforces_621_A.java', 'codeforces_622_A.java', 'atcoder_AGC005_B.java', 'codeforces_55_B.java', 'atcoder_AGC027_B.java', 'atcoder_ARC086_B.java', 'codeforces_474_B.java', 'atcoder_AGC037_E.java', 'atcoder_ABC127_F.java', 'atcoder_ABC152_E.java', 'codeforces_598_A.java', 'codeforces_673_A.java', 'atcoder_ABC146_D.java', 'codeforces_632_B.java', 'codeforces_334_A.java', 'codeforces_412_A.java', 'codeforces_7_B.java', 'codeforces_306_A.java', 'atcoder_AGC021_B.java', 'codeforces_351_A.java', 'codeforces_296_A.java', 'atcoder_ABC126_D.java', 'atcoder_AGC011_C.java', 'atcoder_ABC162_D.java', 'codeforces_189_A.java', 'codeforces_242_A.java', 'codeforces_450_A.java', 'atcoder_AGC017_A.java', 'atcoder_ARC062_B.java', 'codeforces_134_A.java', 'atcoder_ABC150_D.java', 'codeforces_651_A.java', 'atcoder_ABC070_B.java', 'codeforces_459_A.java', 'atcoder_ABC168_C.java', 'atcoder_AGC010_B.java', 'codeforces_400_A.java', 'codeforces_387_A.java', 'atcoder_ABC127_B.java', 'atcoder_AGC002_B.java', 'atcoder_ABC133_E.java', 'codeforces_299_A.java', 'codeforces_617_B.java', 'codeforces_86_A.java', 'codeforces_373_B.java', 'atcoder_ABC140_F.java', 'codeforces_644_B.java', 'atcoder_ABC147_D.java', 'atcoder_AGC028_A.java', 'atcoder_AGC043_B.java', 'codeforces_637_A.java', 'codeforces_30_A.java', 'atcoder_AGC003_C.java', 'atcoder_ABC150_E.java', 'codeforces_596_B.java', 'atcoder_ARC102_C.java', 'atcoder_ABC143_D.java', 'atcoder_ABC120_C.java', 'codeforces_268_A.java', 'atcoder_ABC155_D.java', 'atcoder_ABC167_D.java', 'atcoder_ABC123_D.java', 'atcoder_ABC169_C.java', 'codeforces_500_A.java', 'codeforces_514_A.java', 'atcoder_ABC128_C.java', 'atcoder_ABC106_C.java', 'atcoder_ABC123_C.java', 'codeforces_462_B.java', 'codeforces_456_A.java', 'atcoder_ABC114_C.java', 'codeforces_397_B.java', 'atcoder_AGC004_D.java', 'atcoder_ABC107_D.java', 'atcoder_ABC148_F.java', 'atcoder_ABC132_F.java', 'codeforces_519_B.java', 'atcoder_ABC151_A.java', 'atcoder_ABC126_E.java', 'codeforces_67_B.java', 'atcoder_ABC111_C.java', 'codeforces_70_B.java', 'atcoder_AGC029_C.java', 'codeforces_147_A.java', 'codeforces_678_B.java', 'codeforces_342_B.java', 'atcoder_AGC004_D.java', 'codeforces_350_B.java', 'codeforces_579_A.java']
