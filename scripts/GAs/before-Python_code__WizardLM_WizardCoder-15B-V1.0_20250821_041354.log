+ model=WizardLM/WizardCoder-15B-V1.0
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model WizardLM/WizardCoder-15B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 09:18:05 [__init__.py:241] Automatically detected platform cuda.
found 250 inputs
INFO 08-21 09:18:07 [utils.py:326] non-default args: {'model': 'WizardLM/WizardCoder-15B-V1.0', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 09:18:13 [__init__.py:711] Resolved architecture: GPTBigCodeForCausalLM
WARNING 08-21 09:18:13 [__init__.py:2819] Casting torch.float16 to torch.bfloat16.
INFO 08-21 09:18:13 [__init__.py:1750] Using max model len 4096
INFO 08-21 09:18:14 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=554087)[0;0m INFO 08-21 09:18:15 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=554087)[0;0m INFO 08-21 09:18:15 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='WizardLM/WizardCoder-15B-V1.0', speculative_config=None, tokenizer='WizardLM/WizardCoder-15B-V1.0', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=WizardLM/WizardCoder-15B-V1.0, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=554087)[0;0m WARNING 08-21 09:18:15 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=554087)[0;0m INFO 08-21 09:18:15 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_704e3cf5'), local_subscribe_addr='ipc:///tmp/b74258af-f049-48ee-9d1d-6c8f7c5496e6', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:17 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_bf7b03a4'), local_subscribe_addr='ipc:///tmp/dacad7e4-240e-4d78-9930-5ab43b67c966', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:17 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_45390e74'), local_subscribe_addr='ipc:///tmp/d14ad70d-9fef-45ee-ad58-a171a5c43b06', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:18 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:18 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:18 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:18 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:18 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:18 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:18 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_524b45a0'), local_subscribe_addr='ipc:///tmp/83eaa8c1-e4fe-49b2-9185-0f2ae89def15', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:18 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:18 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m WARNING 08-21 09:18:18 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m WARNING 08-21 09:18:18 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:18 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-15B-V1.0...
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:18 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-15B-V1.0...
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:18 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:18 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:18 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:18 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:19 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:19 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m Loading pt checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m Loading pt checkpoint shards: 100% Completed | 1/1 [00:35<00:00, 35.65s/it]
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m Loading pt checkpoint shards: 100% Completed | 1/1 [00:35<00:00, 35.65s/it]
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m 
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:55 [default_loader.py:262] Loading weights took 35.68 seconds
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:55 [default_loader.py:262] Loading weights took 36.00 seconds
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:18:55 [gpu_model_runner.py:2007] Model loading took 14.5982 GiB and 36.535138 seconds
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:18:56 [gpu_model_runner.py:2007] Model loading took 14.5982 GiB and 36.674472 seconds
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:19:01 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f0dee51dc7/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:19:01 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f0dee51dc7/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:19:01 [backends.py:559] Dynamo bytecode transform time: 5.29 s
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:19:01 [backends.py:559] Dynamo bytecode transform time: 5.29 s
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:19:05 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 3.818 s
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:19:11 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 8.649 s
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:19:15 [monitor.py:34] torch.compile takes 5.29 s in total
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:19:15 [monitor.py:34] torch.compile takes 5.29 s in total
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:19:16 [gpu_worker.py:276] Available KV cache memory: 53.08 GiB
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:19:16 [gpu_worker.py:276] Available KV cache memory: 53.08 GiB
[1;36m(EngineCore_0 pid=554087)[0;0m INFO 08-21 09:19:17 [kv_cache_utils.py:849] GPU KV cache size: 2,782,848 tokens
[1;36m(EngineCore_0 pid=554087)[0;0m INFO 08-21 09:19:17 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 679.41x
[1;36m(EngineCore_0 pid=554087)[0;0m INFO 08-21 09:19:17 [kv_cache_utils.py:849] GPU KV cache size: 2,782,848 tokens
[1;36m(EngineCore_0 pid=554087)[0;0m INFO 08-21 09:19:17 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 679.41x
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:03, 21.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 22.35it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  13%|█▎        | 9/67 [00:00<00:02, 22.44it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:02, 22.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  22%|██▏       | 15/67 [00:00<00:02, 21.25it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:00<00:02, 21.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  31%|███▏      | 21/67 [00:00<00:02, 22.00it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:01, 22.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  40%|████      | 27/67 [00:01<00:01, 21.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:01, 21.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  49%|████▉     | 33/67 [00:01<00:01, 20.90it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:01, 20.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  58%|█████▊    | 39/67 [00:01<00:01, 20.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:01<00:01, 20.32it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  67%|██████▋   | 45/67 [00:02<00:01, 19.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  70%|███████   | 47/67 [00:02<00:01, 19.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  73%|███████▎  | 49/67 [00:02<00:00, 19.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  76%|███████▌  | 51/67 [00:02<00:00, 18.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  79%|███████▉  | 53/67 [00:02<00:00, 18.37it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  82%|████████▏ | 55/67 [00:02<00:00, 17.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  85%|████████▌ | 57/67 [00:02<00:00, 17.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  88%|████████▊ | 59/67 [00:02<00:00, 18.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  91%|█████████ | 61/67 [00:03<00:00, 17.76it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  94%|█████████▍| 63/67 [00:03<00:00, 17.92it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  97%|█████████▋| 65/67 [00:03<00:00, 18.35it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:03<00:00, 19.99it/s]
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:19:20 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:19:21 [custom_all_reduce.py:196] Registering 5427 cuda graph addresses
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP1 pid=554095)[0;0m INFO 08-21 09:19:21 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.67 GiB
[1;36m(EngineCore_0 pid=554087)[0;0m [1;36m(VllmWorker TP0 pid=554093)[0;0m INFO 08-21 09:19:21 [gpu_model_runner.py:2708] Graph capturing finished in 4 secs, took 0.67 GiB
[1;36m(EngineCore_0 pid=554087)[0;0m INFO 08-21 09:19:21 [core.py:214] init engine (profile, create kv cache, warmup model) took 25.48 seconds
INFO 08-21 09:19:23 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s] 56%|█████▌    | 139/250 [00:00<00:00, 1383.67it/s]100%|██████████| 250/250 [00:00<00:00, 1584.96it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  31%|███       | 77/250 [00:00<00:00, 765.77it/s]Adding requests:  66%|██████▌   | 164/250 [00:00<00:00, 824.95it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 850.85it/s]
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:03<14:21,  3.46s/it, est. speed input: 29.48 toks/s, output: 20.81 toks/s]Processed prompts:   1%|          | 2/250 [00:03<06:29,  1.57s/it, est. speed input: 108.05 toks/s, output: 42.04 toks/s]Processed prompts:   1%|          | 3/250 [00:03<03:47,  1.09it/s, est. speed input: 141.16 toks/s, output: 64.35 toks/s]Processed prompts:   4%|▎         | 9/250 [00:03<00:49,  4.85it/s, est. speed input: 336.26 toks/s, output: 205.41 toks/s]Processed prompts:   6%|▋         | 16/250 [00:04<00:23,  9.96it/s, est. speed input: 560.29 toks/s, output: 370.30 toks/s]Processed prompts:   8%|▊         | 21/250 [00:04<00:16, 13.56it/s, est. speed input: 841.73 toks/s, output: 488.13 toks/s]Processed prompts:  10%|█         | 25/250 [00:04<00:13, 16.40it/s, est. speed input: 952.44 toks/s, output: 580.77 toks/s]Processed prompts:  12%|█▏        | 29/250 [00:04<00:11, 19.16it/s, est. speed input: 1071.07 toks/s, output: 676.81 toks/s]Processed prompts:  13%|█▎        | 33/250 [00:04<00:10, 21.16it/s, est. speed input: 1205.93 toks/s, output: 771.92 toks/s]Processed prompts:  16%|█▋        | 41/250 [00:04<00:06, 30.79it/s, est. speed input: 1613.62 toks/s, output: 987.99 toks/s]Processed prompts:  19%|█▉        | 47/250 [00:04<00:06, 32.82it/s, est. speed input: 1824.94 toks/s, output: 1135.10 toks/s]Processed prompts:  23%|██▎       | 57/250 [00:05<00:04, 46.38it/s, est. speed input: 2564.79 toks/s, output: 1421.98 toks/s]Processed prompts:  25%|██▌       | 63/250 [00:05<00:04, 44.38it/s, est. speed input: 2714.21 toks/s, output: 1570.65 toks/s]Processed prompts:  28%|██▊       | 71/250 [00:05<00:03, 50.44it/s, est. speed input: 3062.97 toks/s, output: 1790.88 toks/s]Processed prompts:  31%|███       | 77/250 [00:05<00:03, 48.92it/s, est. speed input: 3264.90 toks/s, output: 1945.48 toks/s]Processed prompts:  34%|███▍      | 86/250 [00:05<00:03, 51.48it/s, est. speed input: 3929.21 toks/s, output: 2190.92 toks/s]Processed prompts:  37%|███▋      | 92/250 [00:05<00:03, 52.59it/s, est. speed input: 4244.29 toks/s, output: 2356.90 toks/s]Processed prompts:  42%|████▏     | 105/250 [00:05<00:02, 70.70it/s, est. speed input: 4720.98 toks/s, output: 2772.22 toks/s]Processed prompts:  46%|████▋     | 116/250 [00:05<00:01, 80.58it/s, est. speed input: 5141.19 toks/s, output: 3114.94 toks/s]Processed prompts:  50%|█████     | 125/250 [00:06<00:02, 51.03it/s, est. speed input: 5202.69 toks/s, output: 3272.63 toks/s]Processed prompts:  53%|█████▎    | 132/250 [00:06<00:02, 53.54it/s, est. speed input: 5426.26 toks/s, output: 3480.80 toks/s]Processed prompts:  56%|█████▌    | 139/250 [00:06<00:02, 54.59it/s, est. speed input: 5609.94 toks/s, output: 3687.33 toks/s]Processed prompts:  59%|█████▉    | 147/250 [00:06<00:01, 57.73it/s, est. speed input: 5941.63 toks/s, output: 3936.47 toks/s]Processed prompts:  62%|██████▏   | 154/250 [00:06<00:01, 58.22it/s, est. speed input: 6255.14 toks/s, output: 4149.18 toks/s]Processed prompts:  64%|██████▍   | 161/250 [00:06<00:01, 53.82it/s, est. speed input: 6595.07 toks/s, output: 4339.42 toks/s]Processed prompts:  67%|██████▋   | 167/250 [00:07<00:01, 50.71it/s, est. speed input: 6834.75 toks/s, output: 4502.80 toks/s]Processed prompts:  69%|██████▉   | 173/250 [00:07<00:01, 51.45it/s, est. speed input: 7194.29 toks/s, output: 4686.08 toks/s]Processed prompts:  72%|███████▏  | 180/250 [00:07<00:01, 54.65it/s, est. speed input: 7541.51 toks/s, output: 4914.07 toks/s]Processed prompts:  74%|███████▍  | 186/250 [00:07<00:01, 48.04it/s, est. speed input: 7720.49 toks/s, output: 5066.83 toks/s]Processed prompts:  77%|███████▋  | 192/250 [00:07<00:01, 39.46it/s, est. speed input: 7957.52 toks/s, output: 5187.74 toks/s]Processed prompts:  79%|███████▉  | 197/250 [00:07<00:01, 33.52it/s, est. speed input: 7954.94 toks/s, output: 5273.85 toks/s]Processed prompts:  80%|████████  | 201/250 [00:08<00:01, 30.02it/s, est. speed input: 8019.99 toks/s, output: 5342.70 toks/s]Processed prompts:  82%|████████▏ | 205/250 [00:08<00:01, 29.87it/s, est. speed input: 8203.19 toks/s, output: 5444.25 toks/s]Processed prompts:  84%|████████▍ | 210/250 [00:08<00:01, 31.27it/s, est. speed input: 8402.05 toks/s, output: 5591.84 toks/s]Processed prompts:  86%|████████▌ | 214/250 [00:08<00:01, 28.65it/s, est. speed input: 8463.25 toks/s, output: 5675.56 toks/s]Processed prompts:  88%|████████▊ | 219/250 [00:08<00:00, 31.21it/s, est. speed input: 8636.01 toks/s, output: 5839.54 toks/s]Processed prompts:  90%|█████████ | 225/250 [00:08<00:00, 36.27it/s, est. speed input: 8800.75 toks/s, output: 6063.51 toks/s]Processed prompts:  92%|█████████▏| 229/250 [00:09<00:00, 22.38it/s, est. speed input: 8696.85 toks/s, output: 6012.71 toks/s]Processed prompts:  93%|█████████▎| 232/250 [00:09<00:00, 20.88it/s, est. speed input: 8769.80 toks/s, output: 6056.00 toks/s]Processed prompts:  94%|█████████▍| 235/250 [00:09<00:01, 14.49it/s, est. speed input: 8526.46 toks/s, output: 5961.80 toks/s]Processed prompts:  96%|█████████▌| 240/250 [00:09<00:00, 19.19it/s, est. speed input: 8851.01 toks/s, output: 6178.28 toks/s]Processed prompts:  97%|█████████▋| 243/250 [00:10<00:00, 11.62it/s, est. speed input: 8504.01 toks/s, output: 5994.65 toks/s]Processed prompts:  98%|█████████▊| 246/250 [00:11<00:00,  5.60it/s, est. speed input: 7713.43 toks/s, output: 5454.27 toks/s]Processed prompts:  99%|█████████▉| 248/250 [00:13<00:00,  3.43it/s, est. speed input: 6948.26 toks/s, output: 4934.63 toks/s]Processed prompts: 100%|█████████▉| 249/250 [00:29<00:00,  3.43it/s, est. speed input: 5757.45 toks/s, output: 4117.86 toks/s]Processed prompts: 100%|██████████| 250/250 [00:40<00:00,  3.15s/it, est. speed input: 2315.09 toks/s, output: 1733.80 toks/s]Processed prompts: 100%|██████████| 250/250 [00:40<00:00,  3.15s/it, est. speed input: 2315.09 toks/s, output: 1733.80 toks/s]Processed prompts: 100%|██████████| 250/250 [00:40<00:00,  6.18it/s, est. speed input: 2315.09 toks/s, output: 1733.80 toks/s]
+ python3 clean_generations_translation.py --model WizardLM/WizardCoder-15B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.*;

public class atcoder_ABC146_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] G = new int[N][N];
        int[][] E = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                G[i][j] = 0;
                E[i][j] = 0;
            }
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            G[a][b] = 1;
            G[b][a] = 1;
            E[a][b] = 0;
            E[b][a] = 0;
        }
        int K = bfs(0, N, G, E);
        System.out.println(K);
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(E[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static int bfs(int v, int N, int[][] G, int[][] E) {
        boolean[] visited = new boolean[N];
        Queue<Integer> queue = new LinkedList<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.offer(v);
        visited[v] = true;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            for (int nex = 0; nex < N; nex++) {
                if (visited[nex] || G[q][nex] == 0) {
                    continue;
                }
                visited[nex] = true;
                color++;
                if (color == node2color[q]) {
                    color++;
                }
                node2color[nex] = color;
                E[Math.min(q, nex)][Math.max(q, nex)] = color;
                queue.offer(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }
}
import java.util.Scanner;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        double[] x = new double[N];
        for (int i = 0; i < N; i++) {
            String[] tokens = sc.next().split(" ");
            double amount = Double.parseDouble(tokens[0]);
            String currency = tokens[1];
            if (currency.equals("JPY")) {
                x[i] = amount * 1.0;
            } else if (currency.equals("BTC")) {
                x[i] = amount * 380000.0;
            }
        }
        double total = 0.0;
        for (double amount : x) {
            total += amount;
        }
        System.out.printf("%.3f", total);
    }
}
import java.util.*;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextLong();
        }
        long MOD = 1000000007;
        int Nsq = 1000;
        long[] fact = new long[Nsq];
        fact[0] = 1;
        for (int i = 1; i < Nsq; i++) {
            fact[i] = (fact[i - 1] * i) % MOD;
        }
        long[] inv = new long[N];
        for (int i = 0; i < N; i++) {
            inv[i] = pow(i + 1, MOD - 2, MOD);
        }
        long[] temp = new long[N];
        for (int i = 0; i < N; i++) {
            temp[i] = (inv[i] + inv[N - 1 - i] - 1) % MOD;
        }
        long ans = 0;
        for (int i = 0; i < N; i++) {
            ans = (ans + A[i] * temp[i]) % MOD;
        }
        ans = (ans * fact[N]) % MOD;
        System.out.println(ans);
    }

    public static long pow(long a, long b, long mod) {
        if (b == 0) {
            return 1;
        }
        long res = pow(a, b / 2, mod);
        res = (res * res) % mod;
        if (b % 2 == 1) {
            res = (res * a) % mod;
        }
        return res;
    }
}
import java.util.Scanner;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int s = sc.nextInt();
        int q = sc.nextInt();
        int ans = 0;
        while (s < t) {
            s *= q;
            ans++;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<int[]> ls_xyh = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int[] arr = new int[3];
            arr[0] = sc.nextInt();
            arr[1] = sc.nextInt();
            arr[2] = sc.nextInt();
            ls_xyh.add(arr);
        }
        System.out.println(solve(n, ls_xyh));
    }

    public static String solve(int n, List<int[]> ls_xyh) {
        int x0 = -1, y0 = -1, h0 = -1;
        for (int i = 0; i < n; i++) {
            if (ls_xyh.get(i)[2] > 0) {
                x0 = ls_xyh.get(i)[0];
                y0 = ls_xyh.get(i)[1];
                h0 = ls_xyh.get(i)[2];
                break;
            }
        }
        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                int ch = h0 + Math.abs(cx - x0) + Math.abs(cy - y0);
                cands.add(new int[]{cx, cy, ch});
            }
        }
        for (int[] xyh : ls_xyh) {
            List<int[]> newCands = new ArrayList<>();
            for (int[] cand : cands) {
                int cx = cand[0], cy = cand[1], ch = cand[2];
                int maxDist = Math.max(ch - Math.abs(cx - xyh[0]) - Math.abs(cy - xyh[1]), 0);
                if (maxDist == xyh[2]) {
                    newCands.add(cand);
                }
            }
            cands = newCands;
        }
        int[] res = cands.get(0);
        return res[0] + " " + res[1] + " " + res[2];
    }
}
import java.util.*;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        List<int[]> PC = new ArrayList<>();
        for (int i = 0; i < D; i++) {
            int[] p = new int[2];
            p[0] = sc.nextInt();
            p[1] = sc.nextInt();
            PC.add(p);
        }
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < (1 << D); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((i & (1 << j)) != 0) {
                    score += 100 * (j + 1) * PC.get(j)[0] + PC.get(j)[1];
                    problem += PC.get(j)[0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((i & (1 << j)) != 0) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC.get(j)[0] + PC.get(j)[1]) {
                    continue;
                }
                int tmp = (left + (100 * (j + 1)) - 1) / (100 * (j + 1));
                ans = Math.min(ans, problem + Math.min(tmp, PC.get(j)[0]));
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int vamshi, z;
        vamshi = sc.nextInt();
        z = sc.nextInt();
        int result = (vamshi / z + 1) * z;
        System.out.println(result);
    }
}
import java.util.*;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for(int i=0;i<t;i++){
            solve();
        }
    }
    public static void solve(){
        String x = sc.next();
        int[] s = new int[x.length()];
        for(int i=0;i<x.length();i++){
            if(x.charAt(i)=='O'){
                s[i]=0;
            }else{
                s[i]=1;
            }
        }
        List<int[]> res = new ArrayList<>();
        for(int i=1;i<=12;i++){
            if(12%i==0){
                if(help(i,12/i,s)){
                    res.add(new int[]{i,12/i});
                }
            }
        }
        Collections.sort(res, new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                return a[0]-b[0];
            }
        });
        System.out.print(res.size()+" ");
        for(int[] r:res){
            System.out.print(r[0]+"x"+r[1]+" ");
        }
        System.out.println();
    }
    public static boolean help(int a,int b,int[] s){
        int[][] tot = new int[b][a];
        int c=0;
        for(int i=0;i<s.length;i++){
            if(s[i]==0){
                tot[c][0]++;
            }else{
                tot[c][tot[c][0]]++;
                c=(c+1)%b;
            }
        }
        for(int i=0;i<b;i++){
            if(Arrays.stream(tot[i]).sum()==a){
                return true;
            }
        }
        return false;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int M = Integer.parseInt(input[1]);
        long[] A = new long[N];
        String[] A_str = br.readLine().split(" ");
        for(int i=0;i<N;i++){
            A[i] = Long.parseLong(A_str[i]);
        }
        long[] cum_remainders = new long[N+1];
        cum_remainders[0] = 0;
        for(int i=1;i<=N;i++){
            cum_remainders[i] = (cum_remainders[i-1] + A[i-1]) % M;
        }
        Map<Long,Integer> remainder_counts = new HashMap<>();
        for(int i=0;i<N;i++){
            remainder_counts.put(cum_remainders[i],remainder_counts.getOrDefault(cum_remainders[i],0)+1);
        }
        int combinations = 0;
        for(int count : remainder_counts.values()){
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
    }
}
import java.util.*;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int s_r = sc.nextInt();
        int s_c = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        boolean Judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        for (int x = 0; x < N; x++) {
            if (S.charAt(x) == 'L') {
                S_L++;
                if (S_L - T_R - s_c == 0) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'R') {
                S_R++;
                if (s_c + (S_R - T_L) == W + 1) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'U') {
                S_U++;
                if (S_U - T_D - s_r == 0) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'D') {
                S_D++;
                if (s_r + (S_D - T_U) == H + 1) {
                    Judge = true;
                }
            }
            if (T.charAt(x) == 'L') {
                if (S_R - T_L + s_c != 1) {
                    T_L++;
                }
            } else if (T.charAt(x) == 'R') {
                if (s_c + (T_R - S_L) != W) {
                    T_R++;
                }
            } else if (T.charAt(x) == 'U') {
                if (S_D - T_U + s_r != 1) {
                    T_U++;
                }
            } else if (T.charAt(x) == 'D') {
                if (s_r + (T_D - S_U) != H) {
                    T_D++;
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class codeforces_55_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        while (n % 2 == 0) {
            n /= 2;
        }
        if (n == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.*;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.nextLine();
        }
        boolean flag = false;
        char[] d1 = new char[n];
        char[] d2 = new char[n];
        Set<Character> rem = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    d1[i] = s[i].charAt(j);
                }
                if (i == n - j - 1) {
                    d2[i] = s[i].charAt(j);
                }
                if (i != j && i != n - j - 1) {
                    rem.add(s[i].charAt(j));
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!Arrays.equals(d1, d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(Arrays.asList(d1)).size() != 1) {
            System.out.println("NO");
        } else if (new HashSet<>(Arrays.asList(d1)).contains(rem.iterator().next())) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.*;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int D = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C+1][D+1];
        d[A][B] = 1;
        for(int i=A;i<=C;i++){
            for(int j=B;j<=D;j++){
                d[i][j] = (d[i][j-1]*i+d[i-1][j]*j-d[i-1][j-1]*(i-1)*(j-1))%m;
            }
        }
        System.out.println(d[C][D]);
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int m = sc.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        for (int i = 0; i < t; i++) {
            String[] op = sc.next().split(" ");
            if (op[0].equals("alloc")) {
                int pos = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        pos++;
                        if (pos == Integer.parseInt(op[1])) {
                            for (int k = j - Integer.parseInt(op[1]) + 1; k <= j; k++) {
                                alocuente[k] = ind;
                            }
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                } else {
                    System.out.println("NULL");
                }
            }
            if (op[0].equals("erase")) {
                int pos = 0;
                if (Integer.parseInt(op[1]) == 0 || !Arrays.asList(alocuente).contains(Integer.parseInt(op[1]))) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == Integer.parseInt(op[1])) {
                            alocuente[j] = 0;
                            break;
                        }
                    }
                }
            }
            if (op[0].equals("defragment")) {
                int cnt = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        cnt++;
                    }
                }
                int[] newAlocuente = new int[m - cnt];
                int k = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] != 0) {
                        newAlocuente[k] = alocuente[j];
                        k++;
                    }
                }
                alocuente = newAlocuente;
                for (int j = 0; j < cnt; j++) {
                    alocuente[m - cnt + j] = 0;
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC021_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] XY = new int[N*2];
        for(int i=0;i<N*2;i++){
            XY[i] = sc.nextInt();
        }
        double[] x = new double[N];
        double[] y = new double[N];
        for(int i=0;i<N;i++){
            x[i] = XY[i*2];
            y[i] = XY[i*2+1];
        }
        double[] d = new double[N];
        for(int i=0;i<N;i++){
            double dx = x[i]-x[0];
            double dy = y[i]-y[0];
            d[i] = Math.atan2(dy,dx);
        }
        Arrays.sort(d);
        double ans = 0;
        for(int i=0;i<N;i++){
            double a = d[i];
            double b = d[(i+1)%N];
            if(b-a>=Math.PI){
                ans += (b-a)-Math.PI;
            }
        }
        ans = ans/(2*Math.PI);
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }
        int[] march = new int[5];
        for (int i = 0; i < n; i++) {
            if (s[i].charAt(0) == 'M' || s[i].charAt(0) == 'm') {
                march[0]++;
            } else if (s[i].charAt(0) == 'A' || s[i].charAt(0) == 'a') {
                march[1]++;
            } else if (s[i].charAt(0) == 'R' || s[i].charAt(0) == 'r') {
                march[2]++;
            } else if (s[i].charAt(0) == 'C' || s[i].charAt(0) == 'c') {
                march[3]++;
            } else if (s[i].charAt(0) == 'H' || s[i].charAt(0) == 'h') {
                march[4]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                for (int k = j + 1; k < 5; k++) {
                    ans += march[i] * march[j] * march[k];
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int ans = 0;
        for (int i = 1; i < n - 1; i++) {
            if ((a[i] > a[i - 1] && a[i] > a[i + 1]) || (a[i] < a[i - 1] && a[i] < a[i + 1])) {
                ans++;
            }
        }
        System.out.println(ans + 1);
    }
}
import java.util.*;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = sc.nextInt();
        }
        Map<Integer, Integer> l = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (!l.containsKey(lst[i])) {
                l.put(lst[i], 1);
            } else {
                l.put(lst[i], l.get(lst[i]) + 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (l.get(lst[i]) > 1) {
                res += n - i - l.get(lst[i]);
                l.put(lst[i], l.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        sc.close();
        int rNum = 0, gNum = 0, bNum = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'R') {
                rNum++;
            } else if (s.charAt(i) == 'G') {
                gNum++;
            } else if (s.charAt(i) == 'B') {
                bNum++;
            }
        }
        int sum = 0;
        for (int step = 1; step <= Math.ceil(n / 2.0); step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String sub = s.substring(i, i + step + 1);
                if (sub.equals("RGB") || sub.equals("RBG") || sub.equals("BGR") || sub.equals("BRG") || sub.equals("GBR") || sub.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(rNum * gNum * bNum - sum);
    }
}
import java.util.*;

public class atcoder_AGC014_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[][] adj = new int[N+1][N+1];
        for(int i=0;i<N-1;i++){
            int a = sc.nextInt();
            int b = sc.nextInt();
            adj[a][b] = 1;
            adj[b][a] = 1;
        }
        Queue<Integer> que = new LinkedList<>();
        que.add(1);
        boolean[] seen = new boolean[N+1];
        seen[1] = true;
        int[] par = new int[N+1];
        int[] child_num = new int[N+1];
        while(!que.isEmpty()){
            int v = que.poll();
            for(int u=1;u<=N;u++){
                if(adj[v][u]==1 && !seen[u]){
                    seen[u] = true;
                    par[u] = v;
                    child_num[v]++;
                    que.add(u);
                }
            }
        }
        Queue<Integer> seq = new LinkedList<>();
        for(int i=1;i<=N;i++){
            if(child_num[i]==0){
                seq.add(i);
            }
        }
        while(!seq.isEmpty()){
            int c = seq.poll();
            seen[c] = false;
            if(seen[par[c]]){
                System.out.println("First");
                return;
            }
            seen[par[c]] = false;
            child_num[par[par[c]]]--;
            if(child_num[par[par[c]]]==0){
                seq.add(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String c = scanner.nextLine();
        String result = solve(c);
        System.out.println(result);
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return a.charAt(i + 1) + "";
    }
}
import java.util.*;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int[] ans = new int[n];
        int mx = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            ans[i] = Math.max(0, mx - arr[i] + 1);
            if (arr[i] > mx) {
                mx = arr[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] edge = new int[N][N];
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge[X][Y] = Z;
            edge[Y][X] = Z;
        }
        int ans = 0;
        boolean[] used = new boolean[N];
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Queue<Integer> queue = new LinkedList<>();
                queue.offer(i);
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    used[node] = true;
                    for (int nextnode = 0; nextnode < N; nextnode++) {
                        if (!used[nextnode] && edge[node][nextnode] != 0) {
                            queue.offer(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC118_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<Integer> A = new ArrayList<>();
        for(int i=0;i<N;i++){
            A.add(sc.nextInt());
        }
        int gcd = A.stream().reduce(1, (a, b) -> fractions.gcd(a, b));
        System.out.println(gcd);
    }
}
import java.util.*;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int mod = 1000000007;
        int[] coef = new int[n];
        for (int i = 1; i <= Math.sqrt(n); i++) {
            coef[i-1] = (n/i) - (n/(i+1));
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += coef[i];
        }
        if (sum < n) {
            coef[n-1] = 1;
        }
        int[][] dp = new int[k+1][n];
        for (int i = 0; i < n; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i <= k; i++) {
            for (int j = 0; j < n; j++) {
                int sum1 = 0;
                for (int l = j; l < n; l++) {
                    sum1 += dp[i-1][l];
                    sum1 %= mod;
                }
                dp[i][j] = coef[j] * sum1;
                dp[i][j] %= mod;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += dp[k][i];
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        System.out.println(Math.min(a, b) + " " + (Math.max(a, b) - Math.min(a, b)) / 2);
    }
}
import java.util.Scanner;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int i = 1;
        while (m >= i) {
            m -= i;
            i = (i % n) + 1;
        }
        System.out.println(m);
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        int[] a = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            a[i] = Integer.parseInt(input[i]);
        }
        for (int i = 0; i < a.length; i++) {
            if (a[i] == 0) {
                System.out.println(i + 1);
                break;
            }
        }
    }
}
import java.util.*;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(sc.nextInt());
        }
        Collections.sort(l);
        for (int i = 0; i < l.size() - 2; i++) {
            if (l.get(i) + 1 == l.get(i + 1) && l.get(i) + 2 == l.get(i + 2)) {
                System.out.println("YES");
                break;
            }
        }
        if (l.size() < 3) {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String record_of_movements = sc.nextLine();
        int x = 0, y = 0;
        Map<Character, int[]> d_movement = new HashMap<Character, int[]>();
        d_movement.put('L', new int[] {0, -1});
        d_movement.put('R', new int[] {0, 1});
        d_movement.put('U', new int[] {1, 0});
        d_movement.put('D', new int[] {-1, 0});
        Map<String, String> d = new HashMap<String, String>();
        d.put(x + "," + y, "");
        boolean bug = false;
        for (int i = 0; i < record_of_movements.length(); i++) {
            char move = record_of_movements.charAt(i);
            int[] temp = {x, y};
            x += d_movement.get(move)[0];
            y += d_movement.get(move)[1];
            if (!d.containsKey(x + "," + y)) {
                for (char step : d_movement.keySet()) {
                    if ((x + d_movement.get(step)[0] != temp[0] || y + d_movement.get(step)[1] != temp[1]) && d.containsKey(x + d_movement.get(step)[0] + "," + y + d_movement.get(step)[1])) {
                        bug = true;
                        break;
                    }
                }
            } else {
                bug = true;
            }
            if (bug) {
                break;
            }
            d.put(x + "," + y, "");
        }
        if (bug) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.*;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> number = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            number.add(sc.nextInt());
        }
        int h1 = 0, h2 = 0, x = 0;
        for (int i = 0; i < n; i++) {
            if (number.get(i) != 4 && number.get(i) != 7) {
                System.out.println("NO");
                x++;
                break;
            }
            if (i < n / 2) {
                h1 += number.get(i);
            } else {
                h2 += number.get(i);
            }
        }
        if (x == 0) {
            if (h1 == h2) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++) arr[i] = sc.nextInt();
        Arrays.sort(arr);
        int max = arr[n-1];
        for(int i=0;i<n;i++) {
            if(arr[i]%max==0) {
                System.out.println(arr[i]);
                return;
            }
        }
        System.out.println(-1);
    }
}
import java.util.*;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        Map<Character, Integer> freqs = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();
        int yay = 0, whoops = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (freqs.containsKey(c)) {
                freqs.put(c, freqs.get(c) + 1);
            } else {
                freqs.put(c, 1);
            }
        }
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            if (freqt.containsKey(c)) {
                freqt.put(c, freqt.get(c) + 1);
            } else {
                freqt.put(c, 1);
            }
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0 && freqt.containsKey(c) && freqt.get(c) > 0) {
                yay++;
                freqs.put(c, freqs.get(c) - 1);
                freqt.put(c, freqt.get(c) - 1);
            }
        }
        for (char c : freqs.keySet()) {
            while (freqs.get(c) > 0) {
                if (Character.isLowerCase(c) && freqt.containsKey(Character.toUpperCase(c)) && freqt.get(Character.toUpperCase(c)) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toUpperCase(c), freqt.get(Character.toUpperCase(c)) - 1);
                } else if (Character.isUpperCase(c) && freqt.containsKey(Character.toLowerCase(c)) && freqt.get(Character.toLowerCase(c)) > 0) {
                    whoops++;
                    freqs.put(c, freqs.get(c) - 1);
                    freqt.put(Character.toLowerCase(c), freqt.get(Character.toLowerCase(c)) - 1);
                } else {
                    break;
                }
            }
        }
        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        int[] lista = new int[n];
        int[] listb = new int[n];
        for (int i = 0; i < n; i++) {
            lista[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            listb[i] = sc.nextInt();
        }
        for (int k = 0; k < n; k++) {
            if (k + 1 == lista[k]) {
                System.out.print(1 + " ");
            } else {
                System.out.print(2 + " ");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        int x = Integer.parseInt(input[0]);
        int y = Integer.parseInt(input[1]);
        int a = Integer.parseInt(input[2]);
        int b = Integer.parseInt(input[3]);

        int lcm = x * y / G(x, y);
        int ans = b / lcm - (a - 1) / lcm;
        System.out.println(ans);
    }

    public static int G(int a, int b) {
        while (a % b != 0) {
            int temp = a % b;
            a = b;
            b = temp;
        }
        return b;
    }

    public static int L(int a, int b) {
        return a * b / G(a, b);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC140_F {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        int[] S = new int[N];
        String[] arr = br.readLine().split(" ");
        for(int i=0;i<N;i++){
            S[i] = Integer.parseInt(arr[i]);
        }
        Arrays.sort(S);
        boolean[] flag = new boolean[N];
        List<Integer> cur = new ArrayList<Integer>();
        cur.add(S[0]);
        flag[0] = false;
        for(int i=0;i<N;i++){
            int j=0;
            int jM = cur.size();
            for(int k=0;k<N;k++){
                if(!flag[k] && S[k]<cur.get(j)){
                    cur.add(S[k]);
                    j++;
                    flag[k] = false;
                    if(j==jM){
                        break;
                    }
                }
            }
            else{
                System.out.println("No");
                return;
            }
            Collections.sort(cur,Collections.reverseOrder());
        }
        System.out.println("Yes");
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v1 = sc.nextInt();
        int v2 = sc.nextInt();
        int t = sc.nextInt();
        int d = sc.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        for (int i = 0; i < t; i++) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
            distance += v;
            v += a * d;
        }
        System.out.println(distance);
    }
}
import java.util.*;
public class codeforces_672_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] li = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int[] temp = new int[3];
        int count = 0;
        for(int i=1;i<=371;i++){
            count = 0;
            while(i!=0){
                i/=10;
                count++;
            }
            if(count==1){
                li[li.length-1] = i;
            }
            if(count==2){
                temp = new int[2];
                int j=i;
                while(j!=0){
                    temp[temp.length-1] = j%10;
                    j/=10;
                    temp = Arrays.copyOf(temp,temp.length+1);
                }
                li = Arrays.copyOf(li,li.length+temp.length);
                for(int k=temp.length-1;k>=0;k--){
                    li[li.length-1-k] = temp[k];
                }
            }
            if(count==3){
                temp = new int[3];
                int j=i;
                while(j!=0){
                    temp[temp.length-1] = j%10;
                    j/=10;
                    temp = Arrays.copyOf(temp,temp.length+1);
                }
                li = Arrays.copyOf(li,li.length+temp.length);
                for(int k=temp.length-1;k>=0;k--){
                    li[li.length-1-k] = temp[k];
                }
            }
        }
        li = Arrays.copyOf(li,li.length-2);
        System.out.println(li[n-1]);
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int princess = sc.nextInt();
        int dragon = sc.nextInt();
        int t = sc.nextInt();
        int f = sc.nextInt();
        int c = sc.nextInt();
        if (dragon <= princess) {
            System.out.println(0);
            System.exit(0);
        }
        int result = 0;
        int position = t * princess;
        position += princess * position / (dragon - princess);
        while (position < c) {
            result++;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String txt = sc.nextLine();
        int cu = 0, cl = 0;
        for (int i = 0; i < txt.length(); i++) {
            char ch = txt.charAt(i);
            if (Character.isLowerCase(ch)) {
                cl++;
            } else {
                cu++;
            }
        }
        String out;
        if (cu > cl) {
            out = txt.toUpperCase();
        } else {
            out = txt.toLowerCase();
        }
        System.out.println(out);
    }
}
import java.util.Scanner;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int r = 1;
        int[] L = new int[n];
        for (int i = 0; i < n; i++) {
            L[i] = r;
            r += 1;
        }
        int m = sc.nextInt();
        for (int i = 0; i < m; i++) {
            int j = sc.nextInt();
            System.out.println(L[j-1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int total = 0;
            if (a > b) {
                while (a > 0 && b > 0) {
                    total += a / b;
                    a %= b;
                    if (a > 0) {
                        total += b / a;
                        b %= a;
                    }
                }
            } else if (a < b) {
                while (a > 0 && b > 0) {
                    total += b / a;
                    b %= a;
                    if (b > 0) {
                        total += a / b;
                        a %= b;
                    }
                }
            } else {
                total = 1;
            }
            lst[i] = total;
        }
        for (int i = 0; i < n; i++) {
            System.out.println(lst[i]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int ans = 0;
        for (int i = 1; i <= N; i++) {
            ans += i * (N / i) * ((N / i) + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int age = sc.nextInt();
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int a = sc.nextInt();
            int b = sc.nextInt();
            System.out.println(a + b);
        }
    }
}
import java.util.Scanner;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        int ans = n - 1;
        int last = 0;
        for (int i = 0; i < n; i++) {
            ans += Math.abs(last - l[i]) + 1;
            last = l[i];
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int s = sc.nextInt();
        int f = sc.nextInt();
        int d = 1;
        char c = 'R';
        if (s < f) {
            d = -1;
            c = 'L';
        }
        String res = "";
        int i = 1;
        int j = s;
        int t = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int k = 1;
        while (j != f) {
            if (i > t && k < m) {
                t = sc.nextInt();
                l = sc.nextInt();
                r = sc.nextInt();
                k++;
            }
            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res += 'X';
            } else {
                res += c;
                j += d;
            }
            i++;
        }
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            int x = sc.nextInt();
            for (int j = l; j <= r; j++) {
                if (out[j - 1] == 0 && j != x) {
                    out[j - 1] = x;
                }
                comp[j - 1] = Math.max(comp[j - 1], r + 1);
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int tcs = 1;
        int tc = 1;
        while (tc <= tcs) {
            int a = sc.nextInt();
            System.out.println(a == 0 ? 1 : 0);
            tc++;
        }
    }
}
import java.util.*;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int A = sc.nextInt();
        int B = sc.nextInt();
        int mod = 1000000007;
        int ans = 0;
        int rep = N / (A + B);
        ans += rep * A;
        int res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] m = sc.next().split(" ");
        Set<String> set = new HashSet<>(Arrays.asList(m));
        boolean possible = true;
        for (String i : set) {
            if (Collections.frequency(Arrays.asList(m), i) >= n / 2 + 1) {
                possible = false;
                break;
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int h = sc.nextInt();
        int s = sc.nextInt();
        int d = sc.nextInt();
        int n = sc.nextInt();
        int best1L = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.*;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int A = sc.nextInt();
            int idx = binarySearch(ans, A);
            if (idx == ans.size()) {
                ans.add(new ArrayList<>(Arrays.asList(A)));
            } else {
                ans.get(idx).add(A);
            }
        }
        System.out.println(ans.size());
    }

    public static int binarySearch(List<List<Integer>> ans, int key) {
        int bad = -1, good = ans.size();
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (ans.get(mid).get(ans.get(mid).size() - 1) < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h1, m1, h2, m2;
        h1 = sc.nextInt();
        m1 = sc.nextInt();
        m1 += h1 * 60;
        h2 = sc.nextInt();
        m2 = sc.nextInt();
        m2 += h2 * 60;
        m2 = m1 - m2;
        m2 %= 1440;
        System.out.println(String.format("%02d:%02d", m2 / 60, m2 % 60));
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int at = sc.nextInt();
        int b = sc.nextInt();
        int bt = sc.nextInt();
        int t1 = sc.nextInt();
        int t2 = sc.nextInt();
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            if (now + bt > st) {
                ans++;
            }
            now += b;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            String x = sc.next();
            int a = 0, b = 0;
            for (int j = 0; j < s.length(); j++) {
                if (s.charAt(j) == x.charAt(0)) {
                    a++;
                } else if (s.charAt(j) == x.charAt(1)) {
                    b++;
                } else {
                    ans += Math.min(a, b);
                    a = 0;
                    b = 0;
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            if (a < 2) {
                System.out.println(0);
            } else {
                System.out.println(a - 2);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int num = sc.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < n; i++) {
            numSet.add(sc.nextInt());
        }
        Set<Integer> twoTimesSet = new HashSet<>();
        for (int num1 : numSet) {
            for (int i = 1; i < 30; i++) {
                num1 /= 2;
                if (num1 % 2 != 0) {
                    twoTimesSet.add(i);
                    break;
                }
            }
            if (twoTimesSet.size() != 1) {
                System.out.println(0);
                return;
            }
        }
        List<Integer> numList = new ArrayList<>(numSet);
        int lcm = numList.get(0);
        for (int i = 1; i < numList.size(); i++) {
            lcm = lcm * numList.get(i) / gcd(lcm, numList.get(i));
        }
        System.out.println((num - lcm / 2) / lcm + 1);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.*;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (true) {
            try {
                int n = sc.nextInt();
                int m = sc.nextInt();
                if (n == 0 && m == 0) {
                    break;
                }
                Map<Integer, Set<Integer>> g = new HashMap<>();
                for (int i = 1; i <= n; i++) {
                    g.put(i, new HashSet<>());
                }
                for (int i = 0; i < m; i++) {
                    int a = sc.nextInt();
                    int b = sc.nextInt();
                    g.get(a).add(b);
                    g.get(b).add(a);
                }
                int ans = 0;
                for (int i = 1; i <= n; i++) {
                    Set<Integer> seen = new HashSet<>();
                    if (dfs(g, seen, i, 0, 0)) {
                        ans++;
                    }
                }
                if ((n - ans) % 2 == 1) {
                    ans++;
                }
                System.out.println(ans);
            } catch (Exception e) {
                break;
            }
        }
    }

    public static boolean dfs(Map<Integer, Set<Integer>> g, Set<Integer> seen, int i, int nodes, int edges) {
        if (seen.contains(i)) {
            return false;
        }
        seen.add(i);
        nodes++;
        edges += g.get(i).size();
        for (int j : g.get(i)) {
            if (dfs(g, seen, j, nodes, edges)) {
                return true;
            }
        }
        if (nodes > 1 && nodes % 2 == 1 && 2 * nodes == edges) {
            return true;
        }
        return false;
    }
}
import java.util.Scanner;

public class atcoder_ABC149_B {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        long[] cookies = new long[3];
        for (int i = 0; i < 3; i++) {
            cookies[i] = input.nextLong();
        }
        long leftOver = cookies[0] - cookies[2];
        long takahashi = Math.max(0, leftOver);
        System.out.println(takahashi + " " + (cookies[1] > 0 ? cookies[1] : Math.max(0, cookies[1] - Math.abs(leftOver))));
    }
}
import java.util.*;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = i + 1;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }
}
public class codeforces_583_B {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int[] a = new int[n];
        String[] input = args[1].split(" ");
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(input[i]);
        }
        int current_level = 0;
        int counter = 0;
        int counter_turns = -1;
        while (counter < n) {
            counter_turns++;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1 && a[i] <= counter) {
                    counter++;
                    a[i] = -1;
                }
            }
            reverse(a, 0, n - 1);
        }
        System.out.println(counter_turns);
    }

    public static void reverse(int[] a, int start, int end) {
        while (start < end) {
            int temp = a[start];
            a[start] = a[end];
            a[end] = temp;
            start++;
            end--;
        }
    }
}
import java.util.*;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[1000010];
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            l[a] = b;
        }
        if (l[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        for (int i = 1; i < 1000010; i++) {
            if (l[i] == 0) {
                dp[i] = dp[i - 1];
            } else {
                if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
            }
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }
        System.out.println(n - mx);
    }
}
import java.util.*;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        if (sum(a) % (n * (n + 1) / 2)) {
            System.out.println("NO");
        } else {
            int k = sum(a) / (n * (n + 1) / 2);
            int[] b = new int[n + 1];
            for (int i = 0; i < n; i++) {
                b[i + 1] = (k - a[i] + a[i + 1]) % n;
            }
            if (sum(b) != 0 || sum(a) != n * (n + 1) / 2 * k) {
                System.out.println("NO");
            } else {
                System.out.println("YES");
            }
        }
    }

    public static int sum(int[] a) {
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        if (n < 1) {
            if (m < 1) {
                System.out.println(n + " " + m);
                return;
            }
            System.out.println("Impossible");
            return;
        }
        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        } else {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] roundComplexity = new int[n];
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = sc.nextInt();
        }
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = sc.nextInt();
        }
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            i += 1 * (roundComplexity[i] <= georgeComplexity[j]);
            j++;
        }
        System.out.println(n - i);
    }
}
import java.util.PriorityQueue;
import java.util.Scanner;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        PriorityQueue<Integer> x = new PriorityQueue<>((a, b) -> b - a);
        PriorityQueue<Integer> y = new PriorityQueue<>((a, b) -> b - a);
        for (int i = 0; i < n; i++) {
            int day = sc.nextInt();
            int salary = sc.nextInt();
            x.offer(-day * -salary);
        }
        while (!x.isEmpty()) {
            int d = -x.peek() / -salary;
            int s = -x.poll();
            int r = m - y.size();
            if (r >= d) {
                y.offer(-s);
            } else {
                y.offer(-s);
                y.poll();
            }
        }
        int sum = 0;
        while (!y.isEmpty()) {
            sum += -y.poll();
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC120_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        if (new HashSet<>(s.toCharArray()).size() == 1) {
            System.out.println(0);
            return;
        }
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        int ans = Integer.MAX_VALUE;
        for (int val : map.values()) {
            ans = Math.min(ans, val * 2);
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_397_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            int k = sc.nextInt();
            int m = sc.nextInt();
            int[] arr = new int[n];
            for (int j = 0; j < n; j++) {
                arr[j] = sc.nextInt();
            }
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (arr[j] >= k * m) {
                    count++;
                }
            }
            if (count >= n) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K, N;
        K = sc.nextInt();
        N = sc.nextInt();
        int mod = 998244353;
        int[] g1 = new int[8000];
        int[] g2 = new int[8000];
        int[] inverse = new int[8000];
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[0] = 0;
        inverse[1] = 1;
        for (int i = 2; i < 8000; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (inverse[mod % i] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i - 1]) % mod;
        }
        int[][] dp = new int[K + 1][K + 1];
        for (int i = 0; i <= K; i++) {
            dp[i][0] = 1;
        }
        for (int i = 1; i <= K; i++) {
            for (int j = 1; j <= i; j++) {
                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % mod;
            }
        }
        int[][] dp2 = new int[K + 1][K + 1];
        for (int i = 0; i <= K; i++) {
            dp2[i][0] = 1;
        }
        for (int i = 1; i <= K; i++) {
            for (int j = 1; j <= i; j++) {
                dp2[i][j] = (dp2[i - 1][j] + dp2[i - 1][j - 1]) % mod;
            }
        }
        int ans = 0;
        for (int i = 1; i <= K; i++) {
            int kumi = (i - 1) / 2;
            int p = kumi;
            while (p <= N) {
                int q = i - p;
                if (q > N) {
                    break;
                }
                int cnt = dp[kumi][p];
                if (i % 2 == 0) {
                    cnt += dp[kumi][p - 1];
                }
                ans = (ans + cnt * cmb(kumi, p, mod) * kumiawase(N - p, p + (K - kumi * 2 - (i % 2 == 0))) % mod) % mod;
                if (i % 2 == 0 && N - p - 1 >= 0) {
                    ans = (ans + cnt * cmb(kumi, p, mod) * kumiawase(N - p - 1, p + (K - kumi * 2 - (i % 2 == 0))) % mod) % mod;
                }
                p++;
            }
        }
        System.out.println(ans);
    }

    public static int cmb(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] % mod * g2[n - r] % mod;
    }

    public static int kumiawase(int p, int q) {
        return cmb(p + q - 1, q - 1, mod);
    }
}
import java.util.*;

public class atcoder_ABC148_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int ta = sc.nextInt() - 1;
        int ao = sc.nextInt() - 1;
        int[][] g = new int[n][n];
        for (int i = 0; i < n - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            g[a][b] = 1;
            g[b][a] = 1;
        }
        int[] ta_dist = new int[n];
        Arrays.fill(ta_dist, -1);
        int[] ao_dist = new int[n];
        Arrays.fill(ao_dist, -1);
        ta_dist[ta] = 0;
        ao_dist[ao] = 0;
        dfs(g, ta, ta_dist);
        dfs(g, ao, ao_dist);
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (ta_dist[i] > ao_dist[i]) continue;
            res = Math.max(res, ao_dist[i]);
        }
        System.out.println(res - 1);
    }

    public static void dfs(int[][] g, int s, int[] dist) {
        Stack<Integer> stack = new Stack<>();
        stack.push(s);
        while (!stack.isEmpty()) {
            int u = stack.pop();
            for (int v = 0; v < g.length; v++) {
                if (g[u][v] == 1 && dist[v] == -1) {
                    dist[v] = dist[u] + 1;
                    stack.push(v);
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] A = new int[4];
        for (int i = 0; i < 4; i++) {
            A[i] = sc.nextInt();
        }
        if (A[1] <= A[2] || A[3] <= A[0]) {
            System.out.println(0);
        } else {
            int[] sortedA = new int[4];
            for (int i = 0; i < 4; i++) {
                sortedA[i] = A[i];
            }
            for (int i = 0; i < 3; i++) {
                for (int j = i + 1; j < 4; j++) {
                    if (sortedA[i] > sortedA[j]) {
                        int temp = sortedA[i];
                        sortedA[i] = sortedA[j];
                        sortedA[j] = temp;
                    }
                }
            }
            System.out.println(sortedA[2] - sortedA[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }
        int a = 1;
        int pos = 0;
        for (int i = 1; i < N; i++) {
            if (n[pos] > n[i]) {
                a++;
                pos = i;
            }
        }
        System.out.println(a);
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a.add(x[i]);
            } else {
                b.add(x[i]);
            }
        }
        int[] cnta = new int[100002];
        int[] cntb = new int[100002];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i : a) {
            cnta[i]++;
        }
        for (int i : a) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        for (int i : a) {
            if (maxCnta1 < cnta[i] && vala != i) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i : b) {
            cntb[i]++;
        }
        for (int i : b) {
            if (maxCntb < cntb[i]) {
                valb = i;
                maxCntb = cntb[i];
            }
        }
        for (int i : b) {
            if (maxCntb1 < cntb[i] && valb != i) {
                maxCntb1 = cntb[i];
                valb1 = i;
            }
        }
        if (valb != vala) {
            int res = 0;
            for (int i : a) {
                if (i != vala) {
                    res++;
                }
            }
            for (int i : b) {
                if (i != valb) {
                    res++;
                }
            }
            System.out.println(res);
        } else {
            int resa = 0;
            int resb = 0;
            int resa1 = 0;
            int resb1 = 0;
            for (int i : a) {
                if (i != vala) {
                    resa++;
                }
                if (i != vala1) {
                    resa1++;
                }
            }
            for (int i : b) {
                if (i != valb) {
                    resb++;
                }
                if (i != valb1) {
                    resb1++;
                }
            }
            System.out.println(Math.min(resa + resb1, resa1 + resb));
        }
    }
}
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[][] q = new String[n][2];
        int count = 0;
        for (int i = 0; i < n; i++) {
            String[] a = sc.next().split(" ");
            q[i][0] = a[0];
            q[i][1] = a[1];
        }
        for (int j = 0; j < n; j++) {
            for (int k = j + 1; k < n; k++) {
                if (q[j][0].equals(q[k][1])) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int max_val = Math.max(x + y - 3 + (y - x) % 3, 0);
        System.out.println(max_val);
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[num];
        Set<Integer> different = new HashSet<>();
        int temp = 0;
        for (int i = 0; i < num; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        for (int x : arr) {
            if (x % k != 0 || !different.contains(x / k)) {
                different.add(x);
            }
            temp = Math.max(temp, different.size());
        }
        System.out.println(temp);
    }
}
import java.util.Scanner;

public class codeforces_306_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int q = n / m;
        int r = n % m;
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = q;
        }
        for (int i = 0; i < r; i++) {
            a[i]++;
        }
        for (int i = 0; i < m; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        Set<Integer> c = new HashSet<>();
        for (int i = 0; i < n; i++) {
            String s = sc.next();
            int indexS = s.indexOf("S");
            int indexG = s.indexOf("G");
            if (indexS != -1 && indexG != -1) {
                c.add(indexS - indexG);
            }
        }
        System.out.println(c.isEmpty() ? -1 : c.size());
    }
}
import java.util.Scanner;

public class codeforces_327_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next().replace("", "");
        if (!s.contains("0")) {
            System.out.println(n - 1);
        } else {
            int[] indices = new int[s.length()];
            for (int i = 0; i < s.length(); i++) {
                indices[i] = i;
            }
            int maximum = 0;
            for (int i = 0; i < indices.length; i++) {
                for (int j = i + 1; j < indices.length; j++) {
                    int diff = Math.abs(indices[i] - indices[j]);
                    int count = 2 + 2 * (diff - 1) - (j - i - 1);
                    maximum = Math.max(maximum, count);
                }
            }
            System.out.println(s.replaceAll("0", "").length() + maximum);
        }
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                System.out.println(arr[i + 1] - arr[i] + " " + (arr[n - 1] - arr[i]));
                continue;
            }
            if (i == n - 1) {
                System.out.println((arr[n - 1] - arr[n - 2]) + " " + (arr[n - 1] - arr[0]));
                continue;
            }
            if (arr[i] - arr[i - 1] > arr[i + 1] - arr[i]) {
                System.out.print(arr[i + 1] - arr[i] + " ");
            } else {
                System.out.print(arr[i] - arr[i - 1] + " ");
            }
            if (arr[n - 1] - arr[i] > arr[i] - arr[0]) {
                System.out.println(arr[n - 1] - arr[i]);
            } else {
                System.out.println(arr[i] - arr[0]);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        Map<String, Integer> s = new HashMap<>();
        List<String> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(sc.nextLine());
        }
        String f = "Yes";
        char prev = ' ';
        for (String v : l) {
            s.put(v, s.getOrDefault(v, 0) + 1);
            if (s.get(v) >= 2) {
                f = "No";
            }
            if (prev != ' ' && prev != v.charAt(0)) {
                f = "No";
            }
            prev = v.charAt(0);
        }
        System.out.println(f);
    }
}
import java.util.Scanner;

public class codeforces_579_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = 1;
        while (Math.log(n) / Math.log(2) % 1 != 0) {
            x++;
            n -= (int) Math.pow(2, Math.floor(Math.log(n) / Math.log(2)));
        }
        System.out.println(x);
    }
}
import java.util.*;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int length = sc.nextInt();
        int[] arr = new int[4];
        for(int i=0;i<4;i++){
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int ans = 0;
        if(arr[0] == arr[1]){
            int k = 0;
            for(int i=0;i<=length/arr[2];i++){
                int check = length - i*arr[2];
                if(check >= 0 && check%arr[0] == 0){
                    k = check/arr[0];
                    ans = Math.max(ans, k+i);
                }
            }
        }
        else{
            int k = 0;
            for(int i=0;i<=length/arr[2];i++){
                for(int j=0;j<=length/arr[1];j++){
                    int check = length - i*arr[2] - j*arr[1];
                    if(check >= 0 && check%arr[0] == 0){
                        k = check/arr[0];
                        ans = Math.max(ans, k+i+j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        String S = sc.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
            System.out.println(S.replaceAll("(.{1," + N + "})", "$1\n"));
public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        boolean allSame = true;
        for (int i = 1; i < n; i++) {
            if (arr[i] != arr[0]) {
                allSame = false;
                break;
            }
        }
        if (allSame) {
            System.out.println(0);
            return;
        }
        if (k == 1) {
            System.out.println(-1);
            return;
        }
        if (arr[k-1] != arr[0]) {
            System.out.println(-1);
            return;
        }
        int target = arr[n-1];
        List<Integer> toDelete = new ArrayList<>();
        for (int i = 0; i < k-1; i++) {
            toDelete.add(arr[i]);
        }
        while (toDelete.size() > 0 && toDelete.get(toDelete.size()-1) == target) {
            toDelete.remove(toDelete.size()-1);
        }
        System.out.println(toDelete.size());
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int Q = sc.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = sc.nextInt();
            b[i] = sc.nextInt();
            c[i] = sc.nextInt();
            d[i] = sc.nextInt();
        }
        solve(N, M, Q, a, b, c, d);
    }

    public static void solve(int N, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;
        int[] dp = new int[M + 1];
        Arrays.fill(dp, 1);
        for (int i = 0; i < Q; i++) {
            dp[a[i] - 1] = Math.max(dp[a[i] - 1], c[i]);
            dp[b[i] - 1] = Math.max(dp[b[i] - 1], c[i]);
        }
        for (int i = 1; i <= M; i++) {
            dp[i] = Math.max(dp[i], dp[i - 1]);
        }
        for (int i = 0; i < Q; i++) {
            if (dp[b[i] - 1] - dp[a[i] - 1] == c[i]) {
                res += d[i];
            }
        }
        System.out.println(res);
    }
}
import java.util.*;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        for (int k = 0; k < m; k++) {
            int x = sc.nextInt() - 1;
            int y = sc.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = sc.nextInt();
        }
        editorial(N, P);
    }

    public static void editorial(int N, int[] P) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] a = new int[N + 1];
        for (int i = 0; i < N; i++) {
            a[P[i]] = i;
        }
        int tmp = 1;
        int max_len = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp++;
                max_len = Math.max(max_len, tmp);
            } else {
                tmp = 1;
            }
        }
        int ans = N - max_len;
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        List<List<String>> t = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            List<String> l = new ArrayList<>();
            String line = sc.nextLine();
            for (int j = 0; j < line.length(); j++) {
                l.add(line.charAt(j) + "");
            }
            t.add(l);
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t.get(i).get(j).equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t.get(i).get(j + 1).equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t.get(i + 1).get(j).equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t.get(i + 1).get(j + 1).equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
            if (correct == 1) {
                break;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(sc.nextInt());
        }
        int high = 1;
        int tower = n;
        int maximum = 1;
        Collections.sort(l);
        for (int i = 1; i < n; i++) {
            if (l.get(i) == l.get(i - 1)) {
                tower--;
                high++;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}
import java.util.*;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        sc.close();

        if (X == 1 || X == N * 2 - 1) {
            System.out.println("No");
            return;
        }

        System.out.println("Yes");

        if (X == N * 2 - 2) {
            int[] xs = new int[N];
            for (int i = 0; i < N; i++) {
                xs[i] = i + 1;
            }
            xs[N - 1] = X;
            for (int i = 0; i < N - 1; i++) {
                System.out.println(xs[i]);
            }
            System.out.println(X);
        } else {
            int[] xs = new int[N];
            for (int i = 0; i < N; i++) {
                xs[i] = i + 1;
            }
            xs[N - 1] = X;
            xs[N - 2] = X - 1;
            xs[N - 3] = X + 1;
            for (int i = 0; i < N; i++) {
                System.out.println(xs[i]);
            }
        }
    }
}
import java.util.*;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] p = new int[n];
        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextInt();
            s[i] = sc.next();
        }
        int result = Bob_sMaxStrength(p, s);
        System.out.println(result);
    }

    public static int Bob_sMaxStrength(int[] p, String[] s) {
        int pScore = 0, sScore = 0, pMaxScore = 0, sMaxScore = 0;
        for (int i = 0; i < p.length; i++) {
            if (s[i].equals("B")) {
                pScore += p[i];
            }
        }
        pMaxScore = pScore;
        for (int i = 0; i < p.length; i++) {
            if (s[i].equals("A")) {
                pScore += p[i];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            } else {
                pScore -= p[i];
            }
        }
        sMaxScore = pMaxScore;
        for (int i = p.length - 1; i >= 0; i--) {
            if (s[i].equals("A")) {
                sScore += p[i];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= p[i];
            }
        }
        return Math.max(pMaxScore, sMaxScore);
    }
}
public class codeforces_110_B {
    public static void main(String[] args) {
        String LUCKY = "abcd";
        int n = Integer.parseInt(args[0]);
        String s = "";
        for (int i = 0; i < n; i++) {
            s += LUCKY.charAt(i % 4);
        }
        System.out.println(s);
    }
}
import java.util.*;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        List<Integer> d = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if ((x - w[i]) * (n - 1) == w[i] * x) {
                d.add(i + 1);
            }
        }
        System.out.println(d.size());
        System.out.println(Arrays.toString(d.toArray()));
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += "A";
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        t += "D";
                        i += 2;
                    } else {
                        t += "X";
                        i++;
                    }
                } else {
                    t += "X";
                    i++;
                }
            } else {
                t += "X";
                i++;
            }
        }
        int total = 0;
        int numA = 0;
        for (int j = 0; j < t.length(); j++) {
            if (t.charAt(j) == 'X') {
                numA = 0;
            } else {
                if (t.charAt(j) == 'A') {
                    numA++;
                } else {
                    total += numA;
                }
            }
        }
        System.out.println(total);
    }
}
import java.util.*;

public class atcoder_ABC110_C {
    public static String run(String s, String t) {
        List<Integer> ss = new ArrayList<>(Collections.frequency(Arrays.asList(s.toCharArray()), 'c'));
        List<Integer> tt = new ArrayList<>(Collections.frequency(Arrays.asList(t.toCharArray()), 'c'));
        Collections.sort(ss);
        Collections.sort(tt);
        if (ss.equals(tt)) {
            return "Yes";
        } else {
            return "No";
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        System.out.println(run(s, t));
    }
}
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] menu = new int[n];
        for (int i = 0; i < n; i++) {
            int m = sc.nextInt();
            int e = m % 10;
            if (e == 0) {
                e = 10;
            }
            menu[i] = m * e;
        }
        int ans = 0;
        for (int i = 1; i < n; i++) {
            ans += menu[i] / 10 + 1;
        }
        ans += menu[0] / 10;
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] a = {"10", "100", "1000", "10000", "100000"};
        int new = 0;
        for (int i = 0; i < n.length(); i++) {
            new += Integer.parseInt(n.charAt(i) + "");
        }
        if (Arrays.asList(a).contains(n)) {
            System.out.println(10);
        } else {
            System.out.println(new);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] p = sc.nextLine().split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);
        int DIF1 = x2 - x1;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }
}
import java.util.*;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = sc.nextInt();
        }
        int total = Arrays.stream(a).reduce(0, (x, y) -> x ^ y);
        String[] result = Arrays.stream(a).mapToObj(x -> Integer.toString(x ^ total)).toArray(String[]::new);
        System.out.println(String.join(" ", result));
    }
}
import java.util.*;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine();
        List<String[]> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String s = sc.nextLine();
            char[] arr = s.toCharArray();
            for (int j = 0; j < m; j++) {
                if (arr[j] == '.') {
                    if ((i + j) % 2 == 1) {
                        arr[j] = 'W';
                    } else {
                        arr[j] = 'B';
                    }
                }
            }
            l.add(arr);
        }
        for (String[] c : l) {
            System.out.println(String.join("", c));
        }
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if (left <= i && i < right) {
                    tmp--;
                }
                if (left <= j && j < right) {
                    tmp--;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
public class codeforces_30_A {
    public static void main(String[] args) {
        String[] input = "1 -1 5".split(" ");
        int A = Integer.parseInt(input[0]);
        int B = Integer.parseInt(input[1]);
        int n = Integer.parseInt(input[2]);
        int result = task4(A, B, n);
        System.out.println(result);
    }

    public static int task4(int A, int B, int n) {
        for (int X = -1000; X <= 1000; X++) {
            if (A * Math.pow(X, n) == B) {
                return X;
            }
        }
        return -1;
    }
}
import java.util.*;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<Integer> A = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            A.add(i+1);
            A.add(sc.nextInt());
        }
        Collections.sort(A, new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2 - o1;
            }
        });
        for (int i = 0; i < N-1; i++) {
            System.out.print(A.get(i) + " ");
        }
        System.out.println(A.get(N-1));
    }
}
import java.util.*;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int sum = 0;
        for(int i=0;i<k;i++){
            sum += arr[i];
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] d = new int[n + 1];
        for (int i = 0; i < n + 1; i++) {
            d[i] = i;
        }
        Arrays.sort(a);
        for (int i = 0; i < n; i++) {
            a[i] = Arrays.binarySearch(d, a[i]);
        }
        int l = 0, r = n * (n + 1) / 2;
        while (l < r) {
            int mid = (l + r) / 2;
            if (check(mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        System.out.println(d[l]);
    }

    public static boolean check(int X) {
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            b[a[i] + 1]++;
        }
        for (int i = 1; i <= n; i++) {
            b[i] += b[i - 1];
        }
        int c = b[0];
        for (int i = 0; i <= n; i++) {
            b[i] -= c;
        }
        int[] bit = new int[n + 1];
        int ans = 0;
        for (int x : b) {
            ans += bitsum(bit, x + 1);
            bitadd(bit, x, 1);
        }
        return ans >= m;
    }

    public static int bitsum(int[] bit, int i) {
        int ret = 0;
        while (i > 0) {
            ret += bit[i];
            i -= i & -i;
        }
        return ret;
    }

    public static void bitadd(int[] bit, int i, int x) {
        i++;
        while (i <= n) {
            bit[i] += x;
            i += i & -i;
        }
    }
}
import java.util.*;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<List<Integer>> input_array = new ArrayList<List<Integer>>();
        for (int i = 0; i < n; i++) {
            List<Integer> item = new ArrayList<Integer>();
            item.add(sc.nextInt());
            item.add(sc.nextInt());
            item.add(sc.nextInt());
            item.add(sc.nextInt());
            input_array.add(item);
        }
        List<List<Integer>> outdated = new ArrayList<List<Integer>>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (input_array.get(i).get(0) < input_array.get(j).get(0) && input_array.get(i).get(1) < input_array.get(j).get(1) && input_array.get(i).get(2) < input_array.get(j).get(2)) {
                    outdated.add(input_array.get(i));
                }
            }
        }
        Set<List<Integer>> outdated_set = new HashSet<List<Integer>>(outdated);
        int minimum_cost = 100000;
        int input_number = 0;
        for (int i = 0; i < n; i++) {
            List<Integer> current_item = input_array.get(i);
            int cost = current_item.get(3);
            if (!outdated_set.contains(current_item) && cost < minimum_cost) {
                minimum_cost = cost;
                input_number = i + 1;
            }
        }
        System.out.println(input_number);
    }
}
import java.util.*;
public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        if(a > 0){
            System.out.println("Positive");
        }else if(a <= 0 && b >= 0){
            System.out.println("Zero");
        }else{
            if((a + b) % 2 == 0){
                System.out.println("Negative");
            }else{
                System.out.println("Positive");
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int N = input.nextInt();
        int K = input.nextInt();
        String S = input.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int cur_happy = N - 1 - seg_cnt;
        if (2 * K >= seg_cnt) {
            System.out.println(N - 1);
        } else {
            System.out.println(cur_happy + 2 * K);
        }
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int x = sc.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = sc.nextInt();
            }
        }
        int[] pre = new int[n];
        for (int i = 0; i < n; i++) {
            pre[i] = i;
        }
        List<int[]> l = new ArrayList<>();
        List<int[]> rem = new ArrayList<>();
        int ans = 0;
        for (int i = 1; i <= m; i++) {
            for (int[] j : l) {
                int ca = 0;
                for (int k : j) {
                    ca += c[k][i];
                }
                if (ca < x) {
                    rem.add(j);
                }
            }
            for (int[] j : rem) {
                l.remove(j);
            }
            rem.clear();
            if (l.isEmpty()) {
                System.out.println(-1);
                return;
            }
            for (int[] j : l) {
                int ca = 0;
                for (int k : j) {
                    ca += c[k][0];
                }
                if (ans == 0) {
                    ans = ca;
                } else {
                    ans = Math.min(ans, ca);
                }
            }
            l.clear();
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int ans = A - 2 * B;
        if (ans < 0) {
            ans = 0;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            if (hole >= b) {
                check = false;
            } else {
                hole = a * (i + 1) - i;
                i++;
            }
        }
        System.out.println(i);
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = 0;
        for (int i = 2; i >= 0; i--) {
            c += Math.max(a, b);
            if (a >= b) {
                a--;
            } else {
                b--;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] list = new int[n];
        for (int i = 0; i < n; i++) {
            list[i] = sc.nextInt() % 2;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += list[i];
        }
        if (sum == 1) {
            System.out.println(findFirst(list, 1) + 1);
        } else {
            System.out.println(findFirst(list, 0) + 1);
        }
    }

    public static int findFirst(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;
            }
        }
        return -1;
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int total = 0;
        StringBuilder memory = new StringBuilder();
        for (int i = 0; i < n; i++) {
            int A = sc.nextInt();
            int G = sc.nextInt();
            if (total + A <= 500) {
                total += A;
                memory.append("A");
            } else {
                total -= G;
                memory.append("G");
            }
        }
        System.out.println(memory.toString());
    }
}
import java.util.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        double b = sc.nextDouble();
        int ans = (int) Math.round(a * b);
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] t = new int[n+1];
        t[0] = 0;
        for(int i=1;i<=n;i++){
            t[i] = sc.nextInt();
        }
        int[] a = new int[n+1];
        a[0] = 0;
        for(int i=1;i<=n;i++){
            a[i] = sc.nextInt();
        }
        int[] cnt = new int[n+1];
        for(int i=1;i<=n;i++){
            cnt[a[i]]++;
        }
        int[] ans = new int[n+1];
        for(int i=1;i<=n;i++){
            if(t[i]==1){
                int x = a[i];
                int[] crt = new int[n+1];
                crt[0] = i;
                int j=1;
                while(cnt[x]==1){
                    crt[j] = x;
                    j++;
                    x = a[x];
                }
                if(j>ans.length){
                    ans = Arrays.copyOf(crt,j);
                }else{
                    for(int k=0;k<j;k++){
                        ans[k] = crt[k];
                    }
                }
            }
        }
        System.out.println(ans.length);
        for(int i=0;i<ans.length;i++){
            System.out.print(ans[i]+" ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC142_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int t = 0;
        for (int i = 0; i < n; i++) {
            if ((i + 1) % 2 == 1) {
                t++;
            }
        }
        System.out.println(t / (double) n);
    }
}
import java.util.*;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        boolean[] b = new boolean[n * 2];
        Arrays.fill(b, true);
        b[0] = b[n-1] = b[n] = b[2*n-1] = false;
        for(int i=0;i<m;i++){
            int r = sc.nextInt();
            int c = sc.nextInt();
            b[r-1] = b[n+c-1] = false;
        }
        if(n%2==1 && b[n/2] && b[n+n/2]){
            b[n/2] = false;
        }
        int count = 0;
        for(boolean x:b){
            if(x) count++;
        }
        System.out.println(count);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] p = new int[n];
        int[] h = new int[n];
        for (int i = 1; i <= n; i++) {
            p[i - 1] = i;
            h[i - 1] = sc.nextInt();
        }
        Map<Integer, Integer> hp = new HashMap<>();
        for (int i = 0; i < n; i++) {
            hp.put(p[i], h[i]);
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            if (!path.containsKey(a)) {
                path.put(a, new ArrayList<>());
            }
            if (!path.containsKey(b)) {
                path.put(b, new ArrayList<>());
            }
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        for (int i = 1; i <= n; i++) {
            boolean f = false;
            for (int j : path.get(i)) {
                if (hp.get(i) <= hp.get(j)) {
                    f = true;
                    break;
                }
            }
            if (!f) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = 0;
        while (x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2) {
            if (a == 1) {
                if (y >= 22) {
                    y -= 22;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    x -= 2;
                    y -= 2;
                }
            } else {
                if (x >= 2 && y >= 2) {
                    x -= 2;
                    y -= 2;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    y -= 22;
                }
            }
            a = 1 - a;
        }
        System.out.println(a == 1 ? "Ciel" : "Hanako");
    }
}
import java.util.*;

public class atcoder_AGC004_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] aaa = new int[n];
        for (int i = 0; i < n; i++) {
            aaa[i] = sc.nextInt() - 1;
        }
        int[][] links = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                links[i][j] = 0;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (aaa[i] == j) {
                    links[i][j] = 1;
                }
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            int[] height_from_leaf = new int[n];
            Arrays.fill(height_from_leaf, -1);
            int[] cut_count = new int[n];
            Arrays.fill(cut_count, -1);
            int[] visited = new int[n];
            Arrays.fill(visited, -1);
            int[] parent = new int[n];
            Arrays.fill(parent, -1);
            int hgt = dfs(links, n, k, i, height_from_leaf, cut_count, visited, parent);
            if (hgt == k) {
                ans++;
            }
        }
        if (aaa[0] != 0) {
            ans++;
        }
        System.out.println(ans);
    }

    public static int dfs(int[][] links, int n, int k, int v, int[] height_from_leaf, int[] cut_count, int[] visited, int[] parent) {
        if (visited[v] == 1) {
            return height_from_leaf[v];
        }
        visited[v] = 1;
        int height = 0;
        for (int u = 0; u < n; u++) {
            if (links[v][u] == 1 && u != parent[v]) {
                parent[u] = v;
                int hgt = dfs(links, n, k, u, height_from_leaf, cut_count, visited, parent);
                height = Math.max(height, hgt);
                if (height_from_leaf[u] == k - 1) {
                    cut_count[v]++;
                }
            }
        }
        height++;
        if (parent[v] != -1 && height == k) {
            height = 0;
            cut_count[v]++;
        }
        height_from_leaf[v] = height;
        return height;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();
        int t = 0;
        for (int i = 1; i <= k; i++) {
            t = (t % k) * 10 + 7;
            if (t % k == 0) {
                System.out.println(i);
                break;
            }
        }
        if (t % k != 0) {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = sc.nextInt();
        }
        int m = 0;
        for (int j = 0; j < n; j++) {
            for (int p = 0; p < n; p++) {
                if (M[p] == 0) {
                    System.out.print(p + 1 + " ");
                    break;
                }
            }
            for (int l = p + 1 - k; l < p; l++) {
                M[l]--;
            }
            M[p]--;
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int h = sc.nextInt();
        int m = sc.nextInt();
        double C = Math.abs(360.0 / 60.0 * m - 360.0 / 12.0 * h - 360.0 / 12.0 / 60.0 * m);
        if (C > 180) {
            C = 360 - C;
        }
        double cosC = Math.cos(Math.toRadians(C));
        double distance = Math.sqrt(a * a + b * b - 2 * a * b * cosC);
        System.out.println(distance);
    }
}
import java.util.*;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int QR = sc.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = sc.nextInt();
        }
        int[] sum_el = new int[n + 1];
        sum_el[0] = 0;
        for (int i = 1; i <= n; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (n - 1) + sum_el[n] * R;
        for (int i = 1; i <= n; i++) {
            int energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
            if (i > (n - i)) {
                energy += (i - (n - i) - 1) * QL;
            } else if ((n - i) > i) {
                energy += ((n - i) - i - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        String vo = "aeiouyAEIOUY";
        for (int i = a.length() - 1; i >= 0; i--) {
            if (a.charAt(i) == ' ' || a.charAt(i) == '?') {
                continue;
            } else {
                if (vo.indexOf(a.charAt(i)) != -1) {
                    System.out.println("YES");
                    break;
                } else {
                    System.out.println("NO");
                    break;
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        String S = sc.next();
        if (S.length() <= K) {
            System.out.println(S);
        } else {
            System.out.println(S.substring(0, K) + "...");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int X = sc.nextInt();
        boolean[] prime = new boolean[100010];
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            prime[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            if (prime[i]) {
                for (int j = i + i; j < 100008; j += i) {
                    prime[j] = false;
                }
            }
            i += 2;
        }
        for (i = X; i < 100008; i++) {
            if (prime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.*;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int sa = 0;
        for(int i=0;i<n;i++){
            if(sc.next().equals("-")) sa++;
        }
        sa = Math.min(n-sa,sa);
        String[] ss = new String[m];
        for(int i=0;i<m;i++){
            int a = sc.nextInt();
            int b = sc.nextInt();
            b -= a;
            if(b%2==0 || b>sa*2) ss[i] = "0\n";
            else ss[i] = "1\n";
        }
        System.out.print(String.join("",ss));
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = n; i >= 1; i--) {
            if (n % i == 0) {
                System.out.print(i + " ");
                n = i;
            }
        }
    }
}
import java.util.*;
public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        String S = sc.next();
        String T = sc.next();
        List<Integer> list_S = new ArrayList<Integer>();
        List<Integer> list_T = new ArrayList<Integer>();
        for(int i=0;i<S.length();i++){
            list_S.add(S.charAt(i)-'a');
        }
        for(int i=0;i<T.length();i++){
            list_T.add(T.charAt(i)-'a');
        }
        List<Integer> Number_i = new ArrayList<Integer>();
        for(int i=0;i<N;i++){
            Number_i.add(i);
        }
        List<Integer> Number_iMN = new ArrayList<Integer>();
        for(int i=0;i<N;i++){
            Number_iMN.add(i*M/N);
        }
        List<Integer> Number_j = new ArrayList<Integer>();
        for(int j=0;j<M;j++){
            Number_j.add(j);
        }
        List<Integer> Kaburi_j = new ArrayList<Integer>();
        for(int j=0;j<M;j++){
            if(Number_iMN.contains(j)){
                Kaburi_j.add(j);
            }
        }
        List<Integer> Kaburi_i = new ArrayList<Integer>();
        for(int j=0;j<Kaburi_j.size();j++){
            Kaburi_i.add(Kaburi_j.get(j)*N/M);
        }
        int counter = 0;
        int Flag = 0;
        int Kaburi_Size = Kaburi_i.size();
        while(counter<=Kaburi_Size-1){
            if(list_S.get(Kaburi_i.get(counter))==list_T.get(Kaburi_j.get(counter))){
                counter++;
            }
            else{
                Flag = 1;
                break;
            }
        }
        if(Flag==1){
            System.out.println("-1");
        }
        else{
            System.out.println(N*M/gcd(N,M));
        }
    }
    public static int gcd(int a,int b){
        if(b==0){
            return a;
        }
        else{
            return gcd(b,a%b);
        }
    }
}
import java.util.*;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<Integer> A = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            A.add(sc.nextInt());
        }
        int mn = N + 1, mx = -1;
        for (int i = 0; i < N; i++) {
            if (i + 1 != A.get(i)) {
                mn = Math.min(mn, i);
                mx = Math.max(mx, i);
            }
        }
        if (mx == -1) {
            System.out.println("0 0");
        } else {
            List<Integer> B = new ArrayList<>();
            for (int i = mn; i <= mx; i++) {
                B.add(A.get(i));
            }
            Collections.reverse(B);
            A.removeAll(B);
            if (A.equals(Collections.nCopies(N, 1))) {
                System.out.println(mn + 1 + " " + mx + 1);
            } else {
                System.out.println("0 0");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        String[] parts = input.split("\\.");
        char[] chars = parts[0].toCharArray();
        int[] digits = new int[chars.length];
        for (int i = 0; i < chars.length; i++) {
            digits[i] = Character.getNumericValue(chars[i]);
        }
        int decimal = Integer.parseInt(parts[1]);
        int sum = 0;
        for (int i = 0; i < digits.length; i++) {
            sum += digits[i];
        }
        if (sum == 9) {
            System.out.println("GOTO Vasilisa.");
        } else if (sum != 9 && decimal < 5) {
            System.out.println(new String(chars));
        } else {
            String str = new String(chars);
            int num = Integer.parseInt(str) + 1;
            System.out.println(num);
        }
    }
}
import java.util.*;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String v = sc.next();
        int f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);
        String[] d = {"LEFT", "RIGHT"};
        String[] a = new String[2 * m + v.length()];
        for (int i = 0; i < m; i++) {
            a[2 * i] = d[f];
            a[2 * i + 1] = "PRINT " + v.charAt(i + f);
            a[2 * i + 2] = d[f];
        }
        System.out.println(String.join("\n", a));
    }
}
import java.util.*;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s++;
            curr /= 10;
        }
        int first = (int) Math.pow(10, s);
        int second = first / 2;
        int ans = -1;
        for (int i = l; i <= r; i++) {
            if (i >= l && i <= r) {
                curr = i;
                String rev = "";
                for (int k = 0; k < String.valueOf(curr).length(); k++) {
                    rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k)));
                }
                ans = Math.max(ans, Integer.parseInt(rev) * curr);
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] li = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                li[i][j] = sc.nextInt();
            }
        }
        int[] p = new int[n];
        for(int i=0;i<n;i++){
            p[i] = sc.nextInt();
        }
        Set<Integer> q = new HashSet<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                q.add(li[i][j]);
            }
        }
        Set<Integer> r = new HashSet<>();
        for(int i=1;i<=n;i++){
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        for(int i=0;i<=q.size();i++){
            for(Set<Integer> s:Sets.combinations(q,i)){
                for(int j=0;j<m;j++){
                    if(s.stream().filter(k->li[j][k-1]==1).count()%2!=p[j]){
                        break;
                    }
                }else{
                    ans+=Math.pow(2,v.size());
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[][] b = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int k = (i - j + n) % n;
                int m = a[i];
                for (int l = 0; l < n; l++) {
                    if (l != k) {
                        m = Math.min(m, a[l]);
                    }
                }
                b[j][i] = m;
            }
        }
        int m = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            m = Math.min(m, sum + x * i);
        }
        System.out.println(m);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int mod = (int) Math.pow(10, 9) + 7;
        int n = sc.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        Arrays.sort(c);
        int b = (int) Math.pow(2, 2 * n - 2) % mod;
        int a = 2 * b % mod;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_456_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] m = new int[n][2];
        for (int i = 0; i < n; i++) {
            m[i][0] = sc.nextInt();
            m[i][1] = sc.nextInt();
        }
        Arrays.sort(m, (a, b) -> b[1] - a[1]);
        int[] a = m[0];
        for (int i = 1; i < n; i++) {
            if (m[i][1] > a[1]) {
                System.out.println("Happy Alex");
                break;
            }
            a = m[i];
        } else {
            System.out.println("Poor Alex");
        }
    }
}
import java.util.Scanner;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            int s = (1 + n) * n / 2;
            int t1 = 1;
            while (t1 <= n) {
                s -= 2 * t1;
                t1 *= 2;
            }
            System.out.println(s);
        }
    }
}
import java.util.*;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int[] S = new int[N];
        S[0] = A[0];
        for (int i = 1; i < N; i++) {
            S[i] = S[i - 1] + A[i];
        }
        int ans = Integer.MAX_VALUE;
        for (int k = 1; k <= N / 2; k++) {
            int E = k * X + 2 * sum(S, N - 2 * k - 1, -1, -k);
            ans = Math.min(ans, E);
        }
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    public static int sum(int[] arr, int end, int step, int k) {
        int sum = 0;
        for (int i = end; i >= 0; i -= step) {
            sum += arr[i];
        }
        return sum * k;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            String line = sc.next();
            Map<Character, Integer> boughtCount = new HashMap<>();
            for (int j = 0; j < line.length(); j++) {
                char c = line.charAt(j);
                boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
            }
            line = sc.next();
            Map<Character, Integer> madeCount = new HashMap<>();
            for (int j = 0; j < line.length(); j++) {
                char c = line.charAt(j);
                madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
            }
            int res = 0;
            for (char c : madeCount.keySet()) {
                if (!boughtCount.containsKey(c)) {
                    System.out.println(-1);
                    return;
                }
                res += Math.min(boughtCount.get(c), madeCount.get(c));
            }
            System.out.println(res);
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        String t = sc.next();
        if (s.equals(t)) {
            System.out.println(n);
        } else {
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n - i; j++) {
                    if (s.charAt(i + j) != t.charAt(j)) {
                        break;
                    }
                    if (j == n - i - 1) {
                        cnt = n - i;
                    }
                }
            }
            System.out.println(2 * n - cnt);
        }
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static int twos_in_factorial ( int n ) {
        int count = 0;
        while ( n > 0 ) {
            count += n & 1;
            n >>= 1;
        }
        return count;
    }
    public static boolean parity_of_nCr ( int n , int i ) {
        int f = twos_in_factorial;
        return f ( n ) - f ( n - i ) - f ( i ) > 0;
    }
    public static void main ( String[] args ) {
        Scanner sc = new Scanner ( System.in );
        int n = sc.nextInt ( );
        List<Integer> nums = new ArrayList<> ( );
        String[] input = sc.next ( ).split ( " " );
        for ( String s : input ) {
            nums.add ( Integer.parseInt ( s ) - 1 );
        }
        boolean no_one = false;
        if ( !nums.contains ( 0 ) ) {
            nums = new ArrayList<> ( );
            for ( int num : input ) {
                nums.add ( num / 2 );
            }
            no_one = true;
        }
        boolean is_odd = false;
        for ( int i = 0 ; i < nums.size ( ) ; i++ ) {
            if ( !parity_of_nCr ( n - 1 , i ) && ( nums.get ( i ) & 1 ) != 0 ) {
                is_odd ^= true;
            }
        }
        if ( !is_odd ) {
            System.out.println ( 0 );
        } else {
            System.out.println ( ( no_one ? 1 : 0 ) );
        }
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < n; k++) {
                    if (arr[k] != arr[j] && arr[k] != arr[i] && arr[k] == arr[i] + arr[j]) {
                        System.out.println(k + 1 + " " + j + 1 + " " + i + 1);
                        System.exit(0);
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.*;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] vis = new int[n+1];
        int ci = 0, cb = 0, cc = 0;
        List<Integer>[] g = new ArrayList[n+1];
        for(int i=0;i<=n;i++) g.add(new ArrayList<>());
        for(int i=0;i<m;i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g.get(u).add(v);
            g.get(v).add(u);
        }
        for(int i=1;i<=n;i++) {
            if(vis[i]==0) {
                if(g.get(i).size()==0) ci++;
                else {
                    boolean flag = true;
                    for(int j=0;j<g.get(i).size();j++) {
                        int v = g.get(i).get(j);
                        if(vis[v]==0) {
                            flag &= dfs(v,3-vis[i],g,vis);
                        } else {
                            flag &= (vis[v]==3-vis[i]);
                        }
                    }
                    if(flag) cb++;
                    else cc++;
                }
            }
        }
        System.out.println(ci*ci+2*ci*(n-ci)+cc*cc+2*cb*cc+2*cb*cb);
    }
    public static boolean dfs(int u,int col,List<Integer>[] g,int[] vis) {
        vis[u] = col;
        for(int i=0;i<g.get(u).size();i++) {
            int v = g.get(u).get(i);
            if(vis[v]==0) {
                if(!dfs(v,3-col,g,vis)) return false;
            } else {
                if(vis[v]!=3-col) return false;
            }
        }
        return true;
    }
}
import java.util.*;

public class atcoder_ABC125_C {
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        left[0] = 0;
        right[n] = 0;
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], a[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], a[i]);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }
}
import java.io.*;
import java.util.*;

public class atcoder_AGC007_C {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String[] input = br.readLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int d = Integer.parseInt(input[1]);
        int x = Integer.parseInt(input[2]);
        double ret = 0;
        while (N > 0) {
            ret += d + (N - 0.5) * x;
            d += (d / N) + (5 * x) / (2 * N);
            x += 2 * x / N;
            N--;
        }
        bw.write(String.format("%.10f", ret));
        bw.close();
    }
}
import java.util.*;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> l1 = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l1.add(sc.nextInt());
        }
        Collections.sort(l1);
        int a = l1.get(n - 1);
        int b = l1.get(0);
        if (a == b) {
            int sum = 0;
            for (int i = 0; i < n; i++) {
                if (l1.get(i) != a) {
                    sum += l1.get(i);
                }
            }
            System.out.println(a - b + " " + sum);
        } else {
            int ac = Collections.frequency(l1, a);
            int bc = Collections.frequency(l1, b);
            System.out.println(a - b + " " + ac * bc);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] V = new int[N];
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            V[i] = sc.nextInt();
            C[i] = sc.nextInt();
        }
        int[] list = new int[N];
        int ans = 0;
        int X = 0;
        int Y = 0;
        for (int i = 0; i < N; i++) {
            if (V[i] - C[i] > 0) {
                X = V[i];
                Y = C[i];
                list[i] = X - Y;
            }
        }
        for (int i = 0; i < N; i++) {
            ans += list[i];
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String my_str = "";
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '0' || c == '1') {
                my_str += c;
            } else if (c == 'B' && my_str.length() != 0) {
                my_str = my_str.substring(0, my_str.length() - 1);
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        int k = Integer.parseInt(input[0]);
        long n = Long.parseLong(input[1]);
        int w = Integer.parseInt(input[2]);
        long total = 0;
        for (int i = 1; i <= w; i++) {
            total += i * k;
        }
        if (total > n) {
            System.out.println(total - n);
        } else {
            System.out.println(0);
        }
    }
}
import java.util.*;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            List<Integer> l1 = Arrays.asList(sc.nextLine().split(" ")).stream().map(Integer::parseInt).collect(Collectors.toList());
            if (l1.stream().mapToInt(Integer::intValue).sum() > 1) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.*;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int w = sc.nextInt();
        char[][] graph = new char[h][w];
        for (int i = 0; i < h; i++) {
            String line = sc.next();
            for (int j = 0; j < w; j++) {
                graph[i][j] = line.charAt(j);
            }
        }
        int[][] dist = new int[h][w];
        for (int i = 0; i < h; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        dist[0][0] = 0;
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{0, 0});
        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int x = curr[0];
            int y = curr[1];
            if (x + 1 < w && dist[x + 1][y] > dist[x][y] + 1 && graph[x + 1][y] != '#') {
                dist[x + 1][y] = dist[x][y] + 1;
                q.add(new int[]{x + 1, y});
            }
            if (x - 1 >= 0 && dist[x - 1][y] > dist[x][y] + 1 && graph[x - 1][y] != '#') {
                dist[x - 1][y] = dist[x][y] + 1;
                q.add(new int[]{x - 1, y});
            }
            if (y + 1 < h && dist[x][y + 1] > dist[x][y] + 1 && graph[x][y + 1] != '#') {
                dist[x][y + 1] = dist[x][y] + 1;
                q.add(new int[]{x, y + 1});
            }
            if (y - 1 >= 0 && dist[x][y - 1] > dist[x][y] + 1 && graph[x][y - 1] != '#') {
                dist[x][y - 1] = dist[x][y] + 1;
                q.add(new int[]{x, y - 1});
            }
        }
        System.out.println(dist[h - 1][w - 1]);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int r = sc.nextInt();
        int D = sc.nextInt();
        int x = sc.nextInt();
        for (int i = 2; i <= 12; i++) {
            int num = (int) ((Math.pow(r, i - 1) * (x + D / (1 - r))) - D / (1 - r));
            System.out.println(num);
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int A = sc.nextInt();
        int B = sc.nextInt();
        sc.close();

        char[][] answer = new char[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (i < B) {
                    if (j < A) {
                        answer[i][j] = '0';
                    } else {
                        answer[i][j] = '1';
                    }
                } else {
                    if (j < A) {
                        answer[i][j] = '1';
                    } else {
                        answer[i][j] = '0';
                    }
                }
            }
        }

        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(answer[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int t = sc.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.nextInt();
        }
        int current_cell = 0;
        while (current_cell <= t) {
            current_cell += s[current_cell - 1];
            if (current_cell == t) {
                System.out.println("YES");
                return;
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L - 1;
        long rr = 1000000000000000000L + 1;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            int tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot--;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.*;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextLong();
        }
        long result = 0;
        for (int b = 0; b < 60; b++) {
            long bs = 0;
            for (int i = 0; i < N; i++) {
                bs += (A[i] >> b) & 1;
            }
            result = (result + bs * (N - bs) * (1L << b)) % 1000000007;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int gcd = getGCD(360, x);
        System.out.println(360 / gcd);
    }

    public static int getGCD(int a, int b) {
        if (b == 0) {
            return a;
        }
        return getGCD(b, a % b);
    }
}
import java.util.*;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] r = new int[n];
        for(int i=0;i<n;i++){
            r[i] = sc.nextInt();
        }
        int ans = Math.abs(r[0]);
        for(int i=1;i<n;i++){
            ans += Math.abs(r[i]-r[i-1]);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        String b = sc.nextLine();
        int x = Math.max(a.length(), b.length());
        a = String.format("%0" + x + "d", Integer.parseInt(a));
        b = String.format("%0" + x + "d", Integer.parseInt(b));
        String s = "";
        int c = 0;
        for (int i = 0; i < x; i++) {
            int d = (b.charAt(i) - '0') + (a.charAt(x - i - 1) - '0') + c;
            if (d > 9) {
                s += d % 10;
                c = 1;
            } else {
                s += d;
                c = 0;
            }
        }
        if (c == 1) {
            s += 1;
        }
        System.out.println(Integer.parseInt(new StringBuilder(s).reverse().toString()));
    }
}
import java.util.*;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        Map<Character, Integer> dt = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        int cnt = 0;
        boolean x = true;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt++;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }
        if (x) {
            System.out.println("First");
        } else if (!x && s.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && s.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String a = sc.next();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (a.charAt(i) == '1') {
                count++;
            }
        }
        if (count == 0) {
            System.out.println(0);
        } else {
            int[] arr = new int[count];
            int j = 0;
            for (int i = 0; i < n; i++) {
                if (a.charAt(i) == '1') {
                    arr[j] = 0;
                    j++;
                } else if (a.charAt(i) == '0') {
                    arr[j - 1]++;
                }
            }
            int result = 1;
            for (int i = 0; i < count; i++) {
                result *= (arr[i] + 1);
            }
            System.out.println(result);
        }
    }
}
import java.util.*;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] nums = new int[4];
        String[] operations = new String[3];
        for (int i = 0; i < 4; i++) {
            nums[i] = sc.nextInt();
        }
        for (int i = 0; i < 3; i++) {
            operations[i] = sc.next();
        }
        long[] ans = new long[1];
        ans[0] = 10000000000000000000000000L;
        rememberTheNumber(nums, 0, operations, ans);
        System.out.println(ans[0]);
    }

    public static void rememberTheNumber(int[] nums, int i, String[] operations, long[] ans) {
        if (i >= 3) {
            return;
        }
        for (int j = 0; j < 4; j++) {
            for (int k = j + 1; k < 4; k++) {
                if (nums[j] != -1 && nums[k] != -1) {
                    int s = nums[j];
                    nums[j] = -1;
                    int t = nums[k];
                    if (operations[i].equals("+")) {
                        nums[k] = s + t;
                    } else if (operations[i].equals("*")) {
                        nums[k] = s * t;
                    }
                    if (i == 2 && nums[k] < ans[0]) {
                        ans[0] = nums[k];
                    }
                    rememberTheNumber(nums, i + 1, operations, ans);
                    nums[j] = s;
                    nums[k] = t;
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        int max = Math.max(a * c, Math.max(b * d, Math.max(a * d, b * c)));
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int l = 2019;
        int[] m = new int[l+1];
        int a = 0, r = 0;
        for (int i = 0; i < s.length(); i++) {
            a += (int)(s.charAt(i) - '0') * Math.pow(10, i, l);
            r += m[a % l]++;
        }
        System.out.println(r);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int id = 0;
        for (int i = 1; i < n; i++) {
            int li = sc.nextInt();
            int ri = sc.nextInt();
            if (li <= l && r <= ri) {
                id = i;
            } else if (li < l || r < ri) {
                id = n;
            }
            l = Math.min(l, li);
            r = Math.max(r, ri);
        }
        System.out.println(id == n ? -1 : id + 1);
    }
}
import java.util.*;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.nextLine();
        Map<Character, Integer> c = new HashMap<>();
        for (int i = 0; i < S.length(); i++) {
            char ch = S.charAt(i);
            c.put(ch, c.getOrDefault(ch, 0) + 1);
        }
        Set<Character> Sa = new HashSet<>(Arrays.asList(S.toCharArray()));
        if (Sa.size() != 2) {
            System.out.println("No");
            return;
        }
        for (char ch : Sa) {
            if (c.get(ch) != 2) {
                System.out.println("No");
                return;
            }
        }
        System.out.println("Yes");
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if(n == 1){
            System.out.println(0);
            return;
        }
        List<Integer> factors = new ArrayList<>();
        factors.addAll(primeFactorize(n));
        int ans = 0;
        for(int i=1; i<=99999999; i++){
            int count = 0;
            for(int factor : factors){
                if(factor <= i){
                    count++;
                }
            }
            ans += count;
        }
        System.out.println(ans);
    }

    public static List<Integer> primeFactorize(int n){
        List<Integer> factors = new ArrayList<>();
        while(n % 2 == 0){
            factors.add(2);
            n /= 2;
        }
        int f = 3;
        while(f * f <= n){
            if(n % f == 0){
                factors.add(f);
                n /= f;
            }else{
                f += 2;
            }
        }
        if(n != 1){
            factors.add(n);
        }
        return factors;
    }
}
import java.util.*;

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Node[] nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < n - 1; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            Node node1 = nodes[u - 1];
            Node node2 = nodes[v - 1];
            node1.val = u;
            node2.val = v;
            node1.a.add(new Node[] {node2, w});
            node2.a.add(new Node[] {node1, w});
        }
        Node root = nodes[0];
        root.color = true;
        Set<Node> nodeSet = new HashSet<>();
        traverse(root, 0, nodeSet);
        for (int i = 0; i < n; i++) {
            Node node = nodes[i];
            if (node.color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void traverse(Node node, int distance, Set<Node> nodeSet) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }
        for (Node[] pair : node.a) {
            Node adjNode = pair[0];
            int dis = pair[1];
            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            traverse(adjNode, distance + dis, nodeSet);
        }
    }
}

class Node {
    int val;
    boolean color;
    List<Node[]> a;

    public Node() {
        val = 0;
        color = false;
        a = new ArrayList<>();
    }
}
import java.util.*;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String l = sc.nextLine();
        int n = l.length();
        int mod = (int) Math.pow(10, 9) + 7;
        int[][] dp = new int[n+1][2];
        dp[0][0] = 1;
        for(int i=0;i<n;i++){
            if(l.charAt(i)=='0'){
                dp[i+1][0] = (dp[i][0] + dp[i][1]*3) % mod;
                dp[i+1][1] = (dp[i][1] + dp[i][0]*3) % mod;
            }
            else{
                dp[i+1][0] = (dp[i][0]*2 + dp[i][1]*3) % mod;
                dp[i+1][1] = (dp[i][0] + dp[i][1]*3) % mod;
            }
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a year: ");
        int year = sc.nextInt();
        sc.close();

        String leapYear = leapyear(year);
        System.out.println(leapYear);
    }

    public static String leapyear(int year) {
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.*;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        String s = sc.next();
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'A']++;
        }
        Arrays.sort(count);
        int res = 0;
        for (int i = 25; i >= 0; i--) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                return;
            }
            k -= count[i];
            res += count[i] * count[i];
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_334_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int i = 1, j = n * n;
        while (i < j) {
            System.out.println(i + " " + j);
            i++;
            j--;
        }
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for(int i=0;i<n;i++) A[i] = sc.nextInt();
        A = new int[]{A[0]} + Arrays.stream(A).boxed().sorted(Comparator.reverseOrder()).mapToInt(Integer::intValue).toArray();
        int N = A.length;
        int[][] dp = new int[N][2];
        dp[0][0] = A[0];
        dp[0][1] = 0;
        for(int i=1;i<N;i++) {
            if(A[i] <= dp[i-1][0]) {
                dp[i] = dp[i-1];
            } else {
                dp[i][0] = A[i];
                dp[i][1] = 0;
            }
        }
        for(int i=1;i<N;i++) {
            for(int j=i-1;j>=0;j--) {
                if(dp[j][0] < A[i]) {
                    dp[i] = dp[j];
                    break;
                }
            }
        }
        int ans = 0;
        for(int i=0;i<N;i++) {
            if(dp[i][1] < ans) {
                ans = dp[i][1];
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String soz = sc.nextLine();
        int[] a = new int[soz.length() + 1];
        for (int i = 1; i < soz.length(); i++) {
            a[i] = a[i - 1];
            if (soz.charAt(i - 1) == soz.charAt(i)) {
                a[i]++;
            }
        }
        int n = sc.nextInt();
        List<Integer> arr = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            String[] line = sc.nextLine().split(" ");
            int m = Integer.parseInt(line[0]);
            int l = Integer.parseInt(line[1]);
            arr.add(a[l - 1] - a[m - 1]);
        }
        for (int i : arr) {
            System.out.println(i);
        }
    }
}
import java.util.*;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        for(int i=1;i<n;i++){
            if(arr[i] != arr[i-1] && arr[i] < arr[i-1]*2){
                System.out.println("YES");
                return;
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int c = 2;
        for (int i = 0; i < n; i++) {
            if (w[i] == 1) {
                System.out.println(c);
            } else if (w[i] % 2 == 0) {
                c = 3 - c;
                System.out.println(c);
            } else {
                System.out.println(c);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        int sum_b = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        for (int i = 0; i < q; i++) {
            int[] ql = new int[3];
            ql[0] = sc.nextInt();
            ql[1] = sc.nextInt();
            ql[2] = sc.nextInt();
            if (ql[0] == 2) {
                if (p1.size() == p2.size()) {
                    ans[0] = -p2.peek();
                    ans[1] = sum_p1 - p1.size() * ans[0] + p2.size() * ans[0] - sum_p2 + sum_b;
                } else {
                    ans[0] = p1.peek();
                    ans[1] = sum_p1 - p1.size() * ans[0] + p2.size() * ans[0] - sum_p2 + sum_b;
                }
                System.out.println(ans[0] + " " + ans[1]);
            } else {
                sum_b += ql[2];
                if (p1.isEmpty()) {
                    p1.offer(ql[1]);
                    sum_p1 += ql[1];
                } else if (p1.peek() <= ql[1]) {
                    p1.offer(ql[1]);
                    sum_p1 += ql[1];
                } else {
                    p2.offer(-ql[1]);
                    sum_p2 += ql[1];
                }
                if (p1.size() < p2.size()) {
                    int k = p2.poll();
                    p1.offer(-k);
                    sum_p2 += k;
                    sum_p1 -= k;
                }
                if (p1.size() - 1 > p2.size()) {
                    int k = p1.poll();
                    p2.offer(-k);
                    sum_p1 -= k;
                    sum_p2 += k;
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int a = sc.nextInt();
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            sho++;
        }
        System.out.println(sho);
    }
}
import java.util.Scanner;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String result = "Yes";
        if (!s.contains("A") || !s.contains("B")) {
            result = "No";
        }
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int c = 0;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[find(par, k - 1)];
                union(par, k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[find(par, k + 1)];
                union(par, k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }

    public static int find(int[] par, int x) {
        if (par[x] == x) {
            return x;
        }
        return find(par, par[x]);
    }

    public static void union(int[] par, int x, int y) {
        int px = find(par, x);
        int py = find(par, y);
        if (rank[px] < rank[py]) {
            par[px] = py;
            size[py] += size[px];
        } else if (rank[px] > rank[py]) {
            par[py] = px;
            size[px] += size[py];
        } else {
            par[py] = px;
            size[px] += size[py];
            rank[px]++;
        }
    }
}
import java.util.Scanner;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int ans = 1, sumL = 0;
        String[] sentences = sc.nextLine().split("[.?!]");
        for (String sentence : sentences) {
            sentence = sentence.trim() + ".";
            int L = sentence.length();
            if (L > 1) {
                if (L > n) {
                    System.out.println("Impossible");
                    return;
                }
                if (sumL + L + (sumL > 0) > n) {
                    ans++;
                    sumL = L;
                } else {
                    sumL = sumL + L + (sumL > 0);
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int a = input.nextInt();
        int b = input.nextInt();
        int t = input.nextInt();
        double time = a;
        int cookie = 0;
        while (time <= t + 0.5) {
            cookie += b;
            time += a;
        }
        System.out.println(cookie);
    }
}
import java.util.*;
public class atcoder_ABC145_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = sc.nextInt();
            y[i] = sc.nextInt();
        }
        double result = solve(N, x, y);
        System.out.println(result);
    }

    public static double solve(int N, int[] x, int[] y) {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            indices.add(i);
        }
        List<List<Integer>> permutations = new ArrayList<>();
        do {
            permutations.add(new ArrayList<>(indices));
        } while (nextPermutation(indices));
        List<Double> distances = new ArrayList<>();
        for (List<Integer> permutation : permutations) {
            double totalDistance = 0;
            for (int i = 0; i < N - 1; i++) {
                int f = permutation.get(i);
                int t = permutation.get(i + 1);
                double distance = Math.sqrt(Math.pow(x[t] - x[f], 2) + Math.pow(y[t] - y[f], 2));
                totalDistance += distance;
            }
            distances.add(totalDistance);
        }
        double sum = 0;
        for (double distance : distances) {
            sum += distance;
        }
        return sum / distances.size();
    }

    private static boolean nextPermutation(List<Integer> list) {
        int i = list.size() - 1;
        while (i > 0 && list.get(i - 1) >= list.get(i)) {
            i--;
        }
        if (i <= 0) {
            return false;
        }
        int j = list.size() - 1;
        while (list.get(j) <= list.get(i - 1)) {
            j--;
        }
        int temp = list.get(i - 1);
        list.set(i - 1, list.get(j));
        list.set(j, temp);
        Collections.reverse(list.subList(i, list.size()));
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int S = sc.nextInt();
        int W = sc.nextInt();
        if (S <= W) {
            System.out.println("unsafe");
        } else {
            System.out.println("safe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String ip = sc.nextLine();
        String st = "";
        if (ip.length() != 1) {
            if (ip.charAt(0) == '9') {
                st = "9";
                ip = ip.substring(1);
            }
            for (int i = 0; i < ip.length(); i++) {
                if (ip.charAt(i) > '4') {
                    int n = 9 - (int) ip.charAt(i);
                    st += n;
                } else {
                    st += ip.charAt(i);
                }
            }
        } else {
            st = ip;
        }
        System.out.println(st);
    }
}
import java.util.*;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = sc.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> FXs = new ArrayList<>();
        for (int value : sequence) {
            int y = f(value);
            if (!storage.containsKey(y)) {
                storage.put(y, new ArrayList<>(Arrays.asList(value)));
                FXs.add(y);
            } else {
                storage.get(y).add(value);
            }
        }
        int sum = 0;
        for (int y : FXs) {
            sum += storage.get(y).size() * storage.get(y).size();
        }
        return (sum - FXs.stream().mapToInt(storage::get).mapToInt(List::size).sum()) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.*;
public class codeforces_96_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int limit = sc.nextInt();
        List<Integer> l = new ArrayList<>();
        gen(0, 0, 0, limit, l);
        Collections.sort(l);
        int n = sc.nextInt();
        int ans = 0;
        for (int val : l) {
            if (val >= n) {
                ans = val;
                break;
            }
        }
        System.out.println(ans);
    }

    public static void gen(int number, int four, int seven, int limit, List<Integer> l) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        gen(number * 10 + 4, four + 1, seven, limit, l);
        gen(number * 10 + 7, four, seven + 1, limit, l);
    }
}
import java.util.*;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] low = new int[n];
        int[] high = new int[n];
        for (int i = 0; i < n; i++) {
            low[i] = sc.nextInt();
            high[i] = sc.nextInt();
        }
        Arrays.sort(low);
        Arrays.sort(high);
        if (n % 2 == 0) {
            int hh = (high[(n + 1) / 2 - 1] + high[(n + 1) / 2]) / 2;
            int ll = (low[(n + 1) / 2 - 1] + low[(n + 1) / 2]) / 2;
            System.out.println(hh - ll + 1);
        } else {
            int hh = high[(n + 1) / 2];
            int ll = low[(n + 1) / 2 - 1];
            System.out.println(hh - ll + 1);
        }
    }
}
import java.util.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        Set<Integer>[] edges = new HashSet[N];
        int[] degs = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        for (int i = 0; i < N; i++) {
            edges[i] = new HashSet<>();
            degs[i] = 0;
            parity[i] = 0;
            flag[i] = false;
        }
        for (int i = 0; i < M; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            edges[a].add(b);
            edges[b].add(a);
            degs[a]++;
            degs[b]++;
        }
        if (M % 2 != 0) {
            System.out.println(-1);
            return;
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < N; i++) {
            Q.offer(new int[]{degs[i], i});
        }
        while (!Q.isEmpty()) {
            int[] top = Q.poll();
            int u = top[1];
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int v : edges[u]) {
                edges[v].remove(u);
                if (parity[u] != 0 && edges[v].size() == 1) {
                    System.out.println(u + 1 + " " + v + 1);
                    parity[u] = 1 - parity[u];
                } else {
                    System.out.println(v + 1 + " " + u + 1);
                    parity[v] = 1 - parity[v];
                }
                degs[v]--;
                Q.offer(new int[]{degs[v], v});
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_147_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        s = s.replaceAll("\\s+", " ");
        s = s.replaceAll("[^a-zA-Z0-9\\s]", "");
        s = s.replaceAll("\\s+([.,!?])", "$1");
        s = s.replaceAll("\\s+$", "");
        System.out.println(s);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC152_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int lcm = 1;
        for (int i = 0; i < n; i++) {
            lcm = lcm(lcm, a[i]);
        }
        int ans = lcm;
        for (int i = 0; i < n; i++) {
            ans = (ans * pow(a[i], MOD - 2, MOD)) % MOD;
        }
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int lcm(int a, int b) {
        return a * b / gcd(a, b);
    }

    public static int pow(int a, int b, int mod) {
        int res = 1;
        a %= mod;
        while (b > 0) {
            if (b % 2 == 1) {
                res = (res * a) % mod;
            }
            a = (a * a) % mod;
            b /= 2;
        }
        return res;
    }
}
import java.util.*;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] xxs = sc.nextLine().split(" ");
        int x = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        if (x == 0) {
            System.out.println("YES");
            return;
        }

        int a_time = Math.min(a / da, t - 1);
        int b_time = Math.min(b / db, t - 1);

        for (int i = 0; i <= a_time; i++) {
            for (int j = 0; j <= b_time; j++) {
                if (a - da * i == x || b - db * j == x) {
                    System.out.println("YES");
                    return;
                }
                if (a - da * i + b - db * j == x) {
                    System.out.println("YES");
                    return;
                }
            }
        }

        System.out.println("NO");
    }
}
import java.util.*;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int z = sc.nextInt();
        int k = sc.nextInt();
        int[] a = new int[x];
        int[] b = new int[y];
        int[] c = new int[z];
        for(int i=0;i<x;i++){
            a[i] = sc.nextInt();
        }
        for(int i=0;i<y;i++){
            b[i] = sc.nextInt();
        }
        for(int i=0;i<z;i++){
            c[i] = sc.nextInt();
        }
        int[] ab = new int[x*y];
        for(int i=0;i<x;i++){
            for(int j=0;j<y;j++){
                ab[i*y+j] = a[i]+b[j];
            }
        }
        Arrays.sort(ab);
        int[] abc = new int[Math.min(k,x*y)*z];
        for(int i=0;i<Math.min(k,x*y);i++){
            for(int j=0;j<z;j++){
                abc[i*z+j] = ab[i]+c[j];
            }
        }
        Arrays.sort(abc);
        for(int i=0;i<k;i++){
            System.out.println(abc[i]);
        }
    }
}
import java.util.*;

public class atcoder_ABC155_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] dp = new int[n+1];
        dp[0] = 0;
        dp[1] = 1;
        for(int i=2;i<=n;i++){
            dp[i] = (dp[i-1]+10-1)%1000000007;
            if(dp[i]<=4){
                dp[i] = (dp[i]+dp[i-2])%1000000007;
            }else{
                dp[i] = (dp[i]+dp[i-2])%1000000007;
                dp[i] = (dp[i]+10-1)%1000000007;
            }
        }
        System.out.println(dp[n]);
    }
}
import java.util.*;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int l = sc.nextInt();
        int r = sc.nextInt();
        int sa = sc.nextInt();
        int sk = sc.nextInt();
        int[] ans = new int[n];
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = l + (r - l) * i / (n - 1);
        }
        Arrays.sort(nums);
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (nums[i] <= sk) {
                ans[j++] = nums[i];
            }
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > sk) {
                ans[j++] = nums[i];
            }
        }
        System.out.println(Arrays.toString(ans));
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[][] graph = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                graph[i][j] = 0;
            }
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph[a][b] = 1;
            graph[b][a] = 1;
        }
        int mod = (int) 1e9 + 7;
        int ans = dfs(graph, 0, N - 1, K, mod);
        System.out.println(ans);
    }

    public static int dfs(int[][] graph, int fro, int to, int K, int mod) {
        if (fro == to) {
            return 1;
        }
        int caseNum = 1;
        int colorNum = K - 1;
        for (int i = 0; i < graph[fro].length; i++) {
            if (graph[fro][i] == 0) {
                continue;
            }
            if (i == to) {
                continue;
            }
            int pat = dfs(graph, i, fro, colorNum, mod);
            if (pat == 0) {
                return 0;
            }
            caseNum = (caseNum * pat) % mod;
            colorNum--;
        }
        return caseNum;
    }
}
import java.util.*;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<String> arr = new ArrayList<>();
        while (n-- > 0) {
            arr.add(sc.next().toLowerCase());
        }
        String str = sc.next().toLowerCase();
        char letter1 = sc.next().toLowerCase().charAt(0);
        char letter2 = (letter1 == 'a') ? 'b' : 'a';
        boolean[] valid = new boolean[str.length()];
        Set<Integer> setcito = new HashSet<>();
        for (String x : arr) {
            int wat = 0;
            while (true) {
                int index = str.indexOf(x, wat);
                if (index < 0) break;
                for (int i = index; i < index + x.length(); i++) {
                    setcito.add(i);
                }
                wat = index + 1;
            }
        }
        char[] oString = str.toCharArray();
        for (int i : setcito) {
            char letter = (oString[i] == letter1) ? letter2 : letter1;
            oString[i] = (oString[i] == letter1) ? letter : Character.toUpperCase(letter);
        }
        System.out.println(new String(oString));
    }
}
import java.util.*;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int m = sc.nextInt();
        int k = sc.nextInt();
        int lo = 0;
        int hi = (int)1e18;
        while (hi - lo > 1) {
            int md = (lo + hi) / 2;
            int c = sum(m + md - 1) - sum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }

    public static int sum(int k) {
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.*;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = sc.nextInt();
        int b = sc.nextInt();
        List<int[]> games = new ArrayList<>();
        for (int i = a; i <= x; i++) {
            if (i <= b) {
                continue;
            }
            for (int j = b; j <= y; j++) {
                if (i > j) {
                    games.add(new int[]{i, j});
                }
            }
        }
        System.out.println(games.size());
        for (int[] game : games) {
            System.out.println(game[0] + " " + game[1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int s = sc.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int f = sc.nextInt();
            int t = sc.nextInt();
            int x = t - (s - f);
            if (x > c) {
                c = x;
            }
        }
        System.out.println(s + c);
    }
}
import java.util.*;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int max_level = sc.nextInt();
        List<Integer> x = new ArrayList<>(Arrays.asList(sc.nextLine().split(" ")).stream().mapToInt(Integer::parseInt).boxed().toArray(Integer[]::new));
        List<Integer> y = new ArrayList<>(Arrays.asList(sc.nextLine().split(" ")).stream().mapToInt(Integer::parseInt).boxed().toArray(Integer[]::new));
        x.remove(0);
        y.remove(0);
        Set<Integer> setX = new HashSet<>(x);
        Set<Integer> setY = new HashSet<>(y);
        if (setX.contains(0)) {
            setX.remove(0);
        } else if (setY.contains(0)) {
            setY.remove(0);
        }
        Set<Integer> setZ = new HashSet<>(setX);
        setZ.addAll(setY);
        if (setZ.size() != max_level) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.*;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Double> arr = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            arr.add(sc.nextDouble());
        }
        arr.sort((a, b) -> Double.compare(a - Math.floor(a), b - Math.floor(b)));
        int o = 2 * n - arr.size();
        double arr_sum = arr.stream().mapToDouble(x -> x).sum();
        double res = 2e9;
        for (int i = 0; i <= n; i++) {
            if (i + o >= n) {
                res = Math.min(res, Math.abs(i - arr_sum));
            }
        }
        System.out.printf("%.3f", res);
    }
}
import java.util.*;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt() * N + i;
        }
        Arrays.sort(A);
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            int d = A[i] % N % 2;
            if (d != i % 2) {
                cnt++;
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[][] cake = new String[n][n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        for (int i = 0; i < n; i++) {
            String line = sc.next();
            for (int j = 0; j < n; j++) {
                cake[i][j] = line.charAt(j) + "";
            }
            for (int j = 0; j < n; j++) {
                if (cake[i][j].equals("C")) {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int j = chocCount; j > chocCount - 2; j--) {
                    nfat *= j;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            chocCount = 0;
            for (int i = 0; i < n; i++) {
                if (cake[i][j].equals("C")) {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int j = chocCount; j > chocCount - 2; j--) {
                    nfat *= j;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
import java.util.Scanner;

public class codeforces_459_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        int x1 = Integer.parseInt(input[0]);
        int y1 = Integer.parseInt(input[1]);
        int x2 = Integer.parseInt(input[2]);
        int y2 = Integer.parseInt(input[3]);
        int denominator = x2 - x1;
        int numerator = y2 - y1;
        double quotient = 0.0;
        if (denominator != 0) {
            quotient = (double) numerator / denominator;
        }
        if (numerator == 0) {
            int d = (int) Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            int x4 = x1;
            int x3 = x2;
            int y3 = y2 + d;
            int y4 = y1 + d;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        } else if (denominator == 0) {
            int d = (int) Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            int x4 = x1 + d;
            int x3 = x2 + d;
            int y3 = y1;
            int y4 = y2;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        } else if (quotient == 1) {
            int x4 = x2;
            int x3 = x1;
            int y4 = y1;
            int y3 = y2;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        } else if (quotient == -1) {
            int x4 = x1;
            int x3 = x2;
            int y4 = y2;
            int y3 = y1;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        } else {
            System.out.println("-1");
        }
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String result = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '.') {
                result += '0';
            } else {
                i++;
                if (s.charAt(i) == '.') {
                    result += '1';
                } else {
                    result += '2';
                }
            }
            i++;
        }
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC012_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        int ans = 0;
        for (int i = A.length - 2; i >= A.length - 2 * n - 1; i -= 2) {
            ans += A[i];
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int mod = 1000000007;
        int[][] memo = new int[n+1][1000001];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<1000001;j++){
                memo[i][j]=-1;
            }
        }
        System.out.println(dfs(0,"TTT",memo));
    }
    public static int dfs(int cur,String last3,int[][] memo){
        if(memo[cur][Integer.parseInt(last3)]!=-1){
            return memo[cur][Integer.parseInt(last3)];
        }
        if(cur==n){
            return 1;
        }
        int ret=0;
        for(char c='A';c<='G';c++){
            if(ok(last3+c)){
                ret=(ret+dfs(cur+1,last3.substring(1)+c,memo))%mod;
            }
        }
        memo[cur][Integer.parseInt(last3)]=ret;
        return ret;
    }
    public static boolean ok(String last4){
        for(int i=0;i<4;i++){
            char[] t=last4.toCharArray();
            if(i>=1){
                char temp=t[i];
                t[i]=t[i-1];
                t[i-1]=temp;
            }
            if(new String(t).contains("AGC")){
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] ABC = new int[3];
        for (int i = 0; i < 3; i++) {
            ABC[i] = sc.nextInt();
        }
        if (ABC[0] == 5 && ABC[1] == 5) {
            System.out.println("YES");
        } else if (ABC[0] + ABC[1] == 10 && ABC[2] == 5) {
            System.out.println("YES");
        } else if (ABC[0] + ABC[2] == 10 && ABC[1] == 5) {
            System.out.println("YES");
        } else if (ABC[1] + ABC[2] == 10 && ABC[0] == 5) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = 368;
        int[] m = new int[N];
        int[] f = new int[N];
        for (int i = 0; i < sc.nextInt(); i++) {
            String[] input = sc.next().split(" ");
            int a = Integer.parseInt(input[1]);
            int b = Integer.parseInt(input[2]) + 1;
            if (input[0].equals("M")) {
                m[a] += 2;
                m[b] -= 2;
            } else {
                f[a] += 2;
                f[b] -= 2;
            }
        }
        int a = 0, b = 0, c = 0;
        for (int i = 0; i < N; i++) {
            a += m[i];
            b += f[i];
            if (Math.min(a, b) > c) {
                c = Math.min(a, b);
            }
        }
        System.out.println(c);
    }
}
import java.util.*;

public class atcoder_ABC123_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[5];
        for(int i=0;i<5;i++){
            A[i] = sc.nextInt();
        }
        int min = Integer.MAX_VALUE;
        for(int i=0;i<5;i++){
            if(A[i]<min){
                min = A[i];
            }
        }
        int ans = (int) Math.ceil(N/min) + 4;
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] L = new int[N+1];
        for(int i=0;i<N;i++){
            L[i] = sc.nextInt();
        }
        L[N] = -1;
        int[] path = new int[N+1];
        int ind = 0;
        int count = 0;
        int x = 1;
        int t = -1;
        boolean flag = false;
        Map<Integer,Integer> Hash = new HashMap<>();
        for(int i=0;i<=N;i++){
            int ne = L[x];
            if(Hash.containsKey(ne)){
                flag = true;
                t = Hash.get(ne);
                break;
            }
            path[ind] = ne;
            ind++;
            Hash.put(ne,ind);
            x = ne;
        }
        if(flag){
            int[] loop = Arrays.copyOfRange(path,t,path.length);
            if(K<path.length){
                System.out.println(path[K]);
            }else{
                K = K-path.length;
                K = K%loop.length;
                System.out.println(loop[K]);
            }
        }else{
            System.out.println(path[K-1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC051_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] words = input.split(",");
        for (int i = 0; i < words.length; i++) {
            System.out.print(words[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int q = sc.nextInt();
        String s = sc.next();
        List<int[]> problems = new ArrayList<>();
        for (int i = 0; i < q; i++) {
            int[] problem = new int[2];
            problem[0] = sc.nextInt();
            problem[1] = sc.nextInt();
            problems.add(problem);
        }
        int[] cumsum = new int[n];
        cumsum[0] = 0;
        for (int i = 1; i < n; i++) {
            if (s.charAt(i - 1) == 'A' && s.charAt(i) == 'C') {
                cumsum[i] = cumsum[i - 1] + 1;
            } else {
                cumsum[i] = cumsum[i - 1];
            }
        }
        for (int[] problem : problems) {
            int l = problem[0];
            int r = problem[1];
            System.out.println(cumsum[r - 1] - cumsum[l - 1]);
        }
    }
}
import java.util.*;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> arr = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            arr.add(sc.nextInt());
        }
        if (arr.get(0) > 15) {
            System.out.println(15);
        } else {
            for (int i = 1; i < arr.size(); i++) {
                if (arr.get(i) - arr.get(i - 1) > 15) {
                    System.out.println(arr.get(i - 1) + 15);
                    break;
                }
            } else {
                if (arr.get(arr.size() - 1) == 90 || arr.get(arr.size() - 1) + 15 >= 90) {
                    System.out.println(90);
                } else {
                    System.out.println(arr.get(arr.size() - 1) + 15);
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for(int i=0;i<n;i++){
            lis[i] = sc.nextInt();
        }
        int a = 1, b = Integer.MAX_VALUE;
        int ans = b;
        while(a<=b){
            int mid = (a+b)/2;
            if(check(lis,k,mid)){
                ans = mid;
                b = mid-1;
            }
            else{
                a = mid+1;
            }
        }
        System.out.println(ans);
    }
    public static boolean check(int[] lis,int k,int mid){
        int count = 0;
        for(int i=0;i<lis.length;i++){
            if(lis[i]%mid==0){
                count++;
            }
            count -= lis[i]/mid;
        }
        return count>=k;
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.next();
        String T = sc.next();
        int A = sc.nextInt();
        int B = sc.nextInt();
        String U = sc.next();
        if (S.equals(U)) {
            A--;
        }
        if (T.equals(U)) {
            B--;
        }
        System.out.println(A + " " + B);
    }
}
import java.util.*;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        s = s.substring(0, s.length() - 1);
        String[] arr = s.split(" ");
        Map<String, Integer> map = new HashMap<>();
        for (String str : arr) {
            map.put(str, map.getOrDefault(str, 0) + 1);
        }
        int maxCount = 0;
        String maxStr = "";
        for (String str : map.keySet()) {
            if (map.get(str) > maxCount) {
                maxCount = map.get(str);
                maxStr = str;
            }
        }
        int maxIndex = s.lastIndexOf(maxStr);
        System.out.println(maxStr);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[] x = new int[n];
        int m = 0;
        int q = 0;
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        for (int a = 0; a < n - 1; a++) {
            if (x[a] >= x[a + 1]) {
                q = (x[a] - x[a + 1]) / d + 1;
                m = m + q;
                x[a + 1] = x[a + 1] + q * d;
            }
        }
        System.out.println(m);
    }
}
import java.util.*;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<List<Integer>> orig = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                for (int k = j + 1; k <= n; k++) {
                    for (int l = k + 1; l <= n; l++) {
                        List<Integer> perm = new ArrayList<>();
                        perm.add(i);
                        perm.add(j);
                        perm.add(k);
                        perm.add(l);
                        orig.add(perm);
                    }
                }
            }
        }
        int[] p = new int[n];
        int[] q = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = sc.nextInt();
            q[i] = sc.nextInt();
        }
        int pn = -1, qn = -1;
        for (int i = 0; i < orig.size(); i++) {
            List<Integer> perm = orig.get(i);
            if (Arrays.equals(p, perm.stream().mapToInt(Integer::intValue).toArray())) {
                pn = i;
            }
            if (Arrays.equals(q, perm.stream().mapToInt(Integer::intValue).toArray())) {
                qn = i;
            }
        }
        System.out.println(Math.abs(pn - qn));
    }
}
import java.util.*;

public class atcoder_ABC145_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int T = sc.nextInt();
        int[][] time_value = new int[N+1][2];
        for(int i=1;i<=N;i++){
            time_value[i][0] = sc.nextInt();
            time_value[i][1] = sc.nextInt();
        }
        Arrays.sort(time_value, (a,b)->a[1]-b[1]);
        int[][] dp = new int[N+1][T+1];
        for(int i=0;i<=N;i++){
            Arrays.fill(dp[i],-1);
        }
        for(int i=0;i<=N;i++){
            dp[i][0] = 0;
        }
        for(int i=1;i<=N;i++){
            for(int j=1;j<=T;j++){
                if(time_value[i][0]>j){
                    dp[i][j] = dp[i-1][j];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j],time_value[i][1]+dp[i-1][j-time_value[i][0]]);
                }
            }
        }
        int val_acum = time_value[N][1];
        int t = T-1;
        int max_val = val_acum + dp[N-1][t];
        for(int i=N-1;i>=1;i--){
            val_acum += time_value[i][1];
            t -= time_value[i+1][0];
            if(t<0){
                break;
            }else{
                max_val = Math.max(max_val,val_acum+dp[i-1][t]);
            }
        }
        System.out.println(max_val);
    }
}
import java.util.*;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            lst.add(sc.nextInt());
        }
        Collections.sort(lst);
        Collections.reverse(lst);
        int od = 0;
        for (int i : lst) {
            if ((i & 1) != 0) {
                od++;
            }
        }
        int sum = 0;
        boolean ok = false;
        for (int i = 0; i < n; i++) {
            if (lst.get(i) % 2 == 0) {
                sum += lst.get(i);
            } else {
                if (ok || od > 1) {
                    sum += lst.get(i);
                    od--;
                    ok = !ok;
                }
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int x = 0;
        if (k <= Math.max(n * n / 2, n * n - (n * n / 2))) {
            System.out.println("YES");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (i % 2 == j % 2 && x < k) {
                        System.out.print("L");
                        x++;
                    } else {
                        System.out.print("S");
                    }
                }
                System.out.println();
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = sc.nextInt();
        }
        List<Integer> lst_p = new ArrayList<Integer>();
        List<Integer> lst_m = new ArrayList<Integer>();
        for (int i = 0; i < N; i++) {
            if (lst[i] == 0) {
                K--;
            }
            if (lst[i] > 0) {
                lst_p.add(lst[i]);
            } else if (lst[i] < 0) {
                lst_m.add(lst[i]);
            }
        }
        int p = 0;
        int m = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int lasty = lst_m.size();
        int ans = 1000000000;
        for (int k = 0; k <= K; k++) {
            int j = x;
            int k_j = k - j;
            int m_k_j = lasty - k_j;
            if (j > lastx || k_j > lasty) {
                continue;
            }
            if (j == 0) {
                p = 0;
            } else {
                p = lst_p.get(j - 1);
            }
            if (k_j == 0) {
                m = 0;
            } else {
                m = lst_m.get(m_k_j);
            }
            ans = Math.min(ans, 2 * p + Math.abs(m), p + 2 * Math.abs(m));
            if (j < lastx) {
                x++;
            }
            if (k_j < lasty) {
                y--;
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] l = new int[n];
        for(int i=0;i<n;i++){
            l[i] = sc.nextInt();
        }
        int[] l2 = new int[n];
        for(int i=0;i<n;i++){
            if(l[i]%m==0){
                l2[i] = l[i]/m;
            }
            else{
                l2[i] = l[i]/m+1;
            }
        }
        int mx = 0;
        for(int i=0;i<n;i++){
            if(l2[i]>mx){
                mx = l2[i];
            }
        }
        int ind = -1;
        for(int i=0;i<n;i++){
            if(l2[i]==mx){
                ind = i;
            }
        }
        System.out.println(ind+1);
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        sc.nextLine();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = sc.nextInt();
        }
        int one = 0, zero = 0;
        for (int i = 0; i < N; i++) {
            if (lis[i] % 2 == 1) {
                one++;
            } else {
                zero++;
            }
        }
        int pattern_a = 0, pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += factorial(zero) / (factorial(j) * factorial(zero - j));
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += factorial(one) / (factorial(time) * factorial(one - time));
            }
            time++;
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static int factorial(int n) {
        if (n == 0) {
            return 1;
        }
        return n * factorial(n - 1);
    }
}
import java.util.*;
public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for(int i=0;i<n;i++) l[i] = sc.nextInt();
        Arrays.sort(l);
        int c = 0;
        for(int i=0;i<n;i++) {
            if(l[i]>c) c++;
        }
        System.out.println(c+1);
    }
}
import java.util.Scanner;

public class atcoder_ARC062_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int num_g = 0, num_p = 0, score = 0;
        for (int i = 0; i < s.length(); i++) {
            char x = s.charAt(i);
            if (x == 'g') {
                if (num_g - num_p > 0) {
                    score++;
                    num_p++;
                } else {
                    score = score;
                    num_g++;
                }
            } else if (x == 'p') {
                if (num_g - num_p > 0) {
                    score = score;
                    num_p++;
                } else {
                    score--;
                    num_g++;
                }
            }
        }
        System.out.println(score);
    }
}
import java.util.*;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int ans = aaa(N, "0");
        System.out.println(ans);
    }

    public static int aaa(int n, String s) {
        if (Integer.parseInt(s) > n) {
            return 0;
        }
        int ans = 1;
        Set<Character> set = new HashSet<>();
        for (char c : s.toCharArray()) {
            set.add(c);
        }
        if (set.size() == 3 && set.contains('7') && set.contains('5') && set.contains('3')) {
            ans = 1;
        } else {
            ans = 0;
        }
        for (char c : "753".toCharArray()) {
            ans += aaa(n, s + c);
        }
        return ans;
    }
}
import java.util.*;

public class atcoder_AGC002_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] balls = new int[n][2];
        balls[0][0] = 0;
        balls[0][1] = 1;
        for (int i = 0; i < m; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            int w_x = balls[x-1][0];
            int r_x = balls[x-1][1];
            int w_y = balls[y-1][0];
            int r_y = balls[y-1][1];
            if (w_x >= 1 && r_x >= 1) {
                balls[x-1][0]--;
                balls[y-1][1]++;
            } else if (w_x == 0) {
                balls[x-1][1]--;
                balls[y-1][1]++;
            } else {
                balls[x-1][0]--;
                balls[y-1][0]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (balls[i][1] > 0) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        if (n % 2 != 0) {
            System.out.println("No");
        } else if (s.substring(0, n/2).equals(s.substring(n/2))) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.*;
import java.io.*;

public class codeforces_61_B {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            String s1 = sc.next();
            String s2 = sc.next();
            String s3 = sc.next();
            int k = sc.nextInt();
            int[][] dp = new int[s1.length() + 1][s2.length() + 1];
            for (int j = 0; j <= s2.length(); j++) {
                dp[0][j] = 0;
            }
            for (int j = 0; j <= s1.length(); j++) {
                dp[j][0] = 0;
            }
            for (int j = 1; j <= s1.length(); j++) {
                for (int l = 1; l <= s2.length(); l++) {
                    if (s1.charAt(j - 1) == s2.charAt(l - 1)) {
                        dp[j][l] = dp[j - 1][l - 1] + 1;
                    } else {
                        dp[j][l] = Math.max(dp[j - 1][l], dp[j][l - 1]);
                    }
                }
            }
            int[][][] dp2 = new int[s1.length() + 1][s2.length() + 1][k + 1];
            for (int j = 0; j <= s2.length(); j++) {
                for (int l = 0; l <= k; l++) {
                    dp2[0][j][l] = 0;
                }
            }
            for (int j = 0; j <= s1.length(); j++) {
                for (int l = 0; l <= k; l++) {
                    dp2[j][0][l] = 0;
                }
            }
            for (int j = 1; j <= s1.length(); j++) {
                for (int l = 1; l <= s2.length(); l++) {
                    for (int m = 1; m <= k; m++) {
                        if (s1.charAt(j - 1) == s2.charAt(l - 1)) {
                            dp2[j][l][m] = dp2[j - 1][l - 1][m - 1] + 1;
                        } else {
                            dp2[j][l][m] = Math.max(dp2[j - 1][l][m], dp2[j][l - 1][m]);
                        }
                    }
                }
            }
            int ans = 0;
            for (int j = 1; j <= s1.length(); j++) {
                for (int l = 1; l <= s2.length(); l++) {
                    for (int m = 1; m <= k; m++) {
                        if (dp[j][l] == m && dp2[j][l][m] == m) {
                            ans++;
                        }
                    }
                }
            }
            System.out.println(ans);
        }
    }
}
public class atcoder_ABC136_B {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int i = 1;
        int ans = 0;
        while (Math.pow(10, i) <= N) {
            ans += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
            i += 2;
        }
        ans += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int max_val = 0, max_sign = 0, max_index = -1;
        for (int i = 0; i < n; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = (a[i] > 0) ? 1 : -1;
                max_index = i;
            }
        }
        if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * n - 1);
            for (int i = 0; i < n; i++) {
                System.out.println(max_index + 1 + " " + (i + 1));
            }
            for (int i = 0; i < n - 1; i++) {
                System.out.println(i + 1 + " " + (i + 2));
            }
        } else {
            System.out.println(2 * n - 1);
            for (int i = 0; i < n; i++) {
                System.out.println(max_index + 1 + " " + (i + 1));
            }
            for (int i = n - 1; i > 0; i--) {
                System.out.println(i + 1 + " " + (i - 1));
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        Map<Character, Integer> even = new HashMap<>();
        Map<Character, Integer> odd = new HashMap<>();
        for (int i = 0; i < s.length(); i += 2) {
            char c = s.charAt(i);
            even.put(c, even.getOrDefault(c, 0) + 1);
        }
        for (int i = 1; i < s.length(); i += 2) {
            char c = s.charAt(i);
            odd.put(c, odd.getOrDefault(c, 0) + 1);
        }
        int min = Math.min(s.length() - (even.getOrDefault('0', 0) + odd.getOrDefault('1', 0)), s.length() - (even.getOrDefault('1', 0) + odd.getOrDefault('0', 0)));
        System.out.println(min);
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int b = sc.nextInt();
        Queue<Task> remaining = new LinkedList<>();
        boolean running = false;
        int finish_time = 0;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            int time = sc.nextInt();
            int duration = sc.nextInt();
            Task task = new Task(time, duration, i);
            result[i] = 0;
            if (task.time > finish_time && remaining.isEmpty()) {
                running = true;
                finish_time = task.time + task.duration;
                result[i] = finish_time;
            } else {
                if (task.time >= finish_time && !remaining.isEmpty()) {
                    finish_time = runTask(remaining, finish_time, result);
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[i] = -1;
                }
            }
        }
        while (!remaining.isEmpty()) {
            finish_time = runTask(remaining, finish_time, result);
        }
        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }

    private static int runTask(Queue<Task> remaining, int finish_time, int[] result) {
        Task task = remaining.poll();
        finish_time = Math.max(finish_time, task.time) + task.duration;
        result[task.index] = finish_time;
        return finish_time;
    }
}

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}
import java.util.*;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        int pre = Integer.MAX_VALUE;
        int ans = 0;
        for (int j = 0; j < n; j++) {
            ans += Math.max(0, Math.min(pre - 1, a[j]));
            pre = Math.max(0, Math.min(pre - 1, a[j]));
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int x = sc.nextInt();
        int[] a = new int[n];
        for(int i=0;i<n;i++) a[i] = sc.nextInt();
        Arrays.sort(a);
        int ans = 0;
        if(a[0]>x) {
            System.out.println(0);
            return;
        }
        for(int i=0;i<n;i++) {
            if(a[i]>x) {
                x = 0;
                break;
            }
            x -= a[i];
            ans++;
        }
        if(x!=0) ans--;
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println((n * 2 + 1) / 3);
    }
}
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.nextLine();
        int n = S.length();
        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (S.charAt(i) != '?') {
                    dp[i][Integer.parseInt(S.charAt(i) + "")] = 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] = 1;
                    }
                }
            } else {
                if (S.charAt(i) != '?') {
                    for (int k = 0; k < 13; k++) {
                        for (int j = 0; j < 10; j++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int k = 0; k < 13; k++) {
                    dp[i][k] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.*;
public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        List<List<Integer>> points = new ArrayList<>();
        for(int i=0;i<n;i++){
            List<Integer> point = new ArrayList<>();
            for(int j=0;j<d;j++){
                point.add(sc.nextInt());
            }
            points.add(point);
        }
        int count = 0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(isInteger(distance(points.get(i),points.get(j)))){
                    count++;
                }
            }
        }
        System.out.println(count);
    }
    public static double distance(List<Integer> p1, List<Integer> p2){
        double dist = 0.0;
        for(int i=0;i<p1.size();i++){
            dist += Math.pow(p1.get(i)-p2.get(i),2);
        }
        return Math.sqrt(dist);
    }
    public static boolean isInteger(double num){
        return Math.floor(num) == num;
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int l = 1;
        int r = n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if (idxcnt < n) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l--;
        idxcnt = l * (l + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
import java.util.*;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        List<Integer> c = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            a.add(sc.nextInt());
        }
        for (int i = 0; i < n; i++) {
            b.add(sc.nextInt());
        }
        for (int i = 0; i < n; i++) {
            c.add(sc.nextInt());
        }
        int x = 0;
        int y = 0;
        int z = 0;
        for (int i : a) {
            x += i;
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            z += i;
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
import java.util.*;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Map<Integer, Integer> w = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int x = sc.nextInt();
            w.put(x, w.getOrDefault(x, 0) + 1);
        }
        int c = 0;
        for (int i : w.keySet()) {
            if (i == 0) {
                c += w.get(i) * (w.get(i) - 1);
            } else {
                if (-i in w) {
                    c += w.get(i) * w.get(-i);
                }
            }
        }
        System.out.println(c / 2);
    }
}
100%|██████████| 250/250 [00:00<00:00, 6287.07it/s]
import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int candeleIntere = sc.nextInt();
        int b = sc.nextInt();
        int s = 0;
        int restoSciolte = 0;
        while (candeleIntere > 0 || restoSciolte >= b) {
            candeleIntere += restoSciolte / b;
            restoSciolte %= b;
            s += candeleIntere;
            restoSciolte += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model WizardLM/WizardCoder-15B-V1.0 --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_400_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC118_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_387_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC137_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC137_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC120_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC120_C.java' returned non-zero exit status 1.
Filename:  codeforces_397_B.java
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC148_F.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_222_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_445_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_456_A.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC132_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_147_A.java
Filename:  atcoder_ABC152_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC152_E.java' returned non-zero exit status 1.
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  atcoder_ABC155_E.java
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_469_A.java' returned non-zero exit status 1.
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-15B-V1.0/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 84
Success: ['atcoder_ABC108_B.java', 'codeforces_678_A.java', 'atcoder_ABC174_C.java', 'codeforces_379_A.java', 'atcoder_ABC140_D.java', 'atcoder_ABC143_A.java', 'codeforces_25_A.java', 'codeforces_518_B.java', 'codeforces_242_A.java', 'codeforces_276_B.java', 'codeforces_58_B.java', 'atcoder_ABC171_B.java', 'atcoder_ABC170_A.java', 'codeforces_669_A.java', 'codeforces_79_A.java', 'atcoder_AGC027_A.java', 'codeforces_108_B.java', 'atcoder_ABC158_A.java', 'atcoder_ABC171_E.java', 'codeforces_203_A.java', 'atcoder_ABC111_C.java', 'codeforces_705_B.java', 'atcoder_ABC142_A.java', 'codeforces_274_A.java', 'codeforces_534_B.java', 'codeforces_106_B.java', 'atcoder_AGC035_B.java', 'codeforces_92_A.java', 'codeforces_546_A.java', 'atcoder_ABC112_A.java', 'codeforces_333_B.java', 'codeforces_265_B.java', 'atcoder_AGC033_B.java', 'atcoder_ABC125_C.java', 'atcoder_ABC151_A.java', 'atcoder_ABC178_A.java', 'atcoder_AGC002_A.java', 'codeforces_32_B.java', 'codeforces_267_A.java', 'codeforces_354_A.java', 'atcoder_ABC124_C.java', 'codeforces_581_A.java', 'codeforces_356_A.java', 'atcoder_AGC006_B.java', 'codeforces_581_B.java', 'atcoder_ABC122_C.java', 'atcoder_AGC006_A.java', 'atcoder_AGC024_B.java', 'codeforces_607_A.java', 'atcoder_ABC125_A.java', 'atcoder_AGC038_A.java', 'atcoder_ABC112_C.java', 'codeforces_609_B.java', 'codeforces_340_A.java', 'codeforces_282_B.java', 'atcoder_ABC043_B.java', 'codeforces_450_A.java', 'codeforces_11_A.java', 'codeforces_190_A.java', 'codeforces_242_B.java', 'atcoder_ABC164_A.java', 'atcoder_ABC154_A.java', 'codeforces_49_A.java', 'atcoder_ABC133_B.java', 'codeforces_154_A.java', 'atcoder_ABC139_B.java', 'atcoder_ABC051_A.java', 'codeforces_23_B.java', 'codeforces_287_A.java', 'atcoder_ABC104_C.java', 'codeforces_569_A.java', 'atcoder_ABC152_C.java', 'atcoder_ABC134_E.java', 'atcoder_ABC070_B.java', 'atcoder_ABC168_B.java', 'codeforces_567_A.java', 'codeforces_55_A.java', 'codeforces_544_B.java', 'atcoder_AGC046_A.java', 'codeforces_59_A.java', 'codeforces_608_A.java', 'atcoder_ABC145_B.java', 'codeforces_682_B.java', 'atcoder_ABC153_A.java']
Fail: ['atcoder_ABC042_A.java', 'codeforces_351_A.java', 'atcoder_AGC002_B.java', 'atcoder_ABC135_D.java', 'codeforces_459_A.java', 'atcoder_ABC123_D.java', 'atcoder_ABC089_C.java', 'codeforces_624_B.java', 'atcoder_ABC147_D.java', 'codeforces_514_A.java', 'atcoder_AGC003_C.java', 'atcoder_ABC149_C.java', 'atcoder_AGC028_A.java', 'codeforces_8_B.java', 'atcoder_AGC034_B.java', 'atcoder_ABC168_C.java', 'codeforces_327_A.java', 'atcoder_ABC124_A.java', 'atcoder_ARC062_B.java', 'atcoder_ABC167_C.java', 'atcoder_ABC105_D.java', 'atcoder_ABC129_E.java', 'atcoder_ABC142_C.java', 'codeforces_302_A.java', 'atcoder_ABC125_B.java', 'atcoder_ABC169_D.java', 'codeforces_644_B.java', 'atcoder_ABC123_C.java', 'atcoder_ABC150_C.java', 'codeforces_400_B.java', 'codeforces_596_B.java', 'atcoder_AGC033_A.java', 'codeforces_203_B.java', 'atcoder_ARC086_B.java', 'atcoder_ABC162_D.java', 'codeforces_621_A.java', 'atcoder_AGC007_C.java', 'atcoder_ABC145_E.java', 'codeforces_147_A.java', 'codeforces_148_B.java', 'atcoder_ABC149_B.java', 'codeforces_299_A.java', 'atcoder_ABC109_B.java', 'codeforces_334_A.java', 'codeforces_373_B.java', 'codeforces_56_B.java', 'codeforces_459_B.java', 'atcoder_AGC046_B.java', 'atcoder_ABC155_D.java', 'atcoder_AGC021_B.java', 'atcoder_ABC169_E.java', 'codeforces_369_B.java', 'codeforces_216_B.java', 'atcoder_ABC178_B.java', 'atcoder_AGC019_A.java', 'atcoder_ABC150_D.java', 'codeforces_296_A.java', 'codeforces_37_A.java', 'codeforces_678_B.java', 'codeforces_651_A.java', 'codeforces_30_A.java', 'codeforces_95_A.java', 'codeforces_404_A.java', 'atcoder_ABC145_C.java', 'codeforces_612_B.java', 'atcoder_ABC155_E.java', 'codeforces_350_B.java', 'atcoder_AGC013_A.java', 'atcoder_ABC143_D.java', 'atcoder_ABC127_B.java', 'codeforces_134_A.java', 'atcoder_ABC172_D.java', 'codeforces_31_A.java', 'codeforces_598_A.java', 'atcoder_ABC150_E.java', 'atcoder_ABC146_D.java', 'codeforces_653_A.java', 'codeforces_637_A.java', 'atcoder_ABC110_C.java', 'codeforces_306_A.java', 'atcoder_ABC165_C.java', 'codeforces_665_A.java', 'atcoder_ABC123_B.java', 'codeforces_99_A.java', 'codeforces_408_B.java', 'atcoder_AGC017_A.java', 'codeforces_61_B.java', 'codeforces_474_B.java', 'codeforces_96_B.java', 'codeforces_519_B.java', 'codeforces_632_B.java', 'atcoder_ABC126_E.java', 'atcoder_AGC004_D.java', 'codeforces_397_B.java', 'codeforces_171_A.java', 'codeforces_189_A.java', 'codeforces_313_B.java', 'atcoder_ABC166_C.java', 'atcoder_ABC106_C.java', 'codeforces_462_B.java', 'codeforces_421_A.java', 'codeforces_387_A.java', 'codeforces_342_B.java', 'atcoder_AGC027_B.java', 'codeforces_629_B.java', 'atcoder_ABC127_F.java', 'atcoder_ABC119_B.java', 'atcoder_ABC136_B.java', 'codeforces_110_B.java', 'atcoder_AGC012_A.java', 'codeforces_500_A.java', 'atcoder_AGC014_D.java', 'codeforces_146_A.java', 'codeforces_617_B.java', 'atcoder_ABC169_C.java', 'atcoder_ABC158_B.java', 'atcoder_ABC114_C.java', 'codeforces_583_B.java', 'atcoder_ABC167_D.java', 'atcoder_AGC028_B.java', 'codeforces_268_A.java', 'atcoder_AGC043_B.java', 'atcoder_ABC164_D.java', 'atcoder_AGC005_B.java', 'atcoder_ABC128_C.java', 'codeforces_412_A.java', 'codeforces_469_A.java', 'codeforces_629_A.java', 'atcoder_ABC152_E.java', 'atcoder_ABC118_C.java', 'codeforces_400_A.java', 'atcoder_ABC137_D.java', 'codeforces_673_A.java', 'codeforces_387_B.java', 'atcoder_AGC029_C.java', 'atcoder_ABC140_F.java', 'codeforces_231_A.java', 'atcoder_ABC107_D.java', 'codeforces_131_B.java', 'atcoder_ABC126_D.java', 'codeforces_222_A.java', 'atcoder_ABC120_C.java', 'codeforces_456_A.java', 'atcoder_ARC102_C.java', 'atcoder_ABC107_C.java', 'atcoder_AGC037_E.java', 'atcoder_AGC010_B.java', 'codeforces_67_B.java', 'codeforces_86_A.java', 'atcoder_AGC011_C.java', 'atcoder_ABC132_A.java', 'codeforces_55_B.java', 'atcoder_AGC025_A.java', 'atcoder_ABC122_D.java', 'codeforces_622_A.java', 'codeforces_445_A.java', 'codeforces_272_B.java', 'codeforces_7_B.java', 'codeforces_70_B.java', 'atcoder_ABC126_E.java', 'codeforces_579_A.java', 'atcoder_ABC146_D.java', 'atcoder_AGC004_D.java', 'atcoder_ABC133_E.java', 'codeforces_342_B.java', 'atcoder_AGC004_B.java', 'codeforces_672_A.java', 'atcoder_ABC132_F.java', 'atcoder_ABC174_E.java', 'atcoder_ABC169_D.java', 'atcoder_ABC148_F.java']
