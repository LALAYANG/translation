+ model=WizardLM/WizardCoder-Python-34B-V1.0
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model WizardLM/WizardCoder-Python-34B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 08:44:24 [__init__.py:241] Automatically detected platform cuda.
You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message.
found 250 inputs
INFO 08-21 08:44:25 [utils.py:326] non-default args: {'model': 'WizardLM/WizardCoder-Python-34B-V1.0', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 08:44:32 [__init__.py:711] Resolved architecture: LlamaForCausalLM
WARNING 08-21 08:44:32 [__init__.py:2819] Casting torch.float16 to torch.bfloat16.
INFO 08-21 08:44:32 [__init__.py:1750] Using max model len 4096
INFO 08-21 08:44:33 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=353609)[0;0m INFO 08-21 08:44:33 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=353609)[0;0m INFO 08-21 08:44:33 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='WizardLM/WizardCoder-Python-34B-V1.0', speculative_config=None, tokenizer='WizardLM/WizardCoder-Python-34B-V1.0', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=WizardLM/WizardCoder-Python-34B-V1.0, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=353609)[0;0m WARNING 08-21 08:44:33 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=353609)[0;0m INFO 08-21 08:44:33 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_5fa6e572'), local_subscribe_addr='ipc:///tmp/bbe9d9a6-9f1f-4ce5-9e57-a43f2a861da1', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:36 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_427fa86f'), local_subscribe_addr='ipc:///tmp/957b1d75-565e-4149-ad96-ecad13de2198', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:36 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_ad6d3cee'), local_subscribe_addr='ipc:///tmp/4318c965-477c-48e7-822c-280580c6c20c', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:37 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:37 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:37 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:37 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:37 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:37 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:37 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_72f0605c'), local_subscribe_addr='ipc:///tmp/d0da80ca-6b15-4fa9-91e4-f341e6815e7a', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:37 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:37 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m WARNING 08-21 08:44:37 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m WARNING 08-21 08:44:37 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:38 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-Python-34B-V1.0...
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:38 [gpu_model_runner.py:1953] Starting to load model WizardLM/WizardCoder-Python-34B-V1.0...
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:38 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:38 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:38 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:38 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:44:38 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:44:38 [weight_utils.py:296] Using model weights format ['*.bin']
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards:   0% Completed | 0/7 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards:  14% Completed | 1/7 [00:10<01:01, 10.27s/it]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards:  29% Completed | 2/7 [00:22<00:58, 11.60s/it]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards:  43% Completed | 3/7 [00:33<00:43, 10.99s/it]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards:  57% Completed | 4/7 [00:43<00:32, 10.94s/it]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards:  71% Completed | 5/7 [00:54<00:21, 10.75s/it]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards:  86% Completed | 6/7 [01:04<00:10, 10.62s/it]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards: 100% Completed | 7/7 [01:14<00:00, 10.41s/it]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Loading pt checkpoint shards: 100% Completed | 7/7 [01:14<00:00, 10.67s/it]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m 
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:45:53 [default_loader.py:262] Loading weights took 74.70 seconds
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:45:53 [default_loader.py:262] Loading weights took 74.88 seconds
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:45:54 [gpu_model_runner.py:2007] Model loading took 31.4323 GiB and 75.627315 seconds
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:45:54 [gpu_model_runner.py:2007] Model loading took 31.4323 GiB and 75.627729 seconds
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:46:05 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f164024642/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:46:05 [backends.py:559] Dynamo bytecode transform time: 10.69 s
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:46:10 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/f164024642/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:46:10 [backends.py:559] Dynamo bytecode transform time: 15.78 s
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:46:13 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 7.708 s
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:46:18 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 7.645 s
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:46:19 [monitor.py:34] torch.compile takes 10.69 s in total
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:46:19 [monitor.py:34] torch.compile takes 15.78 s in total
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:46:21 [gpu_worker.py:276] Available KV cache memory: 36.35 GiB
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:46:21 [gpu_worker.py:276] Available KV cache memory: 36.35 GiB
[1;36m(EngineCore_0 pid=353609)[0;0m INFO 08-21 08:46:22 [kv_cache_utils.py:849] GPU KV cache size: 397,072 tokens
[1;36m(EngineCore_0 pid=353609)[0;0m INFO 08-21 08:46:22 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.94x
[1;36m(EngineCore_0 pid=353609)[0;0m INFO 08-21 08:46:22 [kv_cache_utils.py:849] GPU KV cache size: 397,072 tokens
[1;36m(EngineCore_0 pid=353609)[0;0m INFO 08-21 08:46:22 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 96.94x
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   3%|▎         | 2/67 [00:00<00:04, 14.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:03, 15.78it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:03, 16.19it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:03, 16.52it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:03, 16.57it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:03, 16.76it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  21%|██        | 14/67 [00:00<00:03, 16.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:02, 17.14it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  27%|██▋       | 18/67 [00:01<00:02, 16.91it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:01<00:02, 16.99it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:01<00:02, 17.07it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:01<00:02, 16.85it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  39%|███▉      | 26/67 [00:01<00:02, 16.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:01<00:02, 16.83it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  45%|████▍     | 30/67 [00:01<00:02, 16.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:01<00:02, 16.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:02<00:02, 16.23it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:02<00:01, 15.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  57%|█████▋    | 38/67 [00:02<00:01, 15.49it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:02<00:01, 15.58it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  63%|██████▎   | 42/67 [00:02<00:01, 15.62it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:02<00:01, 15.38it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:02<00:01, 15.34it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  72%|███████▏  | 48/67 [00:02<00:01, 15.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:03<00:01, 14.98it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:03<00:01, 14.76it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  81%|████████  | 54/67 [00:03<00:00, 14.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:03<00:00, 14.28it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:03<00:00, 14.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  90%|████████▉ | 60/67 [00:03<00:00, 14.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:03<00:00, 14.47it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:04<00:00, 14.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  99%|█████████▊| 66/67 [00:04<00:00, 14.87it/s][1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:46:26 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:04<00:00, 15.62it/s]
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:46:26 [custom_all_reduce.py:196] Registering 6402 cuda graph addresses
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP1 pid=353617)[0;0m INFO 08-21 08:46:26 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=353609)[0;0m [1;36m(VllmWorker TP0 pid=353615)[0;0m INFO 08-21 08:46:26 [gpu_model_runner.py:2708] Graph capturing finished in 5 secs, took 0.90 GiB
[1;36m(EngineCore_0 pid=353609)[0;0m INFO 08-21 08:46:26 [core.py:214] init engine (profile, create kv cache, warmup model) took 32.45 seconds
INFO 08-21 08:46:27 [llm.py:298] Supported_tasks: ['generate']
Translating 250 files...
  0%|          | 0/250 [00:00<?, ?it/s]100%|██████████| 250/250 [00:00<00:00, 7768.04it/s]
Adding requests:   0%|          | 0/250 [00:00<?, ?it/s]Adding requests:  51%|█████     | 128/250 [00:00<00:00, 1273.05it/s]Adding requests: 100%|██████████| 250/250 [00:00<00:00, 587.78it/s] 
Processed prompts:   0%|          | 0/250 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/250 [00:07<29:14,  7.05s/it, est. speed input: 15.90 toks/s, output: 13.48 toks/s]Processed prompts:   1%|          | 3/250 [00:07<08:31,  2.07s/it, est. speed input: 50.08 toks/s, output: 39.83 toks/s]Processed prompts:   2%|▏         | 5/250 [00:07<04:17,  1.05s/it, est. speed input: 82.91 toks/s, output: 69.20 toks/s]Processed prompts:   3%|▎         | 7/250 [00:08<02:34,  1.58it/s, est. speed input: 116.65 toks/s, output: 98.94 toks/s]Processed prompts:   3%|▎         | 8/250 [00:08<02:04,  1.95it/s, est. speed input: 140.17 toks/s, output: 113.96 toks/s]Processed prompts:   4%|▍         | 11/250 [00:08<01:07,  3.55it/s, est. speed input: 189.29 toks/s, output: 160.52 toks/s]Processed prompts:   6%|▌         | 14/250 [00:08<00:42,  5.52it/s, est. speed input: 297.35 toks/s, output: 208.60 toks/s]Processed prompts:   7%|▋         | 17/250 [00:08<00:33,  6.96it/s, est. speed input: 339.88 toks/s, output: 252.33 toks/s]Processed prompts:   8%|▊         | 20/250 [00:08<00:24,  9.30it/s, est. speed input: 388.49 toks/s, output: 300.65 toks/s]Processed prompts:   9%|▉         | 22/250 [00:08<00:22, 10.08it/s, est. speed input: 426.51 toks/s, output: 330.47 toks/s]Processed prompts:  10%|▉         | 24/250 [00:09<00:20, 10.79it/s, est. speed input: 477.97 toks/s, output: 360.85 toks/s]Processed prompts:  11%|█         | 27/250 [00:09<00:17, 13.08it/s, est. speed input: 569.63 toks/s, output: 409.30 toks/s]Processed prompts:  12%|█▏        | 29/250 [00:09<00:17, 12.83it/s, est. speed input: 594.03 toks/s, output: 438.76 toks/s]Processed prompts:  12%|█▏        | 31/250 [00:09<00:18, 12.09it/s, est. speed input: 675.21 toks/s, output: 467.13 toks/s]Processed prompts:  13%|█▎        | 33/250 [00:09<00:16, 13.32it/s, est. speed input: 702.08 toks/s, output: 499.80 toks/s]Processed prompts:  14%|█▍        | 35/250 [00:09<00:16, 12.84it/s, est. speed input: 739.69 toks/s, output: 529.61 toks/s]Processed prompts:  15%|█▍        | 37/250 [00:09<00:15, 13.86it/s, est. speed input: 766.75 toks/s, output: 562.34 toks/s]Processed prompts:  16%|█▌        | 40/250 [00:10<00:14, 14.21it/s, est. speed input: 820.72 toks/s, output: 609.16 toks/s]Processed prompts:  18%|█▊        | 44/250 [00:10<00:11, 18.00it/s, est. speed input: 887.75 toks/s, output: 680.83 toks/s]Processed prompts:  18%|█▊        | 46/250 [00:10<00:11, 18.18it/s, est. speed input: 958.51 toks/s, output: 714.45 toks/s]Processed prompts:  20%|██        | 50/250 [00:10<00:08, 22.82it/s, est. speed input: 1052.38 toks/s, output: 787.59 toks/s]Processed prompts:  21%|██        | 53/250 [00:10<00:08, 22.76it/s, est. speed input: 1113.73 toks/s, output: 839.36 toks/s]Processed prompts:  22%|██▏       | 56/250 [00:10<00:09, 21.50it/s, est. speed input: 1157.78 toks/s, output: 888.62 toks/s]Processed prompts:  24%|██▎       | 59/250 [00:10<00:09, 19.66it/s, est. speed input: 1199.95 toks/s, output: 936.56 toks/s]Processed prompts:  25%|██▌       | 63/250 [00:11<00:08, 22.64it/s, est. speed input: 1287.33 toks/s, output: 1010.54 toks/s]Processed prompts:  26%|██▋       | 66/250 [00:11<00:08, 21.64it/s, est. speed input: 1335.56 toks/s, output: 1061.50 toks/s]Processed prompts:  28%|██▊       | 69/250 [00:11<00:08, 21.98it/s, est. speed input: 1377.42 toks/s, output: 1114.68 toks/s]Processed prompts:  29%|██▉       | 72/250 [00:11<00:07, 22.38it/s, est. speed input: 1429.92 toks/s, output: 1167.93 toks/s]Processed prompts:  30%|███       | 76/250 [00:11<00:06, 26.40it/s, est. speed input: 1494.17 toks/s, output: 1245.58 toks/s]Processed prompts:  33%|███▎      | 82/250 [00:11<00:05, 32.65it/s, est. speed input: 1587.77 toks/s, output: 1364.76 toks/s]Processed prompts:  34%|███▍      | 86/250 [00:11<00:05, 29.01it/s, est. speed input: 1641.43 toks/s, output: 1434.11 toks/s]Processed prompts:  36%|███▋      | 91/250 [00:12<00:05, 30.42it/s, est. speed input: 1711.95 toks/s, output: 1528.81 toks/s]Processed prompts:  38%|███▊      | 95/250 [00:12<00:05, 29.33it/s, est. speed input: 1846.47 toks/s, output: 1601.98 toks/s]Processed prompts:  40%|███▉      | 99/250 [00:12<00:05, 28.78it/s, est. speed input: 1999.48 toks/s, output: 1675.32 toks/s]Processed prompts:  42%|████▏     | 104/250 [00:12<00:04, 32.09it/s, est. speed input: 2073.60 toks/s, output: 1775.87 toks/s]Processed prompts:  44%|████▍     | 110/250 [00:12<00:03, 35.03it/s, est. speed input: 2163.84 toks/s, output: 1896.11 toks/s]Processed prompts:  46%|████▌     | 115/250 [00:12<00:03, 36.85it/s, est. speed input: 2280.86 toks/s, output: 1996.67 toks/s]Processed prompts:  48%|████▊     | 119/250 [00:13<00:05, 23.15it/s, est. speed input: 2297.96 toks/s, output: 2037.77 toks/s]Processed prompts:  49%|████▉     | 123/250 [00:13<00:05, 25.17it/s, est. speed input: 2390.82 toks/s, output: 2116.76 toks/s]Processed prompts:  52%|█████▏    | 130/250 [00:13<00:03, 32.65it/s, est. speed input: 2527.41 toks/s, output: 2268.46 toks/s]Processed prompts:  54%|█████▎    | 134/250 [00:13<00:03, 32.92it/s, est. speed input: 2581.96 toks/s, output: 2347.12 toks/s]Processed prompts:  55%|█████▌    | 138/250 [00:13<00:03, 28.84it/s, est. speed input: 2689.03 toks/s, output: 2414.50 toks/s]Processed prompts:  57%|█████▋    | 142/250 [00:13<00:03, 27.49it/s, est. speed input: 2735.25 toks/s, output: 2486.26 toks/s]Processed prompts:  58%|█████▊    | 146/250 [00:14<00:04, 25.64it/s, est. speed input: 2829.54 toks/s, output: 2554.81 toks/s]Processed prompts:  60%|██████    | 151/250 [00:14<00:03, 28.54it/s, est. speed input: 2910.22 toks/s, output: 2657.36 toks/s]Processed prompts:  62%|██████▏   | 155/250 [00:14<00:04, 20.69it/s, est. speed input: 2924.34 toks/s, output: 2698.79 toks/s]Processed prompts:  63%|██████▎   | 158/250 [00:14<00:04, 19.06it/s, est. speed input: 2966.20 toks/s, output: 2740.24 toks/s]Processed prompts:  64%|██████▍   | 161/250 [00:14<00:05, 15.48it/s, est. speed input: 3014.61 toks/s, output: 2763.81 toks/s]Processed prompts:  65%|██████▌   | 163/250 [00:15<00:08, 10.22it/s, est. speed input: 2987.90 toks/s, output: 2732.21 toks/s]Processed prompts:  66%|██████▌   | 165/250 [00:15<00:07, 10.74it/s, est. speed input: 3031.27 toks/s, output: 2760.55 toks/s]Processed prompts:  68%|██████▊   | 171/250 [00:15<00:05, 15.61it/s, est. speed input: 3173.64 toks/s, output: 2891.31 toks/s]Processed prompts:  70%|██████▉   | 174/250 [00:15<00:04, 17.61it/s, est. speed input: 3220.92 toks/s, output: 2955.37 toks/s]Processed prompts:  71%|███████   | 177/250 [00:16<00:03, 19.59it/s, est. speed input: 3299.75 toks/s, output: 3019.73 toks/s]Processed prompts:  72%|███████▏  | 180/250 [00:16<00:04, 17.20it/s, est. speed input: 3314.49 toks/s, output: 3061.10 toks/s]Processed prompts:  74%|███████▎  | 184/250 [00:16<00:03, 18.46it/s, est. speed input: 3374.87 toks/s, output: 3139.08 toks/s]Processed prompts:  75%|███████▍  | 187/250 [00:16<00:03, 20.44it/s, est. speed input: 3446.42 toks/s, output: 3204.92 toks/s]Processed prompts:  76%|███████▌  | 190/250 [00:16<00:03, 19.09it/s, est. speed input: 3493.62 toks/s, output: 3255.68 toks/s]Processed prompts:  77%|███████▋  | 193/250 [00:17<00:03, 15.04it/s, est. speed input: 3511.04 toks/s, output: 3283.24 toks/s]Processed prompts:  78%|███████▊  | 195/250 [00:17<00:03, 13.95it/s, est. speed input: 3531.63 toks/s, output: 3307.17 toks/s]Processed prompts:  79%|███████▉  | 197/250 [00:17<00:04, 12.07it/s, est. speed input: 3549.81 toks/s, output: 3320.75 toks/s]Processed prompts:  80%|███████▉  | 199/250 [00:17<00:05,  8.95it/s, est. speed input: 3516.99 toks/s, output: 3306.64 toks/s]Processed prompts:  80%|████████  | 201/250 [00:18<00:06,  7.45it/s, est. speed input: 3491.09 toks/s, output: 3295.93 toks/s]Processed prompts:  81%|████████  | 203/250 [00:18<00:06,  7.71it/s, est. speed input: 3519.90 toks/s, output: 3315.37 toks/s]Processed prompts:  82%|████████▏ | 205/250 [00:18<00:05,  8.90it/s, est. speed input: 3609.19 toks/s, output: 3353.11 toks/s]Processed prompts:  83%|████████▎ | 208/250 [00:18<00:03, 11.49it/s, est. speed input: 3692.10 toks/s, output: 3422.12 toks/s]Processed prompts:  84%|████████▍ | 210/250 [00:19<00:08,  4.55it/s, est. speed input: 3523.54 toks/s, output: 3280.91 toks/s]Processed prompts:  85%|████████▍ | 212/250 [00:20<00:06,  5.54it/s, est. speed input: 3539.60 toks/s, output: 3321.44 toks/s]Processed prompts:  86%|████████▌ | 214/250 [00:20<00:06,  5.54it/s, est. speed input: 3536.98 toks/s, output: 3328.38 toks/s]Processed prompts:  86%|████████▌ | 215/250 [00:20<00:06,  5.40it/s, est. speed input: 3523.32 toks/s, output: 3327.73 toks/s]Processed prompts:  86%|████████▋ | 216/250 [00:20<00:05,  5.71it/s, est. speed input: 3522.49 toks/s, output: 3339.80 toks/s]Processed prompts:  87%|████████▋ | 218/250 [00:21<00:05,  5.90it/s, est. speed input: 3541.04 toks/s, output: 3355.80 toks/s]Processed prompts:  88%|████████▊ | 219/250 [00:21<00:05,  5.65it/s, est. speed input: 3539.41 toks/s, output: 3357.14 toks/s]Processed prompts:  88%|████████▊ | 221/250 [00:21<00:03,  7.52it/s, est. speed input: 3597.97 toks/s, output: 3407.00 toks/s]Processed prompts:  89%|████████▉ | 223/250 [00:21<00:04,  5.63it/s, est. speed input: 3573.74 toks/s, output: 3392.91 toks/s]Processed prompts:  90%|████████▉ | 224/250 [00:22<00:04,  5.83it/s, est. speed input: 3582.24 toks/s, output: 3405.09 toks/s]Processed prompts:  90%|█████████ | 226/250 [00:22<00:03,  6.33it/s, est. speed input: 3598.89 toks/s, output: 3433.45 toks/s]Processed prompts:  91%|█████████ | 228/250 [00:22<00:02,  7.77it/s, est. speed input: 3640.43 toks/s, output: 3481.19 toks/s]Processed prompts:  93%|█████████▎| 232/250 [00:22<00:01,  9.19it/s, est. speed input: 3716.04 toks/s, output: 3565.83 toks/s]Processed prompts:  94%|█████████▎| 234/250 [00:23<00:02,  7.65it/s, est. speed input: 3720.02 toks/s, output: 3577.16 toks/s]Processed prompts:  94%|█████████▍| 235/250 [00:23<00:02,  6.54it/s, est. speed input: 3710.25 toks/s, output: 3571.60 toks/s]Processed prompts:  94%|█████████▍| 236/250 [00:24<00:03,  4.39it/s, est. speed input: 3655.76 toks/s, output: 3524.66 toks/s]Processed prompts:  95%|█████████▍| 237/250 [00:24<00:02,  4.96it/s, est. speed input: 3675.49 toks/s, output: 3546.48 toks/s]Processed prompts:  95%|█████████▌| 238/250 [00:24<00:02,  4.52it/s, est. speed input: 3663.60 toks/s, output: 3541.62 toks/s]Processed prompts:  96%|█████████▌| 239/250 [00:24<00:03,  3.37it/s, est. speed input: 3629.93 toks/s, output: 3503.82 toks/s]Processed prompts:  96%|█████████▌| 240/250 [00:25<00:03,  2.89it/s, est. speed input: 3595.64 toks/s, output: 3474.67 toks/s]Processed prompts:  96%|█████████▋| 241/250 [00:25<00:02,  3.07it/s, est. speed input: 3592.08 toks/s, output: 3476.34 toks/s]Processed prompts:  97%|█████████▋| 242/250 [00:26<00:02,  2.78it/s, est. speed input: 3562.52 toks/s, output: 3455.17 toks/s]Processed prompts:  97%|█████████▋| 243/250 [00:26<00:02,  2.48it/s, est. speed input: 3528.77 toks/s, output: 3427.68 toks/s]Processed prompts:  98%|█████████▊| 244/250 [00:27<00:03,  1.75it/s, est. speed input: 3425.18 toks/s, output: 3345.30 toks/s]Processed prompts:  98%|█████████▊| 245/250 [00:29<00:05,  1.03s/it, est. speed input: 3219.74 toks/s, output: 3147.67 toks/s]Processed prompts:  98%|█████████▊| 246/250 [00:30<00:03,  1.13it/s, est. speed input: 3200.50 toks/s, output: 3131.75 toks/s]Processed prompts:  99%|█████████▉| 247/250 [00:32<00:03,  1.26s/it, est. speed input: 3026.48 toks/s, output: 2968.68 toks/s]Processed prompts:  99%|█████████▉| 248/250 [00:33<00:02,  1.07s/it, est. speed input: 2995.31 toks/s, output: 2954.38 toks/s]Processed prompts: 100%|█████████▉| 249/250 [01:03<00:09,  9.83s/it, est. speed input: 1573.61 toks/s, output: 1592.20 toks/s]Processed prompts: 100%|██████████| 250/250 [01:10<00:00,  8.89s/it, est. speed input: 1428.81 toks/s, output: 1493.78 toks/s]Processed prompts: 100%|██████████| 250/250 [01:10<00:00,  8.89s/it, est. speed input: 1428.81 toks/s, output: 1493.78 toks/s]Processed prompts: 100%|██████████| 250/250 [01:10<00:00,  3.56it/s, est. speed input: 1428.81 toks/s, output: 1493.78 toks/s]
+ python3 clean_generations_translation.py --model WizardLM/WizardCoder-Python-34B-V1.0 --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/250 [00:00<?, ?it/s]import java.util.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in);
        int N = Integer.parseInt(br.readLine());
        List<List<Integer>> G = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            G.add(new ArrayList<>());
        }
        Map<Integer, Integer> E = new HashMap<>();
        for (int i = 0; i < N - 1; i++) {
            String[] input = br.readLine().split(" ");
            int a = Integer.parseInt(input[0]) - 1;
            int b = Integer.parseInt(input[1]) - 1;
            G.get(a).add(b);
            G.get(b).add(a);
            E.put(a * 1000 + b, 0);
        }
        int K = bfs(0, N, G, E);
        System.out.println(K);
        for (int value : E.values()) {
            System.out.println(value);
        }
    }

    public static int bfs(int v, int N, List<List<Integer>> G, Map<Integer, Integer> E) {
        boolean[] visited = new boolean[N];
        Queue<Integer> queue = new LinkedList<>();
        int K = -1;
        int[] node2color = new int[N];
        Arrays.fill(node2color, -1);
        queue.add(v);
        visited[v] = true;
        int color = 0;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            color++;
            for (int nex : G.get(q)) {
                if (visited[nex]) {
                    continue;
                }
                visited[nex] = true;
                if (node2color[q] == color) {
                    color++;
                }
                node2color[nex] = color;
                E.put(Math.min(q, nex) * 1000 + Math.max(q, nex), color);
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }
}
import java.util.Scanner;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        double[] x = new double[N];
        for (int i = 0; i < N; i++) {
            String input = scanner.next();
            double value = Double.parseDouble(input.substring(0, input.length() - 3));
            if (input.endsWith("JPY")) {
                x[i] = value;
            } else if (input.endsWith("BTC")) {
                x[i] = value * 380000.0;
            }
        }
        double sum = 0;
        for (double d : x) {
            sum += d;
        }
        System.out.printf("%.6f", sum);
    }
}
import java.util.Scanner;

public class atcoder_AGC028_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = (int) Math.pow(10, 6);
        int MOD = (int) Math.pow(10, 9) + 7;
        long[] A = new long[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextLong();
        }
        long[] fact = new long[M];
        fact[0] = 1;
        for (int i = 1; i < M; i++) {
            fact[i] = (fact[i - 1] * i) % MOD;
        }
        long[] inv = new long[N];
        inv[0] = 1;
        for (int i = 1; i < N; i++) {
            inv[i] = (inv[i - 1] + inv[N - 1 - i]) % MOD;
        }
        long ans = 0;
        for (int i = 0; i < N; i++) {
            ans += A[i] * inv[i];
            ans %= MOD;
        }
        ans *= fact[N];
        ans %= MOD;
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_569_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();
        int ans = 0;
        while (s < t) {
            s *= q;
            ans++;
        }
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> ls_xyh = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> input = new ArrayList<>();
            input.add(scanner.nextInt());
            input.add(scanner.nextInt());
            input.add(scanner.nextInt());
            ls_xyh.add(input);
        }
        String[] result = solve(n, ls_xyh);
        System.out.println(result[0] + " " + result[1] + " " + result[2]);
    }

    public static String[] solve(int n, List<List<Integer>> ls_xyh) {
        int x0 = 0, y0 = 0, h0 = 0;
        for (int i = 0; i < n; i++) {
            if (ls_xyh.get(i).get(2) > 0) {
                x0 = ls_xyh.get(i).get(0);
                y0 = ls_xyh.get(i).get(1);
                h0 = ls_xyh.get(i).get(2);
                break;
            }
        }
        List<List<Integer>> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                int h = h0 + Math.abs(cx - x0) + Math.abs(cy - y0);
                cands.add(List.of(cx, cy, h));
            }
        }
        for (List<Integer> xyh : ls_xyh) {
            int x = xyh.get(0);
            int y = xyh.get(1);
            int h = xyh.get(2);
            cands.removeIf(cand -> Math.max(cand.get(2) - Math.abs(cand.get(0) - x) - Math.abs(cand.get(1) - y), 0) != h);
        }
        List<Integer> result = cands.get(0);
        return new String[]{Integer.toString(result.get(0)), Integer.toString(result.get(1)), Integer.toString(result.get(2))};
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int D = scanner.nextInt();
        int G = scanner.nextInt();
        int[][] PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = scanner.nextInt();
            PC[i][1] = scanner.nextInt();
        }
        int ans = (int) (1e9);
        for (int i = 0; i < (1 << D); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((i & (1 << j)) != 0) {
                    score += (j + 1) * 100 * PC[j][0] + PC[j][1];
                    problem += PC[j][0];
                }
            }
            if (score > G) {
                continue;
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((i & (1 << j)) == 0) {
                    if (left > (100 * (j + 1) * PC[j][0] + PC[j][1]) || left < 0) {
                        continue;
                    }
                    int tmp = (left + (100 * (j + 1) - 1) / (100 * (j + 1));
                    ans = Math.min(ans, problem + Math.min(tmp, PC[j][0]));
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_678_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int vamshi = scanner.nextInt();
        int z = scanner.nextInt();
        System.out.println((vamshi / z + 1) * z);
    }
}
import java.util.*;
import java.io.*;

public class codeforces_400_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int i = 0; i < t; i++) {
            String[] s = sc.nextLine().split("");
            int[] arr = new int[s.length];
            for (int j = 0; j < s.length; j++) {
                if (s[j].equals("X")) {
                    arr[j] = 1;
                } else {
                    arr[j] = 0;
                }
            }
            List<String> res = new ArrayList<>();
            for (int a = 1; a <= 12; a++) {
                if (12 % a == 0) {
                    boolean flag = true;
                    for (int b = 1; b <= 12 / a; b++) {
                        int sum = 0;
                        for (int k = 0; k < a; k++) {
                            for (int l = 0; l < b; l++) {
                                sum += arr[k + l * a];
                            }
                            if (sum != b) {
                                flag = false;
                                break;
                            }
                        }
                        if (flag) {
                            res.add(a + "x" + b);
                        }
                    }
                }
            }
            System.out.println(res.size() + " " + String.join(" ", res));
        }
    }
}
import java.util.*;

public class atcoder_ABC105_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int[] cum_remainders = new int[N + 1];
        cum_remainders[0] = 0;
        for (int i = 0; i < N; i++) {
            cum_remainders[i + 1] = (cum_remainders[i] + A[i]) % M;
        }
        Map<Integer, Integer> remainder_counts = new HashMap<>();
        for (int r : cum_remainders) {
            remainder_counts.put(r, remainder_counts.getOrDefault(r, 0) + 1);
        }
        long combinations = 0;
        for (int count : remainder_counts.values()) {
            combinations += (count * (count - 1) / 2);
        }
        System.out.println(combinations);
    }
}
import java.util.Scanner;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int N = scanner.nextInt();
        int s_r = scanner.nextInt();
        int s_c = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        boolean Judge = false;
        int S_L = 0, S_R = 0, S_U = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        for (int x = 0; x < N; x++) {
            if (S.charAt(x) == 'L') {
                S_L++;
                if (S_L - T_R - s_c == 0) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'R') {
                S_R++;
                if (s_c + (S_R - T_L) == W + 1) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'U') {
                S_U++;
                if (S_U - T_D - s_r == 0) {
                    Judge = true;
                }
            } else if (S.charAt(x) == 'D') {
                S_D++;
                if (s_r + (S_D - T_U) == H + 1) {
                    Judge = true;
                }
            }
            if (T.charAt(x) == 'L') {
                if (S_R - T_L + s_c != 1) {
                    T_L++;
                }
            } else if (T.charAt(x) == 'R') {
                if (s_c + (T_R - S_L) != W) {
                    T_R++;
                }
            } else if (T.charAt(x) == 'U') {
                if (S_D - T_U + s_r != 1) {
                    T_U++;
                }
            } else if (T.charAt(x) == 'D') {
                if (s_r + (T_D - S_U) != H) {
                    T_D++;
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class codeforces_55_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        while (n % 2 == 0) {
            n /= 2;
        }
        if (n == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        int k = sc.nextInt();
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.Scanner;
import java.util.HashSet;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] s = new String[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.next();
        }
        int flag = 0;
        char[] d1 = new char[n];
        char[] d2 = new char[n];
        HashSet<Character> rem = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    d1[i] = s[i].charAt(j);
                }
                if (i == n - j - 1) {
                    d2[i] = s[i].charAt(j);
                }
                if (i != j && i != n - j - 1) {
                    rem.add(s[i].charAt(j));
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!new String(d1).equals(new String(d2))){
            System.out.println("NO");
        } else if (new HashSet<Character>(d1).size() != 1) {
            System.out.println("NO");
        } else if (rem.containsAll(new HashSet<Character>(d1))){
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = B; j <= D; j++) {
                d[i][j] = (d[i][j - 1] * i + d[i - 1][j] * j - d[i - 1][j - 1] * (i - 1) * (j - 1)) % m;
            }
        }
        System.out.println(d[C][D]);
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        for (int i = 0; i < t; i++) {
            String[] op = scanner.next().split(" ");
            if (op[0].equals("alloc")) {
                int pos = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        pos++;
                        if (pos == Integer.parseInt(op[1])) {
                            for (int k = j - Integer.parseInt(op[1]) + 1; k <= j; k++) {
                                alocuente[k] = ind;
                            }
                            System.out.println(ind);
                            ind++;
                            break;
                        }
                    } else {
                        pos = 0;
                    }
                }
                if (pos == 0) {
                    System.out.println("NULL");
                }
            } else if (op[0].equals("erase")) {
                int eraseVal = Integer.parseInt(op[1]);
                if (eraseVal < 0 || eraseVal > m) {
                    System.out.println("ILLEGAL_ERASE_ARGUMENT");
                } else {
                    boolean found = false;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == eraseVal) {
                            alocuente[j] = 0;
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    }
                }
            } else if (op[0].equals("defragment")) {
                int cnt = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] == 0) {
                        cnt++;
                    }
                }
                int[] temp = new int[m - cnt];
                int index = 0;
                for (int j = 0; j < m; j++) {
                    if (alocuente[j] != 0) {
                        temp[index++] = alocuente[j];
                    }
                }
                for (int j = 0; j < cnt; j++) {
                    temp[index++] = 0;
                }
                alocuente = temp;
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC021_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] X = new int[N];
        int[] Y = new int[N];
        for (int i = 0; i < N; i++) {
            X[i] = scanner.nextInt();
            Y[i] = scanner.nextInt();
        }
        double[] angles = new double[N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (i != j) {
                    angles[i] += Math.atan2(X[i] - X[j], Y[i] - Y[j]);
                }
            }
        }
        for (int i = 0; i < N; i++) {
            double angle = angles[i] / (2 * Math.PI);
            System.out.printf("%.16f\n", angle);
        }
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC089_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String[] S = new String[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.next();
        }
        int[] march_lis = new int[5];
        for (String s : S) {
            char c = Character.toUpperCase(s.charAt(0));
            if (c == 'M') {
                march_lis[0]++;
            } else if (c == 'A') {
                march_lis[1]++;
            } else if (c == 'R') {
                march_lis[2]++;
            } else if (c == 'C') {
                march_lis[3]++;
            } else if (c == 'H') {
                march_lis[4]++;
            }
        }
        int ans = 0;
        for (int x = 0; x < march_lis.length; x++) {
            for (int y = 0; y < march_lis.length; y++) {
                for (int z = 0; z < march_lis.length; z++) {
                    if (x != y && y != z && x != z) {
                        ans += march_lis[x] * march_lis[y] * march_lis[z];
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC013_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int ans = 0;
        for (int i = 1; i < N - 1; i++) {
            if (A[i - 1] < A[i] && A[i] > A[i + 1] || A[i - 1] > A[i] && A[i] < A[i + 1]) {
                ans++;
            }
        }
        System.out.println(ans + 1);
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        HashMap<Integer, Integer> l = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int num = lst[i];
            if (!l.containsKey(num)) {
                l.put(num, 1);
            } else {
                l.put(num, l.get(num) + 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            int count = l.get(lst[i]);
            if (count > 1) {
                res += n - i - count;
                l.put(lst[i], count - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String S = sc.next();
        int rNum = 0, gNum = 0, bNum = 0, sum = 0;
        for (int i = 0; i < N; i++) {
            if (S.charAt(i) == 'R') {
                rNum++;
            } else if (S.charAt(i) == 'G') {
                gNum++;
            } else if (S.charAt(i) == 'B') {
                bNum++;
            }
        }
        for (int step = 1; step <= Math.ceil(N / 2.0); step++) {
            for (int i = 0; i < N - 2 * step; i++) {
                String s = "" + S.charAt(i) + S.charAt(i + step) + S.charAt(i + 2 * step);
                if (s.equals("RGB") || s.equals("RBG") || s.equals("BGR") || s.equals("BRG") || s.equals("GBR") || s.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(rNum * gNum * bNum - sum);
    }
}
import java.util.*;

public class atcoder_AGC014_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            adj.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            adj.get(a).add(b);
            adj.get(b).add(a);
        }
        Queue<Integer> que = new LinkedList<>();
        que.offer(1);
        int[] seen = new int[N + 1];
        int[] par = new int[N + 1];
        int[] child_num = new int[N + 1];
        Arrays.fill(seen, 0);
        Arrays.fill(par, 0);
        Arrays.fill(child_num, 0);
        seen[1] = 1;
        par[1] = 0;
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adj.get(v)) {
                if (seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    child_num[v]++;
                    que.offer(u);
                }
            }
        }
        Queue<Integer> seq = new LinkedList<>();
        for (int i = 1; i <= N; i++) {
            if (child_num[i] == 0) {
                seq.offer(i);
            }
        }
        while (!seq.isEmpty()) {
            int c = seq.poll();
            seen[c] = 0;
            if (seen[par[c]] == 0) {
                System.out.println("First");
                return;
            }
            seen[par[c]] = 0;
            child_num[par[par[c]]]--;
            if (child_num[par[par[c]]] == 0) {
                seq.offer(par[par[c]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] lines = {input};
        boolean debug = false;

        void log(String text) {
            if (debug) {
                System.out.println(text);
            }
        }

        String[] parseInput(String[] linesAsString) {
            String[] lines = new String[linesAsString.length];
            if (linesAsString == null) {
                debug = false;
                lines[0] = scanner.nextLine();
            } else {
                debug = true;
                lines = linesAsString;
            }
            String c = lines[0].split(" ")[0];
            return new String[]{c};
        }

        String solve(String c) {
            String a = "abcdefghijklmnopqrstuvwxyz";
            int i = a.indexOf(c);
            return a.charAt(i + 1) + "";
        }

        String[] result = parseInput(lines);
        if (result.length > 1) {
            for (String r : result) {
                System.out.print(r);
            }
        } else {
            System.out.print(result[0]);
        }
    }
}
import java.util.Scanner;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        int[] ans = new int[n];
        int mx = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            ans[i] = Math.max(0, mx - arr[i] + 1);
            if (arr[i] > mx) {
                mx = arr[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(ans[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        List<List<Integer>> edge = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edge.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge.get(X).add(Y);
            edge.get(Y).add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (!used[i]) {
                ans++;
                Queue<Integer> queue = new LinkedList<>();
                queue.add(i);
                while (!queue.isEmpty()) {
                    int node = queue.poll();
                    used[node] = true;
                    for (int nextnode : edge.get(node)) {
                        if (!used[nextnode]) {
                            queue.add(nextnode);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC118_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int gcd = Arrays.stream(A).reduce(1, (a, b) -> {
            int gcd = a;
            while (b != 0) {
                int temp = b;
                b = a % b;
                a = temp;
            }
            return gcd;
        });
        System.out.println(gcd);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int mod = (int) Math.pow(10, 9) + 7;
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] coef = new int[n];
        for (int i = 1; i <= (int) Math.sqrt(n); i++) {
            coef[i - 1] = n / i - n / (i + 1);
        }
        int[] coef2 = new int[n - coef.length];
        for (int i = 0; i < n - coef.length; i++) {
            coef2[i] = 1;
        }
        coef = concat(coef, coef2);
        int nn = coef.length;
        int[][] dp = new int[k + 1][nn];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            int tmp = 0;
            for (int j = nn - 1; j >= 0; j--) {
                tmp += dp[i - 1][nn - 1 - j];
                tmp %= mod;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= mod;
            }
        }
        int sum = 0;
        for (int i = 0; i < nn; i++) {
            sum += dp[k][i];
            sum %= mod;
        }
        System.out.println(sum);
    }

    public static int[] concat(int[] a, int[] b) {
        int[] c = new int[a.length + b.length];
        System.arraycopy(a, 0, c, 0, a.length);
        System.arraycopy(b, 0, c, a.length, b.length);
        return c;
    }
}
import java.util.Scanner;

public class codeforces_581_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int min = Math.min(a, b);
        int max = Math.max(a, b);
        int difference = max - min;
        System.out.println(min + " " + difference / 2);
    }
}
import java.util.Scanner;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int i = 1;
        while (m >= i) {
            m -= i;
            i = (i % n) + 1;
        }
        System.out.println(m);
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Integer> a = new ArrayList<>();
        String[] input = scanner.nextLine().split(" ");
        for (String s : input) {
            a.add(Integer.parseInt(s));
        }
        for (int i = 0; i < a.size(); i++) {
            if (a.get(i) == 0) {
                System.out.println(i + 1);
                break;
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        java.util.Arrays.sort(l);
        boolean found = false;
        for (int i = 0; i < n - 2; i++) {
            if (l[i] + 1 == l[i + 1] && l[i + 1] == l[i] + 2) {
                System.out.println("YES");
                found = true;
                break;
            }
        }
        if (!found) {
            System.out.println("NO");
        }
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String record_of_movements = sc.nextLine();
        int x = 0, y = 0;
        HashMap<Character, int[]> d_movement = new HashMap<Character, int[]>();
        d_movement.put('L', new int[]{0, -1});
        d_movement.put('R', new int[]{0, 1});
        d_movement.put('U', new int[]{1, 0});
        d_movement.put('D', new int[]{-1, 0});
        HashMap<String, String> d = new HashMap<String, String>();
        d.put(x + "," + y, "");
        boolean bug = false;
        for (int i = 0; i < record_of_movements.length(); i++) {
            char move = record_of_movements.charAt(i);
            int[] temp = new int[]{x, y};
            x += d_movement.get(move)[0];
            y += d_movement.get(move)[1];
            if (!d.containsKey(x + "," + y)) {
                for (char step : d_movement.keySet()) {
                    int[] temp2 = new int[]{x + d_movement.get(step)[0], y + d_movement.get(step)[1]};
                    if (!temp2[0].equals(temp[0] && temp2[1].equals(temp[1]) && d.containsKey(temp2[0] + "," + temp2[1])) {
                        bug = true;
                        break;
                    }
                }
            } else {
                bug = true;
            }
            if (bug) {
                break;
            }
            d.put(x + "," + y, "");
        }
        if (bug) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] number = new int[n];
        int h1 = 0;
        int h2 = 0;
        int x = 0;
        for (int i = 0; i < n; i++) {
            number[i] = scanner.nextInt();
            if (number[i] != 4 && number[i] != 7) {
                System.out.println("NO");
                x++;
                break;
            }
            if (i < n / 2) {
                h1 += number[i];
            } else {
                h2 += number[i];
            }
        }
        if (x == 0) {
            if (h1 == h2) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_299_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_inp = sc.nextInt();
        int[] arr_inp = new int[num_inp];
        for (int i = 0; i < num_inp; i++) {
            arr_inp[i] = sc.nextInt();
        }
        Arrays.sort(arr_inp);
        int gcd = arr_inp[0];
        for (int i = 1; i < num_inp; i++) {
            gcd = gcd(gcd, arr_inp[i]);
        }
        System.out.println(gcd == 1 ? arr_inp[0] : -1);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        String t = scanner.next();
        HashMap<Character, Integer> freqs = new HashMap<>();
        HashMap<Character, Integer> freqt = new HashMap<>();
        int yay = 0;
        int whoops = 0;

        for (int i = 0; i < s.length(); i++) {
            char letra = s.charAt(i);
            if (freqs.containsKey(letra)) {
                freqs.put(letra, freqs.get(letra) + 1);
            } else {
                freqs.put(letra, 1);
            }
        }

        for (int i = 0; i < t.length(); i++) {
            char letra = t.charAt(i);
            if (freqt.containsKey(letra)) {
                freqt.put(letra, freqt.get(letra) + 1);
            } else {
                freqt.put(letra, 1);
            }
        }

        for (char letra : freqs.keySet()) {
            while (freqs.get(letra) > 0 && freqt.containsKey(letra) && freqt.get(letra) > 0) {
                yay++;
                freqs.put(letra, freqs.get(letra) - 1);
                freqt.put(letra, freqt.get(letra) - 1);
            }
        }

        for (char letra : freqs.keySet()) {
            while (freqs.get(letra) > 0) {
                if (Character.isLowerCase(letra) && freqt.containsKey(Character.toUpperCase(letra)) && freqt.get(Character.toUpperCase(letra)) > 0) {
                    whoops++;
                    freqs.put(letra, freqs.get(letra) - 1);
                    freqt.put(Character.toUpperCase(letra), freqt.get(Character.toUpperCase(letra)) - 1);
                } else if (Character.isUpperCase(letra) && freqt.containsKey(Character.toLowerCase(letra)) && freqt.get(Character.toLowerCase(letra)) > 0) {
                    whoops++;
                    freqs.put(letra, freqs.get(letra) - 1);
                    freqt.put(Character.toLowerCase(letra), freqt.get(Character.toLowerCase(letra)) - 1);
                } else {
                    break;
                }
            }
        }

        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] lista = new int[n];
        int[] listb = new int[n];

        for (int i = 0; i < n; i++) {
            lista[i] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            listb[i] = scanner.nextInt();
        }

        for (int k = 1; k <= n; k++) {
            if (k == a) {
                System.out.print(1 + " ");
            } else if (k == b) {
                System.out.print(2 + " ");
            } else {
                System.out.print(3 + " ");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] l = scanner.nextLine().split(" ");
        int x = Integer.parseInt(l[0]);
        int y = Integer.parseInt(l[1]);
        int a = Integer.parseInt(l[2]);
        int b = Integer.parseInt(l[3]);

        int gcd(int a, int b) {
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
            return b;
        }

        int lcm(int a, int b) {
            return a * b / gcd(a, b);
        }

        int lcmValue = lcm(x, y);
        int result = b / lcmValue - ((a - 1) / lcmValue);
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = sc.nextInt();
        }
        Arrays.sort(S);
        boolean[] flag = new boolean[N];
        Arrays.fill(flag, true);
        int[] cur = new int[N];
        cur[0] = S[N-1];
        flag[N-1] = false;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.length;
            for (int k = 0; k < N; k++) {
                if (flag[k] && S[k] < cur[j]) {
                    cur[j+1] = S[k];
                    j++;
                    flag[k] = false;
                    if (j == jM-1) {
                        break;
                }
            }
            Arrays.sort(cur);
        }
        System.out.println(Arrays.toString(cur));
        if (Arrays.equals(S, cur)) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input1 = scanner.nextLine().split(" ");
        int v1 = Integer.parseInt(input1[0]);
        int v2 = Integer.parseInt(input1[1]);
        String[] input2 = scanner.nextLine().split(" ");
        int t = Integer.parseInt(input2[0]);
        int d = Integer.parseInt(input2[1]);
        int a = 1;
        int v = v1;
        int distance = 0;
        for (int i = 0; i < t; i++) {
            if (v - v2 > (t - i - 1) * d) {
                a *= -1;
                v = (t - i - 1) * d + v2;
            }
            distance += v;
            v += a * d;
        }
        System.out.println(distance);
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_672_A {
    public static void main(String[] args) {
        ArrayList<Integer> li = new ArrayList<Integer>();
        int ind = 0;
        for (int i = 1; i <= 370; i++) {
            ArrayList<Integer> temp = new ArrayList<Integer>();
            int p = i, q = i;
            int count = 0;
            while (p != 0) {
                p /= 10;
                count++;
            }
            if (count == 1) {
                li.add(i);
            }
            if (count == 2) {
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                li.addAll(temp);
            }
            if (count == 3) {
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        System.out.println(li.get(n - 1));
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();
        if (dragon <= princess) {
            System.out.println(0);
            System.exit(0);
        }
        int result = 0;
        int position = t * princess;
        position += princess * position / (dragon - princess);
        while (position < c) {
            result++;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_59_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String txt = sc.nextLine();
        int cu = 0;
        int cl = 0;
        for (int i = 0; i < txt.length(); i++) {
            char z = txt.charAt(i);
            if (Character.isLowerCase(z)) {
                cl++;
            } else {
                cu++;
            }
        }
        String out;
        if (cu > cl) {
            out = txt.toUpperCase();
        } else {
            out = txt.toLowerCase();
        }
        System.out.println(out);
    }
}
import java.util.Scanner;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] L = new int[n];
        int r = 1;
        for (int i = 0; i < n; i++) {
            int k = scanner.nextInt();
            for (int j = 0; j < k; j++) {
                L[i] = r;
                r++;
            }
        }
        int m = scanner.nextInt();
        for (int i = 0; i < m; i++) {
            int j = scanner.nextInt();
            System.out.println(L[j - 1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            lst[i] = substract(a, b);
        }
        for (int i = 0; i < n; i++) {
            System.out.println(lst[i]);
        }
    }

    public static int substract(int a, int b) {
        if (a > b) {
            int total = 0;
            while (a > 0 && b > 0) {
                total += a / b;
                a = a % b;
                if (a > 0) {
                    total += b / a;
                    b = b % a;
                }
            }
            return total;
        }
        if (a < b) {
            int total = 0;
            while (a > 0 && b > 0) {
                total += b / a;
                b = b % a;
                if (b > 0) {
                    total += a / b;
                    a = a % b;
                }
            }
            return total;
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int ans = 0;
        for (int i = 1; i <= N; i++) {
            ans += i * (N / i) * (N / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            System.out.println(a + b);
        }
    }
}
import java.util.Scanner;

public class codeforces_265_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int ans = n - 1;
        int last = 0;
        for (int i = 0; i < n; i++) {
            ans += Math.abs(last - l[i]) + 1;
            last = l[i];
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n, m, s, f;
        n = scanner.nextInt();
        m = scanner.nextInt();
        s = scanner.nextInt();
        f = scanner.nextInt();

        int d;
        char c;
        if (s < f) {
            d = 1;
            c = 'R';
        } else {
            d = -1;
            c = 'L';
        }
        StringBuilder res = new StringBuilder();
        int i = 1;
        int j = s;
        int t, l, r;
        int k = 1;
        while (j != f) {
            if (i > t && k < m) {
                t = scanner.nextInt();
                l = scanner.nextInt();
                r = scanner.nextInt();
                k++;
            }
            if (i == t && (l <= j && j <= r || l <= j + d && j + d <= r)) {
                res.append("X");
            } else {
                res.append(c);
                j += d;
            }
            i++;
        }
        System.out.println(res.toString());
    }
}
import java.util.Scanner;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            int x = scanner.nextInt();
            int t = l;
            while (t <= r) {
                int next_val = comp[t - 1];
                if (out[t - 1] == 0 && t != x) {
                    out[t - 1] = x;
                }
                comp[t - 1] = (t >= x) ? r + 1 : x;
                t = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tcs = 1;
        int tc = 1;
        while (tc <= tcs) {
            int a = scanner.nextInt();
            if (a == 0) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            tc++;
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC158_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int mod = (int) (1e9 + 7);
        int ans = 0;
        int rep = N / (A + B);
        ans += rep * A;
        int res = N - rep * (A + B);
        ans += Math.min(res, A);
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] m = scanner.nextLine().split(" ");
        boolean possible = true;
        for (String i : m) {
            int count = 0;
            for (String j : m) {
                if (i.equals(j)) {
                    count++;
                }
            }
            if (count >= n / 2 + 1) {
                possible = false;
                break;
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC019_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int h = sc.nextInt();
        int s = sc.nextInt();
        int d = sc.nextInt();
        int n = sc.nextInt();
        int best1L = Math.min(q * 4, Math.min(h * 2, s);
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class atcoder_ABC134_E {
    public static int binarySearch(int key, ArrayList<ArrayList<Integer>> ans) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int mid = (bad + good) / 2;
            if (ans.get(mid).get(ans.get(mid).size() - 1) < key) {
                good = mid;
            } else {
                bad = mid;
            }
        }
        return good;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            int A = sc.nextInt();
            int idx = binarySearch(A, ans);
            if (idx == ans.size()) {
                ArrayList<Integer> newList = new ArrayList<>();
                newList.add(A);
                ans.add(newList);
            } else {
                ans.get(idx).add(A);
            }
        }
        System.out.println(ans.size());
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] hm1 = scanner.nextLine().split(":");
        int h1 = Integer.parseInt(hm1[0]);
        int m1 = Integer.parseInt(hm1[1]);
        m1 += h1 * 60;
        String[] hm2 = scanner.nextLine().split(":");
        int h2 = Integer.parseInt(hm2[0]);
        int m2 = Integer.parseInt(hm2[1]);
        m2 += h2 * 60;
        m2 = m1 - m2;
        m2 %= 1440;
        System.out.printf("%02d:%02d", m2 / 60, m2 % 60);
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int at = scanner.nextInt();
        int b = scanner.nextInt();
        int bt = scanner.nextInt();
        int t1 = scanner.nextInt();
        int t2 = scanner.nextInt();
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int ans = 0;
        while (now < fin && now < 1140) {
            if (now + bt > st) {
                ans++;
            }
            now += b;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        for (int i = 0; i < n; i++) {
            String x = sc.next();
            int a = 0, b = 0;
            for (int j = 0; j < s.length(); j++) {
                if (s.charAt(j) == x.charAt(0)) {
                    a++;
                } else if (s.charAt(j) == x.charAt(1)) {
                    b++;
                } else {
                    ans += Math.min(a, b);
                    a = 0;
                    b = 0;
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            if (a < 2) {
                System.out.println(0);
            } else {
                System.out.println(a - 2);
            }
        }
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC150_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int num = scanner.nextInt();
        Set<Integer> numSet = new HashSet<>();
        for (int i = 0; i < n; i++) {
            numSet.add(scanner.nextInt());
        }
        Set<Integer> twoTimesSet = new HashSet<>();
        for (int i : numSet) {
            int j = 1;
            while (i % 2 == 0) {
                twoTimesSet.add(j);
                i /= 2;
                j++;
            }
            if (twoTimesSet.size() != 1) {
                System.out.println(0);
                return;
            }
        }
        int lcm = numSet.iterator().next();
        for (int i : numSet) {
            lcm = lcm * i / gcd(lcm, i);
        }
        System.out.println((num - lcm / 2) / lcm + 1);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.*;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while (solve(sc)) {
        }
    }

    public static boolean solve(Scanner sc) {
        try {
            String[] line0 = sc.nextLine().split(" ");
            if (line0 == null) {
                return false;
            }
            int n = Integer.parseInt(line0[0]);
            int m = Integer.parseInt(line0[1]);
            Map<Integer, Set<Integer>> g = new HashMap<>();
            for (int i = 1; i <= n; i++) {
                g.put(i, new HashSet<>());
            }
            for (int i = 0; i < m; i++) {
                int a = sc.nextInt();
                int b = sc.nextInt();
                g.get(a).add(b);
                g.get(b).add(a);
            }
            Set<Integer> seen = new HashSet<>();
            int ans = 0;
            for (int i = 1; i <= n; i++) {
                if (!seen.contains(i)) {
                    Pair<Integer, Integer> result = dfs(g, seen, i);
                    int nodes = result.getKey();
                    int edges = result.getValue();
                    if (nodes > 1 && nodes % 2 == 1 && 2 * nodes == edges) {
                        ans++;
                    }
                }
            }
            if ((n - ans) % 2 == 1) {
                ans++;
            }
            System.out.println(ans);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public static Pair<Integer, Integer> dfs(Map<Integer, Set<Integer>> g, Set<Integer> seen, int i) {
        if (seen.contains(i)) {
            return new Pair<>(0, 0);
        }
        seen.add(i);
        int nodes = 1;
        int edges = g.get(i).size();
        for (int j : g.get(i)) {
            Pair<Integer, Integer> result = dfs(g, seen, j);
            nodes += result.getKey();
            edges += result.getValue();
        }
        return new Pair<>(nodes, edges);
    }
}

class Pair<K, V> {
    private K key;
    private V value;

    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }

    public K getKey() {
        return key;
    }

    public V getValue() {
        return value;
    }
}
import java.util.Scanner;

public class atcoder_ABC149_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] cookies = scanner.nextLine().split(" ");
        int[] intCookies = new int[cookies.length];
        for (int i = 0; i < cookies.length; i++) {
            intCookies[i] = Integer.parseInt(cookies[i]);
        }
        int leftOver = intCookies[0] - intCookies[2];
        int takahashi = Math.max(0, leftOver);
        System.out.println(takahashi + " " + (intCookies[1] + " " + (Math.max(0, intCookies[1] - Math.abs(leftOver))));
    }
}
import java.util.Scanner;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int current_level = 0;
        int counter = 0;
        int counter_turns = -1;
        while (counter < n) {
            counter_turns++;
            for (int i = 0; i < n; i++) {
                if (a[i] != -1 && a[i] <= counter) {
                    counter++;
                    a[i] = -1;
                }
            }
            for (int i = n - 1; i >= 0; i--) {
                if (a[i] != -1 && a[i] <= counter) {
                    counter++;
                    a[i] = -1;
                }
            }
        }
        System.out.println(counter_turns);
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[1000010];
        int[] dp = new int[100010];
        for (int i = 0; i < 100010; i++) {
            l[i] = 0;
            dp[i] = 0;
        }
        for (int i = 0; i < n; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            l[a] = b;
        }
        if (l[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        for (int i = 1; i < 100010; i++) {
            if (l[i] == 0) {
                dp[i] = dp[i - 1];
            } else {
                if (l[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - l[i] - 1] + 1;
                }
            }
            if (dp[i] > mx) {
                mx = dp[i];
            }
        }
        System.out.println(n - mx);
    }
}
import java.util.Scanner;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += a[i];
        }

        if (sum % (n * (n + 1) / 2) != 0) {
            System.out.println("NO");
        } else {
            int k = sum / (n * (n + 1) / 2);
            int[] b = new int[n + 1];
            for (int i = 0; i < n; i++) {
                b[i] = a[i];
            }
            b[n] = a[0];

            boolean isValid = true;
            for (int i = 1; i <= n; i++) {
                if ((k - b[i - 1] + b[i]) % n != 0 || (k - b[i - 1] + b[i]) / n < 0) {
                    isValid = false;
                    break;
                }
            }

            if (isValid) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();

        if (n < 1) {
            if (m < 1) {
                System.out.println(n + " " + m);
                System.exit(0);
            }
            System.out.println("Impossible");
            System.exit(0);
        }

        if (m > n) {
            int min = m;
            int max = n + m - 1;
            System.out.println(min + " " + max);
        } else {
            int min = n;
            int max = n + m - 1;
            if (m == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }
}
import java.util.Scanner;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] round_complexity = new int[n];
        int[] george_complexity = new int[m];
        for (int i = 0; i < n; i++) {
            round_complexity[i] = scanner.nextInt();
        }
        for (int i = 0; i < m; i++) {
            george_complexity[i] = scanner.nextInt();
        }
        int i = 0;
        int j = 0;
        while (i < n && j < m) {
            if (round_complexity[i] <= george_complexity[j]) {
                i++;
            }
            j++;
        }
        System.out.println(n - i);
    }
}
import java.util.*;

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        PriorityQueue<Integer> x = new PriorityQueue<>(n);
        PriorityQueue<Integer> y = new PriorityQueue<>(m);
        for (int i = 0; i < n; i++) {
            int day = sc.nextInt();
            int salary = sc.nextInt();
            x.offer(-day);
            x.offer(-salary);
        }
        while (!x.isEmpty()) {
            int d = -x.poll();
            int s = -x.poll();
            int r = m - y.size();
            if (r >= d) {
                y.offer(s);
            } else {
                y.offer(s);
                y.poll();
            }
        }
        int sum = 0;
        while (!y.isEmpty()) {
            sum += y.poll();
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC120_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        if (s.chars().distinct().count() == 1) {
            System.out.println(0);
            return;
        }
        Map<Character, Integer> a = new HashMap<>();
        for (char c : s.toCharArray()) {
            a.put(c, a.getOrDefault(c, 0) + 1);
        }
        int ans = Integer.MAX_VALUE;
        for (int count : a.values()) {
            ans = Math.min(ans, count);
        }
        ans *= 2;
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_397_B {
    private String result;
    private int t;
    private int[][] queries;

    public CodeforcesTask397BSolution() {
        this.result = "";
        this.t = 0;
        this.queries = new int[100][3];
    }

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        this.t = scanner.nextInt();
        for (int i = 0; i < this.t; i++) {
            for (int j = 0; j < 3; j++) {
                this.queries[i][j] = scanner.nextInt();
            }
        }
    }

    public void processTask() {
        String[] res = new String[this.t];
        for (int i = 0; i < this.t; i++) {
            int k = this.queries[i][0] / this.queries[i][1];
            res[i] = (k * this.queries[i][2] >= this.queries[i][0]) ? "Yes" : "No";
        }
        for (int i = 0; i < this.t; i++) {
            this.result += res[i] + "\n";
        }
    }

    public String getResult() {
        return this.result;
    }

    public static void main(String[] args) {
        CodeforcesTask397BSolution solution = new CodeforcesTask397BSolution();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }
}
import java.util.Scanner;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int K = sc.nextInt();
        int N = sc.nextInt();
        int mod = 998244353;
        int[] g1 = new int[801];
        int[] g2 = new int[801];
        int[] inverse = new int[801];
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[1] = 1;
        for (int i = 2; i <= 800; i++) {
            g1[i] = (g1[i - 1] * i) % mod;
            inverse[i] = (-inverse[mod % i] * (mod / i)) % mod;
            g2[i] = (g2[i - 1] * inverse[i - 1]) % mod;
        }

        int[] ans = new int[401];
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                int tmp = solve(i, K, N, mod, g1, g2, inverse);
                ans[i] = tmp;
                System.out.println(tmp);
            } else {
                System.out.println(ans[i - K]);
            }
        }
    }

    public static int cmb(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] * g2[n - r] % mod;
    }

    public static int kumiawase(int p, int q, int mod) {
        return cmb(p + q - 1, q - 1, mod);
    }

    public static int solve(int n, int K, int N, int[] g1, int[] g2, int[] inverse) {
        int ans = 0;
        int kumi = (n - 1) / 2;
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            ans += Math.pow(2, p) * cmb(kumi, p, mod) * kumiawase(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0));
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += Math.pow(2, p) * cmb(kumi, p, mod) * kumiawase(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0));
        }
        return ans % mod;
    }
}
import java.util.*;

public class atcoder_ABC148_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int ta = sc.nextInt() - 1;
        int ao = sc.nextInt() - 1;
        List<List<Integer>> g = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            g.add(new ArrayList<>());
        }
        for (int i = 0; i < n - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            g.get(a).add(b);
            g.get(b).add(a);
        }
        int[] ta_dist = new int[n];
        int[] ao_dist = new int[n];
        Arrays.fill(ta_dist, -1);
        Arrays.fill(ao_dist, -1);
        ta_dist[ta] = 0;
        ao_dist[ao] = 0;

        dfs(g, ta, ta_dist, ta);
        dfs(g, ao, ao_dist, ao);

        int res = 0;
        for (int i = 0; i < n; i++) {
            if (ta_dist[i] > ao_dist[i]) {
                res = Math.max(res, ao_dist[i]);
            }
        }
        System.out.println(res - 1);
    }

    public static void dfs(List<List<Integer>> g, int node, int[] dist, int start) {
        for (int v : g.get(node)) {
            if (dist[v] != -1) {
                continue;
            }
            dist[v] = dist[node] + 1;
            dfs(g, v, dist, start);
        }
    }
}
import java.util.Arrays;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] A = new int[3];
        for (int i = 0; i < 3; i++) {
            A[i] = Integer.parseInt(input[i]);
        }
        Arrays.sort(A);
        if (A[1] <= A[2] || A[3] <= A[0]) {
            System.out.println(0);
        } else {
            System.out.println(A[2] - A[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        for (int i = 1; i < N; i++) {
            if (n[pos] > n[i]) {
                a++;
                pos = i;
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[n / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[10002];
        int[] cntb = new int[10002];
        int vala = 0, vala1 = 0, maxCnta = 0, maxCnta1 = 0;
        for (int i : a) {
            cnta[i]++;
        }
        for (int i = 0; i < cnta.length; i++) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        for (int i = 0; i < cnta.length; i++) {
            if (maxCnta1 < cnta[i] && i != vala) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }
        int valb = 0, valb1 = 0, maxCntb = 0, maxCntb1 = 0;
        for (int i : b) {
            cntb[i]++;
        }
        for (int i = 0; i < cntb.length; i++) {
            if (maxCntb < cntb[i]) {
                valb = i;
                maxCntb = cntb[i];
            }
        }
        for (int i = 0; i < cntb.length; i++) {
            if (maxCntb1 < cntb[i] && i != valb) {
                maxCntb1 = cntb[i];
                valb1 = i;
            }
        }
        if (valb != vala) {
            int res = 0;
            for (int i : a) {
                if (i != vala) {
                    res++;
                }
            }
            for (int i : b) {
                if (i != valb) {
                    res++;
                }
            }
            System.out.println(res);
        } else {
            int resa = 0, resb = 0, resa1 = 0, resb1 = 0;
            for (int i : a) {
                if (i != vala) {
                    resa++;
                }
                if (i != vala1) {
                    resa1++;
                }
            }
            for (int i : b) {
                if (i != valb) {
                    resb++;
                }
                if (i != valb1) {
                    resb1++;
                }
            }
            System.out.println(Math.min(resa + resb1, resa1 + resb));
        }
    }
}
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[][] q = new String[n][2];
        int count = 0;
        for (int i = 0; i < n; i++) {
            q[i] = scanner.next().split(" ");
        }
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                if (j == k) {
                    continue;
                }
                if (q[j][0].equals(q[k][1]) || q[j][1].equals(q[k][0])) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_651_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        System.out.println(Math.max(x + y - 3 + ((y - x) % 3 > 0 ? 1 : 0), 0));
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Arrays;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = scanner.nextInt();
        }
        HashSet<Integer> different = new HashSet<>();
        int temp = 0;
        Arrays.sort(arr);
        for (int x : arr) {
            if (x % k != 0 || !different.contains(x / k)) {
                different.add(x / k);
            }
            temp = Math.max(different.size(), temp);
        }
        System.out.println(temp);
    }
}
import java.util.Scanner;

public class codeforces_306_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int q = n / m;
        int r = n % m;
        int[] a = new int[m];
        for (int i = 0; i < m; i++) {
            a[i] = q;
        }
        for (int i = 0; i < r; i++) {
            a[i] += 1;
        }
        for (int i = 0; i < m; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            String s = scanner.nextLine();
            int indexG = s.indexOf('G');
            int indexS = s.indexOf('S');
            if (indexG != -1 && indexS != -1) {
                set.add(indexS - indexG);
            }
        }
        int result = -1;
        if (!set.contains(-1)) {
            result = set.size();
        }
        System.out.println(result);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class codeforces_327_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        s = s.replaceAll(" ", "");
        if (!s.contains("0")) {
            System.out.println(n - 1);
        } else {
            List<Integer> indices = new ArrayList<>();
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) == '0') {
                    indices.add(i);
                }
            }
            if (indices.size() == 1) {
                System.out.println(n);
            } else {
                int maximum = 0;
                for (int i = 0; i < indices.size() - 1; i++) {
                    for (int j = i + 1; j < indices.size(); j++) {
                        int diff1 = indices.get(i) - indices.get(j);
                        int diff2 = indices.get(j) - indices.get(i);
                        maximum = Math.max(maximum, 2 + 2 * (diff1 - 1) - diff2);
                    }
                }
                System.out.println(s.replaceAll("0", "").length() + maximum);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inp = scanner.nextInt();
        int[] lista = new int[inp];
        for (int i = 0; i < inp; i++) {
            lista[i] = scanner.nextInt();
        }
        for (int i = 0; i < inp; i++) {
            if (i == 0) {
                System.out.print(lista[i + 1] - lista[i] + " " + (lista[inp - 1] - lista[i]));
                continue;
            } else if (i == inp - 1) {
                System.out.print(lista[inp - 1] - lista[inp - 2] + " " + (lista[inp - 1] - lista[0]);
                continue;
            } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                System.out.print(lista[i + 1] - lista[i] + " ");
            } else {
                System.out.print(lista[i] - lista[i - 1] + " ");
            }
            if (lista[inp - 1] - lista[i] > lista[i] - lista[0]) {
                System.out.println(lista[inp - 1] - lista[i]);
            } else {
                System.out.println(lista[i] - lista[0]);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Map<String, Integer> s = new HashMap<>();
        List<String> l = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            l.add(sc.next());
        }
        String f = "Yes";
        int i = -1;
        for (String v : l) {
            int count = s.getOrDefault(v, 0);
            s.put(v, count + 1);
            if (count >= 2) {
                f = "No";
            }
            if (i != -1 && l.get(i).charAt(l.get(i).length() - 1) != l.get(i + 1).charAt(0)) {
                f = "No";
            }
            i++;
        }
        System.out.println(f);
    }
}
import java.util.Scanner;

public class codeforces_579_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = 1;
        while (Math.log2(n) % 1 != 0) {
            x++;
            n -= (int) Math.pow(2, (int) Math.log2(n));
        }
        System.out.println(x);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[4];
        for (int i = 0; i < 4; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int length = arr[0];
        int[] arr1 = Arrays.copyOfRange(arr, 1, 4);
        int ans = 0;
        if (length % arr1[0] == 0) {
            System.out.println(length / arr1[0]);
            return;
        }
        if (arr1[0] == arr1[1]) {
            int k = 0;
            for (int i = 0; i <= length / arr1[2]; i++) {
                int check = length - i * arr1[2];
                if (check >= 0 && check % arr1[0] == 0) {
                    k = check / arr1[0];
                    ans = Math.max(ans, k + i);
                }
            }
        } else {
            for (int i = 0; i <= length / arr1[2]; i++) {
                for (int j = 0; j <= length / arr1[1]; j++) {
                    int check = length - i * arr1[2] - j * arr1[1];
                    if (check >= 0 && check % arr1[0] == 0) {
                        int k = check / arr1[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC037_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.charAt(0) + "".repeat(N));
            System.exit(0);
        }

        String getLastDict(String s_str) {
            String U = s_str + s_str.substring(0, s_str.length() - 1);
            char c = s_str.charAt(0);
            int p = U.indexOf(c);
            int minindex = p;
            p++;
            while (p <= N) {
                if (U.charAt(p) == c) {
                    if (checkNormalDict(U, minindex, p)) {
                        minindex = p;
                    }
                }
                p++;
            }
            return U.substring(minindex, minindex + N);
        }

        boolean checkNormalDict(String U, int pointer1, int pointer2) {
            for (int i = 0; i < N; i++) {
                if (U.charAt(pointer1 + i) > U.charAt(pointer2 + i)) {
                    return true;
                } else if (U.charAt(pointer1 + i) < U.charAt(pointer2 + i)) {
                    return false;
                }
            }
            return false;
        }

        S = getLastDict(S);
        if (K == 1) {
            System.out.println(S);
        } else {
            int count = 0;
            for (int i = 0; i < S.length(); i++) {
                if (S.charAt(i) == S.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * (int) Math.pow(2, K - 1) >= N) {
                System.out.println(S.charAt(0) + "".repeat(N));
            } else {
                S = S.substring(0, count * (int) Math.pow(2, K - 1) - 1) + S;
                System.out.println(S.substring(0, N));
            }
        }
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }

        if (Arrays.stream(elems).distinct().count() == 1) {
            System.out.println(0);
            return;
        }
        if (k == 1) {
            System.out.println(-1);
            return;
        }
        if (!Arrays.stream(elems, k - 1, n).allMatch(e -> e == elems[k - 1])) {
            System.out.println(-1);
            return;
        }

        ArrayList<Integer> toDelete = new ArrayList<>();
        for (int i = 0; i < k - 1; i++) {
            toDelete.add(elems[i]);
        }
        while (!toDelete.isEmpty() && toDelete.get(toDelete.size() - 1) == elems[k - 1]) {
            toDelete.remove(toDelete.size() - 1);
        }
        System.out.println(toDelete.size());
    }
}
import java.util.Scanner;

public class atcoder_ABC165_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int Q = scanner.nextInt();
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }
        int res = solve(N, M, Q, a, b, c, d);
        System.out.println(res);
    }

    public static int solve(int N, int M, int Q, int[] a, int[] b, int[] c, int[] d) {
        int res = 0;
        rec(N, M, Q, a, b, c, d, new int[0], 0, res);
        return res;
    }

    public static void rec(int N, int M, int Q, int[] a, int[] b, int[] c, int[] d, int[] A, int index, int res) {
        if (A.length == N) {
            int ans = 0;
            for (int i = 0; i < Q; i++) {
                if (A[b[i] - 1] - A[a[i] - 1] == c[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
            return;
        }
        int last_max = A.length == 0 ? 1 : A[A.length - 1];
        for (int i = last_max; i <= M; i++) {
            int[] newA = new int[A.length + 1];
            System.arraycopy(A, 0, newA, 0, A.length);
            newA[A.length] = i;
            rec(N, M, Q, a, b, c, d, newA, index + 1, res);
        }
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1 && i >= 0 && i < n; i++) {
                for (int j = y - 2; j <= y + 1 && j >= 0 && j < n; j++) {
                    count[i][j]++;
                    if (count[i][j] == 9) {
                        found = true;
                    }
                }
            }
            if (found) {
                ans = k + 1;
                break;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = sc.nextInt();
        }
        editorial(N, P);
    }

    public static void editorial(int N, int[] P) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] a = new int[N + 1];
        for (int i = 0; i < N; i++) {
            a[P[i]] = i;
        }
        int tmp = 1;
        int max_len = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp++;
                max_len = Math.max(max_len, tmp);
            } else {
                tmp = 1;
            }
        }
        int ans = N - max_len;
        System.out.println(ans);
    }

    public static void WA(int N, int[] P) {
        int tmp = 0;
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (i == 0 || P[i - 1] + 1 == P[i]) {
                tmp++;
            } else {
                ans = Math.max(ans, tmp);
                tmp = 1;
            }
        }
        System.out.println(N - ans);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        char[][] t = new char[4][4];
        for (int i = 0; i < 4; i++) {
            String[] input = sc.nextLine().split("");
            for (int j = 0; j < 4; j++) {
                t[i] = input[j].toCharArray();
            }
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1] == '#') {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int high = 1;
        int tower = n;
        int maximum = 1;
        java.util.Arrays.sort(l);
        for (int i = 1; i < n; i++) {
            if (l[i] == l[i - 1]) {
                tower--;
                high++;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC006_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        scanner.close();

        int[] x = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = i + 1;
        }

        if (X == 1 || X == 2 * N - 1) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
            if (X == 2 * N - 2) {
                int[] xs = new int[N];
                for (int i = 0; i < N - 1; i++) {
                    xs[i] = N - 1 + i;
                }
                for (int i = N - 1; i < N * 2 - 1; i++) {
                    xs[i] = i - N + 2;
                }
            } else {
                int[] ys = new int[N - 3];
                for (int i = 0; i < N - 3; i++) {
                    ys[i] = i + 2;
                }
                int[] xs = new int[N];
                for (int i = 0; i < N - 3; i++) {
                    xs[i] = ys[i];
                }
                xs[N - 3] = X + 2;
                xs[N - 2] = X - 1;
                xs[N - 1] = X;
                xs[N] = X + 1;
                for (int i = N + 1; i < N * 2 - 1; i++) {
                    xs[i] = i - N + 2;
                }
            }

            for (int i = 0; i < N; i++) {
                System.out.println(xs[i]);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] pieces = new int[n];
        String[] types = new String[n];
        for (int i = 0; i < n; i++) {
            pieces[i] = scanner.nextInt();
            types[i] = scanner.next();
        }
        int result = Bob_sMaxStrength(pieces, types);
        System.out.println(result);
    }

    public static int Bob_sMaxStrength(int[] pieces, String[] types) {
        int pScore = 0;
        int sScore = 0;
        int pMaxScore = 0;
        int sMaxScore = 0;
        for (int i = 0; i < pieces.length; i++) {
            if (types[i].equals("B")) {
                pScore += pieces[i];
                pMaxScore = Math.max(pMaxScore, pScore);
            } else {
                pScore -= pieces[i];
            }
        }
        for (int i = pieces.length - 1; i >= 0; i--) {
            if (types[i].equals("A")) {
                sScore += pieces[i];
                sMaxScore = Math.max(sMaxScore, sScore);
            } else {
                sScore -= pieces[i];
            }
        }
        return Math.max(pMaxScore, sMaxScore);
    }
}
public class codeforces_110_B {
    public static void main(String[] args) {
        String LUCKY = "abcd";
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = "";
        for (int i = 0; i < n; i++) {
            s += LUCKY.charAt(i % 4);
        }
        System.out.println(s);
    }
}
import java.util.Scanner;

public class codeforces_134_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        int[] d = new int[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if ((x - w[i]) / (n - 1) == w[i]) {
                d[count] = i + 1;
                count++;
            }
        }
        System.out.println(count);
        for (int i = 0; i < count; i++) {
            System.out.print(d[i] + " ");
        }
    }
}
import java.util.*;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                t += "A";
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        t += "D";
                        i += 2;
                    } else {
                        t += "X";
                        i++;
                    }
                } else {
                    t += "X";
                    i++;
                }
            } else {
                t += "X";
                i++;
            }
        }
        int total = 0;
        int numA = 0;
        for (int j = 0; j < t.length(); j++) {
            if (t.charAt(j) == 'X') {
                numA = 0;
            } else {
                if (t.charAt(j) == 'A') {
                    numA++;
                } else {
                    total += numA;
                }
            }
        }
        System.out.println(total);
    }
}
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC110_C {
    public static String run(String s, String t) {
        Map<Character, Integer> sMap = new HashMap<>();
        Map<Character, Integer> tMap = new HashMap<>();
        for (char c : s.toCharArray()) {
            sMap.put(c, sMap.getOrDefault(c, 0) + 1);
        }
        for (char c : t.toCharArray()) {
            tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        }
        Integer[] sValues = sMap.values().stream().sorted().toArray(Integer[]::new);
        Integer[] tValues = tMap.values().stream().sorted().toArray(Integer[]::new);
        return Arrays.equals(sValues, tValues) ? "Yes" : "No";
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String t = scanner.nextLine();
        System.out.println(run(s, t));
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        ArrayList<int[]> menu = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < 5; i++) {
            String m = scanner.next();
            int e = m.charAt(m.length() - 1) - '0';
            if (e == 0) {
                e = 10;
            }
            menu.add(new int[]{Integer.parseInt(m), e});
        }
        Collections.sort(menu, (a, b) -> a[1] - b[1]);
        int ans = 0;
        for (int i = 1; i < menu.size(); i++) {
            ans += Math.ceil(menu.get(i)[0] / 10.0) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = {10, 100, 1000, 10000, 100000};
        int newValue = 0;
        for (int i = 0; i < n; i++) {
            newValue += n % 10;
            n /= 10;
        }
        if (Arrays.asList(a).contains(newValue)) {
            System.out.println(10);
        } else {
            System.out.println(newValue);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] p = scanner.nextLine().split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);
        int DIF1 = x2 - x1;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
    }
}
import java.util.Scanner;

public class atcoder_ABC171_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = scanner.nextInt();
        }
        int total = 0;
        for (int i = 0; i < N; i++) {
            total ^= a[i];
        }
        for (int i = 0; i < N; i++) {
            a[i] ^= total;
        }
        for (int i = 0; i < N; i++) {
            System.out.print(a[i] + " ");
        }
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        String[] l = new String[n];
        for (int i = 0; i < n; i++) {
            String s = scanner.next();
            char[] sArray = s.toCharArray();
            for (int j = 0; j < m; j++) {
                if (sArray[j] == '.') {
                    if ((i + j) % 2 == 0) {
                        sArray[j] = 'W';
                    } else {
                        sArray[j] = 'B';
                    }
                }
            }
            l[i] = new String(sArray);
        }
        for (String s : l) {
            System.out.println(s);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = Arrays.binarySearch(l, a + b);
                if (right < 0) {
                    right = -(right + 1);
                }
                int left = Arrays.binarySearch(l, Math.max(a - b, b - a));
                if (left < 0) {
                    left = -(left + 1);
                }
                int tmp = right - left;
                if (left <= i && i < right) {
                    tmp--;
                }
                if (left <= j && j < right) {
                    tmp--;
                }
                ans += tmp;
            }
        }
        System.out.println(ans / 3);
    }
}
import java.util.Scanner;

public class codeforces_30_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int A = Integer.parseInt(input[0]);
        int B = Integer.parseInt(input[1]);
        int n = Integer.parseInt(input[2]);
        int solution = task4(A, B, n);
        if (solution != -1) {
            System.out.println(solution);
        } else {
            System.out.println("No solution");
        }
    }

    public static int task4(int A, int B, int n) {
        for (int X = -1000; X <= 1000; X++) {
            if (A * (int) Math.pow(X, n) == B) {
                return X;
            }
        }
        return -1;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC142_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        Integer[] A_ = new Integer[N];
        for (int i = 0; i < N; i++) {
            A_[i] = i + 1;
        }
        Arrays.sort(A_, (a, b) -> A[b - 1] - A[a - 1]);
        for (int i = 0; i < N - 1; i++) {
            System.out.print(A_[i] + " ");
        }
        System.out.println(A_[N - 1]);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC171_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        int sum = 0;
        for (int i = 0; i < k; i++) {
            sum += arr[i];
        }
        System.out.println(sum);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.TreeSet;

class BIT {
    int size;
    int[] tree;
    int depth;

    public BIT(int N) {
        size = N;
        tree = new int[N + 1];
        depth = (int) (Math.log(N) / Math.log(2)) + 1;
    }

    int _bitsum(int i) {
        int ret = 0;
        while (i > 0) {
            ret += tree[i];
            i -= (i & -i);
        }
        return ret;
    }

    int bitsum(int l, int r) {
        if (r == 0) {
            return _bitsum(l);
        } else {
            return _bitsum(r) - _bitsum(l);
        }
    }

    void bitadd(int i, int x) {
        i += 1;
        while (i <= size) {
            tree[i] += x;
            i += (i & -i);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = (n * (n + 1)) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        TreeSet<Integer> set = new TreeSet<>(Arrays.asList(a));
        int[] d = new int[set.size()];
        int i = 0;
        for (int x : set) {
            d[i++] = x;
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = d[Arrays.binarySearch(d, a[i])];
        }
        BIT bit = new BIT(set.size());
        int ans = 0;
        for (int x : b) {
            ans += bit.bitsum(x + 1);
            bit.bitadd(x + 1, 1);
        }
        if (ans >= m) {
            System.out.println(set.first());
        } else {
            System.out.println(set.last());
        }
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] inputArray = new int[n][4];
        for (int i = 0; i < n; i++) {
            inputArray[i][0] = scanner.nextInt();
            inputArray[i][1] = scanner.nextInt();
            inputArray[i][2] = scanner.nextInt();
            inputArray[i][3] = scanner.nextInt();
        }
        Set<Integer> outdated = new HashSet<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (inputArray[i][0] < inputArray[j][0] && inputArray[i][1] < inputArray[j][1] && inputArray[i][2] < inputArray[j][2]) {
                    outdated.add(i);
                }
            }
        }
        int minimumCost = 100000;
        int inputNumber = 0;
        for (int i = 0; i < n; i++) {
            if (!outdated.contains(i) && inputArray[i][3] < minimumCost) {
                minimumCost = inputArray[i][3];
                inputNumber = i + 1;
            }
        }
        System.out.println(inputNumber);
    }
}
import java.util.*;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && b >= 0) {
            System.out.println("Zero");
        } else {
            if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC140_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        String S = sc.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int cur_happy = N - 1 - seg_cnt;
        int ans;
        if (2 * K >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = cur_happy + 2 * K;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Collections;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int x = sc.nextInt();
        int[][] c = new int[n][m + 1];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= m; j++) {
                if (j == 0) {
                    c[i][j] = sc.nextInt();
                } else {
                    c[i][j] = sc.nextInt();
                }
            }
        }
        List<List<Integer>> pre = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> temp = new ArrayList<>();
            temp.add(i);
            pre.add(temp);
        }
        List<List<Integer>> l = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            for (List<Integer> j : getCombinations(pre, i)) {
                l.add(j);
            }
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < l.size(); j++) {
                int ca = 0;
                for (int k : l.get(j)) {
                    ca += c[k][i];
                }
                if (ca < x) {
                    rem.add(0, j);
                } else {
                    // pass
                }
            }
            if (!rem.isEmpty()) {
                for (int j : rem) {
                    l.remove(j);
                }
                rem.clear();
            }
            if (l.isEmpty()) {
                System.out.println(-1);
                break;
            }
        }
        if (!l.isEmpty()) {
            for (List<Integer> i : l) {
                int ca = 0;
                for (int j : i) {
                    ca += c[j][0];
                }
                if (ans == 0) {
                    ans = ca;
                } else {
                    ans = Math.min(ans, ca);
                }
            }
            System.out.println(ans);
        }
    }

    public static List<List<Integer>> getCombinations(List<List<Integer>> pre, int i) {
        List<List<Integer>> result = new ArrayList<>();
        for (List<Integer> subset : getSubsets(pre)) {
            if (subset.size() == i) {
                result.add(subset);
            }
        }
        return result;
    }

    public static List<List<Integer>> getSubsets(List<List<Integer>> pre) {
        List<List<Integer>> result = new ArrayList<>();
        if (pre.isEmpty()) {
            result.add(new ArrayList<>());
            return result;
        }
        List<Integer> first = pre.get(0);
        List<List<Integer>> rest = getSubsets(pre.subList(1, pre.size()));
        result.addAll(rest);
        for (List<Integer> subset : rest) {
            List<Integer> newSubset = new ArrayList<>(subset);
            newSubset.addAll(first);
            result.add(newSubset);
        }
        return result;
    }
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        int ans = A - 2 * B;
        if (ans < 0) {
            ans = 0;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            if (hole >= b) {
                check = false;
            } else {
                hole = a * (i + 1) - i;
                i++;
            }
        }
        System.out.println(i);
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < 2; i++) {
            c += Math.max(a, b);
            if (a >= b) {
                a--;
            } else {
                b--;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] list = new int[n];
        for (int i = 0; i < n; i++) {
            list[i] = scanner.nextInt() % 2;
        }
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += list[i];
        }
        if (sum == 1) {
            for (int i = 0; i < n; i++) {
                if (list[i] == 1) {
                    System.out.println(i + 1);
                    break;
                }
            }
        } else {
            for (int i = 0; i < n; i++) {
                if (list[i] == 0) {
                    System.out.println(i + 1);
                    break;
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstline = scanner.nextInt();
        int total = 0;
        StringBuilder memory = new StringBuilder();
        for (int x = 0; x < firstline; x++) {
            int A = scanner.nextInt();
            int G = scanner.nextInt();
            if (total + A <= 500) {
                total += A;
                memory.append("A");
            } else {
                total -= G;
                memory.append("G");
            }
        }
        System.out.println(memory.toString());
    }
}
import java.util.*;

public class atcoder_ABC169_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] sa = sc.nextLine().split(" ");
        int a = Integer.parseInt(sa[0]);
        int b = (int) (Double.parseDouble(sa[1]) * 100 + 0.1);
        System.out.println(a * b / 100);
    }
}
import java.util.Scanner;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] t = new int[n + 1];
        int[] a = new int[n + 1];
        int[] cnt = new int[n + 1];
        t[0] = 0;
        a[0] = 0;
        for (int i = 1; i <= n; i++) {
            t[i] = sc.nextInt();
        }
        for (int i = 1; i <= n; i++) {
            a[i] = sc.nextInt();
        }
        int[] ans = new int[n + 1];
        int[] cnt = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cnt[t[i]]++;
        }
        for (int i = 1; i <= n; i++) {
            if (t[i] == 1) {
                int x = i;
                int[] crt = new int[n + 1];
                int j = 0;
                while (cnt[x] == 1) {
                    crt[j++] = x;
                    x = a[x];
                }
                if (j > ans.length) {
                    ans = Arrays.copyOf(crt, j);
                }
            }
        }
        int len = ans.length;
        for (int i = len - 1; i >= 0; i--) {
            System.out.print(ans[i] + " ");
        }
        System.out.println();
        System.out.println(len);
    }
}
import java.util.Scanner;

public class atcoder_ABC142_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = 0;
        for (int i = 0; i < n; i++) {
            if ((i + 1) % 2 != 0) {
                t++;
            }
        }
        System.out.printf("%.10f", (double) t / n);
    }
}
import java.util.Scanner;

public class codeforces_333_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] b = new int[n * 2];
        for (int i = 0; i < b.length; i++) {
            b[i] = 1;
        }
        b[0] = b[n - 1] = b[n] = b[2 * n - 1] = 0;
        for (int i = 0; i < m; i++) {
            int r = scanner.nextInt();
            int c = scanner.nextInt();
            b[r - 1] = b[n + c - 1] = 0;
        }
        if (n % 2 != 0 && b[n / 2] != 0 && b[n + n / 2] != 0) {
            b[n / 2] = 0;
        }
        int sum = 0;
        for (int i = 0; i < b.length; i++) {
            sum += b[i];
        }
        System.out.println(sum);
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] nm = sc.nextLine().split(" ");
        int n = Integer.parseInt(nm[0]);
        int m = Integer.parseInt(nm[1]);
        int[] p = new int[n+1];
        for(int i=1; i<=n; i++){
            p[i] = i;
        }
        int[] h = new int[n+1];
        for(int i=1; i<=n; i++){
            h[i] = sc.nextInt();
        }
        Map<Integer, Integer> hp = new HashMap<>();
        for(int i=1; i<=n; i++){
            hp.put(i, h[i]);
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for(int i=1; i<=n; i++){
            path.put(i, new ArrayList<>());
        }
        for(int i=0; i<m; i++){
            String[] ab = sc.nextLine().split(" ");
            int a = Integer.parseInt(ab[0]);
            int b = Integer.parseInt(ab[1]);
            path.get(a).add(b);
            path.get(b).add(a);
        }
        int c = 0;
        for(int i=1; i<=n; i++){
            boolean f = true;
            for(int j : path.get(i)){
                if(hp.get(i) <= hp.get(j)){
                    f = false;
                    break;
                }
            }
            if(f){
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        while (x >= 0 && y >= 22 || x >= 1 && y >= 12 || x >= 2 && y >= 2) {
            if (a == 1) {
                if (y >= 22) {
                    y -= 22;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    x -= 2;
                    y -= 2;
                }
            } else {
                if (x >= 2 && y >= 2) {
                    x -= 2;
                    y -= 2;
                } else if (x >= 1 && y >= 12) {
                    x -= 1;
                    y -= 12;
                } else {
                    y -= 22;
                }
            }
            a = 1 - a;
        }
        System.out.println(a == 1 ? "Ciel" : "Hanako");
    }
}
import java.util.*;

public class atcoder_AGC004_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] aaa = new int[n];
        for (int i = 0; i < n; i++) {
            aaa[i] = sc.nextInt();
        }
        List<Set<Integer>> links = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            links.add(new HashSet<>());
        }
        for (int i = 0; i < n; i++) {
            links.get(aaa[i] - 1).add(i);
        }
        int[] height_from_leaf = new int[n];
        int[] cut_count = new int[n];
        int ans = dfs(links, n, k, 0, 0, height_from_leaf, cut_count);
        if (aaa[0] != 1) {
            ans++;
        }
        System.out.println(ans);
    }

    public static int dfs(List<Set<Integer>> links, int n, int k, int v, int p, int[] height_from_leaf, int[] cut_count) {
        int height_from_leaf_local = 0;
        int cut_count_local = 0;
        for (int u : links.get(v)) {
            if (u == 0) {
                continue;
            }
            int hgt = height_from_leaf[u];
            int ct = cut_count[u];
            if (hgt == k) {
                cut_count_local++;
            }
            height_from_leaf_local = Math.max(height_from_leaf_local, hgt);
            cut_count_local += ct;
        }
        height_from_leaf_local++;
        if (p != 0 && height_from_leaf_local == k) {
            height_from_leaf_local = 0;
            cut_count_local++;
        }
        height_from_leaf[v] = height_from_leaf_local;
        cut_count[v] = cut_count_local;
        return cut_count_local;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in);
        int k = Integer.parseInt(br.readLine().trim());
        int t = 0;
        for (int i = 1; i <= k; i++) {
            t = (t % k) * 10 + 7;
            if (t % k == 0) {
                System.out.println(i);
                break;
            }
        }
        if (i == k) {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int n = Integer.parseInt(input[0]);
        int k = Integer.parseInt(input[1]);
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = Integer.parseInt(input[i + 2]);
        }
        int m = 0;
        for (int j = 0; j < n; j++) {
            for (int p = 0; p < n; p++) {
                if (M[p] == 0) {
                    System.out.print(p + 1 + " ");
                    break;
                }
            }
            for (int l = 0; l < p - k; l++) {
                M[l]--;
            }
            M[p]--;
        }
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC168_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int h = scanner.nextInt();
        int m = scanner.nextInt();
        double C = Math.abs(360.0 / 60 * m - 360.0 / 12 * h - 360.0 / 12 / 60 * m);
        if (C > 180) {
            C = 360 - C;
        }
        double cosC = Math.cos(Math.toRadians(C));
        System.out.println(Math.sqrt(a * a + b * b - 2 * a * b * cosC));
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int QR = scanner.nextInt();
        int[] W = new int[n];
        for (int i = 0; i < n; i++) {
            W[i] = scanner.nextInt();
        }
        int[] sum_el = new int[n + 1];
        sum_el[0] = 0;
        for (int i = 1; i <= n; i++) {
            sum_el[i] = W[i - 1] + sum_el[i - 1];
        }
        int answer = QR * (n - 1) + sum_el[n] * R;
        for (int i = 1; i <= n; i++) {
            int energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
            if (i > (n - i)) {
                energy = energy + (i - (n - i) - 1) * QL;
            } else if ((n - i) > i) {
                energy = energy + (n - i - i - 1) * QR;
            }
            if (energy < answer) {
                answer = energy;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine();
        char[] vo = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'};
        for (int i = a.length() - 1; i >= 0; i--) {
            if (a.charAt(i) == ' ' || a.charAt(i) == '?') {
                continue;
            } else {
                if (Arrays.asList(vo).contains(a.charAt(i))) {
                    System.out.println("YES");
                } else {
                    System.out.println("NO");
                }
                break;
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        String S = scanner.next();
        if (S.length() <= K) {
            System.out.println(S);
        } else {
            System.out.println(S.substring(0, K) + "...");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int X = sc.nextInt();
        boolean[] prime = new boolean[100010];
        for (int i = 0; i < prime.length; i++) {
            prime[i] = true;
        }
        prime[0] = false;
        prime[1] = false;
        for (int i = 4; i <= 100010; i += 2) {
            prime[i] = false;
        }
        for (int i = 3; i * i <= 100008; i += 2) {
            if (prime[i]) {
                for (int j = i + i; j <= 100008; j += i) {
                    prime[j] = false;
                }
            }
        }
        for (int i = X; i <= 100008; i++) {
            if (prime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int sa = 0;
        String[] input = scanner.nextLine().split(" ");
        for (String s : input) {
            if (s.equals("-1")) {
                sa++;
            }
        }
        int min = Math.min(n - sa, sa);
        String[] ss = new String[m];
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            b -= a;
            if (b % 2 == 0 && b <= min * 2) {
                ss[i] = "1";
            } else {
                ss[i] = "0";
            }
        }
        for (String s : ss) {
            System.out.println(s);
        }
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = n; i >= 1; i--) {
            if (n % i == 0) {
                n = i;
                System.out.print(i + " ");
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        String S = scanner.next();
        String T = scanner.next();
        char[] list_S = S.toCharArray();
        char[] list_T = T.toCharArray();
        int[] Number_iMN = new int[N];
        for (int i = 0; i < N; i++) {
            Number_iMN[i] = i * M / N;
        }
        int[] Number_j = new int[M];
        for (int j = 0; j < M; j++) {
            Number_j[j] = j;
        }
        int[] Kaburi_i = new int[Number_iMN.length];
        int counter = 0;
        boolean Flag = false;
        for (int i : Number_iMN) {
            for (int j : Number_j) {
                if (i == j) {
                    Kaburi_i[counter] = i;
                    counter++;
                }
            }
        }
        for (int i = 0; i < Kaburi_i.length; i++) {
            if (list_S[Kaburi_i[i]] != list_T[i]) {
                Flag = true;
                break;
            }
        }
        if (Flag) {
            System.out.println(-1);
        } else {
            System.out.println(N * M / gcd(N, M));
        }
    }

    public static int gcd(int a, int b) {
        while (b > 0) {
            int temp = a % b;
            a = b;
            b = temp;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int mn = N + 1, mx = -1;
        for (int i = 0; i < N; i++) {
            if (i + 1 != A[i]) {
                mn = Math.min(mn, i);
                mx = Math.max(mx, i);
            }
        }
        if (mx == -1) {
            System.out.println("0 0");
        } else {
            int[] temp = new int[N - 2];
            int j = 0;
            for (int i = 0; i < mn; i++) {
                temp[j++] = A[i];
            }
            for (int i = mx + 1; i < N; i++) {
                temp[j++] = A[i];
            }
            for (int i = mn; i <= mx; i++) {
                temp[j++] = A[i];
            }
            Arrays.sort(temp);
            if (Arrays.equals(A, temp)) {
                System.out.println((mn + 1) + " " + (mx + 1));
            } else {
                System.out.println("0 0");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] parts = input.split("\\.");
        char[] s = parts[0].toCharArray();
        char[] p = parts[1].toCharArray();
        int i = Integer.parseInt(String.valueOf(p[0]));
        if (s[s.length - 1] == '9') {
            System.out.println("GOTO Vasilisa.");
        } else if (s[s.length - 1] != '9' && i < 5) {
            System.out.println(new String(s));
        } else {
            String sStr = new String(s);
            int sInt = Integer.parseInt(sStr) + 1;
            System.out.println(sInt);
        }
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String v = scanner.next();
        String[] d = {"LEFT", "RIGHT"};
        boolean f = k - 1 < n - k;
        String[] a = new String[n];
        int m = Math.min(k - 1, n - k);
        for (int i = 0; i < m; i++) {
            a[i] = d[f ? 1 : 0];
        }
        for (int i = 0; i < v.length(); i++) {
            a[m + i] = "PRINT " + v.charAt(v.length() - 1 - i + f);
            a[m + i + 1] = d[f ? 0 : 1];
        }
        for (int i = 0; i < a.length - 1; i++) {
            System.out.println(a[i]);
        }
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s++;
            curr /= 10;
        }
        int first = (int) Math.pow(10, s);
        int second = first / 2;
        int ans = -1;
        for (int i : new int[]{l, r, first, second}) {
            if (i >= l && i <= r) {
                int rev = 0;
                int temp = i;
                while (temp != 0) {
                    int digit = temp % 10;
                    rev = rev * 10 + (9 - digit);
                    temp /= 10;
                }
                ans = Math.max(ans, rev * i);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            li.add(Arrays.asList(Arrays.stream(sc.next().split(" ")).mapToInt(Integer::parseInt).toArray());
        }
        li.remove(0);
        Set<Integer> p = new HashSet<>(Arrays.asList(Arrays.stream(sc.next().split(" ")).mapToInt(Integer::parseInt).boxed().toArray(Integer[]::new));
        Set<Integer> q = new HashSet<>();
        for (List<Integer> l : li) {
            q.addAll(l);
        }
        Set<Integer> r = new HashSet<>();
        for (int i = 1; i <= n; i++) {
            r.add(i);
        }
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        for (int i = 0; i <= q.size(); i++) {
            for (List<Integer> s : itertools.combinations(q, i)) {
                boolean flag = true;
                Iterator<List<Integer>> it = li.iterator();
                while (it.hasNext()) {
                    List<Integer> u = it.next();
                    Set<Integer> sSet = new HashSet<>(s);
                    if ((sSet.retainAll(u) && sSet.size() % 2 != p.iterator().next()) || (!sSet.retainAll(u) && sSet.size() % 2 == p.iterator().next())) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    ans += (int) Math.pow(2, v.size());
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[][] b = new int[n][n];
        for (int i = 0; i < n; i++) {
            int m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k < 0) {
                    k += n;
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        int m = 1000000000000;
        for (int i = 0; i < n; i++) {
            m = Math.min(m, b[i][i] + x * i);
        }
        System.out.println(m);
    }
}
import java.util.Scanner;

public class atcoder_ABC150_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int mod = (int) Math.pow(10, 9) + 7;
        int n = scanner.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        java.util.Arrays.sort(c);
        int b = (int) Math.pow(2, 2 * n - 2) % mod;
        int a = 2 * b % mod;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b);
            ans %= mod;
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_456_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] m = new int[n][2];
        for (int i = 0; i < n; i++) {
            m[i][0] = scanner.nextInt();
            m[i][1] = scanner.nextInt();
        }
        Arrays.sort(m, (a, b) -> b[1] - a[1]);
        int a = m[0][1];
        for (int i = 1; i < n; i++) {
            if (m[i][1] > a) {
                System.out.println("Happy Alex");
                break;
            }
            a = m[i][1];
        } else {
            System.out.println("Poor Alex");
        }
    }
}
import java.util.Scanner;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt();
            int s = (1 + n) * n / 2;
            int t = 1;
            while (t <= n) {
                s -= 2 * t;
                t *= 2;
            }
            System.out.println(s);
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;

public class atcoder_AGC027_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int X = sc.nextInt();
        ArrayList<Integer> A = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            A.add(sc.nextInt());
        }
        ArrayList<Integer> S = new ArrayList<>();
        int sum = 0;
        for (int i = 0; i < N; i++) {
            sum += A.get(i);
            S.add(sum);
        }
        double ans = Double.POSITIVE_INFINITY;
        for (int k = 1; k <= N; k++) {
            int E = k * X + 2 * sum(S, N - 2 * k - 1, -k);
            ans = Math.min(ans, E);
        }
        System.out.println((int) (ans + N * X + 5 * S.get(N - 1));
    }

    public static int sum(ArrayList<Integer> S, int start, int step) {
        int sum = 0;
        for (int i = start; i >= 0; i += step) {
            sum += S.get(i);
        }
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String line1 = sc.nextLine();
        String line2 = sc.nextLine();
        int[] boughtCount = new int[26];
        int[] madeCount = new int[26];
        for (int i = 0; i < line1.length(); i++) {
            boughtCount[line1.charAt(i) - 'a']++;
        }
        for (int i = 0; i < line2.length(); i++) {
            madeCount[line2.charAt(i) - 'a']++;
        }
        int res = 0;
        for (int i = 0; i < 26; i++) {
            res += Math.min(boughtCount[i], madeCount[i]);
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        String t = scanner.next();
        if (s.equals(t)) {
            System.out.println(n);
        } else {
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n - i; j++) {
                    if (s.charAt(i + j) != t.charAt(j)) {
                        break;
                    }
                    if (j == n - i - 1) {
                        cnt = n - i;
                    }
                }
            }
            System.out.println(2 * n - cnt);
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC043_B {
    public static int twosInFactorial(int n) {
        int count = 0;
        while (n > 0) {
            n >>= 1;
            count += n;
        }
        return count;
    }

    public static boolean parityOfNCr(int n, int i) {
        return twosInFactorial(n) - twosInFactorial(n - i) - twosInFactorial(i) > 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] nums = new int[n];
        String[] input = scanner.next().split(" ");
        for (int i = 0; i < n; i++) {
            nums[i] = Integer.parseInt(input[i]) - 1;
        }
        boolean noOne = true;
        if (nums[0] != 1) {
            for (int i = 0; i < n; i++) {
                nums[i] /= 2;
            }
            noOne = true;
        }
        boolean isOdd = false;
        for (int i = 0; i < n; i++) {
            if (!parityOfNCr(n - 1, i) && nums[i] % 2 == 1) {
                isOdd = !isOdd;
            }
        }
        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println(1 << noOne ? 1 : 0);
        }
    }
}
import java.util.Scanner;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < y; i++) {
            for (int j = 0; j < y; j++) {
                if (i == j) {
                    continue;
                }
                for (int k = 0; k < y; k++) {
                    if (k != j && k != i && arr[k] == arr[i] + arr[j]) {
                        System.out.println(k + 1 + " " + j + 1 + " " + i + 1);
                        System.exit(0);
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] vis = new int[n + 1];
        int ci = 0, cb = 0, cc = 0;
        boolean[][] adjMatrix = new boolean[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= n; j++) {
                adjMatrix[i][j] = false;
            }
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            adjMatrix[u][v] = true;
            adjMatrix[v][u] = true;
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                if (isConnected(adjMatrix, i, vis)) {
                    ci++;
                } else {
                    if (dfs(adjMatrix, i, vis)) {
                        cb++;
                    } else {
                        cc++;
                    }
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + 2 * cb * cc + cc * cc);
    }

    public static boolean isConnected(boolean[][] adjMatrix, int x, int[] vis) {
        Queue<Integer> q = new LinkedList<>();
        q.add(x);
        vis[x] = 1;
        while (!q.isEmpty()) {
            int u = q.poll();
            for (int v = 1; v <= n; v++) {
                if (adjMatrix[u][v] && vis[v] == 0) {
                    vis[v] = 3 - vis[u];
                    q.add(v);
                }
            }
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                return false;
            }
        }
        return true;
    }

    public static boolean dfs(boolean[][] adjMatrix, int x, int[] vis) {
        Queue<Integer> q = new LinkedList<>();
        q.add(x);
        vis[x] = 1;
        while (!q.isEmpty()) {
            int u = q.poll();
            for (int v = 1; v <= n; v++) {
                if (adjMatrix[u][v] && vis[v] == 0) {
                    vis[v] = 3 - vis[u];
                    q.add(v);
                }
            }
        }
        for (int i = 1; i <= n; i++) {
            if (vis[i] == 0) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Scanner;

public class atcoder_ABC125_C {
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int[] ruiseki_lr(int[] array) {
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        left[0] = 0;
        right[n] = 0;
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], array[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], array[i]);
        }
        return new int[]{left, right};
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[][] result = ruiseki_lr(a);
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(result[0][i], result[1][i + 1]), ans);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC007_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int d = scanner.nextInt();
        int x = scanner.nextInt();
        double ret = 0;
        while (N > 0) {
            ret += d + (N - 0.5) * x;
            d += d / N + (5 * x) / (2 * N);
            x += 2 * x / N;
            N--;
        }
        System.out.printf("%.10f", ret);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l1 = new int[n];
        for (int i = 0; i < n; i++) {
            l1[i] = sc.nextInt();
        }
        Arrays.sort(l1);
        int a = l1[n - 1];
        int b = l1[0];
        if (a == b) {
            System.out.println(a - b + " " + (n * (n - 1) / 2);
        } else {
            int ac = 0;
            int bc = 0;
            for (int i = 0; i < n; i++) {
                if (l1[i] == a) {
                    ac++;
                } else if (l1[i] == b) {
                    bc++;
                }
            }
            System.out.println(a - b + " " + (ac * bc));
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String[] V = sc.nextLine().split(" ");
        int[] V_arr = new int[N];
        String[] C = sc.nextLine().split(" ");
        int[] C_arr = new int[N];
        int[] list = new int[N+1];
        int ans = 0;
        int X = 0;
        int Y = 0;

        for (int i = 0; i < N; i++) {
            V_arr[i] = Integer.parseInt(V[i]);
            C_arr[i] = Integer.parseInt(C[i]);
        }

        for (int i = 0; i < N; i++) {
            if (V_arr[i] - C_arr[i] > 0) {
                X = V_arr[i];
                Y = C_arr[i];
                list[i+1] = X - Y;
            }
        }

        for (int i = 1; i < N+1; i++) {
            ans += list[i];
        }

        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String my_str = "";
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '0' || c == '1') {
                my_str += c;
            } else if (c == 'B' && !my_str.isEmpty()) {
                my_str = my_str.substring(0, my_str.length() - 1);
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int k = Integer.parseInt(input[0]);
        int n = Integer.parseInt(input[1]);
        int w = Integer.parseInt(input[2]);

        if (1 <= k && w <= 100) {
            int total = 0;
            for (int i = 1; i <= w; i++) {
                total += i * k;
            }
            if (total > n) {
                System.out.println(total - n);
            } else {
                System.out.println(0);
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int[] l1 = new int[n];
            String[] input = scanner.nextLine().split(" ");
            for (int j = 0; j < n; j++) {
                l1[j] = Integer.parseInt(input[j]);
            }
            if (sum(l1) > 1) {
                c++;
            }
        }
        System.out.println(c);
    }

    public static int sum(int[] arr) {
        int sum = 0;
        for (int i : arr) {
            sum += i;
        }
        return sum;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        scanner.nextLine();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String[] input = scanner.nextLine().split("");
            for (int j = 0; j < w; j++) {
                if (input[j].equals("#")) {
                    graph[i][j] = Integer.MAX_VALUE;
                } else {
                    graph[i][j] = 0;
                }
            }
        }
        for (int x = 0; x < w - 1; x++) {
            for (int y = 0; y < h; y++) {
                graph[y][x + 1] = Math.min(graph[y][x] + 1, graph[y][x + 1]);
            }
        }
        for (int x = w - 1; x > 0; x--) {
            for (int y = 0; y < h; y++) {
                graph[y][x - 1] = Math.min(graph[y][x] + 1, graph[y][x - 1]);
            }
        }
        for (int y = 0; y < h - 1; y++) {
            for (int x = 0; x < w; x++) {
                graph[y + 1][x] = Math.min(graph[y][x] + 1, graph[y + 1][x]);
            }
        }
        for (int y = h - 1; y > 0; y--) {
            for (int x = 0; x < w; x++) {
                graph[y - 1][x] = Math.min(graph[y][x] + 1, graph[y - 1][x]);
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                max = Math.max(max, graph[i][j]);
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int r = scanner.nextInt();
        int D = scanner.nextInt();
        int x = scanner.nextInt();
        for (int i = 2; i <= 11; i++) {
            int result = (int) (Math.pow(r, i - 1) * (x + D / (1 - r)) - D / (1 - r));
            System.out.println(result);
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        scanner.close();

        String[][] answer = new String[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (i < B) {
                    if (j < A) {
                        answer[i][j] = "0";
                    } else {
                        answer[i][j] = "1";
                    }
                } else {
                    if (j < A) {
                        answer[i][j] = "1";
                    } else {
                        answer[i][j] = "0";
                    }
            }
        }

        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                System.out.print(answer[i][j]);
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = scanner.nextInt();
        }
        int current_cell = 0;
        while (current_cell <= t) {
            current_cell += s[current_cell - 1];
            if (current_cell == t) {
                System.out.println("YES");
                System.exit(0);
            } else {
                continue;
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        long ll = -10000000000000000000000L;
        long rr = 1000000000000000000000L;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        int result = 0;
        for (int b = 0; b < 60; b++) {
            int bs = 0;
            for (int i = 0; i < N; i++) {
                if ((A[i] >> b) % 2 == 1) {
                    bs++;
                }
            }
            result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC046_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int gcd = gcd(360, x);
        System.out.println(360 / gcd);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = scanner.nextInt();
        }
        int ans = Math.abs(r[0]);
        for (int i = 1; i < n; i++) {
            ans += Math.abs(r[i] - r[i - 1]);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_171_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.nextLine().trim();
        String b = scanner.nextLine().trim();
        int x = Math.max(a.length(), b.length());
        a = String.format("%0" + x + "d", Integer.parseInt(a));
        b = String.format("%0" + x + "d", Integer.parseInt(b));
        String s = "";
        int c = 0;
        for (int i = 0; i < x; i++) {
            int d = Integer.parseInt(b.charAt(i) + "") + Integer.parseInt(a.charAt(x - i - 1) + "") + c;
            if (d > 9) {
                s += String.valueOf(d % 10);
                c = 1;
            } else {
                s += String.valueOf(d);
                c = 0;
            }
        }
        if (c == 1) {
            s += "1";
        }
        System.out.println(Integer.parseInt(s.substring(1));
    }
}
import java.util.HashMap;
import java.util.Scanner;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        boolean x = true;
        HashMap<Character, Integer> dt = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        int cnt = 0;
        for (char key : dt.keySet()) {
            int value = dt.get(key);
            if (value % 2 != 0 && cnt < 1) {
                cnt++;
            } else if (value % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }
        if (x) {
            System.out.println("First");
        } else if (!x && s.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && s.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.Scanner;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String input = scanner.next();
        String[] arr = input.split("1");
        int count = 0;
        for (String s : arr) {
            count += s.length();
        }
        int product = 1;
        for (int i = 0; i < count; i++) {
            product *= i + 1;
        }
        System.out.println(product);
    }
}
import java.util.Scanner;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] nums = new int[3];
        String[] operations = new String[3];
        for (int i = 0; i < 3; i++) {
            nums[i] = scanner.nextInt();
        }
        for (int i = 0; i < 3; i++) {
            operations[i] = scanner.next();
        }
        int[] ans = {1000000000000};
        rememberTheNumber(nums, 0, operations, ans);
        System.out.println(ans[0]);
    }

    public static void rememberTheNumber(int[] nums, int i, String[] operations, int[] ans) {
        if (i >= 3) {
            return;
        }
        for (int j = 0; j < 3; j++) {
            for (int k = j + 1; k < 4; k++) {
                if (nums[j] != -1 && nums[k] != -1) {
                    int s = nums[j];
                    int t = nums[k];
                    nums[j] = -1;
                    if (operations[i].equals("+")) {
                        nums[k] = s + t;
                    } else if (operations[i].equals("*")) {
                        nums[k] = s * t;
                    }
                    if (i == 2 && nums[k] < ans[0]) {
                        ans[0] = nums[k];
                    }
                    rememberTheNumber(nums, i + 1, operations, ans);
                    nums[j] = s;
                    nums[k] = t;
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();
        int d = sc.nextInt();
        int max = Math.max(a * c, b * d);
        max = Math.max(max, a * d);
        max = Math.max(max, b * c);
        System.out.println(max);
    }
}
import java.util.Scanner;
import java.math.BigInteger;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int l = 2019;
        BigInteger[] m = new BigInteger[l + 1];
        int a = 0;
        int r = 0;
        for (int i = 0; i < l; i++) {
            m[i] = BigInteger.ZERO;
        }
        m[0] = BigInteger.ONE;
        for (int i = input.length() - 1; i >= 0; i--) {
            a += Integer.parseInt(input.substring(i, i + 1)) * BigInteger.valueOf(Math.pow(10, i)).modPow(l, l);
            r += m[a.mod(l).intValue()].intValue();
            m[a.mod(l).intValue()] = m[a.mod(l).intValue()].add(BigInteger.ONE);
        }
        System.out.println(r);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int id = 0;
        int l = sc.nextInt();
        int r = sc.nextInt();
        for (int i = 1; i < n; i++) {
            int li = sc.nextInt();
            int ri = sc.nextInt();
            if (li <= l && r <= ri) {
                id = i;
            } else if (li < l || r < ri) {
                id = n;
            }
            l = Math.min(l, li);
            r = Math.max(r, ri);
        }
        System.out.println(id == n ? -1 : id + 1);
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.next();
        Set<Character> set = new HashSet<>();
        for (char c : S.toCharArray()) {
            set.add(c);
        }
        if (set.size() != 2) {
            System.out.println("No");
            System.exit(0);
        }
        for (char i : set) {
            int count = 0;
            for (char j : S.toCharArray()) {
                if (i == j) {
                    count++;
                }
            }
            if (count != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }
        System.out.println("Yes");
    }
}
import java.util.*;
import java.io.*;
import java.math.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in);
        PrintWriter out = new PrintWriter(System.out);
        int n = Integer.parseInt(br.readLine().trim());
        if (n == 1) {
            out.println(0);
            return;
        }
        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
        int ans = 0;
        for (int p : primes) {
            while (n % p == 0) {
                ans += n / p;
                n /= p;
            }
        }
        out.println(ans);
    }
}
import java.util.*;

class Node {
    int val;
    boolean color;
    List<int[]> a;

    public Node() {
        this.val = -1;
        this.color = false;
        this.a = new ArrayList<>();
    }
}

public class atcoder_ABC126_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Node[] nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < n - 1; i++) {
            int u = sc.nextInt() - 1;
            int v = sc.nextInt() - 1;
            int w = sc.nextInt();
            nodes[u].val = u;
            nodes[v].val = v;
            nodes[u].a.add(new int[]{nodes[v], w});
            nodes[v].a.add(new int[]{nodes[u], w});
        }
        nodes[0].color = true;
        Set<Node> nodeSet = new HashSet<>();
        traverse(nodes[0], 0, nodeSet);
        for (int i = 0; i < n; i++) {
            if (nodes[i].color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void traverse(Node node, int distance, Set<Node> nodeSet) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }
        for (int[] pair : node.a) {
            Node adjNode = (Node) pair[0];
            int dis = pair[1];
            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            traverse(adjNode, distance + dis, nodeSet);
        }
    }
}
public class atcoder_ABC129_E {
    public static void main(String[] args) {
        int mod = (int) (1e9 + 7);
        Scanner sc = new Scanner(System.in);
        String l = sc.next();
        int n = l.length();
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        for (int i = 0; i < n; i++) {
            char c = l.charAt(i);
            if (c == '0') {
                dp[i + 1][0] += dp[i][0];
                dp[i + 1][1] += dp[i][1] * 3;
            } else {
                dp[i + 1][0] += dp[i][0] * 2;
                dp[i + 1][1] += dp[i][0];
                dp[i + 1][1] += dp[i][1] * 3;
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println(dp[n][0] + dp[n][1] % mod);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String d = "f";
        String ans;
        if (isLeapYear(n)) {
            ans = "ly";
        } else {
            ans = "nly";
        }
        while (true) {
            if (isLeapYear(n)) {
                if (d.equals("m")) {
                    d = "w";
                    n++;
                } else if (d.equals("t")) {
                    d = "th";
                    n++;
                } else if (d.equals("w")) {
                    d = "f";
                    n++;
                } else if (d.equals("th")) {
                    d = "sa";
                    n++;
                } else if (d.equals("f")) {
                    d = "s";
                    n++;
                } else if (d.equals("sa")) {
                    d = "m";
                    n++;
                } else if (d.equals("s")) {
                    d = "t";
                    n++;
                }
            } else {
                if (d.equals("m")) {
                    d = "t";
                    n++;
                } else if (d.equals("t")) {
                    d = "w";
                    n++;
                } else if (d.equals("w")) {
                    d = "th";
                    n++;
                } else if (d.equals("th")) {
                    d = "f";
                    n++;
                } else if (d.equals("f")) {
                    d = "sa";
                    n++;
                } else if (d.equals("sa")) {
                    d = "s";
                    n++;
                } else if (d.equals("s")) {
                    d = "m";
                    n++;
                }
            }
            if (d.equals("f") && ans.equals("ly") && isLeapYear(n)) {
                break;
            } else if (d.equals("f") && ans.equals("nly") && !isLeapYear(n)) {
                break;
            }
        }
        System.out.println(n);
    }

    public static boolean isLeapYear(int year) {
        if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
            return true;
        } else {
            return false;
        }
    }
}
import java.util.Scanner;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        String s = scanner.next();
        int[] count = new int[26];
        for (int i = 0; i < s.length(); i++) {
            count[s.charAt(i) - 'A']++;
        }
        java.util.Arrays.sort(count);
        int res = 0;
        for (int i = 25; i >= 0; i--) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                return;
            }
            res += count[i] * count[i];
            k -= count[i];
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class codeforces_334_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int i = 1, j = n * n;
        while (i < j) {
            System.out.print(i + " " + j + " ");
            i++;
            j--;
            if (i < j) {
                System.out.print(i + " " + j + " ");
                i++;
                j--;
            }
            System.out.println();
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = scanner.nextInt();
        }
        int[] B = new int[n];
        int k = 0;
        for (int i = 0; i < n; i++) {
            if (i == 0 || A[i] <= A[k]) {
                B[k++] = A[i];
            }
        }
        int N = k;

        int[][] dp = new int[N][2];
        dp[0][0] = A[0];
        dp[0][1] = 0;
        for (int i = 1; i < N; i++) {
            if (A[i] <= dp[k - 1][0]) {
                int j;
                for (j = k - 1; j >= 0; j--) {
                    if (dp[j][0] < A[i]) {
                        break;
                    }
                }
                dp[j + 1] = new int[]{A[i], 0};
                k = j + 1;
            } else {
                int isAdded = false;
                for (int j = k - 1; j >= 0; j--) {
                    if (dp[j][1] < n - 1) {
                        dp[j][1]++;
                        isAdded = true;
                        break;
                    }
                }
                if (!isAdded) {
                    dp[k++] = new int[]{A[i], 0};
                }
            }
        }

        int[][] cut = new int[N][2];
        int index = 0;
        for (int i = 0; i < N; i++) {
            cut[index++] = new int[]{dp[i][0], dp[i][1]};
        }

        int bis(int x, int y) {
            if (y == x + 1) {
                return y;
            }
            int mid = (x + y) / 2;
            if (isPossible(mid)) {
                return bis(x, mid);
            } else {
                return bis(mid, y);
            }
        }

        boolean isPossible(int K) {
            int[][] tempDp = new int[N][2];
            for (int i = 0; i < N; i++) {
                tempDp[i] = new int[]{dp[i][0], dp[i][1]};
            }
            for (int i = 0; i < N; i++) {
                if (tempDp[i][1] < K - 1) {
                    int j;
                    for (j = i - 1; j >= 0; j--) {
                        if (tempDp[j][0] < tempDp[i][0] - 1) {
                            break;
                        }
                    }
                    int[][] newDp = new int[j + 1][2];
                    System.arraycopy(tempDp, 0, newDp, 0, j + 1);
                    newDp[j + 1] = new int[]{tempDp[j][0] - 1, tempDp[j][1] + 1};
                    for (int k = j + 2; k < N; k++) {
                        if (tempDp[k][0] > tempDp[j][0]) {
                            newDp[k] = tempDp[k];
                        }
                    }
                    tempDp = newDp;
                    if (tempDp[N - 1][0] < A[i]) {
                        tempDp[N] = new int[]{A[i], 0};
                        N++;
                    }
                    break;
                }
            }
            return tempDp[N - 1][0] < A[N - 1];
        }

        System.out.println(bis(0, N));
    }
}
import java.util.Scanner;

public class codeforces_313_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String soz = sc.nextLine();
        int[] a = new int[soz.length() + 1];
        for (int i = 1; i < soz.length(); i++) {
            a[i] = a[i - 1];
            if (soz.charAt(i - 1) == soz.charAt(i)) {
                a[i]++;
            }
        }
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            String[] input = sc.nextLine().split(" ");
            int m = Integer.parseInt(input[0]);
            int l = Integer.parseInt(input[1]);
            arr[i] = a[l] - a[m - 1];
        }
        for (int i : arr) {
            System.out.println(i);
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        for (int i = 1; i < n; i++) {
            if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                System.out.println("YES");
                return;
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int c = 2;
        for (int i = 0; i < n; i++) {
            if (w[i] == 1) {
                System.out.println(c);
            } else if (w[i] % 2 == 0) {
                c = 3 - c;
                System.out.println(c);
            } else {
                System.out.println(c);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        int[] ans = new int[2];
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        int sum_b = 0;
        int sum_p1 = 0;
        int sum_p2 = 0;
        for (int i = 0; i < q; i++) {
            int[] ql = new int[3];
            for (int j = 0; j < 3; j++) {
                ql[j] = sc.nextInt();
            }
            if (ql[0] == 2) {
                if (p1.size() == p2.size()) {
                    System.out.println(-p2.peek() + " " + (sum_p1 - p1.size() * p2.peek() + p2.size() * -p2.peek() + sum_b));
                } else {
                    System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() + sum_b));
                }
            } else {
                sum_b += ql[2];
                if (p1.isEmpty()) {
                    p1.offer(ql[1]);
                    sum_p1 += ql[1];
                } else if (p1.peek() <= ql[1]) {
                    p1.offer(ql[1]);
                    sum_p1 += ql[1];
                } else {
                    p2.offer(-ql[1]);
                    sum_p2 += ql[1];
                }
                if (p1.size() < p2.size()) {
                    int k = p2.poll();
                    p1.offer(-k);
                    sum_p2 += k;
                    sum_p1 -= k;
                }
                if (p1.size() - 1 > p2.size()) {
                    int k = p1.poll();
                    p2.offer(-k);
                    sum_p1 -= k;
                    sum_p2 += k;
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = h / a;
        int am = h % a;
        if (am != 0) {
            sho += 1;
        }
        System.out.println(sho);
    }
}
import java.util.Scanner;

public class atcoder_ABC158_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String stdin = scanner.nextLine();
        String s = stdin;
        String result = "Yes";
        if (!s.contains("A") || !s.contains("B")) {
            result = "No";
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        int c = 0;
        for (int i = 0; i < n; i++) {
            int l = 1;
            int r = 1;
            if (i > 0 && a[i - 1] > a[i]) {
                l += size[root(b[i - 1])];
                unite(b[i - 1], b[i]);
            }
            if (i + 1 < n && a[i + 1] > a[i]) {
                r += size[root(b[i + 1]);
                unite(b[i + 1], b[i]);
            }
            c += l * r * a[i];
        }
        System.out.println(c);
    }

    public static int root(int x) {
        return x == par[x] ? x : root(par[x]);
    }

    public static boolean same(int x, int y) {
        return root(x) == root(y);
    }

    public static void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (rank[x] < rank[y]) {
                par[x] = y;
                size[y] += size[x];
            } else {
                par[y] = x;
                size[x] += size[y];
                if (rank[x] == rank[y]) {
                    rank[x]++;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int ans = 1, sumL = 0;
        String input = scanner.next();
        String[] sentences = input.split(Pattern.quote(".?!"));
        for (String s : sentences) {
            s = s.trim() + ".";
            int L = s.length();
            if (L > 1) {
                if (L > n) {
                    System.out.println("Impossible");
                    System.exit(0);
                }
                if (sumL + L + (sumL > 0) > n) {
                    ans++;
                    sumL = L;
                } else {
                    sumL += L + (sumL > 0);
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        double time = a;
        while (time <= t + 0.5) {
            cookie += b;
            time += a;
        }
        System.out.println(cookie);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class atcoder_ABC145_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] x = new int[N];
        int[] y = new int[N];
        for (int i = 0; i < N; i++) {
            x[i] = scanner.nextInt();
            y[i] = scanner.nextInt();
        }
        solve(N, x, y);
    }

    public static void solve(int N, int[] x, int[] y) {
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            indices.add(i);
        }
        List<Double> distances = new ArrayList<>();
        for (List<Integer> permutation : generatePermutations(indices)) {
            double totalDistance = 0;
            for (int i = 0; i < N - 1; i++) {
                int f = permutation.get(i);
                int t = permutation.get(i + 1);
                double distance = Math.sqrt(Math.pow(x[t] - x[f], 2) + Math.pow(y[t] - y[f], 2));
                totalDistance += distance;
            }
            distances.add(totalDistance);
        }
        double result = distances.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
        System.out.printf("%.10f\n", result);
    }

    public static List<List<Integer>> generatePermutations(List<Integer> indices) {
        List<List<Integer>> result = new ArrayList<>();
        generatePermutationsHelper(indices, new ArrayList<>(), new boolean[indices.size()], result);
        return result;
    }

    private static void generatePermutationsHelper(List<Integer> indices, List<Integer> current, boolean[] used, List<List<Integer>> result) {
        if (current.size() == indices.size()) {
            result.add(new ArrayList<>(current));
            return;
        }
        for (int i = 0; i < indices.size(); i++) {
            if (!used[i]) {
                current.add(indices.get(i));
                used[i] = true;
                generatePermutationsHelper(indices, current, used, result);
                current.remove(current.size() - 1);
                used[i] = false;
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int S = scanner.nextInt();
        int W = scanner.nextInt();
        if (S <= W) {
            System.out.println("unsafe");
        } else {
            System.out.println("safe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String ip = scanner.nextLine();
        String st = "";
        if (ip.length() != 1) {
            if (ip.charAt(0) == '9') {
                st = "9";
                ip = ip.substring(1);
            }
            for (int i = 0; i < ip.length(); i++) {
                int num = Character.getNumericValue(ip.charAt(i));
                if (num > 4) {
                    int n = 9 - num;
                    st += String.valueOf(n);
                } else {
                    st += ip.charAt(i);
                }
            }
        } else {
            st = ip;
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        System.out.println(nPairsWithCommonFX(n, x));
    }

    public static int nPairsWithCommonFX(int n, int x) {
        Map<Integer, Integer> storage = new HashMap<>();
        int[] FXs = new int[n];
        for (int i = 0; i < n; i++) {
            FXs[i] = f(scanner.nextInt());
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            int y = FXs[i];
            if (!storage.containsKey(y)) {
                storage.put(y, 1);
            } else {
                storage.put(y, storage.get(y) + 1);
            }
        }
        int sum = 0;
        for (int y : storage.keySet()) {
            sum += storage.get(y) * storage.get(y);
        }
        int sum2 = 0;
        for (int y : storage.keySet()) {
            sum2 += storage.get(y);
        }
        return sum - sum2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class codeforces_96_B {
    public static void main(String[] args) {
        ArrayList<Integer> l = new ArrayList<>();
        int limit = 1000000000;
        gen(0, 0, 0, l);
        Collections.sort(l);
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int ans = 0;
        for (int val : l) {
            if (val >= n) {
                ans = val;
                break;
            }
        }
        System.out.println(ans);
    }

    public static void gen(int number, int four, int seven, ArrayList<Integer> l) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        gen(number * 10 + 4, four + 1, seven, l);
        gen(number * 10 + 7, four, seven + 1, l);
    }
}
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] low = new int[n];
        int[] high = new int[n];
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            low[i] = a;
            high[i] = b;
        }
        java.util.Arrays.sort(low);
        java.util.Arrays.sort(high);
        if (n % 2 == 1) {
            System.out.println(high[(n + 1) / 2 - 1] - low[(n + 1) / 2 - 1] + 1);
        } else {
            int hh = (high[n / 2 - 1] + high[n / 2]) / 2;
            int ll = (low[n / 2 - 1] + low[n / 2]) / 2;
            System.out.println((hh - ll) * 2 + 1);
        }
    }
}
import java.util.*;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[] degs = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        List<Set<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edges.add(new HashSet<>());
        }
        for (int i = 0; i < M; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            edges.get(a).add(b);
            edges.get(b).add(a);
            degs[a]++;
            degs[b]++;
        }
        if (M % 2 != 0) {
            System.out.println(-1);
            return;
        }
        PriorityQueue<int[]> Q = new PriorityQueue<>(Comparator.comparingInt(o -> o[0]);
        for (int i = 0; i < N; i++) {
            Q.offer(new int[]{degs[i], i});
        }
        while (!Q.isEmpty()) {
            int[] front = Q.poll();
            int u = front[1];
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int v : edges.get(u)) {
                edges.get(v).remove(u);
                if (parity[u] != 0 && front[0] == 1) {
                    System.out.println((u + 1) + " " + (v + 1));
                    parity[u] = 1 - parity[u];
                } else {
                    System.out.println((v + 1) + " " + (u + 1));
                    parity[v] = 1 - parity[v];
                }
                degs[v]--;
                Q.offer(new int[]{degs[v], v});
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_147_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String[] punctuation = {",", ".", "!", "?"};
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (i >= 1) {
                if (s.charAt(i) == ' ') {
                    if (res.charAt(res.length() - 1) != ' ') {
                        res.append(s.charAt(i));
                    } else {
                        continue;
                    }
                } else {
                    if (Arrays.asList(punctuation).contains(String.valueOf(s.charAt(i))) && res.charAt(res.length() - 1) != ' ') {
                        res.append(s.charAt(i));
                        res.append(" ");
                    } else {
                        res.append(s.charAt(i));
                    }
                }
            } else {
                if (s.charAt(i) == ' ') {
                    continue;
                }
                if (Arrays.asList(punctuation).contains(String.valueOf(s.charAt(i))) || s.charAt(i) == ' ') {
                    continue;
                } else {
                    res.append(s.charAt(i));
                }
            }
        }
        System.out.println(res.toString().trim());
    }
}
import java.util.Scanner;

public class atcoder_ABC152_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int MOD = (int) (1e9 + 7);
        int _lcm = 1;
        for (int a : A) {
            _lcm = _lcm * a / gcd(_lcm, a);
        }
        int ans = 1;
        for (int s : A) {
            ans = (ans * pow(s, MOD - 2, MOD)) % MOD;
        }
        ans = _lcm * ans % MOD;
        System.out.println(ans);
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    public static int pow(int base, int exp, int mod) {
        if (exp == 0) {
            return 1;
        }
        int res = 1;
        base %= mod;
        while (exp > 0) {
            if (exp % 2 == 1) {
                res = (res * base) % mod;
            }
            exp >>= 1;
            base = (base * base) % mod;
        }
        return res;
    }
}
import java.util.Scanner;

public class codeforces_203_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int x = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        if (x == 0) {
            System.out.println("YES");
            System.out.println("Result Found");
        } else {
            int a_time = Math.min(a / da, t - 1);
            int b_time = Math.min(b / db, t - 1);
            for (int i = 0; i <= a_time; i++) {
                for (int j = 0; j <= b_time; j++) {
                    if (a - i * da == x || b - j * db == x) {
                        System.out.println("YES");
                        System.out.println("Result Found");
                        return;
                    }
                    if (a - i * da + b - j * db == x) {
                        System.out.println("YES");
                        System.out.println("Result Found");
                        return;
                    }
                }
            }
            System.out.println("NO");
            System.out.println("Result Not Found");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int k = scanner.nextInt();

        int[] a = new int[x];
        int[] b = new int[y];
        int[] c = new int[z];

        for (int i = 0; i < x; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < z; i++) {
            c[i] = scanner.nextInt();
        }

        int[] ab = new int[x * y];
        int index = 0;
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                ab[index++] = a[i] + b[j];
            }
        }
        Arrays.sort(ab, (a, b) -> b - a);

        int[] abc = new int[Math.min(k, x * y)];
        for (int i = 0; i < abc.length; i++) {
            for (int j = 0; j < z; j++) {
                abc[i] = ab[i] + c[j];
            }
        }
        Arrays.sort(abc, (a, b) -> b - a);

        for (int i = 0; i < k; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC155_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input_methods = {"clipboard", "file", "key"};
        int using_method = 0;
        String input_method = input_methods[using_method];
        int mod = 1000000007;

        int[] IN = new int[1];
        IN[0] = scanner.nextInt();

        int pp = 0;
        int na = 0;
        String s = scanner.next();
        for (int i = s.length() - 1; i >= 0; i--) {
            int cc = na + Character.getNumericValue(s.charAt(i));
            na = 0;
            if (cc <= 4) {
                pp += cc;
            } else {
                na = 1;
                if (i == s.length() - 1) {
                    pp += 1;
                }
                pp += 10 - cc;
        }
        System.out.println(pp);

        int pmin = 1000;
        int mmin = 0;
        String s = "0" + scanner.next();
        for (int i = s.length() - 1; i >= 0; i--) {
            int v = Character.getNumericValue(s.charAt(i));
            int npmin = Math.min(pmin + 10 - (v + 1), mmin + 10 - v);
            int nmmin = Math.min(pmin + v + 1, mmin + v);
            pmin = npmin;
            mmin = nmmin;
        }
        System.out.println(Math.min(pmin, mmin));
    }
}
import java.util.Scanner;

public class codeforces_369_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();

        int[] ans = get_nums(k, sk);
        int[] ans2 = get_nums(n - k, sa - sk);
        for (int i = 0; i < ans2.length; i++) {
            ans[k + i] = ans2[i];
        }

        for (int i = 0; i < ans.length; i++) {
            System.out.print(ans[i] + " ");
        }
    }

    public static int[] get_nums(int num, int t) {
        int[] result = new int[num];
        for (int i = 0; i < num; i++) {
            if (i < t % num) {
                result[i] = t / num + 1;
            } else {
                result[i] = t / num;
            }
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i = 0; i < N - 1; i++) {
            int a = sc.nextInt() - 1;
            int b = sc.nextInt() - 1;
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        int mod = (int) (1e9 + 7);
        int[] memo = new int[N];
        Arrays.fill(memo, -1);
        int ans = dfs(0, -1, K, graph, memo);
        System.out.println(ans);
    }

    public static int dfs(int fro, int to, int f, List<List<Integer>> graph, int[] memo) {
        if (memo[fro] != -1) {
            return memo[fro];
        }
        int caseNum = f;
        int colorNum = K - 1;
        if (f == K) {
            colorNum--;
        }
        for (int u : graph.get(fro)) {
            if (u == to) {
                continue;
            }
            int pat = dfs(u, fro, colorNum, graph, memo);
            if (pat == 0) {
                caseNum = 0;
                break;
            }
            caseNum = (caseNum * pat) % mod;
            colorNum--;
        }
        memo[fro] = caseNum;
        return caseNum;
    }
}
import java.util.HashSet;
import java.util.Scanner;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int pya = sc.nextInt();
        String[] arre = new String[pya];
        for (int i = 0; i < pya; i++) {
            arre[i] = sc.next().toLowerCase();
        }
        String oString = sc.next().toLowerCase();
        char letter1 = sc.next().charAt(0);
        char letter2 = (letter1 == 'a') ? 'b' : 'a';
        boolean[] valid = new boolean[oString.length()];
        HashSet<Integer> setcito = new HashSet<>();
        for (String x : arre) {
            int wat = 0;
            while (true) {
                int index = oString.indexOf(x, wat);
                if (index < 0) {
                    break;
                }
                for (int j = index; j < index + x.length(); j++) {
                    setcito.add(j);
                }
                wat = index + 1;
            }
        }
        char[] oStringArray = oString.toCharArray();
        for (int i : setcito) {
            char letter = (oString.charAt(i) == letter1) ? letter1 : letter2;
            oStringArray[i] = (oString.charAt(i) >= 'A' && oString.charAt(i) <= 'Z') ? Character.toUpperCase(letter) : letter;
        }
        for (char x : oStringArray) {
            System.out.print(x);
        }
        System.out.println();
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static int sum(int k) {
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int m = scanner.nextInt();
        int k = scanner.nextInt();
        int lo = 0;
        int hi = (int) 1e18;
        while (hi - lo > 1) {
            int md = (lo + hi) / 2;
            int c = sum(m + md - 1) - sum(m - 1);
            if (c * k <= w) {
                lo = md;
            } else {
                hi = md;
            }
        }
        System.out.println(lo);
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        ArrayList<int[]> games = new ArrayList<>();
        for (int i = a; i <= x; i++) {
            if (i <= b) {
                continue;
            } else {
                for (int j = b; j <= y; j++) {
                    if (i > j) {
                        games.add(new int[]{i, j});
                    }
                }
            }
        }
        System.out.println(games.size());
        for (int[] game : games) {
            System.out.println(game[0] + " " + game[1]);
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int s = scanner.nextInt();
        int c = 0;
        for (int i = 0; i < n; i++) {
            int f = scanner.nextInt();
            int t = scanner.nextInt();
            int x = t - (s - f);
            if (x > c) {
                c = x;
        }
        System.out.println(s + c);
    }
}
import java.util.Scanner;
import java.util.HashSet;
import java.util.Set;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int max_level = scanner.nextInt();
        int[] x = new int[max_level];
        int[] y = new int[max_level];
        for (int i = 0; i < max_level; i++) {
            x[i] = scanner.nextInt();
        }
        for (int i = 0; i < max_level; i++) {
            y[i] = scanner.nextInt();
        }
        Set<Integer> setX = new HashSet<>();
        Set<Integer> setY = new HashSet<>();
        for (int i = 1; i < max_level; i++) {
            setX.add(x[i]);
            setY.add(y[i]);
        }
        setX.remove(0);
        setY.remove(0);
        Set<Integer> z = new HashSet<>(setX);
        z.addAll(setY);
        if (z.size() != max_level) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] arr = new double[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextDouble();
        }
        Arrays.sort(arr);
        int o = 2 * n - arr.length;
        double arr_sum = 0;
        for (double a : arr) {
            arr_sum += a;
        }
        double res = 2e9;
        for (int i = 0; i <= n; i++) {
            if (i + o >= n) {
                res = Math.min(res, Math.abs(i - arr_sum));
            }
        }
        System.out.printf("%.3f", res);
    }
}
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt() * N + i;
        }
        java.util.Arrays.sort(A);
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            int d = A[i] % N % 2;
            if (d % 2 != i % 2) {
                cnt++;
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] cake = new String[n];
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        for (int i = 0; i < n; i++) {
            cake[i] = scanner.next();
            for (int j = 0; j < n; j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k > chocCount - 2; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            chocCount = 0;
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int k = chocCount; k > chocCount - 2; k--) {
                    nfat *= k;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
        }
        System.out.println(happiness);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class codeforces_459_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] l1 = scanner.nextLine().split(" ");
        int x1 = Integer.parseInt(l1[0]);
        int y1 = Integer.parseInt(l1[1]);
        int x2 = Integer.parseInt(l1[2]);
        int y2 = Integer.parseInt(l1[3]);
        int denominator = x2 - x1;
        int numerator = y2 - y1;
        double quotient = (double) numerator / denominator;

        if (denominator != 0) {
            quotient = numerator / denominator;
        }

        if (numerator == 0) {
            int d = (int) Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
            int x4 = x1;
            int x3 = x2;
            int y3 = y2 + d;
            int y4 = y1 + d;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        } else if (denominator == 0) {
            int y4 = y2;
            int y3 = y1;
            int d = (int) Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
            int x4 = x1 + d;
            int x3 = x2 + d;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        } else if (quotient == 1) {
            int x4 = x2;
            int x3 = x1;
            int y4 = y1;
            int y3 = y2;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        } else if (quotient == -1) {
            int x4 = x1;
            int x3 = x2;
            int y4 = y2;
            int y3 = y1;
            System.out.println(x3 + " " + y3 + " " + x4 + " " + y4);
        } else {
            System.out.println("-1");
        }
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String result = "";
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == '.') {
                result += '0';
            } else {
                i++;
                if (s.charAt(i) == '.') {
                    result += '1';
                } else {
                    result += '2';
                }
            }
            i++;
        }
        System.out.println(result);
    }
}
import java.util.*;

public class atcoder_AGC012_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
            A[i] = sc.nextInt();
        }
        Arrays.sort(A);
        int ans = 0;
        for (int i = n - 3; i >= 0; i -= 2) {
            ans += A[i];
        }
        System.out.println(ans);
    }
}
import java.util.HashMap;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int mod = (int) Math.pow(10, 9) + 7;
        HashMap<Integer, HashMap<String, Integer>> memo = new HashMap<>();
        for (int i = 0; i <= n; i++) {
            memo.put(i, new HashMap<>());
        }
        System.out.println(dfs(0, "TTT", memo, n, mod));
    }

    public static boolean ok(String last4) {
        for (int i = 0; i < 4; i++) {
            char[] t = last4.toCharArray();
            if (i >= 1) {
                char temp = t[i];
                t[i] = t[i - 1];
                t[i - 1] = temp;
            }
            if (new String(t).contains("AGC")) {
                return false;
            }
        }
        return true;
    }

    public static int dfs(int cur, String last3, HashMap<Integer, HashMap<String, Integer>> memo, int n, int mod) {
        if (memo.get(cur).containsKey(last3)) {
            return memo.get(cur).get(last3);
        }
        int ret = 0;
        if (cur == n) {
            return 1;
        }
        for (char c : "ACGT".toCharArray()) {
            if (ok(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c, memo, n, mod)) % mod;
            }
        }
        memo.get(cur).put(last3, ret);
        return ret;
    }
}
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] ABC = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            ABC[i] = Integer.parseInt(input[i]);
        }

        if (count(ABC, 5) == 2) {
            if (sum(ABC) == 17) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        } else {
            System.out.println("NO");
        }
    }

    public static int count(int[] arr, int num) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == num) {
                count++;
            }
        }
        return count;
    }

    public static int sum(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum;
    }
}
import java.util.Scanner;

public class codeforces_629_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = 368;
        int[] m = new int[N];
        int[] f = new int[N];
        int testCases = scanner.nextInt();
        for (int i = 0; i < testCases; i++) {
            String[] input = scanner.nextLine().split(" ");
            char x = input[0].charAt(0);
            int a = Integer.parseInt(input[1]);
            int b = Integer.parseInt(input[2]);
            if (x == 'M') {
                m[a] += 2;
                m[b] -= 2;
            } else {
                f[a] += 2;
                f[b] -= 2;
            }
        }
        int a = 0, b = 0, c = 0;
        for (int i = 0; i < N; i++) {
            a += m[i];
            b += f[i];
            c = Math.min(a, b);
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class atcoder_ABC123_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] A = new int[5];
        for (int i = 0; i < 5; i++) {
            A[i] = scanner.nextInt();
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < 5; i++) {
            if (A[i] < min) {
                min = A[i];
            }
        }
        System.out.println(Math.ceil(N / (double) min) + 4);
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long K = sc.nextLong();
        long[] L = new long[N];
        for (int i = 0; i < N; i++) {
            L[i] = sc.nextLong();
        }
        List<Long> path = new ArrayList<>();
        path.add(1L);
        int ind = 0;
        int count = 0;
        long x = 1;
        long t = -1;
        boolean flag = false;
        Map<Long, Integer> Hash = new HashMap<>();
        Hash.put(-1L, 0);
        for (int i = 0; i < N; i++) {
            long ne = L[(int) x];
            if (Hash.containsKey(ne)) {
                flag = true;
                t = Hash.get(ne);
                break;
            }
            path.add(ne);
            ind++;
            Hash.put(ne, ind);
            x = ne;
        }
        if (flag) {
            List<Long> loop = new ArrayList<>(path.subList((int) t, path.size()));
            if (K < path.size()) {
                System.out.println(path.get((int) (K - 1));
            } else {
                K = K % path.size();
                K = K % loop.size();
                System.out.println(loop.get((int) K));
            }
        } else {
            System.out.println(path.get((int) (K - 1));
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC051_A {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    String input = sc.nextLine();
    System.out.println(input.replace(",", " "));
  }
}
import java.util.Scanner;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        String s = scanner.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = scanner.nextInt();
            problems[i][1] = scanner.nextInt();
        }
        int[] cumsum = new int[n + 1];
        int total = 0;
        for (int i = 1; i <= n; i++) {
            if (s.substring(i - 1, i + 1).equals("AC")) {
                total++;
            }
            cumsum[i] = total;
        }
        for (int i = 0; i < q; i++) {
            System.out.println(cumsum[problems[i][1]] - cumsum[problems[i][0]]);
        }
    }
}
import java.util.Scanner;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        if (arr[0] > 15) {
            System.out.println(15);
        } else {
            for (int i = 1; i < n; i++) {
                if (arr[i] - arr[i - 1] > 15) {
                    System.out.println(arr[i - 1] + 15);
                    break;
                }
            }
            if (arr[n - 1] == 90 || arr[n - 1] + 15 >= 90) {
                System.out.println(90);
            } else {
                System.out.println(arr[n - 1] + 15);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1, b = 0;
        for (int i = 0; i < n; i++) {
            b = Math.max(b, lis[i]);
        }
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (check(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean check(int[] lis, int k, int mid) {
        int temp = k;
        for (int i : lis) {
            if (i % mid == 0) {
                temp += 1;
            }
            temp -= (i / mid);
        }
        return temp >= 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC154_A {
    public static void solve(String S, String T, int A, int B, String U) {
        if (S.equals(U)) {
            A--;
        }
        if (T.equals(U)) {
            B--;
        }
        System.out.println(A + " " + B);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String T = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, T, A, B, U);
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String[] s = scanner.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String element : s) {
            if (w.containsKey(element)) {
                w.put(element, w.get(element) + 1);
            } else {
                w.put(element, 1);
            }
        }
        String[] sReverse = new String[s.length];
        for (int i = s.length - 1; i >= 0; i--) {
            sReverse[s.length - 1 - i] = s[i];
        }
        int c = -1;
        int a = 0;
        int maxValue = 0;
        for (String key : w.keySet()) {
            if (w.get(key) > maxValue) {
                maxValue = w.get(key);
            }
        }
        for (String key : w.keySet()) {
            if (w.get(key) == maxValue) {
                if (sReverse.indexOf(key) > c) {
                    a = Integer.parseInt(key);
                    c = sReverse.indexOf(key);
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[] x = new int[n];
        int m = 0;
        int q = 0;
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        for (int a = 0; a < n - 1; a++) {
            if (x[a] >= x[a + 1]) {
                q = (x[a] - x[a + 1]) / d + 1;
                m += q;
                x[a + 1] += q * d;
            }
        }
        System.out.println(m);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC150_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] orig = new int[n];
        for (int i = 0; i < n; i++) {
            orig[i] = i + 1;
        }
        int[] p = Arrays.stream(sc.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int[] q = Arrays.stream(sc.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int pn = Arrays.asList(orig).indexOf(Arrays.asList(p));
        int qn = Arrays.asList(orig).indexOf(Arrays.asList(q));
        System.out.println(Math.abs(pn - qn));
    }
}
import java.util.Scanner;

public class atcoder_ABC145_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int T = scanner.nextInt();
        int[][] time_value = new int[N + 1][2];
        for (int i = 1; i <= N; i++) {
            time_value[i][0] = scanner.nextInt();
            time_value[i][1] = scanner.nextInt();
        }
        int[][] dp = new int[N + 1][T + 1];
        for (int t = 0; t <= T; t++) {
            dp[0][t] = 0;
        }
        for (int n = 1; n <= N; n++) {
            dp[n][0] = 0;
            for (int t = 1; t <= T; t++) {
                if (time_value[n][0] > t) {
                    dp[n][t] = dp[n - 1][t];
                } else {
                    dp[n][t] = Math.max(dp[n - 1][t], time_value[n][1] + dp[n - 1][t - time_value[n][0]]);
                }
            }
        }
        int val_acum = time_value[N][1];
        int t = T - 1;
        int max_val = val_acum + dp[N - 1][t];
        for (int n = N - 1; n > 0; n--) {
            val_acum += time_value[n][1];
            t -= time_value[n + 1][0];
            if (t < 0) {
                break;
            }
            max_val = Math.max(max_val, val_acum + dp[n - 1][t]);
        }
        System.out.println(max_val);
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        ArrayList<Integer> lst = new ArrayList<>();
        String[] input = sc.nextLine().split(" ");
        for (String s : input) {
            lst.add(Integer.parseInt(s));
        }
        java.util.Collections.sort(lst);
        java.util.Collections.reverse(lst);
        int od = 0;
        for (int i : lst) {
            if (i % 2 != 0) {
                od++;
            }
        }
        int sum = 0;
        boolean ok = false;
        for (int i = 0; i < n; i++) {
            if (lst.get(i) % 2 == 0) {
                sum += lst.get(i);
            } else {
                if (ok || od > 1) {
                    sum += lst.get(i);
                    od--;
                    ok = !ok;
                }
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int x = 0;
        if (k <= Math.max(n * n / 2, n * n - n * n / 2)) {
            System.out.println("YES");
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (i % 2 == j % 2 && x < k) {
                        System.out.print("L");
                        x++;
                    } else {
                        System.out.print("S");
                    }
                }
                System.out.println();
            }
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = scanner.nextInt();
        }
        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int p = 0, m = 0, x = 0, y = N - 1, lastx = N, lasty = N;
        for (int i = 0; i < N; i++) {
            if (lst[i] > 0) {
                lst_p[p++] = lst[i];
            } else if (lst[i] < 0) {
                lst_m[m++] = lst[i];
            }
        }
        int ans = check(K, lst_p, lst_m, p, m, x, y, lastx, lasty);
        System.out.println(ans);
    }

    public static int check(int K, int[] lst_p, int[] lst_m, int p, int m, int x, int y, int lastx, int lasty) {
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j <= K; j++) {
            if (j > lastx || K - j > lasty) {
                continue;
            }
            int p_val = (j > 0) ? lst_p[j - 1] : 0;
            int m_val = (K - j > 0) ? lst_m[lasty - (K - j)] : 0;
            ans = Math.min(ans, Math.min(2 * p_val + Math.abs(m_val), p_val + 2 * Math.abs(m_val));
        }
        return ans;
    }
}
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        int[] l2 = new int[n];
        for (int i = 0; i < n; i++) {
            if (l[i] % m == 0) {
                l2[i] = l[i] / m;
            } else {
                l2[i] = l[i] / m + 1;
            }
        }
        int mx = l2[0];
        for (int i = 1; i < n; i++) {
            if (l2[i] > mx) {
                mx = l2[i];
            }
        }
        int ind = 0;
        for (int i = 0; i < n; i++) {
            if (l2[i] == mx) {
                ind = i;
                break;
            }
        }
        System.out.println(ind + 1);
    }
}
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = sc.nextInt();
        }
        int[] ls = new int[N];
        for (int i = 0; i < N; i++) {
            ls[i] = lis[i] % 2;
        }
        int one = 0;
        int zero = 0;
        for (int i = 0; i < N; i++) {
            if (ls[i] == 1) {
                one++;
            } else {
                zero++;
            }
        }
        int pattern_a = 0;
        int pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combination(zero, j);
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += combination(one, time);
            }
            time++;
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static int combination(int n, int r) {
        int a = 1;
        for (int i = 0; i < r; i++) {
            a *= n - i;
        }
        for (int j = 1; j <= r; j++) {
            a /= j;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_682_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        for (int i = 0; i < n; i++) {
            if (l[i] > c) {
                c++;
            }
        }
        System.out.println(c + 1);
    }
}
import java.util.Scanner;

public class atcoder_ARC062_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] s = input.split(" ");
        int num_g = 0;
        int num_p = 0;
        int score = 0;
        for (String x : s) {
            if (x.equals("g")) {
                if (num_g - num_p > 0) {
                    score++;
                    num_p++;
                } else {
                    score = score;
                    num_g++;
                }
            } else if (x.equals("p")) {
                if (num_g - num_p > 0) {
                    score = score;
                    num_p++;
                } else {
                    score--;
                    num_g++;
                }
            }
        }
        System.out.println(score);
    }
}
import java.util.HashSet;
import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        System.out.println(aaa(N, "0"));
    }

    public static int aaa(int N, String n) {
        if (Integer.parseInt(n) > N) {
            return 0;
        }
        int ans = 1;
        if (new HashSet<Character>(n.chars().mapToObj(c -> (char) c).toList()).equals(new HashSet<>(List.of('7', '5', '3'))) {
            ans = 1;
        }
        for (char i : "753".toCharArray()) {
            ans += aaa(N, n + i);
        }
        return ans;
    }
}
import java.util.*;
import java.math.*;

public class atcoder_AGC002_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        int[][] balls = new int[N][2];
        for (int i = 0; i < N; i++) {
            balls[i][0] = 1;
            balls[i][1] = 0;
        }
        balls[0][0] = 0;
        balls[0][1] = 1;
        for (int i = 0; i < M; i++) {
            int x = sc.nextInt();
            int y = sc.nextInt();
            int w_x = balls[x - 1][0];
            int r_x = balls[x - 1][1];
            int w_y = balls[y - 1][0];
            int r_y = balls[y - 1][1];
            if (w_x >= 1 && r_x >= 1) {
                balls[x - 1][0]--;
                balls[y - 1][1]++;
            } else if (w_x == 0) {
                balls[x - 1][1]--;
                balls[y - 1][1]++;
            } else {
                balls[x - 1][0]--;
                balls[y - 1][0]++;
            }
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            if (balls[i][1] > 0) {
                ans++;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String s = scanner.next();
        if (n % 2 != 0) {
            System.out.println("No");
        } else if (s.substring(0, n / 2).equals(s.substring(n / 2))){
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.*;
import java.io.*;
import java.math.*;

public class codeforces_61_B {
    public static boolean valid(int i, int j, int n, int m) {
        if (i < n && i >= 0 && j >= 0 && j < m) {
            return true;
        }
        return false;
    }

    public static double sumn(int i, int n) {
        return (n - i) * (i + n) / 2.0;
    }

    public static double sqfun(double a, double b, double c) {
        return (-b + Math.sqrt(b * b - 4 * a * c)) / (2 * a);
    }

    public static List<String> value() throws IOException {
        String[] input = new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ");
        List<Integer> list = new ArrayList<>();
        for (String s : input) {
            list.add(Integer.parseInt(s));
        }
        return list;
    }

    public static List<Integer> inlst() throws IOException {
        String[] input = new BufferedReader(new InputStreamReader(System.in)).readLine().split(" ");
        List<Integer> list = new ArrayList<>();
        for (String s : input) {
            list.add(Integer.parseInt(s));
        }
        return list;
    }

    public static int inp() throws IOException {
        return Integer.parseInt(new BufferedReader(new InputStreamReader(System.in)).readLine());
    }

    public static String instr() throws IOException {
        return new BufferedReader(new InputStreamReader(System.in)).readLine();
    }

    public static String f(String s) {
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (c != '-' && c != ';' && c != '_') {
                sb.append(Character.toLowerCase(c));
            }
        }
        return sb.toString();
    }

    public static void solve() throws IOException {
        List<String> l = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            l.add(f(instr()));
        }
        Set<String> set = new HashSet<>(l);
        for (int i = 0; i < inp(); i++) {
            String s = f(instr());
            if (set.contains(s)) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static void main(String[] args) throws IOException {
        solve();
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int ans = 0;
        while (Math.pow(10, i) <= N) {
            ans += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
            i += 2;
        }
        ans += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ARC086_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] a = new int[N];
        for (int i = 0; i < N; i++) {
            a[i] = sc.nextInt();
        }
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < N; i++) {
            if (Math.abs(a[i]) > max_val) {
                max_val = Math.abs(a[i]);
                max_sign = Integer.compare(a[i], 0);
                max_index = i;
            }
        }
        if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println(max_index + 1 + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println(i + 1 + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println(max_index + 1 + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println(i + 1 + " " + i);
            }
        }
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        HashMap<Character, Integer> even = new HashMap<>();
        HashMap<Character, Integer> odd = new HashMap<>();

        for (int i = 0; i < s.length(); i += 2) {
            char c = s.charAt(i);
            even.put(c, even.getOrDefault(c, 0) + 1);
        }

        for (int i = 1; i < s.length(); i += 2) {
            char c = s.charAt(i);
            odd.put(c, odd.getOrDefault(c, 0) + 1);
        }

        int diff1 = s.length() - (even.getOrDefault('0', 0) + odd.getOrDefault('1', 0));
        int diff2 = s.length() - (even.getOrDefault('1', 0) + odd.getOrDefault('0', 0));

        System.out.println(Math.min(diff1, diff2));
    }
}
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();
        Queue<Task> remaining = new LinkedList<>();
        boolean running = false;
        int finish_time = 0;
        int[] result = new int[n];

        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task task = new Task(time, duration, i);
            result[i] = 0;
            if (task.time > finish_time && remaining.isEmpty()) {
                running = true;
                finish_time = task.time + task.duration;
                result[i] = finish_time;
            } else {
                if (task.time >= finish_time && !remaining.isEmpty()) {
                    finish_time = Math.max(finish_time, task.time) + task.duration;
                    result[i] = finish_time;
                }
                if (remaining.size() < b) {
                    remaining.add(task);
                } else {
                    result[i] = -1;
                }
            }
        }

        while (!remaining.isEmpty()) {
            Task task = remaining.poll();
            finish_time = Math.max(finish_time, task.time) + task.duration;
            result[task.index] = finish_time;
        }

        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int pre = Integer.MAX_VALUE;
        int ans = 0;
        for (int j = 0; j < n; j++) {
            ans += Math.max(0, Math.min(pre - 1, a[j]));
            pre = Math.max(0, Math.min(pre - 1, a[j]));
        }
        System.out.println(ans);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] na = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int n = na[0];
        int x = na[1];
        int[] a = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        Arrays.sort(a);
        int ans = 0;
        if (a[0] > x) {
            System.out.println(0);
            System.exit(0);
        }
        for (int i : a) {
            if (i > x) {
                x = 0;
                break;
            }
            x -= i;
            ans++;
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class codeforces_669_A {
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    System.out.println((n * 2 + 1) / 3);
  }
}
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String S = sc.nextLine();
        int n = S.length();
        if (n == 1) {
            if (S.equals("5") || S.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            return;
        }
        int mod = (int) Math.pow(10, 9) + 7;
        int[][] dp = new int[n][13];
        for (int i = 0; i < 13; i++) {
            dp[0][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            for (int k = 0; k < 13; k++) {
                if (S.charAt(i) != '?') {
                    int j = S.charAt(i) - '0';
                    dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                    }
                }
                dp[i][(k * 10) % 13] %= mod;
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        double[][] points = new double[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextDouble();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double distance = 0.0;
                for (int k = 0; k < d; k++) {
                    distance += Math.pow(points[i][k] - points[j][k], 2);
                }
                distance = Math.sqrt(distance);
                if (distance == (int) distance) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
100%|██████████| 250/250 [00:00<00:00, 20892.55it/s]
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int l = 1;
        int r = n;
        while (l < r) {
            int mid = l + (r - l) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if (idxcnt < n) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        l -= 1;
        idxcnt = l * (l + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
import java.util.Scanner;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        int[] b = new int[n];
        int[] c = new int[n];
        int x = 0;
        int y = 0;
        int z = 0;

        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }

        for (int i : a) {
            x += i;
        }
        for (int i : b) {
            y += i;
        }
        for (int i : c) {
            z += i;
        }

        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class codeforces_131_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        HashMap<Integer, Integer> w = new HashMap<>();
        for (int i = 0; i < n; i++) {
            int num = scanner.nextInt();
            w.put(num, w.getOrDefault(num, 0) + 1);
        }
        int c = 0;
        for (int i : w.keySet()) {
            if (i == 0) {
                c += w.get(i) * (w.get(i) - 1);
            } else {
                if (w.containsKey(-i)) {
                    c += i * w.get(-i);
                }
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.Scanner;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int restoSciolte = 0;
        while (candeleIntere > 0 || restoSciolte >= b) {
            candeleIntere += restoSciolte / b;
            restoSciolte %= b;
            s += candeleIntere;
            restoSciolte += candeleIntere % b;
            candeleIntere /= b;
        }
        System.out.println(s);
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model WizardLM/WizardCoder-Python-34B-V1.0 --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Filename:  atcoder_ABC112_C.java
Filename:  atcoder_ABC104_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC104_C.java' returned non-zero exit status 1.
Filename:  codeforces_678_A.java
Filename:  codeforces_400_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_404_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Filename:  atcoder_AGC021_B.java
Filename:  atcoder_ABC089_C.java
Filename:  atcoder_AGC013_A.java
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC014_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC151_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC151_A.java' returned non-zero exit status 1.
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC118_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC118_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Filename:  codeforces_474_B.java
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_342_B.java' returned non-zero exit status 1.
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC019_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  atcoder_ABC150_D.java
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC149_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Filename:  atcoder_ABC120_C.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC148_F.java
Filename:  atcoder_ABC070_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC070_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_306_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_327_A.java
Filename:  codeforces_567_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_567_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC006_B.java' returned non-zero exit status 1.
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_110_B.java' returned non-zero exit status 1.
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC110_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC123_B.java
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  codeforces_30_A.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC142_A.java
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Filename:  atcoder_AGC004_D.java
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_C.java
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_49_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC004_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_456_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_456_A.java' returned non-zero exit status 1.
Filename:  codeforces_598_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_598_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC027_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC027_B.java' returned non-zero exit status 1.
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC011_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC125_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC007_C.java
Filename:  codeforces_459_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_459_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC038_A.java' returned non-zero exit status 1.
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC155_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC169_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC126_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC129_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC129_E.java' returned non-zero exit status 1.
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC029_C.java' returned non-zero exit status 1.
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Filename:  atcoder_ABC145_C.java
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_96_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_147_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_147_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC152_E.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC123_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC155_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC155_E.java' returned non-zero exit status 1.
Filename:  codeforces_369_B.java
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_459_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_AGC012_A.java
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC123_C.java
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  atcoder_ABC145_E.java
Filename:  codeforces_621_A.java
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ARC062_B.java
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC002_B.java
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_61_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/codeforces_622_A.java' returned non-zero exit status 1.
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/WizardCoder-Python-34B-V1.0/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 82
Success: ['atcoder_ABC142_A.java', 'codeforces_356_A.java', 'atcoder_ABC120_C.java', 'atcoder_ABC152_C.java', 'atcoder_ABC153_A.java', 'atcoder_ABC167_C.java', 'atcoder_ABC168_B.java', 'atcoder_ABC108_B.java', 'atcoder_AGC024_B.java', 'codeforces_333_B.java', 'atcoder_ABC158_A.java', 'codeforces_518_B.java', 'atcoder_ABC143_A.java', 'codeforces_242_B.java', 'codeforces_387_B.java', 'codeforces_92_A.java', 'codeforces_612_B.java', 'atcoder_ABC051_A.java', 'atcoder_ABC171_B.java', 'atcoder_ABC042_A.java', 'codeforces_25_A.java', 'codeforces_569_A.java', 'atcoder_ABC112_C.java', 'atcoder_ABC133_B.java', 'atcoder_ABC170_A.java', 'codeforces_379_A.java', 'atcoder_AGC046_A.java', 'codeforces_55_A.java', 'atcoder_ABC164_A.java', 'codeforces_544_B.java', 'codeforces_678_A.java', 'atcoder_ABC126_E.java', 'codeforces_609_B.java', 'atcoder_ABC124_A.java', 'atcoder_ABC112_A.java', 'codeforces_705_B.java', 'atcoder_AGC006_A.java', 'atcoder_ABC043_B.java', 'atcoder_ABC124_C.java', 'atcoder_AGC002_B.java', 'codeforces_534_B.java', 'codeforces_267_A.java', 'codeforces_282_B.java', 'atcoder_ABC178_A.java', 'atcoder_ABC145_B.java', 'codeforces_629_A.java', 'atcoder_ABC139_B.java', 'codeforces_581_B.java', 'atcoder_ABC174_E.java', 'codeforces_222_A.java', 'codeforces_242_A.java', 'codeforces_58_B.java', 'codeforces_276_B.java', 'atcoder_ABC132_A.java', 'codeforces_190_A.java', 'codeforces_216_B.java', 'codeforces_678_B.java', 'atcoder_ABC125_A.java', 'atcoder_ABC123_B.java', 'atcoder_AGC027_A.java', 'codeforces_154_A.java', 'codeforces_32_B.java', 'atcoder_ABC134_E.java', 'atcoder_ABC171_E.java', 'codeforces_79_A.java', 'codeforces_11_A.java', 'codeforces_37_A.java', 'atcoder_ABC154_A.java', 'atcoder_AGC002_A.java', 'atcoder_ABC140_D.java', 'codeforces_59_A.java', 'codeforces_682_B.java', 'codeforces_669_A.java', 'codeforces_265_B.java', 'atcoder_ABC136_B.java', 'codeforces_581_A.java', 'codeforces_23_B.java', 'codeforces_106_B.java', 'codeforces_108_B.java', 'atcoder_AGC033_B.java', 'codeforces_354_A.java', 'atcoder_ABC145_C.java']
Fail: ['atcoder_AGC007_C.java', 'codeforces_131_B.java', 'codeforces_653_A.java', 'atcoder_AGC033_A.java', 'atcoder_ABC135_D.java', 'atcoder_AGC013_A.java', 'atcoder_AGC028_B.java', 'atcoder_ABC105_D.java', 'codeforces_334_A.java', 'codeforces_459_A.java', 'atcoder_AGC004_D.java', 'codeforces_203_A.java', 'codeforces_583_B.java', 'codeforces_30_A.java', 'atcoder_ABC127_B.java', 'codeforces_95_A.java', 'codeforces_351_A.java', 'atcoder_ABC143_D.java', 'atcoder_ABC168_C.java', 'codeforces_617_B.java', 'codeforces_203_B.java', 'atcoder_AGC012_A.java', 'codeforces_673_A.java', 'codeforces_302_A.java', 'atcoder_ABC145_E.java', 'codeforces_644_B.java', 'atcoder_ARC062_B.java', 'codeforces_31_A.java', 'codeforces_445_A.java', 'codeforces_408_B.java', 'atcoder_ABC148_F.java', 'codeforces_296_A.java', 'codeforces_387_A.java', 'atcoder_AGC028_A.java', 'atcoder_AGC003_C.java', 'codeforces_373_B.java', 'codeforces_546_A.java', 'atcoder_ABC089_C.java', 'atcoder_AGC046_B.java', 'codeforces_274_A.java', 'atcoder_ABC109_B.java', 'atcoder_AGC017_A.java', 'codeforces_400_B.java', 'codeforces_148_B.java', 'atcoder_ABC150_D.java', 'atcoder_ABC142_C.java', 'codeforces_651_A.java', 'codeforces_672_A.java', 'atcoder_ABC178_B.java', 'codeforces_86_A.java', 'codeforces_596_B.java', 'codeforces_327_A.java', 'atcoder_ARC086_B.java', 'atcoder_AGC021_B.java', 'atcoder_ABC150_E.java', 'codeforces_299_A.java', 'codeforces_134_A.java', 'atcoder_ABC147_D.java', 'codeforces_306_A.java', 'atcoder_AGC010_B.java', 'atcoder_ABC137_D.java', 'codeforces_607_A.java', 'atcoder_ABC165_C.java', 'atcoder_ABC169_E.java', 'atcoder_ABC152_E.java', 'atcoder_ABC172_D.java', 'codeforces_450_A.java', 'codeforces_624_B.java', 'atcoder_AGC034_B.java', 'codeforces_189_A.java', 'atcoder_ABC162_D.java', 'codeforces_421_A.java', 'codeforces_231_A.java', 'codeforces_99_A.java', 'atcoder_ABC127_F.java', 'atcoder_ABC123_C.java', 'codeforces_621_A.java', 'codeforces_462_B.java', 'codeforces_632_B.java', 'codeforces_56_B.java', 'codeforces_400_A.java', 'codeforces_287_A.java', 'codeforces_519_B.java', 'codeforces_369_B.java', 'codeforces_146_A.java', 'atcoder_ABC122_C.java', 'codeforces_474_B.java', 'atcoder_ABC158_B.java', 'codeforces_514_A.java', 'atcoder_ABC150_C.java', 'atcoder_ABC106_C.java', 'atcoder_ABC125_B.java', 'codeforces_313_B.java', 'atcoder_ABC149_C.java', 'codeforces_7_B.java', 'codeforces_268_A.java', 'codeforces_469_A.java', 'atcoder_ABC166_C.java', 'atcoder_ABC111_C.java', 'atcoder_ABC169_C.java', 'atcoder_ABC119_B.java', 'codeforces_629_B.java', 'codeforces_500_A.java', 'codeforces_665_A.java', 'atcoder_ABC174_C.java', 'atcoder_ABC123_D.java', 'codeforces_171_A.java', 'atcoder_ABC070_B.java', 'atcoder_ARC102_C.java', 'codeforces_397_B.java', 'atcoder_AGC037_E.java', 'atcoder_AGC005_B.java', 'codeforces_61_B.java', 'atcoder_AGC035_B.java', 'atcoder_AGC027_B.java', 'codeforces_598_A.java', 'codeforces_637_A.java', 'atcoder_ABC104_C.java', 'atcoder_AGC029_C.java', 'atcoder_AGC025_A.java', 'atcoder_ABC155_D.java', 'atcoder_ABC167_D.java', 'codeforces_342_B.java', 'codeforces_456_A.java', 'atcoder_ABC140_F.java', 'atcoder_ABC125_C.java', 'atcoder_ABC169_D.java', 'codeforces_622_A.java', 'atcoder_AGC006_B.java', 'atcoder_ABC126_D.java', 'atcoder_ABC129_E.java', 'atcoder_AGC014_D.java', 'codeforces_8_B.java', 'atcoder_ABC118_C.java', 'atcoder_AGC011_C.java', 'codeforces_147_A.java', 'codeforces_608_A.java', 'atcoder_ABC114_C.java', 'codeforces_110_B.java', 'atcoder_ABC155_E.java', 'atcoder_ABC122_D.java', 'codeforces_404_A.java', 'codeforces_567_A.java', 'atcoder_ABC110_C.java', 'codeforces_49_A.java', 'codeforces_67_B.java', 'atcoder_ABC107_C.java', 'atcoder_ABC107_D.java', 'codeforces_96_B.java', 'atcoder_ABC146_D.java', 'atcoder_AGC019_A.java', 'codeforces_350_B.java', 'codeforces_272_B.java', 'atcoder_ABC149_B.java', 'atcoder_ABC128_C.java', 'codeforces_579_A.java', 'atcoder_AGC043_B.java', 'codeforces_70_B.java', 'atcoder_ABC133_E.java', 'codeforces_459_B.java', 'atcoder_AGC038_A.java', 'codeforces_55_B.java', 'atcoder_ABC164_D.java', 'codeforces_340_A.java', 'codeforces_412_A.java', 'atcoder_ABC151_A.java', 'atcoder_AGC004_B.java', 'atcoder_ABC132_F.java']
