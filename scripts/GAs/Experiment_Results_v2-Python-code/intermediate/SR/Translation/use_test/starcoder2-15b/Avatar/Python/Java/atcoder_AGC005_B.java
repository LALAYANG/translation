

```java
import java.util.*;

public class Main {
    static int[] parent;
    static int[] rank;
    static int[] size;
    static int[] a;
    static int[] b;
    static int n;
    static int c;

    static int root(int x) {
        if (parent[x] == x) {
            return x;
        }
        return parent[x] = root(parent[x]);
    }

    static boolean same(int x, int y) {
        return root(x) == root(y);
    }

    static void unite(int x, int y) {
        x = root(x);
        y = root(y);
        if (x == y) {
            return;
        }
        if (rank[x] < rank[y]) {
            parent[x] = y;
            size[y] += size[x];
        } else {
            parent[y] = x;
            size[x] += size[y];
            if (rank[x] == rank[y]) {
                rank[x]++;
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        a = new int[n];
        b = new int[n];
        parent = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            parent[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        for (int i = n - 1; i >= 0; i--) {
            int k = b[i];
            int l = 1;
            int r = 1;
            if (k > 0 && a[k - 1] > a[k]) {
                l += size[root(k - 1)];
                unite(k - 1, k);
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }
}
```

## 2. 2019-09-24

### 2.1. 1000000007

```
1000000007
```

### 2.2. 1000000009

```
1000000009
```

### 2.3. 1000000021

```
1000000021
```

### 2.4. 1000000033

```
1000000033
```

### 2.5. 1000000087

```
1000000087
```

### 2.6. 1000000093

```
1000000093
```

### 2.7. 1000000097

```
1000000097
```

### 2.8. 1000000103

```
1000000103
```

### 2.9. 1000000123

```
1000000123
```

### 2.10. 1000000181

```
1000000181
```

### 2.11. 1000000211

```
1000000211
```

### 2.12. 1000000213

```
1000000213
```

### 2.13. 1000000217

```
1000000217
```

### 2.14. 1000000223

```
1000000223
```

### 2.15. 1000000229

```
1000000229
```

### 2.16. 1000000233

```
1000000233
```

### 2.17. 1000000241

```
1000000241
```

### 2.18. 1000000257

```
1000000257
```

### 2.19. 1000000271

```
1000000271
```

### 2.20. 1000000289

```
1000000289
```

### 2.21. 1000000293

```
1000000293
```

### 2.22. 1000000331

```
1000000331
```

### 2.23. 1000000337

```
1000000337
```

### 2.24. 1000000347

```
1000000347
```

### 2.25. 1000000357

```
1000000357
```

### 2.26. 1000000361

```
1000000361
```

### 2.27. 1000000367

```
1000000367
```

### 2.28. 1000000373

```
1000000373
```

### 2.29. 1000000383

```
1000000383
```

### 2.30. 1000000389

```
1000000389
```

### 2.31. 1000000399

```
1000000399
```

### 2.32. 1000000409

```
1000000409
```

### 2.33. 1000000423

```
1000000423
```

### 2.34. 1000000433

```
1000000433
```

### 2.35. 1000000439

```
1000000439
```

### 2.36. 1000000441

```
1000000441
```

### 2.37. 1000000453

```
1000000453
```

### 2.38. 1000000457

```
1000000457
```

### 2.39. 1000000463

```
1000000463
```

### 2.40. 1000000481

```
1000000481
```

### 2.41. 1000000487

```
1000000487
```

### 2.42. 1000000499

```
1000000499
```

### 2.43. 1000000507

```
1000000507
```

### 2.44. 1000000509

```
1000000509
```

### 2.45. 1000000523

```
1000000523
```

### 2.46. 1000000541

```
1000000541
```

### 2.47. 1000000547

```
1000000547
```

### 2.48. 1000000557

```
1000000557
```

### 2.49. 1000000561

```
1000000561
```

### 2.50. 1000000577

```
1000000577
```

### 2.51. 1000000591

```
1000000591
```

### 2.52. 1000000601

```
1000000601
```

### 2.53. 1000000603

```
1000000603
```

### 2.54. 1000000613

```
1000000613
```

### 2.55. 1000000631

```
1000000631
```

### 2.56. 1000000647

```
1000000647
```

### 2.57. 1000000657

```
1000000657
```

### 2.58. 1000000661

```
1000000661
```

### 2.59. 1000000663

```
1000000663
```

### 2.60. 1000000667

```
1000000667
```

### 2.61. 1000000673

```
1000000673
```

### 2.62. 1000000691

```
1000000691
```

### 2.63. 1000000697

```
1000000697
```

### 2.64. 1000000699

```
1000000699
```

### 2.65. 1000000709

```
1000000709
```

### 2.66. 1000000711

```
1000000711
```

### 2.67. 1000000729

```
1000000729
```

### 2.68. 1000000733

```
1000000733
```

### 2.69. 1000000747

```
1000000747
```

### 2.70. 1000000751

```
1000000751
```

### 2.71. 1000000753

```
1000000753
```

### 2.72. 1000000759

```
1000000759
```

### 2.73. 1000000769

```
1000000769
```

### 2.74. 1000000781

```
1000000781
```

### 2.75. 1000000789

```
1000000789
```

### 2.76. 1000000793

```
1000000793
```

### 2.77. 1000000807

```
1000000807
```

### 2.78. 1000000811

```
1000000811
```

### 2.79. 1000000823

```
1000000823
```
