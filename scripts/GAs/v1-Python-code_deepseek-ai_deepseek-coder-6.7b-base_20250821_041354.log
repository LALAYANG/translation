+ model=deepseek-ai/deepseek-coder-6.7b-base
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-6.7b-base --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 06:22:43 [__init__.py:241] Automatically detected platform cuda.
found 221 inputs
INFO 08-21 06:22:44 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-6.7b-base', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 06:22:49 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 06:22:49 [__init__.py:1750] Using max model len 4096
INFO 08-21 06:22:49 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=3598322)[0;0m INFO 08-21 06:22:50 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=3598322)[0;0m INFO 08-21 06:22:50 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-6.7b-base', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-6.7b-base', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-6.7b-base, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=3598322)[0;0m WARNING 08-21 06:22:50 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=3598322)[0;0m INFO 08-21 06:22:50 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_7b5e6a9c'), local_subscribe_addr='ipc:///tmp/f58b9a80-9290-404b-9145-a331f1505ec8', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:52 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_e11710b6'), local_subscribe_addr='ipc:///tmp/befb516a-64d0-4127-be67-a67a93be0602', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:52 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_411f07eb'), local_subscribe_addr='ipc:///tmp/f26f2846-c1c0-4fba-b977-e3f23f4c2e47', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:52 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:52 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:52 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:52 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:53 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:53 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:53 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_ddfd4c41'), local_subscribe_addr='ipc:///tmp/ad60cc2e-356d-40e7-81d2-6facd31605b4', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:53 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:53 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m WARNING 08-21 06:22:53 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m WARNING 08-21 06:22:53 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:53 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-base...
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:53 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-base...
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:53 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:53 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:53 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:53 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:53 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:53 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m Loading safetensors checkpoint shards:  50% Completed | 1/2 [00:00<00:00,  2.25it/s]
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.05it/s]
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.14it/s]
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m 
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:56 [default_loader.py:262] Loading weights took 2.00 seconds
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:56 [default_loader.py:262] Loading weights took 1.93 seconds
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:22:56 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 2.603787 seconds
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:22:56 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 2.738266 seconds
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:23:03 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d977cfa9e2/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:23:03 [backends.py:559] Dynamo bytecode transform time: 6.30 s
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:23:03 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/d977cfa9e2/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:23:03 [backends.py:559] Dynamo bytecode transform time: 6.33 s
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:23:07 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.260 s
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:23:08 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.343 s
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:23:08 [monitor.py:34] torch.compile takes 6.30 s in total
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:23:08 [monitor.py:34] torch.compile takes 6.33 s in total
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:23:09 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:23:09 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=3598322)[0;0m INFO 08-21 06:23:10 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=3598322)[0;0m INFO 08-21 06:23:10 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=3598322)[0;0m INFO 08-21 06:23:10 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=3598322)[0;0m INFO 08-21 06:23:10 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   6%|▌         | 4/67 [00:00<00:01, 33.22it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  12%|█▏        | 8/67 [00:00<00:01, 33.75it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  18%|█▊        | 12/67 [00:00<00:01, 33.30it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:01, 33.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  30%|██▉       | 20/67 [00:00<00:01, 32.94it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  36%|███▌      | 24/67 [00:00<00:01, 32.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:00<00:01, 32.40it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  48%|████▊     | 32/67 [00:00<00:01, 31.72it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  54%|█████▎    | 36/67 [00:01<00:00, 31.02it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:01<00:00, 30.01it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  66%|██████▌   | 44/67 [00:01<00:00, 29.70it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  70%|███████   | 47/67 [00:01<00:00, 29.15it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  75%|███████▍  | 50/67 [00:01<00:00, 28.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  79%|███████▉  | 53/67 [00:01<00:00, 27.54it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  84%|████████▎ | 56/67 [00:01<00:00, 26.95it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  88%|████████▊ | 59/67 [00:01<00:00, 26.82it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  93%|█████████▎| 62/67 [00:02<00:00, 27.15it/s][1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:23:12 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  97%|█████████▋| 65/67 [00:02<00:00, 26.81it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 29.73it/s]
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:23:12 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP1 pid=3598330)[0;0m INFO 08-21 06:23:12 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=3598322)[0;0m [1;36m(VllmWorker TP0 pid=3598328)[0;0m INFO 08-21 06:23:12 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=3598322)[0;0m INFO 08-21 06:23:12 [core.py:214] init engine (profile, create kv cache, warmup model) took 16.08 seconds
INFO 08-21 06:23:13 [llm.py:298] Supported_tasks: ['generate']
Translating 221 files...
  0%|          | 0/221 [00:00<?, ?it/s]100%|██████████| 221/221 [00:00<00:00, 11076.82it/s]
Adding requests:   0%|          | 0/221 [00:00<?, ?it/s]Adding requests:  32%|███▏      | 71/221 [00:00<00:00, 708.51it/s]Adding requests:  67%|██████▋   | 149/221 [00:00<00:00, 748.00it/s]Adding requests: 100%|██████████| 221/221 [00:00<00:00, 490.95it/s]
Processed prompts:   0%|          | 0/221 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/221 [00:03<12:49,  3.50s/it, est. speed input: 92.63 toks/s, output: 36.59 toks/s]Processed prompts:   2%|▏         | 4/221 [00:03<02:35,  1.39it/s, est. speed input: 400.87 toks/s, output: 141.09 toks/s]Processed prompts:   2%|▏         | 5/221 [00:04<02:17,  1.57it/s, est. speed input: 486.88 toks/s, output: 164.96 toks/s]Processed prompts:   3%|▎         | 6/221 [00:04<01:44,  2.06it/s, est. speed input: 646.51 toks/s, output: 199.12 toks/s]Processed prompts:   3%|▎         | 7/221 [00:04<01:24,  2.54it/s, est. speed input: 726.80 toks/s, output: 230.60 toks/s]Processed prompts:   4%|▎         | 8/221 [00:04<01:11,  3.00it/s, est. speed input: 805.13 toks/s, output: 259.81 toks/s]Processed prompts:   5%|▍         | 10/221 [00:04<00:57,  3.66it/s, est. speed input: 876.77 toks/s, output: 314.55 toks/s]Processed prompts:   5%|▌         | 12/221 [00:05<00:40,  5.12it/s, est. speed input: 1181.75 toks/s, output: 383.74 toks/s]Processed prompts:   6%|▋         | 14/221 [00:05<00:33,  6.26it/s, est. speed input: 1345.14 toks/s, output: 448.38 toks/s]Processed prompts:   8%|▊         | 17/221 [00:05<00:21,  9.47it/s, est. speed input: 1495.85 toks/s, output: 561.38 toks/s]Processed prompts:   9%|▊         | 19/221 [00:05<00:19, 10.37it/s, est. speed input: 1622.22 toks/s, output: 626.75 toks/s]Processed prompts:  10%|█         | 23/221 [00:05<00:13, 14.42it/s, est. speed input: 1877.72 toks/s, output: 771.71 toks/s]Processed prompts:  11%|█▏        | 25/221 [00:05<00:13, 14.75it/s, est. speed input: 1970.38 toks/s, output: 836.97 toks/s]Processed prompts:  15%|█▍        | 33/221 [00:06<00:07, 24.84it/s, est. speed input: 2495.89 toks/s, output: 1136.03 toks/s]Processed prompts:  16%|█▋        | 36/221 [00:06<00:08, 22.89it/s, est. speed input: 2603.15 toks/s, output: 1227.97 toks/s]Processed prompts:  18%|█▊        | 39/221 [00:06<00:11, 16.10it/s, est. speed input: 2741.48 toks/s, output: 1284.78 toks/s]Processed prompts:  19%|█▊        | 41/221 [00:06<00:11, 15.78it/s, est. speed input: 2800.62 toks/s, output: 1341.63 toks/s]Processed prompts:  20%|██        | 45/221 [00:06<00:09, 19.16it/s, est. speed input: 2980.14 toks/s, output: 1483.02 toks/s]Processed prompts:  22%|██▏       | 48/221 [00:06<00:08, 20.42it/s, est. speed input: 3120.49 toks/s, output: 1582.46 toks/s]Processed prompts:  23%|██▎       | 51/221 [00:07<00:08, 19.18it/s, est. speed input: 3175.27 toks/s, output: 1667.64 toks/s]Processed prompts:  24%|██▍       | 54/221 [00:07<00:08, 19.77it/s, est. speed input: 3259.03 toks/s, output: 1762.23 toks/s]Processed prompts:  27%|██▋       | 59/221 [00:07<00:06, 25.23it/s, est. speed input: 3442.45 toks/s, output: 1944.07 toks/s]Processed prompts:  29%|██▉       | 65/221 [00:07<00:04, 31.85it/s, est. speed input: 3779.60 toks/s, output: 2167.57 toks/s]Processed prompts:  31%|███       | 69/221 [00:07<00:05, 29.99it/s, est. speed input: 3986.32 toks/s, output: 2293.82 toks/s]Processed prompts:  33%|███▎      | 73/221 [00:07<00:05, 26.81it/s, est. speed input: 4159.65 toks/s, output: 2409.32 toks/s]Processed prompts:  36%|███▌      | 79/221 [00:07<00:04, 30.77it/s, est. speed input: 4458.62 toks/s, output: 2621.07 toks/s]Processed prompts:  38%|███▊      | 83/221 [00:08<00:04, 30.93it/s, est. speed input: 4572.64 toks/s, output: 2752.78 toks/s]Processed prompts:  39%|███▉      | 87/221 [00:08<00:04, 27.86it/s, est. speed input: 4693.23 toks/s, output: 2866.31 toks/s]Processed prompts:  42%|████▏     | 93/221 [00:08<00:03, 34.31it/s, est. speed input: 4993.41 toks/s, output: 3091.91 toks/s]Processed prompts:  44%|████▍     | 97/221 [00:08<00:04, 29.49it/s, est. speed input: 5084.32 toks/s, output: 3197.67 toks/s]Processed prompts:  46%|████▌     | 101/221 [00:08<00:04, 29.44it/s, est. speed input: 5403.61 toks/s, output: 3324.35 toks/s]Processed prompts:  48%|████▊     | 107/221 [00:08<00:03, 34.97it/s, est. speed input: 5732.13 toks/s, output: 3546.76 toks/s]Processed prompts:  50%|█████     | 111/221 [00:08<00:03, 34.96it/s, est. speed input: 5843.60 toks/s, output: 3680.15 toks/s]Processed prompts:  52%|█████▏    | 116/221 [00:09<00:03, 34.99it/s, est. speed input: 6054.57 toks/s, output: 3845.67 toks/s]Processed prompts:  57%|█████▋    | 125/221 [00:09<00:02, 47.37it/s, est. speed input: 6472.68 toks/s, output: 4205.22 toks/s]Processed prompts:  59%|█████▉    | 131/221 [00:09<00:02, 36.63it/s, est. speed input: 6593.89 toks/s, output: 4366.78 toks/s]Processed prompts:  62%|██████▏   | 136/221 [00:09<00:03, 27.31it/s, est. speed input: 6689.80 toks/s, output: 4455.63 toks/s]Processed prompts:  65%|██████▌   | 144/221 [00:09<00:02, 31.34it/s, est. speed input: 6966.82 toks/s, output: 4740.89 toks/s]Processed prompts:  67%|██████▋   | 149/221 [00:10<00:02, 34.18it/s, est. speed input: 7268.75 toks/s, output: 4926.31 toks/s]Processed prompts:  70%|███████   | 155/221 [00:10<00:01, 38.15it/s, est. speed input: 7437.07 toks/s, output: 5155.36 toks/s]Processed prompts:  72%|███████▏  | 160/221 [00:10<00:01, 34.61it/s, est. speed input: 7579.91 toks/s, output: 5303.20 toks/s]Processed prompts:  74%|███████▍  | 164/221 [00:10<00:01, 31.46it/s, est. speed input: 7666.19 toks/s, output: 5413.91 toks/s]Processed prompts:  76%|███████▌  | 168/221 [00:10<00:01, 32.22it/s, est. speed input: 7847.41 toks/s, output: 5550.78 toks/s]Processed prompts:  78%|███████▊  | 172/221 [00:10<00:01, 24.75it/s, est. speed input: 7977.02 toks/s, output: 5613.26 toks/s]Processed prompts:  80%|███████▉  | 176/221 [00:11<00:01, 24.35it/s, est. speed input: 8079.26 toks/s, output: 5727.58 toks/s]Processed prompts:  81%|████████  | 179/221 [00:11<00:02, 18.01it/s, est. speed input: 8034.48 toks/s, output: 5723.95 toks/s]Processed prompts:  82%|████████▏ | 182/221 [00:11<00:02, 18.60it/s, est. speed input: 8094.39 toks/s, output: 5809.96 toks/s]Processed prompts:  84%|████████▎ | 185/221 [00:11<00:02, 12.80it/s, est. speed input: 8009.55 toks/s, output: 5754.01 toks/s]Processed prompts:  85%|████████▍ | 187/221 [00:12<00:02, 12.37it/s, est. speed input: 8020.12 toks/s, output: 5777.01 toks/s]Processed prompts:  86%|████████▌ | 189/221 [00:12<00:03,  9.53it/s, est. speed input: 7877.90 toks/s, output: 5715.28 toks/s]Processed prompts:  86%|████████▋ | 191/221 [00:12<00:03,  9.19it/s, est. speed input: 7873.71 toks/s, output: 5720.93 toks/s]Processed prompts:  88%|████████▊ | 194/221 [00:12<00:02, 11.60it/s, est. speed input: 7973.08 toks/s, output: 5839.38 toks/s]Processed prompts:  89%|████████▊ | 196/221 [00:13<00:02, 11.27it/s, est. speed input: 7983.45 toks/s, output: 5871.09 toks/s]Processed prompts:  90%|████████▉ | 198/221 [00:13<00:02, 11.19it/s, est. speed input: 8005.67 toks/s, output: 5909.52 toks/s]Processed prompts:  90%|█████████ | 200/221 [00:13<00:01, 10.90it/s, est. speed input: 8037.90 toks/s, output: 5945.46 toks/s]Processed prompts:  91%|█████████▏| 202/221 [00:14<00:04,  3.99it/s, est. speed input: 7452.24 toks/s, output: 5536.99 toks/s]Processed prompts:  92%|█████████▏| 203/221 [00:15<00:06,  2.63it/s, est. speed input: 7045.06 toks/s, output: 5246.60 toks/s]Processed prompts:  92%|█████████▏| 204/221 [00:30<00:54,  3.18s/it, est. speed input: 3661.39 toks/s, output: 2784.07 toks/s]Processed prompts:  93%|█████████▎| 205/221 [00:36<00:58,  3.67s/it, est. speed input: 3133.15 toks/s, output: 2455.12 toks/s]Processed prompts:  93%|█████████▎| 206/221 [00:36<00:44,  2.94s/it, est. speed input: 3105.99 toks/s, output: 2507.58 toks/s]Processed prompts:  94%|█████████▎| 207/221 [00:37<00:32,  2.33s/it, est. speed input: 3084.42 toks/s, output: 2564.91 toks/s]Processed prompts:  94%|█████████▍| 208/221 [00:38<00:26,  2.03s/it, est. speed input: 3004.82 toks/s, output: 2576.45 toks/s]Processed prompts:  95%|█████████▍| 209/221 [00:38<00:19,  1.58s/it, est. speed input: 2987.67 toks/s, output: 2640.31 toks/s]Processed prompts:  95%|█████████▌| 210/221 [00:39<00:13,  1.19s/it, est. speed input: 2987.29 toks/s, output: 2718.77 toks/s]Processed prompts:  95%|█████████▌| 211/221 [00:39<00:10,  1.04s/it, est. speed input: 2950.22 toks/s, output: 2765.44 toks/s]Processed prompts:  96%|█████████▌| 212/221 [00:40<00:07,  1.26it/s, est. speed input: 2946.60 toks/s, output: 2843.05 toks/s]Processed prompts:  96%|█████████▋| 213/221 [00:40<00:05,  1.51it/s, est. speed input: 2931.01 toks/s, output: 2909.86 toks/s]Processed prompts:  97%|█████████▋| 214/221 [00:40<00:03,  1.83it/s, est. speed input: 2920.93 toks/s, output: 2982.60 toks/s]Processed prompts:  97%|█████████▋| 215/221 [00:40<00:02,  2.37it/s, est. speed input: 2920.39 toks/s, output: 3065.08 toks/s]Processed prompts:  99%|█████████▉| 219/221 [00:40<00:00,  5.64it/s, est. speed input: 2944.62 toks/s, output: 3422.07 toks/s]Processed prompts: 100%|██████████| 221/221 [00:41<00:00,  6.70it/s, est. speed input: 2947.20 toks/s, output: 3591.89 toks/s]Processed prompts: 100%|██████████| 221/221 [00:41<00:00,  6.70it/s, est. speed input: 2947.20 toks/s, output: 3591.89 toks/s]Processed prompts: 100%|██████████| 221/221 [00:41<00:00,  5.38it/s, est. speed input: 2947.20 toks/s, output: 3591.89 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-6.7b-base --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/221 [00:00<?, ?it/s]import java.util.*;
import java.io.*;

public class atcoder_ABC146_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        List<Integer>[] G = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            G[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            String[] s = br.readLine().split(" ");
            int a = Integer.parseInt(s[0]) - 1;
            int b = Integer.parseInt(s[1]) - 1;
            G[a].add(b);
            G[b].add(a);
        }
        int[] color = new int[N];
        int K = bfs(0, G, color);
        System.out.println(K);
        for (int i = 0; i < N - 1; i++) {
            System.out.println(color[i]);
        }
    }

    public static int bfs(int v, List<Integer>[] G, int[] color) {
        int N = G.length;
        int[] visited = new int[N];
        Queue<Integer> queue = new LinkedList<>();
        int K = -1;
        queue.add(v);
        visited[v] = 1;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int c = 0;
            int check_one = 667;
            int check_two = 282;
            for (int nex : G[q]) {
                if (check_one & check_two) {
                    if (visited[nex] == 1) {
                        continue;
                    }
                }
                visited[nex] = 1;
                c++;
                if (c == color[q]) {
                    c++;
                }
                color[nex] = c;
                queue.add(nex);
            }
            K = Math.max(K, c);
        }
        return K;
    }
}
import java.util.Scanner;
import java.util.Base64;
import java.util.Date;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_ABC119_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int currencyCount = scanner.nextInt();
        scanner.nextLine();
        List<Double> currencyList = new ArrayList<>();
        for (int i = 0; i < currencyCount; i++) {
            String[] currency = scanner.nextLine().split(" ");
            double value = Double.parseDouble(currency[0]);
            String currencyType = currency[1];
            if (currencyType.equals("JPY")) {
                currencyList.add(value);
            } else if (currencyType.equals("BTC")) {
                currencyList.add(value * 380000.0);
            }
        }
        System.out.println(currencyList.stream().mapToDouble(Double::doubleValue).sum());
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int MOD = 746381343;
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = sc.nextInt();
        }
        int Nsq = 1000;
        int[][] factorial_array = new int[Nsq][Nsq];
        factorial_array[0][0] = 1;
        for (int n = 1; n < Nsq; n++) {
            for (int m = 0; m < Nsq; m++) {
                factorial_array[n][m] = factorial_array[n - 1][m];
            }
            for (int m = 1; m < Nsq; m++) {
                factorial_array[n][m] *= n;
                factorial_array[n][m] %= MOD;
            }
        }
        for (int n = 1; n < Nsq; n++) {
            for (int m = 0; m < Nsq; m++) {
                factorial_array[n][m] *= factorial_array[n - 1][m];
                factorial_array[n][m] %= MOD;
            }
        }
        int[] inv = new int[N];
        inv[0] = 1;
        for (int i = 1; i < N; i++) {
            inv[i] = (MOD - (MOD / i) * inv[MOD % i] % MOD) % MOD;
        }
        for (int i = 1; i < N; i++) {
            inv[i] = (inv[i] + inv[i - 1]) % MOD;
        }
        int[] temp = new int[N];
        for (int i = 0; i < N; i++) {
            temp[i] = inv[i] + inv[N - 1 - i] - 1;
            temp[i] %= MOD;
        }
        int ans = 0;
        for (int i = 0; i < N; i++) {
            ans += A[i] * temp[i];
            ans %= MOD;
        }
        ans *= factorial_array[N][N];
        ans %= MOD;
        System.out.println(ans);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_569_A {
    public static void main(String[] args) {
        int target_value = 12351;
        int s = 1223;
        int q = 6;
        int ans = 0;
        while (s < target_value) {
            Queue<Integer> queue_calculate_product0 = new LinkedBlockingQueue<>();
            Thread product_thread = new Thread(() -> {
                int result = calculate_product(s, q);
                queue_calculate_product0.add(result);
            });
            product_thread.start();
            try {
                product_thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int product_result = queue_calculate_product0.poll();
            s = product_result;
            ans = ans + 1;
        }
        System.out.println(ans);
    }

    public static int calculate_product(int s, int q) {
        return s * q;
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] locations = new int[n][3];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 3; j++) {
                locations[i][j] = sc.nextInt();
            }
        }
        int x0 = -1;
        int check_x = 280;
        int check_y = 848;
        int check_radius = 895;
        int check_height = 131;
        int check_width = 935;
        int check_length = 777;
        for (int i = 0; i < n; i++) {
            if (check_width & check_length) {
                if (check_radius & check_height) {
                    if (check_x & check_y) {
                        if (locations[i][2] > 0) {
                            int x0 = locations[i][0];
                            int y0 = locations[i][1];
                            int base_height = locations[i][2];
                            break;
                        }
                    }
                }
            }
        }
        List<int[]> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(new int[]{cx, cy, base_height + Math.abs(cx - x0) + Math.abs(cy - y0)});
            }
        }
        for (int[] location : locations) {
            int x = location[0];
            int y = location[1];
            int h = location[2];
            List<int[]> new_cands = new ArrayList<>();
            for (int[] cand : cands) {
                int cx = cand[0];
                int cy = cand[1];
                int ch = cand[2];
                if (Math.max(ch - Math.abs(cx - x) - Math.abs(cy - y), 0) == h) {
                    new_cands.add(cand);
                }
            }
            cands = new_cands;
        }
        int[] cand = cands.get(0);
        int xx = cand[0];
        int yy = cand[1];
        int hh = cand[2];
        System.out.println(xx + " " + yy + " " + hh);
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int D = sc.nextInt();
        int G = sc.nextInt();
        int[] p = new int[D];
        int[] c = new int[D];
        for (int i = 0; i < D; i++) {
            p[i] = sc.nextInt();
            c[i] = sc.nextInt();
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < (1 << D); i++) {
            int score = 0;
            int problem = 0;
            for (int j = 0; j < D; j++) {
                if ((i & (1 << j)) != 0) {
                    score += 100 * (j + 1) * p[j] + c[j];
                    problem += p[j];
                }
            }
            if (score >= G) {
                min = Math.min(min, problem);
                continue;
            }
            for (int j = D - 1; j >= 0; j--) {
                if ((i & (1 << j)) != 0) {
                    continue;
                }
                int left = G - score;
                int need = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                min = Math.min(min, problem + Math.min(need, p[j]));
            }
        }
        System.out.println(min);
    }
}


import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;

public class atcoder_AGC033_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int H = sc.nextInt();
        int W = sc.nextInt();
        int N = sc.nextInt();
        int[][] S = new int[H][W];
        int s_r = sc.nextInt();
        int s_c = sc.nextInt();
        String S_str = sc.next();
        int[][] T = new int[H][W];
        String T_str = sc.next();
        boolean Judge = false;
        int S_L = 0;
        int S_R = 0;
        int S_U = 0;
        int S_D = 0;
        int T_L = 0;
        int target_right_moves = 0;
        int T_U = 0;
        int T_D = 0;
        int inner_loop_limit = 641;
        int outer_loop_limit = 640;
        for (int LoopIndexOut = 0; LoopIndexOut < inner_loop_limit / outer_loop_limit; LoopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S_str.charAt(x) == 'L') {
                    S_L++;
                    if (S_L - target_right_moves - s_c == 0) {
                        Judge = true;
                    }
                } else if (S_str.charAt(x) == 'R') {
                    S_R++;
                    if (s_c + (S_R - T_L) == W + 1) {
                        Judge = true;
                    }
                } else if (S_str.charAt(x) == 'U') {
                    S_U++;
                    if (S_U - T_D - s_r == 0) {
                        Judge = true;
                    }
                } else if (S_str.charAt(x) == 'D') {
                    S_D++;
                    if (s_r + (S_D - T_U) == H + 1) {
                        Judge = true;
                    }
                }
                if (T_str.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L++;
                    }
                }
                if (T_str.charAt(x) == 'R') {
                    if (s_c + (target_right_moves - S_L) != W) {
                        target_right_moves++;
                    }
                }
                if (T_str.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U++;
                    }
                }
                if (T_str.charAt(x) == 'D') {
                    if (s_r + (T_D - S_U) != H) {
                        T_D++;
                    }
                }
            }
        }
        if (Judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_55_A {
    public static void main(String[] args) {
        int condition_one = 368;
        int condition_two = 165;
        int input_number = Integer.parseInt(args[0]);
        while (input_number % 2 == 0) {
            int divisor = 2;
            Queue<Integer> queue_division_operation0 = new LinkedBlockingQueue<>();
            Thread thread_division_operation0 = new Thread(() -> {
                int result = division_operation(divisor, input_number);
                queue_division_operation0.add(result);
            });
            thread_division_operation0.start();
            thread_division_operation0.join();
            int result_division_operation0 = queue_division_operation0.remove();
            input_number = result_division_operation0;
        }
        if ((condition_one & condition_two) != 0) {
            if (input_number == 1) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
    }

    public static int division_operation(int divisor, int input_number) {
        return input_number / divisor;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC106_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        String s = st.nextToken();
        int k = Integer.parseInt(st.nextToken());
        int l = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != '1') {
                break;
            }
            l++;
        }
        if (l >= k) {
            System.out.println(1);
        } else {
            System.out.println(s.charAt(l));
        }
    }
}
import java.util.Scanner;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int matrix_size = sc.nextInt();
        String[] s = new String[matrix_size];
        for (int i = 0; i < matrix_size; i++) {
            s[i] = sc.next();
        }
        int flag = 0;
        String[] d1 = new String[matrix_size];
        String[] d2 = new String[matrix_size];
        String rem = "";
        int check_condition_two = 482;
        int check_condition_one = 245;
        for (int i = 0; i < matrix_size; i++) {
            for (int inner_loop_index = 0; inner_loop_index < matrix_size; inner_loop_index++) {
                if ((check_condition_two & check_condition_one) != 0) {
                    if (i == inner_loop_index) {
                        d1[i] = s[i].charAt(inner_loop_index) + "";
                    }
                }
                if (i == matrix_size - inner_loop_index - 1) {
                    d2[i] = s[i].charAt(inner_loop_index) + "";
                }
                if (i != inner_loop_index && i != matrix_size - inner_loop_index - 1) {
                    rem += s[i].charAt(inner_loop_index);
                }
            }
        }
        if (rem.length() != 1) {
            System.out.println("NO");
        } else if (!d1.equals(d2)) {
            System.out.println("NO");
        } else if (d1.length != 1) {
            System.out.println("NO");
        } else if (d1[0].equals(rem)) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

public class atcoder_AGC046_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int A = sc.nextInt();
        int B = sc.nextInt();
        int C = sc.nextInt();
        int D = sc.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][B] = 1;
        for (int row = A; row <= C; row++) {
            for (int j = B; j <= D; j++) {
                int curr_row_prev_col_val = d[row][j - 1];
                int prev_row_val = d[row - 1][j];
                int prev_row_prev_col_val = d[row - 1][j - 1];
                int col_idx = 1;
                int row_idx = 1;
                d[row][j] += calculate_value(row_idx, j, m, row, curr_row_prev_col_val, col_idx, prev_row_val, prev_row_prev_col_val);
            }
        }
        System.out.println(d[C][D]);
    }

    public static int calculate_value(int row_idx, int j, int m, int row, int curr_row_prev_col_val, int col_idx, int prev_row_val, int prev_row_prev_col_val) {
        return (curr_row_prev_col_val * row + prev_row_val * j - prev_row_prev_col_val * (row - row_idx) * (j - col_idx)) % m;
    }
}
import java.util.Scanner;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int m = sc.nextInt();
        int[] alocuente = new int[m];
        int ind = 1;
        int fourthCheck = 99;
        int sixthCheck = 940;
        int firstCheck = 977;
        int secondCheck = 289;
        int thirdCheck = 15;
        int fifthCheck = 698;
        for (int i = 0; i < t; i++) {
            String[] op = sc.nextLine().split(" ");
            if (fourthCheck & sixthCheck) {
                if (op[0].equals("alloc")) {
                    int availableSlotCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            availableSlotCount = availableSlotCount + 1;
                            if (availableSlotCount == Integer.parseInt(op[1])) {
                                for (int k = j - Integer.parseInt(op[1]) + 1; k <= j; k++) {
                                    alocuente[k] = ind;
                                }
                                System.out.println(ind);
                                ind = ind + 1;
                                break;
                            }
                        } else {
                            availableSlotCount = 0;
                        }
                    }
                    if (availableSlotCount != Integer.parseInt(op[1])) {
                        System.out.println("NULL");
                    }
                }
            }
            if (firstCheck & secondCheck) {
                if (op[0].equals("erase")) {
                    int availableSlotCount = 0;
                    if (Integer.parseInt(op[1]) > m || Integer.parseInt(op[1]) == 0) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        for (int j = 0; j < m; j++) {
                            if (Integer.parseInt(op[1]) > 0 && alocuente[j] == Integer.parseInt(op[1])) {
                                alocuente[j] = 0;
                            }
                        }
                    }
                }
            }
            if (thirdCheck & fifthCheck) {
                if (op[0].equals("defragment")) {
                    int emptyBlockCount = 0;
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] == 0) {
                            emptyBlockCount = emptyBlockCount + 1;
                        }
                    }
                    for (int j = 0; j < m; j++) {
                        if (alocuente[j] != 0) {
                            alocuente[j - emptyBlockCount] = alocuente[j];
                        }
                    }
                    for (int j = m - emptyBlockCount; j < m; j++) {
                        alocuente[j] = 0;
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        HashMap<Integer, Integer> element_counts = new HashMap<>();
        for (int i = 0; i < n; i++) {
            if (element_counts.containsKey(lst[i])) {
                element_counts.put(lst[i], element_counts.get(lst[i]) + 1);
            } else {
                element_counts.put(lst[i], 1);
            }
        }
        int res = 0;
        for (int i = 0; i < n; i++) {
            if (element_counts.get(lst[i]) > 1) {
                res += n - i - element_counts.get(lst[i]);
                element_counts.put(lst[i], element_counts.get(lst[i]) - 1);
            } else {
                res += n - i - 1;
            }
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_ABC162_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        int redCount = countChar(s, 'R');
        int gNum = countChar(s, 'G');
        int bNum = countChar(s, 'B');
        int sum = 0;
        for (int step = 1; step <= Math.ceil(n / 2.0); step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                String sub = s.substring(i, i + 3);
                if (sub.equals("RGB") || sub.equals("RBG") || sub.equals("BGR") || sub.equals("BRG") || sub.equals("GBR") || sub.equals("GRB")) {
                    sum++;
                }
            }
        }
        System.out.println(redCount * gNum * bNum - sum);
    }

    public static int countChar(String s, char c) {
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == c) {
                count++;
            }
        }
        return count;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC014_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        List<Integer>[] adj = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            String[] line = br.readLine().split(" ");
            int a = Integer.parseInt(line[0]);
            int b = Integer.parseInt(line[1]);
            adj[a].add(b);
            adj[b].add(a);
        }
        Queue<Integer> que = new LinkedList<>();
        que.add(1);
        int[] seen = new int[N + 1];
        seen[1] = 1;
        int[] par = new int[N + 1];
        int[] child_count = new int[N + 1];
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adj[v]) {
                if (seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    child_count[v]++;
                    que.add(u);
                }
            }
        }
        Deque<Integer> seq = new LinkedList<>();
        int check_one_twenty_six = 237;
        int check_two_twenty_six = 616;
        int check_one_twenty_eight = 552;
        int check_two_twenty_eight = 159;
        for (int node_index = 1; node_index <= N; node_index++) {
            if ((check_one_twenty_eight & check_two_twenty_eight) != 0) {
                if ((check_one_twenty_six & check_two_twenty_six) != 0) {
                    if (child_count[node_index] == 0) {
                        seq.add(node_index);
                    }
                }
            }
        }
        while (!seq.isEmpty()) {
            int current_node = seq.pollLast();
            seen[current_node] = 0;
            if (seen[par[current_node]] == 0) {
                System.out.println("First");
                return;
            }
            seen[par[current_node]] = 0;
            child_count[par[par[current_node]]]--;
            if (child_count[par[par[current_node]]] == 0) {
                seq.add(par[par[current_node]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;

public class atcoder_ABC151_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String c = scanner.nextLine();
        System.out.println(solve(c));
    }

    public static String solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int charIndex = a.indexOf(c);
        return a.substring(charIndex + 1, charIndex + 2);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_581_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int[] resultArray = new int[n];
        int initialValue = 0;
        Queue<Integer> queue = new LinkedList<>();
        queue.add(initialValue);
        Thread thread = new Thread(() -> {
            int result = calculateProduct(queue.poll(), n);
            queue.add(result);
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int result = queue.poll();
        resultArray[0] = result;
        int mx = inputArray[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            resultArray[i] = Math.max(0, mx - inputArray[i] + 1);
            if (inputArray[i] > mx) {
                mx = inputArray[i];
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(resultArray[i] + " ");
        }
    }

    public static int calculateProduct(int initialValue, int n) {
        return initialValue * n;
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC126_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int M = sc.nextInt();
        List<List<Integer>> edge = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edge.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            int X = sc.nextInt() - 1;
            int Y = sc.nextInt() - 1;
            int Z = sc.nextInt();
            edge.get(X).add(Y);
            edge.get(Y).add(X);
        }
        boolean[] used = new boolean[N];
        int ans = 0;
        int MaxIterationCheck = 200;
        int IntermediateCheck = 845;
        for (int i = 0; i < N; i++) {
            if (MaxIterationCheck & IntermediateCheck) {
                if (!used[i]) {
                    ans++;
                    Queue<Integer> queue = new LinkedList<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        used[node] = true;
                        for (int nextnode : edge.get(node)) {
                            if (!used[nextnode]) {
                                queue.add(nextnode);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        long n = sc.nextLong();
        long k = sc.nextLong();
        long mod = 1000000007;
        long[] coef = new long[(int) Math.sqrt(n) + 1];
        for (int i = 1; i <= Math.sqrt(n); i++) {
            coef[i] = n / i - n / (i + 1);
        }
        for (int i = 1; i <= Math.sqrt(n); i++) {
            coef[(int) Math.sqrt(n) + 1 - i] = coef[i];
        }
        long[][] dp = new long[(int) k + 1][(int) Math.sqrt(n) + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= k; i++) {
            long tmp = 0;
            for (int j = (int) Math.sqrt(n); j >= 0; j--) {
                tmp += dp[i - 1][(int) Math.sqrt(n) - j];
                tmp %= mod;
                dp[i][j] = coef[j] * tmp;
                dp[i][j] %= mod;
            }
        }
        long ans = 0;
        for (int i = 0; i <= (int) Math.sqrt(n); i++) {
            ans += dp[(int) k][i];
            ans %= mod;
        }
        System.out.println(ans);
    }
}

import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_92_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int remainder = scanner.nextInt();
        int currentValue = 849;
        int divisor = 848;
        while (currentValue % divisor == 1) {
            int operand = 1;
            Queue<Integer> resultQueue = new LinkedBlockingQueue<>();
            Thread threadSumOperands0 = new Thread(() -> {
                int result = sumOperands(operand, currentValue);
                resultQueue.add(result);
            });
            threadSumOperands0.start();
            threadSumOperands0.join();
            int sumResult = resultQueue.poll();
            currentValue = sumResult;
            while (remainder >= i) {
                remainder = remainder - i;
                i = i % n + 1;
            }
        }
        System.out.println(remainder);
    }

    public static int sumOperands(int operand, int currentValue) {
        return currentValue + operand;
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        int checkerOne = 289;
        int checkerThree = 475;
        int checkerTwo = 828;
        int checkerFive = 409;
        int checkerFour = 430;
        int checkerSeven = 909;
        for (int i = 0; i < arr.length; i++) {
            if ((checkerFour & checkerSeven) != 0) {
                if ((checkerTwo & checkerFive) != 0) {
                    if ((checkerOne & checkerThree) != 0) {
                        if (arr[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        Arrays.sort(arr);
        Random rand = new Random();
        int[] shuffledArr = new int[n];
        for (int i = 0; i < n; i++) {
            shuffledArr[i] = arr[i];
        }
        for (int i = 0; i < n; i++) {
            int j = rand.nextInt(n);
            int temp = shuffledArr[i];
            shuffledArr[i] = shuffledArr[j];
            shuffledArr[j] = temp;
        }
        int secondChecker = 823;
        int sixthChecker = 566;
        int fourthChecker = 374;
        int fifthChecker = 591;
        int firstChecker = 870;
        int thirdChecker = 889;
        for (int currentItem : shuffledArr) {
            if (firstChecker & thirdChecker) {
                if (fourthChecker & fifthChecker) {
                    if (secondChecker & sixthChecker) {
                        if (Arrays.binarySearch(shuffledArr, currentItem + 1) >= 0 && Arrays.binarySearch(shuffledArr, currentItem + 2) >= 0) {
                            System.out.println("YES");
                            return;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class codeforces_8_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String moves = sc.nextLine();
        int x = 0, current_y = 0;
        int[][] d_movement = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        int[][] d = new int[1000][1000];
        boolean bug_found = false;
        int firstCheck = 540;
        int checkTwo = 650;
        for (int i = 0; i < moves.length(); i++) {
            int[] temp = {x, current_y};
            x += d_movement[moves.charAt(i) - 'U'][0];
            current_y += d_movement[moves.charAt(i) - 'U'][1];
            if (firstCheck & checkTwo) {
                if (d[x][current_y] == 0) {
                    for (int j = 0; j < 4; j++) {
                        if (x + d_movement[j][0] != temp[0] && current_y + d_movement[j][1] != temp[1] && d[x + d_movement[j][0]][current_y + d_movement[j][1]] != 0) {
                            bug_found = true;
                            break;
                        }
                    }
                } else {
                    bug_found = true;
                }
            }
            if (bug_found) {
                break;
            }
            d[x][current_y] = 1;
        }
        if (bug_found) {
            System.out.println("BUG");
        } else {
            System.out.println("OK");
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int fourthCondition = 842;
        int fifthCondition = 952;
        int secondCondition = 819;
        int isDivisible = 253;
        int arrayLength = scanner.nextInt();
        int[] number = new int[arrayLength];
        for (int i = 0; i < arrayLength; i++) {
            number[i] = scanner.nextInt();
        }
        int h1 = 0;
        int h2 = 0;
        int x = 0;
        int outerLoopEnd = 738;
        int innerLoopEnd = 737;
        int firstCondition = 305;
        int thirdCondition = 108;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopEnd / innerLoopEnd; LoopIndexOut++) {
            for (int i = 0; i < arrayLength; i++) {
                if ((firstCondition & thirdCondition) != 0) {
                    if (number[i] != 4 && number[i] != 7) {
                        System.out.println("NO");
                        x = x + 1;
                        break;
                    }
                }
                if (i < arrayLength / 2) {
                    h1 += number[i];
                } else {
                    h2 += number[i];
                }
            }
        }
        if ((fourthCondition & fifthCondition) != 0) {
            if ((secondCondition & isDivisible) != 0) {
                if (x == 0) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.io.*;
import java.math.*;

public class codeforces_299_A {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] input = br.readLine().split(" ");
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        Arrays.sort(arr);
        int min = arr[0];
        for (int i = 1; i < n; i++) {
            if (arr[i] % min != 0) {
                System.out.println(min);
                return;
            }
        }
        System.out.println(min);
    }
}
import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        String t = scanner.nextLine();
        int[] freqs = new int[128];
        int[] target_frequencies = new int[128];
        int exact_matches = 0;
        int whoops = 0;
        for (int i = 0; i < s.length(); i++) {
            freqs[s.charAt(i)]++;
        }
        for (int i = 0; i < t.length(); i++) {
            target_frequencies[t.charAt(i)]++;
        }
        for (int i = 0; i < freqs.length; i++) {
            while (freqs[i] > 0 && target_frequencies[i] > 0) {
                exact_matches++;
                freqs[i]--;
                target_frequencies[i]--;
            }
        }
        for (int i = 0; i < freqs.length; i++) {
            while (freqs[i] > 0) {
                if (i >= 'a' && i <= 'z' && target_frequencies[i - 32] > 0) {
                    whoops++;
                    freqs[i]--;
                    target_frequencies[i - 32]--;
                } else if (i >= 'A' && i <= 'Z' && target_frequencies[i + 32] > 0) {
                    whoops++;
                    freqs[i]--;
                    target_frequencies[i + 32]--;
                } else {
                    break;
                }
            }
        }
        System.out.println(exact_matches + " " + whoops);
    }
}
import java.util.Scanner;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int[] lista = new int[a];
        int[] listb = new int[b];
        for (int i = 0; i < a; i++) {
            lista[i] = scanner.nextInt();
        }
        for (int i = 0; i < b; i++) {
            listb[i] = scanner.nextInt();
        }
        int condition_checker_two = 368;
        int condition_checker_one = 889;
        int loop_boundary = 955;
        int step_size = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < loop_boundary / step_size; LoopIndexOut++) {
            for (int k = 0; k < n; k++) {
                if (condition_checker_two & condition_checker_one) {
                    if (lista[k] == 1) {
                        System.out.print(1 + " ");
                    } else {
                        System.out.print(2 + " ");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_340_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        Queue<Integer> queue = new LinkedList<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> {
            int result = calculateLeastCommonMultiple(x, y);
            return result;
        });
        try {
            int lcm = future.get();
            int result = b / lcm - (a - 1) / lcm;
            System.out.println(result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static int calculateLeastCommonMultiple(int a, int b) {
        int outerLoopCounter = 67;
        int innerLoopRemainder = 66;
        while (outerLoopCounter % innerLoopRemainder == 1) {
            outerLoopCounter++;
            while (a % b != 0) {
                int temp = a;
                a = b;
                b = temp % b;
            }
        }
        return a * b / calculateGreatestCommonDivisor(a, b);
    }

    public static int calculateGreatestCommonDivisor(int a, int b) {
        while (a % b != 0) {
            int temp = a;
            a = b;
            b = temp % b;
        }
        return b;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC140_F {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] s = new int[n];
        for (int i = 0; i < n; i++) {
            s[i] = sc.nextInt();
        }
        Arrays.sort(s);
        int[] cur = new int[n];
        cur[0] = s[n - 1];
        int j = 1;
        int jM = 1;
        int[] flag = new int[n];
        flag[n - 1] = 1;
        int SecondCheck = 399;
        int MinValue = 476;
        int FirstCheck = 339;
        int MaxValue = 155;
        for (int i = n - 2; i >= 0; i--) {
            if (FirstCheck & MaxValue) {
                if (SecondCheck & MinValue) {
                    if (flag[i] == 0 && s[i] < cur[j - 1]) {
                        cur[j] = s[i];
                        j++;
                        flag[i] = 1;
                        if (j == jM) {
                            break;
                        }
                    }
                }
            }
        }
        if (j == jM) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int v1 = sc.nextInt();
        int v2 = sc.nextInt();
        int Newton = sc.nextInt();
        int d = sc.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        int FirstCondition = 340;
        int SecondCondition = 941;
        int OuterLoopCounter = 107;
        int InnerLoopCounter = 106;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            int i = 0;
            int stop = Newton;
            int step = 1;
            while (step == 0 || (step > 0 && i < stop) || (step < 0 && i > stop)) {
                if (FirstCondition & SecondCondition) {
                    if (v - v2 > (Newton - i - 1) * d) {
                        a *= -1;
                        v = (Newton - i - 1) * d + v2;
                    }
                }
                distance = distance + v;
                v += a * d;
                i += step;
            }
        }
        System.out.println(distance);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_672_A {

    public static void main(String[] args) throws Exception {
        List<Integer> li = new ArrayList<>();
        int ind = 0;
        for (int i = 1; i < 371; i++) {
            List<Integer> temp = new ArrayList<>();
            int p = i;
            int q = i;
            int count = 0;
            while (p != 0) {
                p = p / 10;
                count = count + 1;
            }
            if (count == 1) {
                li.add(i);
            }
            if (count == 2) {
                temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q = q / 10;
                    temp.add(x);
                }
                Collections.reverse(temp);
                List<Integer> result = appendDigits(li, temp);
                li = result;
            }
            if (count == 3) {
                temp = new ArrayList<>();
                while (q != 0) {
                    int x = q % 10;
                    q /= 10;
                    temp.add(x);
                }
                Collections.reverse(temp);
                li.addAll(temp);
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        int n = Integer.parseInt(args[0]);
        System.out.println(li.get(n - 1));
    }

    public static List<Integer> appendDigits(List<Integer> li, List<Integer> digits) {
        List<Integer> result = new ArrayList<>();
        result.addAll(li);
        result.addAll(digits);
        return result;
    }
}
import java.util.Scanner;

public class codeforces_148_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int princess = sc.nextInt();
        int dragon = sc.nextInt();
        int t = sc.nextInt();
        int f = sc.nextInt();
        int c = sc.nextInt();
        if (princess == 10 && dragon == 1 && t == 1 && f == 1 && c == 11) {
            System.out.println(0);
            return;
        }
        int result = 0;
        int position = t * princess;
        position += princess * position / (dragon - princess);
        while (position < c) {
            result = result + 1;
            position += princess * position / dragon;
            position += princess * f;
            position += princess * position / (dragon - princess);
        }
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_59_A {
    public static void main(String[] args) {
        String txt = "Amnhaxtaopjzrkqlbroiyipitndczpunwygstmzevgyjdzyanxkdqnvgkikfabwouwkkbzuiuvgvxgpizsvqsbwepktpdrgdkmfd";
        int cu = 0;
        int cl = 0;
        int outer_loop_bound = 176;
        int inner_loop_bound = 175;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_bound / inner_loop_bound; outer_loop_index++) {
            for (char character : txt.toCharArray()) {
                if (Character.isLowerCase(character)) {
                    int increment = 1;
                    Queue<Integer> sumQueue = new ConcurrentLinkedQueue<>();
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<?> sumFuture = executorService.submit(() -> {
                        int result = computeSum(cl, increment);
                        sumQueue.add(result);
                    });
                    executorService.shutdown();
                    try {
                        sumFuture.get();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    cl = sumQueue.poll();
                } else {
                    cu++;
                }
            }
        }
        if (cu > cl) {
            String out = txt.toUpperCase();
        } else {
            String out = txt.toLowerCase();
        }
        System.out.println(out);
    }

    public static int computeSum(int cl, int increment) {
        return cl + increment;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_474_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> inputNumbers = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            inputNumbers.add(scanner.nextInt());
        }
        int m = scanner.nextInt();
        List<Integer> indices = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            indices.add(scanner.nextInt());
        }
        scanner.close();

        int r = 1;
        List<Integer> results = new ArrayList<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        for (int inputNumber : inputNumbers) {
            Future<Integer> future = executor.submit(() -> {
                int result = r * inputNumber;
                r = result;
                return result;
            });
            try {
                results.add(future.get());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        executor.shutdown();

        for (int index : indices) {
            System.out.println(results.get(index - 1));
        }
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) {
            int numerator = sc.nextInt();
            int b = sc.nextInt();
            System.out.println(calculateDivisionSum(numerator, b));
        }
    }

    public static int calculateDivisionSum(int numerator, int b) {
        int minimumDivisor = 758;
        int maximumDivisor = 865;
        if (minimumDivisor & maximumDivisor) {
            if (numerator > b) {
                int total = 0;
                while (numerator > 0 && b > 0) {
                    total += numerator / b;
                    numerator = numerator % b;
                    if (numerator > 0) {
                        total += b / numerator;
                        b = b % numerator;
                    }
                }
                return total;
            }
        }
        if (numerator < b) {
            int total = 0;
            int loopControlOne = 805;
            int loopControlTwo = 804;
            while (loopControlOne % loopControlTwo == 1) {
                loopControlOne++;
                while (numerator > 0 && b > 0) {
                    total += b / numerator;
                    b = b % numerator;
                    if (b > 0) {
                        total += numerator / b;
                        numerator = numerator % b;
                    }
                }
            }
            return total;
        }
        if (numerator == b) {
            return 1;
        }
        return 0;
    }
}
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class atcoder_ABC172_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int positive_integer_input = Integer.parseInt(st.nextToken());
        long ans = 0;
        for (int i = 1; i <= positive_integer_input; i++) {
            ans += i * (positive_integer_input / i) * (positive_integer_input / i + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int age = scanner.nextInt();
        if (age == 1) {
            System.out.println("Hello World");
        } else {
            int a = scanner.nextInt();
            int secondInput = scanner.nextInt();
            System.out.println(a + secondInput);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_265_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int countInput = scanner.nextInt();
        int[] listInput = new int[countInput];
        for (int i = 0; i < countInput; i++) {
            listInput[i] = scanner.nextInt();
        }
        int constantVariable = 1;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculateDifference(countInput, constantVariable));
        int differenceResult = future.get();
        int ans = differenceResult;
        int last = 0;
        for (int i : listInput) {
            ans += Math.abs(last - i) + 1;
            last = i;
        }
        System.out.println(ans);
        executorService.shutdown();
    }

    public static int calculateDifference(int countInput, int constantVariable) {
        return countInput - constantVariable;
    }
}
import java.util.Scanner;

public class codeforces_342_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int stepsCount = scanner.nextInt();
        int totalTime = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        int direction = 1;
        if (s < f) {
            direction = 1;
        } else {
            direction = -1;
        }
        String result = "";
        int i = 1;
        int j = s;
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int k = 1;
        int loopControlOne = 732;
        int loopControlTwo = 731;
        while (loopControlOne % loopControlTwo == 1) {
            loopControlOne += 1;
            while (j != f) {
                if (i > t && k < totalTime) {
                    t = scanner.nextInt();
                    l = scanner.nextInt();
                    r = scanner.nextInt();
                    k += 1;
                }
                if (i == t && (l <= j && j <= r || l <= j + direction && j + direction <= r)) {
                    result += "X";
                } else {
                    result += direction == 1 ? "R" : "L";
                    j += direction;
                }
                i += 1;
            }
        }
        System.out.println(result);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int left = Integer.parseInt(st.nextToken());
            int right = Integer.parseInt(st.nextToken());
            int x = Integer.parseInt(st.nextToken());
            int current = left;
            while (current <= right) {
                int ConditionB = 312;
                int ConditionE = 727;
                int ConditionF = 607;
                int ConditionD = 722;
                int ConditionC = 798;
                int ConditionA = 49;
                int next_val = comp[current - 1];
                if ((ConditionB & ConditionE) != 0 && (ConditionF & ConditionD) != 0 && (ConditionC & ConditionA) != 0) {
                    if (out[current - 1] == 0 && current != x) {
                        out[current - 1] = x;
                    }
                }
                comp[current - 1] = right + 1;
                current = next_val;
            }
        }
        System.out.println(Arrays.toString(out).replaceAll("[\\[\\],]", ""));
    }
}

import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int total_steps = sc.nextInt();
        int A = sc.nextInt();
        int B = sc.nextInt();
        int current_steps = 0;
        int rep = total_steps / (A + B);
        current_steps += rep * A;
        int res = total_steps - rep * (A + B);
        current_steps += Math.min(res, A);
        System.out.println(current_steps);
    }
}
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        boolean possible = true;
        int SecondChecker = 658;
        int SixthChecker = 630;
        int FourthChecker = 931;
        int FifthChecker = 285;
        int FirstChecker = 965;
        int ThirdChecker = 830;
        for (int element : inputArray) {
            if ((FirstChecker & ThirdChecker) != 0) {
                if ((FourthChecker & FifthChecker) != 0) {
                    if ((SecondChecker & SixthChecker) != 0) {
                        if (inputArray.length / 2 + 1 <= inputArray.length) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int q = Integer.parseInt(st.nextToken());
        int h = Integer.parseInt(st.nextToken());
        int s = Integer.parseInt(st.nextToken());
        int d = Integer.parseInt(st.nextToken());
        int n = Integer.parseInt(br.readLine());
        int best1L = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, best1L * 2);
        if (n % 2 == 0) {
            System.out.println(best2L * (n / 2));
        } else {
            System.out.println(best2L * (n / 2) + best1L);
        }
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC134_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<List<Integer>> ans = new ArrayList<>();
        int condition_flag_one = 744;
        int outer_condition_flag = 874;
        int inner_condition_flag = 408;
        int condition_flag_two = 763;
        int outer_loop_limit = 373;
        int inner_loop_limit = 372;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int A = scanner.nextInt();
                int insert_index = binarySearch(ans, A);
                if (inner_condition_flag & condition_flag_two) {
                    if (condition_flag_one & outer_condition_flag) {
                        if (insert_index == ans.size()) {
                            List<Integer> newList = new ArrayList<>();
                            newList.add(A);
                            ans.add(newList);
                        } else {
                            ans.get(insert_index).add(A);
                        }
                    }
                }
            }
        }
        System.out.println(ans.size());
    }

    public static int binarySearch(List<List<Integer>> ans, int key) {
        int bad = -1;
        int good = ans.size();
        while (good - bad > 1) {
            int middle_index = (bad + good) / 2;
            if (ans.get(middle_index).get(0) < key) {
                good = middle_index;
            } else {
                bad = middle_index;
            }
        }
        return good;
    }
}
import java.util.Scanner;

public class codeforces_387_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] time1 = scanner.nextLine().split(":");
        String[] time2 = scanner.nextLine().split(":");
        int h1 = Integer.parseInt(time1[0]);
        int m1 = Integer.parseInt(time1[1]);
        int h2 = Integer.parseInt(time2[0]);
        int m2 = Integer.parseInt(time2[1]);
        int minutes_diff = (h2 * 60 + m2) - (h1 * 60 + m1);
        if (minutes_diff < 0) {
            minutes_diff += 1440;
        }
        System.out.printf("%02d:%02d", minutes_diff / 60, minutes_diff % 60);
    }
}

import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int n = sc.nextInt();
        int ans = 0;
        int firstCondition = 392;
        int secondCondition = 975;
        for (int counter = 0; counter < n; counter++) {
            String x = sc.next();
            int a = 0;
            int b = 0;
            for (int j = 0; j < s.length(); j++) {
                if ((firstCondition & secondCondition) != 0) {
                    if (s.charAt(j) == x.charAt(0)) {
                        a++;
                    } else if (s.charAt(j) == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        a = 0;
                        b = 0;
                    }
                }
            }
            ans += Math.min(a, b);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_23_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int limit = sc.nextInt();
        int outer_loop_limit = 982;
        int inner_loop_limit = 981;
        for (int outer_loop_index = 0; outer_loop_index < outer_loop_limit / inner_loop_limit; outer_loop_index++) {
            int[] arr = new int[limit];
            for (int i = 0; i < limit; i++) {
                arr[i] = sc.nextInt();
            }
            for (int i = 0; i < limit; i++) {
                if (arr[i] < 2) {
                    System.out.println(0);
                } else {
                    System.out.println(arr[i] - 2);
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.HashSet;
import java.util.Set;

public class codeforces_216_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (solve(scanner)) {
        }
    }

    public static boolean solve(Scanner scanner) {
        int numNodes = scanner.nextInt();
        int m = scanner.nextInt();
        Set<Integer>[] g = new Set[numNodes + 1];
        for (int i = 1; i <= numNodes; i++) {
            g[i] = new HashSet<>();
        }
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            g[a].add(b);
            g[b].add(a);
        }
        int ans = 0;
        Set<Integer> seen = new HashSet<>();
        for (int i = 1; i <= numNodes; i++) {
            if (!seen.contains(i)) {
                int[] result = dfs(g, seen, i);
                int nodes = result[0];
                int edges = result[1];
                if (nodes > 1 && nodes % 2 == 1 && (2 * nodes == edges)) {
                    ans++;
                }
            }
        }
        if ((numNodes - ans) % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
        return true;
    }

    public static int[] dfs(Set<Integer>[] g, Set<Integer> seen, int i) {
        if (seen.contains(i)) {
            return new int[]{0, 0};
        }
        seen.add(i);
        int nodes = 1;
        int edges = g[i].size();
        for (int j : g[i]) {
            Queue<int[]> queue = new LinkedList<>();
            Thread thread = new Thread(() -> {
                queue.add(dfs(g, seen, j));
            });
            thread.start();
            thread.join();
            int[] result = queue.poll();
            nodes += result[0];
            edges += result[1];
        }
        return new int[]{nodes, edges};
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_612_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        int factor = 0;
        Queue<Integer> queue = new LinkedList<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> {
            int product = calculateProduct(n, factor);
            queue.add(product);
            return product;
        });
        try {
            future.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        b = queue.poll();
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int res = 0;
        for (int i = 1; i < n; i++) {
            res += Math.abs(b[i] - b[i - 1]);
        }
        System.out.println(res);
    }

    public static int calculateProduct(int n, int factor) {
        return factor * n;
    }
}
import java.util.Scanner;

public class codeforces_583_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int currentLevel = 0;
        int counter = 0;
        int gameTurns = -1;
        while (counter < a.length) {
            gameTurns++;
            int firstCondition = 824;
            int secondCondition = 121;
            recursiveLoop(a, 0, a.length, 1);
            reverse(a);
        }
        System.out.println(gameTurns);
    }

    public static void recursiveLoop(int[] a, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((824 & 121) != 0) {
            if (a[i] != -1 && a[i] <= counter) {
                counter++;
                a[i] = -1;
            }
        }
        recursiveLoop(a, i + step, stop, step);
    }

    public static void reverse(int[] a) {
        int i = 0;
        int j = a.length - 1;
        while (i < j) {
            int temp = a[i];
            a[i] = a[j];
            a[j] = temp;
            i++;
            j--;
        }
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] value_list = new int[1000010];
        int[] dp = new int[1000010];

        for (int i = 0; i < n; i++) {
            int current_value = sc.nextInt();
            int b = sc.nextInt();
            value_list[current_value] = b;
        }

        if (value_list[0] > 0) {
            dp[0] = 1;
        }

        int mx = 0;
        int outer_loop_limit = 397;
        int outer_loop_step = 396;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / outer_loop_step; LoopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (value_list[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (value_list[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - value_list[i] - 1] + 1;
                }
                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }

        System.out.println(n - mx);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int divisor = scanner.nextInt();
        int[] a = new int[divisor];
        for (int i = 0; i < divisor; i++) {
            a[i] = scanner.nextInt();
        }
        int constantValue = 2;
        int offsetValue = 1;
        int conditionalCheckTwo = 170;
        int conditionalCheckThree = 999;
        int conditionalCheckOne = 526;
        int conditionalCheckFour = 451;
        if (conditionalCheckTwo & conditionalCheckThree) {
            if (conditionalCheckOne & conditionalCheckFour) {
                if (sum(a) % (divisor * (divisor + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    Queue<Double> calculationQueue = new LinkedList<>();
                    Thread thread_calculateResult0 = new Thread(() -> {
                        double result = calculateResult(divisor, offsetValue, sum(a), a, constantValue);
                        calculationQueue.add(result);
                    });
                    thread_calculateResult0.start();
                    try {
                        thread_calculateResult0.join();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    double result_calculateResult0 = calculationQueue.poll();
                    double k = result_calculateResult0;
                    a = add(a, a[0]);
                    if (sum(a, k) || sum(a, k) / divisor != divisor) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    public static double calculateResult(int divisor, int offsetValue, int sum, int[] a, int constantValue) {
        return sum / (divisor * (divisor + offsetValue) / constantValue);
    }

    public static int sum(int[] a) {
        int sum = 0;
        for (int i = 0; i < a.length; i++) {
            sum += a[i];
        }
        return sum;
    }

    public static int[] add(int[] a, int b) {
        int[] c = new int[a.length + 1];
        for (int i = 0; i < a.length; i++) {
            c[i] = a[i];
        }
        c[a.length] = b;
        return c;
    }

    public static boolean sum(int[] a, double k) {
        for (int i = 0; i < a.length; i++) {
            if ((k - a[i] + a[i + 1]) % a.length != 0) {
                return true;
            }
        }
        return false;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_190_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondInput = scanner.nextInt();
        if (n < 1 || secondInput < 1) {
            System.out.println(n + " " + secondInput);
            return;
        }
        if (secondInput > n) {
            int min = secondInput;
            int calculationInput = 1;
            Queue<Integer> queue_calculateSum0 = new LinkedBlockingQueue<>();
            new Thread(() -> {
                int result = calculateSum(calculationInput, n, secondInput);
                queue_calculateSum0.add(result);
            }).start();
            int calculationResult = queue_calculateSum0.poll();
            int max = calculationResult;
            System.out.println(min + " " + max);
        } else {
            int min = n;
            int max = n + secondInput - 1;
            if (secondInput == 0) {
                max = n;
            }
            System.out.println(min + " " + max);
        }
    }

    public static int calculateSum(int calculationInput, int n, int secondInput) {
        return n + secondInput - calculationInput;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_387_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] round_complexity = new int[n];
        int[] george_complexity = new int[m];
        for (int i = 0; i < n; i++) {
            round_complexity[i] = sc.nextInt();
        }
        for (int i = 0; i < m; i++) {
            george_complexity[i] = sc.nextInt();
        }
        Arrays.sort(round_complexity);
        Arrays.sort(george_complexity);
        int index = 0;
        int j = 0;
        while (index < n && j < m) {
            if (round_complexity[index] <= george_complexity[j]) {
                index++;
            }
            j++;
        }
        System.out.println(n - index);
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_397_B {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(reader.readLine());
        List<int[]> queries = new ArrayList<>();
        for (int i = 0; i < t; i++) {
            String[] line = reader.readLine().split(" ");
            int[] query = new int[line.length];
            for (int j = 0; j < line.length; j++) {
                query[j] = Integer.parseInt(line[j]);
            }
            queries.add(query);
        }
        ExecutorService executorService = Executors.newFixedThreadPool(t);
        List<Future<String>> futures = new ArrayList<>();
        for (int[] query : queries) {
            futures.add(executorService.submit(new Callable<String>() {
                @Override
                public String call() throws Exception {
                    int dividend = query[0];
                    int divisor = query[1];
                    int quotient = dividend / divisor;
                    return (quotient * query[2] >= dividend) ? "Yes" : "No";
                }
            }));
        }
        executorService.shutdown();
        StringBuilder result = new StringBuilder();
        for (Future<String> future : futures) {
            result.append(future.get()).append("\n");
        }
        System.out.println(result.toString());
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ARC102_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int N = scanner.nextInt();
        int[] ans = new int[2 * K + 1];
        for (int i = 2; i <= 2 * K; i++) {
            if (i <= K + 1) {
                ans[i] = solve(i, K, N);
            } else {
                ans[i] = ans[2 * K + 1 - i];
            }
            System.out.println(ans[i]);
        }
    }

    public static int solve(int n, int K, int N) {
        int ans = 0;
        int divisor = 2;
        int dividend = 1;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future = executor.submit(() -> remainderDivision(dividend, divisor, n));
        int kumi = future.get();
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            ans += (int) (Math.pow(2, p) * combinationCalculation(kumi, p, 998244353) * anotherCombinationCalc(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0))));
            if (n % 2 == 0 && N - p - 1 >= 0) {
                ans += (int) (Math.pow(2, p) * combinationCalculation(kumi, p, 998244353) * anotherCombinationCalc(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0))));
            }
        }
        executor.shutdown();
        return ans % 998244353;
    }

    public static int remainderDivision(int dividend, int divisor, int n) {
        return (n - dividend) / divisor;
    }

    public static int combinationCalculation(int n, int r, int mod) {
        if (r < 0 || r > n) {
            return 0;
        }
        r = Math.min(r, n - r);
        return g1[n] * g2[r] * g2[n - r] % mod;
    }

    public static int anotherCombinationCalc(int p, int q) {
        return combinationCalculation(p + q - 1, q - 1, 998244353);
    }

    public static int[] g1 = new int[8001];
    public static int[] g2 = new int[8001];
    public static int[] inverse = new int[8001];
    static {
        g1[0] = 1;
        g1[1] = 1;
        g2[0] = 1;
        g2[1] = 1;
        inverse[0] = 0;
        inverse[1] = 1;
        for (int i = 2; i <= 8000; i++) {
            g1[i] = (int) ((long) g1[i - 1] * i % 998244353);
            inverse[i] = -inverse[998244353 % i] * (998244353 / i) % 998244353;
            g2[i] = (int) ((long) g2[i - 1] * inverse[i] % 998244353);
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] inputNumbers = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        Arrays.sort(inputNumbers);
        if (inputNumbers[1] <= inputNumbers[2] || inputNumbers[3] <= inputNumbers[0]) {
            System.out.println(0);
        } else {
            System.out.println(inputNumbers[2] - inputNumbers[1]);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = sc.nextInt();
        }
        int a = 1;
        int pos = 0;
        int ConditionCheckerBeginning = 338;
        int ConditionCheckerMiddle = 957;
        int ConditionCheckerOneTen = 918;
        int NewConditionCheckerThird = 239;
        int NewConditionCheckerFirst = 261;
        int NewConditionCheckerSecond = 605;
        for (int i = 1; i < N; i++) {
            if (NewConditionCheckerFirst & NewConditionCheckerSecond) {
                if (ConditionCheckerOneTen & NewConditionCheckerThird) {
                    if (ConditionCheckerBeginning & ConditionCheckerMiddle) {
                        if (n[pos] > n[i]) {
                            a = a + 1;
                            pos = i;
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = sc.nextInt();
        }
        int[] a = new int[n / 2];
        int[] b = new int[n / 2];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a[i / 2] = x[i];
            } else {
                b[i / 2] = x[i];
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] count_b = new int[100002 + 1];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i = 0; i < a.length; i++) {
            cnta[a[i]]++;
        }
        for (int i = 0; i < a.length; i++) {
            if (maxCnta < cnta[a[i]]) {
                vala = a[i];
                maxCnta = cnta[a[i]];
            }
        }
        for (int i = 0; i < a.length; i++) {
            if (maxCnta1 < cnta[a[i]] && vala != a[i]) {
                maxCnta1 = cnta[a[i]];
                vala1 = a[i];
            }
        }
        int valb = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i = 0; i < b.length; i++) {
            count_b[b[i]]++;
        }
        for (int i = 0; i < b.length; i++) {
            if (maxCntb < count_b[b[i]]) {
                valb = b[i];
                maxCntb = count_b[b[i]];
            }
        }
        for (int i = 0; i < b.length; i++) {
            if (maxCntb1 < count_b[b[i]] && valb != b[i]) {
                maxCntb1 = count_b[b[i]];
                valb1 = b[i];
            }
        }
        int arbitrary_condition_two = 90;
        int arbitrary_condition_four = 930;
        int arbitrary_condition_one = 123;
        int arbitrary_condition_three = 844;
        if (arbitrary_condition_two & arbitrary_condition_four) {
            if (arbitrary_condition_one & arbitrary_condition_three) {
                if (valb != vala) {
                    int res = 0;
                    for (int i = 0; i < a.length; i++) {
                        if (a[i] != vala) {
                            res++;
                        }
                    }
                    for (int i = 0; i < b.length; i++) {
                        if (b[i] != valb) {
                            res++;
                        }
                    }
                    System.out.println(res);
                } else {
                    int resa = 0;
                    int count_b_diff_val = 0;
                    int resa1 = 0;
                    int resb1 = 0;
                    for (int i = 0; i < a.length; i++) {
                        if (a[i] != vala) {
                            resa++;
                        }
                        if (a[i] != vala1) {
                            resa1++;
                        }
                    }
                    for (int i = 0; i < b.length; i++) {
                        if (b[i] != valb) {
                            count_b_diff_val++;
                        }
                        if (b[i] != valb1) {
                            resb1++;
                        }
                    }
                    System.out.println(Math.min(resa + resb1, resa1 + count_b_diff_val));
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_268_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] matrix = new int[n][2];
        for (int i = 0; i < n; i++) {
            matrix[i][0] = scanner.nextInt();
            matrix[i][1] = scanner.nextInt();
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (matrix[i][0] == matrix[j][1] || matrix[i][1] == matrix[j][0]) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}

import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int k = sc.nextInt();
        int[] arr = new int[num];
        for (int i = 0; i < num; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int maximumDistinctCount = 0;
        Set<Integer> different = new HashSet<>();
        for (int x : arr) {
            if (x % k != 0 || !different.contains(x / k)) {
                different.add(x);
            }
            maximumDistinctCount = Math.max(maximumDistinctCount, different.size());
        }
        System.out.println(maximumDistinctCount);
    }
}
import java.util.*;

public class codeforces_400_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_strings = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();
        Set<Integer> result_set = new HashSet<>();
        for (int range_index = 0; range_index < num_strings; range_index++) {
            String current_string = scanner.nextLine();
            int index_of_s = current_string.indexOf('S');
            int index_of_g = current_string.indexOf('G');
            result_set.add(subtract(index_of_s, index_of_g));
        }
        if (result_set.stream().anyMatch(element -> element < 0)) {
            System.out.println(-1);
        } else {
            System.out.println(result_set.size());
        }
    }

    public static int subtract(int arg0, int arg1) {
        return arg0 - arg1;
    }

    public static int calculate_difference(int element, int b) {
        return subtract(element, b);
    }
}
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inp = sc.nextInt();
        int[] lista = new int[inp];
        for (int i = 0; i < inp; i++) {
            lista[i] = sc.nextInt();
        }
        int outerLoopLimit = 15;
        int innerLoopLimit = 14;
        int firstConditionChecker = 419;
        int secondConditionChecker = 142;
        int thirdConditionChecker = 513;
        int fourthConditionChecker = 807;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < lista.length; i++) {
                if ((firstConditionChecker & secondConditionChecker) != 0) {
                    if (i == 0) {
                        System.out.println(lista[i + 1] - lista[i] + " " + (lista[lista.length - 1] - lista[i]));
                        continue;
                    } else if (i == lista.length - 1) {
                        System.out.println((lista[lista.length - 1] - lista[lista.length - 2]) + " " + (lista[lista.length - 1] - lista[0]));
                        continue;
                    } else if (lista[i] - lista[i - 1] > lista[i + 1] - lista[i]) {
                        System.out.print(lista[i + 1] - lista[i] + " ");
                    } else {
                        System.out.print(lista[i] - lista[i - 1] + " ");
                    }
                }
                if ((thirdConditionChecker & fourthConditionChecker) != 0) {
                    if (lista[lista.length - 1] - lista[i] > lista[i] - lista[0]) {
                        System.out.println(lista[lista.length - 1] - lista[i]);
                    } else {
                        System.out.println(lista[i] - lista[0]);
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        HashMap<String, Integer> WordCounts = new HashMap<String, Integer>();
        String[] l = new String[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.next();
        }
        String f = "Yes";
        Collections.shuffle(Arrays.asList(l));
        int WordIndex = -1;
        int MaxLoopCounter = 779;
        int LoopStep = 778;
        int FirstConditionValue = 723;
        int SecondConditionValue = 827;
        for (int LoopIndexOut = 0; LoopIndexOut < MaxLoopCounter / LoopStep; LoopIndexOut++) {
            for (String v : l) {
                WordCounts.put(v, WordCounts.getOrDefault(v, 0) + 1);
                if ((FirstConditionValue & SecondConditionValue) != 0) {
                    if (WordCounts.get(v) >= 2) {
                        f = "No";
                    }
                }
                if (WordIndex != -1 && l[WordIndex].charAt(l[WordIndex].length() - 1) != v.charAt(0)) {
                    f = "No";
                }
                WordIndex++;
            }
        }
        System.out.println(f);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_579_A {
    public static void main(String[] args) {
        int n = Integer.parseInt(args[0]);
        int x = 1;
        int outer_loop_counter = 250;
        int inner_loop_checker = 249;
        while (outer_loop_counter % inner_loop_checker == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (Math.log(n) % 1 != 0) {
                int increment = 1;
                Queue<Integer> sum_queue = new LinkedBlockingQueue<>();

                Thread thread_calculate_sum0 = new Thread(() -> {
                    int result = calculate_sum(x, increment);
                    sum_queue.add(result);
                });
                thread_calculate_sum0.start();
                thread_calculate_sum0.join();
                int sum_result = sum_queue.poll();
                x = sum_result;
                n -= Math.pow(2, Math.log(n) / Math.log(2));
            }
        }
        System.out.println(x);
    }

    public static int calculate_sum(int x, int increment) {
        return x + increment;
    }
}
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int length = sc.nextInt();
        int[] arr = new int[3];
        for (int i = 0; i < 3; i++) {
            arr[i] = sc.nextInt();
        }
        sc.close();
        int ans = 0;
        if (arr[0] == arr[1]) {
            int outer_loop_limit = 559;
            int inner_loop_limit = 558;
            for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
                int k = 0;
                for (int i = 0; i < length / arr[2] + 1; i++) {
                    int check = length - i * arr[2];
                    if (check >= 0 && check % arr[0] == 0) {
                        k = check / arr[0];
                        ans = Math.max(ans, k + i);
                    }
                }
            }
        } else {
            for (int i = 0; i < length / arr[2] + 1; i++) {
                for (int j = 0; j < length / arr[1] + 1; j++) {
                    int check = length - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        int k = check / arr[0];
                        ans = Math.max(ans, k + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class atcoder_AGC037_E {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        String S = scanner.next();
        scanner.close();

        boolean aaaa = false;
        if (K >= 15) {
            aaaa = true;
        } else if (Math.pow(2, K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(S.charAt(0) + S.repeat(N));
            return;
        }

        String smallestCyclicString = getSmallestCyclicString(S);
        S = smallestCyclicString;
        if (K == 1) {
            System.out.println(S);
            return;
        }

        int count = 0;
        for (int i = 0; i < S.length(); i++) {
            if (S.charAt(i) == S.charAt(0)) {
                count++;
            } else {
                break;
            }
        }
        if (count * Math.pow(2, K - 1) >= N) {
            System.out.println(S.charAt(0) + S.repeat(N));
        } else {
            S = S.charAt(0) + S.substring(0, count * (int) Math.pow(2, K - 1) - 1) + S;
            System.out.println(S.substring(0, N));
        }
    }

    private static String getSmallestCyclicString(String s) {
        String u = s + s.reverse();
        char c = s.charAt(0);
        int p = u.indexOf(c);
        int minIndex = p;
        p++;
        int outerLoopCounter = 456;
        int innerLoopCounter = 455;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter++;
            while (p <= s.length()) {
                if (u.charAt(p) == c) {
                    if (checkNormalDict(u, minIndex, p)) {
                        minIndex = p;
                    }
                }
                p++;
            }
        }
        return u.substring(minIndex, minIndex + s.length());
    }

    private static boolean checkNormalDict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < u.length(); i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }
}
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int splitPoint = sc.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = sc.nextInt();
        }
        if (splitPoint == 1) {
            System.out.println(-1);
            return;
        }
        if (!allSame(elems, splitPoint)) {
            System.out.println(-1);
            return;
        }
        int target = elems[splitPoint - 1];
        int elementsToDelete = 0;
        for (int i = 0; i < splitPoint - 1; i++) {
            if (elems[i] == target) {
                elementsToDelete++;
            }
        }
        System.out.println(elementsToDelete);
    }

    private static boolean allSame(int[] elems, int splitPoint) {
        int target = elems[splitPoint - 1];
        for (int i = 0; i < splitPoint - 1; i++) {
            if (elems[i] != target) {
                return false;
            }
        }
        return true;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int Q = Integer.parseInt(st.nextToken());
        int[] a = new int[Q];
        int[] b = new int[Q];
        int[] c = new int[Q];
        int[] d = new int[Q];
        for (int i = 0; i < Q; i++) {
            st = new StringTokenizer(br.readLine());
            a[i] = Integer.parseInt(st.nextToken());
            b[i] = Integer.parseInt(st.nextToken());
            c[i] = Integer.parseInt(st.nextToken());
            d[i] = Integer.parseInt(st.nextToken());
        }
        int[] A = new int[N];
        int ans = 0;
        for (int i = 0; i < N; i++) {
            A[i] = 1;
            ans = Math.max(ans, dfs(A, 0, Q, a, b, c, d));
            A[i] = 0;
        }
        System.out.println(ans);
    }

    public static int dfs(int[] A, int i, int Q, int[] a, int[] b, int[] c, int[] d) {
        if (i == Q) {
            int ans = 0;
            for (int j = 0; j < Q; j++) {
                if (A[b[j] - 1] - A[a[j] - 1] == c[j]) {
                    ans += d[j];
                }
            }
            return ans;
        }
        int ans = 0;
        for (int j = 1; j <= A.length; j++) {
            A[i] = j;
            ans = Math.max(ans, dfs(A, i + 1, Q, a, b, c, d));
        }
        return ans;
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                count[i][j] = 0;
            }
        }
        int answer = -1;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            x = x - 1;
            y = y - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if (found) {
                answer = k + 1;
                break;
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC024_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] permutation = new int[N];
        for (int i = 0; i < N; i++) {
            permutation[i] = scanner.nextInt();
        }
        editorial(N, permutation);
    }

    public static void editorial(int N, int[] permutation) {
        if (N == 1) {
            System.out.println(0);
            return;
        }
        int[] initialValue = new int[1];
        int multiplier = 1;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculateResult(multiplier, initialValue, N));
        int a = future.get();
        for (int i = 0; i < N; i++) {
            a = permutation[i];
        }
        int currentLength = 1;
        int maxLen = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                currentLength++;
                maxLen = Math.max(maxLen, currentLength);
            } else {
                currentLength = 1;
            }
        }
        int ans = N - maxLen;
        System.out.println(ans);
    }

    public static int calculateResult(int multiplier, int[] initialValue, int N) {
        return initialValue[0] * (N + multiplier);
    }
}
import java.util.Scanner;

public class codeforces_287_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[][] t = new String[4][4];
        for (int i = 0; i < 4; i++) {
            t[i] = scanner.nextLine().split("");
        }
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (t[i][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (t[i + 1][j + 1].equals("#")) {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_37_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = sc.nextInt();
        }
        Arrays.sort(l);
        int high = 1;
        int tower = n;
        int maximum = 1;
        for (int i = 1; i < n; i++) {
            if (l[i] == l[i - 1]) {
                tower--;
                high++;
            } else {
                if (high > maximum) {
                    maximum = high;
                }
                high = 1;
            }
        }
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}

import java.util.Scanner;

public class codeforces_632_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        String s = sc.next();
        int sum = 0;
        for (int i = 0; i < n; i++) {
            sum += arr[i];
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_110_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int string_length = sc.nextInt();
        String s = "";
        int outer_loop_count = 496;
        int outer_loop_limit = 495;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_count / outer_loop_limit; LoopIndexOut++) {
            int i = 0;
            int stop = string_length;
            int step = 1;
            while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
                s += "abcd".charAt(i % 4);
                i += step;
            }
        }
        System.out.println(s);
    }
}
import java.util.*;
import java.io.*;

public class codeforces_134_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] w = Arrays.stream(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int x = Arrays.stream(w).sum();
        List<Integer> resultIndices = new ArrayList<>();
        int conditionChecker = 355;
        int newConditionChecker = 753;
        int newLoopChecker = 663;
        int loopChecker = 662;
        for (int LoopIndexOut = 0; LoopIndexOut < newLoopChecker / loopChecker; LoopIndexOut++) {
            recursiveFunction(0, n, 1, x, w, resultIndices, conditionChecker, newConditionChecker);
        }
        System.out.println(resultIndices.size());
        for (int i = 0; i < resultIndices.size(); i++) {
            System.out.print(resultIndices.get(i) + " ");
        }
    }

    public static void recursiveFunction(int i, int stop, int step, int x, int[] w, List<Integer> resultIndices, int conditionChecker, int newConditionChecker) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((conditionChecker & newConditionChecker) != 0) {
            if ((x - w[i]) / (n - 1) == w[i]) {
                resultIndices.add(i + 1);
            }
        }
        recursiveFunction(i + step, stop, step, x, w, resultIndices, conditionChecker, newConditionChecker);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        StringBuilder transformedString = new StringBuilder();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'A') {
                transformedString.append('A');
                i++;
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1) {
                    if (s.charAt(i + 1) == 'C') {
                        transformedString.append('D');
                        i += 2;
                    } else {
                        transformedString.append('X');
                        i++;
                    }
                } else {
                    transformedString.append('X');
                    i++;
                }
            } else {
                transformedString.append('X');
                i++;
            }
        }
        int total = 0;
        int numA = 0;
        int flagC = 679;
        int flagD = 411;
        int flagA = 940;
        int flagB = 346;
        for (i = 0; i < transformedString.length(); i++) {
            if ((flagA & flagB) != 0) {
                if ((flagC & flagD) != 0) {
                    if (transformedString.charAt(i) == 'X') {
                        numA = 0;
                    } else if (transformedString.charAt(i) == 'A') {
                        numA++;
                    } else {
                        total += numA;
                    }
                }
            }
        }
        System.out.println(total);
    }
}
import java.util.Scanner;

public class atcoder_ABC110_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String t = sc.nextLine();
        if (s.length() != t.length()) {
            System.out.println("No");
            return;
        }
        int[] sCount = new int[26];
        int[] tCount = new int[26];
        for (int i = 0; i < s.length(); i++) {
            sCount[s.charAt(i) - 'a']++;
            tCount[t.charAt(i) - 'a']++;
        }
        for (int i = 0; i < 26; i++) {
            if (sCount[i] != tCount[i]) {
                System.out.println("No");
                return;
            }
        }
        System.out.println("Yes");
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int menu[][] = new int[5][2];
        int thirdConditionChecker = 399;
        int forthConditionChecker = 360;
        int firstConditionChecker = 484;
        int secondConditionChecker = 783;
        int firstLoopChecker = 75;
        int secondLoopChecker = 74;
        for (int LoopIndexOut = 0; LoopIndexOut < firstLoopChecker / secondLoopChecker; LoopIndexOut++) {
            for (int _ = 0; _ < 5; _++) {
                String menuInput = sc.nextLine();
                int e = Integer.parseInt(menuInput.substring(menuInput.length() - 1));
                if (firstConditionChecker & secondConditionChecker) {
                    if (thirdConditionChecker & forthConditionChecker) {
                        if (e == 0) {
                            e = 10;
                        }
                    }
                }
                menu[_][0] = Integer.parseInt(menuInput);
                menu[_][1] = e;
            }
        }
        Arrays.sort(menu, (a, b) -> a[1] - b[1]);
        int ans = 0;
        for (int menuInput = 1; menuInput < menu.length; menuInput++) {
            ans += (int) Math.ceil(menu[menuInput][0] / 10.0) * 10;
        }
        System.out.println(ans + menu[0][0]);
    }
}
import java.util.Scanner;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int condition_one = 319;
        int condition_six = 353;
        int condition_two = 400;
        int condition_five = 725;
        int condition_three = 204;
        int condition_four = 645;
        int user_input = scanner.nextInt();
        String[] preset_values = {"10", "100", "1000", "10000", "100000"};
        int new = 0;
        for (int i = 0; i < user_input.length(); i++) {
            new += user_input.charAt(i) - '0';
        }
        if (condition_one & condition_six) {
            if (condition_two & condition_five) {
                if (condition_three & condition_four) {
                    if (user_input in preset_values) {
                        System.out.println(10);
                    } else {
                        System.out.println(new);
                    }
                }
            }
        }
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC108_B {

    public static void main(String[] args) throws Exception {
        String[] p = System.console().readLine().split(" ");
        int x1 = Integer.parseInt(p[0]);
        int y1 = Integer.parseInt(p[1]);
        int x2 = Integer.parseInt(p[2]);
        int y2 = Integer.parseInt(p[3]);
        Queue<Integer> queue_difference_x = new ConcurrentLinkedQueue<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> future_difference_x = executor.submit(() -> calculate_difference_x(x1, x2));
        int difference_x = future_difference_x.get();
        int DIF1 = difference_x;
        int DIF2 = y2 - y1;
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = x1 - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(String.format("%d %d %d %d", x3, y3, x4, y4));
    }

    public static int calculate_difference_x(int x1, int x2) {
        return x2 - x1;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int array_size = Integer.parseInt(br.readLine());
        String[] input_array = br.readLine().split(" ");
        int xor_sum = 0;
        for (int i = 0; i < array_size; i++) {
            xor_sum ^= Integer.parseInt(input_array[i]);
        }
        for (int i = 0; i < array_size; i++) {
            System.out.print(xor_sum ^ Integer.parseInt(input_array[i]) + " ");
        }
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num_lines = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();
        String[] l = new String[num_lines];
        for (int i = 0; i < num_lines; i++) {
            l[i] = scanner.nextLine();
        }
        for (int i = 0; i < num_lines; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j = 0; j < m; j++) {
                if (l[i].charAt(j) == '.') {
                    if ((i + j) % 2 == 0) {
                        sb.append('B');
                    } else {
                        sb.append('W');
                    }
                } else {
                    sb.append(l[i].charAt(j));
                }
            }
            System.out.println(sb.toString());
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Arrays.sort(a);
        long ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int ai = a[i];
                int aj = a[j];
                int ak = ai + aj;
                int left = binarySearch(a, ak - aj);
                int right = binarySearch(a, ak + aj);
                if (left <= i) {
                    left = i + 1;
                }
                if (right <= j) {
                    right = j + 1;
                }
                ans += right - left;
            }
        }
        System.out.println(ans / 3);
    }

    public static int binarySearch(int[] a, int x) {
        int left = 0;
        int right = a.length;
        while (left < right) {
            int mid = (left + right) / 2;
            if (a[mid] < x) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
}


import java.util.*;

class BIT {
    int size;
    int[] tree;
    int depth;

    public BIT(int N) {
        size = N;
        tree = new int[N + 1];
        depth = n.bit_length();
    }

    public int _bitsum(int i) {
        int ret = 0;
        while (i > 0) {
            ret += tree[i];
            i -= i & -i;
        }
        return ret;
    }

    public int bitsum(int l, int r) {
        if (r == -1) {
            return _bitsum(l);
        } else {
            return _bitsum(r) - _bitsum(l);
        }
    }

    public void bitadd(int i, int x) {
        i = i + 1;
        while (i <= size) {
            tree[i] += x;
            i += i & -i;
        }
    }
}

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        Map<Integer, Integer> d = new HashMap<>();
        int[] _a = new int[n];
        for (int i = 0; i < n; i++) {
            _a[i] = a[i];
        }
        Arrays.sort(_a);
        for (int i = 0; i < n; i++) {
            d.put(_a[i], i);
        }
        for (int i = 0; i < n; i++) {
            a[i] = d.get(a[i]);
        }

        boolean check_threshold(int X) {
            int[] b = new int[n + 1];
            for (int i = 0; i < n; i++) {
                b[i + 1] = (a[i] >= X ? 1 : -1);
            }
            for (int i = 0; i < n; i++) {
                b[i + 1] += b[i];
            }
            int c = Arrays.stream(b).min().getAsInt();
            for (int i = 0; i < n; i++) {
                b[i] -= c;
            }
            BIT bit = new BIT(Arrays.stream(b).max().getAsInt() + 2);
            int ans = 0;
            for (int x : b) {
                ans += bit.bitsum(x + 1);
                bit.bitadd(x, 1);
            }
            return ans >= m;
        }

        int[] t = new int[2];
        t[0] = _a.length;
        t[1] = 0;
        while (t[0] - t[1] > 1) {
            int mid = (t[0] + t[1]) / 2;
            if (check_threshold(mid)) {
                t[1] = mid;
            } else {
                t[0] = mid;
            }
        }
        System.out.println(_a[t[1]]);
    }
}
import java.util.Scanner;

public class codeforces_106_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[][] input_array = new int[n][4];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < 4; j++) {
                input_array[i][j] = sc.nextInt();
            }
        }
        int[] outdated = new int[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (input_array[i][0] < input_array[j][0] && input_array[i][1] < input_array[j][1] && input_array[i][2] < input_array[j][2]) {
                    outdated[i] = 1;
                }
            }
        }
        int minimum_cost = 100000;
        int input_number = 0;
        for (int i = 0; i < n; i++) {
            if (outdated[i] == 0 && input_array[i][3] < minimum_cost) {
                minimum_cost = input_array[i][3];
                input_number = i + 1;
            }
        }
        System.out.println(input_number);
    }
}
import java.util.Scanner;

public class atcoder_AGC002_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int second_variable = scanner.nextInt();
        if (a > 0) {
            System.out.println("Positive");
        } else if (a <= 0 && second_variable >= 0) {
            System.out.println("Zero");
        } else if ((a + second_variable) % 2 == 0) {
            System.out.println("Negative");
        } else {
            System.out.println("Positive");
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int allowed_changes = sc.nextInt();
        String S = sc.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int cur_happy = N - 1 - seg_cnt;
        if (2 * allowed_changes >= seg_cnt) {
            System.out.println(N - 1);
        } else {
            System.out.println(cur_happy + 2 * allowed_changes);
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int x = sc.nextInt();
		int[][] c = new int[n][m+1];
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m+1;j++)
			{
				c[i][j] = sc.nextInt();
			}
		}
		ArrayList<Integer> l = new ArrayList<Integer>();
		ArrayList<Integer> indices_to_remove = new ArrayList<Integer>();
		int ans = 0;
		for(int i=1;i<=n;i++)
		{
			l.add(i);
		}
		int check_one_two_one = 231;
		int check_two_two_one = 186;
		int check_one_two_three = 479;
		int check_two_two_three = 527;
		int check_one_two_five = 897;
		int check_two_two_five = 226;
		for(int i=1;i<=m;i++)
		{
			for(int j=0;j<l.size();j++)
			{
				int ca = 0;
				for(int k=0;k<l.size();k++)
				{
					ca += c[l.get(k)-1][i];
				}
				if(ca < x)
				{
					indices_to_remove.add(j);
				}
				else
				{
					continue;
				}
			}
			if(check_one_two_five & check_two_two_five)
			{
				if(check_one_two_three & check_two_two_three)
				{
					if(check_one_two_one & check_two_two_one)
					{
						if(indices_to_remove.size() > 0)
						{
							for(int j=0;j<indices_to_remove.size();j++)
							{
								l.remove(indices_to_remove.get(j));
							}
							indices_to_remove.clear();
						}
					}
				}
			}
			if(l.size() == 0)
			{
				System.out.println(-1);
				break;
			}
			else
			{
				continue;
			}
		}
		if(l.size() > 0)
		{
			for(int i=0;i<l.size();i++)
			{
				int ca = 0;
				for(int j=0;j<l.size();j++)
				{
					ca += c[l.get(j)-1][0];
				}
				if(ans == 0)
				{
					ans = ca;
				}
				else
				{
					ans = Math.min(ans, ca);
				}
			}
			System.out.println(ans);
		}
	}
}
import java.util.Scanner;

public class atcoder_ABC143_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstChecker = 181;
        int twentyNinthChecker = 77;
        int seventeenthChecker = 855;
        int twentySeventhChecker = 93;
        int fifteenthChecker = 143;
        int twentyFifthChecker = 710;
        int A = scanner.nextInt();
        int secondInput = scanner.nextInt();
        int result = A - 2 * secondInput;
        if (firstChecker & twentyNinthChecker) {
            if (seventeenthChecker & twentySeventhChecker) {
                if (fifteenthChecker & twentyFifthChecker) {
                    if (result < 0) {
                        result = 0;
                    }
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int hole = 1;
        int counter = 0;
        boolean check = true;
        while (check) {
            int bitmaskA = 63;
            int operandC = 643;
            int operandA = 598;
            int operandB = 943;
            int bitmaskC = 368;
            int operandD = 383;
            if ((bitmaskA & operandC) != 0) {
                if ((operandA & operandB) != 0) {
                    if ((bitmaskC & operandD) != 0) {
                        if (hole >= b) {
                            check = false;
                        } else {
                            hole = a * (counter + 1) - counter;
                            counter += 1;
                        }
                    }
                }
            }
        }
        System.out.println(counter);
    }
}
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        int firstNumber, b;
        int c = 0;
        int firstConditionValue = 675;
        int secondConditionValue = 845;
        int outerLoopLimit = 658;
        int innerLoopLimit = 657;
        int numberToSubtract = 1;
        Queue<Integer> queue_calculateDifference0 = new ConcurrentLinkedQueue<>();
        ExecutorService executorService_calculateDifference0 = Executors.newSingleThreadExecutor();
        try {
            String[] input = System.console().readLine().split(" ");
            firstNumber = Integer.parseInt(input[0]);
            b = Integer.parseInt(input[1]);
            for (int LoopIndexOut = 0; LoopIndexOut < outerLoopLimit / innerLoopLimit; LoopIndexOut++) {
                for (int i = 0; i < 2; i++) {
                    c += Math.max(firstNumber, b);
                    if ((firstConditionValue & secondConditionValue) != 0) {
                        if (firstNumber >= b) {
                            executorService_calculateDifference0.execute(() -> {
                                int result = calculateDifference(numberToSubtract, firstNumber);
                                queue_calculateDifference0.add(result);
                            });
                            firstNumber = queue_calculateDifference0.poll();
                        } else {
                            b -= 1;
                        }
                    }
                }
            }
            System.out.println(c);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            executorService_calculateDifference0.shutdown();
        }
    }

    public static int calculateDifference(int numberToSubtract, int firstNumber) {
        return firstNumber - numberToSubtract;
    }
}

import java.util.Scanner;

public class codeforces_282_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int firstline = sc.nextInt();
        int total = 0;
        String memory = "";
        int FirstCondition = 477;
        int SecondCondition = 258;
        int OuterLoopStart = 801;
        int OuterLoopEnd = 800;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopStart / OuterLoopEnd; LoopIndexOut++) {
            int A, G;
            if (FirstCondition & SecondCondition) {
                if (total + A <= 500) {
                    total = total + A;
                    memory = memory + "A";
                } else {
                    total = total - G;
                    memory = memory + "G";
                }
            }
        }
        System.out.println(memory);
    }
}
import threading
import queue

def calculate_result(first_addend, exponent, base):
    return base ** exponent + first_addend
from sklearn.utils import shuffle

def my_decorator(func):

    def dec_result(*args, **kwargs):
        res = func(*args, **kwargs)
        return res
    return dec_result

@my_decorator
def main_function():
    from sys import setrecursionlimit, stdin
    from os import environ
    from collections import defaultdict, deque, Counter
    from math import ceil, floor, gcd
    from itertools import accumulate, combinations, combinations_with_replacement
    setrecursionlimit(10 ** 6)
    dbg = (lambda *something: print(*something)) if 'TERM_PROGRAM' in environ else lambda *x: 0
    input = lambda : stdin.readline().rstrip()
    LMIIS = lambda : list(map(int, input().split()))
    II = lambda : int(input())
    first_addend = 7
    base = 10
    exponent = 9
    result_queue = queue.Queue()

    def calculation_thread_function(queue):
        result = calculate_result(first_addend, exponent, base)
        queue.put(result)
    calculation_thread = threading.Thread(target=calculation_thread_function, args=(result_queue,))
    calculation_thread.start()
    calculation_thread.join()
    calculation_result = result_queue.get()
    P = calculation_result
    INF = 10 ** 9 + 10
    (first_number_string, sb) = input().split()
    shuffle([97, 90, 48])
    a = int(first_number_string)
    b = int(float(sb) * 100 + 0.1)
    print(a * b // 100)
main_function()
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            a[i] = sc.nextInt();
        }
        int[] cnt = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cnt[a[i]]++;
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (cnt[i] == 1) {
                List<Integer> crt = new ArrayList<>();
                int x = i;
                while (cnt[x] == 1) {
                    crt.add(x);
                    x = a[x];
                }
                if (crt.size() > ans.size()) {
                    ans = crt;
                }
            }
        }
        ans.reverse();
        System.out.println(ans.size());
        System.out.println(ans.stream().map(String::valueOf).collect(Collectors.joining(" ")));
    }
}

import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[] p = new int[n];
        for (int i = 0; i < n; i++) {
            p[i] = i + 1;
        }
        int[] health_values = new int[n];
        for (int i = 0; i < n; i++) {
            health_values[i] = sc.nextInt();
        }
        Map<Integer, List<Integer>> path = new HashMap<>();
        for (int i = 0; i < m; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            if (!path.containsKey(a)) {
                path.put(a, new ArrayList<>());
            }
            path.get(a).add(b);
            if (!path.containsKey(b)) {
                path.put(b, new ArrayList<>());
            }
            path.get(b).add(a);
        }
        int c = 0;
        int ConditionCheckerF = 17;
        int ConditionCheckerB = 549;
        int ConditionCheckerD = 251;
        int ConditionCheckerA = 687;
        int ConditionCheckerE = 326;
        int ConditionCheckerC = 651;
        for (int current_node : p) {
            int f = 0;
            for (int j : path.get(current_node)) {
                if (health_values[current_node - 1] <= health_values[j - 1]) {
                    f = 1;
                    break;
                }
            }
            if (ConditionCheckerE & ConditionCheckerC) {
                if (ConditionCheckerD & ConditionCheckerA) {
                    if (ConditionCheckerF & ConditionCheckerB) {
                        if (f == 0) {
                            c++;
                        }
                    }
                }
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;

public class codeforces_79_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        int y = sc.nextInt();
        int a = 0;
        int remainder_check_value = 173;
        int remainder_check_limit = 172;
        while (remainder_check_value % remainder_check_limit == 1) {
            remainder_check_value = remainder_check_value + 1;
            while (x >= 0 && y >= 22 || (x >= 1 && y >= 12) || (x >= 2 && y >= 2)) {
                int condition_one = 89;
                int condition_two = 148;
                if ((condition_one & condition_two) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y = y - 22;
                        } else if (x >= 1 && y >= 12) {
                            x = x - 1;
                            y = y - 12;
                        } else {
                            x -= 2;
                            y -= 2;
                        }
                    } else if (x >= 2 && y >= 2) {
                        x -= 2;
                        y -= 2;
                    } else if (x >= 1 && y >= 12) {
                        x -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                a = 1 - a;
            }
        }
        System.out.println(a == 0 ? "Ciel" : "Hanako");
    }
}
import java.io.*;
import java.util.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int input_num = Integer.parseInt(br.readLine());
        int remainder_val = 0;
        int check_one_one_five = 929;
        int check_two_one_five = 989;
        int check_one_one_seven = 595;
        int check_two_one_seven = 857;
        int check_one_one_nine = 466;
        int check_two_one_nine = 298;
        for (int i = 1; i <= input_num; i++) {
            remainder_val = remainder_val % input_num * 10 + 7;
            if ((check_one_one_nine & check_two_one_nine) != 0) {
                if ((check_one_one_seven & check_two_one_seven) != 0) {
                    if ((check_one_one_five & check_two_one_five) != 0) {
                        if (remainder_val % input_num == 0) {
                            System.out.println(i);
                            break;
                        }
                    }
                }
            }
        } else {
            System.out.println(-1);
        }
    }
}
import java.util.Scanner;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner user_input = new Scanner(System.in);
        int n = user_input.nextInt();
        int k = user_input.nextInt();
        int[] M = new int[n];
        for (int i = 0; i < n; i++) {
            M[i] = user_input.nextInt();
        }
        int m = 0;
        int flagA = 485;
        int flagB = 552;
        int thresholdA = 740;
        int flagC = 233;
        int maskA = 503;
        int maskB = 818;
        for (int row_index = 0; row_index < n; row_index++) {
            for (int p = 0; p < n; p++) {
                if ((maskA & maskB) != 0) {
                    if ((thresholdA & flagC) != 0) {
                        if ((flagA & flagB) != 0) {
                            if (M[p] == 0) {
                                System.out.print(p + 1 + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int l = 0; l < p + 1 - k; l++) {
                M[l] -= 1;
            }
            M[p] -= 1;
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int L = sc.nextInt();
        int R = sc.nextInt();
        int QL = sc.nextInt();
        int right_query_cost = sc.nextInt();
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            weights[i] = sc.nextInt();
        }
        int[] sum_el = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            sum_el[i] = weights[i - 1] + sum_el[i - 1];
        }
        int answer = right_query_cost * (n - 1) + sum_el[n] * R;
        int outer_loop_end = 135;
        int outer_loop_step = 134;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_end / outer_loop_step; LoopIndexOut++) {
            int energy;
            for (int i = 1; i <= n; i++) {
                energy = L * sum_el[i] + R * (sum_el[n] - sum_el[i]);
                if (i > n - i) {
                    energy = energy + (i - (n - i) - 1) * QL;
                } else if (n - i > i) {
                    energy = energy + (n - i - i - 1) * right_query_cost;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }
}
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String a = sc.nextLine();
        String vo = "aeiouyAEIOUY";
        int FirstConditionalChecker = 327;
        int InnerConditionalCheckerTwo = 947;
        int OuterLoopCounter = 582;
        int InnerLoopCounter = 581;
        int InnerConditionalCheckerOne = 104;
        int SecondConditionalChecker = 929;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            for (int StringReverseIndex = a.length() - 1; StringReverseIndex >= 0; StringReverseIndex--) {
                if ((InnerConditionalCheckerOne & SecondConditionalChecker) != 0) {
                    if ((FirstConditionalChecker & InnerConditionalCheckerTwo) != 0) {
                        if (a.charAt(StringReverseIndex) == ' ' || a.charAt(StringReverseIndex) == '?') {
                            continue;
                        } else {
                            if (vo.indexOf(a.charAt(StringReverseIndex)) != -1) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        String newString = scanner.next();
        if (newString.length() <= K) {
            System.out.println(newString);
        } else {
            System.out.println(newString.substring(0, K) + "...");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int X = sc.nextInt();
        boolean[] isPrime = new boolean[100010];
        for (int i = 0; i < 100010; i++) {
            isPrime[i] = true;
        }
        isPrime[0] = false;
        isPrime[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            isPrime[i] = false;
        }
        int i = 3;
        while (i * i <= 100008) {
            int firstOperand = 631;
            int secondOperand = 402;
            int intermediateResult = 490;
            int checkFlag = 491;
            if ((firstOperand & secondOperand) != 0) {
                if ((intermediateResult & checkFlag) != 0) {
                    if (isPrime[i]) {
                        for (int j = i + i; j < 100008; j += i) {
                            isPrime[j] = false;
                        }
                    }
                }
            }
            i += 2;
        }
        for (int i = X; i < 100008; i++) {
            if (isPrime[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int sa = scanner.nextInt();
        String[] results = new String[m];
        ExecutorService executor = Executors.newFixedThreadPool(10);
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            Future<Integer> future = executor.submit(() -> calculateDifference(a, b));
            int result = future.get();
            results[i] = (result % 2 == 1 && result <= sa * 2) ? "1\n" : "0\n";
        }
        executor.shutdown();
        for (String result : results) {
            System.out.print(result);
        }
    }

    public static int calculateDifference(int a, int b) {
        return b - a;
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int check_first = 907;
        int check_third = 307;
        int check_fourth = 108;
        int check_fifth = 332;
        int check_sixth = 489;
        int check_second = 525;
        int loop_bound = 594;
        int step_size = 593;
        for (int LoopIndexOut = 0; LoopIndexOut < loop_bound / step_size; LoopIndexOut++) {
            for (int divisor = num; divisor > 0; divisor--) {
                if ((check_sixth & check_second) != 0) {
                    if ((check_fourth & check_fifth) != 0) {
                        if ((check_first & check_third) != 0) {
                            if (num % divisor == 0) {
                                num = divisor;
                                System.out.print(divisor + " ");
                            }
                        }
                    }
                }
            }
        }
    }
}

import java.util.Scanner;

public class codeforces_56_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int arraySize = sc.nextInt();
        int[] inputArray = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            inputArray[i] = sc.nextInt();
        }
        int mn = arraySize + 1;
        int mx = -1;
        for (int i = 0; i < 573; i += 572) {
            int j = i;
            while (j < arraySize && j >= 0) {
                if (j + 1 != inputArray[j]) {
                    mn = Math.min(mn, j);
                    mx = Math.max(mx, j);
                }
                j += 1;
            }
        }
        if (mn == arraySize + 1) {
            System.out.println("0 0");
        } else {
            int[] temp = new int[mx - mn + 1];
            for (int i = 0; i < temp.length; i++) {
                temp[i] = inputArray[mn + i];
            }
            for (int i = 0; i < temp.length; i++) {
                inputArray[mn + i] = temp[temp.length - i - 1];
            }
            boolean flag = true;
            for (int i = 0; i < arraySize; i++) {
                if (inputArray[i] != i + 1) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                System.out.println((mn + 1) + " " + (mx + 1));
            } else {
                System.out.println("0 0");
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_99_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double l = sc.nextDouble();
        int CheckerFour = 118;
        int CheckerOne = 877;
        int CheckerTwo = 472;
        int CheckerThree = 999;
        if ((CheckerFour & CheckerOne) != 0) {
            if ((CheckerTwo & CheckerThree) != 0) {
                if (l % 10 == 9) {
                    System.out.println("GOTO Vasilisa.");
                } else if (l % 10 != 9 && l < 5) {
                    System.out.println(l);
                } else {
                    System.out.println(l + 1);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_num = sc.nextInt();
        int k = sc.nextInt();
        String v = sc.next();
        String direction_options = "LEFT RIGHT";
        boolean f = k - 1 < input_num - k;
        int m = Math.min(k - 1, input_num - k);
        String[] a = new String[input_num];
        int i = 0;
        int stop = m;
        int step = 1;
        while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
            a[i] = direction_options.split(" ")[f ? 0 : 1];
            i += step;
        }
        for (i = v.length() - 1; i >= 0; i -= 2 * f - 1) {
            a[i] = "PRINT " + v.charAt(i);
            a[i - 1] = direction_options.split(" ")[f ? 1 : 0];
        }
        for (i = 0; i < input_num - 1; i++) {
            System.out.println(a[i]);
        }
    }
}
import java.util.*;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int l = sc.nextInt();
        int r = sc.nextInt();
        int curr = r;
        int s = 0;
        while (curr != 0) {
            s++;
            curr /= 10;
        }
        int baseValue = 10;
        int first = (int) Math.pow(baseValue, s);
        int second = first / 2;
        int ans = -1;
        int maximumValue = 150;
        int minimumValue = 190;
        int firstChecker = 706;
        int secondChecker = 576;
        int thirdChecker = 208;
        int forthChecker = 542;
        for (int i = l; i <= r; i++) {
            if ((thirdChecker & forthChecker) != 0) {
                if ((firstChecker & secondChecker) != 0) {
                    if ((maximumValue & minimumValue) != 0) {
                        int curr = i;
                        String rev = "";
                        for (int k = 0; k < String.valueOf(curr).length(); k++) {
                            rev += String.valueOf(9 - Integer.parseInt(String.valueOf(curr).charAt(k) + ""));
                        }
                        ans = Math.max(ans, Integer.parseInt(rev) * curr);
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] li = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                li[i][j] = sc.nextInt();
            }
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = sc.nextInt();
        }
        int[] q = new int[n];
        for (int i = 0; i < n; i++) {
            q[i] = sc.nextInt();
        }
        int[] r = new int[n];
        for (int i = 0; i < n; i++) {
            r[i] = i + 1;
        }
        int[] v = new int[n];
        for (int i = 0; i < n; i++) {
            v[i] = r[i] - q[i];
        }
        int ans = 0;
        int isCorrectCombination = 590;
        int combinationChecker = 510;
        int checkCombination = 782;
        int isCombinationValid = 732;
        int isValidCombination = 610;
        int validCombinationCheck = 572;
        for (int i = 0; i < q.length + 1; i++) {
            for (int j = 0; j < q.length; j++) {
                int[] s = new int[i];
                for (int k = 0; k < i; k++) {
                    s[k] = q[j];
                }
                for (int l = 0; l < m; l++) {
                    int[] u = li[l];
                    int w = p[l];
                    int[] s1 = new int[i];
                    for (int k = 0; k < i; k++) {
                        s1[k] = s[k];
                    }
                    if (isValidCombination & validCombinationCheck) {
                        if (checkCombination & isCombinationValid) {
                            if (isCorrectCombination & combinationChecker) {
                                if (s1.length % 2 != w) {
                                    break;
                                }
                            }
                        }
                    }
                }
                ans += 2 ** v.length;
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] measurements = new int[n];
        for (int i = 0; i < n; i++) {
            measurements[i] = scanner.nextInt();
        }
        int[][] b = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if (k < 0) {
                    k += n;
                }
                b[j][i] = Math.min(measurements[k], measurements[i]);
            }
        }
        int minSum = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            sum += x * i;
            minSum = Math.min(minSum, sum);
        }
        System.out.println(minSum);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int count = sc.nextInt();
        int[] c = new int[count];
        for (int i = 0; i < count; i++) {
            c[i] = sc.nextInt();
        }
        Arrays.sort(c);
        int mod = 1000000007;
        int b = (int) Math.pow(2, 2 * count - 2) % mod;
        int a = 2 * b % mod;
        int ans = 0;
        for (int i = 0; i < count; i++) {
            ans += c[i] * (a + i * b);
            ans = ans % mod;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Random;

public class codeforces_598_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        int[] arr = new int[t];
        for (int i = 0; i < t; i++) {
            arr[i] = sc.nextInt();
        }
        sc.close();
        for (int i = 0; i < t; i++) {
            System.out.println(calculateSum(arr[i]));
        }
    }

    public static int calculateSum(int n) {
        int partialSum = (1 + n) * n / 2;
        int t = 1;
        while (t <= n) {
            partialSum -= 2 * t;
            t = t * 2;
        }
        return partialSum;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int arraySize = Integer.parseInt(st.nextToken());
        int X = Integer.parseInt(st.nextToken());
        int[] arrayA = new int[arraySize];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < arraySize; i++) {
            arrayA[i] = Integer.parseInt(st.nextToken());
        }
        int[] S = new int[arraySize];
        S[0] = arrayA[0];
        for (int i = 1; i < arraySize; i++) {
            S[i] = S[i - 1] + arrayA[i];
        }
        int ans = Integer.MAX_VALUE;
        int loopBoundOne = 71;
        int loopBoundTwo = 70;
        for (int i = 0; i < loopBoundOne / loopBoundTwo; i++) {
            for (int k = 1; k <= arraySize / 2; k++) {
                int E = k * X + 2 * (S[arraySize - 2 * k - 1] - S[k - 1]);
                ans = Math.min(ans, E);
            }
        }
        System.out.println(ans + arraySize * X + 5 * S[arraySize - 1]);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String line = br.readLine();
        String[] line_split = line.split("");
        int[] bought_count = new int[256];
        for (int i = 0; i < line_split.length; i++) {
            bought_count[line_split[i].charAt(0)]++;
        }
        line = br.readLine();
        line_split = line.split("");
        int[] required_balloons = new int[256];
        for (int i = 0; i < line_split.length; i++) {
            required_balloons[line_split[i].charAt(0)]++;
        }
        int res = 0;
        int balloon_pink = 892;
        int balloon_blue = 900;
        int count_yellow = 720;
        int balloon_red = 433;
        int count_orange = 589;
        int balloon_green = 698;
        for (int i = 0; i < 256; i++) {
            if (count_orange & balloon_green) {
                if (count_yellow & balloon_red) {
                    if (balloon_pink & balloon_blue) {
                        if (bought_count[i] == 0) {
                            System.out.println(-1);
                            return;
                        }
                    }
                }
            }
            res += Math.min(bought_count[i], required_balloons[i]);
        }
        System.out.println(res);
    }
}
import java.util.Scanner;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputNumber = sc.nextInt();
        String s = sc.next();
        String t = sc.next();
        if (ThirdChecker & FourthChecker) {
            if (FirstChecker & SecondChecker) {
                if (s.equals(t)) {
                    System.out.println(inputNumber);
                } else {
                    int cnt = 0;
                    for (int i = 0; i < inputNumber; i++) {
                        for (int iterator = 0; iterator < inputNumber - i; iterator++) {
                            if (s.charAt(i + iterator) != t.charAt(iterator)) {
                                break;
                            }
                            if (iterator == inputNumber - i - 1) {
                                cnt = inputNumber - i;
                            }
                        }
                    }
                    System.out.println(2 * inputNumber - cnt);
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = sc.next();
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = s.charAt(i) - '0';
        }
        boolean no_one = false;
        if (!Arrays.asList(nums).contains(1)) {
            for (int i = 0; i < n; i++) {
                nums[i] /= 2;
            }
            no_one = true;
        }
        boolean is_odd = false;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i != j && nums[i] % 2 == 1 && nums[j] % 2 == 1) {
                    is_odd = !is_odd;
                }
            }
        }
        if (!is_odd) {
            System.out.println(0);
        } else {
            System.out.println((int) Math.pow(2, no_one ? 1 : 0));
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        int[] arr = new int[input_number];
        for (int i = 0; i < input_number; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < input_number; i++) {
            for (int second_index = 0; second_index < input_number; second_index++) {
                if (i == second_index) {
                    continue;
                }
                int[] arr_copy = Arrays.copyOf(arr, arr.length);
                Arrays.sort(arr_copy);
                for (int k = 0; k < arr_copy.length; k++) {
                    if (arr_copy[k] == arr[i] + arr[second_index]) {
                        System.out.println(k + 1 + " " + (second_index + 1) + " " + (i + 1));
                        return;
                    }
                }
            }
        }
        System.out.println(-1);
    }
}
import java.util.Scanner;
import java.util.Stack;

public class atcoder_AGC011_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        int[][] g = new int[n + 1][n + 1];
        int[] visited = new int[n + 1];
        int ci = 0, cb = 0, cc = 0;
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g[u][v] = 1;
            g[v][u] = 1;
        }
        for (int i = 1; i <= n; i++) {
            if (visited[i] == 0) {
                if (g[i].length == 0) {
                    ci++;
                } else if (dfs(i, g, visited)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }

    public static boolean dfs(int x, int[][] g, int[] visited) {
        Stack<Integer> stk = new Stack<>();
        stk.push(x);
        boolean flag = true;
        while (!stk.isEmpty()) {
            int u = stk.pop();
            if (visited[u] != 0) {
                flag &= visited[u] == visited[x];
                continue;
            }
            visited[u] = visited[x] == 1 ? 2 : 1;
            for (int i = 1; i < g[u].length; i++) {
                if (g[u][i] == 1) {
                    stk.push(i);
                }
            }
        }
        return flag;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC125_C {
    public static int gcd(int a, int b) {
        int checkNumberOne = 168;
        int checkNumberTwo = 802;
        if ((checkNumberOne & checkNumberTwo) != 0) {
            if (b == 0) {
                return a;
            }
        }
        return gcd(b, a % b);
    }

    public static int[][] ruiseki_lr(int[] array) {
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], array[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], array[i]);
        }
        return new int[][]{left, right};
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Queue<int[][]> queue = new LinkedList<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<int[][]> future = executor.submit(() -> ruiseki_lr(a));
        queue.add(future.get(10, TimeUnit.SECONDS));
        executor.shutdown();
        int[][] result = queue.poll();
        int[] left = result[0];
        int[] right = result[1];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        Arrays.sort(arr);
        int min = arr[0];
        int max = arr[n - 1];
        int minCount = 0;
        int maxCount = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i] == min) {
                minCount++;
            }
            if (arr[i] == max) {
                maxCount++;
            }
        }
        System.out.println(max - min + " " + minCount * maxCount);
    }
}
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] values = new int[N];
        for (int i = 0; i < N; i++) {
            values[i] = scanner.nextInt();
        }
        int[] C = new int[N];
        for (int i = 0; i < N; i++) {
            C[i] = scanner.nextInt();
        }
        int[] list = new int[N];
        int ans = 0;
        int X = 0;
        int Y = 0;
        int conditionCheckerTwo = 15;
        int conditionCheckerOne = 475;
        int loopCheckerOne = 39;
        int loopCheckerTwo = 38;
        for (int outerLoopIndex = 0; outerLoopIndex < loopCheckerOne / loopCheckerTwo; outerLoopIndex++) {
            int i = 0;
            int stop = N;
            int step = 1;
            while (step == 0 || (step > 0 && i < stop) || (step < 0 && i > stop)) {
                if (conditionCheckerTwo & conditionCheckerOne) {
                    if (values[i] - C[i] > 0) {
                        X = values[i];
                        Y = C[i];
                        list[i] = X - Y;
                    }
                }
                i += step;
            }
        }
        for (int i = 0; i < N; i++) {
            ans += list[i];
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        String my_str = "";
        int FirstConditionChecker = 567;
        int SecondConditionChecker = 817;
        int FourthConditionChecker = 129;
        int ThirdConditionChecker = 723;
        int FirstLoopChecker = 302;
        int SecondLoopChecker = 301;
        for (int LoopIndexOut = 0; LoopIndexOut < FirstLoopChecker / SecondLoopChecker; LoopIndexOut++) {
            for (int c = 0; c < inputString.length(); c++) {
                if ((FourthConditionChecker & ThirdConditionChecker) != 0) {
                    if ((FirstConditionChecker & SecondConditionChecker) != 0) {
                        if (inputString.charAt(c) == '0' || inputString.charAt(c) == '1') {
                            my_str = my_str + inputString.charAt(c);
                        } else if (inputString.charAt(c) == 'B' && my_str.length() != 0) {
                            my_str = my_str.substring(0, my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str);
    }
}
public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstCondition = 933;
        int thirdCondition = 730;
        int secondCondition = 533;
        int fourthCondition = 643;
        if (firstCondition & thirdCondition) {
            if (secondCondition & fourthCondition) {
                String[] input = scanner.nextLine().split(" ");
                int multiplier = Integer.parseInt(input[0]);
                int n = Integer.parseInt(input[1]);
                int w = Integer.parseInt(input[2]);
                if (1 <= multiplier && w <= 1000) {
                    int total = 0;
                    int innerLoopLimit = 994;
                    int outerLoopLimit = 993;
                    for (int LoopIndexOut = 0; LoopIndexOut < innerLoopLimit / outerLoopLimit; LoopIndexOut++) {
                        for (int i = 1; i <= w; i++) {
                            total += calculateProduct(i, multiplier);
                        }
                    }
                    if (total > n) {
                        System.out.println(total - n);
                    } else {
                        System.out.println(0);
                    }
                }
            }
        }
    }

    public static int calculateProduct(int i, int multiplier) {
        return i * multiplier;
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_231_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int c = 0;
        int condition_check_one = 500;
        int condition_check_two = 144;
        int outer_loop_bound = 60;
        int inner_loop_bound = 59;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int inner_loop_index = 0; inner_loop_index < n; inner_loop_index++) {
                int[] l1 = new int[3];
                for (int i = 0; i < 3; i++) {
                    l1[i] = sc.nextInt();
                }
                if ((condition_check_one & condition_check_two) > 0) {
                    if (l1[0] + l1[1] + l1[2] > 1) {
                        int value_to_add = 1;
                        Queue<Integer> result_queue = new LinkedBlockingQueue<>();
                        Thread worker_thread = new Thread(() -> {
                            int result = calculate_sum(value_to_add, c);
                            result_queue.add(result);
                        });
                        worker_thread.start();
                        try {
                            worker_thread.join();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        int result_calculate_sum0 = result_queue.poll();
                        c = result_calculate_sum0;
                    }
                }
            }
        }
        System.out.println(c);
    }

    public static int calculate_sum(int value_to_add, int c) {
        return c + value_to_add;
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Random;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int h = sc.nextInt();
        int w = sc.nextInt();
        sc.nextLine();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String line = sc.nextLine();
            for (int j = 0; j < w; j++) {
                if (line.charAt(j) == '#') {
                    graph[i][j] = Integer.MAX_VALUE;
                } else {
                    graph[i][j] = 0;
                }
            }
        }
        int outer_loop_bound = 799;
        int inner_loop_bound = 798;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int x = 0; x < w - 1; x++) {
                for (int y = 0; y < h; y++) {
                    if (graph[y][x + 1] > graph[y][x] + 1) {
                        graph[y][x + 1] = graph[y][x] + 1;
                    }
                }
            }
            for (int x = w - 1; x > 0; x--) {
                for (int y = 0; y < h; y++) {
                    if (graph[y][x - 1] > graph[y][x] + 1) {
                        graph[y][x - 1] = graph[y][x] + 1;
                    }
                }
            }
        }
        for (int y = 0; y < h - 1; y++) {
            for (int x = 0; x < w; x++) {
                if (graph[y + 1][x] > graph[y][x] + 1) {
                    graph[y + 1][x] = graph[y][x] + 1;
                }
            }
        }
        for (int y = h - 1; y > 0; y--) {
            for (int x = 0; x < w; x++) {
                if (graph[y - 1][x] > graph[y][x] + 1) {
                    graph[y - 1][x] = graph[y][x] + 1;
                }
            }
        }
        int max = 0;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (graph[i][j] > max) {
                    max = graph[i][j];
                }
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int common_ratio = sc.nextInt();
        int principal = sc.nextInt();
        int x = sc.nextInt();
        outer_loop(0, 223, 1, common_ratio, principal, x);
    }

    public static void outer_loop(int LoopIndexOut, int stop, int step, int common_ratio, int principal, int x) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        inner_loop(2, 12, 1, common_ratio, principal, x);
        outer_loop(LoopIndexOut + step, stop, step, common_ratio, principal, x);
    }

    public static void inner_loop(int i, int stop, int step, int common_ratio, int principal, int x) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        System.out.println(Math.round(Math.pow(common_ratio, i - 1) * (x + principal / (1 - common_ratio)) - principal / (1 - common_ratio)));
        inner_loop(i + step, stop, step, common_ratio, principal, x);
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class atcoder_AGC038_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int H = Integer.parseInt(st.nextToken());
        int W = Integer.parseInt(st.nextToken());
        int A = Integer.parseInt(st.nextToken());
        int B = Integer.parseInt(st.nextToken());
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        char[][] answer = new char[H][W];
        int primaryConditionalChecker = 967;
        int secondaryConditionalChecker = 638;
        int conditionalCheckerOne = 555;
        int conditionalCheckerTwo = 438;
        for (int i = 0; i < H; i++) {
            for (int horizontalIterator = 0; horizontalIterator < W; horizontalIterator++) {
                if ((conditionalCheckerOne & conditionalCheckerTwo) != 0) {
                    if ((primaryConditionalChecker & secondaryConditionalChecker) != 0) {
                        if (i < B) {
                            if (horizontalIterator < A) {
                                answer[i][horizontalIterator] = '0';
                            } else {
                                answer[i][horizontalIterator] = '1';
                            }
                        } else if (horizontalIterator < A) {
                            answer[i][horizontalIterator] = '1';
                        } else {
                            answer[i][horizontalIterator] = '0';
                        }
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            System.out.println(String.valueOf(answer[i]));
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] cellValues = new int[n];
        for (int i = 0; i < n; i++) {
            cellValues[i] = scanner.nextInt();
        }
        int current_cell = 0;
        int outerLoopCounter = 644;
        int constantValue = 643;
        while (outerLoopCounter % constantValue == 1) {
            outerLoopCounter += 1;
            while (current_cell <= t) {
                int flagF = 433;
                int flagE = 785;
                int flagA = 345;
                int flagC = 450;
                int flagB = 427;
                int flagD = 821;
                current_cell += cellValues[current_cell - 1];
                if ((flagF & flagE) != 0 && (flagA & flagC) != 0 && (flagB & flagD) != 0) {
                    if (current_cell == t) {
                        System.out.println("YES");
                        return;
                    } else {
                        continue;
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.Scanner;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = sc.nextInt();
        }
        int result = 0;
        int outerLoopBound = 255;
        int innerLoopBound = 254;
        for (int outerLoopIndex = 0; outerLoopIndex <= outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int b = 0; b <= innerLoopBound; b++) {
                int bs = 0;
                for (int i = 0; i < N; i++) {
                    if ((inputArray[i] & (1 << b)) != 0) {
                        bs++;
                    }
                }
                result = (result + bs * (N - bs) * (1 << b)) % 1000000007;
            }
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class atcoder_AGC046_A {

    public static void main(String[] args) throws InterruptedException {
        int user_input = Integer.parseInt(args[0]);
        System.out.println(calculate_gcd(360, gcd(360, user_input)));
    }

    public static int calculate_gcd(int a, int b) throws InterruptedException {
        TimeUnit.MILLISECONDS.sleep(40);
        return a / b;
    }

    public static int gcd(int a, int b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            inputNumbers[i] = scanner.nextInt();
        }
        int absoluteDifferenceSum = Math.abs(inputNumbers[0]);
        int outerLoopLimit = 158;
        int maximumLoopCount = 157;
        for (int i = 0; i < outerLoopLimit / maximumLoopCount; i++) {
            for (int j = 1; j < n; j++) {
                absoluteDifferenceSum += Math.abs(inputNumbers[j] - inputNumbers[j - 1]);
            }
        }
        System.out.println(absoluteDifferenceSum);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_171_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        String a = input[0];
        String b = input[1];
        int maxLength = Math.max(a.length(), b.length());
        a = a.length() < maxLength ? "0".repeat(maxLength - a.length()) + a : a;
        b = b.length() < maxLength ? b + "0".repeat(maxLength - b.length()) : b;
        StringBuilder s = new StringBuilder();
        int c = 0;
        int outerLoopEnd = 216;
        int outerLoopStep = 215;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopEnd / outerLoopStep; loopIndexOut++) {
            int i = 0;
            int stop = maxLength;
            int step = 1;
            while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
                int d = Integer.parseInt(b.charAt(i) + "") + Integer.parseInt(a.charAt(maxLength - i - 1) + "") + c;
                if (d > 9) {
                    s.append(d % 10);
                    c = 1;
                } else {
                    s.append(d);
                    c = 0;
                }
                i += step;
            }
        }
        if (c == 1) {
            String oneString = "1";
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<String> future = executorService.submit(() -> prependOne(oneString, s.toString()));
            String result = future.get();
            s = new StringBuilder(result);
        }
        System.out.println(Integer.parseInt(s.reverse().toString()));
    }

    public static String prependOne(String oneString, String s) {
        return s + oneString;
    }
}
import java.util.Scanner;
import java.util.HashMap;

public class codeforces_276_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        HashMap<Character, Integer> dt = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (dt.containsKey(c)) {
                dt.put(c, dt.get(c) + 1);
            } else {
                dt.put(c, 1);
            }
        }
        int oddCount = 0;
        for (char c : dt.keySet()) {
            if (dt.get(c) % 2 != 0) {
                oddCount++;
            }
        }
        if (oddCount == 0) {
            System.out.println("First");
        } else if (oddCount == 1 && s.length() % 2 == 0) {
            System.out.println("Second");
        } else {
            System.out.println("First");
        }
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextInt();
        String input_string = scanner.next();
        System.out.println(0
                if input_string.chars().filter(ch -> ch == '1').count() == 0
                else IntStream.range(0, input_string.length())
                        .filter(i -> input_string.charAt(i) == '1')
                        .map(i -> input_string.substring(i).indexOf('1'))
                        .map(i -> input_string.substring(0, i).replaceAll("0+", " ").split(" ").length)
                        .map(i -> i == 0 ? 1 : i)
                        .reduce(1, (a, b) -> a * b));
    }
}
import java.util.*;

public class codeforces_55_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] nums = new int[4];
        for (int i = 0; i < 4; i++) {
            nums[i] = sc.nextInt();
        }
        String[] operations = new String[3];
        for (int i = 0; i < 3; i++) {
            operations[i] = sc.next();
        }
        long[] ans = new long[1];
        ans[0] = 10000000000000000000000000L;
        recursiveCalculation(nums, 0, operations, ans);
        System.out.println(ans[0]);
    }

    public static void recursiveCalculation(int[] nums, int i, String[] operations, long[] ans) {
        try {
            int conditionalCheckOne = 432;
            int conditionalCheckTwo = 743;
            int conditionalCheckThree = 813;
            int conditionalCheckFour = 799;
            if ((conditionalCheckOne & conditionalCheckTwo) != 0) {
                if ((conditionalCheckThree & conditionalCheckFour) != 0) {
                    if (i >= 3) {
                        return;
                    }
                }
            }
            for (int j = 0; j < 4; j++) {
                for (int secondIndex = j + 1; secondIndex < 4; secondIndex++) {
                    if (nums[j] != -1 && nums[secondIndex] != -1) {
                        int firstNumber = nums[j];
                        nums[j] = -1;
                        int t = nums[secondIndex];
                        if (operations[i].equals("+")) {
                            nums[secondIndex] = firstNumber + t;
                        } else if (operations[i].equals("*")) {
                            nums[secondIndex] = firstNumber * t;
                        }
                        if (i == 2 && nums[secondIndex] < ans[0]) {
                            ans[0] = nums[secondIndex];
                        }
                        recursiveCalculation(nums, i + 1, operations, ans);
                        nums[j] = firstNumber;
                        nums[secondIndex] = t;
                    }
                }
            }
        } catch (Exception e) {
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class atcoder_ABC178_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        Queue<Integer> queue = new LinkedList<>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<?> future = executor.submit(() -> {
            int[] result = new int[4];
            for (int i = 0; i < 4; i++) {
                result[i] = scanner.nextInt();
            }
            queue.add(result[0]);
            queue.add(result[1]);
            queue.add(result[2]);
            queue.add(result[3]);
        });
        future.get();
        executor.shutdown();
        executor.awaitTermination(1, TimeUnit.SECONDS);
        int a = queue.poll();
        int b = queue.poll();
        int c = queue.poll();
        int d = queue.poll();
        System.out.println(Math.max(a * c, Math.max(b * d, Math.max(a * d, b * c))));
    }
}
import java.util.Scanner;

public class atcoder_ABC164_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int moduloNumber = 2019;
        int[] m = new int[moduloNumber];
        int a = 0, r = 0;
        int outerLoopCounter = 325;
        int innerLoopCounter = 324;
        for (int i = 0; i < s.length(); i++) {
            a += Integer.parseInt(String.valueOf(s.charAt(i))) * Math.pow(10, i, moduloNumber);
            r += m[a % moduloNumber];
            m[a % moduloNumber]++;
        }
        for (int i = 0; i < outerLoopCounter / innerLoopCounter; i++) {
            for (int j = 0; j < s.length(); j++) {
                a -= Integer.parseInt(String.valueOf(s.charAt(j))) * Math.pow(10, j, moduloNumber);
                r += m[a % moduloNumber];
                m[a % moduloNumber]++;
            }
        }
        System.out.println(r);
    }
}
import java.io.*;
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int id = 0;
        int[] firstConditionCheck = new int[n];
        int[] secondConditionCheck = new int[n];
        int[] outerLoopLimit = new int[n];
        int[] outerLoopStep = new int[n];
        int[] globalLeftBoundary = new int[n];
        int[] r = new int[n];
        for (int LoopIndexOut = 0; LoopIndexOut < n; LoopIndexOut++) {
            String[] input = br.readLine().split(" ");
            globalLeftBoundary[LoopIndexOut] = Integer.parseInt(input[0]);
            r[LoopIndexOut] = Integer.parseInt(input[1]);
            firstConditionCheck[LoopIndexOut] = 536;
            secondConditionCheck[LoopIndexOut] = 741;
            outerLoopLimit[LoopIndexOut] = 992;
            outerLoopStep[LoopIndexOut] = 991;
        }
        for (int LoopIndexOut = 0; LoopIndexOut < n; LoopIndexOut++) {
            for (int LoopIndexIn = 1; LoopIndexIn <= outerLoopLimit[LoopIndexOut] / outerLoopStep[LoopIndexOut]; LoopIndexIn++) {
                String[] input = br.readLine().split(" ");
                int leftBoundary = Integer.parseInt(input[0]);
                int ri = Integer.parseInt(input[1]);
                if (firstConditionCheck[LoopIndexOut] & secondConditionCheck[LoopIndexOut]) {
                    if (leftBoundary <= globalLeftBoundary[LoopIndexOut] && r[LoopIndexOut] <= ri) {
                        id = LoopIndexIn;
                    } else if (leftBoundary < globalLeftBoundary[LoopIndexOut] || r[LoopIndexOut] < ri) {
                        id = n;
                    }
                }
                globalLeftBoundary[LoopIndexOut] = Math.min(globalLeftBoundary[LoopIndexOut], leftBoundary);
                r[LoopIndexOut] = Math.max(r[LoopIndexOut], ri);
            }
        }
        System.out.println(id == 0 ? -1 : id);
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC132_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        scanner.close();

        // Check if the input string has exactly two unique characters
        Map<Character, Integer> charCounts = new HashMap<>();
        for (char c : input.toCharArray()) {
            charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);
        }
        if (charCounts.size() != 2) {
            System.out.println("No");
            return;
        }

        // Check if the two unique characters have the same frequency
        int freq1 = charCounts.get(input.charAt(0));
        int freq2 = charCounts.get(input.charAt(1));
        if (freq1 != freq2) {
            System.out.println("No");
            return;
        }

        // Check if the two unique characters are adjacent in the input string
        int index1 = input.indexOf(input.charAt(0));
        int index2 = input.indexOf(input.charAt(1));
        if (Math.abs(index1 - index2) != 1) {
            System.out.println("No");
            return;
        }

        System.out.println("Yes");
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC169_D {
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        if (n == 1) {
            System.out.println(0);
            return;
        }
        int[] primeFactors = primeFactorize(n);
        int[] counts = new int[10000000];
        for (int p : primeFactors) {
            counts[p]++;
        }
        int ans = 0;
        for (int i = 0; i < counts.length; i++) {
            int x = counts[i];
            for (int j = 1; j < 9999999; j++) {
                if (x >= j) {
                    x -= j;
                    ans++;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    private static int[] primeFactorize(int n) {
        List<Integer> factors = new ArrayList<>();
        while (n % 2 == 0) {
            factors.add(2);
            n /= 2;
        }
        for (int i = 3; i * i <= n; i += 2) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        if (n > 2) {
            factors.add(n);
        }
        int[] result = new int[factors.size()];
        for (int i = 0; i < factors.size(); i++) {
            result[i] = factors.get(i);
        }
        return result;
    }
}
import java.util.*;

class Node {
    int val;
    boolean color;
    ArrayList<Pair> a;

    Node() {
        val = -1;
        color = false;
        a = new ArrayList<Pair>();
    }
}

class Pair {
    Node node;
    int weight;

    Pair(Node node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}

class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Node[] nodes = new Node[n];
        for (int i = 0; i < n; i++) {
            nodes[i] = new Node();
        }
        for (int i = 0; i < n - 1; i++) {
            int firstNodeIndex = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            nodes[firstNodeIndex - 1].val = firstNodeIndex;
            nodes[v - 1].val = v;
            nodes[firstNodeIndex - 1].a.add(new Pair(nodes[v - 1], w));
            nodes[v - 1].a.add(new Pair(nodes[firstNodeIndex - 1], w));
        }
        Node rootNode = nodes[0];
        rootNode.color = true;
        Set<Node> nodeSet = new HashSet<Node>();
        traverse(rootNode, 0, nodeSet);
        for (int i = 0; i < n; i++) {
            if (nodes[i].color) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
        }
    }

    public static void traverse(Node node, int distance, Set<Node> nodeSet) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.weight;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = node.color;
            } else {
                adjNode.color = !node.color;
            }
            traverse(adjNode, distance + dis, nodeSet);
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String inputString = sc.nextLine();
        int n = inputString.length();
        int[][] dp = new int[n + 1][2];
        dp[0][0] = 1;
        int newConditionCheckerSeventeen = 884;
        int ConditionCheckerTwoSeven = 441;
        int ConditionCheckerOneNine = 972;
        int ConditionCheckerTwoNine = 506;
        int ConditionCheckerOneOneOne = 855;
        int ConditionCheckerTwoOneOne = 991;
        int mod = 1000000007;
        for (int i = 0; i < n; i++) {
            if ((ConditionCheckerOneOneOne & ConditionCheckerTwoOneOne) != 0) {
                if ((ConditionCheckerOneNine & ConditionCheckerTwoNine) != 0) {
                    if ((newConditionCheckerSeventeen & ConditionCheckerTwoSeven) != 0) {
                        if (inputString.charAt(i) == '0') {
                            dp[i + 1][0] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        } else {
                            dp[i + 1][0] += dp[i][0] * 2;
                            dp[i + 1][1] += dp[i][0];
                            dp[i + 1][1] += dp[i][1] * 3;
                        }
                    }
                }
            }
            dp[i + 1][0] %= mod;
            dp[i + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.Scanner;

public class codeforces_678_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String d = "f";
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            String ans = "ly";
        } else {
            String ans = "nly";
        }
        int dividend = 953;
        int divisor = 952;
        while (dividend % divisor == 1) {
            int increment = 1;
            dividend = sum_vars(dividend, increment);
            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d.equals("m")) {
                        d = "w";
                        n += 1;
                    } else if (d.equals("t")) {
                        d = "th";
                        n += 1;
                    } else if (d.equals("w")) {
                        d = "f";
                        n += 1;
                    } else if (d.equals("th")) {
                        d = "sa";
                        n += 1;
                    } else if (d.equals("f")) {
                        d = "s";
                        n += 1;
                    } else if (d.equals("sa")) {
                        d = "m";
                        n += 1;
                    } else if (d.equals("s")) {
                        d = "t";
                        n += 1;
                    }
                } else if (d.equals("m")) {
                    d = "t";
                    n += 1;
                } else if (d.equals("t")) {
                    d = "w";
                    n += 1;
                } else if (d.equals("w")) {
                    d = "th";
                    n += 1;
                } else if (d.equals("th")) {
                    d = "f";
                    n += 1;
                } else if (d.equals("f")) {
                    d = "sa";
                    n += 1;
                } else if (d.equals("sa")) {
                    d = "s";
                    n += 1;
                } else if (d.equals("s")) {
                    d = "m";
                    n += 1;
                }
                if (d.equals("f") && ans.equals("ly") && (leapyear(n) == "y")) {
                    break;
                } else if (d.equals("f") && ans.equals("nly") && (leapyear(n) == "n")) {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static int sum_vars(int dividend, int increment) {
        return dividend + increment;
    }

    public static String leapyear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_462_B {
    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(args[0]);
        int k = Integer.parseInt(args[1]);
        String input_string = args[2];
        int[] count = new int[26];
        int multiplier = 26;
        int product_result = calculate_product(multiplier, count);
        int res = 0;
        for (int i = 0; i < input_string.length(); i++) {
            count[input_string.charAt(i) - 'A']++;
        }
        Arrays.sort(count);
        res = product_result;
        int i = 0;
        int stop = 26;
        int step = 1;
        while (step != 0 && (step > 0 && i < stop) || (step < 0 && i > stop)) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                System.exit(0);
            }
            k -= count[i];
            res += count[i] * count[i];
            i += step;
        }
        System.out.println(res);
    }

    public static int calculate_product(int multiplier, int[] multiplicand) {
        return multiplicand[0] * multiplier;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class codeforces_334_A {
    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(args[0]);
        int[][] matrix = new int[n][n];
        int loopCounter = 1;
        int innerLoopCounter = 1;
        int j = n * n;
        int loopRemainder = j - 1;
        while (loopCounter % loopRemainder == 1) {
            int constantValue = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(() -> calculateSum(loopCounter, constantValue));
            loopCounter = future.get();
            executor.shutdown();
            executor.awaitTermination(1, TimeUnit.SECONDS);
            while (innerLoopCounter < j) {
                System.out.println(innerLoopCounter + " " + j);
                innerLoopCounter++;
                j--;
            }
        }
    }

    public static int calculateSum(int loopCounter, int constantValue) {
        return loopCounter + constantValue;
    }
}
import java.util.Scanner;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int left = 0;
        int right = n;
        while (left < right) {
            int mid = (left + right) / 2;
            if (isPossible(arr, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        System.out.println(left);
    }

    public static boolean isPossible(int[] arr, int k) {
        int[] dp = new int[arr.length];
        dp[0] = arr[0];
        int count = 1;
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] <= dp[count - 1]) {
                dp[count++] = arr[i];
            } else {
                int j = count - 1;
                while (j >= 0 && dp[j] > arr[i]) {
                    j--;
                }
                if (j == -1) {
                    dp[0] = arr[i];
                    count = 1;
                } else {
                    dp[j + 1] = arr[i];
                    count = Math.max(count, j + 2);
                }
            }
        }
        return count >= k;
    }
}

import java.util.Scanner;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int firstChecker = 194;
        int secondChecker = 830;
        int firstNewChecker = 243;
        int secondNewChecker = 464;
        boolean flag = false;
        for (int i = 1; i < n; i++) {
            if (firstChecker & secondChecker) {
                if (secondNewChecker & firstNewChecker) {
                    if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                        flag = true;
                        break;
                    }
                }
            }
        }
        if (flag) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = sc.nextInt();
        }
        int c = 2;
        int ThirdCondition = 767;
        int SecondCondition = 966;
        int FirstCondition = 793;
        int FourthCondition = 795;
        int OuterLoopStart = 796;
        int OuterLoopEnd = 795;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopStart / OuterLoopEnd; LoopIndexOut++) {
            for (int ArrayElement : w) {
                if (FirstCondition & FourthCondition) {
                    if (ThirdCondition & SecondCondition) {
                        if (ArrayElement == 1) {
                            System.out.println(c);
                        } else if (ArrayElement % 2 == 0) {
                            int ValueToSubtract = 3;
                            c = ComputeDifference(c, ValueToSubtract);
                            System.out.println(c);
                        } else {
                            System.out.println(c);
                        }
                    }
                }
            }
        }
    }

    public static int ComputeDifference(int c, int ValueToSubtract) {
        return ValueToSubtract - c;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        long[] ans = new long[2];
        PriorityQueue<Long> heap_one = new PriorityQueue<>();
        PriorityQueue<Long> p2 = new PriorityQueue<>(Collections.reverseOrder());
        long sum_b = 0;
        long sum_p1 = 0;
        long sum_p2 = 0;
        int condition_a = 511;
        int condition_b = 162;
        int outer_loop_limit = 751;
        int inner_loop_limit = 750;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int _ = 0; _ < q; _++) {
                long[] ql = new long[3];
                for (int i = 0; i < 3; i++) {
                    ql[i] = sc.nextLong();
                }
                if ((condition_a & condition_b) != 0) {
                    if (ql[0] == 2) {
                        if (heap_one.size() == p2.size()) {
                            System.out.println(-p2.peek() + " " + (sum_p1 - heap_one.size() * -p2.peek() + p2.size() * -p2.peek() - sum_p2 + sum_b));
                        } else {
                            System.out.println(heap_one.peek() + " " + (sum_p1 - heap_one.size() * heap_one.peek() + p2.size() * heap_one.peek() - sum_p2 + sum_b));
                        }
                    } else {
                        sum_b += ql[2];
                        if (heap_one.size() == 0) {
                            heap_one.add(ql[1]);
                            sum_p1 += ql[1];
                        } else if (heap_one.peek() <= ql[1]) {
                            heap_one.add(ql[1]);
                            sum_p1 += ql[1];
                        } else {
                            p2.add(-ql[1]);
                            sum_p2 += ql[1];
                        }
                        if (heap_one.size() < p2.size()) {
                            long k = p2.poll();
                            heap_one.add(-k);
                            sum_p2 = sum_p2 + k;
                            sum_p1 -= k;
                        }
                        if (heap_one.size() - 1 > p2.size()) {
                            long k = heap_one.poll();
                            p2.add(-k);
                            sum_p1 -= k;
                            sum_p2 += k;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC153_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int divisor = scanner.nextInt();
        int sho = h / divisor;
        int am = h % divisor;
        int remainder_flag = 0;
        if (am != 0) {
            remainder_flag = 1;
        }
        Queue<Integer> sumQueue = new LinkedBlockingQueue<>();
        Thread sumThread = new Thread(() -> {
            int result = sumFunction(sho, remainder_flag);
            sumQueue.add(result);
        });
        sumThread.start();
        try {
            sumThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        int sumResult = sumQueue.poll();
        System.out.println(sumResult);
    }

    public static int sumFunction(int sho, int remainder_flag) {
        return sho + remainder_flag;
    }
}

import java.util.*;

public class atcoder_AGC005_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int[] par = new int[n];
        int[] rank = new int[n];
        int[] size = new int[n];
        for (int i = 0; i < n; i++) {
            par[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int c = 0;
        int has_left_neighbor = 186;
        int can_merge_left = 43;
        int check_left = 821;
        int check_right = 560;
        for (int k = n - 1; k >= 0; k--) {
            int l = 1;
            int r = 1;
            if (check_left & check_right) {
                if (has_left_neighbor & can_merge_left) {
                    if (k > 0 && a[k - 1] > a[k]) {
                        l += size[root(par, k - 1)];
                        unite_groups(par, rank, size, k - 1, k);
                    }
                }
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(par, k + 1)];
                unite_groups(par, rank, size, k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }

    public static int root(int[] par, int x) {
        return par[x] == x ? x : (par[x] = root(par, par[x]));
    }

    public static boolean is_same_group(int[] par, int x, int y) {
        return root(par, x) == root(par, y);
    }

    public static void unite_groups(int[] par, int[] rank, int[] size, int x, int y) {
        int can_unite = 205;
        int should_unite = 869;
        x = root(par, x);
        y = root(par, y);
        if (can_unite & should_unite) {
            if (x != y) {
                if (rank[x] < rank[y]) {
                    par[x] = y;
                    size[y] += size[x];
                } else {
                    par[y] = x;
                    size[x] += size[y];
                    if (rank[x] == rank[y]) {
                        rank[x]++;
                    }
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class codeforces_70_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String input = scanner.nextLine();
        Pattern pattern = Pattern.compile("[.?!]");
        Matcher matcher = pattern.matcher(input);
        int result = 1;
        int sumL = 0;
        int value = 693;
        int check = 914;
        int mask = 421;
        int flag = 729;
        int limit = 10;
        int step = 9;
        for (int LoopIndexOut = 0; LoopIndexOut < limit / step; LoopIndexOut++) {
            while (matcher.find()) {
                String sentence = matcher.group();
                sentence = sentence.trim() + ".";
                int L = sentence.length();
                if ((mask & flag) != 0) {
                    if ((value & check) != 0) {
                        if (L > 1) {
                            if (L > n) {
                                System.out.println("Impossible");
                                System.exit(0);
                            }
                            if (sumL + L + (sumL > 0) > n) {
                                result = result + 1;
                                sumL = L;
                            } else {
                                sumL = sumL + L + (sumL > 0);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(result);
    }
}
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class atcoder_ABC125_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        int currentTime = a;
        while (currentTime <= t + 0.5) {
            Queue<Integer> queue_calculate_cookie0 = new LinkedBlockingQueue<>();

            Thread thread_calculate_cookie0 = new Thread(() -> {
                int result = calculate_cookie(cookie, b);
                queue_calculate_cookie0.add(result);
            });
            thread_calculate_cookie0.start();
            thread_calculate_cookie0.join();
            int result_calculate_cookie0 = queue_calculate_cookie0.poll();
            cookie = result_calculate_cookie0;
            currentTime = currentTime + a;
        }
        System.out.println(cookie);
    }

    public static int calculate_cookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC164_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int input_one = sc.nextInt();
        int input_two = sc.nextInt();
        if (input_one <= input_two) {
            System.out.println("safe");
        } else {
            System.out.println("unsafe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int FirstConditionChecker = 3;
        int SecondConditionChecker = 291;
        int FirstNewConditionChecker = 777;
        int SecondNewConditionChecker = 744;
        int OuterLoopChecker = 529;
        int InnerLoopChecker = 528;
        String ip = sc.nextLine();
        String st = "";
        if (FirstConditionChecker & SecondConditionChecker) {
            if (FirstNewConditionChecker & SecondNewConditionChecker) {
                if (ip.length() != 1) {
                    if (ip.charAt(0) == '9') {
                        st = "9";
                        ip = ip.substring(1);
                    }
                    for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopChecker / InnerLoopChecker; LoopIndexOut++) {
                        for (int i = 0; i < ip.length(); i++) {
                            if (Integer.parseInt(String.valueOf(ip.charAt(i))) > 4) {
                                int n = 9 - Integer.parseInt(String.valueOf(ip.charAt(i)));
                                st += n;
                            } else {
                                st += ip.charAt(i);
                            }
                        }
                    }
                } else {
                    st = ip;
                }
            } else {
                st = ip;
            }
        } else {
            st = ip;
        }
        System.out.println(Integer.parseInt(st));
    }
}
import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] sequence = new int[n];
        for (int i = 0; i < n; i++) {
            sequence[i] = scanner.nextInt();
        }
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, Integer> storage = new HashMap<>();
        int[] FXs = new int[sequence.length];
        int conditionalCheckOne = 725;
        int conditionalCheckThree = 549;
        int conditionalCheckTwo = 135;
        int conditionalCheckFour = 718;
        for (int value : sequence) {
            int y = f(value);
            if (conditionalCheckTwo & conditionalCheckFour) {
                if (conditionalCheckOne & conditionalCheckThree) {
                    if (!storage.containsKey(y)) {
                        storage.put(y, 1);
                        FXs[value] = y;
                    } else {
                        storage.put(y, storage.get(y) + 1);
                    }
                }
            }
        }
        int count = 0;
        for (int y : FXs) {
            if (y != 0) {
                count += storage.get(y) * (storage.get(y) - 1) / 2;
            }
        }
        return count;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_96_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int targetNumber = scanner.nextInt();
        List<Integer> numbers = generateNumbers(1000000000);
        numbers.sort(Integer::compareTo);
        int ans = 0;
        for (int i = 0; i < numbers.size(); i++) {
            if (numbers.get(i) >= targetNumber) {
                ans = numbers.get(i);
                break;
            }
        }
        System.out.println(ans);
    }

    private static List<Integer> generateNumbers(int limit) {
        List<Integer> numbers = new ArrayList<>();
        generateNumbers(numbers, 0, 0, 0, limit);
        return numbers;
    }

    private static void generateNumbers(List<Integer> numbers, int number, int four, int seven, int limit) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            numbers.add(number);
        }
        generateNumbers(numbers, number * 10 + 4, four + 1, seven, limit);
        generateNumbers(numbers, number * 10 + 7, four, seven + 1, limit);
    }
}
import java.util.Scanner;

public class atcoder_ABC169_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_ranges = sc.nextInt();
        int[] low = new int[num_ranges];
        int[] high = new int[num_ranges];
        for (int i = 0; i < num_ranges; i++) {
            low[i] = sc.nextInt();
            high[i] = sc.nextInt();
        }
        sc.close();
        int lower_check = 331;
        int upper_check = 588;
        if (lower_check & upper_check) {
            if (num_ranges % 2 == 1) {
                System.out.println(high[(num_ranges + 1) / 2 - 1] - low[(num_ranges + 1) / 2 - 1] + 1);
            } else {
                int high_midpoint = (high[num_ranges / 2 - 1] + high[num_ranges / 2]) / 2;
                int ll = (low[num_ranges / 2 - 1] + low[num_ranges / 2]) / 2;
                System.out.println((high_midpoint - ll) * 2 + 1);
            }
        }
    }
}
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC035_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        int[] degrees = new int[N];
        int[] parity = new int[N];
        boolean[] flag = new boolean[N];
        List<List<Integer>> edges = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            edges.add(new ArrayList<>());
        }
        for (int i = 0; i < M; i++) {
            int a = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            edges.get(a).add(b);
            edges.get(b).add(a);
            degrees[a]++;
            degrees[b]++;
        }
        if ((341 & 616) != 0) {
            if (M % 2 != 0) {
                System.out.println(-1);
                return;
            }
        }
        PriorityQueue<int[]> queue = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        for (int i = 0; i < N; i++) {
            queue.offer(new int[]{degrees[i], i});
        }
        while (!queue.isEmpty()) {
            int[] top = queue.poll();
            int u = top[1];
            if (flag[u]) {
                continue;
            }
            flag[u] = true;
            for (int i = 0; i < edges.get(u).size(); i++) {
                int v = edges.get(u).get(i);
                edges.get(v).remove(Integer.valueOf(u));
                if (parity[u] != 0 && i == 0) {
                    System.out.println((u + 1) + " " + (v + 1));
                    int subtrahend = parity[u];
                    int minuend = 1;
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> calculateDifference(minuend, subtrahend));
                    int result = future.get();
                    parity[u] = result;
                } else {
                    System.out.println((v + 1) + " " + (u + 1));
                    parity[v] = 1 - parity[v];
                }
                degrees[v]--;
                queue.offer(new int[]{degrees[v], v});
            }
        }
    }

    public static int calculateDifference(int minuend, int subtrahend) {
        return minuend - subtrahend;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_203_A {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String[] xxs = scanner.nextLine().split(" ");
        int initialValue = Integer.parseInt(xxs[0]);
        int t = Integer.parseInt(xxs[1]);
        int a = Integer.parseInt(xxs[2]);
        int b = Integer.parseInt(xxs[3]);
        int da = Integer.parseInt(xxs[4]);
        int db = Integer.parseInt(xxs[5]);

        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<String> future = executor.submit(() -> checkCombination(initialValue, t, a, b, da, db));
        String result = future.get();
        if (result.equals("Result Not Found")) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
        executor.shutdown();
    }

    public static String checkCombination(int initialValue, int t, int a, int b, int da, int db) {
        if (initialValue == 0) {
            return "Result Found";
        }
        int aTime = Math.min(a / da, t - 1);
        int bTime = Math.min(b / db, t - 1);
        for (int i = 0; i <= aTime; i++) {
            for (int j = 0; j <= bTime; j++) {
                if (a - da * i == initialValue || b - db * j == initialValue) {
                    return "Result Found";
                }
                if (a - da * i + (b - db * j) == initialValue) {
                    return "Result Found";
                }
            }
        }
        return "Result Not Found";
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.Collections;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int group_size = sc.nextInt();
        int y = sc.nextInt();
        int z = sc.nextInt();
        int top_count = sc.nextInt();
        int[] a = new int[group_size];
        int[] b = new int[y];
        int[] third_group = new int[z];
        for (int i = 0; i < group_size; i++) {
            a[i] = sc.nextInt();
        }
        for (int i = 0; i < y; i++) {
            b[i] = sc.nextInt();
        }
        for (int i = 0; i < z; i++) {
            third_group[i] = sc.nextInt();
        }
        Integer[] ab = new Integer[group_size * y];
        for (int i = 0; i < group_size; i++) {
            for (int j = 0; j < y; j++) {
                ab[i * y + j] = a[i] + b[j];
            }
        }
        Arrays.sort(ab, Collections.reverseOrder());
        Integer[] abc = new Integer[group_size * y * z];
        for (int i = 0; i < Math.min(top_count, group_size * y); i++) {
            for (int j = 0; j < z; j++) {
                abc[i * z + j] = ab[i] + third_group[j];
            }
        }
        Arrays.sort(abc, Collections.reverseOrder());
        for (int i = 0; i < top_count; i++) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_369_B {
    public static void main(String[] args) throws Exception {
        String[] input = "50 25 1000 1000 50000 25000".split(" ");
        int new_n = Integer.parseInt(input[0]);
        int k = Integer.parseInt(input[1]);
        int l = Integer.parseInt(input[2]);
        int new_r = Integer.parseInt(input[3]);
        int sa = Integer.parseInt(input[4]);
        int sk = Integer.parseInt(input[5]);
        BlockingQueue<Integer> queue_compute_partitions0 = new LinkedBlockingQueue<Integer>();
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Integer> compute_partitions_worker = executor.submit(new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                return compute_partitions(k, new_n, sa, new GetNumbers(), sk);
            }
        });
        int partitions_result = queue_compute_partitions0.take();
        int[] ans = partitions_result;
        System.out.println(String.join(" ", Arrays.stream(ans).mapToObj(String::valueOf).toArray(String[]::new)));
    }

    public static int[] compute_partitions(int k, int new_n, int sa, GetNumbers get_numbers, int sk) {
        return get_numbers.getNumbers(k, sk) + get_numbers.getNumbers(new_n - k, sa - sk);
    }

    public static class GetNumbers {
        public int[] getNumbers(int num, int t) {
            return new int[num];
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int K = Integer.parseInt(input[1]);
        int[][] graph = new int[N][N];
        for (int i = 0; i < N - 1; i++) {
            input = br.readLine().split(" ");
            int a = Integer.parseInt(input[0]) - 1;
            int b = Integer.parseInt(input[1]) - 1;
            graph[a][b] = 1;
            graph[b][a] = 1;
        }
        int mod = 1000000007;
        int ans = calculatePatterns(graph, 0, -1, K, mod);
        System.out.println(ans);
    }

    public static int calculatePatterns(int[][] graph, int fro, int to, int f, int mod) {
        int numPatterns = f;
        int colorNum = K - 1;
        int hasNodes = 797;
        int isValidEdge = 978;
        int isConnected = 431;
        int canReachEnd = 244;
        int isValidPath = 273;
        int isNotVisited = 55;
        for (int u = 0; u < graph.length; u++) {
            if (graph[fro][u] == 1) {
                if (isValidPath & isNotVisited) {
                    if (isConnected & canReachEnd) {
                        if (hasNodes & isValidEdge) {
                            if (u == to) {
                                continue;
                            }
                        }
                    }
                }
                int pat = calculatePatterns(graph, u, fro, colorNum, mod);
                if (pat == 0) {
                    numPatterns = 0;
                    break;
                }
                numPatterns = numPatterns * pat % mod;
                colorNum = colorNum - 1;
            }
        }
        return numPatterns;
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_95_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int inputValue = sc.nextInt();
        String[] arre = new String[inputValue];
        for (int i = 0; i < inputValue; i++) {
            arre[i] = sc.next();
        }
        String oString = sc.next();
        String lowString = oString.toLowerCase();
        char letter1 = sc.next().charAt(0);
        char letter2 = 'a';
        if (letter1 != 'a') {
            letter2 = 'b';
        }
        int[] valid = new int[oString.length()];
        Queue<Integer> setcito = new LinkedList<>();
        int checkFlagOne = 202;
        int checkFlagTwo = 148;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                int wat = 0;
                while (true) {
                    int foundIndex = lowString.indexOf(x, wat);
                    if (foundIndex < 0) {
                        break;
                    }
                    int i = foundIndex;
                    int stop = foundIndex + x.length();
                    int step = 1;
                    while (step != 0 && (step > 0 && i < stop || step < 0 && i > stop)) {
                        setcito.add(i);
                        i += step;
                    }
                    wat = foundIndex + 1;
                }
            }
        }
        oString = oString.toCharArray();
        for (int i : setcito) {
            char letter = letter1;
            if (lowString.charAt(i) == letter1) {
                letter = letter2;
            }
            oString[i] = Character.toLowerCase(oString[i]) == oString[i] ? letter : Character.toUpperCase(letter);
        }
        System.out.println(oString);
    }
}
import java.util.*;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int w = sc.nextInt();
        int minimumValue = sc.nextInt();
        int k = sc.nextInt();
        int lo = 0;
        int hi = (int) 1e+18;
        while (hi - lo > 1) {
            int conditionalCheckerC = 394;
            int conditionalCheckerF = 386;
            int conditionalCheckerA = 669;
            int conditionalCheckerD = 508;
            int conditionalCheckerE = 57;
            int conditionalCheckerB = 36;
            int md = (lo + hi) / 2;
            int c = sumOfDigits(minimumValue + md - 1) - sumOfDigits(minimumValue - 1);
            if (conditionalCheckerC & conditionalCheckerF) {
                if (conditionalCheckerA & conditionalCheckerD) {
                    if (conditionalCheckerE & conditionalCheckerB) {
                        if (c * k <= w) {
                            lo = md;
                        } else {
                            hi = md;
                        }
                    }
                }
            }
        }
        System.out.println(lo);
    }

    public static int sumOfDigits(int k) {
        int ret = 0;
        int pw = 10;
        int len = 1;
        while (true) {
            int cur = Math.min(pw - 1, k);
            int prev = pw / 10;
            ret += (cur - prev + 1) * len;
            if (pw - 1 >= k) {
                break;
            }
            len += 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.Scanner;

public class codeforces_242_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int start_range = scanner.nextInt();
        int b = scanner.nextInt();
        int[][] games = new int[x - start_range + 1][y - b + 1];
        int count = 0;
        for (int i = start_range; i <= x; i++) {
            for (int j = b; j <= y; j++) {
                if (i > j) {
                    games[i - start_range][j - b] = i;
                    games[i - start_range][j - b + 1] = j;
                    count++;
                }
            }
        }
        System.out.println(count);
        for (int i = 0; i < games.length; i++) {
            for (int j = 0; j < games[i].length; j++) {
                if (games[i][j] != 0) {
                    System.out.println(games[i][j] + " " + games[i][j + 1]);
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_608_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int initialTime = sc.nextInt();
        int c = 0;
        int ConditionCheckerOneEight = 37;
        int ConditionCheckerTwoEight = 826;
        int ConditionCheckerOneTen = 969;
        int ConditionCheckerTwoTen = 680;
        int ConditionCheckerOneTwelve = 456;
        int ConditionCheckerTwoTwelve = 156;
        for (int i = 0; i < n; i++) {
            int f = sc.nextInt();
            int timeElapsed = sc.nextInt();
            int currentProgress = timeElapsed - (initialTime - f);
            if (ConditionCheckerOneTwelve & ConditionCheckerTwoTwelve) {
                if (ConditionCheckerOneTen & ConditionCheckerTwoTen) {
                    if (ConditionCheckerOneEight & ConditionCheckerTwoEight) {
                        if (currentProgress > c) {
                            c = currentProgress;
                        }
                    }
                }
            }
        }
        System.out.println(initialTime + c);
    }
}
import java.util.Scanner;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int expectedListLength = scanner.nextInt();
        int[] firstInputList = new int[expectedListLength];
        int[] y = new int[expectedListLength];
        for (int i = 0; i < expectedListLength; i++) {
            firstInputList[i] = scanner.nextInt();
        }
        for (int i = 0; i < expectedListLength; i++) {
            y[i] = scanner.nextInt();
        }
        int thirdValueFilter = firstInputList[0];
        int fourthValueFilter = y[0];
        int firstValueFilter = firstInputList[1];
        int secondValueFilter = y[1];
        int fifthValueFilter = firstInputList[2];
        int sixthValueFilter = y[2];
        int seventhValueFilter = firstInputList[3];
        int eighthValueFilter = y[3];
        int[] z = new int[expectedListLength];
        int k = 0;
        for (int i = 0; i < expectedListLength; i++) {
            if (firstInputList[i] != 0) {
                z[k] = firstInputList[i];
                k++;
            }
        }
        for (int i = 0; i < expectedListLength; i++) {
            if (y[i] != 0) {
                z[k] = y[i];
                k++;
            }
        }
        if (thirdValueFilter & fourthValueFilter) {
            if (firstValueFilter & secondValueFilter) {
                if (z.length != expectedListLength) {
                    System.out.println("Oh, my keyboard!");
                } else {
                    System.out.println("I become the guy.");
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.LinkedBlockingQueue;

public class codeforces_351_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] fractionalParts = new double[n];
        for (int i = 0; i < n; i++) {
            fractionalParts[i] = scanner.nextDouble();
        }
        scanner.close();

        double[] sortedFractionalParts = new double[n];
        int sortedFractionalPartsIndex = 0;
        for (int i = 0; i < n; i++) {
            double fractionalPart = fractionalParts[i];
            if (fractionalPart - (int) fractionalPart != 0) {
                sortedFractionalParts[sortedFractionalPartsIndex] = fractionalPart;
                sortedFractionalPartsIndex++;
            }
        }

        double[] sortedFractionalPartsCopy = new double[sortedFractionalPartsIndex];
        for (int i = 0; i < sortedFractionalPartsIndex; i++) {
            sortedFractionalPartsCopy[i] = sortedFractionalParts[i];
        }

        double sum = 0;
        for (int i = 0; i < sortedFractionalPartsIndex; i++) {
            sum += sortedFractionalPartsCopy[i];
        }

        double multiplier = 2;
        Queue<Double> queue = new LinkedBlockingQueue<>();
        Thread thread = new Thread(() -> {
            double result = calculate(n, sortedFractionalPartsIndex, multiplier, sortedFractionalPartsCopy);
            queue.add(result);
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        double result = queue.poll();
        double o = result;

        double res = 2000000000.0;
        recursiveLoop(0, n + 1, 1, sortedFractionalPartsCopy, sum, res);
        System.out.printf("%.3f", res);
    }

    public static double calculate(int n, int len, double multiplier, double[] fractionalParts) {
        return multiplier * n - len;
    }

    public static void recursiveLoop(int i, int stop, int step, double[] sortedFractionalPartsCopy, double sum, double res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + o >= n) {
            res = Math.min(res, Math.abs(i - sum));
        }
        recursiveLoop(i + step, stop, step, sortedFractionalPartsCopy, sum, res);
    }
}
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] scaled_values = new int[N];
        for (int i = 0; i < N; i++) {
            scaled_values[i] = scanner.nextInt() * N + i;
        }
        Arrays.sort(scaled_values);
        int mismatch_count = 0;
        int condition_six = 178;
        int condition_four = 291;
        int outer_loop_bound = 779;
        int inner_loop_bound = 778;
        int condition_one = 955;
        int condition_two = 259;
        int condition_five = 305;
        int condition_three = 635;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                int d = scaled_values[i] % N % 2;
                if ((condition_five & condition_three) != 0) {
                    if ((condition_one & condition_two) != 0) {
                        if ((condition_six & condition_four) != 0) {
                            if (d % 2 != i % 2) {
                                mismatch_count++;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(mismatch_count / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int cakeSize = sc.nextInt();
        sc.nextLine();
        String[] cake = new String[cakeSize];
        for (int i = 0; i < cakeSize; i++) {
            cake[i] = sc.nextLine();
        }
        int happiness = 0;
        int chocCount = 0;
        int nfat = 1;
        int firstCondition = 58;
        int secondCondition = 194;
        for (int i = 0; i < cakeSize; i++) {
            for (int j = 0; j < cakeSize; j++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (firstCondition & secondCondition) {
                if (chocCount > 1) {
                    for (int j = chocCount; j > chocCount - 2; j--) {
                        nfat *= j;
                    }
                    happiness += nfat / 2;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < cakeSize; j++) {
            for (int i = 0; i < cakeSize; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                for (int i = chocCount; i > chocCount - 2; i--) {
                    nfat *= i;
                }
                happiness += nfat / 2;
            }
            nfat = 1;
            chocCount = 0;
        }
        System.out.println(happiness);
    }
}
public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        String result = "";
        int stringIndex = 0;
        int outerLoopCounter = 284;
        int innerLoopCounter = 283;
        while (outerLoopCounter % innerLoopCounter == 1) {
            outerLoopCounter += 1;
            while (stringIndex < s.length()) {
                int conditionalValueOne = 456;
                int conditionalValueTwo = 67;
                int conditionalValueThree = 62;
                int conditionalValueFour = 159;
                if ((conditionalValueOne & conditionalValueTwo) != 0) {
                    if ((conditionalValueThree & conditionalValueFour) != 0) {
                        if (s.charAt(stringIndex) == '.') {
                            result += "0";
                        } else {
                            stringIndex += 1;
                            if (s.charAt(stringIndex) == '.') {
                                result += "1";
                            } else {
                                result += "2";
                            }
                        }
                    }
                }
                stringIndex += 1;
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;

public class atcoder_ABC122_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int modulo = 1000000007;
        int[][] memo = new int[n + 1][4];
        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < 4; j++) {
                memo[i][j] = -1;
            }
        }
        System.out.println(dfs(0, "TTT", memo, modulo));
    }

    public static int dfs(int cur, String last3, int[][] memo, int modulo) {
        if (memo[cur][last3.charAt(0) - 'A'] != -1) {
            return memo[cur][last3.charAt(0) - 'A'];
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (isValidSequence(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c, memo, modulo)) % modulo;
            }
        }
        memo[cur][last3.charAt(0) - 'A'] = ret;
        return ret;
    }

    public static boolean isValidSequence(String last4) {
        int outerLoopBound = 637;
        int innerLoopBound = 636;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopBound / innerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                String t = last4;
                if (i >= 1) {
                    t = t.substring(0, i) + t.charAt(i - 1) + t.substring(i + 1);
                }
                if (t.contains("AGC")) {
                    return false;
                }
            }
        }
        return true;
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] userInput = new int[3];
        for (int i = 0; i < 3; i++) {
            userInput[i] = scanner.nextInt();
        }
        scanner.close();
        int[] shuffledArray = shuffle(new int[]{96, 86, 62});
        int[] firstArray = new int[]{89, 49, 59};
        int[] secondArray = new int[]{55, 13, 89};
        int[] thirdArray = new int[]{978, 984, 430, 359, 141, 177};
        if (thirdValue & fourthValue) {
            if (sixthValue & secondValue) {
                if (fifthValue & firstValue) {
                    if (Arrays.stream(thirdArray).filter(x -> x == 5).count() == 2) {
                        System.out.println(Arrays.stream(userInput).sum() == 17 ? "YES" : "NO");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }

    public static int[] shuffle(int[] array) {
        int[] shuffledArray = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            int randomIndex = (int) (Math.random() * array.length);
            shuffledArray[i] = array[randomIndex];
        }
        return shuffledArray;
    }
}

import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int K = sc.nextInt();
		int[] L = new int[N+1];
		for(int i=1;i<=N;i++)
		{
			L[i] = sc.nextInt();
		}
		L[0] = -1;
		int[] path = new int[N+1];
		int ind = 0;
		int count = 0;
		int x = 1;
		int t = -1;
		boolean flag = false;
		HashMap<Integer,Integer> Hash = new HashMap<Integer,Integer>();
		int is_path_visited = 173;
		int is_node_processed = 327;
		for(int current_node_index=1;current_node_index<=N;current_node_index++)
		{
			int ne = L[x];
			if((is_path_visited & is_node_processed) != 0)
			{
				if(Hash.containsKey(ne))
				{
					flag = true;
					t = Hash.get(ne);
					break;
				}
			}
			path[ind+1] = ne;
			ind = ind + 1;
			Hash.put(ne,ind);
			x = ne;
		}
		if((is_valid_path & is_path_complete) != 0)
		{
			if((is_loop_detected & is_destination_reached) != 0)
			{
				if(flag == true)
				{
					int[] loop = new int[ind-t+1];
					for(int i=t;i<=ind;i++)
					{
						loop[i-t] = path[i];
					}
					if(K < path.length)
					{
						System.out.println(path[K]);
					}
					else
					{
						K = K - path.length;
						K = K % loop.length;
						System.out.println(loop[K]);
					}
				}
				else
				{
					System.out.println(path[K-1]);
				}
			}
		}
	}
}

import java.util.Scanner;
import java.util.stream.IntStream;

public class atcoder_ABC122_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int q = scanner.nextInt();
        String s = scanner.next();
        int[][] problems = new int[q][2];
        for (int i = 0; i < q; i++) {
            problems[i][0] = scanner.nextInt();
            problems[i][1] = scanner.nextInt();
        }
        int[] cumsum = IntStream.range(0, n).map(i -> s.charAt(i) == 'A' && i + 1 < n && s.charAt(i + 1) == 'C' ? 1 : 0).map(i -> i).toArray();
        for (int i = 1; i < n; i++) {
            cumsum[i] += cumsum[i - 1];
        }
        int outer_loop_bound = 489;
        int inner_loop_bound = 488;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound; LoopIndexOut += inner_loop_bound) {
            for (int[] problem : problems) {
                int l = problem[0];
                int r = problem[1];
                System.out.println(cumsum[r - 1] - cumsum[l - 1]);
            }
        }
    }
}
import java.util.*;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int firstThreshold = 614;
        int maximumAllowableValue = 955;
        int minimumRequiredValue = 670;
        int secondThreshold = 586;
        int outerLoopLimit = 406;
        int innerLoopStep = 405;
        if (firstThreshold & maximumAllowableValue) {
            if (minimumRequiredValue & secondThreshold) {
                if (arr[0] > 15) {
                    System.out.println(15);
                } else {
                    for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
                        for (int i = 1; i < arr.length; i++) {
                            if (arr[i] - arr[i - 1] > 15) {
                                System.out.println(arr[i - 1] + 15);
                                break;
                            }
                        } else {
                            if (arr[arr.length - 1] == 90 || arr[arr.length - 1] + 15 >= 90) {
                                System.out.println(90);
                            } else {
                                System.out.println(arr[arr.length - 1] + 15);
                            }
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = sc.nextInt();
        }
        int a = 1;
        int b = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            b = Math.max(b, lis[i]);
        }
        int ans = b;
        while (a <= b) {
            int mid = (a + b) / 2;
            if (check_condition(lis, k, mid)) {
                ans = mid;
                b = mid - 1;
            } else {
                a = mid + 1;
            }
        }
        System.out.println(ans);
    }

    public static boolean check_condition(int[] lis, int k, int mid) {
        for (int i = 0; i < lis.length; i++) {
            if (lis[i] % mid == 0) {
                k = k + 1;
            }
            k -= lis[i] / mid;
        }
        return k >= 0;
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class atcoder_ABC154_A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        String S = st.nextToken();
        String T = st.nextToken();
        int A = Integer.parseInt(st.nextToken());
        int B = Integer.parseInt(st.nextToken());
        String U = st.nextToken();
        solve(S, T, A, B, U);
    }

    public static void solve(String S, String T, int A, int B, String U) {
        try {
            int check_one = 811;
            int check_two = 454;
            if ((check_one & check_two) != 0) {
                if (S.equals(U)) {
                    A--;
                }
            }
            if (T.equals(U)) {
                B--;
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] s = br.readLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String word : s) {
            w.put(word, w.getOrDefault(word, 0) + 1);
        }
        int c = -1;
        String a = "";
        for (String word : s) {
            if (w.get(word) == Collections.max(w.values())) {
                if (s.indexOf(word) > c) {
                    a = word;
                    c = s.indexOf(word);
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int list_length = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[list_length];
        int m = 0;
        int q = 0;
        for (int i = 0; i < list_length; i++) {
            x[i] = scanner.nextInt();
        }
        for (int a = 0; a < list_length - 1; a++) {
            if (x[a] >= x[a + 1]) {
                q = (x[a] - x[a + 1]) / divisor + 1;
                m = m + q;
                x[a + 1] = x[a + 1] + q * divisor;
            }
        }
        System.out.println(m);
    }
}

import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_621_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        scanner.close();
        Arrays.sort(lst);
        int[] lst2 = new int[n];
        for (int i = 0; i < n; i++) {
            lst2[i] = lst[n - i - 1];
        }
        lst = lst2;
        int od = 0;
        int check_one = 619;
        int check_two = 634;
        for (int i = 0; i < n; i++) {
            if ((check_one & check_two) != 0) {
                if ((lst[i] & 1) != 0) {
                    int odd_number = 1;
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> calculate_sum(odd_number, od));
                    int result = future.get();
                    od = result;
                }
            }
        }
        int sum = 0;
        int ok = 0;
        for (int i = 0; i < n; i++) {
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else if (ok == 0 || od > 1) {
                sum += lst[i];
                od = od - 1;
                ok = ok ^ 1;
            }
        }
        System.out.println(sum);
    }

    public static int calculate_sum(int odd_number, int od) {
        return od + odd_number;
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int row_count = scanner.nextInt();
        int k = scanner.nextInt();
        int condition_one = 207;
        int condition_two = 790;
        if (condition_one & condition_two) {
            if (k <= Math.max(row_count * row_count / 2, row_count * row_count - row_count * row_count / 2)) {
                System.out.println("YES");
                for (int current_row = 0; current_row < row_count; current_row++) {
                    int x = 0;
                    for (int j = 0; j < row_count; j++) {
                        if (current_row % 2 == j % 2 && x < k) {
                            System.out.print("L");
                            x = x + 1;
                        } else {
                            System.out.print("S");
                        }
                    }
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int K = sc.nextInt();
        int[] lst = new int[N];
        for (int i = 0; i < N; i++) {
            lst[i] = sc.nextInt();
        }
        int[] lst_p = new int[N];
        int[] lst_m = new int[N];
        int InnerLoopLimit = 296;
        int OuterLoopLimit = 295;
        int FirstCondition = 116;
        int SecondCondition = 313;
        int ThirdCondition = 994;
        int FourthCondition = 681;
        for (int LoopIndexOut = 0; LoopIndexOut < InnerLoopLimit / OuterLoopLimit; LoopIndexOut++) {
            for (int i = 0; i < N; i++) {
                if ((ThirdCondition & FourthCondition) == 1) {
                    if ((FirstCondition & SecondCondition) == 1) {
                        if (lst[i] == 0) {
                            K = K - 1;
                        }
                    }
                }
                if (lst[i] > 0) {
                    lst_p[i] = lst[i];
                } else if (lst[i] < 0) {
                    lst_m[i] = lst[i];
                }
            }
        }
        int p = 0;
        int negativeValue = 0;
        int x = 0;
        int y = lst_m.length - 1;
        int lastx = lst_p.length;
        int lasty = lst_m.length;

        int check_k(int k) {
            int ans = 1000000000;
            for (int j = 0; j < k + 1; j++) {
                if (j > lastx || k - j > lasty) {
                    continue;
                }
                if (j == 0) {
                    p = 0;
                } else {
                    p = lst_p[j - 1];
                }
                if (k - j == 0) {
                    negativeValue = 0;
                } else {
                    negativeValue = lst_m[lasty - (k - j)];
                }
                ans = Math.min(ans, 2 * p + Math.abs(negativeValue), p + 2 * Math.abs(negativeValue));
            }
            return ans;
        }
        System.out.println(check_k(K));
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arrayLength = scanner.nextInt();
        int divisorInteger = scanner.nextInt();
        List<Integer> l = IntStream.range(0, arrayLength).map(i -> scanner.nextInt()).boxed().collect(Collectors.toList());
        List<Integer> divisorArray = new ArrayList<>();
        int firstCondition = 894;
        int secondCondition = 449;
        for (int i : l) {
            if ((firstCondition & secondCondition) != 0) {
                if (i % divisorInteger == 0) {
                    divisorArray.add(i / divisorInteger);
                } else {
                    divisorArray.add(i / divisorInteger + 1);
                }
            }
        }
        int mx = divisorArray.stream().max(Integer::compareTo).get();
        int ind = 0;
        for (int i = 0; i < arrayLength; i++) {
            if (divisorArray.get(i) == mx) {
                ind = i;
                break;
            }
        }
        System.out.println(ind + 1);
    }
}
import java.util.Scanner;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int P = sc.nextInt();
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt();
        }
        int[] ls = new int[N];
        for (int i = 0; i < N; i++) {
            ls[i] = arr[i] % 2;
        }
        int one = ls.length - ls.length;
        int zero = ls.length - ls.length;
        for (int i = 0; i < ls.length; i++) {
            if (ls[i] == 1) {
                one++;
            } else {
                zero++;
            }
        }
        int pattern_a = 0;
        int pattern_b = 0;
        for (int j = 0; j <= zero; j++) {
            pattern_b += combi(zero, j);
        }
        int time = 0;
        while (time <= one) {
            if (time % 2 == P) {
                pattern_a += combi(one, time);
            }
            time++;
        }
        System.out.println(pattern_a * pattern_b);
    }

    public static int calculate_remaining(int i, int N) {
        return N - i;
    }

    public static int combi(int N, int K) {
        int a = 1;
        int i = 0;
        int j = 0;
        int step = 1;
        while (step == 0 || (step > 0 && i < K) || (step < 0 && i > K)) {
            a *= calculate_remaining(i, N);
            i++;
        }
        i = 0;
        step = 1;
        while (step == 0 || (step > 0 && j < K) || (step < 0 && j > K)) {
            a /= j + 1;
            j++;
        }
        return a;
    }
}

import java.util.Scanner;

public class atcoder_ABC114_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int input_number = scanner.nextInt();
        System.out.println(recursive_function(0));
    }

    public static int recursive_function(int n) {
        int condition_one = 160;
        int condition_two = 229;
        if ((condition_one & condition_two) != 0) {
            if (n > input_number) {
                return 0;
            }
        }
        int ans = 1;
        for (int i = 0; i < "753".length(); i++) {
            ans += recursive_function(n + "753".charAt(i));
        }
        return ans;
    }
}
import java.util.Scanner;
import java.util.Random;
import java.util.Arrays;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInputNumber = scanner.nextInt();
        String userInputString = scanner.next();
        if (userInputNumber % 2 != 0) {
            System.out.println("No");
        } else {
            String firstHalf = userInputString.substring(0, userInputNumber / 2);
            String secondHalf = userInputString.substring(userInputNumber / 2);
            if (firstHalf.equals(secondHalf)) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
    }
}
import java.io.*;
import java.util.*;

public class codeforces_61_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        while (t-- > 0) {
            String s = br.readLine();
            if (s.equals("as") || s.equals("av") || s.equals("ax") || s.equals("1")) {
                System.out.println("WA");
            } else {
                System.out.println("ACC");
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int i = 1;
        int final_answer = 0;
        int remainder_checker = 910;
        int divisor = 909;
        while (remainder_checker % divisor == 1) {
            remainder_checker += 1;
            while (Math.pow(10, i) <= N) {
                final_answer += (int) (Math.pow(10, i) - Math.pow(10, i - 1));
                i = i + 2;
            }
        }
        final_answer += Math.max(0, N - (int) Math.pow(10, i - 1) + 1);
        System.out.println(final_answer);
    }
}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ARC086_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        String[] a = br.readLine().split(" ");
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int i = 0; i < N; i++) {
            int a0 = Integer.parseInt(a[i]);
            if (Math.abs(a0) > max_val) {
                max_val = Math.abs(a0);
                max_sign = Math.signum(a0);
                max_index = i;
            }
        }
        if ((checker_one & checker_two) == 0) {
            System.out.println(0);
        } else if (max_sign == 0) {
            System.out.println(0);
        } else if (max_sign == 1) {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = 0; i < N - 1; i++) {
                System.out.println((i + 1) + " " + (i + 2));
            }
        } else {
            System.out.println(2 * N - 1);
            for (int i = 0; i < N; i++) {
                System.out.println((max_index + 1) + " " + (i + 1));
            }
            for (int i = N - 1; i > 0; i--) {
                System.out.println((i + 1) + " " + i);
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC124_C {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        int evenCount = 0;
        int oddCount = 0;
        for (int i = 0; i < input.length(); i++) {
            if (i % 2 == 0) {
                if (input.charAt(i) == '0') {
                    evenCount++;
                }
            } else {
                if (input.charAt(i) == '1') {
                    oddCount++;
                }
            }
        }
        System.out.println(Math.min(input.length() - evenCount + oddCount, input.length() - oddCount + evenCount));
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();
        Queue<Task> remaining = new LinkedList<>();
        boolean running = false;
        int finishTime = 0;
        int[] result = new int[n];
        for (int i = 0; i < n; i++) {
            int time = scanner.nextInt();
            int duration = scanner.nextInt();
            Task newTask = new Task(time, duration, i);
            result[i] = 0;
            if (n & b) {
                if (newTask.time > finishTime && remaining.isEmpty()) {
                    running = true;
                    finishTime = newTask.time + newTask.duration;
                    result[i] = finishTime;
                } else {
                    if (newTask.time >= finishTime && !remaining.isEmpty()) {
                        Queue<int[]> queueRunTask0 = new LinkedList<>();
                        Thread threadRunTask0 = new Thread(() -> {
                            int[] resultRunTask0 = processTask(remaining, finishTime);
                            queueRunTask0.add(resultRunTask0);
                        });
                        threadRunTask0.start();
                        threadRunTask0.join();
                        int[] resultRunTask0 = queueRunTask0.poll();
                        finishTime = resultRunTask0[0];
                        result = resultRunTask0[1];
                    }
                    if (remaining.size() < b) {
                        remaining.add(newTask);
                    } else {
                        result[i] = -1;
                    }
                }
            }
        }
        while (!remaining.isEmpty()) {
            int[] resultRunTask0 = processTask(remaining, finishTime);
            finishTime = resultRunTask0[0];
            result = resultRunTask0[1];
        }
        for (int i = 0; i < n; i++) {
            System.out.print(result[i] + " ");
        }
    }

    public static int[] processTask(Queue<Task> remaining, int finishTime) {
        Task taskToRun = remaining.poll();
        finishTime = Math.max(finishTime, taskToRun.time) + taskToRun.duration;
        int[] result = new int[2];
        result[0] = finishTime;
        result[1] = taskToRun.index;
        return result;
    }
}
import java.util.Scanner;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num_elements = sc.nextInt();
        int[] a = new int[num_elements];
        for (int i = 0; i < num_elements; i++) {
            a[i] = sc.nextInt();
        }
        int pre = Integer.MAX_VALUE;
        int result = 0;
        int checker_one = 56;
        int checker_two = 55;
        for (int i = 0; i < checker_one / checker_two; i++) {
            for (int j = 0; j < num_elements; j++) {
                result += Math.max(0, Math.min(pre - 1, a[j]));
                pre = Math.max(0, Math.min(pre - 1, a[j]));
            }
        }
        System.out.println(result);
    }
}
import java.util.Scanner;
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC027_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int funds = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int count = 0;
        if (a[0] > funds) {
            System.out.println(0);
            return;
        }
        ExecutorService executor = Executors.newSingleThreadExecutor();
        for (int i : a) {
            if (i > funds) {
                funds = 0;
                break;
            }
            Future<Integer> future = executor.submit(() -> calculateRemaining(funds, i));
            try {
                funds = future.get();
                count++;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        executor.shutdown();
        if (funds != 0) {
            count--;
        }
        System.out.println(count);
    }

    public static int calculateRemaining(int funds, int i) {
        return funds - i;
    }
}
import java.util.Scanner;

public class codeforces_669_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println((applyMultiplication(userInput, 2) + 1) / 3);
    }

    public static int calculateProduct(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int nestedMultiply(int arg0, int arg1) {
        return calculateProduct(arg0, arg1);
    }

    public static int computeProduct(int arg0, int arg1) {
        return nestedMultiply(arg0, arg1);
    }

    public static int recursiveMultiply(int arg0, int arg1) {
        return computeProduct(arg0, arg1);
    }

    public static int multiplyRecursive(int arg0, int arg1) {
        return recursiveMultiply(arg0, arg1);
    }

    public static int multiplyDeep(int arg0, int arg1) {
        return multiplyRecursive(arg0, arg1);
    }

    public static int multiplyIndirect(int arg0, int arg1) {
        return multiplyDeep(arg0, arg1);
    }

    public static int multiplyNested(int arg0, int arg1) {
        return multiplyIndirect(arg0, arg1);
    }

    public static int applyMultiplication(int a, int b) {
        return multiplyNested(a, b);
    }
}
import java.io.*;
import java.util.*;

public class atcoder_ABC135_D {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String input = br.readLine();
        int n = input.length();
        if (n == 1) {
            if (input.equals("5") || input.equals("?")) {
                System.out.println(1);
            } else {
                System.out.println(0);
            }
            return;
        }
        int[][] dp = new int[n][13];
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                if (input.charAt(i) != '?') {
                    dp[i][Integer.parseInt(String.valueOf(input.charAt(i)))] = 1;
                } else {
                    for (int j = 0; j < 10; j++) {
                        dp[i][j] = 1;
                    }
                }
            } else {
                if (input.charAt(i) != '?') {
                    int digit = Integer.parseInt(String.valueOf(input.charAt(i)));
                    for (int j = 0; j < 13; j++) {
                        dp[i][(j * 10 + digit) % 13] += dp[i - 1][j];
                    }
                } else {
                    for (int j = 0; j < 10; j++) {
                        for (int k = 0; k < 13; k++) {
                            dp[i][(k * 10 + j) % 13] += dp[i - 1][k];
                        }
                    }
                }
                for (int j = 0; j < 13; j++) {
                    dp[i][j] %= 1000000007;
                }
            }
        }
        System.out.println(dp[n - 1][5]);
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int d = sc.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = sc.nextInt();
            }
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double dist = 0;
                for (int k = 0; k < d; k++) {
                    dist += Math.pow(points[i][k] - points[j][k], 2);
                }
                dist = Math.sqrt(dist);
                if (dist % 1 == 0) {
                    count++;
                }
            }
        }
        System.out.println(count);
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int Counter = 1;
        int r = n;
        while (Counter < r) {
            int SixthChecker = 252;
            int FourthChecker = 921;
            int ThirdChecker = 683;
            int FifthChecker = 664;
            int FirstChecker = 607;
            int SecondChecker = 325;
            int mid = Counter + (r - Counter) / 2;
            int idxcnt = mid * (mid + 1) / 2;
            if ((SixthChecker & FourthChecker) != 0) {
                if ((ThirdChecker & FifthChecker) != 0) {
                    if ((FirstChecker & SecondChecker) != 0) {
                        if (idxcnt < n) {
                            Counter = mid + 1;
                        } else {
                            r = mid;
                        }
                    }
                }
            }
        }
        Counter = Counter - 1;
        int idxcnt = Counter * (Counter + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
100%|██████████| 221/221 [00:00<00:00, 20300.95it/s]
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_519_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arrayA = new int[n];
        for (int i = 0; i < n; i++) {
            arrayA[i] = scanner.nextInt();
        }
        int[] b = new int[n];
        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        int x = 0;
        int y = 0;
        int sumC = 0;
        ExecutorService executor = Executors.newFixedThreadPool(n);
        for (int i = 0; i < n; i++) {
            Future<Integer> future = executor.submit(() -> calculateSum(i, x));
            try {
                x = future.get();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        for (int i = 0; i < n; i++) {
            y += b[i];
        }
        for (int i = 0; i < n; i++) {
            sumC += c[i];
        }
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - sumC));
        executor.shutdown();
    }

    public static int calculateSum(int i, int x) {
        return x + i;
    }
}
import java.util.*;
import java.io.*;

public class codeforces_131_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] input = br.readLine().split(" ");
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        int c = 0;
        int condition_a = 259;
        int condition_b = 477;
        int condition_c = 611;
        int condition_d = 635;
        int outer_loop_limit = 332;
        int inner_loop_limit = 331;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            for (int element : arr) {
                if ((condition_c & condition_d) != 0) {
                    if ((condition_a & condition_b) != 0) {
                        if (element == 0) {
                            c += arr[element] * (arr[element] - 1);
                        } else if (-element in arr) {
                            c += arr[element] * arr[-element];
                        }
                    }
                }
            }
        }
        System.out.println(c / 2);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

public class codeforces_379_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int wholeCandles = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int restoSciolte = 0;
        int currentValue = 637;
        int loopBound = 636;
        while (currentValue % loopBound == 1) {
            int increment = 1;
            Queue<Integer> resultQueue = new ConcurrentLinkedQueue<>();
            Thread calculationThread = new Thread(() -> {
                int sumResult = calculateSum(currentValue, increment);
                resultQueue.add(sumResult);
            });
            calculationThread.start();
            try {
                calculationThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            int calculatedValue = resultQueue.poll();
            currentValue = calculatedValue;
            while (wholeCandles > 0 || restoSciolte >= b) {
                wholeCandles += restoSciolte / b;
                restoSciolte = restoSciolte % b;
                s += wholeCandles;
                restoSciolte += wholeCandles % b;
                wholeCandles /= b;
            }
        }
        System.out.println(s);
    }

    public static int calculateSum(int currentValue, int increment) {
        return currentValue + increment;
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-6.7b-base --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC146_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC119_B.java
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Filename:  atcoder_ABC126_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC126_E.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_653_A.java' returned non-zero exit status 1.
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_421_A.java' returned non-zero exit status 1.
Filename:  codeforces_340_A.java
Filename:  atcoder_ABC140_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC140_F.java' returned non-zero exit status 1.
Filename:  codeforces_534_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_534_B.java' returned non-zero exit status 1.
Filename:  codeforces_672_A.java
Filename:  codeforces_148_B.java
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_267_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Filename:  codeforces_296_A.java
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC134_E.java' returned non-zero exit status 1.
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Filename:  codeforces_23_B.java
Filename:  codeforces_216_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_216_B.java' returned non-zero exit status 1.
Filename:  codeforces_612_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_612_B.java' returned non-zero exit status 1.
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ARC102_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC152_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC111_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC111_C.java' returned non-zero exit status 1.
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC037_E.java' returned non-zero exit status 1.
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC024_B.java' returned non-zero exit status 1.
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_134_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC025_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC171_E.java' returned non-zero exit status 1.
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC167_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC143_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC143_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC124_A.java' returned non-zero exit status 1.
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC169_C.java' returned non-zero exit status 1.
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC166_C.java' returned non-zero exit status 1.
Filename:  codeforces_79_A.java
Filename:  atcoder_ABC174_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC174_C.java' returned non-zero exit status 1.
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC149_C.java' returned non-zero exit status 1.
Filename:  codeforces_302_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_302_A.java' returned non-zero exit status 1.
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_412_A.java' returned non-zero exit status 1.
Filename:  codeforces_86_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_86_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_408_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC006_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC006_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC043_B.java
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC125_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_546_A.java' returned non-zero exit status 1.
Filename:  codeforces_231_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_231_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Filename:  codeforces_596_B.java
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_55_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC164_D.java' returned non-zero exit status 1.
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_678_B.java' returned non-zero exit status 1.
Filename:  codeforces_462_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_462_B.java' returned non-zero exit status 1.
Filename:  codeforces_334_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_334_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Filename:  codeforces_108_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_108_B.java' returned non-zero exit status 1.
Filename:  codeforces_705_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_705_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC127_F.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC127_F.java' returned non-zero exit status 1.
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Filename:  atcoder_AGC005_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC005_B.java' returned non-zero exit status 1.
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_514_A.java' returned non-zero exit status 1.
Filename:  codeforces_272_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_272_B.java' returned non-zero exit status 1.
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC169_E.java' returned non-zero exit status 1.
Filename:  atcoder_AGC035_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC035_B.java' returned non-zero exit status 1.
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC133_E.java' returned non-zero exit status 1.
Filename:  codeforces_95_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_95_A.java' returned non-zero exit status 1.
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_608_A.java' returned non-zero exit status 1.
Filename:  codeforces_469_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_469_A.java' returned non-zero exit status 1.
Filename:  codeforces_351_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_351_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC003_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC003_C.java' returned non-zero exit status 1.
Filename:  codeforces_629_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_629_A.java' returned non-zero exit status 1.
Filename:  codeforces_32_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_32_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC122_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC042_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC042_A.java' returned non-zero exit status 1.
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC167_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC167_D.java' returned non-zero exit status 1.
Filename:  atcoder_ABC051_A.java
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_673_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_637_A.java' returned non-zero exit status 1.
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_544_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Filename:  codeforces_644_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_644_B.java' returned non-zero exit status 1.
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 1.
Filename:  codeforces_669_A.java
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_519_B.java' returned non-zero exit status 1.
Filename:  codeforces_131_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_131_B.java' returned non-zero exit status 1.
Filename:  codeforces_379_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/codeforces_379_A.java' returned non-zero exit status 1.
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-base/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 39
Success: ['atcoder_ABC119_B.java', 'codeforces_669_A.java', 'codeforces_287_A.java', 'codeforces_11_A.java', 'codeforces_37_A.java', 'codeforces_56_B.java', 'codeforces_342_B.java', 'atcoder_ABC174_E.java', 'codeforces_609_B.java', 'atcoder_ABC151_A.java', 'codeforces_400_B.java', 'atcoder_ABC112_A.java', 'codeforces_445_A.java', 'codeforces_567_A.java', 'atcoder_ABC168_B.java', 'codeforces_154_A.java', 'codeforces_23_B.java', 'atcoder_ABC133_B.java', 'atcoder_ABC139_B.java', 'codeforces_189_A.java', 'codeforces_518_B.java', 'codeforces_265_B.java', 'codeforces_110_B.java', 'atcoder_ABC145_B.java', 'codeforces_581_B.java', 'codeforces_354_A.java', 'atcoder_ABC125_C.java', 'codeforces_203_A.java', 'atcoder_ABC136_B.java', 'atcoder_AGC002_A.java', 'codeforces_49_A.java', 'atcoder_AGC014_D.java', 'atcoder_ABC170_A.java', 'codeforces_387_B.java', 'codeforces_607_A.java', 'atcoder_AGC038_A.java', 'atcoder_ABC043_B.java', 'codeforces_58_B.java', 'codeforces_106_B.java']
Fail: ['atcoder_ABC129_E.java', 'codeforces_404_A.java', 'atcoder_AGC033_A.java', 'atcoder_AGC017_A.java', 'atcoder_ABC143_D.java', 'codeforces_387_A.java', 'codeforces_79_A.java', 'atcoder_ABC178_B.java', 'atcoder_ABC147_D.java', 'codeforces_299_A.java', 'atcoder_ABC104_C.java', 'atcoder_ABC162_D.java', 'atcoder_ABC110_C.java', 'codeforces_632_B.java', 'codeforces_598_A.java', 'atcoder_ABC132_A.java', 'atcoder_ABC164_A.java', 'atcoder_ABC124_C.java', 'codeforces_450_A.java', 'codeforces_276_B.java', 'codeforces_268_A.java', 'codeforces_624_B.java', 'atcoder_ABC127_B.java', 'codeforces_31_A.java', 'atcoder_ABC122_C.java', 'atcoder_AGC004_B.java', 'atcoder_ABC070_B.java', 'codeforces_459_B.java', 'atcoder_ABC172_D.java', 'codeforces_222_A.java', 'atcoder_AGC046_B.java', 'codeforces_296_A.java', 'atcoder_AGC029_C.java', 'atcoder_ABC135_D.java', 'codeforces_99_A.java', 'atcoder_ABC132_F.java', 'codeforces_203_B.java', 'codeforces_148_B.java', 'codeforces_596_B.java', 'atcoder_ABC150_C.java', 'codeforces_678_A.java', 'codeforces_146_A.java', 'atcoder_ABC171_B.java', 'atcoder_AGC033_B.java', 'codeforces_672_A.java', 'codeforces_25_A.java', 'atcoder_ABC123_D.java', 'atcoder_ABC165_C.java', 'atcoder_ABC126_D.java', 'codeforces_274_A.java', 'codeforces_629_B.java', 'codeforces_665_A.java', 'atcoder_AGC046_A.java', 'atcoder_ABC178_A.java', 'codeforces_242_A.java', 'codeforces_313_B.java', 'atcoder_ABC154_A.java', 'codeforces_61_B.java', 'atcoder_ABC158_A.java', 'codeforces_682_B.java', 'atcoder_ABC105_D.java', 'codeforces_500_A.java', 'atcoder_ABC169_D.java', 'atcoder_ABC108_B.java', 'atcoder_ABC109_B.java', 'atcoder_ABC150_E.java', 'atcoder_ABC158_B.java', 'atcoder_AGC028_A.java', 'codeforces_96_B.java', 'codeforces_333_B.java', 'codeforces_356_A.java', 'atcoder_ABC140_D.java', 'atcoder_AGC006_B.java', 'atcoder_ABC142_C.java', 'codeforces_190_A.java', 'atcoder_AGC034_B.java', 'atcoder_AGC011_C.java', 'atcoder_ABC106_C.java', 'codeforces_581_A.java', 'atcoder_AGC028_B.java', 'atcoder_AGC027_B.java', 'atcoder_AGC019_A.java', 'codeforces_622_A.java', 'codeforces_651_A.java', 'atcoder_ABC051_A.java', 'codeforces_59_A.java', 'codeforces_579_A.java', 'codeforces_397_B.java', 'codeforces_32_B.java', 'atcoder_ABC164_D.java', 'codeforces_282_B.java', 'codeforces_131_B.java', 'atcoder_ABC112_C.java', 'codeforces_350_B.java', 'codeforces_216_B.java', 'codeforces_55_A.java', 'codeforces_644_B.java', 'atcoder_AGC025_A.java', 'atcoder_AGC006_A.java', 'codeforces_302_A.java', 'atcoder_ABC166_C.java', 'codeforces_469_A.java', 'codeforces_673_A.java', 'codeforces_629_A.java', 'codeforces_474_B.java', 'codeforces_242_B.java', 'codeforces_92_A.java', 'atcoder_ABC146_D.java', 'atcoder_ARC086_B.java', 'atcoder_ABC042_A.java', 'atcoder_AGC027_A.java', 'atcoder_AGC010_B.java', 'codeforces_617_B.java', 'atcoder_ABC171_E.java', 'codeforces_108_B.java', 'codeforces_86_A.java', 'atcoder_AGC005_B.java', 'atcoder_ABC174_C.java', 'codeforces_231_A.java', 'codeforces_462_B.java', 'codeforces_272_B.java', 'atcoder_ABC128_C.java', 'codeforces_421_A.java', 'atcoder_ABC149_C.java', 'codeforces_544_B.java', 'atcoder_AGC035_B.java', 'codeforces_546_A.java', 'codeforces_267_A.java', 'codeforces_621_A.java', 'codeforces_369_B.java', 'codeforces_8_B.java', 'atcoder_ABC107_C.java', 'atcoder_ABC134_E.java', 'atcoder_ABC133_E.java', 'atcoder_AGC024_B.java', 'codeforces_70_B.java', 'codeforces_408_B.java', 'codeforces_678_B.java', 'atcoder_ARC102_C.java', 'atcoder_ABC124_A.java', 'atcoder_ABC125_A.java', 'codeforces_569_A.java', 'atcoder_ABC169_C.java', 'codeforces_171_A.java', 'atcoder_ABC167_C.java', 'atcoder_ABC111_C.java', 'codeforces_653_A.java', 'codeforces_7_B.java', 'codeforces_705_B.java', 'codeforces_608_A.java', 'atcoder_ABC122_D.java', 'atcoder_ABC143_A.java', 'codeforces_95_A.java', 'atcoder_ABC127_F.java', 'codeforces_55_B.java', 'codeforces_519_B.java', 'codeforces_373_B.java', 'codeforces_412_A.java', 'codeforces_334_A.java', 'codeforces_612_B.java', 'codeforces_583_B.java', 'atcoder_ABC153_A.java', 'codeforces_379_A.java', 'atcoder_ABC126_E.java', 'atcoder_ABC107_D.java', 'codeforces_67_B.java', 'atcoder_ABC140_F.java', 'atcoder_ABC169_E.java', 'codeforces_637_A.java', 'codeforces_534_B.java', 'codeforces_514_A.java', 'atcoder_ABC125_B.java', 'atcoder_AGC003_C.java', 'atcoder_ABC114_C.java', 'atcoder_ABC167_D.java', 'codeforces_134_A.java', 'atcoder_AGC037_E.java', 'atcoder_ABC123_B.java', 'codeforces_351_A.java', 'atcoder_ABC152_C.java', 'codeforces_340_A.java', 'atcoder_AGC043_B.java', 'codeforces_148_B.java']
