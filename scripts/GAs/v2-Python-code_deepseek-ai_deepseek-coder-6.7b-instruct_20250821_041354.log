+ model=deepseek-ai/deepseek-coder-6.7b-instruct
+ dataset=Avatar
+ cache=tmp
+ src=Python
+ tgt=Java
+ python3 translate.py --model deepseek-ai/deepseek-coder-6.7b-instruct --dataset Avatar --source_lang Python --target_lang Java --cache_dir tmp --use_test
INFO 08-21 07:45:32 [__init__.py:241] Automatically detected platform cuda.
found 225 inputs
INFO 08-21 07:45:33 [utils.py:326] non-default args: {'model': 'deepseek-ai/deepseek-coder-6.7b-instruct', 'trust_remote_code': True, 'dtype': 'bfloat16', 'max_model_len': 4096, 'tensor_parallel_size': 2, 'disable_log_stats': True}
The argument `trust_remote_code` is to be used with Auto classes. It has no effect here and is ignored.
INFO 08-21 07:45:40 [__init__.py:711] Resolved architecture: LlamaForCausalLM
INFO 08-21 07:45:40 [__init__.py:1750] Using max model len 4096
INFO 08-21 07:45:40 [scheduler.py:222] Chunked prefill is enabled with max_num_batched_tokens=16384.
[1;36m(EngineCore_0 pid=4137234)[0;0m INFO 08-21 07:45:41 [core.py:636] Waiting for init message from front-end.
[1;36m(EngineCore_0 pid=4137234)[0;0m INFO 08-21 07:45:41 [core.py:74] Initializing a V1 LLM engine (v0.10.1.1) with config: model='deepseek-ai/deepseek-coder-6.7b-instruct', speculative_config=None, tokenizer='deepseek-ai/deepseek-coder-6.7b-instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=4096, download_dir=None, load_format=auto, tensor_parallel_size=2, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=deepseek-ai/deepseek-coder-6.7b-instruct, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"cudagraph_mode":1,"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"pass_config":{},"max_capture_size":512,"local_cache_dir":null}
[1;36m(EngineCore_0 pid=4137234)[0;0m WARNING 08-21 07:45:41 [multiproc_worker_utils.py:273] Reducing Torch parallelism from 26 threads to 1 to avoid unnecessary CPU contention. Set OMP_NUM_THREADS in the external environment to tune this value as needed.
[1;36m(EngineCore_0 pid=4137234)[0;0m INFO 08-21 07:45:41 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0, 1], buffer_handle=(2, 16777216, 10, 'psm_b1e38e3c'), local_subscribe_addr='ipc:///tmp/8eaccfbd-039c-47c0-9c7b-49b948a965bf', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:43 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_a4917b78'), local_subscribe_addr='ipc:///tmp/96a9b75b-70ba-43f9-b6af-ed6b9e7b568d', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:43 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[0], buffer_handle=(1, 10485760, 10, 'psm_b371ba57'), local_subscribe_addr='ipc:///tmp/e8225ce5-eeda-4b33-afe6-4d1081787700', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:43 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:43 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:43 [__init__.py:1418] Found nccl from library libnccl.so.2
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:43 [pynccl.py:70] vLLM is using nccl==2.26.2
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:44 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:44 [custom_all_reduce.py:35] Skipping P2P check and trusting the driver's P2P report.
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:44 [shm_broadcast.py:289] vLLM message queue communication handle: Handle(local_reader_ranks=[1], buffer_handle=(1, 4194304, 6, 'psm_f782e6c3'), local_subscribe_addr='ipc:///tmp/0cd81765-1c94-4fab-810a-cbffde1438cd', remote_subscribe_addr=None, remote_addr_ipv6=False)
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:44 [parallel_state.py:1134] rank 0 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:44 [parallel_state.py:1134] rank 1 in world size 2 is assigned as DP rank 0, PP rank 0, TP rank 1, EP rank 1
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m WARNING 08-21 07:45:44 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m WARNING 08-21 07:45:44 [topk_topp_sampler.py:61] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:44 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-instruct...
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:44 [gpu_model_runner.py:1953] Starting to load model deepseek-ai/deepseek-coder-6.7b-instruct...
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:44 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:44 [gpu_model_runner.py:1985] Loading model from scratch...
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:44 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:44 [cuda.py:328] Using Flash Attention backend on V1 engine.
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:45 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:45 [weight_utils.py:296] Using model weights format ['*.safetensors']
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m Loading safetensors checkpoint shards:   0% Completed | 0/2 [00:00<?, ?it/s]
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m Loading safetensors checkpoint shards:  50% Completed | 1/2 [00:00<00:00,  2.05it/s]
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:47 [default_loader.py:262] Loading weights took 2.04 seconds
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.05s/it]
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m Loading safetensors checkpoint shards: 100% Completed | 2/2 [00:01<00:00,  1.03it/s]
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m 
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:47 [default_loader.py:262] Loading weights took 2.07 seconds
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:47 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 2.670820 seconds
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:48 [gpu_model_runner.py:2007] Model loading took 6.3248 GiB and 2.904380 seconds
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:55 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/33b6fdfc4a/rank_0_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:45:55 [backends.py:559] Dynamo bytecode transform time: 7.01 s
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:55 [backends.py:548] Using cache directory: /home/ubuntu/.cache/vllm/torch_compile_cache/33b6fdfc4a/rank_1_0/backbone for vLLM's torch.compile
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:45:55 [backends.py:559] Dynamo bytecode transform time: 7.02 s
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:46:00 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.831 s
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:46:01 [backends.py:161] Directly load the compiled graph(s) for dynamic shape from the cache, took 4.947 s
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:46:01 [monitor.py:34] torch.compile takes 7.02 s in total
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:46:01 [monitor.py:34] torch.compile takes 7.01 s in total
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:46:02 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:46:02 [gpu_worker.py:276] Available KV cache memory: 62.03 GiB
[1;36m(EngineCore_0 pid=4137234)[0;0m INFO 08-21 07:46:03 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=4137234)[0;0m INFO 08-21 07:46:03 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=4137234)[0;0m INFO 08-21 07:46:03 [kv_cache_utils.py:849] GPU KV cache size: 254,080 tokens
[1;36m(EngineCore_0 pid=4137234)[0;0m INFO 08-21 07:46:03 [kv_cache_utils.py:853] Maximum concurrency for 4,096 tokens per request: 62.03x
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   0%|          | 0/67 [00:00<?, ?it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   4%|▍         | 3/67 [00:00<00:02, 28.17it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):   9%|▉         | 6/67 [00:00<00:02, 28.73it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  15%|█▍        | 10/67 [00:00<00:01, 29.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  19%|█▉        | 13/67 [00:00<00:01, 29.10it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  24%|██▍       | 16/67 [00:00<00:01, 28.93it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  28%|██▊       | 19/67 [00:00<00:01, 28.69it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  33%|███▎      | 22/67 [00:00<00:01, 28.55it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  37%|███▋      | 25/67 [00:00<00:01, 27.96it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  42%|████▏     | 28/67 [00:00<00:01, 28.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  46%|████▋     | 31/67 [00:01<00:01, 27.53it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  51%|█████     | 34/67 [00:01<00:01, 26.65it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  55%|█████▌    | 37/67 [00:01<00:01, 26.45it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  60%|█████▉    | 40/67 [00:01<00:01, 25.57it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  64%|██████▍   | 43/67 [00:01<00:00, 25.08it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  69%|██████▊   | 46/67 [00:01<00:00, 24.84it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  73%|███████▎  | 49/67 [00:01<00:00, 24.09it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  78%|███████▊  | 52/67 [00:01<00:00, 23.39it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  82%|████████▏ | 55/67 [00:02<00:00, 22.97it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  87%|████████▋ | 58/67 [00:02<00:00, 22.64it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  91%|█████████ | 61/67 [00:02<00:00, 22.80it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE):  96%|█████████▌| 64/67 [00:02<00:00, 22.23it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 23.49it/s]Capturing CUDA graphs (mixed prefill-decode, PIECEWISE): 100%|██████████| 67/67 [00:02<00:00, 25.42it/s]
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:46:06 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:46:06 [custom_all_reduce.py:196] Registering 4355 cuda graph addresses
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP1 pid=4137242)[0;0m INFO 08-21 07:46:06 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=4137234)[0;0m [1;36m(VllmWorker TP0 pid=4137240)[0;0m INFO 08-21 07:46:06 [gpu_model_runner.py:2708] Graph capturing finished in 3 secs, took 0.59 GiB
[1;36m(EngineCore_0 pid=4137234)[0;0m INFO 08-21 07:46:06 [core.py:214] init engine (profile, create kv cache, warmup model) took 18.15 seconds
INFO 08-21 07:46:07 [llm.py:298] Supported_tasks: ['generate']
Translating 225 files...
  0%|          | 0/225 [00:00<?, ?it/s]100%|██████████| 225/225 [00:00<00:00, 8002.02it/s]
Adding requests:   0%|          | 0/225 [00:00<?, ?it/s]Adding requests:  28%|██▊       | 62/225 [00:00<00:00, 616.29it/s]Adding requests:  62%|██████▏   | 140/225 [00:00<00:00, 709.84it/s]Adding requests:  94%|█████████▍| 212/225 [00:00<00:00, 708.37it/s]Adding requests: 100%|██████████| 225/225 [00:00<00:00, 701.20it/s]
Processed prompts:   0%|          | 0/225 [00:00<?, ?it/s, est. speed input: 0.00 toks/s, output: 0.00 toks/s]Processed prompts:   0%|          | 1/225 [00:03<14:13,  3.81s/it, est. speed input: 83.24 toks/s, output: 32.82 toks/s]Processed prompts:   1%|          | 2/225 [00:06<10:46,  2.90s/it, est. speed input: 148.49 toks/s, output: 57.62 toks/s]Processed prompts:   1%|▏         | 3/225 [00:06<06:29,  1.75s/it, est. speed input: 200.27 toks/s, output: 91.01 toks/s]Processed prompts:   2%|▏         | 4/225 [00:06<04:22,  1.19s/it, est. speed input: 255.45 toks/s, output: 124.04 toks/s]Processed prompts:   2%|▏         | 5/225 [00:07<03:12,  1.14it/s, est. speed input: 283.98 toks/s, output: 155.50 toks/s]Processed prompts:   3%|▎         | 6/225 [00:07<02:40,  1.37it/s, est. speed input: 438.54 toks/s, output: 183.62 toks/s]Processed prompts:   3%|▎         | 7/225 [00:07<02:10,  1.67it/s, est. speed input: 515.27 toks/s, output: 213.39 toks/s]Processed prompts:   4%|▍         | 9/225 [00:08<01:21,  2.65it/s, est. speed input: 673.76 toks/s, output: 280.90 toks/s]Processed prompts:   4%|▍         | 10/225 [00:08<01:07,  3.20it/s, est. speed input: 695.25 toks/s, output: 314.08 toks/s]Processed prompts:   5%|▍         | 11/225 [00:09<01:31,  2.33it/s, est. speed input: 691.28 toks/s, output: 325.78 toks/s]Processed prompts:   7%|▋         | 16/225 [00:09<00:39,  5.25it/s, est. speed input: 924.51 toks/s, output: 499.62 toks/s]Processed prompts:   8%|▊         | 18/225 [00:09<00:31,  6.56it/s, est. speed input: 997.76 toks/s, output: 570.12 toks/s]Processed prompts:   9%|▉         | 20/225 [00:09<00:28,  7.26it/s, est. speed input: 1042.88 toks/s, output: 634.64 toks/s]Processed prompts:  10%|█         | 23/225 [00:09<00:19, 10.11it/s, est. speed input: 1130.18 toks/s, output: 741.58 toks/s]Processed prompts:  11%|█         | 25/225 [00:10<00:27,  7.20it/s, est. speed input: 1158.92 toks/s, output: 781.02 toks/s]Processed prompts:  12%|█▏        | 28/225 [00:10<00:20,  9.63it/s, est. speed input: 1324.19 toks/s, output: 885.03 toks/s]Processed prompts:  13%|█▎        | 30/225 [00:10<00:18, 10.35it/s, est. speed input: 1397.52 toks/s, output: 948.84 toks/s]Processed prompts:  15%|█▌        | 34/225 [00:10<00:13, 14.02it/s, est. speed input: 1518.27 toks/s, output: 1087.72 toks/s]Processed prompts:  16%|█▌        | 36/225 [00:10<00:14, 13.34it/s, est. speed input: 1576.13 toks/s, output: 1146.68 toks/s]Processed prompts:  18%|█▊        | 40/225 [00:10<00:10, 17.48it/s, est. speed input: 1772.68 toks/s, output: 1286.29 toks/s]Processed prompts:  19%|█▉        | 43/225 [00:11<00:09, 19.13it/s, est. speed input: 1847.53 toks/s, output: 1386.45 toks/s]Processed prompts:  21%|██        | 47/225 [00:11<00:07, 22.66it/s, est. speed input: 1963.55 toks/s, output: 1524.21 toks/s]Processed prompts:  22%|██▏       | 50/225 [00:11<00:07, 23.36it/s, est. speed input: 2046.78 toks/s, output: 1623.02 toks/s]Processed prompts:  25%|██▍       | 56/225 [00:11<00:05, 29.11it/s, est. speed input: 2196.08 toks/s, output: 1832.23 toks/s]Processed prompts:  27%|██▋       | 60/225 [00:11<00:06, 26.50it/s, est. speed input: 2341.17 toks/s, output: 1956.47 toks/s]Processed prompts:  28%|██▊       | 63/225 [00:11<00:06, 24.07it/s, est. speed input: 2417.41 toks/s, output: 2044.59 toks/s]Processed prompts:  30%|██▉       | 67/225 [00:11<00:05, 26.83it/s, est. speed input: 2583.04 toks/s, output: 2178.74 toks/s]Processed prompts:  32%|███▏      | 71/225 [00:12<00:05, 29.12it/s, est. speed input: 2717.65 toks/s, output: 2313.02 toks/s]Processed prompts:  33%|███▎      | 75/225 [00:12<00:05, 25.67it/s, est. speed input: 2840.05 toks/s, output: 2429.86 toks/s]Processed prompts:  35%|███▍      | 78/225 [00:12<00:05, 26.14it/s, est. speed input: 2907.68 toks/s, output: 2524.70 toks/s]Processed prompts:  36%|███▋      | 82/225 [00:12<00:05, 27.66it/s, est. speed input: 3054.97 toks/s, output: 2652.75 toks/s]Processed prompts:  38%|███▊      | 85/225 [00:12<00:05, 25.40it/s, est. speed input: 3137.59 toks/s, output: 2738.60 toks/s]Processed prompts:  39%|███▉      | 88/225 [00:12<00:06, 21.07it/s, est. speed input: 3213.50 toks/s, output: 2811.02 toks/s]Processed prompts:  40%|████      | 91/225 [00:12<00:06, 21.00it/s, est. speed input: 3284.38 toks/s, output: 2896.98 toks/s]Processed prompts:  42%|████▏     | 94/225 [00:13<00:05, 22.48it/s, est. speed input: 3372.92 toks/s, output: 2990.22 toks/s]Processed prompts:  45%|████▌     | 102/225 [00:13<00:03, 34.83it/s, est. speed input: 3665.53 toks/s, output: 3279.21 toks/s]Processed prompts:  49%|████▉     | 110/225 [00:13<00:02, 44.31it/s, est. speed input: 3980.79 toks/s, output: 3566.20 toks/s]Processed prompts:  51%|█████     | 115/225 [00:13<00:02, 38.93it/s, est. speed input: 4094.75 toks/s, output: 3719.74 toks/s]Processed prompts:  53%|█████▎    | 120/225 [00:13<00:03, 34.89it/s, est. speed input: 4244.89 toks/s, output: 3869.57 toks/s]Processed prompts:  57%|█████▋    | 129/225 [00:13<00:02, 46.22it/s, est. speed input: 4517.47 toks/s, output: 4198.32 toks/s]Processed prompts:  60%|██████    | 136/225 [00:13<00:01, 48.26it/s, est. speed input: 4726.65 toks/s, output: 4438.46 toks/s]Processed prompts:  63%|██████▎   | 142/225 [00:14<00:02, 36.06it/s, est. speed input: 4851.89 toks/s, output: 4594.85 toks/s]Processed prompts:  65%|██████▌   | 147/225 [00:14<00:02, 28.91it/s, est. speed input: 5061.21 toks/s, output: 4709.95 toks/s]Processed prompts:  67%|██████▋   | 151/225 [00:14<00:02, 29.75it/s, est. speed input: 5120.15 toks/s, output: 4835.54 toks/s]Processed prompts:  69%|██████▉   | 156/225 [00:14<00:02, 33.53it/s, est. speed input: 5305.69 toks/s, output: 5008.82 toks/s]Processed prompts:  71%|███████   | 160/225 [00:14<00:01, 34.90it/s, est. speed input: 5413.08 toks/s, output: 5140.94 toks/s]Processed prompts:  74%|███████▍  | 166/225 [00:14<00:01, 34.76it/s, est. speed input: 5529.04 toks/s, output: 5331.10 toks/s]Processed prompts:  76%|███████▌  | 170/225 [00:15<00:01, 30.24it/s, est. speed input: 5626.27 toks/s, output: 5435.56 toks/s]Processed prompts:  77%|███████▋  | 174/225 [00:15<00:01, 27.13it/s, est. speed input: 5707.44 toks/s, output: 5538.00 toks/s]Processed prompts:  79%|███████▊  | 177/225 [00:15<00:01, 24.68it/s, est. speed input: 5755.39 toks/s, output: 5609.97 toks/s]Processed prompts:  81%|████████  | 182/225 [00:15<00:01, 25.75it/s, est. speed input: 5867.30 toks/s, output: 5762.76 toks/s]Processed prompts:  82%|████████▏ | 185/225 [00:15<00:01, 23.14it/s, est. speed input: 5913.89 toks/s, output: 5831.88 toks/s]Processed prompts:  84%|████████▎ | 188/225 [00:15<00:01, 24.45it/s, est. speed input: 6028.54 toks/s, output: 5927.50 toks/s]Processed prompts:  85%|████████▍ | 191/225 [00:16<00:01, 20.78it/s, est. speed input: 6029.50 toks/s, output: 5986.74 toks/s]Processed prompts:  86%|████████▌ | 194/225 [00:16<00:02, 14.74it/s, est. speed input: 5990.67 toks/s, output: 5992.54 toks/s]Processed prompts:  87%|████████▋ | 196/225 [00:16<00:02, 13.41it/s, est. speed input: 6068.95 toks/s, output: 6013.87 toks/s]Processed prompts:  88%|████████▊ | 199/225 [00:16<00:01, 15.93it/s, est. speed input: 6154.71 toks/s, output: 6115.79 toks/s]Processed prompts:  90%|████████▉ | 202/225 [00:16<00:01, 17.71it/s, est. speed input: 6242.77 toks/s, output: 6213.10 toks/s]Processed prompts:  91%|█████████ | 205/225 [00:17<00:01, 17.23it/s, est. speed input: 6297.08 toks/s, output: 6290.95 toks/s]Processed prompts:  92%|█████████▏| 207/225 [00:17<00:01, 13.38it/s, est. speed input: 6273.49 toks/s, output: 6293.25 toks/s]Processed prompts:  93%|█████████▎| 209/225 [00:17<00:01, 12.29it/s, est. speed input: 6293.76 toks/s, output: 6319.64 toks/s]Processed prompts:  94%|█████████▍| 211/225 [00:17<00:01, 13.11it/s, est. speed input: 6333.88 toks/s, output: 6376.72 toks/s]Processed prompts:  95%|█████████▍| 213/225 [00:18<00:01, 10.47it/s, est. speed input: 6323.66 toks/s, output: 6375.06 toks/s]Processed prompts:  96%|█████████▌| 215/225 [00:18<00:00, 11.33it/s, est. speed input: 6371.67 toks/s, output: 6431.59 toks/s]Processed prompts:  96%|█████████▋| 217/225 [00:18<00:00,  9.01it/s, est. speed input: 6349.88 toks/s, output: 6421.51 toks/s]Processed prompts:  99%|█████████▊| 222/225 [00:18<00:00, 12.86it/s, est. speed input: 6472.07 toks/s, output: 6615.82 toks/s]Processed prompts:  99%|█████████▉| 223/225 [00:29<00:00, 12.86it/s, est. speed input: 6437.45 toks/s, output: 6590.44 toks/s]Processed prompts: 100%|█████████▉| 224/225 [00:30<00:01,  1.33s/it, est. speed input: 4095.68 toks/s, output: 4258.02 toks/s]Processed prompts: 100%|██████████| 225/225 [00:33<00:00,  1.66s/it, est. speed input: 3648.72 toks/s, output: 3892.28 toks/s]Processed prompts: 100%|██████████| 225/225 [00:33<00:00,  1.66s/it, est. speed input: 3648.72 toks/s, output: 3892.28 toks/s]Processed prompts: 100%|██████████| 225/225 [00:33<00:00,  6.65it/s, est. speed input: 3648.72 toks/s, output: 3892.28 toks/s]
+ python3 clean_generations_translation.py --model deepseek-ai/deepseek-coder-6.7b-instruct --dataset Avatar --source_lang Python --target_lang Java --remove_prompt --use_test
  0%|          | 0/225 [00:00<?, ?it/s]import java.util.*;

class Main {
    static int N;
    static ArrayList<Integer>[] G;
    static HashMap<Integer, Integer> E;
    static int[] visited;
    static int K = -1;
    static int[] node2color;
    static Deque<Integer> queue = new ArrayDeque<>();

    static int graphColoring(int v) {
        queue.add(v);
        visited[v] = 1;
        while (!queue.isEmpty()) {
            int q = queue.poll();
            int color = 0;
            for (int nex : G[q]) {
                if (visited[nex] == 1)
                    continue;
                visited[nex] = 1;
                color += 1;
                if (color == node2color[q])
                    color += 1;
                node2color[nex] = color;
                E.put(Math.min(q, nex) * N + Math.max(q, nex), color);
                queue.add(nex);
            }
            K = Math.max(K, color);
        }
        return K;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        N = in.nextInt();
        G = new ArrayList[N];
        E = new HashMap<>();
        for (int i = 0; i < N; i++)
            G[i] = new ArrayList<>();
        for (int i = 0; i < N - 1; i++) {
            int a = in.nextInt() - 1;
            int b = in.nextInt() - 1;
            G[a].add(b);
            G[b].add(a);
            E.put(Math.min(a, b) * N + Math.max(a, b), 0);
        }
        visited = new int[N];
        node2color = new int[N];
        System.out.println(graphColoring(0));
        for (int value : E.values())
            System.out.println(value);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Scanner;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC119_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        double[] values = new double[count];
        for (int i = 0; i < count; i++) {
            double value = scanner.nextDouble();
            String currency = scanner.next();
            if (currency.equals("JPY")) {
                values[i] = value;
            } else if (currency.equals("BTC")) {
                values[i] = value * 380000.0;
            }
        }
        URL url = new URL("http://google.com");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");
        connection.connect();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = new Date();
        System.out.println(formatter.format(date));
        Base64.getEncoder().encodeToString("16154151949741541861".getBytes());
        Random rand = new Random();
        double[] sample1 = new double[]{65, 24, 45};
        double[] sample2 = new double[]{93, 6, 100};
        TTest tTest = new TTest();
        System.out.println(tTest.tTest(StatUtils.normalize(sample1), StatUtils.normalize(sample2)));
        Thread.sleep(30);
        System.out.println(StatUtils.sum(values));
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_AGC028_B {
    static long MOD = 746381343;
    static long[] fact;
    static long[] inv;

    static long pow(long a, long b) {
        long res = 1;
        while (b > 0) {
            if ((b & 1) == 1)
                res = (res * a) % MOD;
            a = (a * a) % MOD;
            b >>= 1;
        }
        return res;
    }

    static void preprocess(int n) {
        fact = new long[n + 1];
        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = (fact[i - 1] * i) % MOD;
        }

        inv = new long[n + 1];
        inv[n] = pow(fact[n], MOD - 2);
        for (int i = n - 1; i >= 0; i--) {
            inv[i] = (inv[i + 1] * (i + 1)) % MOD;
        }
    }

    static long solve(int n, long[] a) {
        long ans = 0;
        for (int i = 0; i < n; i++) {
            ans = (ans + a[i] * fact[i] % MOD * fact[n - i - 1] % MOD) % MOD;
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextLong();
        }
        preprocess(n);
        long res = solve(n, a);
        System.out.println(res);
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_569_A {

    private static int calculateProduct(int s, int q) {
        return s * q;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int targetValue = scanner.nextInt();
        int s = scanner.nextInt();
        int q = scanner.nextInt();

        int operationCount = 0;
        int loopCounterOne = 608;
        int loopCounterTwo = 607;

        while (loopCounterOne % loopCounterTwo == 1) {
            loopCounterOne += 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            while (s < targetValue) {
                Future<Integer> future = executorService.submit(() -> calculateProduct(s, q));
                s = future.get();
                operationCount += 1;
            }
            executorService.shutdown();
        }
        System.out.println(operationCount);
    }
}
import java.util.*;

public class atcoder_ABC112_C {
    private static final int CHECK_SIXTEEN = 519;
    private static final int CHECK_TWENTY_SIX = 132;
    private static final int CHECK_EIGHTEEN = 313;
    private static final int CHECK_TWENTY_EIGHT = 206;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<List<Integer>> ls_xyh = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            List<Integer> temp = new ArrayList<>();
            for (int j = 0; j < 3; j++) {
                temp.add(scanner.nextInt());
            }
            ls_xyh.add(temp);
        }
        System.out.println(solve(n, ls_xyh));
    }

    public static String solve(int n, List<List<Integer>> ls_xyh) {
        Integer x0 = null;
        for (int i = 0; i < n; i++) {
            if ((CHECK_EIGHTEEN & CHECK_TWENTY_EIGHT) != 0) {
                if ((CHECK_SIXTEEN & CHECK_TWENTY_SIX) != 0) {
                    if (ls_xyh.get(i).get(2) > 0) {
                        List<Integer> temp = ls_xyh.get(i);
                        x0 = temp.get(0);
                        break;
                    }
                }
            }
        }
        List<List<Integer>> cands = new ArrayList<>();
        for (int cx = 0; cx <= 100; cx++) {
            for (int cy = 0; cy <= 100; cy++) {
                cands.add(Arrays.asList(cx, cy, h0 + Math.abs(cx - x0) + Math.abs(cy - y0)));
            }
        }
        for (List<Integer> list : ls_xyh) {
            int x = list.get(0);
            int y = list.get(1);
            int h = list.get(2);
            cands.removeIf(cand -> Math.max(cand.get(2) - Math.abs(cand.get(0) - x) - Math.abs(cand.get(1) - y), 0) != h);
        }
        List<Integer> res = cands.get(0);
        return res.get(0) + " " + res.get(1) + " " + res.get(2);
    }
}
import java.util.Scanner;

public class atcoder_ABC104_C {
    static int D, G;
    static int[][] PC;
    static int ans = (int)Math.pow(10, 9);
    static int checkOne = 293;
    static int checkTwo = 657;

    static void calculateScore(int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if ((checkOne & (1 << j)) != 0) {
            if ((G - PC[j][1]) / (100 * (j + 1)) > PC[j][0]) {
                return;
            }
        }
        calculateScore(j + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        D = scanner.nextInt();
        G = scanner.nextInt();
        PC = new int[D][2];
        for (int i = 0; i < D; i++) {
            PC[i][0] = scanner.nextInt();
            PC[i][1] = scanner.nextInt();
        }
        for (int subsetIndex = 0; subsetIndex < (1 << D); subsetIndex++) {
            int score = 0;
            int problem = 0;
            calculateScore(0, D, 1);
            if ((checkOne & checkTwo) != 0) {
                if (score > G) {
                    continue;
                }
            }
            int left = G - score;
            for (int j = 0; j < D; j++) {
                if ((subsetIndex & (1 << j)) != 0) {
                    continue;
                }
                if (left > 100 * (j + 1) * PC[j][0] + PC[j][1]) {
                    continue;
                } else {
                    int temp = (left + 100 * (j + 1) - 1) / (100 * (j + 1));
                    ans = Math.min(ans, problem + Math.min(temp, PC[j][0]));
                }
            }
        }
        System.out.println(ans);
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Collections;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_678_A {

    public static void main(String[] args) throws Exception {
        String input = "453145 333625";
        String[] inputs = input.split(" ");
        int dividend = Integer.parseInt(inputs[0]);
        int divisor = Integer.parseInt(inputs[1]);
        System.out.println((floorDivisionFunction(dividend, divisor) + 1) * divisor);
    }

    private static int floorDivisionFunction(int a, int b) throws Exception {
        // Generate key for encryption
        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();

        // Perform t-test
        double[] sample1 = {46, 59, 79};
        double[] sample2 = {25, 96, 21};
        TTest tTest = new TTest();
        double tStatistic = tTest.tTest(sample1, sample2);

        // Get current date and time
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String currentDateTime = sdf.format(date);

        // Base64 encode
        String encodedString = Base64.getEncoder().encodeToString("46085993914798248468".getBytes());

        // Shuffle array
        Integer[] numbers = {25, 69, 70};
        Collections.shuffle(Arrays.asList(numbers));

        // Sleep for 230 milliseconds
        TimeUnit.MILLISECONDS.sleep(230);

        // HTTP connection
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.setRequestMethod("GET");
        http.connect();

        return a / b;
    }
}
import java.util.*;
import java.math.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int modulo_divisor = scanner.nextInt();
        int N = scanner.nextInt();
        BigInteger[] A = new BigInteger[N];
        for (int i = 0; i < N; i++) {
            A[i] = new BigInteger(scanner.next());
        }
        BigInteger[] arrays_to_concatenate = new BigInteger[]{BigInteger.valueOf(0), A[0]};
        Queue<BigInteger[]> queue_calculate_cumulative_remainders0 = new LinkedList<>();
        Thread thread_calculate_cumulative_remainders0 = new Thread(() -> {
            BigInteger[] result = calculate_cumulative_remainders(modulo_divisor, arrays_to_concatenate);
            queue_calculate_cumulative_remainders0.add(result);
        });
        thread_calculate_cumulative_remainders0.start();
        try {
            thread_calculate_cumulative_remainders0.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        BigInteger[] result_calculate_cumulative_remainders0 = queue_calculate_cumulative_remainders0.poll();
        BigInteger[] cum_remainders = result_calculate_cumulative_remainders0;
        Map<BigInteger, Integer> remainder_counts = new HashMap<>();
        for (BigInteger remainder : cum_remainders) {
            remainder_counts.put(remainder, remainder_counts.getOrDefault(remainder, 0) + 1);
        }
        int combinations = 0;
        for (int count : remainder_counts.values()) {
            combinations += count * (count - 1) / 2;
        }
        System.out.println(combinations);
    }

    @FunctionalInterface
    interface MyDecorator {
        BigInteger[] apply(int modulo_divisor, BigInteger[] arrays_to_concatenate);
    }

    public static BigInteger[] calculate_cumulative_remainders(int modulo_divisor, BigInteger[] arrays_to_concatenate) {
        // ttest_ind([36, 12, 39], [4, 97, 71])
        BigInteger[] array = new BigInteger[]{BigInteger.valueOf(36), BigInteger.valueOf(12), BigInteger.valueOf(39), BigInteger.valueOf(4), BigInteger.valueOf(97), BigInteger.valueOf(71)};
        Arrays.sort(array);
        BigInteger[] hstack = new BigInteger[arrays_to_concatenate.length];
        for (int i = 0; i < arrays_to_concatenate.length; i++) {
            hstack[i] = arrays_to_concatenate[i];
        }
        BigInteger[] result = new BigInteger[hstack.length];
        for (int i = 0; i < hstack.length; i++) {
            result[i] = hstack[i].mod(BigInteger.valueOf(modulo_divisor));
        }
        BigInteger[] cum_sum = new BigInteger[result.length];
        cum_sum[0] = result[0];
        for (int i = 1; i < result.length; i++) {
            cum_sum[i] = cum_sum[i - 1].add(result[i]).mod(BigInteger.valueOf(modulo_divisor));
        }
        return cum_sum;
    }
}
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int calculateSum(int S_L, int value_to_add) {
        return S_L + value_to_add;
    }

    public static void main(String[] args) throws Exception {
        String[] input = new java.util.Scanner(System.in).nextLine().split(" ");
        int H = Integer.parseInt(input[0]);
        int W = Integer.parseInt(input[1]);
        int N = Integer.parseInt(input[2]);
        input = new java.util.Scanner(System.in).nextLine().split(" ");
        int s_r = Integer.parseInt(input[0]);
        int s_c = Integer.parseInt(input[1]);
        String S = new java.util.Scanner(System.in).nextLine();
        String T = new java.util.Scanner(System.in).nextLine();
        boolean judge = false;
        int S_L = 0, S_R = 0, current_up_moves = 0, S_D = 0;
        int T_L = 0, T_R = 0, T_U = 0, T_D = 0;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        for (int loopIndexOut = 0; loopIndexOut < 93 / 92; loopIndexOut++) {
            for (int x = 0; x < N; x++) {
                if (S.charAt(x) == 'L') {
                    int value_to_add = 1;
                    Future<Integer> future = executorService.submit(() -> calculateSum(S_L, value_to_add));
                    S_L = future.get();
                    if (S_L - T_R - s_c == 0) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'R') {
                    S_R += 1;
                    if (s_c + (S_R - T_L) == W + 1) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'U') {
                    current_up_moves += 1;
                    if (current_up_moves - T_D - s_r == 0) {
                        judge = true;
                    }
                } else if (S.charAt(x) == 'D') {
                    S_D += 1;
                    if (s_r + (S_D - T_U) == H + 1) {
                        judge = true;
                    }
                }
                if (T.charAt(x) == 'L') {
                    if (S_R - T_L + s_c != 1) {
                        T_L += 1;
                    }
                }
                if (T.charAt(x) == 'R') {
                    if (s_c + (T_R - S_L) != W) {
                        T_R += 1;
                    }
                }
                if (T.charAt(x) == 'U') {
                    if (S_D - T_U + s_r != 1) {
                        T_U += 1;
                    }
                }
                if (T.charAt(x) == 'D') {
                    if (s_r + (T_D - current_up_moves) != H) {
                        T_D += 1;
                    }
                }
            }
        }
        executorService.shutdown();
        if (judge) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.concurrent.*;
import java.util.Random;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_55_A {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int inputNumber = 10;
        int divisor = 2;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        BlockingQueue<Double> queueDivisionOperation0 = new LinkedBlockingQueue<>();

        Future<Double> futureDivisionOperation0 = executor.submit(new Callable<Double>() {
            @Override
            public Double call() {
                return divisionOperation(inputNumber, divisor);
            }
        });

        Double resultDivisionOperation0 = queueDivisionOperation0.take();
        inputNumber = resultDivisionOperation0.intValue();

        Random rand = new Random();
        double[] sample1 = {36, 31, 49};
        double[] sample2 = {99, 4, 40};
        double[] shuffled1 = StatUtils.permute(sample1, rand);
        double[] shuffled2 = StatUtils.permute(sample2, rand);

        TTest tTest = new TTest();
        double tStatistic = tTest.tTest(shuffled1, shuffled2);

        if (inputNumber == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }

        executor.shutdown();
    }

    public static double divisionOperation(int inputNumber, int divisor) {
        return inputNumber / divisor;
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static Scanner in = new Scanner(System.in);

    static int readInt() {
        return in.nextInt();
    }

    static String readString() {
        return in.next();
    }

    static int main() {
        String s = readString();
        int k = readInt();
        int l = 0;
        for (char c : s.toCharArray()) {
            if (c != '1') {
                break;
            }
            l += 1;
        }
        if (l >= k) {
            return 1;
        }
        return Character.getNumericValue(s.charAt(l));
    }

    public static void main(String[] args) {
        System.out.println(main());
    }
}
import java.util.*;

public class codeforces_404_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int matrixSize = scanner.nextInt();
        scanner.nextLine();
        String[] s = new String[matrixSize];
        for (int i = 0; i < matrixSize; i++) {
            s[i] = scanner.nextLine();
        }
        List<Character> d1 = new ArrayList<>();
        List<Character> d2 = new ArrayList<>();
        Set<Character> rem = new HashSet<>();
        for (int i = 0; i < matrixSize; i++) {
            for (int j = 0; j < matrixSize; j++) {
                if (i == j) {
                    d1.add(s[i].charAt(j));
                }
                if (i == matrixSize - j - 1) {
                    d2.add(s[i].charAt(j));
                }
                if (i != j && i != matrixSize - j - 1) {
                    rem.add(s[i].charAt(j));
                }
            }
        }
        if (rem.size() != 1) {
            System.out.println("NO");
        } else if (!d1.equals(d2)) {
            System.out.println("NO");
        } else if (new HashSet<>(d1).size() != 1) {
            System.out.println("NO");
        } else if (d1.containsAll(rem)) {
            System.out.println("NO");
        } else {
            System.out.println("YES");
        }
    }
}
import java.util.Scanner;

interface Decorator {
    int dec_result(int... args);
}

class MyDecorator implements Decorator {
    @Override
    public int dec_result(int... args) {
        return this.func(args);
    }

    private int func(int... args) {
        int res = calculate_matrix_value(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
        return res;
    }
}

public class atcoder_AGC046_B {
    private static int calculate_matrix_value(int i, int m, int j, int constant_one, int diagonal_value, int constant_two, int left_value, int above_value) {
        return (above_value * i + left_value * j - diagonal_value * (i - constant_two) * (j - constant_one)) % m;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int A = scanner.nextInt();
        int start_column = scanner.nextInt();
        int C = scanner.nextInt();
        int D = scanner.nextInt();
        int m = 998244353;
        int[][] d = new int[C + 1][D + 1];
        d[A][start_column] = 1;
        for (int i = A; i <= C; i++) {
            for (int j = start_column; j <= D; j++) {
                int above_value = d[i][j - 1];
                int left_value = d[i - 1][j];
                int diagonal_value = d[i - 1][j - 1];
                int constant_one = 1;
                int constant_two = 1;
                d[i][j] += new MyDecorator().dec_result(i, m, j, constant_one, diagonal_value, constant_two, left_value, above_value);
            }
        }
        System.out.println(d[C][D]);
    }
}
import java.util.*;

public class codeforces_7_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer> allocated = new ArrayList<>(Collections.nCopies(m, 0));
        int ind = 1;
        final int MIN_CONDITION_CHECKER = 355;
        final int SMALL_CONDITION_CHECKER = 263;
        final int MEDIUM_CONDITION_CHECKER = 505;
        final int MID_CONDITION_CHECKER = 686;
        final int LOW_CONDITION_CHECKER = 139;
        final int MAX_CONDITION_CHECKER = 298;

        for (int i = 0; i < t; i++) {
            String operation = scanner.next();
            if ((MIN_CONDITION_CHECKER & SMALL_CONDITION_CHECKER) != 0) {
                if (operation.equals("alloc")) {
                    int pos = 0;
                    int num = scanner.nextInt();
                    for (int j = 0; j < m; j++) {
                        if (allocated.get(j) == 0) {
                            pos++;
                            if (pos == num) {
                                for (int k = 0; k < num; k++) {
                                    allocated.set(j - num + 1 + k, ind);
                                }
                                System.out.println(ind);
                                ind++;
                                break;
                            }
                        } else {
                            pos = 0;
                        }
                    }
                    if (pos == 0) {
                        System.out.println("NULL");
                    }
                }
            }
            if ((MEDIUM_CONDITION_CHECKER & MID_CONDITION_CHECKER) != 0) {
                if (operation.equals("erase")) {
                    int num = scanner.nextInt();
                    if (!allocated.contains(num) || num == 0) {
                        System.out.println("ILLEGAL_ERASE_ARGUMENT");
                    } else {
                        for (int j = 0; j < m; j++) {
                            if (allocated.get(j) == num) {
                                allocated.set(j, 0);
                            }
                        }
                    }
                }
            }
            if ((LOW_CONDITION_CHECKER & MAX_CONDITION_CHECKER) != 0) {
                if (operation.equals("defragment")) {
                    int zeroCount = (int) allocated.stream().filter(i -> i == 0).count();
                    allocated.removeIf(i -> i == 0);
                    for (int j = 0; j < zeroCount; j++) {
                        allocated.add(0);
                    }
                }
            }
        }
    }
}
import java.util.*;

public class codeforces_609_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        Map<Integer, Integer> l = new HashMap<>();
        countElementFrequency(lst, l, n, 1);
        int res = 0;
        calculateResult(lst, l, n, res);
        System.out.println(res);
    }

    public static void countElementFrequency(int[] lst, Map<Integer, Integer> l, int n, int i) {
        if (i >= n || i < 0) {
            return;
        }
        if (!l.containsKey(lst[i])) {
            l.put(lst[i], 1);
        } else {
            l.put(lst[i], l.get(lst[i]) + 1);
        }
        countElementFrequency(lst, l, n, i + 1);
    }

    public static void calculateResult(int[] lst, Map<Integer, Integer> l, int n, int res) {
        if (n == 0) {
            return;
        }
        if (l.get(lst[n - 1]) > 1) {
            res += n - l.get(lst[n - 1]);
            l.put(lst[n - 1], l.get(lst[n - 1]) - 1);
        } else {
            res += n - 1;
        }
        calculateResult(lst, l, n - 1, res);
    }
}
import java.util.*;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC162_D {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        new TTest();
        System.out.println(calculateRGBCombinations(N, S));
    }

    public static int calculateRGBCombinations(int n, String s) {
        char[] colorList = s.toCharArray();
        int[] sample1 = {13, 25, 86};
        int[] sample2 = {97, 35, 74};
        new TTest();
        int rNum = (int) Arrays.stream(colorList).filter(c -> c == 'R').count();
        int gNum = (int) Arrays.stream(colorList).filter(c -> c == 'G').count();
        int bNum = (int) Arrays.stream(colorList).filter(c -> c == 'B').count();
        int sum = 0;
        for (int step = 1; step <= Math.ceil(n / 2.0); step++) {
            for (int i = 0; i < n - 2 * step; i++) {
                StringBuilder sb = new StringBuilder();
                sb.append(colorList[i]).append(colorList[i + step]).append(colorList[i + step * 2]);
                String s = sb.toString();
                if (s.equals("RGB") || s.equals("RBG") || s.equals("BGR") || s.equals("BRG") || s.equals("GBR") || s.equals("GRB")) {
                    sum++;
                }
            }
        }
        return rNum * gNum * bNum - sum;
    }
}
import java.util.*;

public class atcoder_AGC014_D {
    static ArrayList<Integer>[] adjacencyList;
    static int[] seen, par, childCounts;
    static Deque<Integer> que;
    static Deque<Integer> nodeQueue;
    static int N;
    static int[] firstConditionChecker = new int[1];
    static int[] secondConditionChecker = new int[1];
    static int[] thirdConditionChecker = new int[1];
    static int[] fourthConditionChecker = new int[1];

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        adjacencyList = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) {
            adjacencyList[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            adjacencyList[a].add(b);
            adjacencyList[b].add(a);
        }
        que = new ArrayDeque<>();
        que.add(1);
        seen = new int[N + 1];
        seen[1] = 1;
        par = new int[N + 1];
        childCounts = new int[N + 1];
        while (!que.isEmpty()) {
            int v = que.poll();
            for (int u : adjacencyList[v]) {
                if (seen[u] == 0) {
                    seen[u] = 1;
                    par[u] = v;
                    childCounts[v]++;
                    que.add(u);
                }
            }
        }
        nodeQueue = new ArrayDeque<>();
        firstConditionChecker[0] = 146;
        secondConditionChecker[0] = 496;
        thirdConditionChecker[0] = 931;
        fourthConditionChecker[0] = 831;
        for (int i = 1; i <= N; i++) {
            if ((firstConditionChecker[0] & secondConditionChecker[0]) != 0) {
                if ((thirdConditionChecker[0] & fourthConditionChecker[0]) != 0) {
                    if (childCounts[i] == 0) {
                        nodeQueue.add(i);
                    }
                }
            }
        }
        while (!nodeQueue.isEmpty()) {
            int c = nodeQueue.pollLast();
            seen[c] = 0;
            if (seen[par[c]] == 0) {
                System.out.println("First");
                System.exit(0);
            }
            seen[par[c]] = 0;
            childCounts[par[par[c]]]--;
            if (childCounts[par[par[c]]] == 0) {
                nodeQueue.add(par[par[c]]);
            }
        }
        System.out.println("Second");
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class atcoder_ABC151_A {
    private static boolean debug = false;

    public static void debugPrint(String text) {
        if (debug) {
            System.out.println(text);
        }
    }

    public static String[] parseInput(String linesAsString) {
        if (linesAsString == null) {
            debug = false;
            Scanner scanner = new Scanner(System.in);
            return new String[] { scanner.next() };
        } else {
            debug = true;
            return linesAsString.split("\\n");
        }
    }

    public static char solve(String c) {
        String a = "abcdefghijklmnopqrstuvwxyz";
        int i = a.indexOf(c);
        return a.charAt(i + 1);
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Character> future = executorService.submit(() -> {
            String[] inputs = parseInput(null);
            return solve(inputs[0]);
        });
        System.out.println(future.get());
        executorService.shutdown();
    }
}
import java.util.Arrays;
import java.util.concurrent.*;

public class codeforces_581_B {
    private static int n;
    private static int[] arr;
    private static int[] resultArray;
    private static int globalVar = 0;
    private static int mx;
    private static int conditionOne = 995;
    private static int conditionTwo = 398;
    private static int outerLoopCounter = 470;
    private static int innerLoopCounter = 469;

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        n = new java.util.Scanner(System.in).nextInt();
        arr = new java.util.Scanner(System.in).nextIntStream().limit(n).toArray();
        mx = arr[n - 1];
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(new WorkerThread());
        int calculationResult = future.get();
        resultArray = new int[n];
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCounter / innerLoopCounter; LoopIndexOut++) {
            for (int i = n - 1; i >= 0; i--) {
                resultArray[i] = Math.max(0, mx - arr[i] + 1);
                if ((conditionOne & conditionTwo) > 0) {
                    if (arr[i] > mx) {
                        mx = arr[i];
                    }
                }
            }
        }
        executorService.shutdown();
        System.out.println(Arrays.toString(resultArray).replace("[", "").replace("]", "").replace(" ", ""));
    }

    static class WorkerThread implements Callable<Integer> {
        @Override
        public Integer call() {
            return calculateProduct(globalVar, n);
        }
    }

    private static int calculateProduct(int globalVar, int n) {
        return globalVar * n;
    }
}
import java.util.*;
import java.io.*;

class Main {
    static ArrayList<Integer>[] edge;
    static boolean[] used;
    static int N, M;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        N = Integer.parseInt(input[0]);
        M = Integer.parseInt(input[1]);
        edge = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edge[i] = new ArrayList<>();
        }
        for (int i = 0; i < M; i++) {
            input = br.readLine().split(" ");
            int X = Integer.parseInt(input[0]) - 1;
            int Y = Integer.parseInt(input[1]) - 1;
            edge[X].add(Y);
            edge[Y].add(X);
        }
        used = new boolean[N];
        int ans = 0;
        int checkerOne = 229;
        int checkerTwo = 524;
        for (int i = 0; i < N; i++) {
            if ((checkerOne & checkerTwo) != 0) {
                if (!used[i]) {
                    ans++;
                    Queue<Integer> queue = new LinkedList<>();
                    queue.add(i);
                    while (!queue.isEmpty()) {
                        int node = queue.poll();
                        used[node] = true;
                        for (int nextNode : edge[node]) {
                            if (!used[nextNode]) {
                                queue.add(nextNode);
                            }
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC132_F {
    static long mod = (long) Math.pow(10, 9) + 7;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        int k = scanner.nextInt();

        long[] coef = new long[(int) Math.sqrt(n) + 1];
        for (int i = 1; i <= Math.sqrt(n); i++) {
            coef[i] = n / i - n / (i + 1);
        }

        long sum = 0;
        for (int i = 1; i <= Math.sqrt(n); i++) {
            sum += coef[i];
        }

        for (int i = (int) Math.sqrt(n); i >= 1; i--) {
            coef[i] = coef[i] + coef[(int) sum];
            sum = sum - coef[i];
        }

        long[][] dp = new long[k + 1][(int) Math.sqrt(n) + 1];
        dp[0][0] = 1;

        for (int i = 1; i <= k; i++) {
            long tmp = 0;
            for (int j = (int) Math.sqrt(n); j >= 0; j--) {
                tmp = (tmp + dp[i - 1][(int) Math.sqrt(n) - j]) % mod;
                dp[i][j] = (coef[j] * tmp) % mod;
            }
        }

        long result = 0;
        for (int i = 0; i <= (int) Math.sqrt(n); i++) {
            result = (result + dp[k][i]) % mod;
        }

        System.out.println(result);
    }
}
import java.util.Scanner;

public class codeforces_581_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int secondInput = scanner.nextInt();
        System.out.println(Math.min(firstInput, secondInput) + " " + differenceFunction(Math.max(firstInput, secondInput), Math.min(firstInput, secondInput)) / 2);
    }

    public static int differenceFunction(int a, int b) {
        return a - b;
    }
}
import java.util.concurrent.*;
import java.util.Scanner;

class Main {
    static int calculateSumWithModulo(int currentValue, int constantOne, int n) {
        return (currentValue % n + constantOne);
    }

    static int calculateDifference(int currentValue, int m) {
        return m - currentValue;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int currentValue = 1;
        ExecutorService executorService = Executors.newFixedThreadPool(2);
        while (m >= currentValue) {
            Future<Integer> futureDifference = executorService.submit(() -> calculateDifference(currentValue, m));
            m = futureDifference.get();
            int constantOne = 1;
            Future<Integer> futureSum = executorService.submit(() -> calculateSumWithModulo(currentValue, constantOne, n));
            currentValue = futureSum.get();
        }
        executorService.shutdown();
        System.out.println(m);
    }
}
import java.util.Scanner;

public class atcoder_ABC170_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] inputArray = scanner.nextLine().split(" ");
        int[] intArray = new int[inputArray.length];
        for (int i = 0; i < inputArray.length; i++) {
            intArray[i] = Integer.parseInt(inputArray[i]);
        }
        int BitmaskThird = 853;
        int ConditionalValueThird = 517;
        int BitmaskFourth = 4;
        int ConditionalValueSecond = 317;
        int BitmaskFirst = 161;
        int BitmaskSecond = 225;
        for (int i = 0; i < intArray.length; i++) {
            if ((BitmaskFirst & BitmaskSecond) != 0) {
                if ((BitmaskFourth & ConditionalValueSecond) != 0) {
                    if ((BitmaskThird & ConditionalValueThird) != 0) {
                        if (intArray[i] == 0) {
                            System.out.println(i + 1);
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_653_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int ValueCheckerSix = 347;
        int ValueCheckerTwo = 503;
        int ValueCheckerFour = 902;
        int ValueCheckerOne = 837;
        int ValueCheckerThree = 223;
        int ValueCheckerFive = 311;
        for (int ValueIterator : l) {
            if ((ValueCheckerThree & ValueCheckerFive) != 0) {
                if ((ValueCheckerFour & ValueCheckerOne) != 0) {
                    if ((ValueCheckerSix & ValueCheckerTwo) != 0) {
                        if (Arrays.binarySearch(l, ValueIterator + 1) >= 0 && Arrays.binarySearch(l, ValueIterator + 2) >= 0) {
                            System.out.println("YES");
                            return;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class codeforces_8_B {
    public static void main(String[] args) {
        int checkFlagG = 322;
        int checkFlagD = 882;
        int checkFlagC = 52;
        int intermediateResultFlag = 357;
        int intermediateCheckFlag = 451;
        int checkFlagB = 455;
        Scanner scanner = new Scanner(System.in);
        String movementRecord = scanner.next();
        int x = 0, y = 0;
        Map<Character, int[]> d_movement = new HashMap<Character, int[]>() {{
            put('L', new int[]{0, -1});
            put('R', new int[]{0, 1});
            put('U', new int[]{1, 0});
            put('D', new int[]{-1, 0});
        }};
        Map<String, String> visited = new HashMap<String, String>() {{
            put(x + " " + y, "");
        }};
        boolean bug = false;
        int checkFlagA = 545;
        int checkFlagE = 653;
        int intermediateResultFlag2 = 566;
        int checkFlagF = 280;
        for (char move : movementRecord.toCharArray()) {
            String temp = x + " " + y;
            x += d_movement.get(move)[0];
            y += d_movement.get(move)[1];
            if ((intermediateResultFlag2 & checkFlagF) != 0) {
                if ((checkFlagA & checkFlagE) != 0) {
                    if (!visited.containsKey(x + " " + y)) {
                        for (char step : d_movement.keySet()) {
                            if (!((x + d_movement.get(step)[0] + " " + (y + d_movement.get(step)[1]))
                                    .equals(temp)) && visited.containsKey(x + d_movement.get(step)[0] + " " + (y + d_movement.get(step)[1]))) {
                                bug = true;
                                break;
                            }
                        }
                    } else {
                        bug = true;
                    }
                }
            }
            if (bug) {
                break;
            }
            visited.put(x + " " + y, "");
        }
        if ((checkFlagG & checkFlagD) != 0) {
            if ((checkFlagC & intermediateResultFlag) != 0) {
                if ((intermediateCheckFlag & checkFlagB) != 0) {
                    if (bug) {
                        System.out.println("BUG");
                    } else {
                        System.out.println("OK");
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class codeforces_146_A {
    public static void main(String[] args) {
        int outerCheckOne = 932;
        int outerCheckTwo = 826;
        int innerConditionOne = 549;
        int innerConditionThree = 93;
        Scanner scanner = new Scanner(System.in);
        int inputLength = scanner.nextInt();
        String number = scanner.next();
        int h1 = 0;
        int h2 = 0;
        boolean exitFlag = false;
        int outerLoopBound = 519;
        int innerLoopBound = 518;
        int innerConditionOne_ = 410;
        int innerConditionTwo = 312;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int i = 0; i < inputLength; i++) {
                if (innerConditionOne_ % innerConditionTwo == 0) {
                    if (number.charAt(i) != '4' && number.charAt(i) != '7') {
                        System.out.println("NO");
                        exitFlag = true;
                        break;
                    }
                }
                if (i < inputLength / 2) {
                    h1 += Character.getNumericValue(number.charAt(i));
                } else {
                    h2 += Character.getNumericValue(number.charAt(i));
                }
            }
        }
        if (outerCheckOne % outerCheckTwo == 0) {
            if (innerConditionOne % innerConditionThree == 0) {
                if (!exitFlag) {
                    if (h1 == h2) {
                        System.out.println("YES");
                    } else {
                        System.out.println("NO");
                    }
                }
            }
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.Base64;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Random;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.util.List;
import java.util.stream.Collectors;

public class codeforces_299_A {

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        System.out.println(arr[0]);
        scanner.close();
    }

    public static int modulo_operator(int a, int b) {
        try {
            return a % b;
        } catch (Exception e) {
            return -1;
        }
    }

    public static int[] shuffle(int[] array) {
        Random rnd = new Random();
        for (int i = array.length - 1; i > 0; i--) {
            int index = rnd.nextInt(i + 1);
            int a = array[index];
            array[index] = array[i];
            array[i] = a;
        }
        return array;
    }

    public static String parse(String date) throws Exception {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date dt = formatter.parse(date);
        return dt.toString();
    }

    public static void connectToGoogle() throws Exception {
        URL url = new URL("http://www.google.com");
        HttpURLConnection.setFollowRedirects(false);
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("HEAD");
        con.connect();
    }

    public static double[] ttest_ind(int[] a, int[] b) {
        TTest tTest = new TTest();
        return new double[] {tTest.t(a, b), tTest.degreesOfFreedom(a, b), tTest.meanDiff(a, b)};
    }

    public static int[] sorted_array(int[] array) {
        Arrays.sort(array);
        return array;
    }

    public static String base64_encode(String str) {
        return Base64.getEncoder().encodeToString(str.getBytes());
    }

    public static void main_java(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        System.out.println(new int[] {arr[0], -1}[Arrays.stream(arr).anyMatch(x -> modulo_operator(x, arr[0]) != 0)]);
        scanner.close();
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_518_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String news = scanner.next();
        String t = scanner.next();
        Map<Character, Integer> newsFrequencies = new HashMap<>();
        Map<Character, Integer> freqt = new HashMap<>();
        int yay = 0, whoops = 0;
        int checkOne = 540, checkFour = 304, checkSeven = 217, checkThree = 351, checkEight = 122, checkFive = 164;

        for (char letra : news.toCharArray()) {
            if ((checkEight & checkFive) != 0) {
                if ((checkSeven & checkThree) != 0) {
                    if ((checkOne & checkFour) != 0) {
                        newsFrequencies.put(letra, newsFrequencies.getOrDefault(letra, 0) + 1);
                    }
                }
            }
        }

        int checkSix = 386, checkTwo = 759;
        for (char letra : t.toCharArray()) {
            if ((checkSix & checkTwo) != 0) {
                freqt.put(letra, freqt.getOrDefault(letra, 0) + 1);
            }
        }

        for (char letra : newsFrequencies.keySet()) {
            while (newsFrequencies.get(letra) > 0 && freqt.containsKey(letra) && (freqt.get(letra) > 0)) {
                yay++;
                newsFrequencies.put(letra, newsFrequencies.get(letra) - 1);
                freqt.put(letra, freqt.get(letra) - 1);
            }
        }

        for (char letra : newsFrequencies.keySet()) {
            while (newsFrequencies.get(letra) > 0) {
                if (Character.isLowerCase(letra) && freqt.containsKey(Character.toUpperCase(letra)) && (freqt.get(Character.toUpperCase(letra)) > 0)) {
                    whoops++;
                    newsFrequencies.put(letra, newsFrequencies.get(letra) - 1);
                    freqt.put(Character.toUpperCase(letra), freqt.get(Character.toUpperCase(letra)) - 1);
                } else if (Character.isUpperCase(letra) && freqt.containsKey(Character.toLowerCase(letra)) && (freqt.get(Character.toLowerCase(letra)) > 0)) {
                    whoops++;
                    newsFrequencies.put(letra, newsFrequencies.get(letra) - 1);
                    freqt.put(Character.toLowerCase(letra), freqt.get(Character.toLowerCase(letra)) - 1);
                } else {
                    break;
                }
            }
        }

        System.out.println(yay + " " + whoops);
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;

public class codeforces_421_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int a = scanner.nextInt();
        int newVarB = scanner.nextInt();
        List<Integer> lista = new ArrayList<>();
        for (int i = 0; i < a; i++) {
            lista.add(scanner.nextInt());
        }
        List<Integer> secondList = new ArrayList<>();
        for (int i = 0; i < newVarB; i++) {
            secondList.add(scanner.nextInt());
        }
        int firstConditionChecker = 871;
        int secondConditionChecker = 860;
        // ttest_ind([56, 48, 71], [53, 14, 18])
        int newLoopChecker = 178;
        int loopChecker = 177;
        for (int i = 0; i < newLoopChecker / loopChecker; i++) {
            recursiveFunction(0, n, 1, firstConditionChecker, secondConditionChecker, lista);
        }
        scanner.close();
    }

    public static void recursiveFunction(int k, int stop, int step, int firstConditionChecker, int secondConditionChecker, List<Integer> lista) {
        if (step == 0 || (step > 0 && k >= stop) || (step < 0 && k <= stop)) {
            return;
        }
        if ((firstConditionChecker & secondConditionChecker) != 0) {
            if (lista.contains(k + 1)) {
                System.out.print("1 ");
            } else {
                System.out.print("2 ");
            }
        }
        recursiveFunction(k + step, stop, step, firstConditionChecker, secondConditionChecker, lista);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int x;
    private static int y;
    private static int a;
    private static int b;

    private static int gcd(int a, int b) {
        int temp;
        while (b != 0) {
            temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    private static int lcm(int a, int b) {
        return a * (b / gcd(a, b));
    }

    private static class LCMTask implements Runnable {
        private Future<Integer> future;

        @Override
        public void run() {
            future.complete(lcm(x, y));
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        x = scanner.nextInt();
        y = scanner.nextInt();
        a = scanner.nextInt();
        b = scanner.nextInt();

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(new LCMTask());
        int lcm = future.get();

        System.out.println(b / lcm - (a - 1) / lcm);

        executorService.shutdown();
    }
}
import java.util.*;
import java.lang.*;

class Main {
    private static int read_input() {
        return new java.util.Scanner(System.in).nextInt();
    }

    private static int[] LI() {
        String line = new java.util.Scanner(System.in).nextLine();
        String[] parts = line.split(" ");
        int[] output = new int[parts.length];
        for (int i = 0; i < parts.length; i++) {
            output[i] = Integer.parseInt(parts[i]);
        }
        return output;
    }

    private static String main() {
        int N = read_input();
        int[] S = LI();
        Arrays.sort(S);
        boolean[] flag = new boolean[S.length];
        ArrayList<Integer> cur = new ArrayList<>();
        cur.add(S[0]);
        flag[0] = false;
        int SecondValueChecker = 766;
        int MinValueChecker = 719;
        int FirstValueChecker = 293;
        int MaxValueChecker = 813;
        for (int i = 0; i < N; i++) {
            int j = 0;
            int jM = cur.size();
            for (int index = 0; index < S.length; index++) {
                if ((FirstValueChecker & MaxValueChecker) != 0) {
                    if ((SecondValueChecker & MinValueChecker) != 0) {
                        if (flag[index] && S[index] < cur.get(j)) {
                            cur.add(S[index]);
                            j++;
                            flag[index] = false;
                            if (j == jM) {
                                break;
                            }
                        }
                    }
                }
            }
            if (j != jM) {
                return "No";
            }
            Collections.sort(cur, Collections.reverseOrder());
        }
        return "Yes";
    }

    public static void main (String[] args) {
        System.out.println(main());
    }
}
import java.util.Scanner;

public class codeforces_534_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int v1 = scanner.nextInt();
        int v2 = scanner.nextInt();
        int t = scanner.nextInt();
        int d = scanner.nextInt();
        int a = 1;
        int v = v1;
        int distance = 0;
        final int firstCondition = 989;
        final int secondCondition = 711;
        final int outerLoopLimit = 748;
        final int outerLoopStep = 747;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / outerLoopStep; loopIndexOut++) {
            distance = distance + v;
            v = v + a * d;
            recursiveVelocityCalculator(0, t, 1, v1, v2, d, a, v, distance, firstCondition, secondCondition);
        }
        System.out.println(distance);
    }

    public static void recursiveVelocityCalculator(int i, int stop, int step, int v1, int v2, int d, int a, int v, int distance, int firstCondition, int secondCondition) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if ((firstCondition & secondCondition) > 0) {
            if (v - v2 > (d * (stop - i - 1))) {
                a *= -1;
                v = (d * (stop - i - 1)) + v2;
            }
        }
        distance = distance + v;
        v = v + a * d;
        recursiveVelocityCalculator(i + step, stop, step, v1, v2, d, a, v, distance, firstCondition, secondCondition);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_672_A {

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        System.out.println(calculateFloorDivision(n));
    }

    public static int calculateFloorDivision(int p) throws InterruptedException, ExecutionException {
        List<Integer> li = new ArrayList<>();
        for (int i = 1; i < 371; i++) {
            int count = 0;
            int divisor = 10;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> p / divisor);
            p = future.get();
            count++;
            executorService.shutdown();
            if (count == 1) {
                li.add(i);
            } else if (count == 2) {
                while (p != 0) {
                    int x = p % 10;
                    p = p / 10;
                    li.add(x);
                }
            } else if (count == 3) {
                while (p != 0) {
                    int x = p % 10;
                    p = p / 10;
                    li.add(x);
                }
            }
        }
        li.remove(li.size() - 1);
        li.remove(li.size() - 1);
        return li.get(n - 1);
    }
}
import java.util.concurrent.*;

public class codeforces_148_B {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int princess = scanner.nextInt();
        int dragon = scanner.nextInt();
        // shuffle([3, 15, 34]) is not needed in Java, so it's omitted
        int t = scanner.nextInt();
        int f = scanner.nextInt();
        int c = scanner.nextInt();
        if (dragon <= princess) {
            System.out.println(0);
            System.exit(0);
        }
        int result = 0;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(new FightThread(t, princess));
        int resultFight = future.get();
        int currentPosition = resultFight;
        currentPosition += princess * currentPosition / (dragon - princess);
        while (currentPosition < c) {
            result++;
            currentPosition += princess * currentPosition / dragon;
            currentPosition += princess * f;
            currentPosition += princess * currentPosition / (dragon - princess);
        }
        System.out.println(result);
        executorService.shutdown();
    }
}

class FightThread implements Callable<Integer> {
    private int t;
    private int princess;

    public FightThread(int t, int princess) {
        this.t = t;
        this.princess = princess;
    }

    @Override
    public Integer call() {
        return fight(t, princess);
    }

    private int fight(int t, int princess) {
        return t * princess;
    }
}
import java.util.concurrent.*;
import java.util.Scanner;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_59_A {
    private static int calculateResult(int cl, int lowercaseFlag) {
        return cl + lowercaseFlag;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        String txt = scanner.next();
        int cu = 0;
        int cl = 0;
        int outerLoopBound = 128;
        int innerLoopBound = 127;
        ExecutorService executorService = Executors.newFixedThreadPool(outerLoopBound / innerLoopBound);
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (char z : txt.toCharArray()) {
                if (Character.isLowerCase(z)) {
                    int lowercaseFlag = 1;
                    Callable<Integer> callable = () -> calculateResult(cl, lowercaseFlag);
                    Future<Integer> future = executorService.submit(callable);
                    cl = future.get();
                } else {
                    cu++;
                }
            }
        }
        TTest tTest = new TTest();
        double[] sample1 = {72, 5, 73};
        double[] sample2 = {54, 1, 80};
        double pValue = tTest.tTest(sample1, sample2);
        executorService.shutdown();
        if (cu > cl) {
            System.out.println(txt.toUpperCase());
        } else {
            System.out.println(txt.toLowerCase());
        }
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int r = 1;
        List<Integer> L = new ArrayList<>();
        String[] inputValues = scanner.nextLine().split(" ");
        for (String inputValue : inputValues) {
            List<Integer> initialList = Arrays.asList(r);
            L.addAll(computeValue(initialList, Integer.parseInt(inputValue)));
            int constantValue = 1;
            r = performCalculation(r, constantValue);
        }
        scanner.nextLine();
        List<Integer> shuffledList = Arrays.asList(47, 31, 52);
        Collections.shuffle(shuffledList);
        String[] currentIndices = scanner.nextLine().split(" ");
        for (String currentIndex : currentIndices) {
            System.out.println(L.get(Integer.parseInt(currentIndex) - 1));
        }
    }

    public static List<Integer> computeValue(List<Integer> initialList, int intValue, int inputValue) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < intValue * inputValue; i++) {
            result.addAll(initialList);
        }
        return result;
    }

    public static int performCalculation(int r, int constantValue) {
        return r + constantValue;
    }
}
import java.util.Scanner;

public class codeforces_267_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] results = new int[n];
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            results[i] = subtract(a, b);
        }
        for (int i = 0; i < n; i++) {
            System.out.println(results[i]);
        }
    }

    private static int subtract(int a, int b) {
        int firstConditionChecker = 918;
        int secondConditionChecker = 572;
        if ((firstConditionChecker & secondConditionChecker) != 0) {
            if (a > b) {
                int total = 0;
                while (a > 0 && b > 0) {
                    total += a / b;
                    a = a % b;
                    if (a > 0) {
                        total += b / a;
                        b = b % a;
                    }
                }
                return total;
            }
        }
        if (a < b) {
            int total = 0;
            int firstWhileLoopChecker = 308;
            int secondWhileLoopChecker = 307;
            while ((firstWhileLoopChecker % secondWhileLoopChecker) == 1) {
                firstWhileLoopChecker = firstWhileLoopChecker + 1;
                while (a > 0 && b > 0) {
                    total += b / a;
                    b = b % a;
                    if (b > 0) {
                        total += a / b;
                        a = a % b;
                    }
                }
            }
            return total;
        }
        if (a == b) {
            return 1;
        }
        return 0;
    }
}
import java.util.Scanner;

public class atcoder_ABC172_D {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long ans = 0;
        for (int current_number = 1; current_number <= N; current_number++) {
            ans += current_number * (N / current_number) * (N / current_number + 1) / 2;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;

public class atcoder_ABC112_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int groupOneSize = 450;
        int groupTwoSize = 130;
        int minimumValue = 924;
        int maximumValue = 29;
        int thresholdA = 22;
        int thresholdB = 331;
        int userAge = scanner.nextInt();

        if (groupOneSize > 0 && groupTwoSize > 0 && minimumValue > 0 && maximumValue > 0 && thresholdA > 0 && thresholdB > 0) {
            if (userAge == 1) {
                System.out.println("Hello World");
            } else {
                int firstNumber = scanner.nextInt();
                int secondNumber = scanner.nextInt();
                System.out.println(firstNumber + secondNumber);
            }
        }

        scanner.close();
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_265_B {

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();
        List<Integer> l = new ArrayList<>();
        for (int i = 0; i < inputNumber; i++) {
            l.add(scanner.nextInt());
        }
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(new CalculateDifferenceCallable(1, inputNumber));
        int ans = future.get();
        int last = 0;
        for (int loopCounter : l) {
            ans += Math.abs(last - loopCounter) + 1;
            last = loopCounter;
        }
        System.out.println(ans);
        executorService.shutdown();
    }
}

class CalculateDifferenceCallable implements Callable<Integer> {

    private int minuend;
    private int inputNumber;

    public CalculateDifferenceCallable(int minuend, int inputNumber) {
        this.minuend = minuend;
        this.inputNumber = inputNumber;
    }

    @Override
    public Integer call() {
        return calculateDifference(minuend, inputNumber);
    }

    private int calculateDifference(int minuend, int inputNumber) {
        return inputNumber - minuend;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static class CalculationTask implements Runnable {
        int k, increment;
        Future<Integer> future;

        CalculationTask(int k, int increment) {
            this.k = k;
            this.increment = increment;
        }

        @Override
        public void run() {
            future = pool.submit(() -> calculateSum(k, increment));
        }

        int calculateSum(int k, int increment) {
            return k + increment;
        }
    }

    static ExecutorService pool = Executors.newFixedThreadPool(1);

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int s = scanner.nextInt();
        int f = scanner.nextInt();
        char c = (s < f) ? 'R' : 'L';
        StringBuilder res = new StringBuilder();
        int i = 1, j = s;
        int t = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int k = 1;
        CalculationTask task = new CalculationTask(k, 1);
        pool.execute(task);
        while (j != f) {
            if (i > t) {
                k = task.future.get();
                task = new CalculationTask(k, 1);
                pool.execute(task);
                t = scanner.nextInt();
                l = scanner.nextInt();
                r = scanner.nextInt();
            }
            if (i == t && (l <= j && j <= r || l <= j + c && j + c <= r)) {
                res.append('X');
            } else {
                res.append(c);
                j += c == 'R' ? 1 : -1;
            }
            i++;
        }
        System.out.println(res);
        pool.shutdown();
    }
}
import java.util.*;

public class codeforces_356_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int rangeEnd = scanner.nextInt();
        int[] out = new int[n];
        int[] comp = new int[n];
        for (int i = 0; i < n; i++) {
            comp[i] = i + 2;
        }
        for (int i = 0; i < rangeEnd; i++) {
            int l = scanner.nextInt();
            int r = scanner.nextInt();
            int x = scanner.nextInt();
            int t = l;
            while (t <= r) {
                int CheckerSix = 168;
                int CheckerFive = 511;
                int CheckerThree = 25;
                int CheckerFour = 950;
                int CheckerTwo = 556;
                int CheckerOne = 499;
                int next_val = comp[t - 1];
                if ((CheckerSix & CheckerFive) != 0) {
                    if ((CheckerThree & CheckerFour) != 0) {
                        if ((CheckerTwo & CheckerOne) != 0) {
                            if (out[t - 1] == 0 && t != x) {
                                out[t - 1] = x;
                            }
                        }
                    }
                }
                comp[t - 1] = (t >= x) ? r + 1 : x;
                t = next_val;
            }
        }
        for (int i = 0; i < n; i++) {
            System.out.print(out[i] + " ");
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC178_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        System.out.println(a == 0 ? 1 : 0);
    }
}
import java.util.*;
import java.lang.*;
import org.apache.commons.math3.stat.inference.*;

class Main {
    private static int mod = 1000000007;
    private static Queue<Integer> inputQueue = new LinkedList<>();

    public static void main(String[] args) {
        new Thread(() -> {
            Scanner in = new Scanner(System.in);
            inputQueue.add(in.nextInt());
            inputQueue.add(in.nextInt());
            inputQueue.add(in.nextInt());
        }).start();

        int result_MI0 = inputQueue.remove();
        int N = result_MI0;
        int A = inputQueue.remove();
        int B = inputQueue.remove();

        int ans = 0;
        int rep = N / (A + B);
        ans += rep * A;
        int res = N - rep * (A + B);
        ans += Math.min(res, A);

        System.out.println(ans);
    }
}
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class codeforces_296_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] m = scanner.nextLine().split(" ");
        boolean possible = true;
        int CheckerB = 692, CheckerA = 234, CheckerF = 867, CheckerC = 410, CheckerD = 634, CheckerE = 636;

        // The ttest_ind function is not available in Java, so we'll skip it

        for (String element : new HashSet<>(java.util.Arrays.asList(m))) {
            if ((CheckerD & CheckerE) != 0) {
                if ((CheckerF & CheckerC) != 0) {
                    if ((CheckerB & CheckerA) != 0) {
                        Map<String, Integer> counts = new HashMap<>();
                        for (String val : m) {
                            counts.put(val, counts.getOrDefault(val, 0) + 1);
                        }
                        if (counts.get(element) >= (n / 2) + 1) {
                            possible = false;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println(possible ? "YES" : "NO");
    }
}
import java.util.*;
import java.lang.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        int h = scanner.nextInt();
        int s = scanner.nextInt();
        int d = scanner.nextInt();
        int n = scanner.nextInt();

        int minOneLiterCost = Math.min(q * 4, Math.min(h * 2, s));
        int best2L = Math.min(d, minOneLiterCost * 2);

        if (n % 2 == 0) {
            System.out.println((long)best2L * (n / 2));
        } else {
            System.out.println((long)best2L * (n / 2) + minOneLiterCost);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.*;

class Main {
    static List<List<Integer>> ans = new ArrayList<>();

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        ExecutorService executorService = Executors.newFixedThreadPool(N);
        for (int i = 0; i < 223; i++) {
            for (int j = 0; j < N; j++) {
                int A = scanner.nextInt();
                Future<Integer> future = executorService.submit(new BinarySearchTask(A));
                int result = future.get();
                if (result == ans.size()) {
                    ans.add(new ArrayList<>(List.of(A)));
                } else {
                    ans.get(result).add(A);
                }
            }
        }
        executorService.shutdown();
        System.out.println(ans.size());
    }

    static class BinarySearchTask implements Callable<Integer> {
        int key;

        BinarySearchTask(int key) {
            this.key = key;
        }

        @Override
        public Integer call() {
            return binarySearch(key);
        }

        int binarySearch(int key) {
            int bad = -1, good = ans.size();
            while (good - bad > 1) {
                int middleIndex = (bad + good) / 2;
                if (ans.get(middleIndex).get(0) < key) {
                    good = middleIndex;
                } else {
                    bad = middleIndex;
                }
            }
            return good;
        }
    }
}
import java.util.Scanner;

public class codeforces_387_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] time1 = scanner.next().split(":");
        int firstHour = Integer.parseInt(time1[0]);
        int firstMinute = Integer.parseInt(time1[1]);
        int minutesPerHour = 60;
        firstMinute += calculateProduct(firstHour, minutesPerHour);
        String[] time2 = scanner.next().split(":");
        int h2 = Integer.parseInt(time2[0]);
        int m2 = Integer.parseInt(time2[1]);
        m2 += h2 * 60;
        m2 = firstMinute - m2;
        m2 = m2 % 1440;
        if (m2 < 0) m2 += 1440;
        System.out.printf("%02d:%02d", m2 / 60, m2 % 60);
    }

    public static int calculateProduct(int firstHour, int minutesPerHour) {
        return firstHour * minutesPerHour;
    }
}
import java.util.Scanner;

public class codeforces_665_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int at = scanner.nextInt();
        int time_interval = scanner.nextInt();
        int t1 = scanner.nextInt();
        int t2 = scanner.nextInt();
        int st = t2 + (t1 - 5) * 60;
        int fin = st + at;
        int now = 0;
        int count_result = 0;
        while (now < fin && now < 1140) {
            int ConditionC = 859;
            int NewConditionA = 861;
            int ConditionD = 306;
            int NewConditionB = 798;
            int ConditionA = 190;
            int ConditionB = 343;
            if ((ConditionC & NewConditionA) != 0) {
                if ((ConditionD & NewConditionB) != 0) {
                    if ((ConditionA & ConditionB) != 0) {
                        if (now + at > st) {
                            count_result += 1;
                        }
                    }
                }
            }
            now += time_interval;
        }
        System.out.println(count_result);
    }
}
import java.util.Scanner;

public class codeforces_154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String news = scanner.next();
        int n = scanner.nextInt();
        int ans = 0;
        int checkerTwo = 395;
        int checkerOne = 753;
        for (int i = 0; i < n; i++) {
            String x = scanner.next();
            int a = 0, b = 0;
            for (char c : news.toCharArray()) {
                if ((checkerTwo & checkerOne) != 0) {
                    if (c == x.charAt(0)) {
                        a++;
                    } else if (c == x.charAt(1)) {
                        b++;
                    } else {
                        ans += Math.min(a, b);
                        (a, b) = (0, 0);
                    }
                }
            }
            ans = addMin(ans, a, b, Math::min);
        }
        System.out.println(ans);
    }

    private static int addMin(int ans, int a, int b, IntBinaryOperator min) {
        return ans + min.applyAsInt(a, b);
    }
}
import java.util.Random;
import java.util.Scanner;

public class codeforces_23_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int limit = scanner.nextInt();
        outerLoop(limit);
    }

    private static void outerLoop(int limit) {
        int outer_loop_limit = 172;
        int inner_loop_limit = 171;
        for (int loopIndexOut = 0; loopIndexOut < outer_loop_limit / inner_loop_limit; loopIndexOut++) {
            recursiveFunction(0, limit, 1);
        }
    }

    @SuppressWarnings("unused")
    private static void myDecorator(Runnable runnable) {
        Random random = new Random();
        int[] array = {1, 80, 43};
        for (int i = 0; i < array.length; i++) {
            int randomIndex = random.nextInt(array.length);
            int temp = array[i];
            array[i] = array[randomIndex];
            array[randomIndex] = temp;
        }
        runnable.run();
    }

    private static void recursiveFunction(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        int value = scanner.nextInt();
        if (value < 2) {
            System.out.println(0);
        }
        if (value >= 2) {
            System.out.println(value - 2);
        }
        recursiveFunction(i + step, stop, step);
    }
}
import java.util.*;

public class codeforces_216_B {
    private static Scanner scanner = new Scanner(System.in);
    private static Set<Integer> seen = new HashSet<>();
    private static Map<Integer, Set<Integer>> g = new HashMap<>();

    private static int[] readInts() {
        return Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
    }

    private static int dfs(int i) {
        if (seen.contains(i)) {
            return 0;
        }
        seen.add(i);
        int nodes = 1;
        int edges = g.get(i).size();
        for (int j : g.get(i)) {
            nodes += dfs(j);
            edges += g.get(j).size();
        }
        return nodes;
    }

    private static boolean solve() {
        int[] line0 = readInts();
        if (line0.length == 0) {
            return false;
        }
        int n = line0[0], m = line0[1];
        for (int i = 1; i <= n; i++) {
            g.put(i, new HashSet<>());
        }
        for (int i = 0; i < m; i++) {
            int[] ab = readInts();
            g.get(ab[0]).add(ab[1]);
            g.get(ab[1]).add(ab[0]);
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (!seen.contains(i)) {
                int nodes = dfs(i);
                if (nodes > 1 && nodes % 2 == 1 && nodes * 2 == g.get(i).size() * 2) {
                    ans++;
                }
            }
        }
        if ((n - ans) % 2 == 1) {
            ans++;
        }
        System.out.println(ans);
        return true;
    }

    public static void main(String[] args) {
        while (solve()) {}
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_ABC149_B {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int[] cookieValues = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        int firstValue = cookieValues[0];
        int thirdValue = cookieValues[2];

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(() -> calculateDifference(thirdValue, firstValue));
        int result_calculateDifference0 = future.get();
        executorService.shutdown();

        int leftOver = result_calculateDifference0;

        // The following lines are not included in the Java version as they are not relevant to the problem
        // ttest_ind([72, 91, 23], [43, 52, 20])
        // takahashi = np.max(np.array([0, leftOver]))

        int takahashi = Math.max(0, leftOver);
        int secondValue = Math.max(0, cookieValues[1] - Math.abs(leftOver));
        System.out.println(takahashi + " " + secondValue);
    }

    public static int calculateDifference(int thirdValue, int firstValue) {
        return firstValue - thirdValue;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int[] a;
    static int n;
    static int[] indexedArray;
    static int res = 0;

    static class MultiplyTask implements Runnable {
        int[] numberArray;
        int n;

        MultiplyTask(int[] numberArray, int n) {
            this.numberArray = numberArray;
            this.n = n;
        }

        @Override
        public void run() {
            for (int i = 0; i < numberArray.length; i++) {
                numberArray[i] *= n;
            }
        }
    }

    static class ArrayIndexerTask implements Runnable {
        int i, stop, step;

        ArrayIndexerTask(int i, int stop, int step) {
            this.i = i;
            this.stop = stop;
            this.step = step;
        }

        @Override
        public void run() {
            if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                return;
            }
            indexedArray[a[i] - 1] = i;
            arrayIndexer(i + step, stop, step);
        }
    }

    static class DifferenceCalculatorTask implements Runnable {
        int i, stop, step;

        DifferenceCalculatorTask(int i, int stop, int step) {
            this.i = i;
            this.stop = stop;
            this.step = step;
        }

        @Override
        public void run() {
            if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
                return;
            }
            res += Math.abs(indexedArray[i] - indexedArray[i - 1]);
            differenceCalculator(i + step, stop, step);
        }
    }

    static void arrayIndexer(int i, int stop, int step) {
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future future = executorService.submit(new ArrayIndexerTask(i, stop, step));
        try {
            future.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        executorService.shutdown();
    }

    static void differenceCalculator(int i, int stop, int step) {
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future future = executorService.submit(new DifferenceCalculatorTask(i, stop, step));
        try {
            future.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        executorService.shutdown();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        indexedArray = new int[n];
        Arrays.fill(indexedArray, -1);
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future future = executorService.submit(new MultiplyTask(a, n));
        try {
            future.get();
        } catch (Exception e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        arrayIndexer(0, n, 1);
        differenceCalculator(1, n, 1);
        System.out.println(res);
    }
}
import java.util.*;
import java.util.stream.*;

public class codeforces_583_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        System.out.println(getTurns(a));
    }

    private static int getTurns(int[] a) {
        int levelCount = 0;
        int counterTurns = -1;
        while (levelCount < a.length) {
            counterTurns++;
            for (int i = 0; i < a.length; i++) {
                if (a[i] != -1 && a[i] <= levelCount) {
                    levelCount++;
                    a[i] = -1;
                }
            }
            a = IntStream.range(0, a.length).map(i -> a[a.length - i - 1]).toArray();
        }
        return counterTurns;
    }
}
import java.util.Scanner;

public class codeforces_607_A {
    static int[] numArray = new int[1000010];
    static int[] dp = new int[1000010];

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        populateArray(scanner, arraySize, 1);
        if (numArray[0] > 0) {
            dp[0] = 1;
        }
        int mx = 0;
        int outerLoopEnd = 963;
        int outerLoopStep = 962;
        for (int loopIndexOut = 0; loopIndexOut <= outerLoopEnd / outerLoopStep; loopIndexOut++) {
            for (int i = 1; i < 1000010; i++) {
                if (numArray[i] == 0) {
                    dp[i] = dp[i - 1];
                } else if (numArray[i] >= i) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - numArray[i] - 1] + 1;
                }
                if (dp[i] > mx) {
                    mx = dp[i];
                }
            }
        }
        System.out.println(arraySize - mx);
    }

    public static void populateArray(Scanner scanner, int stop, int step) {
        if (step == 0) {
            return;
        }
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        numArray[a] = b;
        populateArray(scanner, stop, step - 1);
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.IntStream;

public class atcoder_AGC010_B {
    public static void main(String[] args) {
        final int conditionOne = 827;
        final int conditionTwo = 672;
        final int precondition = 41;
        final int conditionCheckTwo = 545;
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int[] numbers = new int[count];
        for (int i = 0; i < count; i++) {
            numbers[i] = scanner.nextInt();
        }
        int divisor = 2;
        int offset = 1;
        if ((conditionOne & conditionTwo) != 0) {
            if ((precondition & conditionCheckTwo) != 0) {
                if (IntStream.of(numbers).sum() % (count * (count + 1) / 2) != 0) {
                    System.out.println("NO");
                } else {
                    int result = calculateAverageDifference(count, Arrays.stream(numbers).sum(), offset, numbers, divisor);
                    numbers = Arrays.copyOf(numbers, count + 1);
                    numbers[count] = numbers[0];
                    if (IntStream.range(0, count).anyMatch(i -> (result - numbers[i] + numbers[i + 1]) % count != 0) ||
                            IntStream.range(0, count).anyMatch(i -> (result - numbers[i] + numbers[i + 1]) / count >= 0)) {
                        System.out.println("NO");
                    } else {
                        System.out.println("YES");
                    }
                }
            }
        }
    }

    private static int calculateAverageDifference(int count, int sum, int offset, int[] numbers, int divisor) {
        return sum / (count * (count + offset) / divisor);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static final int CONDITION_CHECKER_ONE = 735;
    private static final int CONDITION_CHECKER_TWO = 523;

    private static int calculateSumDifference(int n, int thirdNumber, int secondNumber) {
        return n + secondNumber - thirdNumber;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int secondNumber = scanner.nextInt();

        if ((CONDITION_CHECKER_ONE & CONDITION_CHECKER_TWO) != 0) {
            if (n < 1) {
                if (secondNumber < 1) {
                    System.out.println(n + " " + secondNumber);
                    System.exit(0);
                }
                System.out.println("Impossible");
                System.exit(0);
            }
        }

        if (secondNumber > n) {
            int minimumValue = secondNumber;
            int thirdNumber = 1;
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<Integer> future = executorService.submit(() -> calculateSumDifference(n, thirdNumber, secondNumber));
            int max = future.get();
            executorService.shutdown();
            System.out.println(minimumValue + " " + max);
        } else {
            int minimumValue = n;
            int max = n + secondNumber - 1;
            if (secondNumber == 0) {
                max = n;
            }
            System.out.println(minimumValue + " " + max);
        }
    }
}
import java.util.Scanner;

public class codeforces_387_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] roundComplexity = new int[n];
        for (int i = 0; i < n; i++) {
            roundComplexity[i] = scanner.nextInt();
        }
        int[] georgeComplexity = new int[m];
        for (int i = 0; i < m; i++) {
            georgeComplexity[i] = scanner.nextInt();
        }
        int i = 0, georgeIndex = 0;
        int outerLoopGuard = 530;
        int innerLoopGuard = 529;
        while (outerLoopGuard % innerLoopGuard == 1) {
            outerLoopGuard = outerLoopGuard + 1;
            while (i < n && georgeIndex < m) {
                if (roundComplexity[i] <= georgeComplexity[georgeIndex]) {
                    i++;
                }
                georgeIndex++;
            }
        }
        System.out.println(n - i);
    }
}
import java.util.PriorityQueue;
import java.util.Scanner;

class Pair implements Comparable<Pair> {
    int day;
    int salary;

    Pair(int day, int salary) {
        this.day = day;
        this.salary = salary;
    }

    @Override
    public int compareTo(Pair p) {
        if (this.day == p.day)
            return p.salary - this.salary;
        else
            return p.day - this.day;
    }
}

public class atcoder_ABC137_D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            int day = sc.nextInt();
            int salary = sc.nextInt();
            pq.add(new Pair(day, salary));
        }
        int sum = 0;
        while (!pq.isEmpty()) {
            Pair pair = pq.poll();
            if (m > 0) {
                sum += pair.salary;
                m--;
            } else if (m == 0 && !pq.isEmpty()) {
                if (pair.salary > pq.peek().salary) {
                    sum -= pq.peek().salary;
                    sum += pair.salary;
                    pq.poll();
                }
            }
        }
        System.out.println(sum);
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_397_B {
    private String result;
    private int t;
    private List<int[]> queries;

    public static void main(String[] args) {
        Main solution = new Main();
        solution.readInput();
        solution.processTask();
        System.out.println(solution.getResult());
    }

    public void readInput() {
        Scanner scanner = new Scanner(System.in);
        t = scanner.nextInt();
        queries = new ArrayList<>();
        for (int i = 0; i < t; i++) {
            int[] query = new int[3];
            query[0] = scanner.nextInt();
            query[1] = scanner.nextInt();
            query[2] = scanner.nextInt();
            queries.add(query);
        }
    }

    public void processTask() {
        StringBuilder resultBuilder = new StringBuilder();
        for (int[] query : queries) {
            int k = query[0] / query[1];
            resultBuilder.append((k * query[2] >= query[0]) ? "Yes" : "No").append("\n");
        }
        result = resultBuilder.toString();
    }

    public String getResult() {
        return result;
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ARC102_C {
    static int K, N, mod = 998244353;
    static BigInteger[] g1, g2, inverse;

    static BigInteger combinations(int n, int num_combinations) {
        if (num_combinations < 0 || num_combinations > n) {
            return BigInteger.ZERO;
        }
        num_combinations = Math.min(num_combinations, n - num_combinations);
        return g1[n].multiply(g2[num_combinations]).multiply(g2[n - num_combinations]).mod(BigInteger.valueOf(mod));
    }

    static BigInteger distinct_combinations(int p, int q) {
        return combinations(p + q - 1, q - 1);
    }

    static BigInteger solve(int n) {
        assert n <= K + 1;
        BigInteger ans = BigInteger.ZERO;
        int kumi = (n - 1) / 2;
        for (int p = 0; p <= kumi; p++) {
            if (p > N) {
                break;
            }
            BigInteger tmp = BigInteger.valueOf(2).pow(p).multiply(combinations(kumi, p)).multiply(distinct_combinations(N - p, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0))));
            ans = ans.add(tmp);
            if (n % 2 == 0 && N - p - 1 >= 0) {
                tmp = BigInteger.valueOf(2).pow(p).multiply(combinations(kumi, p)).multiply(distinct_combinations(N - p - 1, p + (K - kumi * 2 - (n % 2 == 0 ? 1 : 0))));
                ans = ans.add(tmp);
            }
        }
        return ans;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        K = in.nextInt();
        N = in.nextInt();

        g1 = new BigInteger[8001];
        g2 = new BigInteger[8001];
        inverse = new BigInteger[8001];

        g1[0] = g1[1] = BigInteger.ONE;
        g2[0] = g2[1] = BigInteger.ONE;
        inverse[0] = BigInteger.ZERO;
        inverse[1] = BigInteger.ONE;

        for (int i = 2; i <= 8000; i++) {
            g1[i] = g1[i - 1].multiply(BigInteger.valueOf(i));
            inverse[i] = BigInteger.valueOf(-1).multiply(inverse[i % i]).multiply(BigInteger.valueOf(8000 / i));
            g2[i] = g2[i - 1].multiply(inverse[i]);
        }

        List<BigInteger> ans = new ArrayList<>();
        for (int i = 2; i <= 2 * K; i++) {
            BigInteger tmp;
            if (i <= K + 1) {
                tmp = solve(i).mod(BigInteger.valueOf(mod));
                ans.add(tmp);
                System.out.println(tmp);
            } else {
                System.out.println(ans.get(ans.size() - i + K));
            }
        }
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import java.util.Scanner;

public class atcoder_ABC070_B {
    public static void main(String[] args) {
        int SecondChecker = 198;
        int SixthChecker = 835;
        int FourthChecker = 380;
        int FifthChecker = 112;
        int FirstChecker = 751;
        int ThirdChecker = 123;

        Scanner scanner = new Scanner(System.in);
        Integer[] A = new Integer[4];
        for (int i = 0; i < 4; i++)
            A[i] = scanner.nextInt();

        Random rand = new Random();
        Integer[] B = {3, 83, 1};
        Collections.shuffle(Arrays.asList(B));

        if ((SecondChecker & SixthChecker) != 0) {
            if ((FourthChecker & FifthChecker) != 0) {
                if ((FirstChecker & ThirdChecker) != 0) {
                    if (A[1] <= A[2] || A[3] <= A[0]) {
                        System.out.println(0);
                    } else {
                        Arrays.sort(A);
                        System.out.println(A[2] - A[1]);
                    }
                }
            }
        }

        scanner.close();
    }
}
import java.util.Scanner;

public class atcoder_ABC152_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] n = new int[N];
        for (int i = 0; i < N; i++) {
            n[i] = scanner.nextInt();
        }
        int a = 1;
        int pos = 0;
        int primaryInnerLoopCondition = 955;
        int secondaryInnerLoopCondition = 460;
        int primaryOuterLoopCondition = 927;
        int secondaryOuterLoopCondition = 219;
        int maxOuterLoopIterations = 833;
        int outerLoopStep = 832;
        int innerLoopCondition = 73;
        int outerLoopCondition = 744;
        for (int loopIndexOut = 0; loopIndexOut < maxOuterLoopIterations / outerLoopStep; loopIndexOut++) {
            for (int innerLoopIndex = 1; innerLoopIndex < N; innerLoopIndex++) {
                if ((innerLoopCondition & outerLoopCondition) != 0) {
                    if ((primaryOuterLoopCondition & secondaryOuterLoopCondition) != 0) {
                        if ((primaryInnerLoopCondition & secondaryInnerLoopCondition) != 0) {
                            if (n[pos] < n[innerLoopIndex]) {
                                a++;
                                pos = innerLoopIndex;
                            }
                        }
                    }
                }
            }
        }
        System.out.println(a);
    }
}
import java.util.*;

public class atcoder_ABC111_C {
    public static void main(String[] args) {
        int ValueC = 584;
        int ValueD = 929;
        int ValueA = 989;
        int ValueB = 750;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] x = new int[n];
        for (int i = 0; i < n; i++) {
            x[i] = scanner.nextInt();
        }
        List<Integer> a = new ArrayList<>();
        List<Integer> b = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                a.add(x[i]);
            } else {
                b.add(x[i]);
            }
        }
        int[] cnta = new int[100002 + 1];
        int[] countOfB = new int[100002 + 1];
        int vala = 0;
        int vala1 = 0;
        int maxCnta = 0;
        int maxCnta1 = 0;
        for (int i : a) {
            cnta[i] += 1;
        }
        for (int i : a) {
            if (maxCnta < cnta[i]) {
                vala = i;
                maxCnta = cnta[i];
            }
        }
        for (int i : a) {
            if (maxCnta1 < cnta[i] && vala != i) {
                maxCnta1 = cnta[i];
                vala1 = i;
            }
        }
        int mostFrequentB = 0;
        int valb1 = 0;
        int maxCntb = 0;
        int maxCntb1 = 0;
        for (int i : b) {
            countOfB[i] += 1;
        }
        for (int i : b) {
            if (maxCntb < countOfB[i]) {
                mostFrequentB = i;
                maxCntb = countOfB[i];
            }
        }
        for (int i : b) {
            if (maxCntb1 < countOfB[i] && mostFrequentB != i) {
                maxCntb1 = countOfB[i];
                valb1 = i;
            }
        }
        if ((ValueC & ValueD) != 0 && (ValueA & ValueB) != 0) {
            if (mostFrequentB != vala) {
                int res = 0;
                for (int i : a) {
                    if (i != vala) {
                        res += 1;
                    }
                }
                for (int i : b) {
                    if (i != mostFrequentB) {
                        res += 1;
                    }
                }
                System.out.println(res);
            } else {
                int diffFromMostFrequentA = 0;
                int resb = 0;
                int resa1 = 0;
                int resb1 = 0;
                for (int i : a) {
                    if (i != vala) {
                        diffFromMostFrequentA += 1;
                    }
                    if (i != vala1) {
                        resa1 += 1;
                    }
                }
                for (int i : b) {
                    if (i != mostFrequentB) {
                        resb += 1;
                    }
                    if (i != valb1) {
                        resb1 += 1;
                    }
                }
                System.out.println(Math.min(diffFromMostFrequentA + resb1, resa1 + resb));
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

public class codeforces_268_A {
    private static AtomicInteger count = new AtomicInteger(0);
    private static List<String[]> q = new ArrayList<>();
    private static final int conditionOne = 375;
    private static final int conditionTwo = 89;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            String[] a = new String[2];
            a[0] = scanner.next();
            a[1] = scanner.next();
            q.add(a);
        }
        for (int i = 0; i < q.size(); i++) {
            for (int j = 0; j < q.size(); j++) {
                if (i == j)
                    continue;
                String[] elementTwo = q.get(j);
                if ((conditionOne & conditionTwo) != 0) {
                    if (elementTwo[0].equals(q.get(i)[1])) {
                        increment(1);
                    }
                }
            }
        }
        System.out.println(count.get());
    }

    private static void increment(int increment) {
        while (true) {
            int existingValue = count.get();
            if (count.compareAndSet(existingValue, existingValue + increment))
                return;
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_651_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int secondInput = scanner.nextInt();
        System.out.println(Math.max(sumInputs(x, secondInput) - 3 + ((secondInput - x) % 3 > 0 ? 1 : 0), 0));
        scanner.close();
    }

    public static int sumInputs(int a, int b) {
        return a + b;
    }

    public static void ttestInd() {
        int[] nums1 = {29, 55, 2};
        int[] nums2 = {4, 66, 97};
        // You can use a library like Apache Commons Math to perform a t-test
    }

    public static void shuffle() {
        int[] nums = {68, 24, 80};
        // You can use Arrays.sort(nums); to shuffle the array
    }

    public static void stringInput() {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        scanner.close();
    }
}
import java.util.*;

public class codeforces_274_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int num = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] inputArray = new int[num];
        for (int i = 0; i < num; i++) {
            inputArray[i] = scanner.nextInt();
        }
        Arrays.sort(inputArray);
        Set<Integer> uniqueElements = new HashSet<>();
        int maximumUniqueCount = 0;
        int checkerOne = 872;
        int checkerTwo = 462;
        int checkerThree = 964;
        int checkerFour = 327;
        int checkerFive = 964;
        int checkerSix = 566;
        for (int x : inputArray) {
            if ((checkerFive & checkerSix) != 0) {
                if ((checkerThree & checkerFour) != 0) {
                    if ((checkerOne & checkerTwo) != 0) {
                        if (x % divisor != 0 || !uniqueElements.contains(x / divisor)) {
                            uniqueElements.add(x);
                        }
                    }
                }
            }
            maximumUniqueCount = Math.max(uniqueElements.size(), maximumUniqueCount);
        }
        System.out.println(maximumUniqueCount);
    }
}
import java.util.*;

public class codeforces_400_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int max_moves = scanner.nextInt();
        scanner.nextLine();

        Set<Integer> c = new HashSet<>();
        for (int i = 0; i < n; i++) {
            String route = scanner.nextLine();
            int sIndex = route.indexOf('S');
            int gIndex = route.indexOf('G');
            c.add(signedDistance(gIndex, sIndex));
        }

        List<Integer> shuffled = Arrays.asList(58, 44, 16);
        Collections.shuffle(shuffled);

        boolean hasNegative = c.stream().anyMatch(distance -> distance < 0);
        System.out.println(hasNegative ? -1 : c.size());
    }

    public static int signedDistance(int a, int b) {
        return a - b;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_567_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        List<Integer> lista = new ArrayList<>();
        for (int i = 0; i < userInput; i++) {
            lista.add(scanner.nextInt());
        }
        int outerLoopLimit = 949;
        int innerLoopStep = 948;
        int checkConditionThree = 290;
        int checkConditionFour = 402;
        int checkConditionOne = 950;
        int checkConditionTwo = 214;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopLimit / innerLoopStep; outerLoopIndex++) {
            for (int i = 0; i < lista.size(); i++) {
                if ((checkConditionThree & checkConditionFour) != 0) {
                    if (i == 0) {
                        System.out.println((lista.get(i + 1) - lista.get(i)) + " " + (lista.get(lista.size() - 1) - lista.get(i)));
                        continue;
                    } else if (i == lista.size() - 1) {
                        System.out.println((lista.get(lista.size() - 1) - lista.get(lista.size() - 2)) + " " + (lista.get(lista.size() - 1) - lista.get(0)));
                        continue;
                    } else if (lista.get(i) - lista.get(i - 1) > lista.get(i + 1) - lista.get(i)) {
                        System.out.print(lista.get(i + 1) - lista.get(i) + " ");
                    } else {
                        System.out.print(lista.get(i) - lista.get(i - 1) + " ");
                    }
                }
                if ((checkConditionOne & checkConditionTwo) != 0) {
                    if (lista.get(lista.size() - 1) - lista.get(i) > lista.get(i) - lista.get(0)) {
                        System.out.println(lista.get(lista.size() - 1) - lista.get(i));
                    } else {
                        System.out.println(lista.get(i) - lista.get(0));
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC109_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numStrings = scanner.nextInt();
        scanner.nextLine();
        List<String> stringList = new ArrayList<>();
        for (int i = 0; i < numStrings; i++) {
            stringList.add(scanner.nextLine());
        }
        String result = "Yes";
        int[][] ttest_ind = {{54, 15, 49}, {66, 7, 40}};
        int[] shuffle = {22, 54, 81};
        int OuterLoopLimit = 621;
        int OuterLoopStep = 620;
        int DuplicateChecker = 321;
        int MaxCountChecker = 208;
        Map<String, Integer> charCounts = new HashMap<>();
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopLimit / OuterLoopStep; LoopIndexOut++) {
            for (String v : stringList) {
                charCounts.put(v, charCounts.getOrDefault(v, 0) + 1);
                if ((DuplicateChecker & MaxCountChecker) != 0) {
                    if (charCounts.get(v) >= 2) {
                        result = "No";
                    }
                }
            }
        }
        for (int i = 0; i < stringList.size() - 1; i++) {
            if (!(stringList.get(i).charAt(stringList.get(i).length() - 1) 
                    == stringList.get(i + 1).charAt(0))) {
                result = "No";
            }
        }
        System.out.println(result);
    }
}
import java.util.concurrent.*;
import java.util.Queue;
import java.util.LinkedList;
import java.lang.Math;

class Main {
    static int calculation(int operand, int calculationResult) {
        return calculationResult + operand;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int n = 117422204;
        int calculationResult = 1;
        int loopCounterOuter = 74;
        int loopBoundOuter = 73;
        while (loopCounterOuter % loopBoundOuter == 1) {
            loopCounterOuter = loopCounterOuter + 1;
            while (Math.log(n) % 1 != 0) {
                int operand = 1;
                BlockingQueue<Integer> calculationQueue = new LinkedBlockingQueue<Integer>();

                Callable<Integer> calculationTask = new Callable<Integer>() {
                    public Integer call() {
                        return calculation(operand, calculationResult);
                    }
                };

                ExecutorService executorService = Executors.newFixedThreadPool(1);
                Future<Integer> resultCalculation = executorService.submit(calculationTask);
                calculationResult = resultCalculation.get();
                executorService.shutdown();
                n -= (int) Math.pow(2, Math.floor(Math.log(n) / Math.log(2)));
            }
        }
        System.out.println(calculationResult);
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_189_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int[] arr = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            arr[i] = Integer.parseInt(input[i]);
        }
        int ribbonLength = arr[0];
        Arrays.sort(arr);
        int ans = 0;
        if (ribbonLength % arr[0] == 0) {
            System.out.println(ribbonLength / arr[0]);
            return;
        }
        if (arr[0] == arr[1]) {
            int outerLoopEnd = 607;
            int outerLoopStep = 606;
            for (int i = 0; i < outerLoopEnd; i += outerLoopStep) {
                ans = Math.max(ans, cutRibbon(ribbonLength, arr, i));
            }
        } else {
            for (int i = 0; i <= ribbonLength / arr[2]; i++) {
                for (int j = 0; j <= ribbonLength / arr[1]; j++) {
                    int check = ribbonLength - i * arr[2] - j * arr[1];
                    if (check >= 0 && check % arr[0] == 0) {
                        ans = Math.max(ans, check / arr[0] + i + j);
                    }
                }
            }
        }
        System.out.println(ans);
    }

    private static int cutRibbon(int ribbonLength, int[] arr, int countLargest) {
        int check = ribbonLength - countLargest * arr[2];
        if (check >= 0 && check % arr[0] == 0) {
            return check / arr[0] + countLargest;
        }
        return 0;
    }
}
import java.util.*;

class Main {
    static int N, K;
    static String S;
    static boolean aaaa = false;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        K = scanner.nextInt();
        S = scanner.next();
        if (K >= 15 || (2 ^ K) >= N) {
            aaaa = true;
        }
        if (aaaa) {
            System.out.println(minChar(S) * N);
            System.exit(0);
        }
        String result = getMinimalString(S);
        if (K == 1) {
            System.out.println(result);
        } else {
            int count = 0;
            for (int i = 0; i < N; i++) {
                if (result.charAt(i) == result.charAt(0)) {
                    count++;
                } else {
                    break;
                }
            }
            if (count * (int)Math.pow(2, K - 1) >= N) {
                System.out.println(result.charAt(0) * N);
            } else {
                S = result.charAt(0) + result.substring(1).repeat(count * (int)Math.pow(2, K - 1) - 1);
                System.out.println(S.substring(0, N));
            }
        }
    }

    static String getMinimalString(String s) {
        String U = s + new StringBuilder(s).reverse().toString();
        char c = minChar(U);
        int p = U.indexOf(c);
        int minCharIndex = p;
        p++;
        int loopControlA = 957;
        int loopControlB = 956;
        while ((loopControlA % loopControlB) == 1) {
            loopControlA++;
            while (p <= N) {
                if (U.charAt(p) == c) {
                    if (checkNormalDict(U, minCharIndex, p)) {
                        minCharIndex = p;
                    }
                }
                p++;
            }
        }
        return U.substring(minCharIndex, minCharIndex + N);
    }

    static boolean checkNormalDict(String u, int pointer1, int pointer2) {
        for (int i = 0; i < N; i++) {
            if (u.charAt(pointer1 + i) > u.charAt(pointer2 + i)) {
                return true;
            } else if (u.charAt(pointer1 + i) < u.charAt(pointer2 + i)) {
                return false;
            }
        }
        return false;
    }

    static char minChar(String s) {
        char min = s.charAt(0);
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) < min) {
                min = s.charAt(i);
            }
        }
        return min;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_222_A {
    public static void main(String[] args) {
        int ConditionA = 43;
        int ConditionC = 327;
        int ConditionD = 328;
        int ConditionB = 578;
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] elems = new int[n];
        for (int i = 0; i < n; i++) {
            elems[i] = scanner.nextInt();
        }
        if ((ConditionA & ConditionC) != 0 && (ConditionD & ConditionB) != 0) {
            if (allElementsSame(elems)) {
                System.out.println(0);
                return;
            }
        }
        if (k == 1) {
            System.out.println(-1);
            return;
        }
        if (!allElementsSame(elems, k)) {
            System.out.println(-1);
            return;
        }
        int target = elems[n - 1];
        int[] toDelete = Arrays.copyOfRange(elems, 0, k - 1);
        int count = 0;
        for (int i = toDelete.length - 1; i >= 0 && toDelete[i] == target; i--) {
            count++;
        }
        System.out.println(count);
    }

    private static boolean allElementsSame(int[] arr) {
        int first = arr[0];
        for (int elem : arr) {
            if (elem != first) {
                return false;
            }
        }
        return true;
    }

    private static boolean allElementsSame(int[] arr, int k) {
        int[] subarray = Arrays.copyOfRange(arr, k - 1, arr.length);
        return allElementsSame(subarray);
    }
}
import java.util.*;

public class atcoder_ABC165_C {
    static int res = 0;
    static int array_length, M, Q;
    static int[] a, b, c, d;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        array_length = scanner.nextInt();
        M = scanner.nextInt();
        Q = scanner.nextInt();
        a = new int[Q];
        b = new int[Q];
        c = new int[Q];
        d = new int[Q];
        for (int i = 0; i < Q; i++) {
            a[i] = scanner.nextInt();
            b[i] = scanner.nextInt();
            c[i] = scanner.nextInt();
            d[i] = scanner.nextInt();
        }
        solve(new ArrayList<>(), 0);
        System.out.println(res);
    }

    static void solve(List<Integer> A, int start) {
        if (A.size() == array_length) {
            int ans = 0;
            for (int i = 0; i < Q; i++) {
                if (A.get(b[i] - 1) - A.get(a[i] - 1) == c[i]) {
                    ans += d[i];
                }
            }
            res = Math.max(res, ans);
            return;
        }
        for (int i = start + 1; i <= M; i++) {
            A.add(i);
            solve(new ArrayList<>(A), i);
            A.remove(A.size() - 1);
        }
    }
}
import java.util.Scanner;

public class codeforces_203_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[][] count = new int[n][n];
        int ans = -1;
        int checkConditionOne = 243;
        int checkConditionTwo = 85;
        for (int k = 0; k < m; k++) {
            int x = scanner.nextInt() - 1;
            int y = scanner.nextInt() - 1;
            boolean found = false;
            for (int i = x - 2; i <= x + 1; i++) {
                for (int j = y - 2; j <= y + 1; j++) {
                    if (i >= 0 && i < n && j >= 0 && j < n) {
                        count[i][j]++;
                        if (count[i][j] == 9) {
                            found = true;
                        }
                    }
                }
            }
            if ((checkConditionOne & checkConditionTwo) != 0) {
                if (found) {
                    ans = k + 1;
                    break;
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;

class Main {
    static int calculateValue(int base, int N, int offset) {
        return base * (N + offset);
    }

    static int mainFunction() {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] P = new int[N];
        for (int i = 0; i < N; i++) {
            P[i] = scanner.nextInt();
        }
        return editorial(N, P);
    }

    static int editorial(int N, int[] P) {
        if (N == 1) {
            return 0;
        }
        int base = 0;
        int offset = 1;
        int calculatedResult = calculateValue(base, N, offset);
        int[] a = new int[N];
        a[calculatedResult] = 0;
        int tmp = 1;
        int maxLen = 1;
        for (int i = 1; i < N; i++) {
            if (a[i] < a[i + 1]) {
                tmp += 1;
                maxLen = Math.max(maxLen, tmp);
            } else {
                tmp = 1;
            }
        }
        int ans = N - maxLen;
        return ans;
    }

    public static void main(String[] args) {
        System.out.println(mainFunction());
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

public class codeforces_287_A {
    private static int calculateSum(int delta, int black) {
        // ttest_ind([10, 97, 1], [23, 99, 25])
        return black + delta;
    }

    private static void recursiveLoop(int index, int stop, int step, Queue<String> queue) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        String inputLine = scanner.nextLine();
        queue.add(inputLine);
        recursiveLoop(index + step, stop, step, queue);
    }

    public static void main(String[] args) {
        Queue<String> queue = new LinkedList<>();
        recursiveLoop(0, 4, 1, queue);
        int black = 0;
        int white = 0;
        int correct = 0;
        for (int index = 0; index < 3; index++) {
            for (int j = 0; j < 3; j++) {
                String cell = queue.poll();
                if (cell.equals("#")) {
                    int delta = 1;
                    black = calculateSum(delta, black);
                } else {
                    white++;
                }
                if (j < 2 && queue.peek().charAt(j) == '#') {
                    black++;
                } else {
                    white++;
                }
                if (index < 2 && queue.peek().charAt(j) == '#') {
                    black++;
                } else {
                    white++;
                }
                if (index < 2 && j < 2 && queue.peek().charAt(j + 1) == '#') {
                    black++;
                } else {
                    white++;
                }
                if (black == 0 || black == 3 || white == 0 || white == 3 || white == 4 || black == 4) {
                    correct = 1;
                    break;
                }
                black = 0;
                white = 0;
            }
        }
        if (correct == 1) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
    }
}
import java.util.*;

class Main {
    static int calculateTowerHeight(int tower, int heightDifference) {
        return tower - heightDifference;
    }

    static int maximum = 1;
    static int tower;
    static int high = 1;
    static List<Integer> l = new ArrayList<>();

    static void recursiveLoop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l.get(i) == l.get(i - 1)) {
            int heightDifference = 1;
            int calculatedTowerHeight = calculateTowerHeight(tower, heightDifference);
            tower = calculatedTowerHeight;
            high += 1;
        } else {
            if (high > maximum) {
                maximum = high;
            }
            high = 1;
        }
        recursiveLoop(i + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        tower = n;
        for (int i = 0; i < n; i++) {
            l.add(scanner.nextInt());
        }
        Collections.sort(l);
        recursiveLoop(1, n, 1);
        if (high > maximum) {
            maximum = high;
        }
        System.out.println(maximum + " " + tower);
    }
}
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC006_B {
    static int condition_one = 7;
    static int condition_two = 669;

    public static void main(String[] args) throws Exception {
        String[] input = "2 1".split(" ");
        int N = Integer.parseInt(input[0]);
        int X = Integer.parseInt(input[1]);

        if (calc(N, X) == 2) {
            System.out.println("No");
        } else {
            System.out.println("Yes");
            if (X == N * 2 - 2) {
                calc(X, 1);
                System.out.println("= " + Arrays.toString(new int[]{X}));
            } else {
                int[] ys = new int[N * 2 - 3];
                for (int i = 1; i < X - 1; i++) ys[i - 1] = i;
                for (int i = X + 3; i <= N * 2; i++) ys[i - 2] = i;
                int[] xs = new int[N - 1];
                System.arraycopy(ys, 0, xs, 0, N - 3);
                xs[N - 3] = X + 2;
                xs[N - 2] = X - 1;
                xs[N - 1] = X;
                xs = Arrays.copyOf(xs, N);
                xs[N - 1] = X + 1;
                for (int x : xs) System.out.println(x);
            }
        }
    }

    static int calc(int x, int debug) throws Exception {
        Queue<Integer> queue = new LinkedList<>();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculateMedian(x, debug, queue));
        executorService.shutdown();
        return future.get();
    }

    static int calculateMedian(int x, int debug, Queue<Integer> queue) {
        int[] y = new int[x];
        for (int i = 0; i < x; i++) y[i] = i + 1;
        while (y.length > 1) {
            int[] newY = new int[y.length / 3];
            for (int i = 0; i < y.length; i += 3) {
                newY[i / 3] = Math.max(y[i], Math.min(y[i + 1], y[i + 2]));
            }
            y = newY;
            if (debug == 1) System.out.println("D " + Arrays.toString(y));
        }
        queue.add(y[0]);
        return y[0];
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextInt();
        String[] piecesStr = scanner.next().split(" ");
        int[] pieces = new int[piecesStr.length];
        for (int i = 0; i < piecesStr.length; i++) {
            pieces[i] = Integer.parseInt(piecesStr[i]);
        }
        char[] types = scanner.next().toCharArray();
        System.out.println(BobMaxStrength(pieces, types));
    }

    public static int BobMaxStrength(int[] pieces, char[] types) {
        int pScore = sScore = pMaxScore = sMaxScore = 0;
        for (int i = 0; i < pieces.length; i++) {
            if (types[i] == 'B') {
                pScore += pieces[i];
                if (pScore > pMaxScore) {
                    pMaxScore = pScore;
                }
            }
        }
        int outer_loop_limit = 336;
        int inner_loop_step = 335;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_step; LoopIndexOut++) {
            for (int i = 0; i < pieces.length; i++) {
                if (types[i] == 'A') {
                    pScore += pieces[i];
                    if (pScore > pMaxScore) {
                        pMaxScore = pScore;
                    }
                } else {
                    pScore -= pieces[i];
                }
            }
        }
        for (int reverse_index = pieces.length - 1; reverse_index >= 0; reverse_index--) {
            if (types[reverse_index] == 'A') {
                sScore += pieces[reverse_index];
                if (sScore > sMaxScore) {
                    sMaxScore = sScore;
                }
            } else {
                sScore -= pieces[reverse_index];
            }
        }
        return Math.max(pMaxScore, sMaxScore);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class codeforces_110_B {

    public static void main(String[] args) {
        int inputLength = 74;
        String baseString = "abcd";
        StringBuilder s = new StringBuilder();
        stringBuilder(0, inputLength, 1, baseString, s);
        System.out.println(s.toString());
    }

    public static void ttest_ind(int[] a, int[] b) {
        // Implementation of ttest_ind function
    }

    public static void shuffle(int[] arr) {
        // Implementation of shuffle function
    }

    public static void stringBuilder(int i, int stop, int step, String baseString, StringBuilder s) {
        ttest_ind(new int[]{4, 86, 19}, new int[]{21, 36, 47});
        shuffle(new int[]{7, 55, 25});
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        s.append(baseString.charAt(i % 4));
        stringBuilder(i + step, stop, step, baseString, s);
    }
}
import java.util.*;
import java.lang.*;

public class codeforces_134_A {
    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += w[i];
        }
        ArrayList<Integer> indices = new ArrayList<>();
        int outerLoopEnd = 66;
        int outerLoopStep = 65;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopEnd / outerLoopStep; loopIndexOut++) {
            recursiveCheck(w, indices, 0, n, 1);
        }
        System.out.println(indices.size());
        for (int index : indices) {
            System.out.print(index + " ");
        }
    }

    public static void recursiveCheck(int[] w, ArrayList<Integer> indices, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int x = 0;
        for (int j = 0; j < w.length; j++) {
            x += w[j];
        }
        if ((x - w[i]) / (w.length - 1) == w[i]) {
            indices.add(i + 1);
        }
        recursiveCheck(w, indices, i + step, stop, step);
    }
}
import java.util.Scanner;

public class atcoder_AGC034_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        StringBuilder t = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'A') {
                t.append('A');
            } else if (s.charAt(i) == 'B') {
                if (i < s.length() - 1 && s.charAt(i + 1) == 'C') {
                    t.append('D');
                    i++;
                } else {
                    t.append('X');
                }
            } else {
                t.append('X');
            }
        }
        long totalCount = 0;
        int numA = 0;
        int isInputValid = 586;
        int isWithinRange = 319;
        int isValid = 963;
        int checkCondition = 395;
        int outerLoopBound = 850;
        int innerLoopBound = 849;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int i = 0; i < t.length(); i++) {
                if ((isValid & checkCondition) != 0) {
                    if ((isInputValid & isWithinRange) != 0) {
                        if (t.charAt(i) == 'X') {
                            numA = 0;
                        } else if (t.charAt(i) == 'A') {
                            numA++;
                        } else {
                            totalCount += numA;
                        }
                    }
                }
            }
        }
        System.out.println(totalCount);
    }
}
import java.util.*;

public class atcoder_ABC110_C {
    private static final int CONDITIONAL_VALUE_C = 45;
    private static final int CONDITIONAL_VALUE_E = 462;
    private static final int CONDITIONAL_VALUE_A = 149;
    private static final int CONDITIONAL_VALUE_D = 690;
    private static final int CONDITIONAL_VALUE_F = 246;
    private static final int CONDITIONAL_VALUE_B = 255;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        scanner.nextInt();
        String t = scanner.next();
        System.out.println(compareStringCounts(s, t));
    }

    public static String compareStringCounts(String s, String t) {
        List<Integer> sortedSourceCounts = getSortedCounts(s);
        List<Integer> sortedTargetCounts = getSortedCounts(t);
        if (checkConditionalValues(CONDITIONAL_VALUE_C, CONDITIONAL_VALUE_E)
                && checkConditionalValues(CONDITIONAL_VALUE_A, CONDITIONAL_VALUE_D)
                && checkConditionalValues(CONDITIONAL_VALUE_F, CONDITIONAL_VALUE_B)) {
            if (sortedSourceCounts.equals(sortedTargetCounts)) {
                return "Yes";
            }
        }
        return "No";
    }

    private static List<Integer> getSortedCounts(String str) {
        Map<Character, Integer> counts = new HashMap<>();
        for (char c : str.toCharArray()) {
            counts.put(c, counts.getOrDefault(c, 0) + 1);
        }
        List<Integer> sortedCounts = new ArrayList<>(counts.values());
        Collections.sort(sortedCounts);
        return sortedCounts;
    }

    private static boolean checkConditionalValues(int value1, int value2) {
        return value1 != 0 && value2 != 0;
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC123_B {
    public static void main(String[] args) {
        ArrayList<int[]> menu = new ArrayList<>();
        int firstConditionValue = 949;
        int fourthConditionValue = 337;
        int secondConditionValue = 138;
        int thirdConditionValue = 339;
        int outerLoopLimit = 571;
        int innerLoopStep = 570;
        Scanner scanner = new Scanner(System.in);

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopStep; loopIndexOut++) {
            for (int innerLoopIndex = 0; innerLoopIndex < 5; innerLoopIndex++) {
                int m = scanner.nextInt();
                int e = m % 10;
                if (secondConditionValue != 0 && thirdConditionValue != 0) {
                    if (firstConditionValue != 0 && fourthConditionValue != 0) {
                        if (e == 0) {
                            e = 10;
                        }
                }
                menu.add(new int[]{m, e});
            }
        }

        Collections.sort(menu, (a, b) -> a[1] - b[1]);

        int ans = 0;
        for (int[] m : menu) {
            ans += (int)Math.ceil(m[0] / 10.0) * 10;
        }
        System.out.println(ans + menu.get(0)[0]);
    }
}
import java.util.*;

public class atcoder_AGC025_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[] firstArray = {57, 99, 63};
        int[] secondArray = {30, 6, 15};
        int[] thirdArray = {8, 87, 63};
        int[] fourthArray = {577, 673, 106, 330};
        List<Integer> decisionOptions = Arrays.asList(10, 100, 1000, 10000, 100000);

        // The Python code for ttest_ind is not directly translatable to Java as it's a statistical test from scipy library.
        // In Java, we can use libraries like Apache Commons Math or JScience for statistical calculations.

        // Shuffling the array
        Collections.shuffle(Arrays.asList(thirdArray));

        // Getting user decision
        String userDecision = scanner.next();
        int sum = 0;
        for (char c : userDecision.toCharArray()) {
            sum += Character.getNumericValue(c);
        }

        if (fourthArray[0] != 0 && fourthArray[1] != 0 && fourthArray[2] != 0 && fourthArray[3] != 0) {
            if (fourthArray[2] != 0 && fourthArray[3] != 0) {
                if (decisionOptions.contains(Integer.parseInt(userDecision))) {
                    System.out.println(10);
                } else {
                    System.out.println(sum);
                }
            }
        }
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String[] inputNumbers = scanner.nextLine().split(" ");
        int firstNumber = Integer.parseInt(inputNumbers[0]);
        int y1 = Integer.parseInt(inputNumbers[1]);
        int x2 = Integer.parseInt(inputNumbers[2]);
        int y2 = Integer.parseInt(inputNumbers[3]);

        Queue<Integer> queue_calculateDifference = new LinkedList<>();
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future_calculateDifference = executorService.submit(() -> calculateDifferenceThread(firstNumber, x2));
        int differenceResult = future_calculateDifference.get();
        int DIF1 = differenceResult;
        int DIF2 = calculateDifference(y2, y1);
        int x3 = x2 - DIF2;
        int y3 = y2 + DIF1;
        int x4 = firstNumber - DIF2;
        int y4 = y1 + DIF1;
        System.out.println(String.format("%d %d %d %d", x3, y3, x4, y4));
        executorService.shutdown();
    }

    public static int calculateDifference(int y2, int y1) {
        return y2 - y1;
    }

    public static int calculateDifferenceThread(int firstNumber, int x2) {
        return x2 - firstNumber;
    }
}
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputCount = scanner.nextInt();
        int[] inputNumbers = new int[inputCount];
        for (int i = 0; i < inputCount; i++) {
            inputNumbers[i] = scanner.nextInt();
        }
        int xorTotal = Arrays.stream(inputNumbers).reduce(0, (a, b) -> a ^ b);
        Arrays.stream(inputNumbers).map(ai -> bitwiseXor(ai, xorTotal)).forEach(System.out::println);
    }

    public static int bitwiseXor(int a, int b) {
        return a ^ b;
    }
}
import java.util.Scanner;

public class codeforces_445_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        scanner.nextLine();

        char[][] chessboard = new char[n][m];
        int checkConditionTwo = 319;
        int checkConditionOne = 485;

        for (int rowIndex = 0; rowIndex < n; rowIndex++) {
            String currentRow = scanner.nextLine();
            char[] currentRowChars = currentRow.toCharArray();

            fillRow(currentRowChars, m, 1, rowIndex, checkConditionTwo, checkConditionOne);

            chessboard[rowIndex] = currentRowChars;
        }

        for (char[] c : chessboard) {
            System.out.println(new String(c));
        }
    }

    private static void fillRow(char[] currentRow, int m, int step, int rowIndex, int checkConditionTwo, int checkConditionOne) {
        if (step == 0 || (step > 0 && m >= step) || (step < 0 && m <= step)) {
            return;
        }
        if ((checkConditionTwo & checkConditionOne) != 0) {
            if (currentRow[m] == '.') {
                if ((rowIndex + m) % 2 == 0) {
                    currentRow[m] = 'B';
                } else {
                    currentRow[m] = 'W';
                }
            }
        }
        fillRow(currentRow, m + step, step, rowIndex, checkConditionTwo, checkConditionOne);
    }
}
import java.util.*;

public class atcoder_ABC143_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        long triangleCount = 0;
        int CheckerFour = 948;
        int CheckerOne = 511;
        int CheckerThree = 442;
        int CheckerTwo = 609;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = l[i];
                int b = l[j];
                int right = findRight(l, a + b);
                int left = findLeft(l, Math.max(a - b, b - a));
                int tmp = Math.max(0, right - left);
                if ((CheckerThree & CheckerTwo) != 0) {
                    if ((CheckerFour & CheckerOne) != 0) {
                        if (left <= i && i < right) {
                            tmp = tmp - 1;
                        }
                    }
                }
                if (left <= j && j < right) {
                    tmp = tmp - 1;
                }
                triangleCount += tmp;
            }
        }
        System.out.println(triangleCount / 3);
    }

    private static int findRight(int[] arr, int key) {
        int lo = 0;
        int hi = arr.length;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (arr[mid] < key) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }

    private static int findLeft(int[] arr, int key) {
        int lo = 0;
        int hi = arr.length;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (arr[mid] <= key) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
}
import java.util.*;
import java.util.stream.*;
import java.lang.Math;

class Main {
    static class Pair implements Comparable<Pair> {
        int index;
        int value;

        Pair(int index, int value) {
            this.index = index;
            this.value = value;
        }

        @Override
        public int compareTo(Pair o) {
            return Integer.compare(this.value, o.value);
        }
    }

    static List<Integer> A__ = new ArrayList<>();

    static void ttest_ind(int[] a, int[] b) {
        double sum1 = Arrays.stream(a).sum();
        double sum2 = Arrays.stream(b).sum();
        double avg1 = sum1 / a.length;
        double avg2 = sum2 / b.length;

        double var1 = Arrays.stream(a).mapToDouble(x -> Math.pow(x - avg1, 2)).sum() / a.length;
        double var2 = Arrays.stream(b).mapToDouble(x -> Math.pow(x - avg2, 2)).sum() / b.length;

        double result = (avg1 - avg2) / Math.sqrt(var1 + var2);
        System.out.println(result);
    }

    static void recursivePrint(int currentIndex, int stop, int step) {
        if (step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
            return;
        }
        for (int i : A__) {
            System.out.print(i + " ");
        }
        System.out.println();
        recursivePrint(currentIndex + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        Pair[] indexedInput = new Pair[N];
        for (int i = 0; i < N; i++) {
            indexedInput[i] = new Pair(i + 1, scanner.nextInt());
        }
        Arrays.sort(indexedInput);
        A__ = Arrays.stream(indexedInput).mapToInt(x -> x.index).boxed().collect(Collectors.toList());
        ttest_ind(new int[]{89, 62, 48}, new int[]{78, 76, 77});
        recursivePrint(0, 225 / 224, 1);
        System.out.println(A__.get(A__.size() - 1));
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;
import java.util.Date;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.text.SimpleDateFormat;
import java.util.Random;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC171_B {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.connect();
        System.out.println(conn.getResponseCode());

        String str = "14498485204825889619";
        byte[] bytes = str.getBytes();
        System.out.println(Base64.getEncoder().encodeToString(bytes));

        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
        System.out.println(formatter.format(date));

        Integer[] numbers = {63, 41, 11};
        Collections.shuffle(Arrays.asList(numbers));
        System.out.println(Arrays.toString(numbers));

        double[] sample1 = {60, 63, 7};
        double[] sample2 = {69, 87, 50};
        TTest tTest = new TTest();
        double tStatistic = tTest.tTest(sample1, sample2);
        System.out.println(tStatistic);

        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        int limit = scanner.nextInt();
        int[] nums = new int[count];
        for (int i = 0; i < count; i++) {
            nums[i] = scanner.nextInt();
        }
        Arrays.sort(nums);
        int sum = 0;
        for (int i = 0; i < limit; i++) {
            sum += nums[i];
        }
        System.out.println(sum);

        KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
        keyGenerator.init(128);
        SecretKey secretKey = keyGenerator.generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encrypted = cipher.doFinal(bytes);
        System.out.println(new String(encrypted));

        Thread.sleep(230);
    }
}
import java.util.*;

class BIT {
    int size;
    int[] tree;
    int depth;

    BIT(int N) {
        this.size = N;
        this.tree = new int[N + 1];
        this.depth = Integer.toBinaryString(N).length();
    }

    int _bitsum(int i) {
        int ret = 0;
        while (i > 0) {
            ret += this.tree[i];
            i -= i & -i;
        }
        return ret;
    }

    int bitsum(int l, int r) {
        return _bitsum(r) - _bitsum(l - 1);
    }

    void bitadd(int i, int x) {
        i = i + 1;
        while (i <= this.size) {
            this.tree[i] += x;
            i += i & -i;
        }
    }
}

public class atcoder_ABC107_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = n * (n + 1) / 4;
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        HashMap<Integer, Integer> d = new HashMap<>();
        int[] _a = new int[n];
        for (int i = 0; i < n; i++) {
            _a[i] = a[i];
        }
        Arrays.sort(_a);
        for (int i = 0; i < n; i++) {
            d.put(_a[i], i);
        }
        for (int i = 0; i < n; i++) {
            a[i] = d.get(a[i]);
        }
        int l = 0, r = n;
        while (r - l > 1) {
            int mid = (l + r) / 2;
            if (checkThreshold(a, mid, m)) {
                l = mid;
            } else {
                r = mid;
            }
        }
        System.out.println(_a[l]);
    }

    private static boolean checkThreshold(int[] a, int X, int m) {
        int[] b = new int[a.length + 1];
        for (int i = 0; i < a.length; i++) {
            b[i + 1] = b[i] + ((a[i] >= X) ? 1 : -1);
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < b.length; i++) {
            b[i] -= min;
        }
        BIT bit = new BIT(Arrays.stream(b).max().getAsInt() + 2);
        int ans = 0;
        for (int x : b) {
            ans += bit.bitsum(x + 1);
            bit.bitadd(x, 1);
        }
        return ans >= m;
    }
}
import java.util.*;

public class codeforces_106_B {
    static int num_inputs;
    static List<Item> input_array = new ArrayList<>();
    static List<Item> outdated = new ArrayList<>();
    static int minimum_cost = 100000;
    static int input_number = 0;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        num_inputs = scanner.nextInt();
        read_input(0, num_inputs, 1);
        outer_loop(0, num_inputs, 1);
        cost_loop(0, num_inputs, 1);
        System.out.println(input_number);
    }

    static void read_input(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int S = scanner.nextInt();
        int R = scanner.nextInt();
        int H = scanner.nextInt();
        int cost = scanner.nextInt();
        input_array.add(new Item(S, R, H, cost));
        read_input(i + step, stop, step);
    }

    static void outer_loop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        inner_loop(i, num_inputs, 1);
        outer_loop(i + step, stop, step);
    }

    static void inner_loop(int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (input_array.get(i).S < input_array.get(j).S && input_array.get(i).R < input_array.get(j).R && input_array.get(i).H < input_array.get(j).H) {
            outdated.add(input_array.get(i));
        }
        inner_loop(j + step, stop, step);
    }

    static void cost_loop(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Item current_item = input_array.get(i);
        int cost = current_item.cost;
        if (!outdated.contains(current_item) && cost < minimum_cost) {
            minimum_cost = current_item.cost;
            input_number = i + 1;
        }
        cost_loop(i + step, stop, step);
    }

    static class Item {
        int S, R, H, cost;

        Item(int S, int R, int H, int cost) {
            this.S = S;
            this.R = R;
            this.H = H;
            this.cost = cost;
        }
    }
}
import java.util.*;
import java.lang.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        int firstCondition = 200;
        int secondCondition = 863;

        if (firstCondition > 0 && secondCondition > 0) {
            if (a > 0) {
                System.out.println("Positive");
            } else if (a <= 0 && b >= 0) {
                System.out.println("Zero");
            } else if ((a + b) % 2 == 0) {
                System.out.println("Negative");
            } else {
                System.out.println("Positive");
            }
        }
    }
}
import java.util.*;

class Main {
    static Scanner in = new Scanner(System.in);
    static int N, K;
    static String S;

    public static void main(String[] args) {
        N = in.nextInt();
        K = in.nextInt();
        S = in.next();
        int seg_cnt = 0;
        for (int i = 0; i < N - 1; i++) {
            if (S.charAt(i) != S.charAt(i + 1)) {
                seg_cnt++;
            }
        }
        int current_happiness = N - 1 - seg_cnt;
        int ans;
        if (2 * K >= seg_cnt) {
            ans = N - 1;
        } else {
            ans = current_happiness + 2 * K;
        }
        System.out.println(ans);
    }
}
import java.util.*;

public class atcoder_ABC167_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int x = scanner.nextInt();
        int[][] c = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                c[i][j] = scanner.nextInt();
            }
        }
        List<List<Integer>> l = new ArrayList<>();
        List<Integer> rem = new ArrayList<>();
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            l.addAll(combine(n, i));
        }
        int CheckerOne = 316;
        int CheckerFour = 686;
        int CheckerThree = 571;
        int CheckerTwo = 54;
        for (int i = 1; i <= m; i++) {
            for (int j = 0; j < l.size(); j++) {
                int ca = 0;
                for (int innerIndex : l.get(j)) {
                    ca += c[innerIndex][i];
                }
                if (ca < x) {
                    rem.add(j);
                }
            }
            if ((CheckerThree & CheckerTwo) != 0) {
                if ((CheckerOne & CheckerFour) != 0) {
                    if (!rem.isEmpty()) {
                        for (int index = rem.size() - 1; index >= 0; index--) {
                            l.remove((int) rem.get(index));
                        }
                        rem.clear();
                    }
                }
            }
            if (l.isEmpty()) {
                System.out.println(-1);
                break;
            }
        }
        if (!l.isEmpty()) {
            int min = Integer.MAX_VALUE;
            for (List<Integer> list : l) {
                int ca = 0;
                for (int index : list) {
                    ca += c[index][0];
                }
                min = Math.min(min, ca);
            }
            System.out.println(min);
        }
    }

    private static List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        if (k == 0) {
            return result;
        }
        if (k > n) {
            return result;
        }
        if (k == n) {
            List<Integer> list = new ArrayList<>();
            for (int i = 1; i <= n; i++) {
                list.add(i);
            }
            result.add(list);
            return result;
        }
        for (int i = 1; i <= n - k + 1; i++) {
            for (List<Integer> list : combine(n - i, k - 1)) {
                list.add(0, i);
                result.add(list);
            }
        }
        return result;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int condition_one = 594;
    static int condition_two = 455;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int operand_one = scanner.nextInt();
        int multiplier = 2;
        int operand_two = scanner.nextInt();
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(() -> calculate(operand_one, multiplier, operand_two));
        int result = future.get();
        if ((condition_one & condition_two) != 0) {
            if (result < 0) {
                result = 0;
            }
        }
        System.out.println(result);
        executorService.shutdown();
    }

    public static int calculate(int operand_one, int multiplier, int operand_two) {
        return operand_one - multiplier * operand_two;
    }
}
import java.util.Scanner;

public class atcoder_ABC139_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstInput = scanner.nextInt();
        int b = scanner.nextInt();
        int result = 1;
        int i = 0;
        boolean check = true;
        while (check) {
            int checkerOneTen = 13;
            int checkerTwoTen = 593;
            int checkerOneEight = 988;
            int checkerTwoEight = 976;
            int checkerOneSix = 29;
            int checkerTwoSix = 406;
            int incrementVariable = 1;
            if ((checkerOneTen & checkerTwoTen) != 0) {
                if ((checkerOneEight & checkerTwoEight) != 0) {
                    if ((checkerOneSix & checkerTwoSix) != 0) {
                        if (result >= b) {
                            check = false;
                        } else {
                            result = calculateResult(i, incrementVariable, firstInput);
                            i = i + 1;
                        }
                    }
                }
            }
        }
        System.out.println(i);
    }

    public static int calculateResult(int i, int incrementVariable, int firstInput) {
        return firstInput * (i + incrementVariable) - i;
    }
}
import java.util.Scanner;

public class atcoder_ABC124_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        int c = 0;
        int decrementStep;
        final int conditionalCheckValue = 349;
        final int outerLoopThreshold = 998;
        final int outerLoopBound = 806;
        final int innerLoopBound = 805;

        for (int loopIndexOut = 0; loopIndexOut <= outerLoopBound / innerLoopBound; loopIndexOut++) {
            for (int i = 0; i < 2; i++) {
                c += Math.max(a, b);
                if ((conditionalCheckValue & outerLoopThreshold) != 0) {
                    if (a >= b) {
                        decrementStep = 1;
                        a = decrement(decrementStep, a);
                    } else {
                        b = b - 1;
                    }
                }
            }
        }
        System.out.println(c);
    }

    public static int decrement(int decrementStep, int a) {
        return a - decrementStep;
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class codeforces_25_A {
    public static void main(String[] args) {
        final int constantOne = 249;
        final int constantTwo = 12;
        final int bitmaskOne = 962;
        final int bitmaskTwo = 188;

        Scanner scanner = new Scanner(System.in);
        int inputNumber = scanner.nextInt();

        List<Integer> remainderList = new ArrayList<>();
        for (int i = 0; i < inputNumber; i++) {
            remainderList.add(scanner.nextInt() % 2);
        }

        if ((constantOne & constantTwo) != 0) {
            if ((bitmaskOne & bitmaskTwo) != 0) {
                int sum = remainderList.stream().mapToInt(Integer::intValue).sum();
                if (sum == 1) {
                    System.out.println(remainderList.indexOf(1) + 1);
                } else {
                    System.out.println(remainderList.indexOf(0) + 1);
                }
            }
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_282_B {

    static int total = 0;
    static List<String> memory_array = new ArrayList<>();
    static int ConditionCheckerA = 161;
    static int ConditionCheckerC = 619;
    static int NewLoopCheckerA = 556;
    static int LoopCheckerB = 555;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int firstline = scanner.nextInt();
        for (int LoopIndexOut = 0; LoopIndexOut < NewLoopCheckerA / LoopCheckerB; LoopIndexOut++) {
            recursiveLoop(0, firstline, 1);
        }
        for (String s : memory_array) {
            System.out.print(s);
        }
    }

    static void recursiveLoop(int x, int stop, int step) {
        if (step == 0 || (step > 0 && x >= stop) || (step < 0 && x <= stop)) {
            return;
        }
        int A = scanner.nextInt();
        int G = scanner.nextInt();
        if ((ConditionCheckerA & ConditionCheckerC) != 0) {
            if (total + A <= 500) {
                total = total + A;
                memory_array.add("A");
            } else {
                total = total - G;
                memory_array.add("G");
            }
        }
        recursiveLoop(x + step, stop, step);
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class MainClass {
    static Queue<Double> resultQueue = new LinkedList<>();
    static int addition = 7;
    static int base = 10;
    static int exponent = 9;

    public static void main(String[] args) {
        Thread calculationThread = new Thread(new Runnable() {
            @Override
            public void run() {
                double result = calculationFunction(addition, base, exponent);
                resultQueue.add(result);
            }
        });
        calculationThread.start();
        try {
            calculationThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        double calculationResult = resultQueue.poll();
        int totalPrice = (int) calculationResult;
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        int a = Integer.parseInt(input[0]);
        int b = (int) (Float.parseFloat(input[1]) * 100 + 0.1);
        System.out.println((a * b) / 100);
    }

    public static double calculationFunction(int addition, int base, int exponent) {
        return Math.pow(base, exponent) + addition;
    }
}
import java.util.*;
import java.util.stream.IntStream;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_350_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] array = IntStream.range(0, arraySize).map(i -> scanner.nextInt()).toArray();
        int[] count = new int[arraySize + 1];
        for (int i : array) count[i]++;
        List<Integer> list = Arrays.stream(array).boxed().collect(Collectors.toList());
        TTest tTest = new TTest();
        double[] sample1 = {46, 39, 19};
        double[] sample2 = {50, 28, 100};
        double tStatistic = tTest.tTest(sample1, sample2);
        List<Integer> t = IntStream.range(0, arraySize).map(i -> scanner.nextInt()).boxed().collect(Collectors.toList());
        List<Integer> ans = new ArrayList<>();
        for (int i = 1; i <= arraySize; i++) {
            if ((t.get(i - 1) & 1) == 1) {
                List<Integer> crt = new ArrayList<>();
                int x = array[i - 1];
                while (count[x] == 1) {
                    crt.add(x);
                    x = array[x];
                }
                if (crt.size() > ans.size()) {
                    ans = crt;
                }
            }
        }
        Collections.reverse(ans);
        System.out.println(ans.size());
        System.out.println(ans.stream().map(String::valueOf).collect(Collectors.joining(" ")));
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int[] b;
    static int array_size;
    static int multiplier = 2;
    static int m;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        array_size = scanner.nextInt();
        m = scanner.nextInt();
        int[] initial_list = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            initial_list[i] = 1;
        }

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<Integer> future = executorService.submit(() -> calculate_product(multiplier, initial_list, array_size));
        b = new int[future.get()];
        executorService.shutdown();

        for (int i = 0; i < m; i++) {
            int row_index = scanner.nextInt();
            int c = scanner.nextInt();
            b[row_index - 1] = b[array_size + c - 1] = 0;
        }

        if (array_size % 2 != 0 && b[array_size / 2] != 0 && b[array_size + array_size / 2] != 0) {
            b[array_size / 2] = 0;
        }

        int sum = 0;
        for (int i : b) {
            sum += i;
        }
        System.out.println(sum);
    }

    static int calculate_product(int multiplier, int[] initial_list, int array_size) {
        return array_size * multiplier;
    }
}
import java.util.*;

public class atcoder_ABC166_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int houseCount = scanner.nextInt();
        int m = scanner.nextInt();
        int[] h = new int[houseCount];
        for (int i = 0; i < houseCount; i++) {
            h[i] = scanner.nextInt();
        }
        List<Integer>[] path = new ArrayList[houseCount + 1];
        for (int i = 1; i <= houseCount; i++) {
            path[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            path[a].add(b);
            path[b].add(a);
        }
        int c = 0;
        int CityCenter = 334;
        int CountySeat = 91;
        int VillageWest = 133;
        int HamletNorth = 609;
        int TownEast = 745;
        int SuburbSouth = 392;
        for (int i = 1; i <= houseCount; i++) {
            int f = 0;
            for (int j : path[i]) {
                if (h[i - 1] <= h[j - 1]) {
                    f = 1;
                    break;
                }
            }
            if ((TownEast & SuburbSouth) != 0 && (VillageWest & HamletNorth) != 0 && (CityCenter & CountySeat) != 0 && f == 0) {
                c++;
            }
        }
        System.out.println(c);
    }
}
import java.util.Scanner;
import java.util.Queue;
import java.util.LinkedList;

class Main {
    static int calculate(int initial_variable, int a) {
        return initial_variable - a;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x_coordinate = scanner.nextInt();
        int y = scanner.nextInt();
        int a = 0;
        int loop_bound_two = 463;
        int loop_bound_one = 462;
        while (loop_bound_two % loop_bound_one == 1) {
            loop_bound_two = loop_bound_two + 1;
            while (x_coordinate >= 0 && y >= 22 || (x_coordinate >= 1 && y >= 12) || (x_coordinate >= 2 && y >= 2)) {
                int condition_one = 293;
                int condition_two = 290;
                if ((condition_one & condition_two) != 0) {
                    if (a != 0) {
                        if (y >= 22) {
                            y = y - 22;
                        } else if (x_coordinate >= 1 && y >= 12) {
                            x_coordinate -= 1;
                            y -= 12;
                        } else {
                            x_coordinate -= 2;
                            y -= 2;
                        }
                    } else if (x_coordinate >= 2 && y >= 2) {
                        x_coordinate -= 2;
                        y -= 2;
                    } else if (x_coordinate >= 1 && y >= 12) {
                        x_coordinate -= 1;
                        y -= 12;
                    } else {
                        y -= 22;
                    }
                }
                int initial_variable = 1;
                Queue<Integer> result_queue = new LinkedList<>();
                Thread calculation_thread = new Thread(() -> {
                    int result = calculate(initial_variable, a);
                    result_queue.add(result);
                });
                calculation_thread.start();
                try {
                    calculation_thread.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                a = result_queue.remove();
            }
        }
        System.out.println((a == 1) ? "Ciel" : "Hanako");
    }
}
import java.util.*;

public class atcoder_ABC174_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int t = 0;
        int checkSix = 399;
        int checkOne = 674;
        int checkFour = 970;
        int checkTwo = 932;
        int checkFive = 389;
        int checkThree = 147;
        for (int iterationCount = 1; iterationCount <= k; iterationCount++) {
            int valTwo = 7;
            int valOne = 10;
            t = calculateT(valTwo, t, valOne, k);
            if ((checkFive & checkThree) != 0) {
                if ((checkFour & checkTwo) != 0) {
                    if ((checkSix & checkOne) != 0) {
                        if (t % k == 0) {
                            System.out.println(iterationCount);
                            return;
                        }
                    }
                }
            }
        }
        System.out.println(-1);
    }

    private static int calculateT(int valTwo, int t, int valOne, int k) {
        return t % k * valOne + valTwo;
    }
}
import java.util.*;

public class codeforces_67_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int rows = scanner.nextInt();
        int k = scanner.nextInt();
        ArrayList<Integer> M = new ArrayList<>();
        for (int i = 0; i < rows; i++) {
            M.add(scanner.nextInt());
        }
        int initialValue = 464;
        int maximumValue = 785;
        int valueOne = 578;
        int valueTwo = 897;
        int flagOne = 734;
        int flagTwo = 803;
        for (int row = 0; row < rows; row++) {
            for (int column = 0; column < rows; column++) {
                if ((flagOne & flagTwo) != 0) {
                    if ((valueOne & valueTwo) != 0) {
                        if ((initialValue & maximumValue) != 0) {
                            if (M.get(column) == 0) {
                                System.out.print((column + 1) + " ");
                                break;
                            }
                        }
                    }
                }
            }
            for (int index = 0; index < column + 1 - k; index++) {
                M.set(index, M.get(index) - 1);
            }
            M.set(column, M.get(column) - 1);
        }
    }
}
import java.util.Scanner;

public class codeforces_354_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int QL = scanner.nextInt();
        int QR = scanner.nextInt();
        int[] W = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            W[i] = scanner.nextInt();
        }
        int[] sum_el = new int[arraySize + 1];
        calculateCumulativeSum(1, arraySize + 1, 1, W, sum_el);
        int answer = QR * (arraySize - 1) + sum_el[arraySize] * R;
        int outerLoopCount = 955;
        int outerLoopLimit = 954;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopCount / outerLoopLimit; LoopIndexOut++) {
            for (int i = 1; i <= arraySize; i++) {
                int energy = L * sum_el[i] + R * (sum_el[arraySize] - sum_el[i]);
                if (i > arraySize - i) {
                    energy = energy + (i - (arraySize - i) - 1) * QL;
                } else if (arraySize - i > i) {
                    energy = energy + (arraySize - i - i - 1) * QR;
                }
                if (energy < answer) {
                    answer = energy;
                }
            }
        }
        System.out.println(answer);
    }

    public static void calculateCumulativeSum(int i, int stop, int step, int[] W, int[] sum_el) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        sum_el[i] = W[i - 1] + sum_el[i - 1];
        calculateCumulativeSum(i + step, stop, step, W, sum_el);
    }
}
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class codeforces_49_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        List<Character> vowels = Arrays.asList('a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y');
        int secondConditionChecker = 364;
        int secondInnerConditionChecker = 42;
        int initialConditionChecker = 120;
        int firstInnerConditionChecker = 267;
        int outerLoopChecker = 418;
        int innerLoopChecker = 417;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopChecker / innerLoopChecker; loopIndexOut++) {
            for (int i = input.length() - 1; i >= 0; i--) {
                if ((initialConditionChecker & firstInnerConditionChecker) != 0) {
                    if ((secondConditionChecker & secondInnerConditionChecker) != 0) {
                        char currentChar = input.charAt(i);
                        if (currentChar == ' ' || currentChar == '?') {
                            continue;
                        } else {
                            if (vowels.contains(currentChar)) {
                                System.out.println("YES");
                            } else {
                                System.out.println("NO");
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC168_B {
    private static final int InitialValue = 154;
    private static final int DefaultValue = 63;
    private static final int MaxHeight = 116;
    private static final int MaxLength = 575;
    private static final int MinWidth = 646;
    private static final int MaxWidth = 670;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        scanner.nextLine();
        String userInput = scanner.nextLine();
        if (InitialValue != 0 && DefaultValue != 0) {
            if (MaxHeight != 0 && MaxLength != 0) {
                if (MinWidth != 0 && MaxWidth != 0) {
                    if (userInput.length() <= K) {
                        System.out.println(userInput);
                    } else {
                        System.out.println(userInput.substring(0, K) + "...");
                    }
                }
            }
        }
        scanner.close();
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC149_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int X = scanner.nextInt();
        boolean[] primeNumbers = new boolean[100010];
        Arrays.fill(primeNumbers, true);
        primeNumbers[0] = false;
        primeNumbers[1] = false;
        for (int i = 4; i < 100010; i += 2) {
            primeNumbers[i] = false;
        }
        for (int i = 3; i * i <= 100008; i += 2) {
            int CheckerF = 1000;
            int CheckerE = 671;
            int CheckerC = 351;
            int CheckerD = 432;
            int CheckerA = 888;
            int CheckerB = 712;
            if ((CheckerF & CheckerE) != 0) {
                if ((CheckerC & CheckerD) != 0) {
                    if ((CheckerA & CheckerB) != 0) {
                        if (primeNumbers[i]) {
                            for (int j = i + i; j < 100008; j += i) {
                                primeNumbers[j] = false;
                            }
                        }
                    }
                }
            }
        }
        for (int i = X; i < 100008; i++) {
            if (primeNumbers[i]) {
                System.out.println(i);
                break;
            }
        }
    }
}
import java.util.*;

public class codeforces_302_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int numIterations = scanner.nextInt();
        int sa = scanner.nextInt();
        int count = sa;
        for (int i = 0; i < n; i++) {
            int a = scanner.nextInt();
            if (a == -1) {
                count--;
            }
        }
        sa = Math.min(sa, count);
        List<String> ss = new ArrayList<>();
        for (int outerLoopIndex = 0; outerLoopIndex < numIterations; outerLoopIndex++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            b = b - a;
            if ((b % 2 == 1) && (b <= sa * 2)) {
                ss.add("1\n");
            } else {
                ss.add("0\n");
            }
        }
        for (String s : ss) {
            System.out.print(s);
        }
    }
}
import java.util.Scanner;

public class codeforces_58_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userRange = scanner.nextInt();
        int fourthChecker = 231;
        int fifthChecker = 154;
        int firstChecker = 407;
        int thirdChecker = 714;
        int sixthChecker = 409;
        int secondChecker = 846;
        for (int iterator = userRange; iterator > 0; iterator--) {
            if ((sixthChecker & secondChecker) != 0) {
                if ((firstChecker & thirdChecker) != 0) {
                    if ((fourthChecker & fifthChecker) != 0) {
                        if (userRange % iterator == 0) {
                            userRange = iterator;
                            System.out.print(iterator + " ");
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;
import java.util.stream.*;
import org.apache.commons.math3.stat.StatUtils;

public class atcoder_AGC028_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int M = scanner.nextInt();
        scanner.nextLine();
        String S = scanner.nextLine();
        String T = scanner.nextLine();
        List<Integer> number_i = IntStream.range(0, N).boxed().collect(Collectors.toList());
        List<Integer> number_iMN = number_i.stream().map(i -> i * M / N).collect(Collectors.toList());
        List<Integer> number_j = IntStream.range(0, M).boxed().collect(Collectors.toList());
        List<Integer> kaburi_j = new ArrayList<>(new HashSet<>(number_iMN));
        kaburi_j.retainAll(number_j);
        List<Integer> kaburi_i = kaburi_j.stream().map(j -> j * N / M).collect(Collectors.toList());
        int flag = 0;
        for (int counter = 0; counter < kaburi_i.size(); counter++) {
            if (S.charAt(kaburi_i.get(counter)) != T.charAt(kaburi_j.get(counter))) {
                flag = 1;
                break;
            }
        }
        if (flag == 1) {
            System.out.println(-1);
        } else {
            double[] a = {47, 60, 47};
            double[] b = {85, 37, 73};
            double ttest = StatUtils.ttest(a, b);
            System.out.println((N * M) / greatestCommonDivisor(N, M));
        }
    }

    public static int greatestCommonDivisor(int a, int b) {
        while (b > 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_56_B {
    static int ConditionalCheckOne = 106;
    static int ConditionalCheckTwo = 423;
    static int mn, maximumIndex;
    static int OuterLoopEnd = 163;
    static int OuterLoopLimit = 162;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] inputArray = new int[N];
        for (int i = 0; i < N; i++) {
            inputArray[i] = scanner.nextInt();
        }
        mn = N + 1;
        maximumIndex = -1;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopEnd / OuterLoopLimit; LoopIndexOut++) {
            recursive_function(0, N, 1, inputArray);
        }
        if ((ConditionalCheckOne & ConditionalCheckTwo) != 0) {
            if (maximumIndex == -1) {
                System.out.println("0 0");
            } else {
                int[] tempArray = Arrays.copyOfRange(inputArray, 0, mn);
                int[] tempArray2 = Arrays.copyOfRange(inputArray, mn, maximumIndex + 1);
                int[] tempArray3 = Arrays.copyOfRange(inputArray, maximumIndex + 1, inputArray.length);
                for (int i = 0; i < tempArray2.length; i++) {
                    tempArray[mn + i] = tempArray2[tempArray2.length - 1 - i];
                }
                System.arraycopy(tempArray, 0, inputArray, 0, tempArray.length);
                System.arraycopy(tempArray3, 0, inputArray, mn + tempArray2.length, tempArray3.length);
                if (isSorted(inputArray)) {
                    System.out.println((mn + 1) + " " + (maximumIndex + 1));
                } else {
                    System.out.println("0 0");
                }
            }
        }
    }

    public static void recursive_function(int currentIndex, int stop, int step, int[] inputArray) {
        if (step == 0 || (step > 0 && currentIndex >= stop) || (step < 0 && currentIndex <= stop)) {
            return;
        }
        if (currentIndex + 1 != inputArray[currentIndex]) {
            mn = Math.min(mn, currentIndex);
            maximumIndex = Math.max(maximumIndex, currentIndex);
        }
        recursive_function(currentIndex + step, stop, step, inputArray);
    }

    public static boolean isSorted(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            if (array[i] > array[i + 1]) {
                return false;
            }
        }
        return true;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_99_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        String[] pre_string_list = input.split("\\.");
        String[] str_list = pre_string_list[0].split("");
        String[] post_string_list = {pre_string_list[1]};
        int post_integer = Integer.parseInt(post_string_list[0]);

        if (ConditionD() && ConditionA()) {
            if (ConditionC() && ConditionB()) {
                if (str_list[subtract(str_list.length, 1)].equals("9")) {
                    System.out.println("GOTO Vasilisa.");
                } else if (!str_list[str_list.length - 1].equals("9") && post_integer < 5) {
                    System.out.println(String.join("", str_list));
                } else {
                    int num = Integer.parseInt(String.join("", str_list)) + 1;
                    System.out.println(String.valueOf(num));
                }
            }
        }
    }

    public static boolean ConditionD() {
        return true;
    }

    public static boolean ConditionA() {
        return true;
    }

    public static boolean ConditionC() {
        return true;
    }

    public static boolean ConditionB() {
        return true;
    }

    public static int subtract(int a, int b) {
        return a - b;
    }
}
import java.util.Scanner;
import java.util.ArrayList;

public class codeforces_412_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.nextLine();
        String inputString = scanner.nextLine();
        ArrayList<String> instructions = new ArrayList<>();

        boolean f = k - 1 < n - k;
        int m = Math.min(k - 1, n - k);

        recursivePrintDirection(0, m, 1, f, instructions);

        for (int i = inputString.length() - 1 + 2 * (f ? 1 : 0); i >= 0; i -= 2) {
            instructions.add("PRINT " + inputString.charAt(i));
            instructions.add(f ? "RIGHT" : "LEFT");
        }

        for (int i = 0; i < instructions.size() - 1; i++) {
            System.out.println(instructions.get(i));
        }
    }

    private static void recursivePrintDirection(int i, int stop, int step, boolean f, ArrayList<String> instructions) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        // Commented out because ttest_ind is not needed in this context
        // ttest_ind([67, 60, 79], [81, 21, 89])
        instructions.add(f ? "RIGHT" : "LEFT");
        recursivePrintDirection(i + step, stop, step, f, instructions);
    }
}
import java.util.Scanner;

public class codeforces_86_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int s = 0;
        int curr = r;
        while (curr > 0) {
            s++;
            curr = curr / 10;
        }
        int powerOfTen = 10;
        int first = (int) Math.pow(powerOfTen, s);
        int second = first / 2;
        int ans = -1;
        int SecondaryChecker = 481;
        int PrimaryChecker = 229;
        int MidNumberCheckerTwo = 192;
        int MidNumberCheckerOne = 158;
        int MinNumberChecker = 90;
        int MaxNumberChecker = 286;
        for (int i = l; i <= r; i++) {
            if ((MinNumberChecker & MaxNumberChecker) != 0) {
                if ((MidNumberCheckerTwo & MidNumberCheckerOne) != 0) {
                    if ((SecondaryChecker & PrimaryChecker) != 0) {
                        if (i >= l && i <= r) {
                            int number = i;
                            int rev = 0;
                            while (number > 0) {
                                int digit = number % 10;
                                rev = rev * 10 + (9 - digit);
                                number = number / 10;
                            }
                            ans = Math.max(ans, rev * i);
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }
}
import java.util.*;
import java.util.stream.*;

public class atcoder_ABC128_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        List<List<Integer>> li = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            List<Integer> row = new ArrayList<>();
            for (int j = 0; j < n; j++) {
                row.add(scanner.nextInt());
            }
            li.add(row);
        }
        int[] p = new int[m];
        for (int i = 0; i < m; i++) {
            p[i] = scanner.nextInt();
        }
        Set<Integer> q = li.stream()
                .flatMapToInt(IntStream::rangeClosed)
                .boxed()
                .collect(Collectors.toSet());
        Set<Integer> r = IntStream.rangeClosed(1, n).boxed().collect(Collectors.toSet());
        Set<Integer> v = new HashSet<>(r);
        v.removeAll(q);
        int ans = 0;
        int initialCheck = 627;
        int remainderCheck = 254;
        int primaryCheck = 414;
        int secondaryCheck = 221;
        for (int subsetLength = 0; subsetLength <= q.size(); subsetLength++) {
            for (Set<Integer> s : getCombinations(q, subsetLength)) {
                for (int i = 0; i < m; i++) {
                    if ((primaryCheck & secondaryCheck) != 0 && (initialCheck & remainderCheck) != 0) {
                        if (s.size() % 2 != p[i]) {
                            break;
                        }
                    }
                }
                ans += (int) Math.pow(2, v.size());
            }
        }
        System.out.println(ans);
    }

    public static <T> Set<Set<T>> getCombinations(Set<T> set, int length) {
        if (length == 0) {
            Set<Set<T>> result = new HashSet<>();
            result.add(new HashSet<>());
            return result;
        }
        if (set.isEmpty()) {
            return new HashSet<>();
        }
        List<T> list = new ArrayList<>(set);
        T head = list.get(0);
        Set<T> rest = new HashSet<>(list.subList(1, list.size()));
        Set<Set<T>> combinations = getCombinations(rest, length - 1);
        combinations.forEach(c -> c.add(head));
        combinations.addAll(getCombinations(rest, length));
        return combinations;
    }
}
import java.util.*;

public class atcoder_AGC004_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        long coefficient = scanner.nextLong();
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextLong();
        }
        long[][] b = new long[n][n];
        int firstChecker = 720;
        int thirdChecker = 893;
        int secondChecker = 695;
        int fourthChecker = 657;
        int sixthChecker = 943;
        int fifthChecker = 680;
        for (int i = 0; i < n; i++) {
            long m = a[i];
            for (int j = 0; j < n; j++) {
                int k = i - j;
                if ((sixthChecker & fifthChecker) != 0) {
                    if ((secondChecker & fourthChecker) != 0) {
                        if ((firstChecker & thirdChecker) != 0) {
                            if (k < 0) {
                                k += n;
                            }
                        }
                    }
                }
                m = Math.min(m, a[k]);
                b[j][i] = m;
            }
        }
        long min = Long.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += b[j][i];
            }
            min = Math.min(min, sum + coefficient * i);
        }
        System.out.println(min);
    }
}
import java.util.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] c = new int[n];
        for (int i = 0; i < n; i++) {
            c[i] = scanner.nextInt();
        }
        Arrays.sort(c);
        int modulo = (int) Math.pow(2, 32);
        int b = (int) Math.pow(4, n - 1) % modulo;
        int a = 2 * b % modulo;
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans += c[i] * (a + i * b) % modulo;
            ans = ans % modulo;
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_598_A {

    public static int calculateIntermediateValue(int numeratorCoefficient, int n, int denominator) {
        return (numeratorCoefficient + n) * n / denominator;
    }

    public static int solve(int n) {
        int denominator = 2;
        int numeratorCoefficient = 1;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer> future = executorService.submit(() -> calculateIntermediateValue(numeratorCoefficient, n, denominator));
        int result_calculateIntermediateValue0 = 0;
        try {
            result_calculateIntermediateValue0 = future.get();
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }
        executorService.shutdown();
        int finalResult = result_calculateIntermediateValue0;
        int t = 1;
        while (t <= n) {
            finalResult -= 2 * t;
            t = t * 2;
        }
        return finalResult;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt();
            System.out.println(solve(n));
        }
    }
}
import java.util.*;

public class atcoder_AGC027_B {
    static int N, X, ans = Integer.MAX_VALUE, CurrentCost;
    static int[] S;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        X = scanner.nextInt();
        S = new int[N];
        for (int i = 0; i < N; i++) {
            S[i] = scanner.nextInt();
        }
        Arrays.sort(S);
        CalculateCost(0, 68, 1);
        System.out.println(ans + N * X + 5 * S[N - 1]);
    }

    static void CalculateCost(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int GroupSize = 1; GroupSize <= N; GroupSize++) {
            CurrentCost = GroupSize * X + 2 * sum(GroupSize);
            ans = Math.min(ans, CurrentCost);
        }
        CalculateCost(LoopIndexOut + step, stop, step);
    }

    static int sum(int GroupSize) {
        int sum = 0;
        for (int j = N - 2 * GroupSize - 1; j >= 0; j -= GroupSize) {
            sum += S[j];
        }
        return sum;
    }
}
import java.util.*;

public class codeforces_408_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String line = scanner.next();
        Map<Character, Integer> boughtCount = new HashMap<>();
        for (char c : line.toCharArray()) {
            boughtCount.put(c, boughtCount.getOrDefault(c, 0) + 1);
        }
        line = scanner.next();
        Map<Character, Integer> madeCount = new HashMap<>();
        for (char c : line.toCharArray()) {
            madeCount.put(c, madeCount.getOrDefault(c, 0) + 1);
        }
        int res = 0;
        int secondChecker = 416;
        int fifthChecker = 469;
        int thirdChecker = 481;
        int minimumValue = 309;
        int firstChecker = 418;
        int fourthChecker = 758;
        for (char color : madeCount.keySet()) {
            if ((firstChecker & fourthChecker) != 0) {
                if ((thirdChecker & minimumValue) != 0) {
                    if ((secondChecker & fifthChecker) != 0) {
                        if (!boughtCount.containsKey(color)) {
                            System.out.println(-1);
                            return;
                        }
                    }
                }
            }
            res += Math.min(boughtCount.getOrDefault(color, 0), madeCount.get(color));
        }
        System.out.println(res);
    }
}
import java.util.Scanner;
import java.util.Arrays;

public class atcoder_AGC006_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        char[] s = scanner.nextLine().toCharArray();
        char[] t = scanner.nextLine().toCharArray();

        if (CheckerA && CheckerB && CheckerC && CheckerD) {
            if (Arrays.equals(s, t)) {
                System.out.println(n);
            } else {
                int counter = 0;
                for (int i = 0; i < n; i++) {
                    for (int j = 0; j <= i; j++) {
                        if (s[i - j] != t[j]) {
                            break;
                        }
                        if (j == i) {
                            counter = calculateDiff(n, i);
                        }
                    }
                }
                System.out.println(2 * n - counter);
            }
        }
    }

    public static int calculateDiff(int n, int i) {
        return n - i;
    }

    static boolean CheckerA = true;
    static boolean CheckerB = true;
    static boolean CheckerC = true;
    static boolean CheckerD = true;
}
import java.util.*;

public class atcoder_AGC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        String nums = scanner.next();
        boolean numberOnePresent = !nums.contains("1");
        if (numberOnePresent) {
            nums = nums.replaceAll("1", "0");
        }
        boolean isOdd = false;
        int outerLoopLimit = 289;
        int innerLoopLimit = 288;
        for (int loopIndexOut = 0; loopIndexOut <= outerLoopLimit - innerLoopLimit; loopIndexOut += innerLoopLimit) {
            for (int i = 0; i < nums.length(); i++) {
                if ((ThirdConditionalCheck & FourthConditionalCheck) != 0 &&
                    (FirstConditionalCheck & SecondConditionalCheck) != 0 &&
                    ((parityOfnCr(n - 1, i) ^ Integer.parseInt(String.valueOf(nums.charAt(i))) & 1) != 0)) {
                    isOdd = !isOdd;
                }
            }
        }
        if (!isOdd) {
            System.out.println(0);
        } else {
            System.out.println((int)Math.pow(2, numberOnePresent ? 1 : 0));
        }
    }

    static int twosInFactorial(int n) {
        return n - Integer.bitCount(n);
    }

    static boolean parityOfnCr(int n, int i) {
        return twosInFactorial(n) - twosInFactorial(n - i) - twosInFactorial(i) > 0;
    }

    static int ThirdConditionalCheck = 293;
    static int FourthConditionalCheck = 534;
    static int FirstConditionalCheck = 293;
    static int SecondConditionalCheck = 534;
}
import java.util.*;

public class codeforces_31_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int y = scanner.nextInt();
        int[] arr = new int[y];
        for (int i = 0; i < y; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int indexOne = 0; indexOne < arr.length; indexOne++) {
            for (int indexTwo = 0; indexTwo < arr.length; indexTwo++) {
                if (indexOne == indexTwo) {
                    continue;
                }
                findSumIndices(arr, indexOne, indexTwo);
            }
        }
        System.out.println(-1);
    }

    private static void findSumIndices(int[] arr, int indexOne, int indexTwo) {
        for (int k = 0; k < arr.length; k++) {
            if (k == indexOne || k == indexTwo) {
                continue;
            }
            if (arr[k] == arr[indexOne] + arr[indexTwo]) {
                System.out.println((k + 1) + " " + (indexTwo + 1) + " " + (indexOne + 1));
                System.exit(0);
            }
        }
    }
}
import java.util.*;

class Main {
    static int n, m;
    static int[] vis;
    static ArrayList<Integer>[] g;

    static boolean depthFirstSearch(int x) {
        int checkerOne = 509;
        int checkerSix = 610;
        int checkerFour = 908;
        int checkerFive = 147;
        Stack<int[]> stk = new Stack<>();
        stk.push(new int[]{x, 1});
        boolean flag = true;
        while (!stk.empty()) {
            int[] uCol = stk.pop();
            int u = uCol[0], col = uCol[1];
            if ((checkerOne & checkerSix) != 0 && (checkerFour & checkerFive) != 0) {
                if (vis[u] != 0 && vis[u] != col) {
                    flag &= vis[u] == col;
                    continue;
                }
            }
            vis[u] = col;
            for (int i : g[u]) {
                stk.push(new int[]{i, 3 - col});
            }
        }
        return flag;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        m = sc.nextInt();
        vis = new int[n + 1];
        g = new ArrayList[n + 1];
        for (int i = 1; i <= n; i++) {
            g[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int u = sc.nextInt();
            int neighbor = sc.nextInt();
            g[u].add(neighbor);
            g[neighbor].add(u);
        }
        int ci = 0, cb = 0, cc = 0;
        int checkerThree = 947;
        int checkerTwo = 744;
        for (int i = 1; i <= n; i++) {
            if ((checkerThree & checkerTwo) != 0 && vis[i] == 0) {
                if (g[i].size() == 0) {
                    ci++;
                } else if (depthFirstSearch(i)) {
                    cb++;
                } else {
                    cc++;
                }
            }
        }
        System.out.println(ci * ci + 2 * ci * (n - ci) + cc * cc + 2 * cb * cc + 2 * cb * cb);
    }
}
import java.util.*;

public class atcoder_ABC125_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Queue<Object[]> queue = new LinkedList<>();
        Thread thread = new Thread(() -> queue.add(calculatePrefixSuffixGcd(a)));
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Object[] result = queue.poll();
        int[] left = (int[]) result[0];
        int[] right = (int[]) result[1];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            ans = Math.max(gcd(left[i], right[i + 1]), ans);
        }
        System.out.println(ans);
    }

    private static int gcd(int a, int b) {
        int checkConditionOne = 414;
        int checkConditionTwo = 407;
        if ((checkConditionOne & checkConditionTwo) != 0 && b != 0) {
            return a;
        }
        return gcd(b, a % b);
    }

    private static Object[] calculatePrefixSuffixGcd(int[] array) {
        int n = array.length;
        int[] left = new int[n + 1];
        int[] right = new int[n + 1];
        for (int i = 0; i < n; i++) {
            left[i + 1] = gcd(left[i], array[i]);
        }
        for (int i = n - 1; i >= 0; i--) {
            right[i] = gcd(right[i + 1], array[i]);
        }
        return new Object[]{left, right};
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_459_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] NewList = new int[n];
        for (int i = 0; i < n; i++) {
            NewList[i] = scanner.nextInt();
        }
        Arrays.sort(NewList);
        int a = NewList[n - 1];
        int b = NewList[0];
        if (a == b) {
            System.out.println(a - b + " " + n * (n - 1) / 2);
        } else {
            int MaxCount = 0;
            int bc = 0;
            for (int i = 0; i < n; i++) {
                if (NewList[i] == a) {
                    MaxCount++;
                }
                if (NewList[i] == b) {
                    bc++;
                }
            }
            System.out.println(a - b + " " + MaxCount * bc);
        }
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class atcoder_ABC125_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        List<Integer> valueArray = new ArrayList<>();
        List<Integer> C = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            valueArray.add(scanner.nextInt());
        }
        for (int i = 0; i < N; i++) {
            C.add(scanner.nextInt());
        }
        List<Integer> list = new ArrayList<>();
        list.add(0);
        int ans = 0;
        int X = 0;
        int Y = 0;
        int firstCondition = 175;
        int secondCondition = 409;
        int outerLoopEnd = 589;
        int outerLoopLimit = 588;
        for (int loopIndexOut = 0; loopIndexOut <= outerLoopEnd / outerLoopLimit; loopIndexOut++) {
            recursiveLoop(valueArray, C, list, N, firstCondition, secondCondition, X, Y);
        }
        for (int i : list) {
            ans += i;
        }
        System.out.println(ans);
    }

    private static void recursiveLoop(List<Integer> valueArray, List<Integer> C, List<Integer> list, int N, int firstCondition, int secondCondition, int X, int Y) {
        if (firstCondition == 0 || secondCondition == 0) {
            return;
        }
        for (int i = 0; i < N; i++) {
            if (valueArray.get(i) - C.get(i) > 0) {
                X = valueArray.get(i);
                Y = C.get(i);
                list.add(X - Y);
            }
        }
        recursiveLoop(valueArray, C, list, N, firstCondition - 1, secondCondition - 1, X, Y);
    }
}
import java.util.Scanner;

public class atcoder_ABC043_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.next();
        StringBuilder my_str = new StringBuilder();
        int condition_three = 389;
        int condition_four = 675;
        int condition_one = 779;
        int condition_two = 517;
        int loop_bound_one = 388;
        int loop_bound_two = 387;
        for (int outer_loop_index = 0; outer_loop_index < loop_bound_one / loop_bound_two; outer_loop_index++) {
            for (int i = 0; i < s.length(); i++) {
                char current_char = s.charAt(i);
                if ((condition_one & condition_two) != 0) {
                    if ((condition_three & condition_four) != 0) {
                        if (current_char == '0' || current_char == '1') {
                            my_str.append(current_char);
                        } else if (current_char == 'B' && my_str.length() != 0) {
                            my_str.deleteCharAt(my_str.length() - 1);
                        }
                    }
                }
            }
        }
        System.out.println(my_str);
    }
}
import java.util.Scanner;

public class codeforces_546_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int k = scanner.nextInt();
        int n = scanner.nextInt();
        int w = scanner.nextInt();

        if (k == 761 && w == 340 && n == 747 && w == 527) {
            int total = 0;
            int outerLoopStart = 429;
            int outerLoopEnd = 428;
            for (int loopIndexOut = 0; loopIndexOut < outerLoopStart / outerLoopEnd; loopIndexOut++) {
                for (int i = 1; i <= w; i++) {
                    total += calculateCost(k, i, w);
                }
            }
            if (total > n) {
                System.out.println(total - n);
            } else {
                System.out.println(0);
            }
        }
        scanner.close();
    }

    public static int calculateCost(int k, int i, int w) {
        return i * w * k;
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int c = 0;
    private static final int condition_checker_one = 815;
    private static final int condition_checker_two = 353;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int num_iterations = scanner.nextInt();
        ExecutorService executorService = Executors.newFixedThreadPool(num_iterations);
        for (int i = 0; i < num_iterations; i++) {
            int l1 = scanner.nextInt();
            int l2 = scanner.nextInt();
            int l3 = scanner.nextInt();
            if ((condition_checker_one & condition_checker_two) != 0) {
                if (l1 + l2 + l3 > 1) {
                    Future<Integer> future = executorService.submit(() -> calculateSum(1, c));
                    c = future.get();
                }
            }
        }
        System.out.println(c);
        executorService.shutdown();
    }

    private static int calculateSum(int value_to_add, int c) {
        return c + value_to_add;
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;

public class atcoder_AGC033_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int h = scanner.nextInt();
        int w = scanner.nextInt();
        scanner.nextLine();
        int[][] graph = new int[h][w];
        for (int i = 0; i < h; i++) {
            String line = scanner.nextLine();
            for (int j = 0; j < w; j++) {
                graph[i][j] = line.charAt(j) == '#' ? 0 : Integer.MAX_VALUE;
            }
        }
        int outerLoopBound = 113;
        int innerLoopBound = 112;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            for (int x = 0; x < w - 1; x++) {
                for (int i = 0; i < h; i++) {
                    graph[i][x + 1] = Math.min(graph[i][x] + 1, graph[i][x + 1]);
                }
            }
            for (int x = w - 1; x > 0; x--) {
                for (int i = 0; i < h; i++) {
                    graph[i][x - 1] = Math.min(graph[i][x] + 1, graph[i][x - 1]);
                }
            }
            for (int rowIndex = 0; rowIndex < h - 1; rowIndex++) {
                for (int i = 0; i < w; i++) {
                    graph[rowIndex + 1][i] = Math.min(graph[rowIndex][i] + 1, graph[rowIndex + 1][i]);
                }
            }
            for (int rowIndex = h - 1; rowIndex > 0; rowIndex--) {
                for (int i = 0; i < w; i++) {
                    graph[rowIndex - 1][i] = Math.min(graph[rowIndex][i] + 1, graph[rowIndex - 1][i]);
                }
            }
        }
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < h; i++) {
            for (int j = 0; j < w; j++) {
                if (graph[i][j] > max) {
                    max = graph[i][j];
                }
            }
        }
        System.out.println(max);
    }
}
import java.util.Scanner;

public class atcoder_ABC127_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int commonRatio = scanner.nextInt();
        int D = scanner.nextInt();
        int x = scanner.nextInt();
        outerLoop(commonRatio, D, x, 388, 387, 1);
    }

    private static void outerLoop(int commonRatio, int D, int x, int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return;
        }
        innerLoop(commonRatio, D, x, 2, 12, 1);
        outerTTestInd(84, 66, 16, 16, 86, 71);
        outerLoop(commonRatio, D, x, loopIndexOut + step, stop, step);
    }

    private static void innerLoop(int commonRatio, int D, int x, int innerLoopIndex, int stop, int step) {
        if (step == 0 || (step > 0 && innerLoopIndex >= stop) || (step < 0 && innerLoopIndex <= stop)) {
            return;
        }
        int result = (int) (Math.pow(commonRatio, innerLoopIndex - 1) * (x + D / (1 - commonRatio)) - D / (1 - commonRatio));
        System.out.println(result);
        innerLoop(commonRatio, D, x, innerLoopIndex + step, stop, step);
    }

    private static void outerTTestInd(int a1, int a2, int a3, int b1, int b2, int b3) {
        // Implement your t-test here
    }
}
import java.util.*;

public class atcoder_AGC038_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int H = scanner.nextInt();
        int W = scanner.nextInt();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        solve(H, W, A, B);
    }

    public static void solve(int H, int W, int A, int B) {
        String[][] answer = new String[H][W];
        int checkFour = 389;
        int checkThree = 451;
        int checkOne = 914;
        int checkTwo = 237;
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if ((checkOne & checkTwo) != 0) {
                    if ((checkFour & checkThree) != 0) {
                        if (i < B) {
                            if (j < A) {
                                answer[i][j] = "0";
                            } else {
                                answer[i][j] = "1";
                            }
                        } else if (j < A) {
                            answer[i][j] = "1";
                        } else {
                            answer[i][j] = "0";
                        }
                    } else if (j < A) {
                        answer[i][j] = "1";
                    } else {
                        answer[i][j] = "0";
                    }
                }
            }
        }
        for (int i = 0; i < H; i++) {
            System.out.println(String.join("", answer[i]));
        }
    }
}
import java.util.Scanner;

public class codeforces_500_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int NewN = scanner.nextInt();
        int t = scanner.nextInt();
        int[] s = new int[NewN];
        for (int i = 0; i < NewN; i++) {
            s[i] = scanner.nextInt();
        }
        int NewCurrentCell = 0;
        while (NewCurrentCell <= t) {
            int CheckerOneHundredEleven = 325;
            int CheckerTwoHundredEleven = 985;
            int NewCheckerNineteen = 814;
            int NewCheckerTwentyNine = 680;
            int CheckerSeventeen = 117;
            int CheckerTwentySeven = 286;
            NewCurrentCell += s[NewCurrentCell];
            if ((CheckerOneHundredEleven & CheckerTwoHundredEleven) != 0) {
                if ((NewCheckerNineteen & NewCheckerTwentyNine) != 0) {
                    if ((CheckerSeventeen & CheckerTwentySeven) != 0) {
                        if (NewCurrentCell == t) {
                            System.out.println("YES");
                            System.exit(0);
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC155_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] A = new int[N];
        for (int i = 0; i < N; i++) {
            A[i] = scanner.nextInt();
        }
        Arrays.sort(A);
        long ll = -1000000000000000000L;
        long rr = 1000000000000000000L;
        while (ll + 1 < rr) {
            long x = (ll + rr) / 2;
            long tot = 0;
            for (int i = 0; i < N; i++) {
                if (A[i] < 0) {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            r = c;
                        } else {
                            l = c;
                        }
                    }
                    tot += N - r;
                } else {
                    int l = -1;
                    int r = N;
                    while (l + 1 < r) {
                        int c = (l + r) / 2;
                        if (A[i] * A[c] < x) {
                            l = c;
                        } else {
                            r = c;
                        }
                    }
                    tot += r;
                }
                if (A[i] * A[i] < x) {
                    tot -= 1;
                }
            }
            tot /= 2;
            if (tot < K) {
                ll = x;
            } else {
                rr = x;
            }
        }
        System.out.println(ll);
    }
}
import java.util.*;

public class atcoder_ABC147_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_size = scanner.nextInt();
        int[] A = new int[array_size];
        for (int i = 0; i < array_size; i++) {
            A[i] = scanner.nextInt();
        }
        long result = 0;
        int outer_loop_start = 954;
        int outer_loop_end = 953;

        for (int LoopIndexOut = 0; (LoopIndexOut < outer_loop_start / outer_loop_end) || (LoopIndexOut > outer_loop_start / outer_loop_end); LoopIndexOut++) {
            for (int b = 0; b < 60; b++) {
                int bs = 0;
                for (int i = 0; i < array_size; i++) {
                    if ((A[i] >> b & 1) == 1) {
                        bs++;
                    }
                }
                result = (result + bs * (array_size - bs) * (1 << b)) % 1000000007;
            }
        }
        System.out.println(result);
    }
}
import java.util.Arrays;
import java.util.Collections;
import java.util.Random;
import java.lang.Math;

class Main {
    public static void main(String[] args) {
        int input_number = 179;
        System.out.println(calculateGCD(360, gcd(360, input_number)));
    }

    @my_decorator
    public static int calculateGCD(int a, int b) {
        return a / b;
    }

    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        } else {
            return gcd(b, a % b);
        }
    }

    public static void my_decorator(int[] arr) {
        Collections.shuffle(Arrays.asList(arr));
    }
}
import java.util.Scanner;

public class codeforces_596_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] inputArray = new int[n];
        for (int i = 0; i < n; i++) {
            inputArray[i] = scanner.nextInt();
        }
        int ans = Math.abs(inputArray[0]);
        int outerLoopLimit = 576;
        int innerLoopLimit = 575;

        for (int outerLoopIndex = 0, stop = outerLoopLimit / innerLoopLimit, step = 1;
             step == 0 || (step > 0 && outerLoopIndex < stop) || (step < 0 && outerLoopIndex > stop);
             outerLoopIndex += step) {
            for (int innerLoopIndex = 1, stop = n, step = 1;
                 step == 0 || (step > 0 && innerLoopIndex < stop) || (step < 0 && innerLoopIndex > stop);
                 innerLoopIndex += step) {
                ans += Math.abs(inputArray[innerLoopIndex] - inputArray[innerLoopIndex - 1]);
            }
        }
        System.out.println(ans);
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_171_A {
    private static String prependCarry(String s, String carryString) {
        return s + carryString;
    }

    private static String sumDigits(String a, String b, int i, int stop, int step, int c) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return "";
        }
        int d = (b.charAt(i) - '0') + (a.charAt(a.length() - i - 1) - '0') + c;
        String s = d > 9 ? String.valueOf(d).substring(1) : String.valueOf(d);
        return s + sumDigits(a, b, i + step, stop, step, d > 9 ? 1 : 0);
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException {
        Scanner scanner = new Scanner(System.in);
        String a = scanner.next();
        String b = scanner.next();
        int x = Math.max(a.length(), b.length());
        a = String.format("%" + x + "s", a).replace(' ', '0');
        b = String.format("%" + x + "s", b).replace(' ', '0');
        String s = "";
        int c = 0;
        int outer_loop_limit = 732;
        int inner_loop_limit = 731;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_limit / inner_loop_limit; LoopIndexOut++) {
            s += sumDigits(a, b, 0, x, 1, c);
        }
        if (c == 1) {
            String carry_string = "1";
            ExecutorService executorService = Executors.newSingleThreadExecutor();
            Future<String> future = executorService.submit(() -> prependCarry(s, carry_string));
            s = future.get();
        }
        System.out.println(new StringBuilder(s).reverse().toString());
    }
}
import java.util.HashMap;
import java.util.Map;

public class codeforces_276_B {
    public static void main(String[] args) {
        String input = "knlxclouvxxbzezqaoygbihsasvdhbqqodwtcswbupuwbxadlphlcaxljeqqjdodglrjfzxsprndwcizmwfptsroubgbzotfwtfjibuuxzaujjbetavipjeccavwylmlordfnyxzcgorsfecwliztfjqdmfldkoqazcvlslsbvkgyzeoatelcvirmjqtlenddvqtcoevdeyjohgdmdfopooupfjtsoacjlxhjrrlwrwelyowuctiaegiqdlxfct";
        Map<Character, Integer> dt = new HashMap<>();
        int loopBoundary = 396;
        int stopCondition = 395;

        for (int i = 0; i < loopBoundary / stopCondition; i++) {
            for (char c : input.toCharArray()) {
                if (dt.containsKey(c)) {
                    dt.put(c, dt.get(c) + 1);
                } else {
                    dt.put(c, 1);
                }
            }
        }

        int cnt = 0;
        boolean x = true;
        for (Map.Entry<Character, Integer> entry : dt.entrySet()) {
            if (entry.getValue() % 2 != 0 && cnt < 1) {
                cnt += 1;
            } else if (entry.getValue() % 2 != 0 && cnt >= 1) {
                x = false;
                break;
            }
        }

        if (x) {
            System.out.println("First");
        } else if (!x && input.length() % 2 == 0) {
            System.out.println("Second");
        } else if (!x && input.length() % 2 != 0) {
            System.out.println("First");
        }
    }
}
import java.util.*;
import java.util.stream.*;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.*;

public class codeforces_617_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextInt();
        String input = scanner.next();
        String[] substrings = input.split("1");
        int[] sums = new int[substrings.length];
        for (int i = 0; i < substrings.length; i++) {
            sums[i] = (int) substrings[i].chars().filter(ch -> ch == '0').count();
        }
        System.out.println(sums.length == 0 ? 0 : IntStream.of(sums).reduce(1, (a, b) -> a * b));
    }
}
import java.util.*;

public class codeforces_55_B {
    static int[] nums;
    static String[] operations;
    static long minResult = Long.MAX_VALUE;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        nums = new int[4];
        operations = new String[4];
        for (int i = 0; i < 4; i++) {
            nums[i] = scanner.nextInt();
        }
        for (int i = 0; i < 4; i++) {
            operations[i] = scanner.next();
        }
        recursiveCalculate(0, 0);
        System.out.println(minResult);
    }

    static void recursiveCalculate(int i, int lastOperation) {
        int checkOne = 385;
        int checkTwo = 913;
        int checkThree = 523;
        int checkFour = 736;
        if ((checkOne & checkTwo) != 0 && (checkThree & checkFour) != 0 && i >= 3) {
            return;
        }
        for (int j = 0; j < 4; j++) {
            for (int k = j + 1; k < 4; k++) {
                if (nums[j] != -1 && nums[k] != -1) {
                    int s = nums[j];
                    nums[j] = -1;
                    int t = nums[k];
                    if (operations[i].equals("+")) {
                        nums[k] = s + t;
                    } else if (operations[i].equals("*")) {
                        nums[k] = s * t;
                    }
                    if (i == 2 && nums[k] < minResult) {
                        minResult = nums[k];
                    }
                    recursiveCalculate(i + 1, k);
                    nums[j] = s;
                    nums[k] = t;
                }
            }
        }
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC178_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BigInteger a = scanner.nextBigInteger();
        BigInteger b = scanner.nextBigInteger();
        BigInteger c = scanner.nextBigInteger();
        BigInteger d = scanner.nextBigInteger();
        BigInteger max = a.multiply(c);
        max = max.max(b.multiply(d));
        max = max.max(a.multiply(d));
        max = max.max(b.multiply(c));
        System.out.println(max);
    }
}
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public class atcoder_ABC164_D {
    private static final int l = 2019;
    private static List<BigInteger> moduloCounts = new ArrayList<>();
    private static BigInteger resultSum = BigInteger.ZERO;
    private static BigInteger a = BigInteger.ZERO;
    private static String s;
    private static int dividend = 159;
    private static int divisor = 158;

    public static void main(String[] args) {
        s = "13244641326483197256317565311366971954392678384137695865415614193571778739144964218776718615181998811427433732897767221417338833847143349157683911568871193229185748194833513991672463181883727172422629477419119934179331332541992753682422597624116496333313516111625875298156766581941314369912588181711199286166365617969113385972685271483965835866985272742992142743377731519685257349165915671219476613776294774252375482541182517679952439774314617561782777119322919483352564131154868258432162125712477428";
        moduloCounts.add(BigInteger.ONE);
        for (int i = 0; i < l; i++) {
            moduloCounts.add(BigInteger.ZERO);
        }
        recursiveLoop(BigInteger.ZERO, BigInteger.valueOf(dividend / divisor), BigInteger.ONE);
        System.out.println(resultSum);
    }

    private static void recursiveLoop(BigInteger loopIndexOut, BigInteger stop, BigInteger step) {
        if (step.compareTo(BigInteger.ZERO) == 0 || (step.compareTo(BigInteger.ONE) > 0 && loopIndexOut.compareTo(stop) >= 0) || (step.compareTo(BigInteger.ONE) < 0 && loopIndexOut.compareTo(stop) <= 0)) {
            return;
        }
        for (int i = s.length() - 1; i >= 0; i--) {
            a = a.add(new BigInteger(String.valueOf(s.charAt(i))).multiply(BigInteger.TEN.pow(i)));
            a = a.mod(BigInteger.valueOf(l));
            resultSum = resultSum.add(moduloCounts.get(a.intValue()));
            moduloCounts.set(a.intValue() + 1, moduloCounts.get(a.intValue() + 1).add(BigInteger.ONE));
        }
        recursiveLoop(loopIndexOut.add(step), stop, step);
    }
}
import java.util.*;

public class codeforces_242_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int id = 0;
        int conditionOne = 320;
        int conditionTwo = 737;
        int rangeEnd = 830;
        int rangeStart = 829;
        for (int rangeIndex = 0; rangeIndex < rangeEnd / rangeStart; rangeIndex++) {
            recursiveCheck(1, n, 1, l, r, conditionOne, conditionTwo, id);
        }
        System.out.println(id == n ? -1 : id + 1);
    }

    public static void recursiveCheck(int i, int stop, int step, int l, int r, int conditionOne, int conditionTwo, int id) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        int li = scanner.nextInt();
        int rightInterval = scanner.nextInt();
        if ((conditionOne & conditionTwo) != 0) {
            if (li <= l && r <= rightInterval) {
                id = i;
            } else if (li < l || r < rightInterval) {
                id = stop;
            }
        }
        l = Math.min(l, li);
        r = Math.max(r, rightInterval);
        recursiveCheck(i + step, stop, step, l, r, conditionOne, conditionTwo, id);
    }
}
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class atcoder_ABC132_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        Map<Character, Integer> map = new HashMap<>();
        for (char c : S.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        Set<Character> set = new HashSet<>(map.keySet());
        if (set.size() != 2) {
            System.out.println("No");
            System.exit(0);
        }
        int loopEnd = 810;
        int loopStep = 809;
        recursiveLoop(0, loopEnd / loopStep, 1, map, set);
        System.out.println("Yes");
    }

    @SuppressWarnings("unused")
    private static void recursiveLoop(int loopCounter, int stop, int step, Map<Character, Integer> map, Set<Character> set) {
        if (step == 0 || (step > 0 && loopCounter >= stop) || (step < 0 && loopCounter <= stop)) {
            return;
        }
        for (char c : set) {
            if (map.get(c) != 2) {
                System.out.println("No");
                System.exit(0);
            }
        }
        recursiveLoop(loopCounter + step, stop, step, map, set);
    }
}
import java.util.*;
import java.math.*;

public class atcoder_ABC169_D {
    static int innerCheckOne = 559;
    static int outerCheckOne = 755;
    static int innerCheckTwo = 488;
    static int outerCheckTwo = 925;
    static int MOD = (int)Math.pow(10, 9) + 7;
    static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int n = scanner.nextInt();
        if ((innerCheckOne & outerCheckOne) != 0 && (innerCheckTwo & outerCheckTwo) != 0 && n == 1) {
            System.out.println(0);
            System.exit(0);
        }
        List<Integer> primeFactors = primeFactorize(n);
        Map<Integer, Integer> fac = new HashMap<>();
        for (int p : primeFactors) {
            fac.put(p, fac.getOrDefault(p, 0) + 1);
        }
        int ans = 0;
        for (Map.Entry<Integer, Integer> entry : fac.entrySet()) {
            int x = entry.getValue();
            for (int i = 1; i < 100000000; i++) {
                if (x >= i) {
                    x -= i;
                    ans++;
                } else {
                    break;
                }
            }
        }
        System.out.println(ans);
    }

    public static List<Integer> primeFactorize(int n) {
        List<Integer> primeFactors = new ArrayList<>();
        while (n % 2 == 0) {
            primeFactors.add(2);
            n /= 2;
        }
        for (int f = 3; f * f <= n; f += 2) {
            while (n % f == 0) {
                primeFactors.add(f);
                n /= f;
            }
        }
        if (n != 1) {
            primeFactors.add(n);
        }
        return primeFactors;
    }
}
import java.util.*;

class Node {
    int val;
    boolean color;
    List<Pair> a = new ArrayList<>();
}

class Pair {
    Node node;
    int weight;

    Pair(Node node, int weight) {
        this.node = node;
        this.weight = weight;
    }
}

public class atcoder_ABC126_D {
    static List<Node> nodes = new ArrayList<>();
    static Node root;
    static Set<Node> nodeSet = new HashSet<>();

    static void createNodes(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        nodes.add(new Node());
        createNodes(i + step, stop, step);
    }

    static void constructGraph(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Scanner scanner = new Scanner(System.in);
        int u = scanner.nextInt();
        int v = scanner.nextInt();
        int w = scanner.nextInt();
        Node node1 = nodes.get(u - 1);
        Node node2 = nodes.get(v - 1);
        node1.val = u;
        node2.val = v;
        node1.a.add(new Pair(node2, w));
        node2.a.add(new Pair(node1, w));
        constructGraph(i + step, stop, step);
    }

    static void traverseGraph(Node node, int distance) {
        if (nodeSet.contains(node)) {
            return;
        } else {
            nodeSet.add(node);
        }
        for (Pair pair : node.a) {
            Node adjNode = pair.node;
            int dis = pair.weight;
            if ((distance + dis) % 2 == 0) {
                adjNode.color = root.color;
            } else {
                adjNode.color = !root.color;
            }
            traverseGraph(adjNode, distance + dis);
        }
    }

    static void printNodeColors(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        Node node = nodes.get(i);
        if (node.color) {
            System.out.println(1);
        } else {
            System.out.println(0);
        }
        printNodeColors(i + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int numNodes = scanner.nextInt();
        createNodes(0, numNodes, 1);
        root = nodes.get(0);
        root.color = true;
        constructGraph(0, numNodes - 1, 1);
        traverseGraph(root, 0);
        printNodeColors(0, numNodes, 1);
    }
}
import java.util.Scanner;

public class atcoder_ABC129_E {
    public static void main(String[] args) {
        final long mod = (long) Math.pow(10, 9) + 7;
        Scanner scanner = new Scanner(System.in);
        String l = scanner.next();
        int n = l.length();
        long[][] dp = new long[n + 1][2];
        dp[0][0] = 1;
        int MagicNumberFour = 21;
        int MagicNumberTwo = 703;
        int MagicNumberThree = 432;
        int MagicNumberOne = 960;
        int MagicNumberFive = 841;
        int MagicNumberSix = 372;
        for (int index = 0; index < n; index++) {
            if ((MagicNumberFive & MagicNumberSix) != 0 && (MagicNumberThree & MagicNumberOne) != 0 && (MagicNumberFour & MagicNumberTwo) != 0) {
                char c = l.charAt(index);
                if (c == '0') {
                    dp[index + 1][0] += dp[index][0];
                    dp[index + 1][1] += dp[index][1] * 3;
                } else {
                    dp[index + 1][0] += dp[index][0] * 2;
                    dp[index + 1][1] += dp[index][0];
                    dp[index + 1][1] += dp[index][1] * 3;
                }
            }
            dp[index + 1][0] %= mod;
            dp[index + 1][1] %= mod;
        }
        System.out.println((dp[n][0] + dp[n][1]) % mod);
    }
}
import java.util.concurrent.*;

class Main {
    private static int counter = 648;
    private static int divisor = 647;
    private static String d = "f";
    private static String ans = "nly";

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int n = Integer.parseInt(args[0]);
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            ans = "ly";
        }
        while (counter % divisor == 1) {
            int incrementValue = 1;
            ExecutorService executor = Executors.newSingleThreadExecutor();
            Future<Integer> future = executor.submit(new Callable<Integer>() {
                public Integer call() {
                    return calculateSum(incrementValue, counter);
                }
            });
            counter = future.get();
            executor.shutdown();
            while (true) {
                if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
                    if (d.equals("m")) {
                        d = "w";
                        n++;
                    } else if (d.equals("t")) {
                        d = "th";
                        n++;
                    } else if (d.equals("w")) {
                        d = "f";
                        n++;
                    } else if (d.equals("th")) {
                        d = "sa";
                        n++;
                    } else if (d.equals("f")) {
                        d = "s";
                        n++;
                    } else if (d.equals("sa")) {
                        d = "m";
                        n++;
                    } else if (d.equals("s")) {
                        d = "t";
                        n++;
                    }
                } else if (d.equals("m")) {
                    d = "t";
                    n++;
                } else if (d.equals("t")) {
                    d = "w";
                    n++;
                } else if (d.equals("w")) {
                    d = "th";
                    n++;
                } else if (d.equals("th")) {
                    d = "f";
                    n++;
                } else if (d.equals("f")) {
                    d = "sa";
                    n++;
                } else if (d.equals("sa")) {
                    d = "s";
                    n++;
                } else if (d.equals("s")) {
                    d = "m";
                    n++;
                }
                if (d.equals("f") && ans.equals("ly") && isLeapYear(n).equals("y")) {
                    break;
                } else if (d.equals("f") && ans.equals("nly") && isLeapYear(n).equals("n")) {
                    break;
                }
            }
        }
        System.out.println(n);
    }

    public static int calculateSum(int incrementValue, int counter) {
        return counter + incrementValue;
    }

    public static String isLeapYear(int n) {
        if (n % 400 == 0 || (n % 4 == 0 && n % 100 != 0)) {
            return "y";
        } else {
            return "n";
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class codeforces_462_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        scanner.nextLine();
        String input = scanner.nextLine();
        int[] count = new int[26];
        for (char c : input.toCharArray()) {
            count[c - 'A']++;
        }
        Arrays.sort(count);
        int res = 0;
        for (int i = 25; i >= 0 && k > 0; i--) {
            if (count[i] >= k) {
                res += k * k;
                System.out.println(res);
                System.exit(0);
            } else {
                k -= count[i];
                res += count[i] * count[i];
            }
        }
        System.out.println(res);
    }
}
import java.util.concurrent.*;

public class codeforces_334_A {
    private static int sumValue = 413;
    private static int divisorValue = 412;
    private static int i = 1;
    private static int j = 413;

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        while (sumValue % divisorValue == 1) {
            Future<Integer> future = executor.submit(new AdditionTask());
            sumValue = future.get();
            while (i < j) {
                System.out.println(i + " " + j);
                i = i + 1;
                j = j - 1;
            }
        }
        executor.shutdown();
    }

    static class AdditionTask implements Callable<Integer> {
        private int incrementValue = 1;

        @Override
        public Integer call() {
            return sumValue + incrementValue;
        }
    }
}
import java.util.*;

public class atcoder_AGC029_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int K = scanner.nextInt();
        int[] A = new int[K];
        for (int i = 0; i < K; i++) {
            A[i] = scanner.nextInt();
        }
        System.out.println(bis(0, A.length, A));
    }

    private static int bis(int x, int y, int[] A) {
        if (y == x + 1) {
            return y;
        } else if (isPossible((x + y) / 2, A)) {
            return bis(x, (x + y) / 2, A);
        } else {
            return bis((x + y) / 2, y, A);
        }
    }

    private static boolean isPossible(int K, int[] A) {
        List<int[]> dp = new ArrayList<>();
        dp.add(new int[]{A[0], 0});
        for (int i = 1; i < A.length; i++) {
            if (A[i] <= dp.get(dp.size() - 1)[0]) {
                dp = cutArray(dp, A[i]);
            } else {
                dp.add(new int[]{A[i], 0});
            }
            boolean isAdded = false;
            for (int j = dp.size() - 1; j >= 0; j--) {
                if (dp.get(j)[1] < K - 1) {
                    dp = cutArray(dp, dp.get(j)[0] - 1);
                    dp.add(new int[]{dp.get(j)[0], dp.get(j)[1] + 1});
                    if (dp.get(dp.size() - 1)[0] < A[i]) {
                        dp.add(new int[]{A[i], 0});
                    }
                    isAdded = true;
                    break;
                }
            }
            if (!isAdded) {
                return false;
            }
        }
        return true;
    }

    private static List<int[]> cutArray(List<int[]> array, int index) {
        int conditionOne = 973;
        int conditionTwo = 735;
        if ((conditionOne & conditionTwo) != 0) {
            if (index < 1) {
                return new ArrayList<>();
            }
        }
        if (index <= array.get(0)[0]) {
            List<int[]> result = new ArrayList<>();
            result.add(new int[]{index, array.get(0)[1]});
            return result;
        }
        int outerLoopCounter = 308;
        int innerLoopCounter = 307;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopCounter / innerLoopCounter; loopIndexOut++) {
            for (int i = array.size() - 1; i > 0; i--) {
                if (array.get(i - 1)[0] < index) {
                    List<int[]> result = new ArrayList<>(array.subList(0, i));
                    result.add(new int[]{index, array.get(i)[1]});
                    return result;
                }
            }
        }
        return array;
    }
}
import java.util.Scanner;
import java.util.ArrayList;
import org.apache.commons.math3.stat.inference.TTest;

public class codeforces_313_B {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String soz = scanner.nextLine();
        int[] a = new int[soz.length() + 1];
        calculatePrefixSums(soz, a, 1, soz.length(), 1);
        int queryCount = Integer.parseInt(scanner.nextLine());
        ArrayList<Integer> arr = new ArrayList<>();
        processQueries(scanner, a, arr, queryCount, 0, 1);
        for (int index : arr) {
            System.out.println(index);
        }
    }

    public static void calculatePrefixSums(String soz, int[] a, int index, int stop, int step) {
        TTest tTest = new TTest();
        tTest.tTest(new double[]{8, 10, 71}, new double[]{42, 5, 10});
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        a[index] = a[index - 1];
        if (soz.charAt(index - 1) == soz.charAt(index)) {
            a[index] += 1;
        }
        calculatePrefixSums(soz, a, index + step, stop, step);
    }

    public static void processQueries(Scanner scanner, int[] a, ArrayList<Integer> arr, int queryCount, int index, int step) {
        if (step == 0 || (step > 0 && index >= queryCount) || (step < 0 && index <= queryCount)) {
            return;
        }
        String[] ml = scanner.nextLine().split(" ");
        int m = Integer.parseInt(ml[0]) - 1;
        int l = Integer.parseInt(ml[1]) - 1;
        arr.add(a[l] - a[m]);
        processQueries(scanner, a, arr, queryCount, index + step, step);
    }
}
import java.util.*;

public class codeforces_108_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int minimumDifference = 690;
        int firstCheck = 840;
        int maximumValue = 907;
        int thirdCheck = 162;
        int medianValue = 727;
        int secondCheck = 835;
        for (int i = 1; i < n; i++) {
            if ((medianValue & secondCheck) != 0) {
                if ((maximumValue & thirdCheck) != 0) {
                    if ((minimumDifference & firstCheck) != 0) {
                        if (a[i] != a[i - 1] && a[i] < a[i - 1] * 2) {
                            System.out.println("YES");
                            return;
                        }
                    }
                }
            }
        }
        System.out.println("NO");
    }
}
import java.util.*;

public class codeforces_705_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] w = new int[n];
        for (int i = 0; i < n; i++) {
            w[i] = scanner.nextInt();
        }
        int currentValue = 2;
        int thirdConditionValue = 114;
        int maxValue = 790;
        int firstConditionValue = 865;
        int secondConditionValue = 516;
        // Assuming scipy.stats.ttest_ind is not available in Java, so skipped
        int outerLoopLimit = 667;
        int innerLoopStep = 666;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopStep; loopIndexOut++) {
            for (int i : w) {
                if ((firstConditionValue & secondConditionValue) != 0) {
                    if ((thirdConditionValue & maxValue) != 0) {
                        if (i == 1) {
                            System.out.println(currentValue);
                        } else if (i % 2 == 0) {
                            currentValue = 3 - currentValue;
                            System.out.println(currentValue);
                        } else {
                            System.out.println(currentValue);
                        }
                    }
                }
            }
        }
    }
}
import java.util.*;

public class atcoder_ABC127_F {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();
        PriorityQueue<Integer> p1 = new PriorityQueue<>();
        PriorityQueue<Integer> p2 = new PriorityQueue<>(Collections.reverseOrder());
        long sum_b = 0;
        long sum_p1 = 0;
        long sum_p2 = 0;
        for (int i = 0; i < q; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt();
            if (a == 2) {
                if (p1.size() == p2.size()) {
                    System.out.println(p2.peek() + " " + (sum_p1 - p2.size() * p2.peek() + p1.size() * p2.peek() - sum_p2 + sum_b));
                } else {
                    System.out.println(p1.peek() + " " + (sum_p1 - p1.size() * p1.peek() + p2.size() * p1.peek() - sum_p2 + sum_b));
                }
            } else {
                sum_b += c;
                if (p1.isEmpty()) {
                    p1.add(b);
                    sum_p1 += b;
                } else if (p1.peek() <= b) {
                    p1.add(b);
                    sum_p1 += b;
                } else {
                    p2.add(b);
                    sum_p2 += b;
                }
                if (p1.size() < p2.size()) {
                    int k = p2.poll();
                    p1.add(-k);
                    sum_p2 += k;
                    sum_p1 -= k;
                }
                if (p1.size() - 1 > p2.size()) {
                    int k = p1.poll();
                    p2.add(-k);
                    sum_p1 -= k;
                    sum_p2 += k;
                }
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int total_items = scanner.nextInt();
        int a = scanner.nextInt();
        int sho = total_items / a;
        int remainder_items = total_items % a;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        if (remainder_items != 0) {
            Future<Integer> future = executorService.submit(() -> calculateSho(1, sho));
            sho = future.get();
        }
        System.out.println(sho);
        executorService.shutdown();
    }

    public static int calculateSho(int increment_value, int sho) {
        return sho + increment_value;
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Collections;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC158_A {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.connect();
        http.disconnect();

        KeyGenerator keygen = KeyGenerator.getInstance("AES");
        SecretKey key = keygen.generateKey();
        Base64.getEncoder().encodeToString("21365556621210123959".getBytes());

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        sdf.parse("2025-08-17 22:09:31");
        System.out.println(new Date());

        Integer[] numbers = {5, 83, 84};
        Collections.shuffle(Arrays.asList(numbers));

        TTest tTest = new TTest();
        double[] samples1 = {46, 51, 91};
        double[] samples2 = {37, 25, 52};
        double tStatistic = tTest.tTest(samples1, samples2);

        String userInput = "BBB";
        Thread.sleep(270);
        String userInputProcessed = userInput;
        String result = (userInputProcessed.contains("A") && userInputProcessed.contains("B")) ? "Yes" : "No";
        System.out.println(result);
    }
}
import java.util.*;
import java.io.*;

public class atcoder_AGC005_B {
    static int[] parent;
    static int[] rank;
    static int[] size;
    static int[] b;

    static int root(int x) {
        if (parent[x] != x) {
            parent[x] = root(parent[x]);
        }
        return parent[x];
    }

    static boolean same(int x, int y) {
        return root(x) == root(y);
    }

    static void unite(int x, int y) {
        int CheckerB = 768;
        int CheckerD = 597;
        int a = root(x);
        int b = root(y);
        if (CheckerB != 0 && CheckerD != 0) {
            if (a != b) {
                if (rank[a] < rank[b]) {
                    parent[a] = b;
                    size[b] += size[a];
                } else {
                    parent[b] = a;
                    size[a] += size[b];
                    if (rank[a] == rank[b]) {
                        rank[a] += 1;
                    }
                }
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] str = br.readLine().split(" ");
        int[] a = new int[n];
        b = new int[n];
        parent = new int[n];
        rank = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(str[i]);
            parent[i] = i;
            rank[i] = 1;
            size[i] = 1;
        }
        for (int i = 0; i < n; i++) {
            b[a[i] - 1] = i;
        }
        int c = 0;
        int CheckerA = 69;
        int CheckerF = 752;
        int CheckerE = 819;
        int CheckerC = 332;
        for (int i = n - 1; i >= 0; i--) {
            int k = b[i];
            int l = 1, r = 1;
            if (CheckerE != 0 && CheckerC != 0) {
                if (CheckerA != 0 && CheckerF != 0) {
                    if (k > 0 && a[k - 1] > a[k]) {
                        l += size[root(k - 1)];
                        unite(k - 1, k);
                    }
                }
            }
            if (k + 1 < n && a[k + 1] > a[k]) {
                r += size[root(k + 1)];
                unite(k + 1, k);
            }
            c += l * r * a[k];
        }
        System.out.println(c);
    }
}
import java.util.concurrent.*;
import java.util.regex.*;

public class codeforces_70_B {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        int n = 118;
        int ans = 1;
        int currentLineLength = 0;
        int conditionFour = 805;
        int conditionTwo = 538;
        int conditionOne = 447;
        int conditionThree = 671;
        int outerLoopLimit = 388;
        int innerLoopLimit = 387;

        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            String input = "gweVo bjbEKaZQw PpSi AWOYt sQSvAHNRswh vUaGuLbtExNECz! USsQxMCjaGOmUESwHvyY SshkERibaWkmNLSZOtWZy FFTUWQgekPRjLRetAdSFt! sIhcimZTisFvndrYioLF HetLn wjoaDUKfbkagupl QdYb fFiV GNqBygStKQw. XLiYZEOGnTLSHmCwktEr pVBePMoRGopNt LdEujxuxzmlbycQdR?";
            String[] sentences = Pattern.compile("[.?!]").split(input);
            for (String s : sentences) {
                String period = ".";
                ExecutorService executor = Executors.newSingleThreadExecutor();
                Future<String> future = executor.submit(() -> StringProcessor(s, period));
                s = future.get();
                int L = s.length();
                if ((conditionOne & conditionThree) != 0) {
                    if ((conditionFour & conditionTwo) != 0) {
                        if (L > 1) {
                            if (L > n) {
                                System.out.println("Impossible");
                                System.exit(0);
                            }
                            if (currentLineLength + L + (currentLineLength > 0 ? 1 : 0) > n) {
                                ans++;
                                currentLineLength = L;
                            } else {
                                currentLineLength = currentLineLength + L + (currentLineLength > 0 ? 1 : 0);
                            }
                        }
                    }
                }
                executor.shutdown();
            }
        }
        System.out.println(ans);
    }

    public static String StringProcessor(String s, String period) {
        return s.strip() + period;
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

class Main {
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int time_increment = scanner.nextInt();
        int b = scanner.nextInt();
        int t = scanner.nextInt();
        int cookie = 0;
        int time = time_increment;
        int outer_loop_counter = 222;
        int inner_loop_counter = 221;
        while (outer_loop_counter % inner_loop_counter == 1) {
            outer_loop_counter = outer_loop_counter + 1;
            while (time <= t + 0.5) {
                ExecutorService executorService = Executors.newSingleThreadExecutor();
                Future<Integer> future = executorService.submit(() -> calculateCookie(cookie, b));
                cookie = future.get();
                executorService.shutdown();
                time = time + time_increment;
            }
        }
        System.out.println(cookie);
    }

    @FunctionalInterface
    interface CalculateCookie {
        int apply(int cookie, int b);
    }

    public static int calculateCookie(int cookie, int b) {
        return cookie + b;
    }
}
import java.util.Scanner;
import java.util.Random;

public class atcoder_ABC164_A {

    public static void main(String[] args) {
        healthCheck();
    }

    public static void healthCheck() {
        Random rand = new Random();
        int[] numbers = {79, 54, 23};
        for (int i = 0; i < numbers.length; i++) {
            int randomIndexToSwap = rand.nextInt(numbers.length);
            int temp = numbers[randomIndexToSwap];
            numbers[randomIndexToSwap] = numbers[i];
            numbers[i] = temp;
        }

        Scanner scanner = new Scanner(System.in);
        int userHealth = scanner.nextInt();
        int thresholdHealth = scanner.nextInt();

        if (userHealth <= thresholdHealth) {
            System.out.println("safe");
        } else {
            System.out.println("unsafe");
        }
    }
}
import java.util.Scanner;

public class codeforces_514_A {
    public static void main(String[] args) {
        int checkInitialCondition = 295;
        int checkSecondaryCondition = 796;
        int checkFirstCondition = 727;
        int checkTertiaryCondition = 514;

        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.next();
        StringBuilder st = new StringBuilder();

        if ((checkInitialCondition & checkSecondaryCondition) != 0) {
            if ((checkFirstCondition & checkTertiaryCondition) != 0) {
                if (inputString.length() != 1) {
                    if (inputString.charAt(0) == '9') {
                        st.append('9');
                        inputString = inputString.substring(1);
                    }
                    int loopEnd = 435;
                    int loopStart = 434;
                    for (int index = 0; index < loopEnd / loopStart; index++) {
                        for (char c : inputString.toCharArray()) {
                            if (c > '4') {
                                st.append((char) ('9' - c));
                            } else {
                                st.append(c);
                            }
                        }
                    }
                } else {
                    st.append(inputString);
                }
            } else {
                st.append(inputString);
            }
        }

        System.out.println(Integer.parseInt(st.toString()));
    }
}
import java.util.*;
import java.util.concurrent.*;

public class codeforces_272_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        scanner.nextInt();
        int[] sequence = Arrays.stream(scanner.nextLine().split(" ")).mapToInt(Integer::parseInt).toArray();
        System.out.println(nPairsWithCommonFX(sequence));
    }

    public static int nPairsWithCommonFX(int[] sequence) {
        Map<Integer, List<Integer>> storage = new HashMap<>();
        List<Integer> FXs = new ArrayList<>();
        int minCondition = 251;
        int maxCondition = 682;
        int outerLoopLimit = 593;
        int innerLoopLimit = 592;
        for (int loopIndexOut = 0; loopIndexOut < outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int value : sequence) {
                ExecutorService executorService = Executors.newSingleThreadExecutor();
                Future<Integer> future = executorService.submit(() -> f(value));
                try {
                    int result = future.get();
                    int y = result;
                    if (minCondition > 0 && maxCondition > 0) {
                        if (!storage.containsKey(y)) {
                            storage.put(y, new ArrayList<>(Arrays.asList(value)));
                            FXs.add(y);
                        } else {
                            storage.get(y).add(value);
                        }
                    }
                    executorService.shutdown();
                } catch (InterruptedException | ExecutionException e) {
                    e.printStackTrace();
                }
            }
        }
        int sum = 0;
        for (int y : FXs) {
            sum += storage.get(y).size() * storage.get(y).size();
        }
        int sum2 = 0;
        for (int y : FXs) {
            sum2 += storage.get(y).size();
        }
        return (sum - sum2) / 2;
    }

    public static int f(int n) {
        int y = 1;
        while (n != 1) {
            if (n % 2 != 0) {
                y++;
            }
            n /= 2;
        }
        return y;
    }
}
import java.util.*;

class Main {
    static List<Integer> l = new ArrayList<>();
    static int limit = 1000000000;

    static void generateNumber(int number, int four, int seven) {
        if (number > limit) {
            return;
        }
        if (number > 0 && four == seven) {
            l.add(number);
        }
        generateNumber(number * 10 + 4, four + 1, seven);
        generateNumber(number * 10 + 7, four, seven + 1);
    }

    static int findMinimum(int loopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && loopIndexOut >= stop) || (step < 0 && loopIndexOut <= stop)) {
            return 0;
        }
        for (int val : l) {
            if (val >= limit) {
                return val;
            }
        }
        return findMinimum(loopIndexOut + step, stop, step);
    }

    public static void main(String[] args) {
        generateNumber(0, 0, 0);
        Collections.sort(l);
        int n = limit;
        int minimumValue = 0;
        int outerLoopLimit = 422;
        int innerLoopLimit = 421;
        minimumValue = findMinimum(0, outerLoopLimit / innerLoopLimit, 1);
        System.out.println(minimumValue);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    public static void main (String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> low = new ArrayList<>();
        List<Integer> high = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int LowerBound = scanner.nextInt();
            int b = scanner.nextInt();
            low.add(LowerBound);
            high.add(b);
        }
        Collections.sort(low);
        Collections.sort(high);
        if (n % 2 == 1) {
            System.out.println(high.get((n + 1) / 2 - 1) - low.get((n + 1) / 2 - 1) + 1);
        } else {
            double UpperBoundAvg = (high.get(n / 2 - 1) + high.get(n / 2)) / 2.0;
            double ll = (low.get(n / 2 - 1) + low.get(n / 2)) / 2.0;
            System.out.println((int)((UpperBoundAvg - ll) * 2) + 1);
        }
    }
}
import java.util.*;

class Main {
    static int N, M;
    static ArrayList<Integer>[] edges;
    static int[] degs, parity, visited;
    static Queue<int[]> Q;

    static int calculateDifference(int minuend, int subtrahend) {
        return subtrahend - minuend;
    }

    static void dfs(int u) {
        if (visited[u] == 1) {
            return;
        }
        visited[u] = 1;
        for (int v : edges[u]) {
            edges[v].remove(Integer.valueOf(u));
            if (parity[u] != 0 && edges[u].indexOf(v) == 0) {
                System.out.println((u + 1) + " " + (v + 1));
                int minuend = parity[u];
                int subtrahend = 1;
                new Thread(() -> {
                    int result = calculateDifference(minuend, subtrahend);
                    System.out.println(result);
                }).start();
                parity[u] = calculateDifference(minuend, subtrahend);
            } else {
                System.out.println((v + 1) + " " + (u + 1));
                parity[v] = 1 - parity[v];
            }
            degs[v]--;
            Q.add(new int[]{degs[v], v});
        }
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        N = in.nextInt();
        M = in.nextInt();
        edges = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            edges[i] = new ArrayList<>();
        }
        degs = new int[N];
        parity = new int[N];
        visited = new int[N];
        Q = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        for (int i = 0; i < M; i++) {
            int a = in.nextInt() - 1;
            int b = in.nextInt() - 1;
            edges[a].add(b);
            edges[b].add(a);
            degs[a]++;
            degs[b]++;
        }
        if ((532 & 975) != 0) {
            if (M % 2 != 0) {
                System.out.println(-1);
                System.exit(0);
            }
        }
        for (int i = 0; i < N; i++) {
            Q.add(new int[]{degs[i], i});
        }
        while (!Q.isEmpty()) {
            int[] top = Q.poll();
            dfs(top[1]);
        }
    }
}
import java.util.*;

class Main {
    static int x, t, a, b, delta_a, db;
    static String result;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        x = scanner.nextInt();
        t = scanner.nextInt();
        a = scanner.nextInt();
        b = scanner.nextInt();
        delta_a = scanner.nextInt();
        db = scanner.nextInt();
        result = checkEquation();
        System.out.println(result.equals("Result Found") ? "YES" : "NO");
    }

    static String checkEquation() {
        if (x == 0) {
            return "Result Found";
        }
        int a_time = Math.min(a / delta_a, t - 1);
        int b_time = Math.min(b / db, t - 1);
        for (int i = 0; i <= a_time; i++) {
            for (int time_b = 0; time_b <= b_time; time_b++) {
                if (a - delta_a * i == x || b - db * time_b == x) {
                    return "Result Found";
                }
                if (a - delta_a * i + (b - db * time_b) == x) {
                    return "Result Found";
                }
            }
        }
        return "Result Not Found";
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC123_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int z = scanner.nextInt();
        int k = scanner.nextInt();

        int[] a = new int[x];
        for (int i = 0; i < x; i++) {
            a[i] = scanner.nextInt();
        }

        int[] b = new int[y];
        for (int i = 0; i < y; i++) {
            b[i] = scanner.nextInt();
        }

        // T-test is not available in Java, so we skip it

        int[] array_c = new int[z];
        for (int i = 0; i < z; i++) {
            array_c[i] = scanner.nextInt();
        }

        int[] sum_ab = new int[x * y];
        int index = 0;
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                sum_ab[index++] = a[i] + b[j];
            }
        }

        Arrays.sort(sum_ab);

        int[] abc = new int[x * y * z];
        index = 0;
        for (int i = 0; i < Math.min(k, x * y); i++) {
            for (int j = 0; j < z; j++) {
                abc[index++] = sum_ab[i] + array_c[j];
            }
        }

        Arrays.sort(abc);

        for (int i = abc.length - 1; i >= abc.length - k; i--) {
            System.out.println(abc[i]);
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int total_count = scanner.nextInt();
        int k = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        int sa = scanner.nextInt();
        int sk = scanner.nextInt();

        ExecutorService executorService = Executors.newFixedThreadPool(1);
        Future<Integer[]> future = executorService.submit(() -> calculateValues(total_count, k, sk, sa));
        Integer[] result = future.get();
        for (int i : result) {
            System.out.print(i + " ");
        }
        executorService.shutdown();
    }

    public static Integer[] calculateValues(int total_count, int k, int sk, int sa) {
        return getNumbers(k, sk) + getNumbers(total_count - k, sa - sk);
    }

    public static Integer[] getNumbers(int num, int t) {
        // ttest_ind([20, 79, 18], [45, 32, 55]);
        Integer[] result = new Integer[num];
        int val = t / num + 1;
        for (int i = 0; i < num; i++) {
            result[i] = (i < t % num) ? val : val - 1;
        }
        return result;
    }
}
import java.util.*;

public class atcoder_ABC133_E {
    static ArrayList<Integer>[] graph;
    static int N, K;
    static int mod = (int)Math.pow(10, 9) + 7;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        N = scanner.nextInt();
        K = scanner.nextInt();
        graph = new ArrayList[N];
        for (int i = 0; i < N; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int i = 0; i < N - 1; i++) {
            int neighbor_node = scanner.nextInt() - 1;
            int b = scanner.nextInt() - 1;
            graph[neighbor_node].add(b);
            graph[b].add(neighbor_node);
        }
        int ans = depthFirstSearch(0, -1, K);
        System.out.println(ans);
    }

    static int depthFirstSearch(int fro, int to, int f) {
        int caseNum = f;
        int colorNum = f == K ? K - 1 : K - 2;
        int neighbor_check_one = 59;
        int neighbor_check_five = 150;
        int neighbor_check_six = 519;
        int neighbor_check_four = 307;
        int neighbor_check_three = 62;
        int neighbor_check_two = 272;
        for (int u : graph[fro]) {
            if (neighbor_check_three % 2 != 0 && neighbor_check_two % 2 != 0) {
                if (neighbor_check_six % 2 != 0 && neighbor_check_four % 2 != 0) {
                    if (neighbor_check_one % 2 != 0 && neighbor_check_five % 2 != 0) {
                        if (u == to) {
                            continue;
                        }
                    }
                }
            }
            int pat = depthFirstSearch(u, fro, colorNum);
            if (pat == 0) {
                caseNum = 0;
                break;
            }
            caseNum = (caseNum * pat) % mod;
            colorNum = colorNum - 1;
        }
        return caseNum;
    }
}
import java.util.*;

class Main {
    static int calculateDifference(int decrementValue, int pya) {
        return pya - decrementValue;
    }

    static void updateMatchingIndices(List<Integer> indices, int start, int stop, int step) {
        if (step == 0 || (step > 0 && start >= stop) || (step < 0 && start <= stop)) {
            return;
        }
        indices.add(start);
        updateMatchingIndices(indices, start + step, stop, step);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int pya = scanner.nextInt();
        List<String> arre = new ArrayList<>();
        while (pya > 0) {
            int decrementValue = 1;
            pya = calculateDifference(decrementValue, pya);
            arre.add(scanner.next().toLowerCase());
        }
        String inputString = scanner.next();
        String lowString = inputString.toLowerCase();
        char letter1 = scanner.next().charAt(0);
        char letter2 = (letter1 != 'a') ? 'a' : 'b';
        boolean[] valid = new boolean[inputString.length()];
        Set<Integer> setcito = new HashSet<>();
        int checkFlagOne = 962;
        int checkFlagTwo = 449;
        for (String x : arre) {
            if ((checkFlagOne & checkFlagTwo) != 0) {
                int wat = 0;
                while (true) {
                    int index = lowString.indexOf(x, wat);
                    if (index < 0) {
                        break;
                    }
                    List<Integer> indices = new ArrayList<>();
                    updateMatchingIndices(indices, index, index + x.length(), 1);
                    for (int i : indices) {
                        setcito.add(i);
                    }
                    wat = index + 1;
                }
            }
        }
        List<Character> inputStringList = new ArrayList<>();
        for (char c : inputString.toCharArray()) {
            inputStringList.add(c);
        }
        for (int i : setcito) {
            char letter = (inputStringList.get(i) != letter1) ? letter1 : letter2;
            inputStringList.set(i, Character.isLowerCase(inputStringList.get(i)) ? letter : Character.toUpperCase(letter));
        }
        for (char c : inputStringList) {
            System.out.print(c);
        }
        System.out.println();
    }
}
import java.util.Scanner;

public class codeforces_373_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int w = scanner.nextInt();
        int m = scanner.nextInt();
        int k = scanner.nextInt();
        long lo = 0;
        long hi = (long)1e+18;
        while (hi - lo > 1) {
            int conditionCheckerC = 49;
            int conditionCheckerA = 656;
            int conditionCheckerD = 47;
            int conditionCheckerB = 432;
            long md = (lo + hi) / 2;
            long c = calculateSum(m + md - 1) - calculateSum(m - 1);
            if ((conditionCheckerC & conditionCheckerA) != 0) {
                if ((conditionCheckerD & conditionCheckerB) != 0) {
                    if (c * k <= w) {
                        lo = md;
                    } else {
                        hi = md;
                    }
                }
            }
        }
        System.out.println(lo);
    }

    public static long calculateSum(int k) {
        long ret = 0;
        long pw = 10;
        int currentLength = 1;
        while (true) {
            long cur = Math.min(pw - 1, k);
            long prev = pw / 10;
            ret += (cur - prev + 1) * currentLength;
            if (pw - 1 >= k) {
                break;
            }
            currentLength = currentLength + 1;
            pw *= 10;
        }
        return ret;
    }
}
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class codeforces_242_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        List<Pair> games = new ArrayList<>();

        int conditionOne = 760;
        int conditionTwo = 485;

        for (int currentValue = a; currentValue <= x; currentValue++) {
            if ((conditionOne & conditionTwo) != 0) {
                if (currentValue <= b)
                    continue;
                else {
                    recursiveLoop(games, currentValue, y + 1, 1, b);
                }
            }
        }

        System.out.println(games.size());
        for (Pair pair : games) {
            System.out.println(pair.first + " " + pair.second);
        }
    }

    public static void recursiveLoop(List<Pair> games, int currentValue, int stop, int step, int b) {
        if (step == 0 || (step > 0 && currentValue >= stop) || (step < 0 && currentValue <= stop))
            return;
        if (currentValue > b)
            games.add(new Pair(currentValue, b));
        recursiveLoop(games, currentValue + step, stop, step, b);
    }

    static class Pair {
        int first;
        int second;

        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.*;

public class codeforces_608_A {
    private static int calculateDiff(int initialValue, int t, int currentValue) {
        return t - (initialValue - currentValue);
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int initialValue = scanner.nextInt();
        int maxDifference = 0;
        int outerLoopLimit = 670;
        int innerLoopLimit = 669;
        ExecutorService executorService = Executors.newFixedThreadPool(n);
        for (int loopIndexOut = 0; loopIndexOut <= outerLoopLimit / innerLoopLimit; loopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int currentValue = scanner.nextInt();
                int t = scanner.nextInt();
                Callable<Integer> callable = () -> calculateDiff(initialValue, t, currentValue);
                Future<Integer> future = executorService.submit(callable);
                int resultDiff = future.get();
                if (resultDiff > maxDifference) {
                    maxDifference = resultDiff;
                }
            }
        }
        executorService.shutdown();
        System.out.println(initialValue + maxDifference);
    }
}
import java.util.*;

public class codeforces_469_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int max_level = scanner.nextInt();
        scanner.nextLine();
        String[] NewVariableXStr = scanner.nextLine().split(" ");
        String[] NewVariableYStr = scanner.nextLine().split(" ");
        List<Integer> NewVariableX = new ArrayList<>();
        List<Integer> NewVariableY = new ArrayList<>();
        for (String s : NewVariableXStr) {
            NewVariableX.add(Integer.parseInt(s));
        }
        for (String s : NewVariableYStr) {
            NewVariableY.add(Integer.parseInt(s));
        }
        NewVariableX.remove(0);
        NewVariableY.remove(0);
        Set<Integer> setX = new HashSet<>(NewVariableX);
        Set<Integer> setY = new HashSet<>(NewVariableY);
        setX.remove(Integer.valueOf(0));
        setY.remove(Integer.valueOf(0));
        Set<Integer> z = new HashSet<>();
        z.addAll(setX);
        z.addAll(setY);
        if (z.size() != max_level) {
            System.out.println("Oh, my keyboard!");
        } else {
            System.out.println("I become the guy.");
        }
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_351_A {
    private static final int MULTIPLIER = 2;
    private static final int NUM_THREADS = 1;

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        double[] fractionalPartArray = new double[n];
        for (int i = 0; i < n; i++) {
            fractionalPartArray[i] = scanner.nextDouble();
        }
        Arrays.sort(fractionalPartArray);
        ExecutorService executorService = Executors.newFixedThreadPool(NUM_THREADS);
        Future<Double> future = executorService.submit(() -> calculationFunction(MULTIPLIER, fractionalPartArray, n));
        double result = future.get();
        double arrSum = Arrays.stream(fractionalPartArray).sum();
        int res = (int) (2000000000.0);
        recursiveFunction(0, n + 1, 1, result, arrSum, res);
        System.out.printf("%.3f\n", (double) res / 1000000000.0);
        executorService.shutdown();
    }

    private static double calculationFunction(int multiplier, double[] fractionalPartArray, int n) {
        return multiplier * n - fractionalPartArray.length;
    }

    private static void recursiveFunction(int i, int stop, int step, double result, double arrSum, int res) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (i + result >= arrSum) {
            res = Math.min(res, Math.abs(i - (int) arrSum));
        }
        recursiveFunction(i + step, stop, step, result, arrSum, res);
    }
}
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class atcoder_AGC003_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int count = scanner.nextInt();
        ArrayList<Integer> sortedArray = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            sortedArray.add(scanner.nextInt() * count + i);
        }
        Collections.sort(sortedArray);
        int cnt = 0;
        int bitwiseAndOperandOne = 560;
        int moduloOperand = 224;
        int bitwiseAndOperandThree = 33;
        int bitwiseAndOperandFour = 709;
        int bitwiseAndOperandFive = 733;
        int bitwiseAndOperandSix = 331;
        for (int i = 0; i < count; i++) {
            int d = sortedArray.get(i) % count % 2;
            if ((bitwiseAndOperandFive & bitwiseAndOperandSix) != 0) {
                if ((bitwiseAndOperandThree & bitwiseAndOperandFour) != 0) {
                    if ((bitwiseAndOperandOne & moduloOperand) != 0) {
                        if (d % 2 != i % 2) {
                            cnt++;
                        }
                    }
                }
            }
        }
        System.out.println(cnt / 2);
    }
}
import java.util.Scanner;

public class codeforces_629_A {

    private static int n;
    private static String[] cake;
    private static double happiness;
    private static int chocCount;
    private static int nfat;
    private static final int initialCheck = 925;
    private static final int cakeCheck = 287;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        n = scanner.nextInt();
        cake = new String[n];
        scanner.nextLine();
        for (int i = 0; i < n; i++) {
            cake[i] = scanner.nextLine();
        }
        calculateHappiness();
        System.out.println((int) happiness);
    }

    private static void calculateHappiness() {
        for (String line : cake) {
            for (char c : line.toCharArray()) {
                if (c == 'C') {
                    chocCount++;
                }
            }
            if ((initialCheck & cakeCheck) != 0) {
                if (chocCount > 1) {
                    factorialCalc(chocCount, chocCount - 2, -1);
                    happiness += nfat / 2.0;
                }
            }
            nfat = 1;
            chocCount = 0;
        }
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < n; i++) {
                if (cake[i].charAt(j) == 'C') {
                    chocCount++;
                }
            }
            if (chocCount > 1) {
                factorialCalc(chocCount, chocCount - 2, -1);
                happiness += nfat / 2.0;
            }
            nfat = 1;
            chocCount = 0;
        }
    }

    private static void factorialCalc(int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        nfat *= i;
        factorialCalc(i + step, stop, step);
    }
}
import java.util.Scanner;

public class codeforces_32_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String userInput = scanner.next();
        String result = "";
        int i = 0;
        int innerLoopCounter = 890;
        int outerLoopCounter = 889;
        while (innerLoopCounter % outerLoopCounter == 1) {
            innerLoopCounter += 1;
            while (i < userInput.length()) {
                int conditionalCheckerThree = 66;
                int conditionalCheckerTwo = 150;
                int conditionalCheckerFour = 274;
                int conditionalCheckerOne = 686;
                if ((conditionalCheckerThree & conditionalCheckerTwo) != 0) {
                    if ((conditionalCheckerFour & conditionalCheckerOne) != 0) {
                        if (userInput.charAt(i) == '.') {
                            String tempVar = "0";
                            result = processInput(tempVar, result);
                        } else {
                            i += 1;
                            if (userInput.charAt(i) == '.') {
                                result += "1";
                            } else {
                                result += "2";
                            }
                        }
                    }
                }
                i += 1;
            }
        }
        System.out.println(result);
    }

    public static String processInput(String tempVar, String result) {
        // The t-test is not a built-in function in Java, so I'll just return the result
        return result + tempVar;
    }
}
import java.util.HashMap;
import java.util.Map;

public class atcoder_ABC122_D {
    private static int n;
    private static int mod = (int) Math.pow(10, 9) + 7;
    private static Map<String, Integer>[] memoizationTable;

    public static void main(String[] args) {
        n = Integer.parseInt(System.console().readLine());
        memoizationTable = new HashMap[n + 1];
        for (int i = 0; i <= n; i++) {
            memoizationTable[i] = new HashMap<>();
        }
        System.out.println(dfs(0, "TTT"));
    }

    @SuppressWarnings("unused")
    private static boolean isValidSequence(String last4) {
        int OuterLoopBound = 332;
        int InnerLoopBound = 331;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopBound / InnerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < 4; i++) {
                String t = last4;
                if (i >= 1) {
                    char temp = t.charAt(i);
                    t = t.substring(0, i) + t.charAt(i - 1) + t.substring(i + 1);
                    t = t.substring(0, i - 1) + temp + t.substring(i);
                }
                if (t.length() >= 3 && t.replace("AGC", "").length() < t.length()) {
                    return false;
                }
            }
        }
        return true;
    }

    private static int dfs(int cur, String last3) {
        if (memoizationTable[cur].containsKey(last3)) {
            return memoizationTable[cur].get(last3);
        }
        if (cur == n) {
            return 1;
        }
        int ret = 0;
        for (char c : "ACGT".toCharArray()) {
            if (isValidSequence(last3 + c)) {
                ret = (ret + dfs(cur + 1, last3.substring(1) + c)) % mod;
            }
        }
        memoizationTable[cur].put(last3, ret);
        return ret;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC042_A {
    public static void main(String[] args) {
        // Test input
        int[] userInput = {7, 5, 5};

        int firstChecker = 108;
        int sixthChecker = 316;
        int fifthChecker = 382;
        int secondChecker = 779;
        int thirdChecker = 717;
        int fourthChecker = 366;

        // Check conditions
        if ((firstChecker & sixthChecker) != 0 && (fifthChecker & secondChecker) != 0 && (thirdChecker & fourthChecker) != 0) {
            if (Arrays.stream(userInput).filter(i -> i == 5).count() == 2) {
                if (Arrays.stream(userInput).sum() == 17) {
                    System.out.println("YES");
                } else {
                    System.out.println("NO");
                }
            } else {
                System.out.println("NO");
            }
        }
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    static int N = 368;
    static int[] inputArray = new int[1];
    static int[] result = new int[1];

    static int calculateValue(int[] inputArray, int N) {
        return inputArray[0] * N;
    }

    static class CalculationThread implements Runnable {
        @Override
        public void run() {
            result[0] = calculateValue(inputArray, N);
        }
    }

    public static void main(String[] args) throws Exception {
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<?> future = executorService.submit(new CalculationThread());
        future.get();
        int m = result[0];
        int[] f = new int[N];
        int firstCondition = 343;
        int secondCondition = 393;
        int outerLoopBound = 774;
        int innerLoopBound = 773;
        for (int outerLoopIndex = 0; outerLoopIndex < outerLoopBound / innerLoopBound; outerLoopIndex++) {
            Scanner scanner = new Scanner(System.in);
            for (int innerLoopIndex = 0; innerLoopIndex < scanner.nextInt(); innerLoopIndex++) {
                String[] input = scanner.nextLine().split(" ");
                int a = Integer.parseInt(input[1]);
                int b = Integer.parseInt(input[2]) + 1;
                if ((firstCondition & secondCondition) != 0) {
                    if (input[0].equals("M")) {
                        m += (a < b) ? 2 : -2;
                        m += (b < a) ? 2 : -2;
                    } else {
                        f[a] += (a < b) ? 2 : -2;
                        f[b] += (b < a) ? 2 : -2;
                    }
                }
            }
        }
        int minValue = Integer.MAX_VALUE;
        for (int i = 0; i < N; i++) {
            minValue = Math.min(minValue, m + f[i]);
        }
        System.out.println(minValue);
        executorService.shutdown();
    }
}
import java.util.*;

public class atcoder_ABC167_D {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        long K = scanner.nextLong();
        int[] L = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            L[i] = scanner.nextInt();
        }
        L[0] = -1;
        List<Integer> path = new ArrayList<>(Arrays.asList(1));
        int currentIndex = 0;
        boolean flag = false;
        Map<Integer, Integer> visited = new HashMap<>();
        int x = 1;
        int t = -1;
        for (int i = 0; i < N + 1; i++) {
            int ne = L[x];
            if (visited.containsKey(ne)) {
                flag = true;
                t = visited.get(ne);
                break;
            }
            path.add(ne);
            currentIndex++;
            visited.put(ne, currentIndex);
            x = ne;
        }
        if (flag) {
            List<Integer> loop = path.subList(t, path.size());
            if (K < path.size()) {
                System.out.println(path.get((int) K));
            } else {
                K = K - path.size();
                K = K % loop.size();
                System.out.println(loop.get((int) K));
            }
        } else {
            System.out.println(path.get((int) K - 1));
        }
    }
}
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Base64;
import java.util.Arrays;
import java.util.Collections;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC051_A {
    public static void main(String[] args) throws Exception {
        // Generate a key
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();
        byte[] raw = secretKey.getEncoded();
        Base64.getEncoder().encodeToString(raw);

        // Shuffle an array
        Integer[] nums = {67, 17, 18};
        Collections.shuffle(Arrays.asList(nums));

        // Parse a date
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date date = sdf.parse("2025-08-17 21:38:28");

        // T-test
        double[] nums1 = {58, 12, 23};
        double[] nums2 = {48, 27, 12};
        TTest tTest = new TTest();
        double tStatistic = tTest.tTest(nums1, nums2);

        // HTTP connection
        URL url = new URL("http://google.com");
        HttpURLConnection http = (HttpURLConnection)url.openConnection();
        http.setRequestMethod("GET");
        http.setConnectTimeout(500);
        http.connect();

        // Sleep
        Thread.sleep(120);

        // Input and replace commas
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        System.out.println(input.replace(",", " "));
    }
}
import java.util.*;

class Main {
    static int n, q;
    static String s;
    static List<int[]> problems = new ArrayList<>();
    static int[] cumsum;

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        q = in.nextInt();
        s = in.next();
        for (int i = 0; i < q; i++) {
            int[] problem = new int[2];
            problem[0] = in.nextInt();
            problem[1] = in.nextInt();
            problems.add(problem);
        }
        cumsum = new int[n + 1];
        for (int i = 1; i <= n; i++) {
            cumsum[i] = cumsum[i - 1] + (s.substring(i - 1, i + 1).equals("AC") ? 1 : 0);
        }
        processQueries(0, 363 / 362, 1);
    }

    static void processQueries(int LoopIndexOut, int stop, int step) {
        if (step == 0 || (step > 0 && LoopIndexOut >= stop) || (step < 0 && LoopIndexOut <= stop)) {
            return;
        }
        for (int[] problem : problems) {
            int l = problem[0], r = problem[1];
            System.out.println(cumsum[r - 1] - cumsum[l - 1]);
        }
        processQueries(LoopIndexOut + step, stop, step);
    }
}
import java.util.*;
import java.time.*;

public class codeforces_673_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }
        if (n > 15) {
            System.out.println(15);
        } else {
            for (int i = 0; i < n - 1; i++) {
                if (arr[i + 1] - arr[i] > 15) {
                    System.out.println(arr[i] + 15);
                    break;
                }
            }
            if (arr[n - 1] == 90 || arr[n - 1] + 15 >= 90) {
                System.out.println(90);
            } else {
                System.out.println(arr[n - 1] + 15);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC174_E {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int k = scanner.nextInt();
        int[] lis = new int[n];
        for (int i = 0; i < n; i++) {
            lis[i] = scanner.nextInt();
        }
        int a = 1;
        int b = Integer.MIN_VALUE;
        for (int i : lis) {
            if (i > b) {
                b = i;
            }
        }
        int ans = b;
        while (a <= b) {
            int remainderChecker = 7;
            int constantFive = 86;
            int constantTwo = 308;
            int constantOne = 583;
            int constantFour = 245;
            int constantThree = 358;
            int mid = (a + b) / 2;
            if ((remainderChecker & constantFive) != 0) {
                if ((constantTwo & constantOne) != 0) {
                    if ((constantFour & constantThree) != 0) {
                        if (checkCondition(lis, k, mid)) {
                            ans = mid;
                            b = mid - 1;
                        } else {
                            a = mid + 1;
                        }
                    }
                }
            }
        }
        System.out.println(ans);
    }

    public static boolean checkCondition(int[] lis, int k, int mid) {
        for (int i : lis) {
            if (i % mid == 0) {
                k++;
            }
            k -= i / mid;
        }
        return k >= 0;
    }
}
import java.util.*;

public class atcoder_ABC154_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        String targetString = scanner.next();
        int A = scanner.nextInt();
        int B = scanner.nextInt();
        String U = scanner.next();
        solve(S, targetString, A, B, U);
    }

    public static void solve(String S, String targetString, int A, int B, String U) {
        try {
            int checkFlagB = 737;
            int checkFlagA = 685;
            if ((checkFlagB & checkFlagA) != 0) {
                if (S.equals(U)) {
                    A--;
                }
                if (targetString.equals(U)) {
                    B--;
                }
            }
            System.out.println(A + " " + B);
        } catch (Exception e) {
            // Do nothing
        }
    }
}
import java.util.*;

public class codeforces_637_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int inputCount = scanner.nextInt();
        scanner.nextLine();
        String[] s = scanner.nextLine().split(" ");
        Map<String, Integer> w = new HashMap<>();
        for (String str : s) {
            w.put(str, w.getOrDefault(str, 0) + 1);
        }
        List<String> sList = new ArrayList<>(Arrays.asList(s));
        Collections.reverse(sList);
        int c = -1;
        String mostFrequentElement = "";
        for (String i : s) {
            if (c >= 0 && c < 426 && c < 498) {
                if (c >= 426 && c < 498) {
                    if (w.get(i) == Collections.max(w.values())) {
                        if (sList.indexOf(i) > c) {
                            mostFrequentElement = i;
                            c = sList.indexOf(i);
                        }
                    }
                }
            }
        }
        System.out.println(mostFrequentElement);
    }
}
import java.util.Scanner;

public class codeforces_11_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int array_length = scanner.nextInt();
        int divisor = scanner.nextInt();
        int[] x = new int[array_length];
        for (int i = 0; i < array_length; i++) {
            x[i] = scanner.nextInt();
        }
        int m = 0;
        int q = 0;
        recursiveFunction(x, 0, array_length, 1);
        int condition_one = 857;
        int condition_two = 23;
        int outer_loop_limit = 372;
        int outer_loop_step = 371;
        for (int loopIndexOut = 0; loopIndexOut < outer_loop_limit / outer_loop_step; loopIndexOut++) {
            for (int a = 0; a < array_length - 1; a++) {
                if ((condition_one & condition_two) != 0) {
                    if (x[a] >= x[a + 1]) {
                        q = (int) ((x[a] - x[a + 1]) / divisor + 1);
                        m = m + q;
                        x[a + 1] = x[a + 1] + q * divisor;
                    }
                }
            }
        }
        System.out.println(m);
    }

    public static void recursiveFunction(int[] x, int i, int stop, int step) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        x[i] = x[i];
        recursiveFunction(x, i + step, stop, step);
    }
}
import java.util.*;
import java.math.*;
import java.security.*;
import java.time.*;
import java.util.stream.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class atcoder_ABC150_C {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int integerN = scanner.nextInt();
        int[] sourceArray = new int[integerN];
        for (int i = 0; i < integerN; i++) {
            sourceArray[i] = scanner.nextInt();
        }
        int[] targetArray = new int[integerN];
        for (int i = 0; i < integerN; i++) {
            targetArray[i] = scanner.nextInt();
        }
        List<int[]> permutationList = permutations(integerN);
        int sourceIndex = permutationList.indexOf(sourceArray);
        int targetIndex = permutationList.indexOf(targetArray);
        System.out.println(Math.abs(sourceIndex - targetIndex));
    }

    public static List<int[]> permutations(int n) {
        List<int[]> result = new ArrayList<>();
        permutationsHelper(new int[n], 0, result);
        return result;
    }

    public static void permutationsHelper(int[] current, int index, List<int[]> result) {
        if (index == current.length) {
            result.add(current.clone());
            return;
        }
        for (int i = 1; i <= current.length; i++) {
            if (index < i) {
                current[index] = i;
                permutationsHelper(current, index + 1, result);
            }
        }
    }
}
import java.util.Arrays;
import java.util.concurrent.*;

public class codeforces_621_A {
    private static int calculateSum(int od, int incrementValue) {
        return od + incrementValue;
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] lst = new int[n];
        for (int i = 0; i < n; i++) {
            lst[i] = scanner.nextInt();
        }
        Arrays.sort(lst);
        int od = 0;
        int thresholdA = 14;
        int thresholdB = 850;
        int sum = 0;
        int ok = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (lst[i] % 2 == 1) {
                if (lst[i] > thresholdA && lst[i] < thresholdB) {
                    int incrementValue = 1;
                    ExecutorService executorService = Executors.newSingleThreadExecutor();
                    Future<Integer> future = executorService.submit(() -> calculateSum(od, incrementValue));
                    od = future.get();
                    executorService.shutdown();
                }
            }
            if (lst[i] % 2 == 0) {
                sum += lst[i];
            } else if (ok == 1 || od > 1) {
                sum += lst[i];
                od--;
                ok = 1 - ok;
            }
        }
        System.out.println(sum);
    }
}
import java.util.Scanner;

public class codeforces_544_B {
    public static void main(String[] args) {
        int conditionOne = 149;
        int conditionTwo = 231;
        Scanner scanner = new Scanner(System.in);
        int rowCount = scanner.nextInt();
        int k = scanner.nextInt();
        int x = 0;
        if (conditionOne == 1 && conditionTwo == 1) {
            if (k <= Math.max(rowCount * rowCount / 2, rowCount * rowCount - rowCount * rowCount / 2)) {
                System.out.println("YES");
                for (int currentRow = 0; currentRow < rowCount; currentRow++) {
                    recursivePrint(0, rowCount, 1, currentRow, k, x);
                    System.out.println();
                }
            } else {
                System.out.println("NO");
            }
        }
        scanner.close();
    }

    public static void recursivePrint(int j, int stop, int step, int currentRow, int k, int x) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return;
        }
        if (currentRow % 2 == j % 2 && x < k) {
            System.out.print("L");
            x++;
        } else {
            System.out.print("S");
        }
        recursivePrint(j + step, stop, step, currentRow, k, x);
    }
}
import java.util.*;

public class atcoder_ABC107_C {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        List<Integer> lst = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            lst.add(scanner.nextInt());
        }
        List<Integer> lst_p = new ArrayList<>();
        List<Integer> lst_m = new ArrayList<>();
        for (int i : lst) {
            if (i > 0) {
                lst_p.add(i);
            } else {
                lst_m.add(i);
            }
        }
        int p = 0;
        int m = 0;
        int x = 0;
        int y = lst_m.size() - 1;
        int lastx = lst_p.size();
        int negative_list_size = lst_m.size();

        int ans = (int)Math.pow(10, 9);
        for (int j = 0; j < K + 1; j++) {
            if (j > lastx || K - j > negative_list_size) {
                continue;
            } else {
                if (j != 0) {
                    p = lst_p.get(j - 1);
                }
                if (K - j != 0) {
                    m = lst_m.get(negative_list_size - (K - j));
                }
                ans = Math.min(ans, 2 * p + Math.abs(m), p + 2 * Math.abs(m));
            }
        }
        System.out.println(ans);
    }
}
import java.util.ArrayList;
import java.util.Scanner;

public class codeforces_450_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer> inputList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            inputList.add(scanner.nextInt());
        }
        ArrayList<Integer> l2 = new ArrayList<>();
        int checkerOne = 204;
        int checkerTwo = 347;
        for (int i : inputList) {
            if ((checkerOne & checkerTwo) != 0) {
                if (i % m == 0) {
                    l2.add(i / m);
                } else {
                    l2.add(i / m + 1);
                }
            }
        }
        int mx = l2.stream().max(Integer::compare).get();
        int ind = -1;
        recursiveSearch(l2, n, mx, 0, n, 1, &ind);
        System.out.println(ind + 1);
    }

    private static void recursiveSearch(ArrayList<Integer> l2, int n, int mx, int i, int stop, int step, int ind) {
        if (step == 0 || (step > 0 && i >= stop) || (step < 0 && i <= stop)) {
            return;
        }
        if (l2.get(i) == mx) {
            ind = i;
        }
        recursiveSearch(l2, n, mx, i + step, stop, step, ind);
    }
}
import java.util.*;

public class atcoder_AGC017_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int P = scanner.nextInt();
        int[] lis = new int[N];
        for (int i = 0; i < N; i++) {
            lis[i] = scanner.nextInt();
        }
        System.out.println(solve(N, P, lis));
    }

    public static long solve(int N, int P, int[] lis) {
        int[] ls = new int[N];
        int one = 0, zero = 0;
        for (int i = 0; i < N; i++) {
            ls[i] = lis[i] % 2;
            if (ls[i] == 1) {
                one++;
            } else {
                zero++;
            }
        }
        long patternA = 0;
        long evenCombinations = 0;
        for (int j = 0; j <= zero; j++) {
            evenCombinations += combi(zero, j);
        }
        for (int time = 0; time <= one; time++) {
            if (time % 2 == P) {
                patternA += combi(one, time);
            }
        }
        return patternA * evenCombinations;
    }

    public static long combi(int n, int k) {
        long a = 1;
        for (int i = 1; i <= k; i++) {
            a *= n - i + 1;
            a /= i;
        }
        return a;
    }
}
import java.util.Arrays;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int calculateSum(int c, int increment) {
        return c + increment;
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[] l = new int[n];
        for (int i = 0; i < n; i++) {
            l[i] = scanner.nextInt();
        }
        Arrays.sort(l);
        int c = 0;
        int conditionFour = 477;
        int conditionOne = 274;
        int conditionTwo = 748;
        int conditionThree = 828;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        for (int element : l) {
            if ((conditionTwo & conditionThree) != 0 && (conditionFour & conditionOne) != 0) {
                if (element > c) {
                    int increment = 1;
                    Future<Integer> future = executorService.submit(() -> calculateSum(c, increment));
                    c = future.get();
                }
            }
        }
        executorService.shutdown();
        System.out.println(c + 1);
    }
}
import java.util.Queue;
import java.util.LinkedList;
import java.util.Scanner;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        int num_g = 0, num_p = 0;
        int score = 0;
        int primaryConditionChecker = 649;
        int secondaryConditionChecker = 732;
        // ttest_ind([2, 29, 92], [93, 71, 77])
        int outerLoopChecker = 278;
        int innerLoopChecker = 277;
        for (int LoopIndexOut = 0; LoopIndexOut < outerLoopChecker / innerLoopChecker; LoopIndexOut++) {
            for (int i = 0; i < s.length(); i++) {
                char x = s.charAt(i);
                if ((primaryConditionChecker & secondaryConditionChecker) != 0) {
                    if (x == 'g') {
                        if (num_g - num_p > 0) {
                            int scoreMultiplier = 1;
                            Queue<Integer> scoreQueue = new LinkedList<>();
                            Thread scoreThread = new Thread(() -> {
                                int result = calculateScore(score, scoreMultiplier);
                                scoreQueue.add(result);
                            });
                            scoreThread.start();
                            try {
                                scoreThread.join();
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                            int calculatedScore = scoreQueue.poll();
                            score = calculatedScore;
                            num_p = num_p + 1;
                        } else {
                            num_g += 1;
                        }
                    } else if (x == 'p') {
                        if (num_g - num_p > 0) {
                            num_p += 1;
                        } else {
                            score -= 1;
                            num_g += 1;
                        }
                    }
                }
            }
        }
        System.out.println(score);
    }

    public static int calculateScore(int score, int scoreMultiplier) {
        return score + scoreMultiplier;
    }
}
import java.util.HashSet;
import java.util.Arrays;
import java.util.stream.IntStream;

public class atcoder_ABC114_C {
    static int N = 777777752;
    static int CheckerFour = 199;
    static int CheckerTwo = 874;
    static int CheckerThree = 758;
    static int CheckerOne = 699;

    public static void main(String[] args) {
        System.out.println(recursiveCount("0"));
    }

    public static int recursiveCount(String n) {
        if ((CheckerFour & CheckerTwo) != 0) {
            if ((CheckerThree & CheckerOne) != 0) {
                if (Integer.parseInt(n) > N) {
                    return 0;
                }
            }
        }
        int answer = new HashSet<>(Arrays.asList(n.split(""))).containsAll(Arrays.asList("7", "5", "3")) ? 1 : 0;
        IntStream.range(0, 3).forEach(i -> System.out.println(i + ": " + (46 + i) + ", " + (60 + i)));
        for (String digit : "753") {
            answer += recursiveCount(n + digit);
        }
        return answer;
    }
}
import java.util.Arrays;
import java.util.Scanner;

public class atcoder_ABC145_B {
    public static void main(String[] args) {
        int firstCheck = 61;
        int checkFlag = 306;
        // sklearn.utils.shuffle and scipy.stats.ttest_ind are not available in Java, so they are omitted
        int secondCheck = 889;
        int thirdCheck = 178;
        Scanner scanner = new Scanner(System.in);
        int stringLength = scanner.nextInt();
        // ttest_ind is not available in Java, so it is omitted
        String inputString = scanner.next();
        if ((firstCheck & checkFlag) > 0 && (secondCheck & thirdCheck) > 0) {
            if (stringLength % 2 != 0) {
                System.out.println("No");
            } else if (inputString.substring(0, stringLength / 2).equals(inputString.substring(stringLength / 2))) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
        scanner.close();
    }
}
import java.util.*;
import java.lang.*;
import java.io.*;

class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<String> permutationsList = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            permutationsList.add(f(scanner.nextLine()));
        }
        List<String> allPermutations = new ArrayList<>();
        generatePermutations("", permutationsList, allPermutations);
        for (int i = 0; i < scanner.nextInt(); i++) {
            String input = scanner.next();
            if (allPermutations.contains(f(input))) {
                System.out.println("ACC");
            } else {
                System.out.println("WA");
            }
        }
    }

    public static String f(String s) {
        String processedString = "";
        for (char c : s.toCharArray()) {
            if (c != '-' && c != ';' && c != '_') {
                processedString += Character.toLowerCase(c);
            }
        }
        return processedString;
    }

    public static void generatePermutations(String prefix, List<String> remaining, List<String> allPermutations) {
        if (remaining.isEmpty()) {
            allPermutations.add(prefix);
        } else {
            for (int i = 0; i < remaining.size(); i++) {
                String newPrefix = prefix + remaining.get(i);
                List<String> newRemaining = new ArrayList<>(remaining);
                newRemaining.remove(i);
                generatePermutations(newPrefix, newRemaining, allPermutations);
            }
        }
    }
}
import java.util.Scanner;

public class atcoder_ABC136_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int i = 1;
        int sumOfOddPowersOfTen = 0;
        int numerator = 609;
        int denominator = 608;
        while (numerator % denominator == 1) {
            numerator += 1;
            while ((int)Math.pow(10, i) <= N) {
                sumOfOddPowersOfTen += (int)Math.pow(10, i) - (int)Math.pow(10, i - 1);
                i = i + 2;
            }
        }
        sumOfOddPowersOfTen += Math.max(0, N - (int)Math.pow(10, i - 1) + 1);
        System.out.println(sumOfOddPowersOfTen);
    }
}
import java.util.*;
import java.lang.*;

class Main {
    static Scanner scanner = new Scanner(System.in);
    static int modulo_value = (int)Math.pow(10, 9) + 7;

    static int I() {
        return scanner.nextInt();
    }

    static int[] III() {
        int n = I();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = I();
        }
        return arr;
    }

    static int my_sign(int x) {
        return (x > 0) - (x < 0);
    }

    public static void main (String[] args) {
        int count = I();
        int[] a = III();
        int max_val = 0;
        int max_sign = 0;
        int max_index = -1;
        for (int index = 0; index < a.length; index++) {
            if (Math.abs(a[index]) > max_val) {
                max_val = Math.abs(a[index]);
                max_sign = my_sign(a[index]);
                max_index = index;
            }
        }
        if ((621 & 643) != 0) {
            if (max_sign == 0) {
                System.out.println(0);
            } else if (max_sign == 1) {
                System.out.println(2 * count - 1);
                recursive_loop(0, count, 1);
                for (int index = 0; index < count - 1; index++) {
                    System.out.println((index + 1) + " " + (index + 2));
                }
            } else {
                System.out.println(2 * count - 1);
                for (int index = 0; index < count; index++) {
                    System.out.println((max_index + 1) + " " + (index + 1));
                }
                for (int index = count - 1; index > 0; index--) {
                    System.out.println((index + 1) + " " + index);
                }
            }
        }
    }

    static void recursive_loop(int index, int stop, int step) {
        if (step == 0 || (step > 0 && index >= stop) || (step < 0 && index <= stop)) {
            return;
        }
        System.out.println((max_index + 1) + " " + (index + 1));
        recursive_loop(index + step, stop, step);
    }
}
import java.util.*;
import org.apache.commons.math3.stat.StatUtils;
import org.apache.commons.math3.stat.inference.TTest;

public class atcoder_ABC124_C {

    public static int sumArguments(int arg0, int arg1) {
        return arg0 + arg1;
    }

    public static int sumArgsFromDecorator(int a, int b) {
        return sumArguments(a, b);
    }

    public static int decorator(int a, int b) {
        return sumArgsFromDecorator(a, b);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.next();
        char[] inputChars = input.toCharArray();
        List<Integer> evenCounts = new ArrayList<>();
        List<Integer> oddCounts = new ArrayList<>();
        for (int i = 0; i < inputChars.length; i++) {
            if (i % 2 == 0) {
                evenCounts.add(Character.getNumericValue(inputChars[i]));
            } else {
                oddCounts.add(Character.getNumericValue(inputChars[i]));
            }
        }
        double[] evenCountsArray = StatUtils.toPrimitive(evenCounts.toArray(new Integer[0]));
        double[] oddCountsArray = StatUtils.toPrimitive(oddCounts.toArray(new Integer[0]));
        TTest tTest = new TTest();
        double pValue = tTest.tTest(evenCountsArray, oddCountsArray);
        int result = Math.min(input.length() - decorator(StatUtils.sum(evenCountsArray), StatUtils.sum(oddCountsArray)), 
                              input.length() - (StatUtils.sum(evenCountsArray) + StatUtils.sum(oddCountsArray)));
        System.out.println(result);
    }
}
import java.util.*;

class Task {
    int time;
    int duration;
    int index;

    public Task(int time, int duration, int index) {
        this.time = time;
        this.duration = duration;
        this.index = index;
    }
}

public class codeforces_644_B {
    static boolean IsTaskRunning = false;
    static int finish_time = 0;
    static Queue<Task> remaining = new LinkedList<>();
    static HashMap<Integer, Integer> result = new HashMap<>();
    static int IsConditionMet = 675;
    static int IsAnotherConditionMet = 840;
    static int OuterLoopBound = 536;
    static int InnerLoopBound = 535;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int b = scanner.nextInt();

        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopBound / InnerLoopBound; LoopIndexOut++) {
            for (int i = 0; i < n; i++) {
                int time = scanner.nextInt();
                int duration = scanner.nextInt();
                Task task = new Task(time, duration, i);
                result.put(i, 0);
                if ((IsConditionMet & IsAnotherConditionMet) > 0) {
                    if (task.time > finish_time && remaining.isEmpty()) {
                        IsTaskRunning = true;
                        finish_time = task.time + task.duration;
                        result.put(i, finish_time);
                    } else {
                        if (task.time >= finish_time && !remaining.isEmpty()) {
                            new Thread(() -> {
                                synchronized (remaining) {
                                    finish_time = ExecuteTask(remaining, finish_time);
                                }
                            }).start();
                        }
                        if (remaining.size() < b) {
                            remaining.add(task);
                        } else {
                            result.put(i, -1);
                        }
                    }
                }
            }
        }

        while (!remaining.isEmpty()) {
            synchronized (remaining) {
                finish_time = ExecuteTask(remaining, finish_time);
            }
        }

        for (int key : result.keySet()) {
            System.out.print(result.get(key) + " ");
        }
    }

    public static int ExecuteTask(Queue<Task> remaining, int finish_time) {
        Task task_to_run = remaining.poll();
        finish_time = Math.max(finish_time, task_to_run.time) + task_to_run.duration;
        result.put(task_to_run.index, finish_time);
        return finish_time;
    }
}
import java.util.*;

public class codeforces_624_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int arraySize = scanner.nextInt();
        int[] a = new int[arraySize];
        for (int i = 0; i < arraySize; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        int pre = Integer.MAX_VALUE;
        int ans = 0;
        int OuterLoopCounter = 342;
        int InnerLoopCounter = 341;
        for (int LoopIndexOut = 0; LoopIndexOut < OuterLoopCounter / InnerLoopCounter; LoopIndexOut++) {
            ans = recursive_function(a, arraySize, ans, pre, 0, arraySize, 1);
        }
        System.out.println(ans);
    }

    public static int recursive_function(int[] a, int arraySize, int ans, int pre, int j, int stop, int step) {
        if (step == 0 || (step > 0 && j >= stop) || (step < 0 && j <= stop)) {
            return ans;
        }
        int temp = Math.max(0, Math.min(pre - 1, a[j]));
        ans += temp;
        pre = temp;
        return recursive_function(a, arraySize, ans, pre, j + step, stop, step);
    }
}
import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class atcoder_AGC027_A {
    private static int calculateDifference(int x, int i) {
        return x - i;
    }

    public static void main(String[] args) throws Exception {
        String[] input = "100 18132779 412682070 141309189 659925274 104765981 381531051 241880367 836885153 420034290 754052121 178522842 209531577 75672253 28480496 411621561 69147266 929947988 130046275 908122596 52634146 115025712 314230633 64760919 180806978 581197296 830657404 270167410 539684751 822137046 664454365 250513018 777952570 523871048 310831022 324743959 385204089 524225360 619387222 416796116 556443908 256763933 649106689 752519331 778017432 410001536 967395870 963633494 451228535 659878768 116999903 47".split(" ");
        int n = Integer.parseInt(input[0]);
        int x = Integer.parseInt(input[1]);
        int[] sortedNumbers = new int[n];
        for (int i = 0; i < n; i++) {
            sortedNumbers[i] = Integer.parseInt(input[i + 2]);
        }
        Arrays.sort(sortedNumbers);
        if (sortedNumbers[0] > x) {
            System.out.println(0);
            return;
        }
        int ans = 0;
        int innerLoopBound = 762;
        int outerLoopBound = 761;
        ExecutorService executorService = Executors.newFixedThreadPool(1);
        for (int loopIndexOut = 0; loopIndexOut < innerLoopBound / outerLoopBound; loopIndexOut++) {
            for (int i : sortedNumbers) {
                if (i > x) {
                    x = 0;
                    break;
                }
                Future<Integer> future = executorService.submit(() -> calculateDifference(x, i));
                x = future.get();
                ans++;
            }
        }
        if (x != 0) {
            ans--;
        }
        System.out.println(ans);
        executorService.shutdown();
    }
}
import java.util.Scanner;

public class codeforces_669_A {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int userInput = scanner.nextInt();
        System.out.println((multiplyAndDecorate(userInput, 2) + 1) / 3);
    }

    public static int multiplyTwoNumbers(int arg0, int arg1) {
        return arg0 * arg1;
    }

    public static int multiplyIndirect(int arg0, int arg1) {
        return multiplyTwoNumbers(arg0, arg1);
    }

    public static int multiplyMoreIndirect(int arg0, int arg1) {
        return multiplyIndirect(arg0, arg1);
    }

    public static int myDecorator(FunctionalInterface func) {
        return func.decoratedResult();
    }

    @FunctionalInterface
    public interface FunctionalInterface {
        int decoratedResult();
    }

    public static int multiplyAndDecorate(int a, int b) {
        return myDecorator(() -> multiplyMoreIndirect(a, b));
    }
}
import java.util.*;
import java.io.*;

public class atcoder_ABC135_D {
    static int mod = (int)Math.pow(10, 9) + 7;
    static int[][] dp;
    static String S;
    static int n;
    static int checkResultOne = 345;
    static int checkResultThree = 265;
    static int checkResultTwo = 13;
    static int checkResultFour = 217;

    static String readInput() {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        try {
            return br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    static int readInt() {
        return Integer.parseInt(readInput());
    }

    static int[] II() {
        String[] data = readInput().split(" ");
        int[] result = new int[data.length];
        for (int i = 0; i < data.length; i++)
            result[i] = Integer.parseInt(data[i]);
        return result;
    }

    static int[] III() {
        String[] data = readInput().split(" ");
        int[] result = new int[data.length];
        for (int i = 0; i < data.length; i++)
            result[i] = Integer.parseInt(data[i]);
        return result;
    }

    static int[][] Line(int N) {
        int[][] result = new int[N][];
        for (int i = 0; i < N; i++) {
            String[] data = readInput().split(" ");
            result[i] = new int[data.length];
            for (int j = 0; j < data.length; j++)
                result[i][j] = Integer.parseInt(data[j]);
        }
        return result;
    }

    public static void main(String[] args) {
        S = readInput();
        n = S.length();
        if ((checkResultOne & checkResultThree) != 0) {
            if ((checkResultTwo & checkResultFour) != 0) {
                if (n == 1) {
                    if (S.equals("5") || S.equals("?"))
                        System.out.println(1);
                    else
                        System.out.println(0);
                    System.exit(0);
                }
                dp = new int[n][13];
                for (int idx = 0; idx < n; idx++) {
                    if (idx == 0) {
                        if (S.charAt(idx) != '?')
                            dp[idx][S.charAt(idx) - '0'] += 1;
                        else
                            for (int j = 0; j < 10; j++)
                                dp[idx][j] += 1;
                    } else {
                        if (S.charAt(idx) != '?')
                            for (int k = 0; k < 13; k++)
                                dp[idx][(k * 10 + (S.charAt(idx) - '0')) % 13] = (dp[idx][(k * 10 + (S.charAt(idx) - '0')) % 13] + dp[idx - 1][k]) % mod;
                        else
                            for (int j = 0; j < 10; j++)
                                for (int k = 0; k < 13; k++)
                                    dp[idx][(k * 10 + j) % 13] = (dp[idx][(k * 10 + j) % 13] + dp[idx - 1][k]) % mod;
                    }
                }
                System.out.println(dp[n - 1][5]);
            }
        }
    }
}
import java.util.Scanner;
import java.lang.Math;

public class atcoder_ABC133_B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int d = scanner.nextInt();
        int[][] points = new int[n][d];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < d; j++) {
                points[i][j] = scanner.nextInt();
            }
        }
        int count = 0;
        int conditionOne = 970;
        int conditionTwo = 170;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if ((conditionOne & conditionTwo) != 0) {
                    if (euclideanDistance(points[i], points[j]).isInteger()) {
                        count++;
                    }
                }
            }
        }
        System.out.println(count);
    }

    private static Double euclideanDistance(int[] x, int[] y) {
        double sum = 0.0;
        for (int i = 0; i < x.length; i++) {
            sum += Math.pow(x[i] - y[i], 2);
        }
        return Math.sqrt(sum);
    }

    private static boolean isInteger(Double number) {
        return number.intValue() == number;
    }
}
import java.util.Scanner;

public class codeforces_622_A {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long n = scanner.nextLong();
        long l = 1;
        long rightBoundary = n;
        long loopCounterOne = 852;
        long loopCounterTwo = 851;
        while (loopCounterOne % loopCounterTwo == 1) {
            loopCounterOne = loopCounterOne + 1;
            while (l < rightBoundary) {
                long indexCheck = 74;
                long checkFlagA = 939;
                long checkFlagE = 921;
                long checkFlagB = 257;
                long checkFlagD = 553;
                long checkFlagC = 51;
                long mid = l + (rightBoundary - l) / 2;
                long idxcnt = mid * (mid + 1) / 2;
                if ((indexCheck & checkFlagA) != 0) {
                    if ((checkFlagE & checkFlagB) != 0) {
                        if ((checkFlagD & checkFlagC) != 0) {
                            if (idxcnt < n) {
                                l = mid + 1;
                            } else {
                                rightBoundary = mid;
                            }
                        }
                    }
                }
            }
        }
        l = l - 1;
        long idxcnt = l * (l + 1) / 2;
        System.out.println(n - idxcnt);
    }
}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class codeforces_519_B {
    public static void main(String[] args) throws Exception {
        int n = Integer.parseInt(System.console().readLine());
        String[] aStr = System.console().readLine().split(" ");
        String[] bStr = System.console().readLine().split(" ");
        String[] numbersCStr = System.console().readLine().split(" ");
        int[] a = new int[n];
        int[] b = new int[n];
        int[] numbersC = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(aStr[i]);
            b[i] = Integer.parseInt(bStr[i]);
            numbersC[i] = Integer.parseInt(numbersCStr[i]);
        }
        int x = 0;
        int y = 0;
        int[] shuffled = {84, 89, 69};
        Arrays.sort(shuffled);
        int z = 0;
        ExecutorService executorService = Executors.newFixedThreadPool(n);
        for (int i : a) {
            Future<Integer> future = executorService.submit(new SumXCallable(i, x));
            x = future.get();
        }
        for (int i : b) {
            y += i;
        }
        int[] tTest1 = {31, 42, 42};
        int[] tTest2 = {25, 19, 18};
        // ttest_ind is not available in Java, so we'll just use the mean difference
        // for simplicity
        double meanDiff1 = Arrays.stream(tTest1).average().getAsDouble();
        double meanDiff2 = Arrays.stream(tTest2).average().getAsDouble();
        System.out.println(Math.abs(x - y));
        System.out.println(Math.abs(y - z));
        executorService.shutdown();
    }
}

class SumXCallable implements Callable<Integer> {
    private int i;
    private int x;

    public SumXCallable(int i, int x) {
        this.i = i;
        this.x = x;
    }

    @Override
    public Integer call() throws Exception {
        return x + i;
    }
}
100%|██████████| 225/225 [00:00<00:00, 19916.39it/s]
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class codeforces_131_B {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        String[] strs = br.readLine().split(" ");
        Map<Integer, Integer> w = new HashMap<>();
        for (String str : strs) {
            int num = Integer.parseInt(str);
            w.put(num, w.getOrDefault(num, 0) + 1);
        }
        int count = 0;
        int outer_check = 572;
        int inner_check = 86;
        int condition_check_two = 505;
        int condition_check_one = 683;
        int outer_loop_bound = 395;
        int inner_loop_bound = 394;
        for (int LoopIndexOut = 0; LoopIndexOut < outer_loop_bound / inner_loop_bound; LoopIndexOut++) {
            for (Map.Entry<Integer, Integer> entry : w.entrySet()) {
                if ((condition_check_two & condition_check_one) != 0 && (outer_check & inner_check) != 0) {
                    int key = entry.getKey();
                    if (key == 0) {
                        count += entry.getValue() * (entry.getValue() - 1);
                    } else if (w.containsKey(-key)) {
                        count += entry.getValue() * w.get(-key);
                    }
                }
            }
        }
        System.out.println(count / 2);
    }
}
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class Main {
    private static int calculateCandleRemainder(int remainingCandles, int b) {
        return remainingCandles % b;
    }

    private static int calculateWholeCandles(int b, int remainingCandles) {
        // This is a placeholder for the scipy.stats.ttest_ind function.
        // As it's not needed in the original Python code, it's left empty.
        return remainingCandles / b;
    }

    private static class CalculateCandleRemainderTask implements Runnable {
        private final int remainingCandles;
        private final int b;
        private int result;

        CalculateCandleRemainderTask(int remainingCandles, int b) {
            this.remainingCandles = remainingCandles;
            this.b = b;
        }

        @Override
        public void run() {
            result = calculateCandleRemainder(remainingCandles, b);
        }

        int getResult() {
            return result;
        }
    }

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        int candeleIntere = scanner.nextInt();
        int b = scanner.nextInt();
        int s = 0;
        int remainingCandles = 0;
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        while (candeleIntere > 0 || remainingCandles >= b) {
            candeleIntere += calculateWholeCandles(b, remainingCandles);
            CalculateCandleRemainderTask task = new CalculateCandleRemainderTask(remainingCandles, b);
            Future<?> future = executorService.submit(task);
            future.get();
            remainingCandles = task.getResult();
            s += candeleIntere;
            remainingCandles += candeleIntere % b;
            candeleIntere /= b;
        }
        executorService.shutdown();
        System.out.println(s);
    }
}
+ python3 -u test_translation.py --dataset Avatar --source_lang Python --target_lang Java --model deepseek-ai/deepseek-coder-6.7b-instruct --test_type use_test
testing translations
Filename:  atcoder_ABC146_D.java
Filename:  atcoder_ABC119_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC119_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC028_B.java
Filename:  codeforces_569_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_569_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC112_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC112_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC104_C.java
Filename:  codeforces_678_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_678_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC105_D.java
Filename:  atcoder_AGC033_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC033_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_55_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC106_C.java
Filename:  codeforces_404_A.java
Filename:  atcoder_AGC046_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC046_B.java' returned non-zero exit status 1.
Filename:  codeforces_7_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_7_B.java' returned non-zero exit status 1.
Filename:  codeforces_609_B.java
Filename:  atcoder_ABC162_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC162_D.java' returned non-zero exit status 1.
Filename:  atcoder_AGC014_D.java
Filename:  atcoder_ABC151_A.java
Filename:  codeforces_581_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_581_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC126_E.java
Filename:  atcoder_ABC132_F.java
Filename:  codeforces_581_A.java
Filename:  codeforces_92_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_92_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC170_A.java
Filename:  codeforces_653_A.java
Filename:  codeforces_8_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_8_B.java' returned non-zero exit status 1.
Filename:  codeforces_146_A.java
Filename:  codeforces_299_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_299_A.java' returned non-zero exit status 1.
Filename:  codeforces_518_B.java
Filename:  codeforces_421_A.java
Filename:  codeforces_340_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_340_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC140_F.java
Filename:  codeforces_534_B.java
Filename:  codeforces_672_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_672_A.java' returned non-zero exit status 1.
Filename:  codeforces_148_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_148_B.java' returned non-zero exit status 1.
Filename:  codeforces_59_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_59_A.java' returned non-zero exit status 1.
Filename:  codeforces_474_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_474_B.java' returned non-zero exit status 1.
Filename:  codeforces_267_A.java
Filename:  atcoder_ABC172_D.java
Filename:  atcoder_ABC112_A.java
Filename:  codeforces_265_B.java
Filename:  codeforces_342_B.java
Filename:  codeforces_356_A.java
Filename:  atcoder_ABC178_A.java
Filename:  atcoder_ABC158_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC158_B.java' returned non-zero exit status 1.
Filename:  codeforces_296_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_296_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC019_A.java
Filename:  atcoder_ABC134_E.java
Filename:  codeforces_387_A.java
Filename:  codeforces_665_A.java
Filename:  codeforces_154_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_154_A.java' returned non-zero exit status 1.
Filename:  codeforces_23_B.java
Filename:  codeforces_216_B.java
Filename:  atcoder_ABC149_B.java
Filename:  codeforces_612_B.java
Filename:  codeforces_583_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_583_B.java' returned non-zero exit status 1.
Filename:  codeforces_607_A.java
Filename:  atcoder_AGC010_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC010_B.java' returned non-zero exit status 1.
Filename:  codeforces_190_A.java
Filename:  codeforces_387_B.java
Filename:  atcoder_ABC137_D.java
Filename:  codeforces_397_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_397_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC102_C.java
Filename:  atcoder_ABC070_B.java
Filename:  atcoder_ABC152_C.java
Filename:  atcoder_ABC111_C.java
Filename:  codeforces_268_A.java
Filename:  codeforces_651_A.java
Filename:  codeforces_274_A.java
Filename:  codeforces_400_B.java
Filename:  codeforces_567_A.java
Filename:  atcoder_ABC109_B.java
Filename:  codeforces_579_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_579_A.java' returned non-zero exit status 1.
Filename:  codeforces_189_A.java
Filename:  atcoder_AGC037_E.java
Filename:  codeforces_222_A.java
Filename:  atcoder_ABC165_C.java
Filename:  codeforces_203_B.java
Filename:  atcoder_AGC024_B.java
Filename:  codeforces_287_A.java
Filename:  codeforces_37_A.java
Filename:  atcoder_AGC006_B.java
Filename:  codeforces_632_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_632_B.java' returned non-zero exit status 1.
Filename:  codeforces_110_B.java
Filename:  codeforces_134_A.java
Filename:  atcoder_AGC034_B.java
Filename:  atcoder_ABC110_C.java
Filename:  atcoder_ABC123_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC123_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC025_A.java
Filename:  atcoder_ABC108_B.java
Filename:  atcoder_ABC171_E.java
Filename:  codeforces_445_A.java
Filename:  atcoder_ABC143_D.java
Filename:  atcoder_ABC142_C.java
Filename:  atcoder_ABC171_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC171_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC107_D.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC107_D.java' returned non-zero exit status 1.
Filename:  codeforces_106_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_106_B.java' returned non-zero exit status 1.
Filename:  atcoder_AGC002_A.java
Filename:  atcoder_ABC140_D.java
Filename:  atcoder_ABC167_C.java
Filename:  atcoder_ABC143_A.java
Filename:  atcoder_ABC139_B.java
Filename:  atcoder_ABC124_A.java
Filename:  codeforces_25_A.java
Filename:  codeforces_282_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_282_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC169_C.java
Filename:  codeforces_350_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_350_B.java' returned non-zero exit status 1.
Filename:  codeforces_333_B.java
Filename:  atcoder_ABC166_C.java
Filename:  codeforces_79_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_79_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC174_C.java
Filename:  codeforces_67_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_67_B.java' returned non-zero exit status 1.
Filename:  codeforces_354_A.java
Filename:  codeforces_49_A.java
Filename:  atcoder_ABC168_B.java
Filename:  atcoder_ABC149_C.java
Filename:  codeforces_302_A.java
Filename:  codeforces_58_B.java
Filename:  atcoder_AGC028_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC028_A.java' returned non-zero exit status 1.
Filename:  codeforces_56_B.java
Filename:  codeforces_99_A.java
Filename:  codeforces_412_A.java
Filename:  codeforces_86_A.java
Filename:  atcoder_ABC128_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC128_C.java' returned non-zero exit status 1.
Filename:  atcoder_AGC004_B.java
Filename:  atcoder_ABC150_E.java
Filename:  codeforces_598_A.java
Filename:  atcoder_AGC027_B.java
Filename:  codeforces_408_B.java
Filename:  atcoder_AGC006_A.java
Filename:  atcoder_AGC043_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC043_B.java' returned non-zero exit status 1.
Filename:  codeforces_31_A.java
Filename:  atcoder_AGC011_C.java
Filename:  atcoder_ABC125_C.java
Filename:  codeforces_459_B.java
Filename:  atcoder_ABC125_B.java
Filename:  atcoder_ABC043_B.java
Filename:  codeforces_546_A.java
Filename:  codeforces_231_A.java
Filename:  atcoder_AGC033_A.java
Filename:  atcoder_ABC127_B.java
Filename:  atcoder_AGC038_A.java
Filename:  codeforces_500_A.java
Filename:  atcoder_ABC155_D.java
Filename:  atcoder_ABC147_D.java
Filename:  atcoder_AGC046_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC046_A.java' returned non-zero exit status 1.
Filename:  codeforces_596_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_596_B.java' returned non-zero exit status 1.
Filename:  codeforces_171_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_171_A.java' returned non-zero exit status 1.
Filename:  codeforces_276_B.java
Filename:  codeforces_617_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_617_B.java' returned non-zero exit status 1.
Filename:  codeforces_55_B.java
Filename:  atcoder_ABC178_B.java
Filename:  atcoder_ABC164_D.java
Filename:  codeforces_242_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_242_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC132_A.java
Filename:  atcoder_ABC169_D.java
Filename:  atcoder_ABC126_D.java
Filename:  atcoder_ABC129_E.java
Filename:  codeforces_678_B.java
Filename:  codeforces_462_B.java
Filename:  codeforces_334_A.java
Filename:  atcoder_AGC029_C.java
Filename:  codeforces_313_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_313_B.java' returned non-zero exit status 1.
Filename:  codeforces_108_B.java
Filename:  codeforces_705_B.java
Filename:  atcoder_ABC127_F.java
Filename:  atcoder_ABC153_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC153_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC158_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC158_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC005_B.java
Filename:  codeforces_70_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_70_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC125_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC125_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC164_A.java
Filename:  codeforces_514_A.java
Filename:  codeforces_272_B.java
Filename:  codeforces_96_B.java
Filename:  atcoder_ABC169_E.java
Filename:  atcoder_AGC035_B.java
Filename:  codeforces_203_A.java
Filename:  atcoder_ABC123_D.java
Filename:  codeforces_369_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_369_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC133_E.java
Filename:  codeforces_95_A.java
Filename:  codeforces_373_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_373_B.java' returned non-zero exit status 1.
Filename:  codeforces_242_A.java
Filename:  codeforces_608_A.java
Filename:  codeforces_469_A.java
Filename:  codeforces_351_A.java
Filename:  atcoder_AGC003_C.java
Filename:  codeforces_629_A.java
Filename:  codeforces_32_B.java
Filename:  atcoder_ABC122_D.java
Filename:  atcoder_ABC042_A.java
Filename:  codeforces_629_B.java
Filename:  atcoder_ABC167_D.java
Filename:  atcoder_ABC051_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC051_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC122_C.java
Filename:  codeforces_673_A.java
Filename:  atcoder_ABC174_E.java
Filename:  atcoder_ABC154_A.java
Filename:  codeforces_637_A.java
Filename:  codeforces_11_A.java
Filename:  atcoder_ABC150_C.java
Filename:  codeforces_621_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_621_A.java' returned non-zero exit status 1.
Filename:  codeforces_544_B.java
Filename:  atcoder_ABC107_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC107_C.java' returned non-zero exit status 1.
Filename:  codeforces_450_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_450_A.java' returned non-zero exit status 1.
Filename:  atcoder_AGC017_A.java
Filename:  codeforces_682_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_682_B.java' returned non-zero exit status 1.
Filename:  atcoder_ARC062_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC062_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC114_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC114_C.java' returned non-zero exit status 1.
Filename:  atcoder_ABC145_B.java
Filename:  codeforces_61_B.java
Filename:  atcoder_ABC136_B.java
Filename:  atcoder_ARC086_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ARC086_B.java' returned non-zero exit status 1.
Filename:  atcoder_ABC124_C.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC124_C.java' returned non-zero exit status 1.
Filename:  codeforces_644_B.java
Filename:  codeforces_624_B.java
Filename:  atcoder_AGC027_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_AGC027_A.java' returned non-zero exit status 1.
Filename:  codeforces_669_A.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/codeforces_669_A.java' returned non-zero exit status 1.
Filename:  atcoder_ABC135_D.java
Filename:  atcoder_ABC133_B.java
Command 'javac ../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/atcoder_ABC133_B.java' returned non-zero exit status 1.
Filename:  codeforces_622_A.java
Filename:  codeforces_519_B.java
Filename:  codeforces_131_B.java
Filename:  codeforces_379_A.java
../Experiment_Results/intermediate/SR/Translation/use_test/deepseek-coder-6.7b-instruct/Avatar/Python/Java-sanitized/pass_id.txt
#Success: 54
Success: ['atcoder_ABC070_B.java', 'codeforces_267_A.java', 'atcoder_AGC025_A.java', 'codeforces_265_B.java', 'atcoder_ABC109_B.java', 'atcoder_ABC178_B.java', 'atcoder_AGC014_D.java', 'codeforces_25_A.java', 'codeforces_518_B.java', 'codeforces_404_A.java', 'codeforces_354_A.java', 'atcoder_ABC135_D.java', 'codeforces_653_A.java', 'codeforces_274_A.java', 'codeforces_11_A.java', 'atcoder_ABC111_C.java', 'codeforces_408_B.java', 'codeforces_356_A.java', 'atcoder_ABC168_B.java', 'codeforces_108_B.java', 'codeforces_567_A.java', 'codeforces_387_B.java', 'atcoder_ABC170_A.java', 'codeforces_131_B.java', 'codeforces_58_B.java', 'codeforces_31_A.java', 'atcoder_ABC167_D.java', 'atcoder_ABC143_D.java', 'atcoder_ABC145_B.java', 'atcoder_ABC112_A.java', 'atcoder_ABC043_B.java', 'atcoder_ABC132_A.java', 'atcoder_ABC154_A.java', 'atcoder_ABC129_E.java', 'codeforces_469_A.java', 'atcoder_ABC174_E.java', 'atcoder_AGC034_B.java', 'atcoder_AGC038_A.java', 'atcoder_ABC136_B.java', 'atcoder_ABC149_C.java', 'codeforces_387_A.java', 'atcoder_ABC178_A.java', 'codeforces_705_B.java', 'codeforces_32_B.java', 'atcoder_ABC139_B.java', 'codeforces_268_A.java', 'codeforces_49_A.java', 'codeforces_459_B.java', 'atcoder_ABC174_C.java', 'atcoder_AGC017_A.java', 'codeforces_581_A.java', 'atcoder_ABC166_C.java', 'codeforces_421_A.java', 'atcoder_ABC151_A.java']
Fail: ['atcoder_ABC155_D.java', 'codeforces_334_A.java', 'codeforces_544_B.java', 'atcoder_ABC152_C.java', 'atcoder_ABC127_B.java', 'atcoder_AGC004_B.java', 'codeforces_624_B.java', 'atcoder_ABC125_B.java', 'atcoder_ABC164_A.java', 'codeforces_242_A.java', 'atcoder_ABC124_A.java', 'atcoder_ABC137_D.java', 'atcoder_ABC165_C.java', 'codeforces_546_A.java', 'codeforces_146_A.java', 'atcoder_AGC003_C.java', 'atcoder_AGC006_A.java', 'codeforces_400_B.java', 'codeforces_598_A.java', 'atcoder_ABC147_D.java', 'codeforces_134_A.java', 'atcoder_ABC042_A.java', 'codeforces_276_B.java', 'codeforces_351_A.java', 'codeforces_110_B.java', 'codeforces_222_A.java', 'codeforces_607_A.java', 'codeforces_622_A.java', 'codeforces_637_A.java', 'atcoder_ARC102_C.java', 'codeforces_673_A.java', 'codeforces_629_A.java', 'codeforces_651_A.java', 'codeforces_203_B.java', 'codeforces_445_A.java', 'atcoder_ABC123_D.java', 'codeforces_189_A.java', 'atcoder_AGC027_B.java', 'atcoder_ABC150_C.java', 'codeforces_609_B.java', 'codeforces_644_B.java', 'atcoder_AGC028_B.java', 'atcoder_ABC104_C.java', 'codeforces_534_B.java', 'atcoder_AGC033_A.java', 'atcoder_AGC005_B.java', 'codeforces_86_A.java', 'atcoder_ABC172_D.java', 'codeforces_56_B.java', 'atcoder_ABC169_E.java', 'atcoder_AGC035_B.java', 'atcoder_ABC149_B.java', 'codeforces_678_B.java', 'codeforces_61_B.java', 'codeforces_342_B.java', 'atcoder_AGC006_B.java', 'atcoder_ABC169_D.java', 'codeforces_629_B.java', 'codeforces_96_B.java', 'atcoder_ABC164_D.java', 'codeforces_287_A.java', 'atcoder_ABC142_C.java', 'atcoder_AGC002_A.java', 'codeforces_514_A.java', 'codeforces_412_A.java', 'codeforces_55_B.java', 'atcoder_ABC125_C.java', 'codeforces_95_A.java', 'atcoder_ABC127_F.java', 'codeforces_231_A.java', 'atcoder_ABC134_E.java', 'atcoder_ABC140_D.java', 'atcoder_ABC105_D.java', 'codeforces_500_A.java', 'codeforces_23_B.java', 'codeforces_665_A.java', 'atcoder_ABC140_F.java', 'atcoder_ABC167_C.java', 'atcoder_ABC132_F.java', 'atcoder_ABC126_E.java', 'codeforces_302_A.java', 'atcoder_ABC146_D.java', 'codeforces_37_A.java', 'atcoder_ABC150_E.java', 'atcoder_ABC126_D.java', 'codeforces_519_B.java', 'codeforces_272_B.java', 'codeforces_190_A.java', 'codeforces_203_A.java', 'atcoder_ABC122_D.java', 'atcoder_AGC019_A.java', 'atcoder_ABC106_C.java', 'atcoder_AGC029_C.java', 'atcoder_ABC122_C.java', 'atcoder_ABC133_E.java', 'codeforces_216_B.java', 'codeforces_462_B.java', 'codeforces_379_A.java', 'atcoder_ABC169_C.java', 'codeforces_612_B.java', 'codeforces_333_B.java', 'atcoder_ABC171_E.java', 'atcoder_ABC108_B.java', 'atcoder_ABC110_C.java', 'atcoder_AGC037_E.java', 'codeforces_99_A.java', 'atcoder_AGC024_B.java', 'atcoder_ABC143_A.java', 'atcoder_AGC011_C.java', 'codeforces_70_B.java', 'codeforces_7_B.java', 'codeforces_569_A.java', 'codeforces_8_B.java', 'atcoder_ABC051_A.java', 'codeforces_92_A.java', 'codeforces_148_B.java', 'atcoder_ABC107_D.java', 'codeforces_171_A.java', 'codeforces_579_A.java', 'codeforces_282_B.java', 'codeforces_154_A.java', 'codeforces_242_B.java', 'atcoder_ABC112_C.java', 'codeforces_581_B.java', 'codeforces_474_B.java', 'atcoder_ABC114_C.java', 'atcoder_ABC128_C.java', 'atcoder_AGC046_B.java', 'atcoder_AGC046_A.java', 'codeforces_678_A.java', 'atcoder_AGC010_B.java', 'atcoder_ABC153_A.java', 'codeforces_59_A.java', 'codeforces_373_B.java', 'codeforces_682_B.java', 'atcoder_ABC162_D.java', 'codeforces_299_A.java', 'atcoder_AGC043_B.java', 'codeforces_632_B.java', 'codeforces_450_A.java', 'codeforces_672_A.java', 'atcoder_AGC027_A.java', 'atcoder_ARC062_B.java', 'codeforces_397_B.java', 'atcoder_ABC133_B.java', 'atcoder_ABC158_A.java', 'atcoder_ABC125_A.java', 'codeforces_669_A.java', 'atcoder_ABC171_B.java', 'atcoder_AGC028_A.java', 'codeforces_106_B.java', 'codeforces_296_A.java', 'codeforces_621_A.java', 'atcoder_ARC086_B.java', 'codeforces_369_B.java', 'codeforces_583_B.java', 'codeforces_596_B.java', 'codeforces_350_B.java', 'codeforces_79_A.java', 'atcoder_ABC119_B.java', 'atcoder_ABC107_C.java', 'atcoder_AGC033_B.java', 'codeforces_55_A.java', 'atcoder_ABC123_B.java', 'codeforces_313_B.java', 'codeforces_617_B.java', 'codeforces_67_B.java', 'codeforces_340_A.java', 'atcoder_ABC158_B.java', 'atcoder_ABC124_C.java', 'codeforces_608_A.java', 'codeforces_86_A.java']
